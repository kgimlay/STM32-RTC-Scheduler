
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068dc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006a1c  08006a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb8  08006bb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bc0  08006bc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08006c38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006c38  00020294  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001514d  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea9  00000000  00000000  000351e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00038090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  00039478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df28  00000000  00000000  0003a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014107  00000000  00000000  00058660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8809  00000000  00000000  0006c767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  00124fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006a04 	.word	0x08006a04

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006a04 	.word	0x08006a04

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fd7a 	bl	8001038 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000015c 	.word	0x2000015c

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fd70 	bl	8001054 <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f000 fe21 	bl	80011e8 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS], unsigned int numEvents) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <calendar_setEvents+0x24>)
 80005c0:	f005 fd98 	bl	80060f4 <memcpy>
	_numberEvents = numEvents;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <calendar_setEvents+0x28>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	20000154 	.word	0x20000154

080005dc <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	DateTime nextAlarm;

	// get calendar alarm for next alarm in event list relative to now
	nextAlarm = getNextAlarm();
 80005e2:	463b      	mov	r3, r7
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f8a3 	bl	8000730 <getNextAlarm>

	// set alarm for start of first event in list
	setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005ea:	78b8      	ldrb	r0, [r7, #2]
 80005ec:	78f9      	ldrb	r1, [r7, #3]
 80005ee:	793a      	ldrb	r2, [r7, #4]
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	f000 fe8d 	bl	8001310 <setAlarm_A>

	// make sure that alarm fired is cleared/reset
	_alarmFired = false;
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <calendar_start+0x28>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000158 	.word	0x20000158

08000608 <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
	DateTime nextAlarm;

	if (_alarmFired) {
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <calendar_handleAlarm+0x60>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d023      	beq.n	8000660 <calendar_handleAlarm+0x58>
		// get calendar alarm for next alarm in event list relative to now
		nextAlarm = getNextAlarm();
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f887 	bl	8000730 <getNextAlarm>

		// set alarm for start of first event in list
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000622:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8000626:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800062a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800062e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000632:	f000 fe6d 	bl	8001310 <setAlarm_A>

		// reset alarm fired flag
		_alarmFired = false;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <calendar_handleAlarm+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

		// send message for debugging
		char messageBody[UART_MESSAGE_BODY_SIZE] = "\n\nALARM EVENT!\n\n\0";
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <calendar_handleAlarm+0x64>)
 800063e:	1d3c      	adds	r4, r7, #4
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	8023      	strh	r3, [r4, #0]
 800064a:	f107 0316 	add.w	r3, r7, #22
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	811a      	strh	r2, [r3, #8]
		uartBasic_TX_Poll("\0\0\0\0", messageBody);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <calendar_handleAlarm+0x68>)
 800065c:	f001 f848 	bl	80016f0 <uartBasic_TX_Poll>
	}

	else {

	}
}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bdb0      	pop	{r4, r5, r7, pc}
 8000668:	20000158 	.word	0x20000158
 800066c:	08006a24 	.word	0x08006a24
 8000670:	08006a1c 	.word	0x08006a1c

08000674 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmFired = true;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <calendar_AlarmA_ISR+0x14>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000158 	.word	0x20000158

0800068c <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	f107 0408 	add.w	r4, r7, #8
 8000696:	e884 0003 	stmia.w	r4, {r0, r1}
 800069a:	4639      	mov	r1, r7
 800069c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006a8:	f000 f80e 	bl	80006c8 <dateTimeToSeconds>
 80006ac:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 80006ae:	463b      	mov	r3, r7
 80006b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006b4:	f000 f808 	bl	80006c8 <dateTimeToSeconds>
 80006b8:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	1ad3      	subs	r3, r2, r3
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	371c      	adds	r7, #28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}

080006c8 <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	463b      	mov	r3, r7
 80006d0:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80006d8:	793b      	ldrb	r3, [r7, #4]
 80006da:	461a      	mov	r2, r3
 80006dc:	4613      	mov	r3, r2
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80006e6:	78fb      	ldrb	r3, [r7, #3]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80006ee:	fb01 f303 	mul.w	r3, r1, r3
 80006f2:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80006f4:	78bb      	ldrb	r3, [r7, #2]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	490a      	ldr	r1, [pc, #40]	; (8000724 <dateTimeToSeconds+0x5c>)
 80006fa:	fb01 f303 	mul.w	r3, r1, r3
 80006fe:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000700:	787b      	ldrb	r3, [r7, #1]
 8000702:	3b01      	subs	r3, #1
 8000704:	4908      	ldr	r1, [pc, #32]	; (8000728 <dateTimeToSeconds+0x60>)
 8000706:	fb01 f303 	mul.w	r3, r1, r3
 800070a:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 800070c:	783b      	ldrb	r3, [r7, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <dateTimeToSeconds+0x64>)
 8000712:	fb01 f303 	mul.w	r3, r1, r3
 8000716:	4413      	add	r3, r2
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	00015180 	.word	0x00015180
 8000728:	00278d00 	.word	0x00278d00
 800072c:	01da9c00 	.word	0x01da9c00

08000730 <getNextAlarm>:


/*
 *
 */
DateTime getNextAlarm(void) {
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000732:	b095      	sub	sp, #84	; 0x54
 8000734:	af06      	add	r7, sp, #24
 8000736:	6078      	str	r0, [r7, #4]
	int eventIdx;
	bool nextAlarmFound;
	DateTime now;
	DateTime nextAlarmDateTime = {0};
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.month, &now.minute, &now.second);
 8000742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000746:	1c5c      	adds	r4, r3, #1
 8000748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074c:	1c9a      	adds	r2, r3, #2
 800074e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000752:	1c59      	adds	r1, r3, #1
 8000754:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075c:	3305      	adds	r3, #5
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000764:	3304      	adds	r3, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	4623      	mov	r3, r4
 800076a:	f000 fd3d 	bl	80011e8 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any events, within an event, between events, or after all the events.
	eventIdx = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
	nextAlarmFound = false;
 8000772:	2300      	movs	r3, #0
 8000774:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000778:	e0bf      	b.n	80008fa <getNextAlarm+0x1ca>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 800077a:	4989      	ldr	r1, [pc, #548]	; (80009a0 <getNextAlarm+0x270>)
 800077c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	440b      	add	r3, r1
 8000788:	cb0c      	ldmia	r3, {r2, r3}
 800078a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800078e:	c903      	ldmia	r1, {r0, r1}
 8000790:	f7ff ff7c 	bl	800068c <compareDateTime>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	da44      	bge.n	8000824 <getNextAlarm+0xf4>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 800079a:	4981      	ldr	r1, [pc, #516]	; (80009a0 <getNextAlarm+0x270>)
 800079c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 80007ae:	497c      	ldr	r1, [pc, #496]	; (80009a0 <getNextAlarm+0x270>)
 80007b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b2:	4613      	mov	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	440b      	add	r3, r1
 80007bc:	3301      	adds	r3, #1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 80007c4:	4976      	ldr	r1, [pc, #472]	; (80009a0 <getNextAlarm+0x270>)
 80007c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	440b      	add	r3, r1
 80007d2:	3302      	adds	r3, #2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 80007da:	4971      	ldr	r1, [pc, #452]	; (80009a0 <getNextAlarm+0x270>)
 80007dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	3303      	adds	r3, #3
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 80007f0:	496b      	ldr	r1, [pc, #428]	; (80009a0 <getNextAlarm+0x270>)
 80007f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	3304      	adds	r3, #4
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 8000806:	4966      	ldr	r1, [pc, #408]	; (80009a0 <getNextAlarm+0x270>)
 8000808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	440b      	add	r3, r1
 8000814:	3305      	adds	r3, #5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			// set found
			nextAlarmFound = true;
 800081c:	2301      	movs	r3, #1
 800081e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000822:	e06a      	b.n	80008fa <getNextAlarm+0x1ca>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 8000824:	495e      	ldr	r1, [pc, #376]	; (80009a0 <getNextAlarm+0x270>)
 8000826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	440b      	add	r3, r1
 8000832:	cb0c      	ldmia	r3, {r2, r3}
 8000834:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000838:	c903      	ldmia	r1, {r0, r1}
 800083a:	f7ff ff27 	bl	800068c <compareDateTime>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	db57      	blt.n	80008f4 <getNextAlarm+0x1c4>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 8000844:	4956      	ldr	r1, [pc, #344]	; (80009a0 <getNextAlarm+0x270>)
 8000846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000848:	4613      	mov	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	440b      	add	r3, r1
 8000852:	3308      	adds	r3, #8
 8000854:	3304      	adds	r3, #4
 8000856:	cb0c      	ldmia	r3, {r2, r3}
 8000858:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800085c:	c903      	ldmia	r1, {r0, r1}
 800085e:	f7ff ff15 	bl	800068c <compareDateTime>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	da45      	bge.n	80008f4 <getNextAlarm+0x1c4>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 8000868:	494d      	ldr	r1, [pc, #308]	; (80009a0 <getNextAlarm+0x270>)
 800086a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	440b      	add	r3, r1
 8000876:	330c      	adds	r3, #12
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 800087e:	4948      	ldr	r1, [pc, #288]	; (80009a0 <getNextAlarm+0x270>)
 8000880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	440b      	add	r3, r1
 800088c:	330d      	adds	r3, #13
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 8000894:	4942      	ldr	r1, [pc, #264]	; (80009a0 <getNextAlarm+0x270>)
 8000896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	330e      	adds	r3, #14
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 80008aa:	493d      	ldr	r1, [pc, #244]	; (80009a0 <getNextAlarm+0x270>)
 80008ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	440b      	add	r3, r1
 80008b8:	330f      	adds	r3, #15
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 80008c0:	4937      	ldr	r1, [pc, #220]	; (80009a0 <getNextAlarm+0x270>)
 80008c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	3310      	adds	r3, #16
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 80008d6:	4932      	ldr	r1, [pc, #200]	; (80009a0 <getNextAlarm+0x270>)
 80008d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	3311      	adds	r3, #17
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			// set found
			nextAlarmFound = true;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80008f2:	e002      	b.n	80008fa <getNextAlarm+0x1ca>
		}

		// traverse to next event
		else {
			eventIdx++;
 80008f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f6:	3301      	adds	r3, #1
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <getNextAlarm+0x274>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000900:	429a      	cmp	r2, r3
 8000902:	da07      	bge.n	8000914 <getNextAlarm+0x1e4>
 8000904:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000908:	f083 0301 	eor.w	r3, r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	f47f af33 	bne.w	800077a <getNextAlarm+0x4a>
		}
	}

	// If there is no next alarm, then return a generic alarm for
	// the beginning of time (1/1/99 0:0:0)
	if (!nextAlarmFound) {
 8000914:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000918:	f083 0301 	eor.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d011      	beq.n	8000946 <getNextAlarm+0x216>
		nextAlarmDateTime.year = 99;
 8000922:	2363      	movs	r3, #99	; 0x63
 8000924:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		nextAlarmDateTime.month = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		nextAlarmDateTime.day = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		nextAlarmDateTime.hour = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		nextAlarmDateTime.minute = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		nextAlarmDateTime.second = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	}

	// Return the next alarm found.
	char messageBody[UART_MESSAGE_BODY_SIZE];
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", nextAlarmDateTime.year, nextAlarmDateTime.month, nextAlarmDateTime.day, nextAlarmDateTime.hour, nextAlarmDateTime.minute, nextAlarmDateTime.second);
 8000946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800094a:	461e      	mov	r6, r3
 800094c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000950:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000954:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8000958:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800095c:	4604      	mov	r4, r0
 800095e:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8000962:	4605      	mov	r5, r0
 8000964:	f107 0008 	add.w	r0, r7, #8
 8000968:	9504      	str	r5, [sp, #16]
 800096a:	9403      	str	r4, [sp, #12]
 800096c:	9102      	str	r1, [sp, #8]
 800096e:	9201      	str	r2, [sp, #4]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	4633      	mov	r3, r6
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <getNextAlarm+0x278>)
 8000976:	211c      	movs	r1, #28
 8000978:	f005 fbd2 	bl	8006120 <sniprintf>
	uartBasic_TX_Poll("NEXT", messageBody);
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4619      	mov	r1, r3
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <getNextAlarm+0x27c>)
 8000984:	f000 feb4 	bl	80016f0 <uartBasic_TX_Poll>
	return nextAlarmDateTime;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	461a      	mov	r2, r3
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	6010      	str	r0, [r2, #0]
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	8093      	strh	r3, [r2, #4]
}
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	373c      	adds	r7, #60	; 0x3c
 800099c:	46bd      	mov	sp, r7
 800099e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	20000154 	.word	0x20000154
 80009a8:	08006a40 	.word	0x08006a40
 80009ac:	08006a64 	.word	0x08006a64

080009b0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009c0:	f023 0218 	bic.w	r2, r3, #24
 80009c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4013      	ands	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
	...

08000a0c <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_UART_ErrorCallback+0x28>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d006      	beq.n	8000a2c <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <HAL_UART_ErrorCallback+0x2c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d101      	bne.n	8000a2c <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000a28:	f000 feca 	bl	80017c0 <uartBasic_Error_ISR>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40004400 	.word	0x40004400

08000a3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_UART_TxCpltCallback+0x28>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d006      	beq.n	8000a5c <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_UART_TxCpltCallback+0x2c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000a58:	f000 fea6 	bl	80017a8 <uartBasic_TX_Complete_ISR>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40004400 	.word	0x40004400

08000a6c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_UART_RxCpltCallback+0x28>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d006      	beq.n	8000a8c <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <HAL_UART_RxCpltCallback+0x2c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d101      	bne.n	8000a8c <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000a88:	f000 fe82 	bl	8001790 <uartBasic_RX_Complete_ISR>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40004400 	.word	0x40004400

08000a9c <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8000aa4:	f7ff fde6 	bl	8000674 <calendar_AlarmA_ISR>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	b0c7      	sub	sp, #284	; 0x11c
 8000ab4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f000 ff0d 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f959 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 faa9 	bl	8001014 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 fa51 	bl	8000f68 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ac6:	f000 f9b1 	bl	8000e2c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f001 fac8 	bl	8002060 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 8000ad0:	48a1      	ldr	r0, [pc, #644]	; (8000d58 <main+0x2a8>)
 8000ad2:	f000 fdeb 	bl	80016ac <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000ad6:	48a1      	ldr	r0, [pc, #644]	; (8000d5c <main+0x2ac>)
 8000ad8:	f7ff fd2a 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8000adc:	4aa0      	ldr	r2, [pc, #640]	; (8000d60 <main+0x2b0>)
 8000ade:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae6:	6018      	str	r0, [r3, #0]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	8019      	strh	r1, [r3, #0]
		  .day = 1,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 8000aec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000af0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000af4:	f7ff fd2c 	bl	8000550 <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	22c8      	movs	r2, #200	; 0xc8
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 fb05 	bl	8006110 <memset>

  events[0].start.year = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3020 	strb.w	r3, [r7, #32]
  events[0].start.month = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  events[0].start.day = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  events[0].start.hour = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  events[0].start.minute = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  events[0].start.second = 5;
 8000b24:	2305      	movs	r3, #5
 8000b26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  events[0].end.year = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  events[0].end.month = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  events[0].end.day = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  events[0].end.hour = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  events[0].end.minute = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  events[0].end.second = 20;
 8000b48:	2314      	movs	r3, #20
 8000b4a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  events[1].start.year = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  events[1].start.month = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  events[1].start.day = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  events[1].start.hour = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  events[1].start.minute = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  events[1].start.second = 30;
 8000b6c:	231e      	movs	r3, #30
 8000b6e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  events[1].end.year = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  events[1].end.month = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  events[1].end.day = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  events[1].end.hour = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  events[1].end.minute = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  events[1].end.second = 40;
 8000b90:	2328      	movs	r3, #40	; 0x28
 8000b92:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

  events[2].start.year = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  events[2].start.month = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  events[2].start.day = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  events[2].start.hour = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  events[2].start.minute = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  events[2].start.second = 50;
 8000bb4:	2332      	movs	r3, #50	; 0x32
 8000bb6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  events[2].end.year = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  events[2].end.month = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  events[2].end.day = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  events[2].end.hour = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  events[2].end.minute = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  events[2].end.second = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  events[3].start.year = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  events[3].start.month = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  events[3].start.day = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  events[3].start.hour = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  events[3].start.minute = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  events[3].start.second = 10;
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  events[3].end.year = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  events[3].end.month = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  events[3].end.day = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  events[3].end.hour = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  events[3].end.minute = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  events[3].end.second = 20;
 8000c20:	2314      	movs	r3, #20
 8000c22:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  events[4].start.year = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  events[4].start.month = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  events[4].start.day = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
  events[4].start.hour = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  events[4].start.minute = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  events[4].start.second = 30;
 8000c44:	231e      	movs	r3, #30
 8000c46:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  events[4].end.year = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  events[4].end.month = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  events[4].end.day = 1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  events[4].end.hour = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  events[4].end.minute = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  events[4].end.second = 40;
 8000c68:	2328      	movs	r3, #40	; 0x28
 8000c6a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

  calendar_setEvents(events, 5);
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	2105      	movs	r1, #5
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fc9b 	bl	80005b0 <calendar_setEvents>

  // start calendar
//  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  calendar_start();
 8000c7a:	f7ff fcaf 	bl	80005dc <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8000c7e:	f000 fd23 	bl	80016c8 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  int timeSeconds = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  int timeMinutes = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 8000c94:	f7ff fcb8 	bl	8000608 <calendar_handleAlarm>

	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 8000c98:	463a      	mov	r2, r7
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fd4b 	bl	800173c <uartBasic_get_RX>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

	  // if message present, handle message
	  if (messageStatus == true) {
 8000cac:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00d      	beq.n	8000cd0 <main+0x220>
		  // echo back to computer
		  uartBasic_TX_Poll(messageHeader, messageBody);
 8000cb4:	463a      	mov	r2, r7
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fd17 	bl	80016f0 <uartBasic_TX_Poll>
		  messageCount++;
 8000cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  uartBasic_RX_IT();
 8000ccc:	f000 fcfc 	bl	80016c8 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8000cd0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fc51 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	221c      	movs	r2, #28
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f005 fa15 	bl	8006110 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000ce6:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8000cea:	461e      	mov	r6, r3
 8000cec:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8000cf0:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8000cf4:	f897 10eb 	ldrb.w	r1, [r7, #235]	; 0xeb
 8000cf8:	f897 00ec 	ldrb.w	r0, [r7, #236]	; 0xec
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	f897 00ed 	ldrb.w	r0, [r7, #237]	; 0xed
 8000d02:	4605      	mov	r5, r0
 8000d04:	4638      	mov	r0, r7
 8000d06:	9504      	str	r5, [sp, #16]
 8000d08:	9403      	str	r4, [sp, #12]
 8000d0a:	9102      	str	r1, [sp, #8]
 8000d0c:	9201      	str	r2, [sp, #4]
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	4633      	mov	r3, r6
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <main+0x2b4>)
 8000d14:	211c      	movs	r1, #28
 8000d16:	f005 fa03 	bl	8006120 <sniprintf>
	  uartBasic_TX_Poll("TIME", messageBody);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4812      	ldr	r0, [pc, #72]	; (8000d68 <main+0x2b8>)
 8000d20:	f000 fce6 	bl	80016f0 <uartBasic_TX_Poll>
	  timeSeconds++;
 8000d24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  timeMinutes++;
 8000d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d32:	3301      	adds	r3, #1
 8000d34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	  long int i = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000d3e:	e004      	b.n	8000d4a <main+0x29a>
		  i++;
 8000d40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d44:	3301      	adds	r3, #1
 8000d46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000d4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <main+0x2bc>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	ddf5      	ble.n	8000d40 <main+0x290>
  {
 8000d54:	e79e      	b.n	8000c94 <main+0x1e4>
 8000d56:	bf00      	nop
 8000d58:	20000198 	.word	0x20000198
 8000d5c:	20000160 	.word	0x20000160
 8000d60:	08006a98 	.word	0x08006a98
 8000d64:	08006a6c 	.word	0x08006a6c
 8000d68:	08006a90 	.word	0x08006a90
 8000d6c:	0001fffd 	.word	0x0001fffd

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09a      	sub	sp, #104	; 0x68
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2248      	movs	r2, #72	; 0x48
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f005 f9c6 	bl	8006110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d96:	f001 f93b 	bl	8002010 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fe08 	bl	80009b0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <SystemClock_Config+0xb8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da8:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <SystemClock_Config+0xb8>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <SystemClock_Config+0xb8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000dbc:	232c      	movs	r3, #44	; 0x2c
 8000dbe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dc0:	2381      	movs	r3, #129	; 0x81
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dcc:	2360      	movs	r3, #96	; 0x60
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fbff 	bl	80025e4 <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dec:	f000 f91f 	bl	800102e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000df0:	236f      	movs	r3, #111	; 0x6f
 8000df2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 ff69 	bl	8002ce8 <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e1c:	f000 f907 	bl	800102e <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3768      	adds	r7, #104	; 0x68
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58000400 	.word	0x58000400

08000e2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b092      	sub	sp, #72	; 0x48
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	222c      	movs	r2, #44	; 0x2c
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 f95f 	bl	8006110 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e54:	4a43      	ldr	r2, [pc, #268]	; (8000f64 <MX_RTC_Init+0x138>)
 8000e56:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e58:	4b41      	ldr	r3, [pc, #260]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e5e:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e60:	227f      	movs	r2, #127	; 0x7f
 8000e62:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e64:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e82:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e84:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e8a:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e90:	4833      	ldr	r0, [pc, #204]	; (8000f60 <MX_RTC_Init+0x134>)
 8000e92:	f002 fc03 	bl	800369c <HAL_RTC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000e9c:	f000 f8c7 	bl	800102e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000eba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4827      	ldr	r0, [pc, #156]	; (8000f60 <MX_RTC_Init+0x134>)
 8000ec4:	f002 fc6c 	bl	80037a0 <HAL_RTC_SetTime>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000ece:	f000 f8ae 	bl	800102e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481b      	ldr	r0, [pc, #108]	; (8000f60 <MX_RTC_Init+0x134>)
 8000ef4:	f002 fd52 	bl	800399c <HAL_RTC_SetDate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000efe:	f000 f896 	bl	800102e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_RTC_Init+0x134>)
 8000f3a:	f002 fe03 	bl	8003b44 <HAL_RTC_SetAlarm_IT>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000f44:	f000 f873 	bl	800102e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	202a      	movs	r0, #42	; 0x2a
 8000f4e:	f000 fe0e 	bl	8001b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f52:	202a      	movs	r0, #42	; 0x2a
 8000f54:	f000 fe25 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3748      	adds	r7, #72	; 0x48
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000160 	.word	0x20000160
 8000f64:	40002800 	.word	0x40002800

08000f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <MX_USART2_UART_Init+0xa8>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b24      	ldr	r3, [pc, #144]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f86:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f8a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000fb0:	2230      	movs	r2, #48	; 0x30
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc4:	4811      	ldr	r0, [pc, #68]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000fc6:	f002 ffef 	bl	8003fa8 <HAL_UART_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000fd0:	f000 f82d 	bl	800102e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000fd8:	f004 ff99 	bl	8005f0e <HAL_UARTEx_SetTxFifoThreshold>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000fe2:	f000 f824 	bl	800102e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000fea:	f004 ffce 	bl	8005f8a <HAL_UARTEx_SetRxFifoThreshold>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000ff4:	f000 f81b 	bl	800102e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_USART2_UART_Init+0xa4>)
 8000ffa:	f004 ff50 	bl	8005e9e <HAL_UARTEx_DisableFifoMode>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8001004:	f000 f813 	bl	800102e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000198 	.word	0x20000198
 8001010:	40004400 	.word	0x40004400

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fcde 	bl	80009da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2004      	movs	r0, #4
 8001020:	f7ff fcdb 	bl	80009da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff fcd8 	bl	80009da <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001032:	b672      	cpsid	i
}
 8001034:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001036:	e7fe      	b.n	8001036 <Error_Handler+0x8>

08001038 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <rtcAlarmControl_init+0x18>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	2000022c 	.word	0x2000022c

08001054 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	4604      	mov	r4, r0
 800105c:	4608      	mov	r0, r1
 800105e:	4611      	mov	r1, r2
 8001060:	461a      	mov	r2, r3
 8001062:	4623      	mov	r3, r4
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	4603      	mov	r3, r0
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	460b      	mov	r3, r1
 800106c:	717b      	strb	r3, [r7, #5]
 800106e:	4613      	mov	r3, r2
 8001070:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a5a      	ldr	r2, [pc, #360]	; (80011e0 <setDateTime+0x18c>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	b258      	sxtb	r0, r3
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <setDateTime+0x18c>)
 8001086:	fba3 1302 	umull	r1, r3, r3, r2
 800108a:	08d9      	lsrs	r1, r3, #3
 800108c:	460b      	mov	r3, r1
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25b      	sxtb	r3, r3
 800109a:	4303      	orrs	r3, r0
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <setDateTime+0x18c>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	08db      	lsrs	r3, r3, #3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	b258      	sxtb	r0, r3
 80010b2:	79ba      	ldrb	r2, [r7, #6]
 80010b4:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <setDateTime+0x18c>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	08d9      	lsrs	r1, r3, #3
 80010bc:	460b      	mov	r3, r1
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	4303      	orrs	r3, r0
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 80010d2:	797b      	ldrb	r3, [r7, #5]
 80010d4:	4a42      	ldr	r2, [pc, #264]	; (80011e0 <setDateTime+0x18c>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	b258      	sxtb	r0, r3
 80010e2:	797a      	ldrb	r2, [r7, #5]
 80010e4:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <setDateTime+0x18c>)
 80010e6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ea:	08d9      	lsrs	r1, r3, #3
 80010ec:	460b      	mov	r3, r1
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	4303      	orrs	r3, r0
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8001106:	793b      	ldrb	r3, [r7, #4]
 8001108:	4a35      	ldr	r2, [pc, #212]	; (80011e0 <setDateTime+0x18c>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	b258      	sxtb	r0, r3
 8001116:	793a      	ldrb	r2, [r7, #4]
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <setDateTime+0x18c>)
 800111a:	fba3 1302 	umull	r1, r3, r3, r2
 800111e:	08d9      	lsrs	r1, r3, #3
 8001120:	460b      	mov	r3, r1
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	b25b      	sxtb	r3, r3
 800112e:	4303      	orrs	r3, r0
 8001130:	b25b      	sxtb	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8001136:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <setDateTime+0x18c>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b258      	sxtb	r0, r3
 8001148:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <setDateTime+0x18c>)
 800114e:	fba3 1302 	umull	r1, r3, r3, r2
 8001152:	08d9      	lsrs	r1, r3, #3
 8001154:	460b      	mov	r3, r1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4303      	orrs	r3, r0
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 800116a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <setDateTime+0x18c>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	b258      	sxtb	r0, r3
 800117c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <setDateTime+0x18c>)
 8001182:	fba3 1302 	umull	r1, r3, r3, r2
 8001186:	08d9      	lsrs	r1, r3, #3
 8001188:	460b      	mov	r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	b25b      	sxtb	r3, r3
 8001196:	4303      	orrs	r3, r0
 8001198:	b25b      	sxtb	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <setDateTime+0x190>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f107 011c 	add.w	r1, r7, #28
 80011a6:	2201      	movs	r2, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fbf7 	bl	800399c <HAL_RTC_SetDate>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80011b8:	e7fe      	b.n	80011b8 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <setDateTime+0x190>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f107 0108 	add.w	r1, r7, #8
 80011c2:	2201      	movs	r2, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 faeb 	bl	80037a0 <HAL_RTC_SetTime>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80011d4:	e7fe      	b.n	80011d4 <setDateTime+0x180>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	bf00      	nop
 80011e0:	cccccccd 	.word	0xcccccccd
 80011e4:	2000022c 	.word	0x2000022c

080011e8 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <getDateTime+0x124>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f107 0114 	add.w	r1, r7, #20
 8001212:	2201      	movs	r2, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fb5f 	bl	80038d8 <HAL_RTC_GetTime>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001224:	e7fe      	b.n	8001224 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <getDateTime+0x124>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f107 0110 	add.w	r1, r7, #16
 800122e:	2201      	movs	r2, #1
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fc39 	bl	8003aa8 <HAL_RTC_GetDate>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001240:	e7fe      	b.n	8001240 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8001242:	7cfb      	ldrb	r3, [r7, #19]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	7cfb      	ldrb	r3, [r7, #19]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4413      	add	r3, r2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001262:	7c7b      	ldrb	r3, [r7, #17]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	7c7b      	ldrb	r3, [r7, #17]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4413      	add	r3, r2
 800127c:	b2da      	uxtb	r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4413      	add	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	7cbb      	ldrb	r3, [r7, #18]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b2da      	uxtb	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 80012a2:	7d3b      	ldrb	r3, [r7, #20]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	7d3b      	ldrb	r3, [r7, #20]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 80012c2:	7d7b      	ldrb	r3, [r7, #21]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	7d7b      	ldrb	r3, [r7, #21]
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 80012e2:	7dbb      	ldrb	r3, [r7, #22]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	7dbb      	ldrb	r3, [r7, #22]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001300:	701a      	strb	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000022c 	.word	0x2000022c

08001310 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b08f      	sub	sp, #60	; 0x3c
 8001314:	af00      	add	r7, sp, #0
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	4603      	mov	r3, r0
 8001324:	71bb      	strb	r3, [r7, #6]
 8001326:	460b      	mov	r3, r1
 8001328:	717b      	strb	r3, [r7, #5]
 800132a:	4613      	mov	r3, r2
 800132c:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	222c      	movs	r2, #44	; 0x2c
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f004 feea 	bl	8006110 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <setAlarm_A+0x130>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	b258      	sxtb	r0, r3
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <setAlarm_A+0x130>)
 8001350:	fba3 1302 	umull	r1, r3, r3, r2
 8001354:	08d9      	lsrs	r1, r3, #3
 8001356:	460b      	mov	r3, r1
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b25b      	sxtb	r3, r3
 8001364:	4303      	orrs	r3, r0
 8001366:	b25b      	sxtb	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	4a33      	ldr	r2, [pc, #204]	; (8001440 <setAlarm_A+0x130>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	b258      	sxtb	r0, r3
 800137e:	79ba      	ldrb	r2, [r7, #6]
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <setAlarm_A+0x130>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	08d9      	lsrs	r1, r3, #3
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	b25b      	sxtb	r3, r3
 8001396:	4303      	orrs	r3, r0
 8001398:	b25b      	sxtb	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 800139e:	797b      	ldrb	r3, [r7, #5]
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <setAlarm_A+0x130>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	08db      	lsrs	r3, r3, #3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	b258      	sxtb	r0, r3
 80013ae:	797a      	ldrb	r2, [r7, #5]
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <setAlarm_A+0x130>)
 80013b2:	fba3 1302 	umull	r1, r3, r3, r2
 80013b6:	08d9      	lsrs	r1, r3, #3
 80013b8:	460b      	mov	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	4303      	orrs	r3, r0
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 80013ce:	793b      	ldrb	r3, [r7, #4]
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <setAlarm_A+0x130>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	08db      	lsrs	r3, r3, #3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	b258      	sxtb	r0, r3
 80013de:	793a      	ldrb	r2, [r7, #4]
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <setAlarm_A+0x130>)
 80013e2:	fba3 1302 	umull	r1, r3, r3, r2
 80013e6:	08d9      	lsrs	r1, r3, #3
 80013e8:	460b      	mov	r3, r1
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	4303      	orrs	r3, r0
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <setAlarm_A+0x134>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f107 010c 	add.w	r1, r7, #12
 8001424:	2201      	movs	r2, #1
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fb8c 	bl	8003b44 <HAL_RTC_SetAlarm_IT>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8001432:	b672      	cpsid	i
}
 8001434:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 8001436:	e7fe      	b.n	8001436 <setAlarm_A+0x126>
  }
}
 8001438:	bf00      	nop
 800143a:	373c      	adds	r7, #60	; 0x3c
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	2000022c 	.word	0x2000022c

08001448 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <LL_AHB2_GRP1_EnableClock>:
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4313      	orrs	r3, r2
 800147e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800148c:	68fb      	ldr	r3, [r7, #12]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014bc:	68fb      	ldr	r3, [r7, #12]
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b090      	sub	sp, #64	; 0x40
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	2238      	movs	r2, #56	; 0x38
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 fe13 	bl	8006110 <memset>
  if(hrtc->Instance==RTC)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_RTC_MspInit+0x54>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d115      	bne.n	8001520 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4618      	mov	r0, r3
 8001506:	f001 ffaf 	bl	8003468 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001510:	f7ff fd8d 	bl	800102e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001514:	f7ff ff98 	bl	8001448 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001518:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800151c:	f7ff ffbc 	bl	8001498 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3740      	adds	r7, #64	; 0x40
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40002800 	.word	0x40002800

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b096      	sub	sp, #88	; 0x58
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2238      	movs	r2, #56	; 0x38
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fddf 	bl	8006110 <memset>
  if(huart->Instance==USART2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0x98>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d12e      	bne.n	80015ba <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800155c:	2302      	movs	r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001560:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001564:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4618      	mov	r0, r3
 800156c:	f001 ff7c 	bl	8003468 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001576:	f7ff fd5a 	bl	800102e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800157e:	f7ff ff8b 	bl	8001498 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff ff70 	bl	8001468 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001588:	230c      	movs	r3, #12
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001598:	2307      	movs	r3, #7
 800159a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f000 fbd3 	bl	8001d50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2025      	movs	r0, #37	; 0x25
 80015b0:	f000 fadd 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b4:	2025      	movs	r0, #37	; 0x25
 80015b6:	f000 faf4 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3758      	adds	r7, #88	; 0x58
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40004400 	.word	0x40004400

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160e:	f000 f9bb 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <USART2_IRQHandler+0x10>)
 800161e:	f002 fde5 	bl	80041ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000198 	.word	0x20000198

0800162c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <RTC_Alarm_IRQHandler+0x10>)
 8001632:	f002 fb93 	bl	8003d5c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000160 	.word	0x20000160

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f004 fd16 	bl	80060a0 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20008000 	.word	0x20008000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	20000230 	.word	0x20000230
 80016a8:	20000298 	.word	0x20000298

080016ac <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <uartBasic_init+0x18>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000238 	.word	0x20000238

080016c8 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <uartBasic_RX_IT+0x24>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 80016dc:	f000 f874 	bl	80017c8 <_rxMessage_IT>

		// return success
		return true;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 80016e4:	2300      	movs	r3, #0
	}
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000027d 	.word	0x2000027d

080016f0 <uartBasic_TX_Poll>:
/*
 * Start transmitting message over UART.
 */
bool uartBasic_TX_Poll(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <uartBasic_TX_Poll+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f083 0301 	eor.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00e      	beq.n	8001728 <uartBasic_TX_Poll+0x38>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <uartBasic_TX_Poll+0x48>)
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f88a 	bl	8001828 <composeMessage>
		_txBuffer_full = true;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <uartBasic_TX_Poll+0x44>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_Poll();
 800171a:	f000 f86d 	bl	80017f8 <_txMessage_Poll>

		// clear buffer full
		_txBuffer_full = false;
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <uartBasic_TX_Poll+0x44>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]

		// report successfully queued
		return true;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <uartBasic_TX_Poll+0x3a>
	}

	else
	{
		// return full buffer
		return false;
 8001728:	2300      	movs	r3, #0
	}
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000027c 	.word	0x2000027c
 8001738:	2000023c 	.word	0x2000023c

0800173c <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <uartBasic_get_RX+0x4c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <uartBasic_get_RX+0x50>)
 8001752:	f107 0408 	add.w	r4, r7, #8
 8001756:	461d      	mov	r5, r3
 8001758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <uartBasic_get_RX+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	461a      	mov	r2, r3
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f86e 	bl	8001854 <decomposeMessage>

		// report successfully dequeued
		return true;
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 800177c:	2300      	movs	r3, #0
	}
}
 800177e:	4618      	mov	r0, r3
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bdb0      	pop	{r4, r5, r7, pc}
 8001786:	bf00      	nop
 8001788:	2000027d 	.word	0x2000027d
 800178c:	2000025c 	.word	0x2000025c

08001790 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <uartBasic_RX_Complete_ISR+0x14>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000027d 	.word	0x2000027d

080017a8 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <uartBasic_TX_Complete_ISR+0x14>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000027c 	.word	0x2000027c

080017c0 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 80017c4:	e7fe      	b.n	80017c4 <uartBasic_Error_ISR+0x4>
	...

080017c8 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_rxMessage_IT+0x24>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2220      	movs	r2, #32
 80017d2:	4907      	ldr	r1, [pc, #28]	; (80017f0 <_rxMessage_IT+0x28>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fcbd 	bl	8004154 <HAL_UART_Receive_IT>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <_rxMessage_IT+0x1e>
		_rxError = true;
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <_rxMessage_IT+0x2c>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000238 	.word	0x20000238
 80017f0:	2000025c 	.word	0x2000025c
 80017f4:	20000235 	.word	0x20000235

080017f8 <_txMessage_Poll>:

/*
 *
 */
void _txMessage_Poll(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <_txMessage_Poll+0x24>)
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	23fa      	movs	r3, #250	; 0xfa
 8001802:	2220      	movs	r2, #32
 8001804:	4906      	ldr	r1, [pc, #24]	; (8001820 <_txMessage_Poll+0x28>)
 8001806:	f002 fc1f 	bl	8004048 <HAL_UART_Transmit>
 800180a:	4603      	mov	r3, r0
 800180c:	2b01      	cmp	r3, #1
 800180e:	d102      	bne.n	8001816 <_txMessage_Poll+0x1e>
		_txError = true;
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <_txMessage_Poll+0x2c>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000238 	.word	0x20000238
 8001820:	2000023c 	.word	0x2000023c
 8001824:	20000234 	.word	0x20000234

08001828 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	221c      	movs	r2, #28
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	4618      	mov	r0, r3
 8001848:	f004 fc54 	bl	80060f4 <memcpy>
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	221c      	movs	r2, #28
 8001870:	4619      	mov	r1, r3
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f004 fc3e 	bl	80060f4 <memcpy>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001882:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001884:	f7fe fe4e 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <LoopForever+0x6>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	; (80018c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <LoopForever+0xe>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	; (80018cc <LoopForever+0x16>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018ae:	f004 fbfd 	bl	80060ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b2:	f7ff f8fd 	bl	8000ab0 <main>

080018b6 <LoopForever>:

LoopForever:
    b LoopForever
 80018b6:	e7fe      	b.n	80018b6 <LoopForever>
  ldr   r0, =_estack
 80018b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c4:	08006bc8 	.word	0x08006bc8
  ldr r2, =_sbss
 80018c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018cc:	20000294 	.word	0x20000294

080018d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018de:	2003      	movs	r0, #3
 80018e0:	f000 f93a 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018e4:	f001 fbe2 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_Init+0x3c>)
 80018ec:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f810 	bl	8001914 <HAL_InitTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	e001      	b.n	8001904 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001900:	f7ff fde2 	bl	80014c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001904:	79fb      	ldrb	r3, [r7, #7]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000000 	.word	0x20000000

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_InitTick+0x6c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d024      	beq.n	8001972 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001928:	f001 fbc0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_InitTick+0x6c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001938:	fbb3 f3f1 	udiv	r3, r3, r1
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f93c 	bl	8001bbe <HAL_SYSTICK_Config>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	d809      	bhi.n	8001966 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001952:	2200      	movs	r2, #0
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195a:	f000 f908 	bl	8001b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_InitTick+0x70>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e007      	b.n	8001976 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e004      	b.n	8001976 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e001      	b.n	8001976 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_IncTick+0x1c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x20>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_IncTick+0x20>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000280 	.word	0x20000280

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <HAL_GetTick+0x10>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000280 	.word	0x20000280

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4906      	ldr	r1, [pc, #24]	; (8001a58 <__NVIC_EnableIRQ+0x34>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b38:	f7ff ff90 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff2d 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff44 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff92 	bl	8001ab0 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff61 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff37 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa4 	bl	8001b14 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e04f      	b.n	8001c88 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e040      	b.n	8001c88 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 020e 	bic.w	r2, r2, #14
 8001c14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f003 021c 	and.w	r2, r3, #28
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f202 	lsl.w	r2, r1, r2
 8001c48:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00c      	beq.n	8001c76 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d005      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e047      	b.n	8001d46 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 020e 	bic.w	r2, r2, #14
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f003 021c 	and.w	r2, r3, #28
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00c      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
    }
  }
  return status;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	e140      	b.n	8001fe2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8132 	beq.w	8001fdc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d005      	beq.n	8001d90 <HAL_GPIO_Init+0x40>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 0201 	and.w	r2, r3, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d123      	bne.n	8001e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0203 	and.w	r2, r3, #3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 808c 	beq.w	8001fdc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec4:	4a4e      	ldr	r2, [pc, #312]	; (8002000 <HAL_GPIO_Init+0x2b0>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1bc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a44      	ldr	r2, [pc, #272]	; (8002004 <HAL_GPIO_Init+0x2b4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1b8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a43      	ldr	r2, [pc, #268]	; (8002008 <HAL_GPIO_Init+0x2b8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1b4>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e004      	b.n	8001f0e <HAL_GPIO_Init+0x1be>
 8001f04:	2307      	movs	r3, #7
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x1be>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_GPIO_Init+0x1be>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	f002 0203 	and.w	r2, r2, #3
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4093      	lsls	r3, r2
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f1e:	4938      	ldr	r1, [pc, #224]	; (8002000 <HAL_GPIO_Init+0x2b0>)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f2c:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f50:	4a2e      	ldr	r2, [pc, #184]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f7a:	4a24      	ldr	r2, [pc, #144]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f86:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001fa6:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_GPIO_Init+0x2bc>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f aeb7 	bne.w	8001d60 <HAL_GPIO_Init+0x10>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	48000400 	.word	0x48000400
 8002008:	48000800 	.word	0x48000800
 800200c:	58000800 	.word	0x58000800

08002010 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a03      	ldr	r2, [pc, #12]	; (8002028 <HAL_PWR_EnableBkUpAccess+0x18>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	58000400 	.word	0x58000400

0800202c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <LL_PWR_EnableBootC2+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a03      	ldr	r2, [pc, #12]	; (8002044 <LL_PWR_EnableBootC2+0x18>)
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	58000400 	.word	0x58000400

08002048 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_PWREx_GetVoltageRange+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	58000400 	.word	0x58000400

08002060 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002068:	f7ff ffe0 	bl	800202c <LL_PWR_EnableBootC2>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002084:	d101      	bne.n	800208a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	58000400 	.word	0x58000400

08002098 <LL_RCC_HSE_EnableTcxo>:
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_HSE_DisableTcxo>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e2:	d101      	bne.n	80020e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_HSE_Enable>:
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <LL_RCC_HSE_Disable>:
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <LL_RCC_HSE_IsReady>:
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800213c:	d101      	bne.n	8002142 <LL_RCC_HSE_IsReady+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_RCC_HSE_IsReady+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <LL_RCC_HSI_Enable>:
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <LL_RCC_HSI_Disable>:
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <LL_RCC_HSI_IsReady>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002196:	d101      	bne.n	800219c <LL_RCC_HSI_IsReady+0x18>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <LL_RCC_HSI_IsReady+0x1a>
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <LL_RCC_LSE_IsReady>:
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d101      	bne.n	80021e6 <LL_RCC_LSE_IsReady+0x18>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_RCC_LSE_IsReady+0x1a>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_LSI_Enable>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <LL_RCC_LSI_Disable>:
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <LL_RCC_LSI_IsReady>:
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d101      	bne.n	8002248 <LL_RCC_LSI_IsReady+0x18>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <LL_RCC_LSI_IsReady+0x1a>
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <LL_RCC_MSI_Enable>:
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <LL_RCC_MSI_Disable>:
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6013      	str	r3, [r2, #0]
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <LL_RCC_MSI_IsReady>:
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d101      	bne.n	80022a0 <LL_RCC_MSI_IsReady+0x16>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_RCC_MSI_IsReady+0x18>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d101      	bne.n	80022c0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <LL_RCC_MSI_GetRange>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <LL_RCC_SetSysClkSource>:
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <LL_RCC_GetSysClkSource>:
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <LL_RCC_SetAHBPrescaler>:
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <LL_RCC_SetAHB3Prescaler>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023bc:	f023 020f 	bic.w	r2, r3, #15
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <LL_RCC_SetAPB1Prescaler>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <LL_RCC_SetAPB2Prescaler>:
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <LL_RCC_GetAHBPrescaler>:
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <LL_RCC_GetAHB3Prescaler>:
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <LL_RCC_GetAPB1Prescaler>:
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <LL_RCC_GetAPB2Prescaler>:
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ca:	d101      	bne.n	80024d0 <LL_RCC_PLL_IsReady+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_RCC_PLL_IsReady+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0303 	and.w	r3, r3, #3
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002546:	d101      	bne.n	800254c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800256a:	d101      	bne.n	8002570 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002582:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258e:	d101      	bne.n	8002594 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b0:	d101      	bne.n	80025b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025d2:	d101      	bne.n	80025d8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e36f      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f6:	f7ff fea6 	bl	8002346 <LL_RCC_GetSysClkSource>
 80025fa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	f7ff ff8f 	bl	800251e <LL_RCC_PLL_GetMainSource>
 8002600:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80c4 	beq.w	8002798 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x3e>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	d176      	bne.n	800270a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d173      	bne.n	800270a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e353      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x68>
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264a:	e006      	b.n	800265a <HAL_RCC_OscConfig+0x76>
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265a:	4293      	cmp	r3, r2
 800265c:	d222      	bcs.n	80026a4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fd5a 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e331      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fe2b 	bl	80022f8 <LL_RCC_MSI_SetCalibTrimming>
 80026a2:	e021      	b.n	80026e8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fe12 	bl	80022f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fd1f 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e2f6      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026e8:	f000 fce0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4aa7      	ldr	r2, [pc, #668]	; (800298c <HAL_RCC_OscConfig+0x3a8>)
 80026f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80026f2:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <HAL_RCC_OscConfig+0x3ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f90c 	bl	8001914 <HAL_InitTick>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d047      	beq.n	8002796 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	e2e5      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02c      	beq.n	800276c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002712:	f7ff fd9e 	bl	8002252 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002716:	f7ff f949 	bl	80019ac <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271e:	f7ff f945 	bl	80019ac <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e2d2      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002730:	f7ff fdab 	bl	800228a <LL_RCC_MSI_IsReady>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f1      	beq.n	800271e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fdc7 	bl	80022f8 <LL_RCC_MSI_SetCalibTrimming>
 800276a:	e015      	b.n	8002798 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800276c:	f7ff fd7f 	bl	800226e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002770:	f7ff f91c 	bl	80019ac <HAL_GetTick>
 8002774:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002778:	f7ff f918 	bl	80019ac <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e2a5      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800278a:	f7ff fd7e 	bl	800228a <LL_RCC_MSI_IsReady>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f1      	bne.n	8002778 <HAL_RCC_OscConfig+0x194>
 8002794:	e000      	b.n	8002798 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002796:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d058      	beq.n	8002856 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1d2>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b0c      	cmp	r3, #12
 80027ae:	d108      	bne.n	80027c2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d105      	bne.n	80027c2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d14b      	bne.n	8002856 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e289      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x204>
 80027e2:	f7ff fc86 	bl	80020f2 <LL_RCC_HSE_Enable>
 80027e6:	e00d      	b.n	8002804 <HAL_RCC_OscConfig+0x220>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80027f0:	d104      	bne.n	80027fc <HAL_RCC_OscConfig+0x218>
 80027f2:	f7ff fc51 	bl	8002098 <LL_RCC_HSE_EnableTcxo>
 80027f6:	f7ff fc7c 	bl	80020f2 <LL_RCC_HSE_Enable>
 80027fa:	e003      	b.n	8002804 <HAL_RCC_OscConfig+0x220>
 80027fc:	f7ff fc87 	bl	800210e <LL_RCC_HSE_Disable>
 8002800:	f7ff fc58 	bl	80020b4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff f8ce 	bl	80019ac <HAL_GetTick>
 8002810:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7ff f8ca 	bl	80019ac <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e257      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002826:	f7ff fc80 	bl	800212a <LL_RCC_HSE_IsReady>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f1      	beq.n	8002814 <HAL_RCC_OscConfig+0x230>
 8002830:	e011      	b.n	8002856 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff f8bb 	bl	80019ac <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283a:	f7ff f8b7 	bl	80019ac <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e244      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800284c:	f7ff fc6d 	bl	800212a <LL_RCC_HSE_IsReady>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f1      	bne.n	800283a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d046      	beq.n	80028f0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d005      	beq.n	8002874 <HAL_RCC_OscConfig+0x290>
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d10e      	bne.n	800288c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d10b      	bne.n	800288c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e22a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fc8e 	bl	80021a6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800288a:	e031      	b.n	80028f0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d019      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	f7ff fc5a 	bl	800214c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff f888 	bl	80019ac <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7ff f884 	bl	80019ac <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e211      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028b2:	f7ff fc67 	bl	8002184 <LL_RCC_HSI_IsReady>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f1      	beq.n	80028a0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fc70 	bl	80021a6 <LL_RCC_HSI_SetCalibTrimming>
 80028c6:	e013      	b.n	80028f0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c8:	f7ff fc4e 	bl	8002168 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff f86e 	bl	80019ac <HAL_GetTick>
 80028d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d4:	f7ff f86a 	bl	80019ac <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1f7      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028e6:	f7ff fc4d 	bl	8002184 <LL_RCC_HSI_IsReady>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f1      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d06e      	beq.n	80029da <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d056      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	429a      	cmp	r2, r3
 800291a:	d031      	beq.n	8002980 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e1d0      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d013      	beq.n	8002966 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800293e:	f7ff fc67 	bl	8002210 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002942:	f7ff f833 	bl	80019ac <HAL_GetTick>
 8002946:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294a:	f7ff f82f 	bl	80019ac <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b11      	cmp	r3, #17
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e1bc      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800295c:	f7ff fc68 	bl	8002230 <LL_RCC_LSI_IsReady>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f1      	bne.n	800294a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f023 0210 	bic.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002980:	f7ff fc36 	bl	80021f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7ff f812 	bl	80019ac <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800298a:	e00c      	b.n	80029a6 <HAL_RCC_OscConfig+0x3c2>
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff f80a 	bl	80019ac <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b11      	cmp	r3, #17
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e197      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80029a6:	f7ff fc43 	bl	8002230 <LL_RCC_LSI_IsReady>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f1      	beq.n	8002994 <HAL_RCC_OscConfig+0x3b0>
 80029b0:	e013      	b.n	80029da <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	f7ff fc2d 	bl	8002210 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fff9 	bl	80019ac <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7fe fff5 	bl	80019ac <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b11      	cmp	r3, #17
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e182      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80029d0:	f7ff fc2e 	bl	8002230 <LL_RCC_LSI_IsReady>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f1      	bne.n	80029be <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80d8 	beq.w	8002b98 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029e8:	f7ff fb44 	bl	8002074 <LL_PWR_IsEnabledBkUpAccess>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d113      	bne.n	8002a1a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029f2:	f7ff fb0d 	bl	8002010 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f6:	f7fe ffd9 	bl	80019ac <HAL_GetTick>
 80029fa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fe:	f7fe ffd5 	bl	80019ac <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e162      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a10:	f7ff fb30 	bl	8002074 <LL_PWR_IsEnabledBkUpAccess>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f1      	beq.n	80029fe <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d07b      	beq.n	8002b1a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b85      	cmp	r3, #133	; 0x85
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a46:	f7fe ffb1 	bl	80019ac <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe ffa3 	bl	80019ac <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e12e      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a78:	f7ff fba9 	bl	80021ce <LL_RCC_LSE_IsReady>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ef      	beq.n	8002a62 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b81      	cmp	r3, #129	; 0x81
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b85      	cmp	r3, #133	; 0x85
 8002a90:	d121      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe ff8b 	bl	80019ac <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe ff7d 	bl	80019ac <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e108      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ec      	beq.n	8002aae <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ad4:	e060      	b.n	8002b98 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe ff69 	bl	80019ac <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe ff5b 	bl	80019ac <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0e6      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ec      	bne.n	8002af2 <HAL_RCC_OscConfig+0x50e>
 8002b18:	e03e      	b.n	8002b98 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe ff47 	bl	80019ac <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe ff39 	bl	80019ac <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0c4      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ec      	bne.n	8002b36 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fe ff26 	bl	80019ac <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fe ff18 	bl	80019ac <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0a3      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b8e:	f7ff fb1e 	bl	80021ce <LL_RCC_LSE_IsReady>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ef      	bne.n	8002b78 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8099 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d06c      	beq.n	8002c82 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d14b      	bne.n	8002c48 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb0:	f7ff fc74 	bl	800249c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fefa 	bl	80019ac <HAL_GetTick>
 8002bb8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fef6 	bl	80019ac <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b0a      	cmp	r3, #10
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e083      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bce:	f7ff fc73 	bl	80024b8 <LL_RCC_PLL_IsReady>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f1      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x6fc>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf0:	0212      	lsls	r2, r2, #8
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bf8:	4311      	orrs	r1, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c04:	430a      	orrs	r2, r1
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0e:	f7ff fc37 	bl	8002480 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fec3 	bl	80019ac <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe febf 	bl	80019ac <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b0a      	cmp	r3, #10
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e04c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c3c:	f7ff fc3c 	bl	80024b8 <LL_RCC_PLL_IsReady>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f1      	beq.n	8002c2a <HAL_RCC_OscConfig+0x646>
 8002c46:	e045      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c48:	f7ff fc28 	bl	800249c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe feae 	bl	80019ac <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe feaa 	bl	80019ac <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b0a      	cmp	r3, #10
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e037      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c66:	f7ff fc27 	bl	80024b8 <LL_RCC_PLL_IsReady>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f1      	bne.n	8002c54 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x700>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
 8002c80:	e028      	b.n	8002cd4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e023      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0203 	and.w	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d115      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	11c1808c 	.word	0x11c1808c
 8002ce4:	eefefffc 	.word	0xeefefffc

08002ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e12c      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b98      	ldr	r3, [pc, #608]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d91b      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b95      	ldr	r3, [pc, #596]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0207 	bic.w	r2, r3, #7
 8002d12:	4993      	ldr	r1, [pc, #588]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fe47 	bl	80019ac <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d22:	f7fe fe43 	bl	80019ac <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e110      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d34:	4b8a      	ldr	r3, [pc, #552]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d1ef      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fb02 	bl	800235c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d58:	f7fe fe28 	bl	80019ac <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d60:	f7fe fe24 	bl	80019ac <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0f1      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d72:	f7ff fbdf 	bl	8002534 <LL_RCC_IsActiveFlag_HPRE>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f1      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d016      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff faf8 	bl	8002382 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d92:	f7fe fe0b 	bl	80019ac <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d9a:	f7fe fe07 	bl	80019ac <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0d4      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002dac:	f7ff fbd3 	bl	8002556 <LL_RCC_IsActiveFlag_C2HPRE>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f1      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff faf0 	bl	80023ac <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fdee 	bl	80019ac <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dd4:	f7fe fdea 	bl	80019ac <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0b7      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002de6:	f7ff fbc8 	bl	800257a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f1      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fae9 	bl	80023d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e06:	f7fe fdd1 	bl	80019ac <HAL_GetTick>
 8002e0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e0e:	f7fe fdcd 	bl	80019ac <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e09a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e20:	f7ff fbbd 	bl	800259e <LL_RCC_IsActiveFlag_PPRE1>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f1      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d017      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fade 	bl	80023fe <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e42:	f7fe fdb3 	bl	80019ac <HAL_GetTick>
 8002e46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e4a:	f7fe fdaf 	bl	80019ac <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e07c      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e5c:	f7ff fbb0 	bl	80025c0 <LL_RCC_IsActiveFlag_PPRE2>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f1      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d043      	beq.n	8002efa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e7a:	f7ff f956 	bl	800212a <LL_RCC_HSE_IsReady>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11e      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e066      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e90:	f7ff fb12 	bl	80024b8 <LL_RCC_PLL_IsReady>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d113      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e05b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ea6:	f7ff f9f0 	bl	800228a <LL_RCC_MSI_IsReady>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d108      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e050      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002eb4:	f7ff f966 	bl	8002184 <LL_RCC_HSI_IsReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e049      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fa2a 	bl	8002320 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fd6e 	bl	80019ac <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe fd6a 	bl	80019ac <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e035      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	f7ff fa2c 	bl	8002346 <LL_RCC_GetSysClkSource>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d1ec      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d21b      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 0207 	bic.w	r2, r3, #7
 8002f10:	4913      	ldr	r1, [pc, #76]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fe fd48 	bl	80019ac <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f20:	f7fe fd44 	bl	80019ac <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e011      	b.n	8002f56 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1ef      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f40:	f000 f8b4 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_RCC_ClockConfig+0x27c>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_RCC_ClockConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fce0 	bl	8001914 <HAL_InitTick>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	58004000 	.word	0x58004000
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	f7ff f9e4 	bl	8002346 <LL_RCC_GetSysClkSource>
 8002f7e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f80:	f7ff facd 	bl	800251e <LL_RCC_PLL_GetMainSource>
 8002f84:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x2c>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d139      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d136      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002f98:	f7ff f987 	bl	80022aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d115      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x62>
 8002fa2:	f7ff f982 	bl	80022aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_GetSysClockFreq+0x4e>
 8002fac:	f7ff f98d 	bl	80022ca <LL_RCC_MSI_GetRange>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	e005      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x5a>
 8002fba:	f7ff f991 	bl	80022e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a36      	ldr	r2, [pc, #216]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x8c>
 8002fce:	f7ff f96c 	bl	80022aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x7a>
 8002fd8:	f7ff f977 	bl	80022ca <LL_RCC_MSI_GetRange>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x86>
 8002fe6:	f7ff f97b 	bl	80022e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fea:	4603      	mov	r3, r0
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003004:	e012      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d102      	bne.n	8003012 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e00c      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d109      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003018:	f7ff f85a 	bl	80020d0 <LL_RCC_HSE_IsEnabledDiv2>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e001      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003028:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800302a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800302c:	f7ff f98b 	bl	8002346 <LL_RCC_GetSysClkSource>
 8003030:	4603      	mov	r3, r0
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d12f      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003036:	f7ff fa72 	bl	800251e <LL_RCC_PLL_GetMainSource>
 800303a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0xde>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d003      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0xe4>
 8003048:	e00d      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800304c:	60fb      	str	r3, [r7, #12]
        break;
 800304e:	e00d      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003050:	f7ff f83e 	bl	80020d0 <LL_RCC_HSE_IsEnabledDiv2>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800305c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800305e:	e005      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003062:	60fb      	str	r3, [r7, #12]
        break;
 8003064:	e002      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	60fb      	str	r3, [r7, #12]
        break;
 800306a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800306c:	f7ff fa35 	bl	80024da <LL_RCC_PLL_GetN>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	fb03 f402 	mul.w	r4, r3, r2
 8003078:	f7ff fa46 	bl	8002508 <LL_RCC_PLL_GetDivider>
 800307c:	4603      	mov	r3, r0
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	3301      	adds	r3, #1
 8003082:	fbb4 f4f3 	udiv	r4, r4, r3
 8003086:	f7ff fa34 	bl	80024f2 <LL_RCC_PLL_GetR>
 800308a:	4603      	mov	r3, r0
 800308c:	0f5b      	lsrs	r3, r3, #29
 800308e:	3301      	adds	r3, #1
 8003090:	fbb4 f3f3 	udiv	r3, r4, r3
 8003094:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003096:	697b      	ldr	r3, [r7, #20]
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	08006b1c 	.word	0x08006b1c
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	01e84800 	.word	0x01e84800

080030ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b598      	push	{r3, r4, r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030b0:	f7ff ff5c 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 80030b4:	4604      	mov	r4, r0
 80030b6:	f7ff f9b5 	bl	8002424 <LL_RCC_GetAHBPrescaler>
 80030ba:	4603      	mov	r3, r0
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a03      	ldr	r2, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80030c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd98      	pop	{r3, r4, r7, pc}
 80030d0:	08006abc 	.word	0x08006abc

080030d4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b598      	push	{r3, r4, r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030d8:	f7ff ffe8 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030dc:	4604      	mov	r4, r0
 80030de:	f7ff f9b9 	bl	8002454 <LL_RCC_GetAPB1Prescaler>
 80030e2:	4603      	mov	r3, r0
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd98      	pop	{r3, r4, r7, pc}
 80030f4:	08006afc 	.word	0x08006afc

080030f8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b598      	push	{r3, r4, r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80030fc:	f7ff ffd6 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 8003100:	4604      	mov	r4, r0
 8003102:	f7ff f9b2 	bl	800246a <LL_RCC_GetAPB2Prescaler>
 8003106:	4603      	mov	r3, r0
 8003108:	0adb      	lsrs	r3, r3, #11
 800310a:	4a03      	ldr	r2, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x20>)
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd98      	pop	{r3, r4, r7, pc}
 8003118:	08006afc 	.word	0x08006afc

0800311c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	4a10      	ldr	r2, [pc, #64]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003132:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003134:	f7ff f981 	bl	800243a <LL_RCC_GetAHB3Prescaler>
 8003138:	4603      	mov	r3, r0
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0c9c      	lsrs	r4, r3, #18
 8003158:	f7fe ff76 	bl	8002048 <HAL_PWREx_GetVoltageRange>
 800315c:	4603      	mov	r3, r0
 800315e:	4619      	mov	r1, r3
 8003160:	4620      	mov	r0, r4
 8003162:	f000 f80b 	bl	800317c <RCC_SetFlashLatency>
 8003166:	4603      	mov	r3, r0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	08006b1c 	.word	0x08006b1c
 8003174:	08006abc 	.word	0x08006abc
 8003178:	431bde83 	.word	0x431bde83

0800317c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	; 0x38
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003186:	4a3a      	ldr	r2, [pc, #232]	; (8003270 <RCC_SetFlashLatency+0xf4>)
 8003188:	f107 0320 	add.w	r3, r7, #32
 800318c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003190:	6018      	str	r0, [r3, #0]
 8003192:	3304      	adds	r3, #4
 8003194:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003196:	4a37      	ldr	r2, [pc, #220]	; (8003274 <RCC_SetFlashLatency+0xf8>)
 8003198:	f107 0318 	add.w	r3, r7, #24
 800319c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a0:	6018      	str	r0, [r3, #0]
 80031a2:	3304      	adds	r3, #4
 80031a4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80031a6:	4a34      	ldr	r2, [pc, #208]	; (8003278 <RCC_SetFlashLatency+0xfc>)
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d11b      	bne.n	80031f6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031be:	2300      	movs	r3, #0
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
 80031c2:	e014      	b.n	80031ee <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	3338      	adds	r3, #56	; 0x38
 80031ca:	443b      	add	r3, r7
 80031cc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80031d0:	461a      	mov	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d807      	bhi.n	80031e8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	3338      	adds	r3, #56	; 0x38
 80031de:	443b      	add	r3, r7
 80031e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031e6:	e021      	b.n	800322c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	3301      	adds	r3, #1
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d9e7      	bls.n	80031c4 <RCC_SetFlashLatency+0x48>
 80031f4:	e01a      	b.n	800322c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fa:	e014      	b.n	8003226 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	3338      	adds	r3, #56	; 0x38
 8003202:	443b      	add	r3, r7
 8003204:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4293      	cmp	r3, r2
 800320e:	d807      	bhi.n	8003220 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	3338      	adds	r3, #56	; 0x38
 8003216:	443b      	add	r3, r7
 8003218:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800321e:	e005      	b.n	800322c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	3301      	adds	r3, #1
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	2b02      	cmp	r3, #2
 800322a:	d9e7      	bls.n	80031fc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <RCC_SetFlashLatency+0x100>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 0207 	bic.w	r2, r3, #7
 8003234:	4911      	ldr	r1, [pc, #68]	; (800327c <RCC_SetFlashLatency+0x100>)
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800323c:	f7fe fbb6 	bl	80019ac <HAL_GetTick>
 8003240:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003242:	e008      	b.n	8003256 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003244:	f7fe fbb2 	bl	80019ac <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e007      	b.n	8003266 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <RCC_SetFlashLatency+0x100>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003260:	429a      	cmp	r2, r3
 8003262:	d1ef      	bne.n	8003244 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3738      	adds	r7, #56	; 0x38
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	08006aa0 	.word	0x08006aa0
 8003274:	08006aa8 	.word	0x08006aa8
 8003278:	08006ab0 	.word	0x08006ab0
 800327c:	58004000 	.word	0x58004000

08003280 <LL_RCC_LSE_IsReady>:
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d101      	bne.n	8003298 <LL_RCC_LSE_IsReady+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <LL_RCC_LSE_IsReady+0x1a>
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <LL_RCC_SetUSARTClockSource>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	43db      	mvns	r3, r3
 80032b8:	401a      	ands	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <LL_RCC_SetI2SClockSource>:
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_SetLPUARTClockSource>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <LL_RCC_SetI2CClockSource>:
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003332:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800333e:	43db      	mvns	r3, r3
 8003340:	401a      	ands	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800334a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <LL_RCC_SetLPTIMClockSource>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <LL_RCC_SetRNGClockSource>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80033a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <LL_RCC_SetADCClockSource>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <LL_RCC_SetRTCClockSource>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <LL_RCC_GetRTCClockSource>:
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <LL_RCC_ForceBackupDomainReset>:
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
	...

08003468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003474:	2300      	movs	r3, #0
 8003476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003478:	2300      	movs	r3, #0
 800347a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d058      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003488:	f7fe fdc2 	bl	8002010 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800348c:	f7fe fa8e 	bl	80019ac <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003492:	e009      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003494:	f7fe fa8a 	bl	80019ac <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d902      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	74fb      	strb	r3, [r7, #19]
        break;
 80034a6:	e006      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034a8:	4b7b      	ldr	r3, [pc, #492]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d13c      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80034bc:	f7ff ffa7 	bl	800340e <LL_RCC_GetRTCClockSource>
 80034c0:	4602      	mov	r2, r0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d00f      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034d8:	f7ff ffa5 	bl	8003426 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034dc:	f7ff ffb3 	bl	8003446 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d014      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fa5a 	bl	80019ac <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80034fa:	e00b      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fe fa56 	bl	80019ac <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d902      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	74fb      	strb	r3, [r7, #19]
            break;
 8003512:	e004      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003514:	f7ff feb4 	bl	8003280 <LL_RCC_LSE_IsReady>
 8003518:	4603      	mov	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d1ee      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff5b 	bl	80033e4 <LL_RCC_SetRTCClockSource>
 800352e:	e004      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
 8003534:	e001      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fea9 	bl	80032a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe9e 	bl	80032a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fec0 	bl	80032fc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fee6 	bl	800335e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fedb 	bl	800335e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fed0 	bl	800335e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fea9 	bl	8003326 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fe9e 	bl	8003326 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fe93 	bl	8003326 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d011      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fe5e 	bl	80032d2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	d107      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800362a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fea5 	bl	8003390 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d011      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fea3 	bl	80033ba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800367c:	d107      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800368e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	58000400 	.word	0x58000400

0800369c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d071      	beq.n	8003792 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd ff06 	bl	80014d4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80036d0:	4b32      	ldr	r3, [pc, #200]	; (800379c <HAL_RTC_Init+0x100>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d051      	beq.n	8003780 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036dc:	4b2f      	ldr	r3, [pc, #188]	; (800379c <HAL_RTC_Init+0x100>)
 80036de:	22ca      	movs	r2, #202	; 0xca
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <HAL_RTC_Init+0x100>)
 80036e4:	2253      	movs	r2, #83	; 0x53
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fb87 	bl	8003dfc <RTC_EnterInitMode>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d13f      	bne.n	8003778 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RTC_Init+0x100>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	4a27      	ldr	r2, [pc, #156]	; (800379c <HAL_RTC_Init+0x100>)
 80036fe:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003706:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RTC_Init+0x100>)
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	4319      	orrs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	430b      	orrs	r3, r1
 800371c:	491f      	ldr	r1, [pc, #124]	; (800379c <HAL_RTC_Init+0x100>)
 800371e:	4313      	orrs	r3, r2
 8003720:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	491b      	ldr	r1, [pc, #108]	; (800379c <HAL_RTC_Init+0x100>)
 800372e:	4313      	orrs	r3, r2
 8003730:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_RTC_Init+0x100>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	430b      	orrs	r3, r1
 8003744:	4915      	ldr	r1, [pc, #84]	; (800379c <HAL_RTC_Init+0x100>)
 8003746:	4313      	orrs	r3, r2
 8003748:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fb8a 	bl	8003e64 <RTC_ExitInitMode>
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RTC_Init+0x100>)
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a19      	ldr	r1, [r3, #32]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4319      	orrs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	430b      	orrs	r3, r1
 8003772:	490a      	ldr	r1, [pc, #40]	; (800379c <HAL_RTC_Init+0x100>)
 8003774:	4313      	orrs	r3, r2
 8003776:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RTC_Init+0x100>)
 800377a:	22ff      	movs	r2, #255	; 0xff
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
 800377e:	e001      	b.n	8003784 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40002800 	.word	0x40002800

080037a0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_RTC_SetTime+0x1a>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e088      	b.n	80038cc <HAL_RTC_SetTime+0x12c>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037ca:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 80037cc:	22ca      	movs	r2, #202	; 0xca
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24
 80037d0:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 80037d2:	2253      	movs	r2, #83	; 0x53
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb10 	bl	8003dfc <RTC_EnterInitMode>
 80037dc:	4603      	mov	r3, r0
 80037de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d15e      	bne.n	80038a4 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d057      	beq.n	80038a4 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d125      	bne.n	8003846 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80037fa:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2200      	movs	r2, #0
 800380a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fb65 	bl	8003ee0 <RTC_ByteToBcd2>
 8003816:	4603      	mov	r3, r0
 8003818:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	785b      	ldrb	r3, [r3, #1]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fb5e 	bl	8003ee0 <RTC_ByteToBcd2>
 8003824:	4603      	mov	r3, r0
 8003826:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003828:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	789b      	ldrb	r3, [r3, #2]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fb56 	bl	8003ee0 <RTC_ByteToBcd2>
 8003834:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003836:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	78db      	ldrb	r3, [r3, #3]
 800383e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e017      	b.n	8003876 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003846:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003864:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800386a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	78db      	ldrb	r3, [r3, #3]
 8003870:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003876:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800387e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003882:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 800388a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	68d9      	ldr	r1, [r3, #12]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	430b      	orrs	r3, r1
 800389e:	490d      	ldr	r1, [pc, #52]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fadd 	bl	8003e64 <RTC_ExitInitMode>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_RTC_SetTime+0x134>)
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80038ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd90      	pop	{r4, r7, pc}
 80038d4:	40002800 	.word	0x40002800

080038d8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80038e4:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_RTC_GetTime+0xc0>)
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80038ec:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RTC_GetTime+0xc0>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f8:	d049      	beq.n	800398e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80038fa:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RTC_GetTime+0xc0>)
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RTC_GetTime+0xc0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800390e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003912:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	0d9b      	lsrs	r3, r3, #22
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11a      	bne.n	800398e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fade 	bl	8003f1e <RTC_Bcd2ToByte>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	785b      	ldrb	r3, [r3, #1]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fad5 	bl	8003f1e <RTC_Bcd2ToByte>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	789b      	ldrb	r3, [r3, #2]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 facc 	bl	8003f1e <RTC_Bcd2ToByte>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40002800 	.word	0x40002800

0800399c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_RTC_SetDate+0x1a>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e071      	b.n	8003a9a <HAL_RTC_SetDate+0xfe>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10e      	bne.n	80039ea <HAL_RTC_SetDate+0x4e>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	f023 0310 	bic.w	r3, r3, #16
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	330a      	adds	r3, #10
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d11c      	bne.n	8003a2a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	78db      	ldrb	r3, [r3, #3]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fa73 	bl	8003ee0 <RTC_ByteToBcd2>
 80039fa:	4603      	mov	r3, r0
 80039fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fa6c 	bl	8003ee0 <RTC_ByteToBcd2>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a0c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	789b      	ldrb	r3, [r3, #2]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fa64 	bl	8003ee0 <RTC_ByteToBcd2>
 8003a18:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a1a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e00e      	b.n	8003a48 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	78db      	ldrb	r3, [r3, #3]
 8003a2e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a36:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003a3c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_RTC_SetDate+0x108>)
 8003a4a:	22ca      	movs	r2, #202	; 0xca
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_RTC_SetDate+0x108>)
 8003a50:	2253      	movs	r2, #83	; 0x53
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f9d1 	bl	8003dfc <RTC_EnterInitMode>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_RTC_SetDate+0x108>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f9f6 	bl	8003e64 <RTC_ExitInitMode>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RTC_SetDate+0x108>)
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d103      	bne.n	8003a90 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40002800 	.word	0x40002800

08003aa8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RTC_GetDate+0x98>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003abc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	0b5b      	lsrs	r3, r3, #13
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11a      	bne.n	8003b36 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	78db      	ldrb	r3, [r3, #3]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fa0a 	bl	8003f1e <RTC_Bcd2ToByte>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fa01 	bl	8003f1e <RTC_Bcd2ToByte>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	789b      	ldrb	r3, [r3, #2]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f9f8 	bl	8003f1e <RTC_Bcd2ToByte>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40002800 	.word	0x40002800

08003b44 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_RTC_SetAlarm_IT+0x1e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0f3      	b.n	8003d4a <HAL_RTC_SetAlarm_IT+0x206>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003b72:	4b78      	ldr	r3, [pc, #480]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d06a      	beq.n	8003c5a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d13a      	bne.n	8003c00 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b8a:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f999 	bl	8003ee0 <RTC_ByteToBcd2>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f992 	bl	8003ee0 <RTC_ByteToBcd2>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003bc0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	789b      	ldrb	r3, [r3, #2]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f98a 	bl	8003ee0 <RTC_ByteToBcd2>
 8003bcc:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003bce:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	78db      	ldrb	r3, [r3, #3]
 8003bd6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003bd8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f97c 	bl	8003ee0 <RTC_ByteToBcd2>
 8003be8:	4603      	mov	r3, r0
 8003bea:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003bec:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003bf4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e02c      	b.n	8003c5a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003c08:	d00d      	beq.n	8003c26 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c12:	d008      	beq.n	8003c26 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c32:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003c38:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	78db      	ldrb	r3, [r3, #3]
 8003c3e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003c40:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c48:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c4a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c50:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c5c:	22ca      	movs	r2, #202	; 0xca
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c62:	2253      	movs	r2, #83	; 0x53
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6e:	d12c      	bne.n	8003cca <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003c70:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4a37      	ldr	r2, [pc, #220]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c7a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c88:	d107      	bne.n	8003c9a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4930      	ldr	r1, [pc, #192]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	644b      	str	r3, [r1, #68]	; 0x44
 8003c98:	e006      	b.n	8003ca8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003c9a:	4a2e      	ldr	r2, [pc, #184]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003ca8:	4a2a      	ldr	r2, [pc, #168]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003cbc:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cc2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003cc6:	6193      	str	r3, [r2, #24]
 8003cc8:	e02b      	b.n	8003d22 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cd0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003cd4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cd8:	2202      	movs	r2, #2
 8003cda:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4919      	ldr	r1, [pc, #100]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cf2:	e006      	b.n	8003d02 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003d02:	4a14      	ldr	r2, [pc, #80]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d1c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003d20:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_RTC_SetAlarm_IT+0x214>)
 8003d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d28:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <HAL_RTC_SetAlarm_IT+0x214>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d34:	22ff      	movs	r2, #255	; 0xff
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd90      	pop	{r4, r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40002800 	.word	0x40002800
 8003d58:	58000800 	.word	0x58000800

08003d5c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fc fe8b 	bl	8000a9c <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d92:	2202      	movs	r2, #2
 8003d94:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f8dc 	bl	8003f54 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40002800 	.word	0x40002800

08003db0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_RTC_WaitForSynchro+0x48>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_RTC_WaitForSynchro+0x48>)
 8003dbe:	f023 0320 	bic.w	r3, r3, #32
 8003dc2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003dc4:	f7fd fdf2 	bl	80019ac <HAL_GetTick>
 8003dc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003dca:	e009      	b.n	8003de0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dcc:	f7fd fdee 	bl	80019ac <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dda:	d901      	bls.n	8003de0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e006      	b.n	8003dee <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RTC_WaitForSynchro+0x48>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ef      	beq.n	8003dcc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40002800 	.word	0x40002800

08003dfc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <RTC_EnterInitMode+0x64>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d120      	bne.n	8003e56 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <RTC_EnterInitMode+0x64>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <RTC_EnterInitMode+0x64>)
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003e20:	f7fd fdc4 	bl	80019ac <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e26:	e00d      	b.n	8003e44 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e28:	f7fd fdc0 	bl	80019ac <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e36:	d905      	bls.n	8003e44 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <RTC_EnterInitMode+0x64>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <RTC_EnterInitMode+0x5a>
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d1e8      	bne.n	8003e28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40002800 	.word	0x40002800

08003e64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <RTC_ExitInitMode+0x78>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <RTC_ExitInitMode+0x78>)
 8003e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e7c:	4b17      	ldr	r3, [pc, #92]	; (8003edc <RTC_ExitInitMode+0x78>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10c      	bne.n	8003ea2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff91 	bl	8003db0 <HAL_RTC_WaitForSynchro>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01e      	beq.n	8003ed2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2203      	movs	r2, #3
 8003e98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e017      	b.n	8003ed2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <RTC_ExitInitMode+0x78>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <RTC_ExitInitMode+0x78>)
 8003ea8:	f023 0320 	bic.w	r3, r3, #32
 8003eac:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ff7e 	bl	8003db0 <HAL_RTC_WaitForSynchro>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <RTC_ExitInitMode+0x78>)
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	4a04      	ldr	r2, [pc, #16]	; (8003edc <RTC_ExitInitMode+0x78>)
 8003ecc:	f043 0320 	orr.w	r3, r3, #32
 8003ed0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40002800 	.word	0x40002800

08003ee0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003ef2:	e005      	b.n	8003f00 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003efa:	7afb      	ldrb	r3, [r7, #11]
 8003efc:	3b0a      	subs	r3, #10
 8003efe:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003f00:	7afb      	ldrb	r3, [r7, #11]
 8003f02:	2b09      	cmp	r3, #9
 8003f04:	d8f6      	bhi.n	8003ef4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b2db      	uxtb	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	b2db      	uxtb	r3, r3
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_GetUSARTClockSource>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	401a      	ands	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	4313      	orrs	r3, r2
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_GetLPUARTClockSource>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4013      	ands	r3, r2
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e042      	b.n	8004040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fd faad 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2224      	movs	r2, #36	; 0x24
 8003fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fc2e 	bl	800484c <UART_SetConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e022      	b.n	8004040 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fe96 	bl	8004d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 ff1c 	bl	8004e76 <UART_CheckIdleState>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	2b20      	cmp	r3, #32
 8004060:	d173      	bne.n	800414a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_UART_Transmit+0x26>
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06c      	b.n	800414c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2221      	movs	r2, #33	; 0x21
 800407e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004082:	f7fd fc93 	bl	80019ac <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a0:	d108      	bne.n	80040b4 <HAL_UART_Transmit+0x6c>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d104      	bne.n	80040b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	e003      	b.n	80040bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040bc:	e02c      	b.n	8004118 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 ff22 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e039      	b.n	800414c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	3302      	adds	r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e007      	b.n	8004106 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	3301      	adds	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1cc      	bne.n	80040be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2200      	movs	r2, #0
 800412c:	2140      	movs	r1, #64	; 0x40
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 feef 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e006      	b.n	800414c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004168:	2b20      	cmp	r3, #32
 800416a:	d137      	bne.n	80041dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Receive_IT+0x24>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e030      	b.n	80041de <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <HAL_UART_Receive_IT+0x94>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01f      	beq.n	80041cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d018      	beq.n	80041cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	613b      	str	r3, [r7, #16]
   return(result);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	623b      	str	r3, [r7, #32]
 80041ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	69f9      	ldr	r1, [r7, #28]
 80041be:	6a3a      	ldr	r2, [r7, #32]
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e6      	bne.n	800419a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 ff66 	bl	80050a4 <UART_Start_Receive_IT>
 80041d8:	4603      	mov	r3, r0
 80041da:	e000      	b.n	80041de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3728      	adds	r7, #40	; 0x28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40008000 	.word	0x40008000

080041ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0ba      	sub	sp, #232	; 0xe8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004216:	f640 030f 	movw	r3, #2063	; 0x80f
 800421a:	4013      	ands	r3, r2
 800421c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11b      	bne.n	8004260 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 82e3 	beq.w	800481c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
      }
      return;
 800425e:	e2dd      	b.n	800481c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8123 	beq.w	80044b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800426a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800426e:	4b8d      	ldr	r3, [pc, #564]	; (80044a4 <HAL_UART_IRQHandler+0x2b8>)
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004276:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800427a:	4b8b      	ldr	r3, [pc, #556]	; (80044a8 <HAL_UART_IRQHandler+0x2bc>)
 800427c:	4013      	ands	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8116 	beq.w	80044b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d011      	beq.n	80042b4 <HAL_UART_IRQHandler+0xc8>
 8004290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2201      	movs	r2, #1
 80042a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f043 0201 	orr.w	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d011      	beq.n	80042e4 <HAL_UART_IRQHandler+0xf8>
 80042c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2202      	movs	r2, #2
 80042d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f043 0204 	orr.w	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d011      	beq.n	8004314 <HAL_UART_IRQHandler+0x128>
 80042f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2204      	movs	r2, #4
 8004302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f043 0202 	orr.w	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d017      	beq.n	8004350 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800432c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004330:	4b5c      	ldr	r3, [pc, #368]	; (80044a4 <HAL_UART_IRQHandler+0x2b8>)
 8004332:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2208      	movs	r2, #8
 800433e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f043 0208 	orr.w	r2, r3, #8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <HAL_UART_IRQHandler+0x196>
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8249 	beq.w	8004820 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800439a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d005      	beq.n	80043e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d054      	beq.n	8004490 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 ff7c 	bl	80052e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d146      	bne.n	8004488 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3308      	adds	r3, #8
 8004400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3308      	adds	r3, #8
 8004422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800442a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800443e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1d9      	bne.n	80043fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d017      	beq.n	8004480 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_UART_IRQHandler+0x2c0>)
 8004458:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004460:	4618      	mov	r0, r3
 8004462:	f7fd fc16 	bl	8001c92 <HAL_DMA_Abort_IT>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d019      	beq.n	80044a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800447a:	4610      	mov	r0, r2
 800447c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447e:	e00f      	b.n	80044a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc fac3 	bl	8000a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004486:	e00b      	b.n	80044a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fc fabf 	bl	8000a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448e:	e007      	b.n	80044a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fc fabb 	bl	8000a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800449e:	e1bf      	b.n	8004820 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	bf00      	nop
    return;
 80044a2:	e1bd      	b.n	8004820 <HAL_UART_IRQHandler+0x634>
 80044a4:	10000001 	.word	0x10000001
 80044a8:	04000120 	.word	0x04000120
 80044ac:	080053af 	.word	0x080053af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	f040 8153 	bne.w	8004760 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 814c 	beq.w	8004760 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8145 	beq.w	8004760 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2210      	movs	r2, #16
 80044dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	f040 80bb 	bne.w	8004664 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 818f 	beq.w	8004824 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800450c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004510:	429a      	cmp	r2, r3
 8004512:	f080 8187 	bcs.w	8004824 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800451c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 8087 	bne.w	8004642 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800455e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004562:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800456a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1da      	bne.n	8004534 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3308      	adds	r3, #8
 8004584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800458e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e1      	bne.n	800457e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3308      	adds	r3, #8
 80045da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e3      	bne.n	80045ba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800460e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004610:	f023 0310 	bic.w	r3, r3, #16
 8004614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004622:	65bb      	str	r3, [r7, #88]	; 0x58
 8004624:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e4      	bne.n	8004600 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463c:	4618      	mov	r0, r3
 800463e:	f7fd faca 	bl	8001bd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004654:	b29b      	uxth	r3, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8e9 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004662:	e0df      	b.n	8004824 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004670:	b29b      	uxth	r3, r3
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80d1 	beq.w	8004828 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80cc 	beq.w	8004828 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e4      	bne.n	8004690 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3308      	adds	r3, #8
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	623b      	str	r3, [r7, #32]
   return(result);
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3308      	adds	r3, #8
 80046ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046ee:	633a      	str	r2, [r7, #48]	; 0x30
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e1      	bne.n	80046c6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	60fb      	str	r3, [r7, #12]
   return(result);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0310 	bic.w	r3, r3, #16
 800472a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	617b      	str	r3, [r7, #20]
   return(result);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e4      	bne.n	8004716 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f86b 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800475e:	e063      	b.n	8004828 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00e      	beq.n	800478a <HAL_UART_IRQHandler+0x59e>
 800476c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f001 fb70 	bl	8005e68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004788:	e051      	b.n	800482e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d014      	beq.n	80047c0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d03a      	beq.n	800482c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
    }
    return;
 80047be:	e035      	b.n	800482c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_UART_IRQHandler+0x5f4>
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fdfe 	bl	80053da <UART_EndTransmit_IT>
    return;
 80047de:	e026      	b.n	800482e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <HAL_UART_IRQHandler+0x614>
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f001 fb47 	bl	8005e8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047fe:	e016      	b.n	800482e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d010      	beq.n	800482e <HAL_UART_IRQHandler+0x642>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004810:	2b00      	cmp	r3, #0
 8004812:	da0c      	bge.n	800482e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f001 fb30 	bl	8005e7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800481a:	e008      	b.n	800482e <HAL_UART_IRQHandler+0x642>
      return;
 800481c:	bf00      	nop
 800481e:	e006      	b.n	800482e <HAL_UART_IRQHandler+0x642>
    return;
 8004820:	bf00      	nop
 8004822:	e004      	b.n	800482e <HAL_UART_IRQHandler+0x642>
      return;
 8004824:	bf00      	nop
 8004826:	e002      	b.n	800482e <HAL_UART_IRQHandler+0x642>
      return;
 8004828:	bf00      	nop
 800482a:	e000      	b.n	800482e <HAL_UART_IRQHandler+0x642>
    return;
 800482c:	bf00      	nop
  }
}
 800482e:	37e8      	adds	r7, #232	; 0xe8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
	...

0800484c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800484c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004850:	b08c      	sub	sp, #48	; 0x30
 8004852:	af00      	add	r7, sp, #0
 8004854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	431a      	orrs	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	431a      	orrs	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4313      	orrs	r3, r2
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b94      	ldr	r3, [pc, #592]	; (8004acc <UART_SetConfig+0x280>)
 800487c:	4013      	ands	r3, r2
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004884:	430b      	orrs	r3, r1
 8004886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a89      	ldr	r2, [pc, #548]	; (8004ad0 <UART_SetConfig+0x284>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b4:	4313      	orrs	r3, r2
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	f023 010f 	bic.w	r1, r3, #15
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7a      	ldr	r2, [pc, #488]	; (8004ad4 <UART_SetConfig+0x288>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d127      	bne.n	8004940 <UART_SetConfig+0xf4>
 80048f0:	2003      	movs	r0, #3
 80048f2:	f7ff fb38 	bl	8003f66 <LL_RCC_GetUSARTClockSource>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d81b      	bhi.n	8004938 <UART_SetConfig+0xec>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0xbc>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004919 	.word	0x08004919
 800490c:	08004929 	.word	0x08004929
 8004910:	08004921 	.word	0x08004921
 8004914:	08004931 	.word	0x08004931
 8004918:	2301      	movs	r3, #1
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491e:	e080      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004920:	2302      	movs	r3, #2
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004926:	e07c      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492e:	e078      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e074      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493e:	e070      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a64      	ldr	r2, [pc, #400]	; (8004ad8 <UART_SetConfig+0x28c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d138      	bne.n	80049bc <UART_SetConfig+0x170>
 800494a:	200c      	movs	r0, #12
 800494c:	f7ff fb0b 	bl	8003f66 <LL_RCC_GetUSARTClockSource>
 8004950:	4603      	mov	r3, r0
 8004952:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d82c      	bhi.n	80049b4 <UART_SetConfig+0x168>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x114>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004995 	.word	0x08004995
 8004964:	080049b5 	.word	0x080049b5
 8004968:	080049b5 	.word	0x080049b5
 800496c:	080049b5 	.word	0x080049b5
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	0800499d 	.word	0x0800499d
 8004984:	080049b5 	.word	0x080049b5
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049ad 	.word	0x080049ad
 8004994:	2300      	movs	r3, #0
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e042      	b.n	8004a22 <UART_SetConfig+0x1d6>
 800499c:	2302      	movs	r3, #2
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e03e      	b.n	8004a22 <UART_SetConfig+0x1d6>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049aa:	e03a      	b.n	8004a22 <UART_SetConfig+0x1d6>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e036      	b.n	8004a22 <UART_SetConfig+0x1d6>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e032      	b.n	8004a22 <UART_SetConfig+0x1d6>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a43      	ldr	r2, [pc, #268]	; (8004ad0 <UART_SetConfig+0x284>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d12a      	bne.n	8004a1c <UART_SetConfig+0x1d0>
 80049c6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80049ca:	f7ff fade 	bl	8003f8a <LL_RCC_GetLPUARTClockSource>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d4:	d01a      	beq.n	8004a0c <UART_SetConfig+0x1c0>
 80049d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049da:	d81b      	bhi.n	8004a14 <UART_SetConfig+0x1c8>
 80049dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e0:	d00c      	beq.n	80049fc <UART_SetConfig+0x1b0>
 80049e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e6:	d815      	bhi.n	8004a14 <UART_SetConfig+0x1c8>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <UART_SetConfig+0x1a8>
 80049ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f0:	d008      	beq.n	8004a04 <UART_SetConfig+0x1b8>
 80049f2:	e00f      	b.n	8004a14 <UART_SetConfig+0x1c8>
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fa:	e012      	b.n	8004a22 <UART_SetConfig+0x1d6>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a02:	e00e      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0a:	e00a      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a12:	e006      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	e002      	b.n	8004a22 <UART_SetConfig+0x1d6>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <UART_SetConfig+0x284>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f040 80a4 	bne.w	8004b76 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d823      	bhi.n	8004a7e <UART_SetConfig+0x232>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x1f0>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a7f 	.word	0x08004a7f
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a7f 	.word	0x08004a7f
 8004a4c:	08004a6f 	.word	0x08004a6f
 8004a50:	08004a7f 	.word	0x08004a7f
 8004a54:	08004a7f 	.word	0x08004a7f
 8004a58:	08004a7f 	.word	0x08004a7f
 8004a5c:	08004a77 	.word	0x08004a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7fe fb38 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a66:	e010      	b.n	8004a8a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a68:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <UART_SetConfig+0x290>)
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a6c:	e00d      	b.n	8004a8a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6e:	f7fe fa7d 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8004a72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a74:	e009      	b.n	8004a8a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a7c:	e005      	b.n	8004a8a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8137 	beq.w	8004d00 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <UART_SetConfig+0x294>)
 8004a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	4413      	add	r3, r2
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d305      	bcc.n	8004ac2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d910      	bls.n	8004ae4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ac8:	e11a      	b.n	8004d00 <UART_SetConfig+0x4b4>
 8004aca:	bf00      	nop
 8004acc:	cfff69f3 	.word	0xcfff69f3
 8004ad0:	40008000 	.word	0x40008000
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40004400 	.word	0x40004400
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	08006b5c 	.word	0x08006b5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	60fa      	str	r2, [r7, #12]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	4a8e      	ldr	r2, [pc, #568]	; (8004d2c <UART_SetConfig+0x4e0>)
 8004af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2200      	movs	r2, #0
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b06:	f7fb fb8b 	bl	8000220 <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	020b      	lsls	r3, r1, #8
 8004b1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b20:	0202      	lsls	r2, r0, #8
 8004b22:	6979      	ldr	r1, [r7, #20]
 8004b24:	6849      	ldr	r1, [r1, #4]
 8004b26:	0849      	lsrs	r1, r1, #1
 8004b28:	2000      	movs	r0, #0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	eb12 0804 	adds.w	r8, r2, r4
 8004b32:	eb43 0905 	adc.w	r9, r3, r5
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	469a      	mov	sl, r3
 8004b3e:	4693      	mov	fp, r2
 8004b40:	4652      	mov	r2, sl
 8004b42:	465b      	mov	r3, fp
 8004b44:	4640      	mov	r0, r8
 8004b46:	4649      	mov	r1, r9
 8004b48:	f7fb fb6a 	bl	8000220 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5a:	d308      	bcc.n	8004b6e <UART_SetConfig+0x322>
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b62:	d204      	bcs.n	8004b6e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	e0c8      	b.n	8004d00 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b74:	e0c4      	b.n	8004d00 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d167      	bne.n	8004c50 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004b80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d828      	bhi.n	8004bda <UART_SetConfig+0x38e>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x344>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bdb 	.word	0x08004bdb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7fe fa8e 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bba:	e014      	b.n	8004be6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe fa9c 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc2:	e010      	b.n	8004be6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b5a      	ldr	r3, [pc, #360]	; (8004d30 <UART_SetConfig+0x4e4>)
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc8:	e00d      	b.n	8004be6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7fe f9cf 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bd0:	e009      	b.n	8004be6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bd8:	e005      	b.n	8004be6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8089 	beq.w	8004d00 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	4a4e      	ldr	r2, [pc, #312]	; (8004d2c <UART_SetConfig+0x4e0>)
 8004bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c00:	005a      	lsls	r2, r3, #1
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	441a      	add	r2, r3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	d916      	bls.n	8004c48 <UART_SetConfig+0x3fc>
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d212      	bcs.n	8004c48 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f023 030f 	bic.w	r3, r3, #15
 8004c2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	8bfb      	ldrh	r3, [r7, #30]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	8bfa      	ldrh	r2, [r7, #30]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	e05b      	b.n	8004d00 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c4e:	e057      	b.n	8004d00 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d828      	bhi.n	8004caa <UART_SetConfig+0x45e>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x414>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c9b 	.word	0x08004c9b
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004cab 	.word	0x08004cab
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe fa26 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c8a:	e014      	b.n	8004cb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7fe fa34 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8004c90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c92:	e010      	b.n	8004cb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <UART_SetConfig+0x4e4>)
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c98:	e00d      	b.n	8004cb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe f967 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ca0:	e009      	b.n	8004cb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ca8:	e005      	b.n	8004cb6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d021      	beq.n	8004d00 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	4a1a      	ldr	r2, [pc, #104]	; (8004d2c <UART_SetConfig+0x4e0>)
 8004cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	441a      	add	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d909      	bls.n	8004cfa <UART_SetConfig+0x4ae>
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d205      	bcs.n	8004cfa <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60da      	str	r2, [r3, #12]
 8004cf8:	e002      	b.n	8004d00 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3730      	adds	r7, #48	; 0x30
 8004d24:	46bd      	mov	sp, r7
 8004d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08006b5c 	.word	0x08006b5c
 8004d30:	00f42400 	.word	0x00f42400

08004d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01a      	beq.n	8004e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e32:	d10a      	bne.n	8004e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr

08004e76 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af02      	add	r7, sp, #8
 8004e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e86:	f7fc fd91 	bl	80019ac <HAL_GetTick>
 8004e8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d10e      	bne.n	8004eb8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f832 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e028      	b.n	8004f0a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d10e      	bne.n	8004ee4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f81c 	bl	8004f12 <UART_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e012      	b.n	8004f0a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b09c      	sub	sp, #112	; 0x70
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f22:	e0a9      	b.n	8005078 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2a:	f000 80a5 	beq.w	8005078 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fc fd3d 	bl	80019ac <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d140      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f58:	667b      	str	r3, [r7, #100]	; 0x64
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e6      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f96:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e5      	bne.n	8004f76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e069      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d051      	beq.n	8005078 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe2:	d149      	bne.n	8005078 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
 800500e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e6      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	66bb      	str	r3, [r7, #104]	; 0x68
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005040:	623a      	str	r2, [r7, #32]
 8005042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	61bb      	str	r3, [r7, #24]
   return(result);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e5      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e010      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	429a      	cmp	r2, r3
 8005094:	f43f af46 	beq.w	8004f24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3770      	adds	r7, #112	; 0x70
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b0a3      	sub	sp, #140	; 0x8c
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	d10e      	bne.n	80050f6 <UART_Start_Receive_IT+0x52>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <UART_Start_Receive_IT+0x48>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050ea:	e02d      	b.n	8005148 <UART_Start_Receive_IT+0xa4>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050f4:	e028      	b.n	8005148 <UART_Start_Receive_IT+0xa4>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <UART_Start_Receive_IT+0x76>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d104      	bne.n	8005110 <UART_Start_Receive_IT+0x6c>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800510e:	e01b      	b.n	8005148 <UART_Start_Receive_IT+0xa4>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	227f      	movs	r2, #127	; 0x7f
 8005114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005118:	e016      	b.n	8005148 <UART_Start_Receive_IT+0xa4>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005122:	d10d      	bne.n	8005140 <UART_Start_Receive_IT+0x9c>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <UART_Start_Receive_IT+0x92>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	227f      	movs	r2, #127	; 0x7f
 8005130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005134:	e008      	b.n	8005148 <UART_Start_Receive_IT+0xa4>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	223f      	movs	r2, #63	; 0x3f
 800513a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800513e:	e003      	b.n	8005148 <UART_Start_Receive_IT+0xa4>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2222      	movs	r2, #34	; 0x22
 8005154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3308      	adds	r3, #8
 8005178:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800517c:	673a      	str	r2, [r7, #112]	; 0x70
 800517e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005182:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800518a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e3      	bne.n	8005158 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005198:	d14f      	bne.n	800523a <UART_Start_Receive_IT+0x196>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051a0:	88fa      	ldrh	r2, [r7, #6]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d349      	bcc.n	800523a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	d107      	bne.n	80051c0 <UART_Start_Receive_IT+0x11c>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d103      	bne.n	80051c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a46      	ldr	r2, [pc, #280]	; (80052d4 <UART_Start_Receive_IT+0x230>)
 80051bc:	675a      	str	r2, [r3, #116]	; 0x74
 80051be:	e002      	b.n	80051c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a45      	ldr	r2, [pc, #276]	; (80052d8 <UART_Start_Receive_IT+0x234>)
 80051c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01a      	beq.n	8005204 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e4      	bne.n	80051ce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005224:	64ba      	str	r2, [r7, #72]	; 0x48
 8005226:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800522a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_Start_Receive_IT+0x160>
 8005238:	e046      	b.n	80052c8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d107      	bne.n	8005254 <UART_Start_Receive_IT+0x1b0>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a23      	ldr	r2, [pc, #140]	; (80052dc <UART_Start_Receive_IT+0x238>)
 8005250:	675a      	str	r2, [r3, #116]	; 0x74
 8005252:	e002      	b.n	800525a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <UART_Start_Receive_IT+0x23c>)
 8005258:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d019      	beq.n	8005296 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005276:	677b      	str	r3, [r7, #116]	; 0x74
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e6      	bne.n	8005262 <UART_Start_Receive_IT+0x1be>
 8005294:	e018      	b.n	80052c8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	613b      	str	r3, [r7, #16]
   return(result);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f043 0320 	orr.w	r3, r3, #32
 80052aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b4:	623b      	str	r3, [r7, #32]
 80052b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	69f9      	ldr	r1, [r7, #28]
 80052ba:	6a3a      	ldr	r2, [r7, #32]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	378c      	adds	r7, #140	; 0x8c
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	08005b01 	.word	0x08005b01
 80052d8:	080057a1 	.word	0x080057a1
 80052dc:	080055e9 	.word	0x080055e9
 80052e0:	08005431 	.word	0x08005431

080052e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b095      	sub	sp, #84	; 0x54
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	643b      	str	r3, [r7, #64]	; 0x40
 800530c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e6      	bne.n	80052ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	61fb      	str	r3, [r7, #28]
   return(result);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	64bb      	str	r3, [r7, #72]	; 0x48
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e3      	bne.n	800531e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d118      	bne.n	8005390 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	60bb      	str	r3, [r7, #8]
   return(result);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 0310 	bic.w	r3, r3, #16
 8005372:	647b      	str	r3, [r7, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	613b      	str	r3, [r7, #16]
   return(result);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80053a4:	bf00      	nop
 80053a6:	3754      	adds	r7, #84	; 0x54
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7fb fb1d 	bl	8000a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b088      	sub	sp, #32
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6979      	ldr	r1, [r7, #20]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	613b      	str	r3, [r7, #16]
   return(result);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fb fb0a 	bl	8000a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005428:	bf00      	nop
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b09c      	sub	sp, #112	; 0x70
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800543e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005448:	2b22      	cmp	r3, #34	; 0x22
 800544a:	f040 80be 	bne.w	80055ca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005458:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800545c:	b2d9      	uxtb	r1, r3
 800545e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005462:	b2da      	uxtb	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	400a      	ands	r2, r1
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	f040 80a1 	bne.w	80055da <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	667b      	str	r3, [r7, #100]	; 0x64
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054ea:	647a      	str	r2, [r7, #68]	; 0x44
 80054ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <UART_RxISR_8BIT+0x1b4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d01f      	beq.n	800555c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d018      	beq.n	800555c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	623b      	str	r3, [r7, #32]
   return(result);
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800553e:	663b      	str	r3, [r7, #96]	; 0x60
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005548:	633b      	str	r3, [r7, #48]	; 0x30
 800554a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800554e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d12e      	bne.n	80055c2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60fb      	str	r3, [r7, #12]
   return(result);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0310 	bic.w	r3, r3, #16
 800557e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	617b      	str	r3, [r7, #20]
   return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d103      	bne.n	80055b2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2210      	movs	r2, #16
 80055b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff f93a 	bl	8004834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055c0:	e00b      	b.n	80055da <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fb fa52 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 80055c8:	e007      	b.n	80055da <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0208 	orr.w	r2, r2, #8
 80055d8:	619a      	str	r2, [r3, #24]
}
 80055da:	bf00      	nop
 80055dc:	3770      	adds	r7, #112	; 0x70
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40008000 	.word	0x40008000

080055e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b09c      	sub	sp, #112	; 0x70
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80055f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005600:	2b22      	cmp	r3, #34	; 0x22
 8005602:	f040 80be 	bne.w	8005782 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005616:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800561a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800561e:	4013      	ands	r3, r2
 8005620:	b29a      	uxth	r2, r3
 8005622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005624:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 80a1 	bne.w	8005792 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800565e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005664:	667b      	str	r3, [r7, #100]	; 0x64
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800566e:	657b      	str	r3, [r7, #84]	; 0x54
 8005670:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800567c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e6      	bne.n	8005650 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	663b      	str	r3, [r7, #96]	; 0x60
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056a2:	643a      	str	r2, [r7, #64]	; 0x40
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a33      	ldr	r2, [pc, #204]	; (800579c <UART_RxISR_16BIT+0x1b4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d01f      	beq.n	8005714 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d018      	beq.n	8005714 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005702:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d12e      	bne.n	800577a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	65bb      	str	r3, [r7, #88]	; 0x58
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6979      	ldr	r1, [r7, #20]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e6      	bne.n	8005722 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b10      	cmp	r3, #16
 8005760:	d103      	bne.n	800576a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2210      	movs	r2, #16
 8005768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff f85e 	bl	8004834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005778:	e00b      	b.n	8005792 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb f976 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 8005780:	e007      	b.n	8005792 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0208 	orr.w	r2, r2, #8
 8005790:	619a      	str	r2, [r3, #24]
}
 8005792:	bf00      	nop
 8005794:	3770      	adds	r7, #112	; 0x70
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40008000 	.word	0x40008000

080057a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b0ac      	sub	sp, #176	; 0xb0
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d6:	2b22      	cmp	r3, #34	; 0x22
 80057d8:	f040 8182 	bne.w	8005ae0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057e2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057e6:	e125      	b.n	8005a34 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80057f6:	b2d9      	uxtb	r1, r3
 80057f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	400a      	ands	r2, r1
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800582e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d053      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800583a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2201      	movs	r2, #1
 8005858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f043 0201 	orr.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800586a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2202      	movs	r2, #2
 8005888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f043 0204 	orr.w	r2, r3, #4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d011      	beq.n	80058ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 80058a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2204      	movs	r2, #4
 80058b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fb f899 	bl	8000a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 80a2 	bne.w	8005a34 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005912:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005914:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e4      	bne.n	80058f0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800594e:	66ba      	str	r2, [r7, #104]	; 0x68
 8005950:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005954:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800595c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e1      	bne.n	8005926 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5f      	ldr	r2, [pc, #380]	; (8005af8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d021      	beq.n	80059c4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01a      	beq.n	80059c4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800599c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059b0:	657b      	str	r3, [r7, #84]	; 0x54
 80059b2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e4      	bne.n	800598e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d130      	bne.n	8005a2e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059f4:	643b      	str	r3, [r7, #64]	; 0x40
 80059f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e4      	bne.n	80059d2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 0310 	and.w	r3, r3, #16
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d103      	bne.n	8005a1e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fe ff04 	bl	8004834 <HAL_UARTEx_RxEventCallback>
 8005a2c:	e002      	b.n	8005a34 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fb f81c 	bl	8000a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a34:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f47f aecf 	bne.w	80057e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d049      	beq.n	8005af0 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a62:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d242      	bcs.n	8005af0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a15      	ldr	r2, [pc, #84]	; (8005afc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005aa6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f043 0320 	orr.w	r3, r3, #32
 8005abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e4      	bne.n	8005aa8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ade:	e007      	b.n	8005af0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0208 	orr.w	r2, r2, #8
 8005aee:	619a      	str	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	37b0      	adds	r7, #176	; 0xb0
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40008000 	.word	0x40008000
 8005afc:	08005431 	.word	0x08005431

08005b00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b0ae      	sub	sp, #184	; 0xb8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b0e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b36:	2b22      	cmp	r3, #34	; 0x22
 8005b38:	f040 8186 	bne.w	8005e48 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b42:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b46:	e129      	b.n	8005d9c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b5a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005b5e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005b62:	4013      	ands	r3, r2
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	1c9a      	adds	r2, r3, #2
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d053      	beq.n	8005c46 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <UART_RxISR_16BIT_FIFOEN+0xce>
 8005baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc4:	f043 0201 	orr.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d011      	beq.n	8005bfe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2202      	movs	r2, #2
 8005bec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf4:	f043 0204 	orr.w	r2, r3, #4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d011      	beq.n	8005c2e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c24:	f043 0202 	orr.w	r2, r3, #2
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d006      	beq.n	8005c46 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fa fee7 	bl	8000a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f040 80a4 	bne.w	8005d9c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e2      	bne.n	8005c54 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3308      	adds	r3, #8
 8005c94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e1      	bne.n	8005c8e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a5f      	ldr	r2, [pc, #380]	; (8005e60 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d021      	beq.n	8005d2c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01a      	beq.n	8005d2c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d18:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e4      	bne.n	8005cf6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d130      	bne.n	8005d96 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	f023 0310 	bic.w	r3, r3, #16
 8005d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e4      	bne.n	8005d3a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d103      	bne.n	8005d86 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2210      	movs	r2, #16
 8005d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fe fd50 	bl	8004834 <HAL_UARTEx_RxEventCallback>
 8005d94:	e002      	b.n	8005d9c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fa fe68 	bl	8000a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d9c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d006      	beq.n	8005db2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f47f aecb 	bne.w	8005b48 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005db8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dbc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d049      	beq.n	8005e58 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d242      	bcs.n	8005e58 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	623b      	str	r3, [r7, #32]
   return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3308      	adds	r3, #8
 8005df2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005df6:	633a      	str	r2, [r7, #48]	; 0x30
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e3      	bne.n	8005dd2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005e0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f043 0320 	orr.w	r3, r3, #32
 8005e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e4      	bne.n	8005e10 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e46:	e007      	b.n	8005e58 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0208 	orr.w	r2, r2, #8
 8005e56:	619a      	str	r2, [r3, #24]
}
 8005e58:	bf00      	nop
 8005e5a:	37b8      	adds	r7, #184	; 0xb8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40008000 	.word	0x40008000
 8005e64:	080055e9 	.word	0x080055e9

08005e68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr

08005e9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e027      	b.n	8005f04 <HAL_UARTEx_DisableFifoMode+0x66>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	; 0x24
 8005ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ee2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e02d      	b.n	8005f82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2224      	movs	r2, #36	; 0x24
 8005f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f850 	bl	8006008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e02d      	b.n	8005ffe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2224      	movs	r2, #36	; 0x24
 8005fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f812 	bl	8006008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006028:	e031      	b.n	800608e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800602a:	2308      	movs	r3, #8
 800602c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800602e:	2308      	movs	r3, #8
 8006030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	0e5b      	lsrs	r3, r3, #25
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	0f5b      	lsrs	r3, r3, #29
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	7b3a      	ldrb	r2, [r7, #12]
 8006056:	4910      	ldr	r1, [pc, #64]	; (8006098 <UARTEx_SetNbDataToProcess+0x90>)
 8006058:	5c8a      	ldrb	r2, [r1, r2]
 800605a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800605e:	7b3a      	ldrb	r2, [r7, #12]
 8006060:	490e      	ldr	r1, [pc, #56]	; (800609c <UARTEx_SetNbDataToProcess+0x94>)
 8006062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006064:	fb93 f3f2 	sdiv	r3, r3, r2
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	7b7a      	ldrb	r2, [r7, #13]
 8006074:	4908      	ldr	r1, [pc, #32]	; (8006098 <UARTEx_SetNbDataToProcess+0x90>)
 8006076:	5c8a      	ldrb	r2, [r1, r2]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800607c:	7b7a      	ldrb	r2, [r7, #13]
 800607e:	4907      	ldr	r1, [pc, #28]	; (800609c <UARTEx_SetNbDataToProcess+0x94>)
 8006080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006082:	fb93 f3f2 	sdiv	r3, r3, r2
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	08006b74 	.word	0x08006b74
 800609c:	08006b7c 	.word	0x08006b7c

080060a0 <__errno>:
 80060a0:	4b01      	ldr	r3, [pc, #4]	; (80060a8 <__errno+0x8>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	2000000c 	.word	0x2000000c

080060ac <__libc_init_array>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	4d0d      	ldr	r5, [pc, #52]	; (80060e4 <__libc_init_array+0x38>)
 80060b0:	4c0d      	ldr	r4, [pc, #52]	; (80060e8 <__libc_init_array+0x3c>)
 80060b2:	1b64      	subs	r4, r4, r5
 80060b4:	10a4      	asrs	r4, r4, #2
 80060b6:	2600      	movs	r6, #0
 80060b8:	42a6      	cmp	r6, r4
 80060ba:	d109      	bne.n	80060d0 <__libc_init_array+0x24>
 80060bc:	4d0b      	ldr	r5, [pc, #44]	; (80060ec <__libc_init_array+0x40>)
 80060be:	4c0c      	ldr	r4, [pc, #48]	; (80060f0 <__libc_init_array+0x44>)
 80060c0:	f000 fca0 	bl	8006a04 <_init>
 80060c4:	1b64      	subs	r4, r4, r5
 80060c6:	10a4      	asrs	r4, r4, #2
 80060c8:	2600      	movs	r6, #0
 80060ca:	42a6      	cmp	r6, r4
 80060cc:	d105      	bne.n	80060da <__libc_init_array+0x2e>
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d4:	4798      	blx	r3
 80060d6:	3601      	adds	r6, #1
 80060d8:	e7ee      	b.n	80060b8 <__libc_init_array+0xc>
 80060da:	f855 3b04 	ldr.w	r3, [r5], #4
 80060de:	4798      	blx	r3
 80060e0:	3601      	adds	r6, #1
 80060e2:	e7f2      	b.n	80060ca <__libc_init_array+0x1e>
 80060e4:	08006bc0 	.word	0x08006bc0
 80060e8:	08006bc0 	.word	0x08006bc0
 80060ec:	08006bc0 	.word	0x08006bc0
 80060f0:	08006bc4 	.word	0x08006bc4

080060f4 <memcpy>:
 80060f4:	440a      	add	r2, r1
 80060f6:	4291      	cmp	r1, r2
 80060f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060fc:	d100      	bne.n	8006100 <memcpy+0xc>
 80060fe:	4770      	bx	lr
 8006100:	b510      	push	{r4, lr}
 8006102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800610a:	4291      	cmp	r1, r2
 800610c:	d1f9      	bne.n	8006102 <memcpy+0xe>
 800610e:	bd10      	pop	{r4, pc}

08006110 <memset>:
 8006110:	4402      	add	r2, r0
 8006112:	4603      	mov	r3, r0
 8006114:	4293      	cmp	r3, r2
 8006116:	d100      	bne.n	800611a <memset+0xa>
 8006118:	4770      	bx	lr
 800611a:	f803 1b01 	strb.w	r1, [r3], #1
 800611e:	e7f9      	b.n	8006114 <memset+0x4>

08006120 <sniprintf>:
 8006120:	b40c      	push	{r2, r3}
 8006122:	b530      	push	{r4, r5, lr}
 8006124:	4b17      	ldr	r3, [pc, #92]	; (8006184 <sniprintf+0x64>)
 8006126:	1e0c      	subs	r4, r1, #0
 8006128:	681d      	ldr	r5, [r3, #0]
 800612a:	b09d      	sub	sp, #116	; 0x74
 800612c:	da08      	bge.n	8006140 <sniprintf+0x20>
 800612e:	238b      	movs	r3, #139	; 0x8b
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006136:	b01d      	add	sp, #116	; 0x74
 8006138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800613c:	b002      	add	sp, #8
 800613e:	4770      	bx	lr
 8006140:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006144:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006148:	bf14      	ite	ne
 800614a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800614e:	4623      	moveq	r3, r4
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	9307      	str	r3, [sp, #28]
 8006154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006158:	9002      	str	r0, [sp, #8]
 800615a:	9006      	str	r0, [sp, #24]
 800615c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006162:	ab21      	add	r3, sp, #132	; 0x84
 8006164:	a902      	add	r1, sp, #8
 8006166:	4628      	mov	r0, r5
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	f000 f869 	bl	8006240 <_svfiprintf_r>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	bfbc      	itt	lt
 8006172:	238b      	movlt	r3, #139	; 0x8b
 8006174:	602b      	strlt	r3, [r5, #0]
 8006176:	2c00      	cmp	r4, #0
 8006178:	d0dd      	beq.n	8006136 <sniprintf+0x16>
 800617a:	9b02      	ldr	r3, [sp, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e7d9      	b.n	8006136 <sniprintf+0x16>
 8006182:	bf00      	nop
 8006184:	2000000c 	.word	0x2000000c

08006188 <__ssputs_r>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	688e      	ldr	r6, [r1, #8]
 800618e:	429e      	cmp	r6, r3
 8006190:	4682      	mov	sl, r0
 8006192:	460c      	mov	r4, r1
 8006194:	4690      	mov	r8, r2
 8006196:	461f      	mov	r7, r3
 8006198:	d838      	bhi.n	800620c <__ssputs_r+0x84>
 800619a:	898a      	ldrh	r2, [r1, #12]
 800619c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061a0:	d032      	beq.n	8006208 <__ssputs_r+0x80>
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	6909      	ldr	r1, [r1, #16]
 80061a6:	eba5 0901 	sub.w	r9, r5, r1
 80061aa:	6965      	ldr	r5, [r4, #20]
 80061ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061b4:	3301      	adds	r3, #1
 80061b6:	444b      	add	r3, r9
 80061b8:	106d      	asrs	r5, r5, #1
 80061ba:	429d      	cmp	r5, r3
 80061bc:	bf38      	it	cc
 80061be:	461d      	movcc	r5, r3
 80061c0:	0553      	lsls	r3, r2, #21
 80061c2:	d531      	bpl.n	8006228 <__ssputs_r+0xa0>
 80061c4:	4629      	mov	r1, r5
 80061c6:	f000 fb53 	bl	8006870 <_malloc_r>
 80061ca:	4606      	mov	r6, r0
 80061cc:	b950      	cbnz	r0, 80061e4 <__ssputs_r+0x5c>
 80061ce:	230c      	movs	r3, #12
 80061d0:	f8ca 3000 	str.w	r3, [sl]
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e4:	6921      	ldr	r1, [r4, #16]
 80061e6:	464a      	mov	r2, r9
 80061e8:	f7ff ff84 	bl	80060f4 <memcpy>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	6126      	str	r6, [r4, #16]
 80061fa:	6165      	str	r5, [r4, #20]
 80061fc:	444e      	add	r6, r9
 80061fe:	eba5 0509 	sub.w	r5, r5, r9
 8006202:	6026      	str	r6, [r4, #0]
 8006204:	60a5      	str	r5, [r4, #8]
 8006206:	463e      	mov	r6, r7
 8006208:	42be      	cmp	r6, r7
 800620a:	d900      	bls.n	800620e <__ssputs_r+0x86>
 800620c:	463e      	mov	r6, r7
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	4632      	mov	r2, r6
 8006212:	4641      	mov	r1, r8
 8006214:	f000 faa8 	bl	8006768 <memmove>
 8006218:	68a3      	ldr	r3, [r4, #8]
 800621a:	1b9b      	subs	r3, r3, r6
 800621c:	60a3      	str	r3, [r4, #8]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	4433      	add	r3, r6
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	2000      	movs	r0, #0
 8006226:	e7db      	b.n	80061e0 <__ssputs_r+0x58>
 8006228:	462a      	mov	r2, r5
 800622a:	f000 fb95 	bl	8006958 <_realloc_r>
 800622e:	4606      	mov	r6, r0
 8006230:	2800      	cmp	r0, #0
 8006232:	d1e1      	bne.n	80061f8 <__ssputs_r+0x70>
 8006234:	6921      	ldr	r1, [r4, #16]
 8006236:	4650      	mov	r0, sl
 8006238:	f000 fab0 	bl	800679c <_free_r>
 800623c:	e7c7      	b.n	80061ce <__ssputs_r+0x46>
	...

08006240 <_svfiprintf_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	4698      	mov	r8, r3
 8006246:	898b      	ldrh	r3, [r1, #12]
 8006248:	061b      	lsls	r3, r3, #24
 800624a:	b09d      	sub	sp, #116	; 0x74
 800624c:	4607      	mov	r7, r0
 800624e:	460d      	mov	r5, r1
 8006250:	4614      	mov	r4, r2
 8006252:	d50e      	bpl.n	8006272 <_svfiprintf_r+0x32>
 8006254:	690b      	ldr	r3, [r1, #16]
 8006256:	b963      	cbnz	r3, 8006272 <_svfiprintf_r+0x32>
 8006258:	2140      	movs	r1, #64	; 0x40
 800625a:	f000 fb09 	bl	8006870 <_malloc_r>
 800625e:	6028      	str	r0, [r5, #0]
 8006260:	6128      	str	r0, [r5, #16]
 8006262:	b920      	cbnz	r0, 800626e <_svfiprintf_r+0x2e>
 8006264:	230c      	movs	r3, #12
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800626c:	e0d1      	b.n	8006412 <_svfiprintf_r+0x1d2>
 800626e:	2340      	movs	r3, #64	; 0x40
 8006270:	616b      	str	r3, [r5, #20]
 8006272:	2300      	movs	r3, #0
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	2320      	movs	r3, #32
 8006278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800627c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006280:	2330      	movs	r3, #48	; 0x30
 8006282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800642c <_svfiprintf_r+0x1ec>
 8006286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800628a:	f04f 0901 	mov.w	r9, #1
 800628e:	4623      	mov	r3, r4
 8006290:	469a      	mov	sl, r3
 8006292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006296:	b10a      	cbz	r2, 800629c <_svfiprintf_r+0x5c>
 8006298:	2a25      	cmp	r2, #37	; 0x25
 800629a:	d1f9      	bne.n	8006290 <_svfiprintf_r+0x50>
 800629c:	ebba 0b04 	subs.w	fp, sl, r4
 80062a0:	d00b      	beq.n	80062ba <_svfiprintf_r+0x7a>
 80062a2:	465b      	mov	r3, fp
 80062a4:	4622      	mov	r2, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff ff6d 	bl	8006188 <__ssputs_r>
 80062ae:	3001      	adds	r0, #1
 80062b0:	f000 80aa 	beq.w	8006408 <_svfiprintf_r+0x1c8>
 80062b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b6:	445a      	add	r2, fp
 80062b8:	9209      	str	r2, [sp, #36]	; 0x24
 80062ba:	f89a 3000 	ldrb.w	r3, [sl]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80a2 	beq.w	8006408 <_svfiprintf_r+0x1c8>
 80062c4:	2300      	movs	r3, #0
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ce:	f10a 0a01 	add.w	sl, sl, #1
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	9307      	str	r3, [sp, #28]
 80062d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062da:	931a      	str	r3, [sp, #104]	; 0x68
 80062dc:	4654      	mov	r4, sl
 80062de:	2205      	movs	r2, #5
 80062e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e4:	4851      	ldr	r0, [pc, #324]	; (800642c <_svfiprintf_r+0x1ec>)
 80062e6:	f7f9 ff4b 	bl	8000180 <memchr>
 80062ea:	9a04      	ldr	r2, [sp, #16]
 80062ec:	b9d8      	cbnz	r0, 8006326 <_svfiprintf_r+0xe6>
 80062ee:	06d0      	lsls	r0, r2, #27
 80062f0:	bf44      	itt	mi
 80062f2:	2320      	movmi	r3, #32
 80062f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f8:	0711      	lsls	r1, r2, #28
 80062fa:	bf44      	itt	mi
 80062fc:	232b      	movmi	r3, #43	; 0x2b
 80062fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006302:	f89a 3000 	ldrb.w	r3, [sl]
 8006306:	2b2a      	cmp	r3, #42	; 0x2a
 8006308:	d015      	beq.n	8006336 <_svfiprintf_r+0xf6>
 800630a:	9a07      	ldr	r2, [sp, #28]
 800630c:	4654      	mov	r4, sl
 800630e:	2000      	movs	r0, #0
 8006310:	f04f 0c0a 	mov.w	ip, #10
 8006314:	4621      	mov	r1, r4
 8006316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800631a:	3b30      	subs	r3, #48	; 0x30
 800631c:	2b09      	cmp	r3, #9
 800631e:	d94e      	bls.n	80063be <_svfiprintf_r+0x17e>
 8006320:	b1b0      	cbz	r0, 8006350 <_svfiprintf_r+0x110>
 8006322:	9207      	str	r2, [sp, #28]
 8006324:	e014      	b.n	8006350 <_svfiprintf_r+0x110>
 8006326:	eba0 0308 	sub.w	r3, r0, r8
 800632a:	fa09 f303 	lsl.w	r3, r9, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	46a2      	mov	sl, r4
 8006334:	e7d2      	b.n	80062dc <_svfiprintf_r+0x9c>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	1d19      	adds	r1, r3, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	9103      	str	r1, [sp, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfbb      	ittet	lt
 8006342:	425b      	neglt	r3, r3
 8006344:	f042 0202 	orrlt.w	r2, r2, #2
 8006348:	9307      	strge	r3, [sp, #28]
 800634a:	9307      	strlt	r3, [sp, #28]
 800634c:	bfb8      	it	lt
 800634e:	9204      	strlt	r2, [sp, #16]
 8006350:	7823      	ldrb	r3, [r4, #0]
 8006352:	2b2e      	cmp	r3, #46	; 0x2e
 8006354:	d10c      	bne.n	8006370 <_svfiprintf_r+0x130>
 8006356:	7863      	ldrb	r3, [r4, #1]
 8006358:	2b2a      	cmp	r3, #42	; 0x2a
 800635a:	d135      	bne.n	80063c8 <_svfiprintf_r+0x188>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	9203      	str	r2, [sp, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfb8      	it	lt
 8006368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800636c:	3402      	adds	r4, #2
 800636e:	9305      	str	r3, [sp, #20]
 8006370:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006430 <_svfiprintf_r+0x1f0>
 8006374:	7821      	ldrb	r1, [r4, #0]
 8006376:	2203      	movs	r2, #3
 8006378:	4650      	mov	r0, sl
 800637a:	f7f9 ff01 	bl	8000180 <memchr>
 800637e:	b140      	cbz	r0, 8006392 <_svfiprintf_r+0x152>
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	eba0 000a 	sub.w	r0, r0, sl
 8006386:	fa03 f000 	lsl.w	r0, r3, r0
 800638a:	9b04      	ldr	r3, [sp, #16]
 800638c:	4303      	orrs	r3, r0
 800638e:	3401      	adds	r4, #1
 8006390:	9304      	str	r3, [sp, #16]
 8006392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006396:	4827      	ldr	r0, [pc, #156]	; (8006434 <_svfiprintf_r+0x1f4>)
 8006398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800639c:	2206      	movs	r2, #6
 800639e:	f7f9 feef 	bl	8000180 <memchr>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d038      	beq.n	8006418 <_svfiprintf_r+0x1d8>
 80063a6:	4b24      	ldr	r3, [pc, #144]	; (8006438 <_svfiprintf_r+0x1f8>)
 80063a8:	bb1b      	cbnz	r3, 80063f2 <_svfiprintf_r+0x1b2>
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	3307      	adds	r3, #7
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	3308      	adds	r3, #8
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b8:	4433      	add	r3, r6
 80063ba:	9309      	str	r3, [sp, #36]	; 0x24
 80063bc:	e767      	b.n	800628e <_svfiprintf_r+0x4e>
 80063be:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c2:	460c      	mov	r4, r1
 80063c4:	2001      	movs	r0, #1
 80063c6:	e7a5      	b.n	8006314 <_svfiprintf_r+0xd4>
 80063c8:	2300      	movs	r3, #0
 80063ca:	3401      	adds	r4, #1
 80063cc:	9305      	str	r3, [sp, #20]
 80063ce:	4619      	mov	r1, r3
 80063d0:	f04f 0c0a 	mov.w	ip, #10
 80063d4:	4620      	mov	r0, r4
 80063d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063da:	3a30      	subs	r2, #48	; 0x30
 80063dc:	2a09      	cmp	r2, #9
 80063de:	d903      	bls.n	80063e8 <_svfiprintf_r+0x1a8>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0c5      	beq.n	8006370 <_svfiprintf_r+0x130>
 80063e4:	9105      	str	r1, [sp, #20]
 80063e6:	e7c3      	b.n	8006370 <_svfiprintf_r+0x130>
 80063e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ec:	4604      	mov	r4, r0
 80063ee:	2301      	movs	r3, #1
 80063f0:	e7f0      	b.n	80063d4 <_svfiprintf_r+0x194>
 80063f2:	ab03      	add	r3, sp, #12
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	462a      	mov	r2, r5
 80063f8:	4b10      	ldr	r3, [pc, #64]	; (800643c <_svfiprintf_r+0x1fc>)
 80063fa:	a904      	add	r1, sp, #16
 80063fc:	4638      	mov	r0, r7
 80063fe:	f3af 8000 	nop.w
 8006402:	1c42      	adds	r2, r0, #1
 8006404:	4606      	mov	r6, r0
 8006406:	d1d6      	bne.n	80063b6 <_svfiprintf_r+0x176>
 8006408:	89ab      	ldrh	r3, [r5, #12]
 800640a:	065b      	lsls	r3, r3, #25
 800640c:	f53f af2c 	bmi.w	8006268 <_svfiprintf_r+0x28>
 8006410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006412:	b01d      	add	sp, #116	; 0x74
 8006414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006418:	ab03      	add	r3, sp, #12
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	462a      	mov	r2, r5
 800641e:	4b07      	ldr	r3, [pc, #28]	; (800643c <_svfiprintf_r+0x1fc>)
 8006420:	a904      	add	r1, sp, #16
 8006422:	4638      	mov	r0, r7
 8006424:	f000 f87a 	bl	800651c <_printf_i>
 8006428:	e7eb      	b.n	8006402 <_svfiprintf_r+0x1c2>
 800642a:	bf00      	nop
 800642c:	08006b84 	.word	0x08006b84
 8006430:	08006b8a 	.word	0x08006b8a
 8006434:	08006b8e 	.word	0x08006b8e
 8006438:	00000000 	.word	0x00000000
 800643c:	08006189 	.word	0x08006189

08006440 <_printf_common>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	4616      	mov	r6, r2
 8006446:	4699      	mov	r9, r3
 8006448:	688a      	ldr	r2, [r1, #8]
 800644a:	690b      	ldr	r3, [r1, #16]
 800644c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006450:	4293      	cmp	r3, r2
 8006452:	bfb8      	it	lt
 8006454:	4613      	movlt	r3, r2
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800645c:	4607      	mov	r7, r0
 800645e:	460c      	mov	r4, r1
 8006460:	b10a      	cbz	r2, 8006466 <_printf_common+0x26>
 8006462:	3301      	adds	r3, #1
 8006464:	6033      	str	r3, [r6, #0]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	0699      	lsls	r1, r3, #26
 800646a:	bf42      	ittt	mi
 800646c:	6833      	ldrmi	r3, [r6, #0]
 800646e:	3302      	addmi	r3, #2
 8006470:	6033      	strmi	r3, [r6, #0]
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	f015 0506 	ands.w	r5, r5, #6
 8006478:	d106      	bne.n	8006488 <_printf_common+0x48>
 800647a:	f104 0a19 	add.w	sl, r4, #25
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	6832      	ldr	r2, [r6, #0]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	42ab      	cmp	r3, r5
 8006486:	dc26      	bgt.n	80064d6 <_printf_common+0x96>
 8006488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800648c:	1e13      	subs	r3, r2, #0
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	bf18      	it	ne
 8006492:	2301      	movne	r3, #1
 8006494:	0692      	lsls	r2, r2, #26
 8006496:	d42b      	bmi.n	80064f0 <_printf_common+0xb0>
 8006498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800649c:	4649      	mov	r1, r9
 800649e:	4638      	mov	r0, r7
 80064a0:	47c0      	blx	r8
 80064a2:	3001      	adds	r0, #1
 80064a4:	d01e      	beq.n	80064e4 <_printf_common+0xa4>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	68e5      	ldr	r5, [r4, #12]
 80064aa:	6832      	ldr	r2, [r6, #0]
 80064ac:	f003 0306 	and.w	r3, r3, #6
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	bf08      	it	eq
 80064b4:	1aad      	subeq	r5, r5, r2
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	6922      	ldr	r2, [r4, #16]
 80064ba:	bf0c      	ite	eq
 80064bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c0:	2500      	movne	r5, #0
 80064c2:	4293      	cmp	r3, r2
 80064c4:	bfc4      	itt	gt
 80064c6:	1a9b      	subgt	r3, r3, r2
 80064c8:	18ed      	addgt	r5, r5, r3
 80064ca:	2600      	movs	r6, #0
 80064cc:	341a      	adds	r4, #26
 80064ce:	42b5      	cmp	r5, r6
 80064d0:	d11a      	bne.n	8006508 <_printf_common+0xc8>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e008      	b.n	80064e8 <_printf_common+0xa8>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4652      	mov	r2, sl
 80064da:	4649      	mov	r1, r9
 80064dc:	4638      	mov	r0, r7
 80064de:	47c0      	blx	r8
 80064e0:	3001      	adds	r0, #1
 80064e2:	d103      	bne.n	80064ec <_printf_common+0xac>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ec:	3501      	adds	r5, #1
 80064ee:	e7c6      	b.n	800647e <_printf_common+0x3e>
 80064f0:	18e1      	adds	r1, r4, r3
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	2030      	movs	r0, #48	; 0x30
 80064f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064fa:	4422      	add	r2, r4
 80064fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006504:	3302      	adds	r3, #2
 8006506:	e7c7      	b.n	8006498 <_printf_common+0x58>
 8006508:	2301      	movs	r3, #1
 800650a:	4622      	mov	r2, r4
 800650c:	4649      	mov	r1, r9
 800650e:	4638      	mov	r0, r7
 8006510:	47c0      	blx	r8
 8006512:	3001      	adds	r0, #1
 8006514:	d0e6      	beq.n	80064e4 <_printf_common+0xa4>
 8006516:	3601      	adds	r6, #1
 8006518:	e7d9      	b.n	80064ce <_printf_common+0x8e>
	...

0800651c <_printf_i>:
 800651c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	7e0f      	ldrb	r7, [r1, #24]
 8006522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006524:	2f78      	cmp	r7, #120	; 0x78
 8006526:	4691      	mov	r9, r2
 8006528:	4680      	mov	r8, r0
 800652a:	460c      	mov	r4, r1
 800652c:	469a      	mov	sl, r3
 800652e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006532:	d807      	bhi.n	8006544 <_printf_i+0x28>
 8006534:	2f62      	cmp	r7, #98	; 0x62
 8006536:	d80a      	bhi.n	800654e <_printf_i+0x32>
 8006538:	2f00      	cmp	r7, #0
 800653a:	f000 80d8 	beq.w	80066ee <_printf_i+0x1d2>
 800653e:	2f58      	cmp	r7, #88	; 0x58
 8006540:	f000 80a3 	beq.w	800668a <_printf_i+0x16e>
 8006544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800654c:	e03a      	b.n	80065c4 <_printf_i+0xa8>
 800654e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006552:	2b15      	cmp	r3, #21
 8006554:	d8f6      	bhi.n	8006544 <_printf_i+0x28>
 8006556:	a101      	add	r1, pc, #4	; (adr r1, 800655c <_printf_i+0x40>)
 8006558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065c9 	.word	0x080065c9
 8006564:	08006545 	.word	0x08006545
 8006568:	08006545 	.word	0x08006545
 800656c:	08006545 	.word	0x08006545
 8006570:	08006545 	.word	0x08006545
 8006574:	080065c9 	.word	0x080065c9
 8006578:	08006545 	.word	0x08006545
 800657c:	08006545 	.word	0x08006545
 8006580:	08006545 	.word	0x08006545
 8006584:	08006545 	.word	0x08006545
 8006588:	080066d5 	.word	0x080066d5
 800658c:	080065f9 	.word	0x080065f9
 8006590:	080066b7 	.word	0x080066b7
 8006594:	08006545 	.word	0x08006545
 8006598:	08006545 	.word	0x08006545
 800659c:	080066f7 	.word	0x080066f7
 80065a0:	08006545 	.word	0x08006545
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	08006545 	.word	0x08006545
 80065ac:	08006545 	.word	0x08006545
 80065b0:	080066bf 	.word	0x080066bf
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	602a      	str	r2, [r5, #0]
 80065bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0a3      	b.n	8006710 <_printf_i+0x1f4>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	6829      	ldr	r1, [r5, #0]
 80065cc:	0606      	lsls	r6, r0, #24
 80065ce:	f101 0304 	add.w	r3, r1, #4
 80065d2:	d50a      	bpl.n	80065ea <_printf_i+0xce>
 80065d4:	680e      	ldr	r6, [r1, #0]
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	2e00      	cmp	r6, #0
 80065da:	da03      	bge.n	80065e4 <_printf_i+0xc8>
 80065dc:	232d      	movs	r3, #45	; 0x2d
 80065de:	4276      	negs	r6, r6
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	485e      	ldr	r0, [pc, #376]	; (8006760 <_printf_i+0x244>)
 80065e6:	230a      	movs	r3, #10
 80065e8:	e019      	b.n	800661e <_printf_i+0x102>
 80065ea:	680e      	ldr	r6, [r1, #0]
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065f2:	bf18      	it	ne
 80065f4:	b236      	sxthne	r6, r6
 80065f6:	e7ef      	b.n	80065d8 <_printf_i+0xbc>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	1d19      	adds	r1, r3, #4
 80065fe:	6029      	str	r1, [r5, #0]
 8006600:	0601      	lsls	r1, r0, #24
 8006602:	d501      	bpl.n	8006608 <_printf_i+0xec>
 8006604:	681e      	ldr	r6, [r3, #0]
 8006606:	e002      	b.n	800660e <_printf_i+0xf2>
 8006608:	0646      	lsls	r6, r0, #25
 800660a:	d5fb      	bpl.n	8006604 <_printf_i+0xe8>
 800660c:	881e      	ldrh	r6, [r3, #0]
 800660e:	4854      	ldr	r0, [pc, #336]	; (8006760 <_printf_i+0x244>)
 8006610:	2f6f      	cmp	r7, #111	; 0x6f
 8006612:	bf0c      	ite	eq
 8006614:	2308      	moveq	r3, #8
 8006616:	230a      	movne	r3, #10
 8006618:	2100      	movs	r1, #0
 800661a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800661e:	6865      	ldr	r5, [r4, #4]
 8006620:	60a5      	str	r5, [r4, #8]
 8006622:	2d00      	cmp	r5, #0
 8006624:	bfa2      	ittt	ge
 8006626:	6821      	ldrge	r1, [r4, #0]
 8006628:	f021 0104 	bicge.w	r1, r1, #4
 800662c:	6021      	strge	r1, [r4, #0]
 800662e:	b90e      	cbnz	r6, 8006634 <_printf_i+0x118>
 8006630:	2d00      	cmp	r5, #0
 8006632:	d04d      	beq.n	80066d0 <_printf_i+0x1b4>
 8006634:	4615      	mov	r5, r2
 8006636:	fbb6 f1f3 	udiv	r1, r6, r3
 800663a:	fb03 6711 	mls	r7, r3, r1, r6
 800663e:	5dc7      	ldrb	r7, [r0, r7]
 8006640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006644:	4637      	mov	r7, r6
 8006646:	42bb      	cmp	r3, r7
 8006648:	460e      	mov	r6, r1
 800664a:	d9f4      	bls.n	8006636 <_printf_i+0x11a>
 800664c:	2b08      	cmp	r3, #8
 800664e:	d10b      	bne.n	8006668 <_printf_i+0x14c>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07de      	lsls	r6, r3, #31
 8006654:	d508      	bpl.n	8006668 <_printf_i+0x14c>
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	6861      	ldr	r1, [r4, #4]
 800665a:	4299      	cmp	r1, r3
 800665c:	bfde      	ittt	le
 800665e:	2330      	movle	r3, #48	; 0x30
 8006660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006668:	1b52      	subs	r2, r2, r5
 800666a:	6122      	str	r2, [r4, #16]
 800666c:	f8cd a000 	str.w	sl, [sp]
 8006670:	464b      	mov	r3, r9
 8006672:	aa03      	add	r2, sp, #12
 8006674:	4621      	mov	r1, r4
 8006676:	4640      	mov	r0, r8
 8006678:	f7ff fee2 	bl	8006440 <_printf_common>
 800667c:	3001      	adds	r0, #1
 800667e:	d14c      	bne.n	800671a <_printf_i+0x1fe>
 8006680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006684:	b004      	add	sp, #16
 8006686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668a:	4835      	ldr	r0, [pc, #212]	; (8006760 <_printf_i+0x244>)
 800668c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006690:	6829      	ldr	r1, [r5, #0]
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f851 6b04 	ldr.w	r6, [r1], #4
 8006698:	6029      	str	r1, [r5, #0]
 800669a:	061d      	lsls	r5, r3, #24
 800669c:	d514      	bpl.n	80066c8 <_printf_i+0x1ac>
 800669e:	07df      	lsls	r7, r3, #31
 80066a0:	bf44      	itt	mi
 80066a2:	f043 0320 	orrmi.w	r3, r3, #32
 80066a6:	6023      	strmi	r3, [r4, #0]
 80066a8:	b91e      	cbnz	r6, 80066b2 <_printf_i+0x196>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f023 0320 	bic.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2310      	movs	r3, #16
 80066b4:	e7b0      	b.n	8006618 <_printf_i+0xfc>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f043 0320 	orr.w	r3, r3, #32
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	2378      	movs	r3, #120	; 0x78
 80066c0:	4828      	ldr	r0, [pc, #160]	; (8006764 <_printf_i+0x248>)
 80066c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066c6:	e7e3      	b.n	8006690 <_printf_i+0x174>
 80066c8:	0659      	lsls	r1, r3, #25
 80066ca:	bf48      	it	mi
 80066cc:	b2b6      	uxthmi	r6, r6
 80066ce:	e7e6      	b.n	800669e <_printf_i+0x182>
 80066d0:	4615      	mov	r5, r2
 80066d2:	e7bb      	b.n	800664c <_printf_i+0x130>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	6826      	ldr	r6, [r4, #0]
 80066d8:	6961      	ldr	r1, [r4, #20]
 80066da:	1d18      	adds	r0, r3, #4
 80066dc:	6028      	str	r0, [r5, #0]
 80066de:	0635      	lsls	r5, r6, #24
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	d501      	bpl.n	80066e8 <_printf_i+0x1cc>
 80066e4:	6019      	str	r1, [r3, #0]
 80066e6:	e002      	b.n	80066ee <_printf_i+0x1d2>
 80066e8:	0670      	lsls	r0, r6, #25
 80066ea:	d5fb      	bpl.n	80066e4 <_printf_i+0x1c8>
 80066ec:	8019      	strh	r1, [r3, #0]
 80066ee:	2300      	movs	r3, #0
 80066f0:	6123      	str	r3, [r4, #16]
 80066f2:	4615      	mov	r5, r2
 80066f4:	e7ba      	b.n	800666c <_printf_i+0x150>
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	1d1a      	adds	r2, r3, #4
 80066fa:	602a      	str	r2, [r5, #0]
 80066fc:	681d      	ldr	r5, [r3, #0]
 80066fe:	6862      	ldr	r2, [r4, #4]
 8006700:	2100      	movs	r1, #0
 8006702:	4628      	mov	r0, r5
 8006704:	f7f9 fd3c 	bl	8000180 <memchr>
 8006708:	b108      	cbz	r0, 800670e <_printf_i+0x1f2>
 800670a:	1b40      	subs	r0, r0, r5
 800670c:	6060      	str	r0, [r4, #4]
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	2300      	movs	r3, #0
 8006714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006718:	e7a8      	b.n	800666c <_printf_i+0x150>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	462a      	mov	r2, r5
 800671e:	4649      	mov	r1, r9
 8006720:	4640      	mov	r0, r8
 8006722:	47d0      	blx	sl
 8006724:	3001      	adds	r0, #1
 8006726:	d0ab      	beq.n	8006680 <_printf_i+0x164>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	079b      	lsls	r3, r3, #30
 800672c:	d413      	bmi.n	8006756 <_printf_i+0x23a>
 800672e:	68e0      	ldr	r0, [r4, #12]
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	4298      	cmp	r0, r3
 8006734:	bfb8      	it	lt
 8006736:	4618      	movlt	r0, r3
 8006738:	e7a4      	b.n	8006684 <_printf_i+0x168>
 800673a:	2301      	movs	r3, #1
 800673c:	4632      	mov	r2, r6
 800673e:	4649      	mov	r1, r9
 8006740:	4640      	mov	r0, r8
 8006742:	47d0      	blx	sl
 8006744:	3001      	adds	r0, #1
 8006746:	d09b      	beq.n	8006680 <_printf_i+0x164>
 8006748:	3501      	adds	r5, #1
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	9903      	ldr	r1, [sp, #12]
 800674e:	1a5b      	subs	r3, r3, r1
 8006750:	42ab      	cmp	r3, r5
 8006752:	dcf2      	bgt.n	800673a <_printf_i+0x21e>
 8006754:	e7eb      	b.n	800672e <_printf_i+0x212>
 8006756:	2500      	movs	r5, #0
 8006758:	f104 0619 	add.w	r6, r4, #25
 800675c:	e7f5      	b.n	800674a <_printf_i+0x22e>
 800675e:	bf00      	nop
 8006760:	08006b95 	.word	0x08006b95
 8006764:	08006ba6 	.word	0x08006ba6

08006768 <memmove>:
 8006768:	4288      	cmp	r0, r1
 800676a:	b510      	push	{r4, lr}
 800676c:	eb01 0402 	add.w	r4, r1, r2
 8006770:	d902      	bls.n	8006778 <memmove+0x10>
 8006772:	4284      	cmp	r4, r0
 8006774:	4623      	mov	r3, r4
 8006776:	d807      	bhi.n	8006788 <memmove+0x20>
 8006778:	1e43      	subs	r3, r0, #1
 800677a:	42a1      	cmp	r1, r4
 800677c:	d008      	beq.n	8006790 <memmove+0x28>
 800677e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006786:	e7f8      	b.n	800677a <memmove+0x12>
 8006788:	4402      	add	r2, r0
 800678a:	4601      	mov	r1, r0
 800678c:	428a      	cmp	r2, r1
 800678e:	d100      	bne.n	8006792 <memmove+0x2a>
 8006790:	bd10      	pop	{r4, pc}
 8006792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800679a:	e7f7      	b.n	800678c <memmove+0x24>

0800679c <_free_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4605      	mov	r5, r0
 80067a0:	2900      	cmp	r1, #0
 80067a2:	d041      	beq.n	8006828 <_free_r+0x8c>
 80067a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a8:	1f0c      	subs	r4, r1, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bfb8      	it	lt
 80067ae:	18e4      	addlt	r4, r4, r3
 80067b0:	f000 f912 	bl	80069d8 <__malloc_lock>
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <_free_r+0x90>)
 80067b6:	6813      	ldr	r3, [r2, #0]
 80067b8:	b933      	cbnz	r3, 80067c8 <_free_r+0x2c>
 80067ba:	6063      	str	r3, [r4, #4]
 80067bc:	6014      	str	r4, [r2, #0]
 80067be:	4628      	mov	r0, r5
 80067c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c4:	f000 b90e 	b.w	80069e4 <__malloc_unlock>
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	d908      	bls.n	80067de <_free_r+0x42>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	1821      	adds	r1, r4, r0
 80067d0:	428b      	cmp	r3, r1
 80067d2:	bf01      	itttt	eq
 80067d4:	6819      	ldreq	r1, [r3, #0]
 80067d6:	685b      	ldreq	r3, [r3, #4]
 80067d8:	1809      	addeq	r1, r1, r0
 80067da:	6021      	streq	r1, [r4, #0]
 80067dc:	e7ed      	b.n	80067ba <_free_r+0x1e>
 80067de:	461a      	mov	r2, r3
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	b10b      	cbz	r3, 80067e8 <_free_r+0x4c>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d9fa      	bls.n	80067de <_free_r+0x42>
 80067e8:	6811      	ldr	r1, [r2, #0]
 80067ea:	1850      	adds	r0, r2, r1
 80067ec:	42a0      	cmp	r0, r4
 80067ee:	d10b      	bne.n	8006808 <_free_r+0x6c>
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	4401      	add	r1, r0
 80067f4:	1850      	adds	r0, r2, r1
 80067f6:	4283      	cmp	r3, r0
 80067f8:	6011      	str	r1, [r2, #0]
 80067fa:	d1e0      	bne.n	80067be <_free_r+0x22>
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	6053      	str	r3, [r2, #4]
 8006802:	4401      	add	r1, r0
 8006804:	6011      	str	r1, [r2, #0]
 8006806:	e7da      	b.n	80067be <_free_r+0x22>
 8006808:	d902      	bls.n	8006810 <_free_r+0x74>
 800680a:	230c      	movs	r3, #12
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	e7d6      	b.n	80067be <_free_r+0x22>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428b      	cmp	r3, r1
 8006816:	bf04      	itt	eq
 8006818:	6819      	ldreq	r1, [r3, #0]
 800681a:	685b      	ldreq	r3, [r3, #4]
 800681c:	6063      	str	r3, [r4, #4]
 800681e:	bf04      	itt	eq
 8006820:	1809      	addeq	r1, r1, r0
 8006822:	6021      	streq	r1, [r4, #0]
 8006824:	6054      	str	r4, [r2, #4]
 8006826:	e7ca      	b.n	80067be <_free_r+0x22>
 8006828:	bd38      	pop	{r3, r4, r5, pc}
 800682a:	bf00      	nop
 800682c:	20000284 	.word	0x20000284

08006830 <sbrk_aligned>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	4e0e      	ldr	r6, [pc, #56]	; (800686c <sbrk_aligned+0x3c>)
 8006834:	460c      	mov	r4, r1
 8006836:	6831      	ldr	r1, [r6, #0]
 8006838:	4605      	mov	r5, r0
 800683a:	b911      	cbnz	r1, 8006842 <sbrk_aligned+0x12>
 800683c:	f000 f8bc 	bl	80069b8 <_sbrk_r>
 8006840:	6030      	str	r0, [r6, #0]
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f000 f8b7 	bl	80069b8 <_sbrk_r>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	d00a      	beq.n	8006864 <sbrk_aligned+0x34>
 800684e:	1cc4      	adds	r4, r0, #3
 8006850:	f024 0403 	bic.w	r4, r4, #3
 8006854:	42a0      	cmp	r0, r4
 8006856:	d007      	beq.n	8006868 <sbrk_aligned+0x38>
 8006858:	1a21      	subs	r1, r4, r0
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f8ac 	bl	80069b8 <_sbrk_r>
 8006860:	3001      	adds	r0, #1
 8006862:	d101      	bne.n	8006868 <sbrk_aligned+0x38>
 8006864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006868:	4620      	mov	r0, r4
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	20000288 	.word	0x20000288

08006870 <_malloc_r>:
 8006870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	1ccd      	adds	r5, r1, #3
 8006876:	f025 0503 	bic.w	r5, r5, #3
 800687a:	3508      	adds	r5, #8
 800687c:	2d0c      	cmp	r5, #12
 800687e:	bf38      	it	cc
 8006880:	250c      	movcc	r5, #12
 8006882:	2d00      	cmp	r5, #0
 8006884:	4607      	mov	r7, r0
 8006886:	db01      	blt.n	800688c <_malloc_r+0x1c>
 8006888:	42a9      	cmp	r1, r5
 800688a:	d905      	bls.n	8006898 <_malloc_r+0x28>
 800688c:	230c      	movs	r3, #12
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	2600      	movs	r6, #0
 8006892:	4630      	mov	r0, r6
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	4e2e      	ldr	r6, [pc, #184]	; (8006954 <_malloc_r+0xe4>)
 800689a:	f000 f89d 	bl	80069d8 <__malloc_lock>
 800689e:	6833      	ldr	r3, [r6, #0]
 80068a0:	461c      	mov	r4, r3
 80068a2:	bb34      	cbnz	r4, 80068f2 <_malloc_r+0x82>
 80068a4:	4629      	mov	r1, r5
 80068a6:	4638      	mov	r0, r7
 80068a8:	f7ff ffc2 	bl	8006830 <sbrk_aligned>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	4604      	mov	r4, r0
 80068b0:	d14d      	bne.n	800694e <_malloc_r+0xde>
 80068b2:	6834      	ldr	r4, [r6, #0]
 80068b4:	4626      	mov	r6, r4
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	d140      	bne.n	800693c <_malloc_r+0xcc>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	4631      	mov	r1, r6
 80068be:	4638      	mov	r0, r7
 80068c0:	eb04 0803 	add.w	r8, r4, r3
 80068c4:	f000 f878 	bl	80069b8 <_sbrk_r>
 80068c8:	4580      	cmp	r8, r0
 80068ca:	d13a      	bne.n	8006942 <_malloc_r+0xd2>
 80068cc:	6821      	ldr	r1, [r4, #0]
 80068ce:	3503      	adds	r5, #3
 80068d0:	1a6d      	subs	r5, r5, r1
 80068d2:	f025 0503 	bic.w	r5, r5, #3
 80068d6:	3508      	adds	r5, #8
 80068d8:	2d0c      	cmp	r5, #12
 80068da:	bf38      	it	cc
 80068dc:	250c      	movcc	r5, #12
 80068de:	4629      	mov	r1, r5
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff ffa5 	bl	8006830 <sbrk_aligned>
 80068e6:	3001      	adds	r0, #1
 80068e8:	d02b      	beq.n	8006942 <_malloc_r+0xd2>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	442b      	add	r3, r5
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	e00e      	b.n	8006910 <_malloc_r+0xa0>
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	1b52      	subs	r2, r2, r5
 80068f6:	d41e      	bmi.n	8006936 <_malloc_r+0xc6>
 80068f8:	2a0b      	cmp	r2, #11
 80068fa:	d916      	bls.n	800692a <_malloc_r+0xba>
 80068fc:	1961      	adds	r1, r4, r5
 80068fe:	42a3      	cmp	r3, r4
 8006900:	6025      	str	r5, [r4, #0]
 8006902:	bf18      	it	ne
 8006904:	6059      	strne	r1, [r3, #4]
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	bf08      	it	eq
 800690a:	6031      	streq	r1, [r6, #0]
 800690c:	5162      	str	r2, [r4, r5]
 800690e:	604b      	str	r3, [r1, #4]
 8006910:	4638      	mov	r0, r7
 8006912:	f104 060b 	add.w	r6, r4, #11
 8006916:	f000 f865 	bl	80069e4 <__malloc_unlock>
 800691a:	f026 0607 	bic.w	r6, r6, #7
 800691e:	1d23      	adds	r3, r4, #4
 8006920:	1af2      	subs	r2, r6, r3
 8006922:	d0b6      	beq.n	8006892 <_malloc_r+0x22>
 8006924:	1b9b      	subs	r3, r3, r6
 8006926:	50a3      	str	r3, [r4, r2]
 8006928:	e7b3      	b.n	8006892 <_malloc_r+0x22>
 800692a:	6862      	ldr	r2, [r4, #4]
 800692c:	42a3      	cmp	r3, r4
 800692e:	bf0c      	ite	eq
 8006930:	6032      	streq	r2, [r6, #0]
 8006932:	605a      	strne	r2, [r3, #4]
 8006934:	e7ec      	b.n	8006910 <_malloc_r+0xa0>
 8006936:	4623      	mov	r3, r4
 8006938:	6864      	ldr	r4, [r4, #4]
 800693a:	e7b2      	b.n	80068a2 <_malloc_r+0x32>
 800693c:	4634      	mov	r4, r6
 800693e:	6876      	ldr	r6, [r6, #4]
 8006940:	e7b9      	b.n	80068b6 <_malloc_r+0x46>
 8006942:	230c      	movs	r3, #12
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	4638      	mov	r0, r7
 8006948:	f000 f84c 	bl	80069e4 <__malloc_unlock>
 800694c:	e7a1      	b.n	8006892 <_malloc_r+0x22>
 800694e:	6025      	str	r5, [r4, #0]
 8006950:	e7de      	b.n	8006910 <_malloc_r+0xa0>
 8006952:	bf00      	nop
 8006954:	20000284 	.word	0x20000284

08006958 <_realloc_r>:
 8006958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695c:	4680      	mov	r8, r0
 800695e:	4614      	mov	r4, r2
 8006960:	460e      	mov	r6, r1
 8006962:	b921      	cbnz	r1, 800696e <_realloc_r+0x16>
 8006964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	4611      	mov	r1, r2
 800696a:	f7ff bf81 	b.w	8006870 <_malloc_r>
 800696e:	b92a      	cbnz	r2, 800697c <_realloc_r+0x24>
 8006970:	f7ff ff14 	bl	800679c <_free_r>
 8006974:	4625      	mov	r5, r4
 8006976:	4628      	mov	r0, r5
 8006978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800697c:	f000 f838 	bl	80069f0 <_malloc_usable_size_r>
 8006980:	4284      	cmp	r4, r0
 8006982:	4607      	mov	r7, r0
 8006984:	d802      	bhi.n	800698c <_realloc_r+0x34>
 8006986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800698a:	d812      	bhi.n	80069b2 <_realloc_r+0x5a>
 800698c:	4621      	mov	r1, r4
 800698e:	4640      	mov	r0, r8
 8006990:	f7ff ff6e 	bl	8006870 <_malloc_r>
 8006994:	4605      	mov	r5, r0
 8006996:	2800      	cmp	r0, #0
 8006998:	d0ed      	beq.n	8006976 <_realloc_r+0x1e>
 800699a:	42bc      	cmp	r4, r7
 800699c:	4622      	mov	r2, r4
 800699e:	4631      	mov	r1, r6
 80069a0:	bf28      	it	cs
 80069a2:	463a      	movcs	r2, r7
 80069a4:	f7ff fba6 	bl	80060f4 <memcpy>
 80069a8:	4631      	mov	r1, r6
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7ff fef6 	bl	800679c <_free_r>
 80069b0:	e7e1      	b.n	8006976 <_realloc_r+0x1e>
 80069b2:	4635      	mov	r5, r6
 80069b4:	e7df      	b.n	8006976 <_realloc_r+0x1e>
	...

080069b8 <_sbrk_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4d06      	ldr	r5, [pc, #24]	; (80069d4 <_sbrk_r+0x1c>)
 80069bc:	2300      	movs	r3, #0
 80069be:	4604      	mov	r4, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fa fe3c 	bl	8001640 <_sbrk>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_sbrk_r+0x1a>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_sbrk_r+0x1a>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	2000028c 	.word	0x2000028c

080069d8 <__malloc_lock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <__malloc_lock+0x8>)
 80069da:	f000 b811 	b.w	8006a00 <__retarget_lock_acquire_recursive>
 80069de:	bf00      	nop
 80069e0:	20000290 	.word	0x20000290

080069e4 <__malloc_unlock>:
 80069e4:	4801      	ldr	r0, [pc, #4]	; (80069ec <__malloc_unlock+0x8>)
 80069e6:	f000 b80c 	b.w	8006a02 <__retarget_lock_release_recursive>
 80069ea:	bf00      	nop
 80069ec:	20000290 	.word	0x20000290

080069f0 <_malloc_usable_size_r>:
 80069f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f4:	1f18      	subs	r0, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bfbc      	itt	lt
 80069fa:	580b      	ldrlt	r3, [r1, r0]
 80069fc:	18c0      	addlt	r0, r0, r3
 80069fe:	4770      	bx	lr

08006a00 <__retarget_lock_acquire_recursive>:
 8006a00:	4770      	bx	lr

08006a02 <__retarget_lock_release_recursive>:
 8006a02:	4770      	bx	lr

08006a04 <_init>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	bf00      	nop
 8006a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0a:	bc08      	pop	{r3}
 8006a0c:	469e      	mov	lr, r3
 8006a0e:	4770      	bx	lr

08006a10 <_fini>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr

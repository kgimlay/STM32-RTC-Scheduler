
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f20  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800741c  0800741c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007424  08007424  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800742c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  20000078  080074a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e5c  080074a4  00021e5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160ba  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341b  00000000  00000000  0003615c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00039578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f248  00000000  00000000  0003bd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ab7  00000000  00000000  0005afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9e82  00000000  00000000  00070a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006104  00000000  00000000  0012a954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007048 	.word	0x08007048

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007048 	.word	0x08007048

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:

/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <calendar_init+0x70>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 fbce 	bl	8001ce0 <rtcAlarmControl_init>

	// initialize the calendar
	_calendarHead = -1;
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <calendar_init+0x74>)
 8000546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800054a:	601a      	str	r2, [r3, #0]
	_calendarFree = 0;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <calendar_init+0x78>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	_currentEvent = 1;
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <calendar_init+0x7c>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e00d      	b.n	800057a <calendar_init+0x4a>
	{
		_calendarEvents[idx].next = idx + 1;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1c59      	adds	r1, r3, #1
 8000562:	4813      	ldr	r0, [pc, #76]	; (80005b0 <calendar_init+0x80>)
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	4613      	mov	r3, r2
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4403      	add	r3, r0
 8000570:	3318      	adds	r3, #24
 8000572:	6019      	str	r1, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2bfe      	cmp	r3, #254	; 0xfe
 800057e:	ddee      	ble.n	800055e <calendar_init+0x2e>
	}
	_calendarEvents[MAX_NUM_EVENTS - 1].next = -1;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <calendar_init+0x80>)
 8000582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000586:	461a      	mov	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	f8c2 3bfc 	str.w	r3, [r2, #3068]	; 0xbfc

	// set init flag
	_isInit = true;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <calendar_init+0x84>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000098 	.word	0x20000098
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20001c9c 	.word	0x20001c9c
 80005ac:	20000008 	.word	0x20000008
 80005b0:	2000009c 	.word	0x2000009c
 80005b4:	20000094 	.word	0x20000094

080005b8 <calendar_start>:

/*
 *
 */
void calendar_start(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005be:	1cfa      	adds	r2, r7, #3
 80005c0:	1d39      	adds	r1, r7, #4
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f998 	bl	80008fc <getNextAlarm>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d024      	beq.n	800061c <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005d2:	7ab8      	ldrb	r0, [r7, #10]
 80005d4:	7af9      	ldrb	r1, [r7, #11]
 80005d6:	7b3a      	ldrb	r2, [r7, #12]
 80005d8:	7b7b      	ldrb	r3, [r7, #13]
 80005da:	f001 fced 	bl	8001fb8 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d017      	beq.n	8000614 <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4910      	ldr	r1, [pc, #64]	; (8000628 <calendar_start+0x70>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	3308      	adds	r3, #8
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d009      	beq.n	800060e <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].event.start_callback)();
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	490a      	ldr	r1, [pc, #40]	; (8000628 <calendar_start+0x70>)
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	3308      	adds	r3, #8
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <calendar_start+0x74>)
 8000612:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <calendar_start+0x78>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 800061a:	e001      	b.n	8000620 <calendar_start+0x68>
		diableAlarm_A();
 800061c:	f001 fd68 	bl	80020f0 <diableAlarm_A>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000009c 	.word	0x2000009c
 800062c:	20000008 	.word	0x20000008
 8000630:	20000095 	.word	0x20000095

08000634 <calendar_setDateTime>:

/*
 *
 */
void calendar_setDateTime(DateTime dateTime)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
 800063a:	463b      	mov	r3, r7
 800063c:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000640:	7838      	ldrb	r0, [r7, #0]
 8000642:	7879      	ldrb	r1, [r7, #1]
 8000644:	78bc      	ldrb	r4, [r7, #2]
 8000646:	78fd      	ldrb	r5, [r7, #3]
 8000648:	793b      	ldrb	r3, [r7, #4]
 800064a:	797a      	ldrb	r2, [r7, #5]
 800064c:	9201      	str	r2, [sp, #4]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	462b      	mov	r3, r5
 8000652:	4622      	mov	r2, r4
 8000654:	f001 fb52 	bl	8001cfc <setDateTime>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bdb0      	pop	{r4, r5, r7, pc}

08000660 <calendar_getDateTime>:

/*
 *
 */
void calendar_getDateTime(DateTime* dateTime)
{
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	1c59      	adds	r1, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	1c9c      	adds	r4, r3, #2
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	1cdd      	adds	r5, r3, #3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3304      	adds	r3, #4
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	3205      	adds	r2, #5
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	462b      	mov	r3, r5
 8000684:	4622      	mov	r2, r4
 8000686:	f001 fc03 	bl	8001e90 <getDateTime>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000694 <calendar_addEvent>:

/*
 *
 */
CalendarStatus calendar_addEvent(CalendarEvent *event)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	// add only if the calendar has been initialized
	if (_isInit)
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <calendar_addEvent+0x30>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d009      	beq.n	80006b8 <calendar_addEvent+0x24>
	{
		if (_addEvent(event))
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 fa51 	bl	8000b4c <_addEvent>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <calendar_addEvent+0x20>
		{
			return CALENDAR_OKAY;
 80006b0:	2300      	movs	r3, #0
 80006b2:	e002      	b.n	80006ba <calendar_addEvent+0x26>
		}

		else
		{
			return CALENDAR_FULL;
 80006b4:	2302      	movs	r3, #2
 80006b6:	e000      	b.n	80006ba <calendar_addEvent+0x26>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDER_NOT_INIT;
 80006b8:	2301      	movs	r3, #1
	}
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000094 	.word	0x20000094

080006c8 <calendar_handleAlarm>:

/*
 *
 */
void calendar_handleAlarm(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 80006ce:	4b59      	ldr	r3, [pc, #356]	; (8000834 <calendar_handleAlarm+0x16c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f000 80a8 	beq.w	800082a <calendar_handleAlarm+0x162>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80006da:	1cfa      	adds	r2, r7, #3
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f90a 	bl	80008fc <getNextAlarm>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d07e      	beq.n	80007ec <calendar_handleAlarm+0x124>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80006ee:	7ab8      	ldrb	r0, [r7, #10]
 80006f0:	7af9      	ldrb	r1, [r7, #11]
 80006f2:	7b3a      	ldrb	r2, [r7, #12]
 80006f4:	7b7b      	ldrb	r3, [r7, #13]
 80006f6:	f001 fc5f 	bl	8001fb8 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d01a      	beq.n	8000736 <calendar_handleAlarm+0x6e>
 8000700:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <calendar_handleAlarm+0x170>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000708:	d115      	bne.n	8000736 <calendar_handleAlarm+0x6e>

				// call start event callback
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	494b      	ldr	r1, [pc, #300]	; (800083c <calendar_handleAlarm+0x174>)
 800070e:	4613      	mov	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	1a9b      	subs	r3, r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	440b      	add	r3, r1
 8000718:	3308      	adds	r3, #8
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d061      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4946      	ldr	r1, [pc, #280]	; (800083c <calendar_handleAlarm+0x174>)
 8000724:	4613      	mov	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	3308      	adds	r3, #8
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8000734:	e056      	b.n	80007e4 <calendar_handleAlarm+0x11c>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d031      	beq.n	80007a0 <calendar_handleAlarm+0xd8>
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <calendar_handleAlarm+0x170>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000744:	d02c      	beq.n	80007a0 <calendar_handleAlarm+0xd8>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <calendar_handleAlarm+0x170>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	493c      	ldr	r1, [pc, #240]	; (800083c <calendar_handleAlarm+0x174>)
 800074c:	4613      	mov	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	3314      	adds	r3, #20
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <calendar_handleAlarm+0xac>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <calendar_handleAlarm+0x170>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4936      	ldr	r1, [pc, #216]	; (800083c <calendar_handleAlarm+0x174>)
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	3314      	adds	r3, #20
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4931      	ldr	r1, [pc, #196]	; (800083c <calendar_handleAlarm+0x174>)
 8000778:	4613      	mov	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	3308      	adds	r3, #8
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d02c      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	492b      	ldr	r1, [pc, #172]	; (800083c <calendar_handleAlarm+0x174>)
 800078e:	4613      	mov	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3308      	adds	r3, #8
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 800079e:	e021      	b.n	80007e4 <calendar_handleAlarm+0x11c>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01b      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <calendar_handleAlarm+0x170>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007b4:	d016      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <calendar_handleAlarm+0x170>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4920      	ldr	r1, [pc, #128]	; (800083c <calendar_handleAlarm+0x174>)
 80007bc:	4613      	mov	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	1a9b      	subs	r3, r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	3314      	adds	r3, #20
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <calendar_handleAlarm+0x170>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	491a      	ldr	r1, [pc, #104]	; (800083c <calendar_handleAlarm+0x174>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	3314      	adds	r3, #20
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4798      	blx	r3
			}

			// else, alarm is just being reset for next month/year

			// update current event
			_currentEvent = currentEventIdx;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <calendar_handleAlarm+0x170>)
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e01b      	b.n	8000824 <calendar_handleAlarm+0x15c>

		// if there is no alarm to set, disable the alarm and exit any events
		else {
//			diableAlarm_A();

			if (CURRENTLY_IN_EVENT) {
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <calendar_handleAlarm+0x170>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007f4:	d016      	beq.n	8000824 <calendar_handleAlarm+0x15c>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <calendar_handleAlarm+0x170>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4910      	ldr	r1, [pc, #64]	; (800083c <calendar_handleAlarm+0x174>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	440b      	add	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <calendar_handleAlarm+0x15c>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <calendar_handleAlarm+0x170>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	490a      	ldr	r1, [pc, #40]	; (800083c <calendar_handleAlarm+0x174>)
 8000814:	4613      	mov	r3, r2
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	3314      	adds	r3, #20
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <calendar_handleAlarm+0x16c>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
	}
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000095 	.word	0x20000095
 8000838:	20000008 	.word	0x20000008
 800083c:	2000009c 	.word	0x2000009c

08000840 <calendar_AlarmA_ISR>:

/*
 *
 */
void calendar_AlarmA_ISR(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <calendar_AlarmA_ISR+0x14>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000095 	.word	0x20000095

08000858 <compareDateTime>:
/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	f107 0408 	add.w	r4, r7, #8
 8000862:	e884 0003 	stmia.w	r4, {r0, r1}
 8000866:	4639      	mov	r1, r7
 8000868:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000874:	f000 f80e 	bl	8000894 <dateTimeToSeconds>
 8000878:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 800087a:	463b      	mov	r3, r7
 800087c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000880:	f000 f808 	bl	8000894 <dateTimeToSeconds>
 8000884:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	1ad3      	subs	r3, r2, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <dateTimeToSeconds>:

/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	463b      	mov	r3, r7
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80008a4:	793b      	ldrb	r3, [r7, #4]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4613      	mov	r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	1a9b      	subs	r3, r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80008ba:	fb01 f303 	mul.w	r3, r1, r3
 80008be:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	490a      	ldr	r1, [pc, #40]	; (80008f0 <dateTimeToSeconds+0x5c>)
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 80008cc:	787b      	ldrb	r3, [r7, #1]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4908      	ldr	r1, [pc, #32]	; (80008f4 <dateTimeToSeconds+0x60>)
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 80008d8:	783b      	ldrb	r3, [r7, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <dateTimeToSeconds+0x64>)
 80008de:	fb01 f303 	mul.w	r3, r1, r3
 80008e2:	4413      	add	r3, r2
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	00015180 	.word	0x00015180
 80008f4:	00278d00 	.word	0x00278d00
 80008f8:	01da9c00 	.word	0x01da9c00

080008fc <getNextAlarm>:

/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08d      	sub	sp, #52	; 0x34
 8000900:	af02      	add	r7, sp, #8
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
	bool nextAlarmFound = false;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	DateTime now = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	1cdc      	adds	r4, r3, #3
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	1c9a      	adds	r2, r3, #2
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	1c59      	adds	r1, r3, #1
 8000938:	f107 001c 	add.w	r0, r7, #28
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	3305      	adds	r3, #5
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	3304      	adds	r3, #4
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	4623      	mov	r3, r4
 800094e:	f001 fa9f 	bl	8001e90 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = _calendarHead;
 8000952:	4b7c      	ldr	r3, [pc, #496]	; (8000b44 <getNextAlarm+0x248>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
	nextAlarmFound = false;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (eventIdx != -1)
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000964:	f000 80ce 	beq.w	8000b04 <getNextAlarm+0x208>
	{
		while (eventIdx != -1 && !nextAlarmFound) {
 8000968:	e0c0      	b.n	8000aec <getNextAlarm+0x1f0>
			// test if before event
			if (compareDateTime(now, _calendarEvents[eventIdx].event.start) < 0)
 800096a:	4977      	ldr	r1, [pc, #476]	; (8000b48 <getNextAlarm+0x24c>)
 800096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	cb0c      	ldmia	r3, {r2, r3}
 800097a:	f107 011c 	add.w	r1, r7, #28
 800097e:	c903      	ldmia	r1, {r0, r1}
 8000980:	f7ff ff6a 	bl	8000858 <compareDateTime>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	da41      	bge.n	8000a0e <getNextAlarm+0x112>
			{
				// then the next alarm is the beginning of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.start.year;
 800098a:	496f      	ldr	r1, [pc, #444]	; (8000b48 <getNextAlarm+0x24c>)
 800098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098e:	4613      	mov	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.start.month;
 800099c:	496a      	ldr	r1, [pc, #424]	; (8000b48 <getNextAlarm+0x24c>)
 800099e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a0:	4613      	mov	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	1a9b      	subs	r3, r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	3301      	adds	r3, #1
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.start.day;
 80009b0:	4965      	ldr	r1, [pc, #404]	; (8000b48 <getNextAlarm+0x24c>)
 80009b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b4:	4613      	mov	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	3302      	adds	r3, #2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.start.hour;
 80009c4:	4960      	ldr	r1, [pc, #384]	; (8000b48 <getNextAlarm+0x24c>)
 80009c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c8:	4613      	mov	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	3303      	adds	r3, #3
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.start.minute;
 80009d8:	495b      	ldr	r1, [pc, #364]	; (8000b48 <getNextAlarm+0x24c>)
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	4613      	mov	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	3304      	adds	r3, #4
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.start.second;
 80009ec:	4956      	ldr	r1, [pc, #344]	; (8000b48 <getNextAlarm+0x24c>)
 80009ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f0:	4613      	mov	r3, r2
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	440b      	add	r3, r1
 80009fa:	3305      	adds	r3, #5
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = false;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e06e      	b.n	8000aec <getNextAlarm+0x1f0>
			}

			// test if within event
			else if(compareDateTime(now, _calendarEvents[eventIdx].event.start) >= 0
 8000a0e:	494e      	ldr	r1, [pc, #312]	; (8000b48 <getNextAlarm+0x24c>)
 8000a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a12:	4613      	mov	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	cb0c      	ldmia	r3, {r2, r3}
 8000a1e:	f107 011c 	add.w	r1, r7, #28
 8000a22:	c903      	ldmia	r1, {r0, r1}
 8000a24:	f7ff ff18 	bl	8000858 <compareDateTime>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db54      	blt.n	8000ad8 <getNextAlarm+0x1dc>
					&& compareDateTime(now, _calendarEvents[eventIdx].event.end) < 0)
 8000a2e:	4946      	ldr	r1, [pc, #280]	; (8000b48 <getNextAlarm+0x24c>)
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3308      	adds	r3, #8
 8000a3e:	3304      	adds	r3, #4
 8000a40:	cb0c      	ldmia	r3, {r2, r3}
 8000a42:	f107 011c 	add.w	r1, r7, #28
 8000a46:	c903      	ldmia	r1, {r0, r1}
 8000a48:	f7ff ff06 	bl	8000858 <compareDateTime>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da42      	bge.n	8000ad8 <getNextAlarm+0x1dc>
			{
				// then the next alarm is the end of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.end.year;
 8000a52:	493d      	ldr	r1, [pc, #244]	; (8000b48 <getNextAlarm+0x24c>)
 8000a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a56:	4613      	mov	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	440b      	add	r3, r1
 8000a60:	330c      	adds	r3, #12
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.end.month;
 8000a66:	4938      	ldr	r1, [pc, #224]	; (8000b48 <getNextAlarm+0x24c>)
 8000a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	440b      	add	r3, r1
 8000a74:	330d      	adds	r3, #13
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.end.day;
 8000a7a:	4933      	ldr	r1, [pc, #204]	; (8000b48 <getNextAlarm+0x24c>)
 8000a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7e:	4613      	mov	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	440b      	add	r3, r1
 8000a88:	330e      	adds	r3, #14
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.end.hour;
 8000a8e:	492e      	ldr	r1, [pc, #184]	; (8000b48 <getNextAlarm+0x24c>)
 8000a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a92:	4613      	mov	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	330f      	adds	r3, #15
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.end.minute;
 8000aa2:	4929      	ldr	r1, [pc, #164]	; (8000b48 <getNextAlarm+0x24c>)
 8000aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	3310      	adds	r3, #16
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.end.second;
 8000ab6:	4924      	ldr	r1, [pc, #144]	; (8000b48 <getNextAlarm+0x24c>)
 8000ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aba:	4613      	mov	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3311      	adds	r3, #17
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = true;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e009      	b.n	8000aec <getNextAlarm+0x1f0>
			}

			// traverse to next event
			else {
				eventIdx = _calendarEvents[eventIdx].next;
 8000ad8:	491b      	ldr	r1, [pc, #108]	; (8000b48 <getNextAlarm+0x24c>)
 8000ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000adc:	4613      	mov	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
		while (eventIdx != -1 && !nextAlarmFound) {
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000af2:	d007      	beq.n	8000b04 <getNextAlarm+0x208>
 8000af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000af8:	f083 0301 	eor.w	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f47f af33 	bne.w	800096a <getNextAlarm+0x6e>
			}
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <getNextAlarm+0x226>
		dateTime = NULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	601a      	str	r2, [r3, #0]
		return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e00b      	b.n	8000b3a <getNextAlarm+0x23e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	6010      	str	r0, [r2, #0]
 8000b2e:	889b      	ldrh	r3, [r3, #4]
 8000b30:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = eventIdx;
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b36:	601a      	str	r2, [r3, #0]
		return true;
 8000b38:	2301      	movs	r3, #1
	}
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	372c      	adds	r7, #44	; 0x2c
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000004 	.word	0x20000004
 8000b48:	2000009c 	.word	0x2000009c

08000b4c <_addEvent>:

/*
 *
 */
bool _addEvent(CalendarEvent* event)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	int tempEndOfHead;

	// if the calendar is full, return early
	if (_calendarFree == -1)
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <_addEvent+0x114>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b5c:	d101      	bne.n	8000b62 <_addEvent+0x16>
	{
		return false;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e079      	b.n	8000c56 <_addEvent+0x10a>
	}

	// if the calendar is empty, insert at front
	if (_calendarHead == -1)
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <_addEvent+0x118>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b6a:	d128      	bne.n	8000bbe <_addEvent+0x72>
	{
		// copy event into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000b6c:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <_addEvent+0x114>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4a3b      	ldr	r2, [pc, #236]	; (8000c68 <_addEvent+0x11c>)
 8000b7a:	4413      	add	r3, r2
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f874 	bl	8000c6c <_copyEvent>

		// set the head
		_calendarHead = _calendarFree;
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <_addEvent+0x114>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <_addEvent+0x118>)
 8000b8a:	6013      	str	r3, [r2, #0]

		// set free to next free
		_calendarFree = _calendarEvents[_calendarFree].next;
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <_addEvent+0x114>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4935      	ldr	r1, [pc, #212]	; (8000c68 <_addEvent+0x11c>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	1a9b      	subs	r3, r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3318      	adds	r3, #24
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <_addEvent+0x114>)
 8000ba2:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[_calendarHead].next = -1;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <_addEvent+0x118>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	492f      	ldr	r1, [pc, #188]	; (8000c68 <_addEvent+0x11c>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3318      	adds	r3, #24
 8000bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e04a      	b.n	8000c54 <_addEvent+0x108>

	// if the calendar is not empty (or full), insert at end of list
	else
	{
		// find end of head
		tempEndOfHead = _calendarHead;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <_addEvent+0x118>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000bc4:	e009      	b.n	8000bda <_addEvent+0x8e>
			tempEndOfHead = _calendarEvents[tempEndOfHead].next;
 8000bc6:	4928      	ldr	r1, [pc, #160]	; (8000c68 <_addEvent+0x11c>)
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3318      	adds	r3, #24
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000bda:	4923      	ldr	r1, [pc, #140]	; (8000c68 <_addEvent+0x11c>)
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3318      	adds	r3, #24
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf0:	d1e9      	bne.n	8000bc6 <_addEvent+0x7a>

		// copy events into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <_addEvent+0x114>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <_addEvent+0x11c>)
 8000c00:	4413      	add	r3, r2
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f831 	bl	8000c6c <_copyEvent>

		// link into head list
		_calendarEvents[tempEndOfHead].next = _calendarFree;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_addEvent+0x114>)
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	4816      	ldr	r0, [pc, #88]	; (8000c68 <_addEvent+0x11c>)
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4613      	mov	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4403      	add	r3, r0
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	6019      	str	r1, [r3, #0]
		tempEndOfHead = _calendarFree;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <_addEvent+0x114>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]

		// set free to next free
			_calendarFree = _calendarEvents[_calendarFree].next;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <_addEvent+0x114>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	490f      	ldr	r1, [pc, #60]	; (8000c68 <_addEvent+0x11c>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3318      	adds	r3, #24
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <_addEvent+0x114>)
 8000c3c:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[tempEndOfHead].next = -1;
 8000c3e:	490a      	ldr	r1, [pc, #40]	; (8000c68 <_addEvent+0x11c>)
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4613      	mov	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	3318      	adds	r3, #24
 8000c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c52:	601a      	str	r2, [r3, #0]
	}

	// return okay
	return true;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20001c9c 	.word	0x20001c9c
 8000c64:	20000004 	.word	0x20000004
 8000c68:	2000009c 	.word	0x2000009c

08000c6c <_copyEvent>:

/*
 *
 */
void _copyEvent(CalendarEvent* to, CalendarEvent* from)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	785a      	ldrb	r2, [r3, #1]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	789a      	ldrb	r2, [r3, #2]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	78da      	ldrb	r2, [r3, #3]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	791a      	ldrb	r2, [r3, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	795a      	ldrb	r2, [r3, #5]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
	to->end.year = from->end.year;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	7b1a      	ldrb	r2, [r3, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	731a      	strb	r2, [r3, #12]
	to->end.month = from->end.month;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	7b5a      	ldrb	r2, [r3, #13]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	735a      	strb	r2, [r3, #13]
	to->end.day = from->end.day;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	7b9a      	ldrb	r2, [r3, #14]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	739a      	strb	r2, [r3, #14]
	to->end.hour = from->end.hour;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	7bda      	ldrb	r2, [r3, #15]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	73da      	strb	r2, [r3, #15]
	to->end.minute = from->end.minute;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	7c1a      	ldrb	r2, [r3, #16]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	741a      	strb	r2, [r3, #16]
	to->end.second = from->end.second;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	7c5a      	ldrb	r2, [r3, #17]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	745a      	strb	r2, [r3, #17]
	to->end_callback = from->end_callback;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	615a      	str	r2, [r3, #20]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	223c      	movs	r2, #60	; 0x3c
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 feba 	bl	8005a88 <memcpy>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3304      	adds	r3, #4
 8000d36:	223c      	movs	r2, #60	; 0x3c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f004 fea4 	bl	8005a88 <memcpy>
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <code_to_appActions>:

/*
 *
 */
AppActions code_to_appActions(char* code)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d50:	2204      	movs	r2, #4
 8000d52:	4925      	ldr	r1, [pc, #148]	; (8000de8 <code_to_appActions+0xa0>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f004 fee1 	bl	8005b1c <strncmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e03c      	b.n	8000dde <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d64:	2204      	movs	r2, #4
 8000d66:	4921      	ldr	r1, [pc, #132]	; (8000dec <code_to_appActions+0xa4>)
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f004 fed7 	bl	8005b1c <strncmp>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8000d74:	2302      	movs	r3, #2
 8000d76:	e032      	b.n	8000dde <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d78:	2204      	movs	r2, #4
 8000d7a:	491d      	ldr	r1, [pc, #116]	; (8000df0 <code_to_appActions+0xa8>)
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f004 fecd 	bl	8005b1c <strncmp>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e028      	b.n	8000dde <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	4919      	ldr	r1, [pc, #100]	; (8000df4 <code_to_appActions+0xac>)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f004 fec3 	bl	8005b1c <strncmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e01e      	b.n	8000dde <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000da0:	2204      	movs	r2, #4
 8000da2:	4915      	ldr	r1, [pc, #84]	; (8000df8 <code_to_appActions+0xb0>)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f004 feb9 	bl	8005b1c <strncmp>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 8000db0:	2305      	movs	r3, #5
 8000db2:	e014      	b.n	8000dde <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_MESSAGE_HEADER_SIZE))
 8000db4:	2204      	movs	r2, #4
 8000db6:	4911      	ldr	r1, [pc, #68]	; (8000dfc <code_to_appActions+0xb4>)
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f004 feaf 	bl	8005b1c <strncmp>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	e00a      	b.n	8000dde <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_MESSAGE_HEADER_SIZE))
 8000dc8:	2204      	movs	r2, #4
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <code_to_appActions+0xb8>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f004 fea5 	bl	8005b1c <strncmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <code_to_appActions+0x94>
			return START_CALENDAR;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	e000      	b.n	8000dde <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08007060 	.word	0x08007060
 8000dec:	08007068 	.word	0x08007068
 8000df0:	08007070 	.word	0x08007070
 8000df4:	08007078 	.word	0x08007078
 8000df8:	08007080 	.word	0x08007080
 8000dfc:	08007088 	.word	0x08007088
 8000e00:	08007090 	.word	0x08007090

08000e04 <parseDateTime>:

/*
 *
 */
void parseDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	// parse year
	dateTime->year = atoi(strtok(data, ";"));
 8000e0e:	4926      	ldr	r1, [pc, #152]	; (8000ea8 <parseDateTime+0xa4>)
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f004 fe97 	bl	8005b44 <strtok>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fe07 	bl	8005a2c <atoi>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	701a      	strb	r2, [r3, #0]

	// parse month
	dateTime->month = atoi(strtok(NULL, ";"));
 8000e26:	4920      	ldr	r1, [pc, #128]	; (8000ea8 <parseDateTime+0xa4>)
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f004 fe8b 	bl	8005b44 <strtok>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 fdfb 	bl	8005a2c <atoi>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	705a      	strb	r2, [r3, #1]

	// parse date
	dateTime->day = atoi(strtok(NULL, ";"));
 8000e3e:	491a      	ldr	r1, [pc, #104]	; (8000ea8 <parseDateTime+0xa4>)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f004 fe7f 	bl	8005b44 <strtok>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fdef 	bl	8005a2c <atoi>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	709a      	strb	r2, [r3, #2]

	// parse hour
	dateTime->hour = atoi(strtok(NULL, ";"));
 8000e56:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <parseDateTime+0xa4>)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f004 fe73 	bl	8005b44 <strtok>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fde3 	bl	8005a2c <atoi>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	70da      	strb	r2, [r3, #3]

	// parse minute
	dateTime->minute = atoi(strtok(NULL, ";"));
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <parseDateTime+0xa4>)
 8000e70:	2000      	movs	r0, #0
 8000e72:	f004 fe67 	bl	8005b44 <strtok>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fdd7 	bl	8005a2c <atoi>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	711a      	strb	r2, [r3, #4]

	// parse second
	dateTime->second = atoi(strtok(NULL, ";"));
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <parseDateTime+0xa4>)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f004 fe5b 	bl	8005b44 <strtok>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fdcb 	bl	8005a2c <atoi>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	715a      	strb	r2, [r3, #5]
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	08007098 	.word	0x08007098

08000eac <formatDateTime>:

/*
 *
 */
void formatDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af06      	add	r7, sp, #24
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	memset(data, 0, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000eb6:	223c      	movs	r2, #60	; 0x3c
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f004 fdf2 	bl	8005aa4 <memset>
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	4619      	mov	r1, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	78db      	ldrb	r3, [r3, #3]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ed6:	4618      	mov	r0, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	791b      	ldrb	r3, [r3, #4]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000edc:	461c      	mov	r4, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	795b      	ldrb	r3, [r3, #5]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ee2:	9304      	str	r3, [sp, #16]
 8000ee4:	9403      	str	r4, [sp, #12]
 8000ee6:	9002      	str	r0, [sp, #8]
 8000ee8:	9101      	str	r1, [sp, #4]
 8000eea:	9200      	str	r2, [sp, #0]
 8000eec:	462b      	mov	r3, r5
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <formatDateTime+0x54>)
 8000ef0:	213c      	movs	r1, #60	; 0x3c
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f004 fdde 	bl	8005ab4 <sniprintf>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bdb0      	pop	{r4, r5, r7, pc}
 8000f00:	0800709c 	.word	0x0800709c

08000f04 <parseEvent>:

/*
 *
 */
void parseEvent(char data[UART_MESSAGE_BODY_SIZE], CalendarEvent* event)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	// parse start year
	event->start.year = atoi(strtok(data, ";"));
 8000f0e:	494a      	ldr	r1, [pc, #296]	; (8001038 <parseEvent+0x134>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f004 fe17 	bl	8005b44 <strtok>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fd87 	bl	8005a2c <atoi>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	701a      	strb	r2, [r3, #0]

	// parse start month
	event->start.month = atoi(strtok(NULL, ";"));
 8000f26:	4944      	ldr	r1, [pc, #272]	; (8001038 <parseEvent+0x134>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f004 fe0b 	bl	8005b44 <strtok>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fd7b 	bl	8005a2c <atoi>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	705a      	strb	r2, [r3, #1]

	// parse start date
	event->start.day = atoi(strtok(NULL, ";"));
 8000f3e:	493e      	ldr	r1, [pc, #248]	; (8001038 <parseEvent+0x134>)
 8000f40:	2000      	movs	r0, #0
 8000f42:	f004 fdff 	bl	8005b44 <strtok>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 fd6f 	bl	8005a2c <atoi>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	709a      	strb	r2, [r3, #2]

	// parse start hour
	event->start.hour = atoi(strtok(NULL, ";"));
 8000f56:	4938      	ldr	r1, [pc, #224]	; (8001038 <parseEvent+0x134>)
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f004 fdf3 	bl	8005b44 <strtok>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 fd63 	bl	8005a2c <atoi>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	70da      	strb	r2, [r3, #3]

	// parse start minute
	event->start.minute = atoi(strtok(NULL, ";"));
 8000f6e:	4932      	ldr	r1, [pc, #200]	; (8001038 <parseEvent+0x134>)
 8000f70:	2000      	movs	r0, #0
 8000f72:	f004 fde7 	bl	8005b44 <strtok>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fd57 	bl	8005a2c <atoi>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	711a      	strb	r2, [r3, #4]

	// parse start second
	event->start.second = atoi(strtok(NULL, ";"));
 8000f86:	492c      	ldr	r1, [pc, #176]	; (8001038 <parseEvent+0x134>)
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f004 fddb 	bl	8005b44 <strtok>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 fd4b 	bl	8005a2c <atoi>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	715a      	strb	r2, [r3, #5]

	// parse end year
	event->end.year = atoi(strtok(NULL, ";"));
 8000f9e:	4926      	ldr	r1, [pc, #152]	; (8001038 <parseEvent+0x134>)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f004 fdcf 	bl	8005b44 <strtok>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 fd3f 	bl	8005a2c <atoi>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	731a      	strb	r2, [r3, #12]

	// parse end month
	event->end.month = atoi(strtok(NULL, ";"));
 8000fb6:	4920      	ldr	r1, [pc, #128]	; (8001038 <parseEvent+0x134>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f004 fdc3 	bl	8005b44 <strtok>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fd33 	bl	8005a2c <atoi>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	735a      	strb	r2, [r3, #13]

	// parse end date
	event->end.day = atoi(strtok(NULL, ";"));
 8000fce:	491a      	ldr	r1, [pc, #104]	; (8001038 <parseEvent+0x134>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f004 fdb7 	bl	8005b44 <strtok>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fd27 	bl	8005a2c <atoi>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	739a      	strb	r2, [r3, #14]

	// parse end hour
	event->end.hour = atoi(strtok(NULL, ";"));
 8000fe6:	4914      	ldr	r1, [pc, #80]	; (8001038 <parseEvent+0x134>)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f004 fdab 	bl	8005b44 <strtok>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fd1b 	bl	8005a2c <atoi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	73da      	strb	r2, [r3, #15]

	// parse end minute
	event->end.minute = atoi(strtok(NULL, ";"));
 8000ffe:	490e      	ldr	r1, [pc, #56]	; (8001038 <parseEvent+0x134>)
 8001000:	2000      	movs	r0, #0
 8001002:	f004 fd9f 	bl	8005b44 <strtok>
 8001006:	4603      	mov	r3, r0
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fd0f 	bl	8005a2c <atoi>
 800100e:	4603      	mov	r3, r0
 8001010:	b2da      	uxtb	r2, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	741a      	strb	r2, [r3, #16]

	// parse end second
	event->end.second = atoi(strtok(NULL, ";"));
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <parseEvent+0x134>)
 8001018:	2000      	movs	r0, #0
 800101a:	f004 fd93 	bl	8005b44 <strtok>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fd03 	bl	8005a2c <atoi>
 8001026:	4603      	mov	r3, r0
 8001028:	b2da      	uxtb	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	745a      	strb	r2, [r3, #17]
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	08007098 	.word	0x08007098

0800103c <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fa5f 	bl	8001508 <com_transport_init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <com_session_init+0x24>
	{
		_sessionOpen = false;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <com_session_init+0x30>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <com_session_init+0x34>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		return true;
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <com_session_init+0x26>
	}

	else
	{
		return false;
 8001060:	2300      	movs	r3, #0
	}
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20001ca0 	.word	0x20001ca0
 8001070:	20001ca1 	.word	0x20001ca1

08001074 <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <start_session+0x48>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d016      	beq.n	80010b0 <start_session+0x3c>
	{
		if (!_sessionOpen)
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <start_session+0x4c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f083 0301 	eor.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00d      	beq.n	80010ac <start_session+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8001090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001094:	f000 f860 	bl	8001158 <_handshake>
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <start_session+0x34>
				_sessionOpen = true;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <start_session+0x4c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	e002      	b.n	80010b2 <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80010b0:	2303      	movs	r3, #3
	}
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20001ca1 	.word	0x20001ca1
 80010c0:	20001ca0 	.word	0x20001ca0

080010c4 <session_cycle>:

/*
 *
 */
SESSION_STATUS session_cycle(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	if (_sessionInit)
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <session_cycle+0x28>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <session_cycle+0x20>
	{
		if (_sessionOpen)
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <session_cycle+0x2c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <session_cycle+0x1c>
		{
			return _session_cycle();
 80010d8:	f000 f926 	bl	8001328 <_session_cycle>
 80010dc:	4603      	mov	r3, r0
 80010de:	e002      	b.n	80010e6 <session_cycle+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 80010e0:	2304      	movs	r3, #4
 80010e2:	e000      	b.n	80010e6 <session_cycle+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80010e4:	2303      	movs	r3, #3
	}
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001ca1 	.word	0x20001ca1
 80010f0:	20001ca0 	.word	0x20001ca0

080010f4 <tell>:

/*
 *
 */
SESSION_STATUS tell(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	TRANSPORT_STATUS transportStatus;

	if (_sessionInit)
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <tell+0x5c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01f      	beq.n	8001146 <tell+0x52>
	{
		if (_sessionOpen)
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <tell+0x60>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d019      	beq.n	8001142 <tell+0x4e>
		{
			// enqueue message
			if (queue_tx(header, body) != TRANSPORT_OKAY)
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fa17 	bl	8001544 <queue_tx>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <tell+0x2c>
			{
				return SESSION_BUSY;
 800111c:	2305      	movs	r3, #5
 800111e:	e013      	b.n	8001148 <tell+0x54>
			}

			// send message
			transportStatus = tx(TX_TIMEOUT_MS);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f000 fa6d 	bl	8001600 <tx>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]

			if (transportStatus == TRANSPORT_OKAY)
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <tell+0x40>
			{
				return SESSION_OKAY;
 8001130:	2300      	movs	r3, #0
 8001132:	e009      	b.n	8001148 <tell+0x54>
			}
			else if (transportStatus == TRANSPORT_TIMEOUT)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d101      	bne.n	800113e <tell+0x4a>
			{
				return SESSION_TIMEOUT;
 800113a:	2301      	movs	r3, #1
 800113c:	e004      	b.n	8001148 <tell+0x54>
			}
			else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
			{
				return SESSION_ERROR;
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <tell+0x54>
			}
		}

		else
		{
			return SESSION_NOT_OPEN;
 8001142:	2304      	movs	r3, #4
 8001144:	e000      	b.n	8001148 <tell+0x54>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8001146:	2303      	movs	r3, #3
	}
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20001ca1 	.word	0x20001ca1
 8001154:	20001ca0 	.word	0x20001ca0

08001158 <_handshake>:

/*
 *
 */
SESSION_STATUS _handshake(unsigned int timeout_ms)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	; 0x50
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 8001164:	2300      	movs	r3, #0
 8001166:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8001170:	2300      	movs	r3, #0
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2238      	movs	r2, #56	; 0x38
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fc8f 	bl	8005aa4 <memset>

	while (!success && !error)
 8001186:	e0a2      	b.n	80012ce <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 8001188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800118a:	2b00      	cmp	r3, #0
 800118c:	d106      	bne.n	800119c <_handshake+0x44>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fa70 	bl	8001674 <rx>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800119a:	e063      	b.n	8001264 <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 800119c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10b      	bne.n	80011ba <_handshake+0x62>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 80011a2:	f107 0208 	add.w	r2, r7, #8
 80011a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f9ef 	bl	8001590 <dequeue_rx>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80011b8:	e054      	b.n	8001264 <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 80011ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d10d      	bne.n	80011dc <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 80011c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011c4:	2204      	movs	r2, #4
 80011c6:	4955      	ldr	r1, [pc, #340]	; (800131c <_handshake+0x1c4>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 fca7 	bl	8005b1c <strncmp>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d047      	beq.n	8001264 <_handshake+0x10c>
			{
				error = true;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80011da:	e043      	b.n	8001264 <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 80011dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d110      	bne.n	8001204 <_handshake+0xac>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	223c      	movs	r2, #60	; 0x3c
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fc5a 	bl	8005aa4 <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4619      	mov	r1, r3
 80011f6:	484a      	ldr	r0, [pc, #296]	; (8001320 <_handshake+0x1c8>)
 80011f8:	f000 f9a4 	bl	8001544 <queue_tx>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001202:	e02f      	b.n	8001264 <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 8001204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001206:	2b04      	cmp	r3, #4
 8001208:	d106      	bne.n	8001218 <_handshake+0xc0>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	f000 f9f8 	bl	8001600 <tx>
 8001210:	4603      	mov	r3, r0
 8001212:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001216:	e025      	b.n	8001264 <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8001218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121a:	2b05      	cmp	r3, #5
 800121c:	d106      	bne.n	800122c <_handshake+0xd4>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 800121e:	20fa      	movs	r0, #250	; 0xfa
 8001220:	f000 fa28 	bl	8001674 <rx>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800122a:	e01b      	b.n	8001264 <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 800122c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800122e:	2b06      	cmp	r3, #6
 8001230:	d10b      	bne.n	800124a <_handshake+0xf2>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8001232:	f107 0208 	add.w	r2, r7, #8
 8001236:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f9a7 	bl	8001590 <dequeue_rx>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001248:	e00c      	b.n	8001264 <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 800124a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800124e:	2204      	movs	r2, #4
 8001250:	4934      	ldr	r1, [pc, #208]	; (8001324 <_handshake+0x1cc>)
 8001252:	4618      	mov	r0, r3
 8001254:	f004 fc62 	bl	8005b1c <strncmp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <_handshake+0x10c>
			{
				error = true;
 800125e:	2301      	movs	r3, #1
 8001260:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8001264:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001268:	2b00      	cmp	r3, #0
 800126a:	d12d      	bne.n	80012c8 <_handshake+0x170>
		{
			if (state == 0)
 800126c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <_handshake+0x120>
				state = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001276:	e02a      	b.n	80012ce <_handshake+0x176>
			else if (state == 1)
 8001278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <_handshake+0x12c>
				state = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001282:	e024      	b.n	80012ce <_handshake+0x176>
			else if (state == 2)
 8001284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001286:	2b02      	cmp	r3, #2
 8001288:	d102      	bne.n	8001290 <_handshake+0x138>
				state = 3;
 800128a:	2303      	movs	r3, #3
 800128c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800128e:	e01e      	b.n	80012ce <_handshake+0x176>
			else if (state == 3)
 8001290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001292:	2b03      	cmp	r3, #3
 8001294:	d102      	bne.n	800129c <_handshake+0x144>
				state = 4;
 8001296:	2304      	movs	r3, #4
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800129a:	e018      	b.n	80012ce <_handshake+0x176>
			else if (state == 4)
 800129c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d102      	bne.n	80012a8 <_handshake+0x150>
				state = 5;
 80012a2:	2305      	movs	r3, #5
 80012a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012a6:	e012      	b.n	80012ce <_handshake+0x176>
			else if (state == 5)
 80012a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d102      	bne.n	80012b4 <_handshake+0x15c>
				state = 6;
 80012ae:	2306      	movs	r3, #6
 80012b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012b2:	e00c      	b.n	80012ce <_handshake+0x176>
			else if (state == 6)
 80012b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d102      	bne.n	80012c0 <_handshake+0x168>
				state = 7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012be:	e006      	b.n	80012ce <_handshake+0x176>
			else // if (state == 7)
				success = true;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80012c6:	e002      	b.n	80012ce <_handshake+0x176>
		}
		else
		{
			error = true;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 80012ce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012d2:	f083 0301 	eor.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <_handshake+0x194>
 80012dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f47f af4e 	bne.w	8001188 <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 80012ec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <_handshake+0x1ae>
 80012f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 8001302:	2300      	movs	r3, #0
 8001304:	e006      	b.n	8001314 <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 8001306:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 8001312:	2302      	movs	r3, #2
		}
	}
}
 8001314:	4618      	mov	r0, r3
 8001316:	3750      	adds	r7, #80	; 0x50
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	080070b0 	.word	0x080070b0
 8001320:	080070b8 	.word	0x080070b8
 8001324:	080070c0 	.word	0x080070c0

08001328 <_session_cycle>:

/*
 *
 */
SESSION_STATUS _session_cycle(void)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b092      	sub	sp, #72	; 0x48
 800132c:	af00      	add	r7, sp, #0
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2238      	movs	r2, #56	; 0x38
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f004 fbb0 	bl	8005aa4 <memset>
	SESSION_STATUS status;

	// Perform Rx message phase of session cycle.
	status = _listen();
 8001344:	f000 f858 	bl	80013f8 <_listen>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 800134e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001352:	2b02      	cmp	r3, #2
 8001354:	d101      	bne.n	800135a <_session_cycle+0x32>
	{
		return SESSION_ERROR;
 8001356:	2302      	movs	r3, #2
 8001358:	e03e      	b.n	80013d8 <_session_cycle+0xb0>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 800135a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800135e:	2b00      	cmp	r3, #0
 8001360:	d139      	bne.n	80013d6 <_session_cycle+0xae>
	{
		// dequeue received message
		dequeue_rx(messageHeader, messageBody);
 8001362:	1d3a      	adds	r2, r7, #4
 8001364:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f910 	bl	8001590 <dequeue_rx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_MESSAGE_HEADER_SIZE))
 8001370:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001374:	2204      	movs	r2, #4
 8001376:	491a      	ldr	r1, [pc, #104]	; (80013e0 <_session_cycle+0xb8>)
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fbcf 	bl	8005b1c <strncmp>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <_session_cycle+0x64>
		{
			_sessionOpen = false;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <_session_cycle+0xbc>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e024      	b.n	80013d6 <_session_cycle+0xae>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_MESSAGE_HEADER_SIZE))
 800138c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001390:	2204      	movs	r2, #4
 8001392:	4915      	ldr	r1, [pc, #84]	; (80013e8 <_session_cycle+0xc0>)
 8001394:	4618      	mov	r0, r3
 8001396:	f004 fbc1 	bl	8005b1c <strncmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <_session_cycle+0x88>
		{
			tell(messageHeader, messageBody);
 80013a0:	1d3a      	adds	r2, r7, #4
 80013a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fea3 	bl	80010f4 <tell>
 80013ae:	e012      	b.n	80013d6 <_session_cycle+0xae>
 80013b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <_session_cycle+0xc4>)
 80013b4:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <_session_cycle+0xc8>)
 80013b8:	461d      	mov	r5, r3
 80013ba:	1d3c      	adds	r4, r7, #4
 80013bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <_session_cycle+0xcc>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
		}
	}

	return SESSION_OKAY;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3748      	adds	r7, #72	; 0x48
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}
 80013e0:	080070c8 	.word	0x080070c8
 80013e4:	20001ca0 	.word	0x20001ca0
 80013e8:	080070d0 	.word	0x080070d0
 80013ec:	20001ca4 	.word	0x20001ca4
 80013f0:	20001ca8 	.word	0x20001ca8
 80013f4:	20001ce4 	.word	0x20001ce4

080013f8 <_listen>:

/*
 *
 */
SESSION_STATUS _listen(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b090      	sub	sp, #64	; 0x40
 80013fc:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2238      	movs	r2, #56	; 0x38
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fb4b 	bl	8005aa4 <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 800140e:	463b      	mov	r3, r7
 8001410:	223c      	movs	r2, #60	; 0x3c
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fb45 	bl	8005aa4 <memset>
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "Clear to send!\n");
 800141a:	463b      	mov	r3, r7
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <_listen+0x9c>)
 800141e:	213c      	movs	r1, #60	; 0x3c
 8001420:	4618      	mov	r0, r3
 8001422:	f004 fb47 	bl	8005ab4 <sniprintf>
	transportStatus = queue_tx(CTS_HEADER, messageBody);
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <_listen+0xa0>)
 800142c:	f000 f88a 	bl	8001544 <queue_tx>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 8001436:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <_listen+0x4a>
	{
		return SESSION_ERROR;
 800143e:	2302      	movs	r3, #2
 8001440:	e024      	b.n	800148c <_listen+0x94>
	}

	transportStatus = tx(TX_TIMEOUT_MS);
 8001442:	2064      	movs	r0, #100	; 0x64
 8001444:	f000 f8dc 	bl	8001600 <tx>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 800144e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 8001456:	2301      	movs	r3, #1
 8001458:	e018      	b.n	800148c <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 800145a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <_listen+0x6e>
	{
		return SESSION_ERROR;
 8001462:	2302      	movs	r3, #2
 8001464:	e012      	b.n	800148c <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = rx(RX_TIMEOUT_MS);
 8001466:	20fa      	movs	r0, #250	; 0xfa
 8001468:	f000 f904 	bl	8001674 <rx>
 800146c:	4603      	mov	r3, r0
 800146e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8001472:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 800147a:	2301      	movs	r3, #1
 800147c:	e006      	b.n	800148c <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 800147e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <_listen+0x92>
	{
		return SESSION_ERROR;
 8001486:	2302      	movs	r3, #2
 8001488:	e000      	b.n	800148c <_listen+0x94>
	}

	return SESSION_OKAY;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3740      	adds	r7, #64	; 0x40
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	080070d8 	.word	0x080070d8
 8001498:	080070e8 	.word	0x080070e8

0800149c <getCommand>:

/*
 *
 */
SESSION_STATUS getCommand(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	if (_messageReady)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <getCommand+0x60>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d020      	beq.n	80014f0 <getCommand+0x54>
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <getCommand+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(header, _messageCommand, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
		memcpy(body, _messageData, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <getCommand+0x68>)
 80014ba:	4614      	mov	r4, r2
 80014bc:	469c      	mov	ip, r3
 80014be:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014c2:	4665      	mov	r5, ip
 80014c4:	4626      	mov	r6, r4
 80014c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014c8:	6028      	str	r0, [r5, #0]
 80014ca:	6069      	str	r1, [r5, #4]
 80014cc:	60aa      	str	r2, [r5, #8]
 80014ce:	60eb      	str	r3, [r5, #12]
 80014d0:	3410      	adds	r4, #16
 80014d2:	f10c 0c10 	add.w	ip, ip, #16
 80014d6:	4574      	cmp	r4, lr
 80014d8:	d1f3      	bne.n	80014c2 <getCommand+0x26>
 80014da:	4665      	mov	r5, ip
 80014dc:	4623      	mov	r3, r4
 80014de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014e0:	6028      	str	r0, [r5, #0]
 80014e2:	6069      	str	r1, [r5, #4]
 80014e4:	60aa      	str	r2, [r5, #8]
		_messageReady = false;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <getCommand+0x60>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]

		return SESSION_OKAY;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e000      	b.n	80014f2 <getCommand+0x56>
	}

	else
	{
		return SESSION_ERROR;
 80014f0:	2302      	movs	r3, #2
	}
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20001ce4 	.word	0x20001ce4
 8001500:	20001ca4 	.word	0x20001ca4
 8001504:	20001ca8 	.word	0x20001ca8

08001508 <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <com_transport_init+0x24>
	{
		_uartHandle = huart;
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <com_transport_init+0x30>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <com_transport_init+0x34>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <com_transport_init+0x38>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
		return true;
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <com_transport_init+0x26>
	}

	else
	{
		return false;
 800152c:	2300      	movs	r3, #0
	}
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20001ce8 	.word	0x20001ce8
 800153c:	20001d6c 	.word	0x20001d6c
 8001540:	20001d6d 	.word	0x20001d6d

08001544 <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <queue_tx+0x40>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d010      	beq.n	8001578 <queue_tx+0x34>
	{
		if (_txBuffer_full)
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <queue_tx+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 8001560:	2304      	movs	r3, #4
 8001562:	e00a      	b.n	800157a <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <queue_tx+0x48>)
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fbc1 	bl	8000cf0 <composeMessage>
			_txBuffer_full = true;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <queue_tx+0x44>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8001574:	2300      	movs	r3, #0
 8001576:	e000      	b.n	800157a <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001578:	2308      	movs	r3, #8
	}
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20001ce8 	.word	0x20001ce8
 8001588:	20001d6c 	.word	0x20001d6c
 800158c:	20001cec 	.word	0x20001cec

08001590 <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b092      	sub	sp, #72	; 0x48
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <dequeue_rx+0x64>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d023      	beq.n	80015ea <dequeue_rx+0x5a>
	{
		if (!_rxBuffer_full)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <dequeue_rx+0x68>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 80015b2:	2306      	movs	r3, #6
 80015b4:	e01a      	b.n	80015ec <dequeue_rx+0x5c>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <dequeue_rx+0x6c>)
 80015b8:	f107 0408 	add.w	r4, r7, #8
 80015bc:	461d      	mov	r5, r3
 80015be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <dequeue_rx+0x68>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	461a      	mov	r2, r3
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fb9b 	bl	8000d1c <decomposeMessage>

			return TRANSPORT_OKAY;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <dequeue_rx+0x5c>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80015ea:	2308      	movs	r3, #8
	}
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3748      	adds	r7, #72	; 0x48
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	20001ce8 	.word	0x20001ce8
 80015f8:	20001d6d 	.word	0x20001d6d
 80015fc:	20001d2c 	.word	0x20001d2c

08001600 <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <tx+0x68>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d026      	beq.n	800165e <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <tx+0x6c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f083 0301 	eor.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 8001620:	2305      	movs	r3, #5
 8001622:	e01d      	b.n	8001660 <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <tx+0x68>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2240      	movs	r2, #64	; 0x40
 800162c:	4910      	ldr	r1, [pc, #64]	; (8001670 <tx+0x70>)
 800162e:	f003 fb87 	bl	8004d40 <HAL_UART_Transmit>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <tx+0x40>
		{
			return TRANSPORT_ERROR;
 800163c:	2302      	movs	r3, #2
 800163e:	e00f      	b.n	8001660 <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d101      	bne.n	800164a <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 8001646:	2301      	movs	r3, #1
 8001648:	e00a      	b.n	8001660 <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d101      	bne.n	8001654 <tx+0x54>
		{
			return TRANSPORT_BUSY;
 8001650:	2303      	movs	r3, #3
 8001652:	e005      	b.n	8001660 <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <tx+0x6c>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 800165e:	2308      	movs	r3, #8
	}
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20001ce8 	.word	0x20001ce8
 800166c:	20001d6c 	.word	0x20001d6c
 8001670:	20001cec 	.word	0x20001cec

08001674 <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <rx+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <rx+0x68>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 800168e:	2307      	movs	r3, #7
 8001690:	e01d      	b.n	80016ce <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <rx+0x64>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	4911      	ldr	r1, [pc, #68]	; (80016e0 <rx+0x6c>)
 800169c:	f003 fbd6 	bl	8004e4c <HAL_UART_Receive>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 80016aa:	2302      	movs	r3, #2
 80016ac:	e00f      	b.n	80016ce <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d101      	bne.n	80016b8 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e00a      	b.n	80016ce <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d101      	bne.n	80016c2 <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 80016be:	2303      	movs	r3, #3
 80016c0:	e005      	b.n	80016ce <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <rx+0x68>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80016cc:	2308      	movs	r3, #8
	}
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20001ce8 	.word	0x20001ce8
 80016dc:	20001d6d 	.word	0x20001d6d
 80016e0:	20001d2c 	.word	0x20001d2c

080016e4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4013      	ands	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	d101      	bne.n	8001730 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	43db      	mvns	r3, r3
 800174e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001752:	4013      	ands	r3, r2
 8001754:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff ffd2 	bl	8001714 <LL_AHB2_GRP1_IsEnabledClock>
 8001770:	4603      	mov	r3, r0
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <activate_led+0x60>)
 8001774:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <activate_led+0x60>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff ffb0 	bl	80016e4 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	2301      	movs	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <activate_led+0x64>)
 80017a8:	f001 f80c 	bl	80027c4 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4619      	mov	r1, r3
 80017b2:	4804      	ldr	r0, [pc, #16]	; (80017c4 <activate_led+0x64>)
 80017b4:	f001 fa34 	bl	8002c20 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20001d70 	.word	0x20001d70
 80017c4:	48000400 	.word	0x48000400

080017c8 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <deactivate_led+0x38>)
 80017da:	f001 fa21 	bl	8002c20 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <deactivate_led+0x38>)
 80017e4:	f001 f94e 	bl	8002a84 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <deactivate_led+0x3c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80017f0:	2002      	movs	r0, #2
 80017f2:	f7ff ffa3 	bl	800173c <LL_AHB2_GRP1_DisableClock>
  }
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	48000400 	.word	0x48000400
 8001804:	20001d70 	.word	0x20001d70

08001808 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001818:	f023 0218 	bic.w	r2, r3, #24
 800181c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4313      	orrs	r3, r2
 8001824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <LL_AHB2_GRP1_EnableClock>:
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4313      	orrs	r3, r2
 8001848:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4013      	ands	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 800186a:	f7fe ffe9 	bl	8000840 <calendar_AlarmA_ISR>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <event_start>:

void event_start(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
	activate_led(GPIO_PIN_15);
 800187a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800187e:	f7ff ff6f 	bl	8001760 <activate_led>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}

08001886 <event_end>:

void event_end(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
	deactivate_led(GPIO_PIN_15);
 800188a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800188e:	f7ff ff9b 	bl	80017c8 <deactivate_led>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b09a      	sub	sp, #104	; 0x68
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189e:	f000 fe0f 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a2:	f000 f8b9 	bl	8001a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a6:	f000 fa09 	bl	8001cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018aa:	f000 f9b1 	bl	8001c10 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80018ae:	f000 f911 	bl	8001ad4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f001 f9f4 	bl	8002ca0 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 80018b8:	4852      	ldr	r0, [pc, #328]	; (8001a04 <main+0x16c>)
 80018ba:	f7ff fbbf 	bl	800103c <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 80018be:	4852      	ldr	r0, [pc, #328]	; (8001a08 <main+0x170>)
 80018c0:	f7fe fe36 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 80018c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 80018ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d6:	f7fe fead 	bl	8000634 <calendar_setDateTime>

  // start calendar
//  calendar_start();

  // begin listening for messages from desktop
  if (start_session() == SESSION_OKAY)
 80018da:	f7ff fbcb 	bl	8001074 <start_session>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d103      	bne.n	80018ec <main+0x54>
  {
	  activate_led(GREEN_LED);
 80018e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018e8:	f7ff ff3a 	bl	8001760 <activate_led>
  }

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  AppActions commandCode;
  DateTime newDateTime = {0};
 80018ec:	f107 0318 	add.w	r3, r7, #24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	809a      	strh	r2, [r3, #4]
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 80018f6:	f7fe fee7 	bl	80006c8 <calendar_handleAlarm>

	  // try to open connection if not present
	  if (start_session() == SESSION_OKAY)
 80018fa:	f7ff fbbb 	bl	8001074 <start_session>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <main+0x74>
	  {
		  activate_led(GREEN_LED);
 8001904:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001908:	f7ff ff2a 	bl	8001760 <activate_led>
	  }

	  // if message present, handle message
	  if (session_cycle() != SESSION_OKAY)
 800190c:	f7ff fbda 	bl	80010c4 <session_cycle>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <main+0x86>
	  {
		  activate_led(RED_LED);
 8001916:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800191a:	f7ff ff21 	bl	8001760 <activate_led>
	  }

	  // get command if present
	  if (getCommand(messageHeader, messageBody) == SESSION_OKAY)
 800191e:	f107 0220 	add.w	r2, r7, #32
 8001922:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fdb7 	bl	800149c <getCommand>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e0      	bne.n	80018f6 <main+0x5e>
	  {
		  // execute command
		  commandCode = code_to_appActions(messageHeader);
 8001934:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa05 	bl	8000d48 <code_to_appActions>
 800193e:	4603      	mov	r3, r0
 8001940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  // set date/time
		  if (commandCode == SET_CALENDAR_DATETIME)
 8001944:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001948:	2b01      	cmp	r3, #1
 800194a:	d10e      	bne.n	800196a <main+0xd2>
		  {
			  parseDateTime(messageBody, &newDateTime);
 800194c:	f107 0218 	add.w	r2, r7, #24
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fa54 	bl	8000e04 <parseDateTime>
			  calendar_setDateTime(newDateTime);
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001964:	f7fe fe66 	bl	8000634 <calendar_setDateTime>
 8001968:	e7c5      	b.n	80018f6 <main+0x5e>
		  }

		  // get date/time
		  else if (commandCode == GET_CALENDAR_DATETIME)
 800196a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800196e:	2b02      	cmp	r3, #2
 8001970:	d117      	bne.n	80019a2 <main+0x10a>
		  {
			  calendar_getDateTime(&newDateTime);
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fe72 	bl	8000660 <calendar_getDateTime>
			  formatDateTime(messageBody, &newDateTime);
 800197c:	f107 0218 	add.w	r2, r7, #24
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fa90 	bl	8000eac <formatDateTime>
			  memcpy(messageHeader, "ECHO", UART_MESSAGE_HEADER_SIZE*sizeof(char));
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <main+0x174>)
 800198e:	65fb      	str	r3, [r7, #92]	; 0x5c
			  tell(messageHeader, messageBody);
 8001990:	f107 0220 	add.w	r2, r7, #32
 8001994:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fbaa 	bl	80010f4 <tell>
 80019a0:	e7a9      	b.n	80018f6 <main+0x5e>
		  }

		  // add event
		  else if (commandCode == ADD_CALENDAR_EVENT)
 80019a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d117      	bne.n	80019da <main+0x142>
		  {
			  CalendarEvent tempEvent = {0};
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	615a      	str	r2, [r3, #20]
			  parseEvent(messageBody, &tempEvent);
 80019ba:	463a      	mov	r2, r7
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fa9e 	bl	8000f04 <parseEvent>
			  tempEvent.start_callback = &(event_start);
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <main+0x178>)
 80019ca:	60bb      	str	r3, [r7, #8]
			  tempEvent.end_callback = &(event_end);
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <main+0x17c>)
 80019ce:	617b      	str	r3, [r7, #20]
			  calendar_addEvent(&tempEvent);
 80019d0:	463b      	mov	r3, r7
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fe5e 	bl	8000694 <calendar_addEvent>
 80019d8:	e78d      	b.n	80018f6 <main+0x5e>
		  }

		  // get/view event
		  else if (commandCode == GET_CALENDAR_EVENT)
 80019da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d089      	beq.n	80018f6 <main+0x5e>
		  {

		  }

		  // remove event
		  else if (commandCode == REMOVE_CALENDAR_EVENT)
 80019e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d085      	beq.n	80018f6 <main+0x5e>
		  {

		  }

		  // clear all events
		  else if (commandCode == CLEAR_CALENDAR_EVENTS)
 80019ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d081      	beq.n	80018f6 <main+0x5e>
		  {

		  }

		  // start calendar
		  else if (commandCode == START_CALENDAR)
 80019f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019f6:	2b07      	cmp	r3, #7
 80019f8:	f47f af7d 	bne.w	80018f6 <main+0x5e>
		  {
			  calendar_start();
 80019fc:	f7fe fddc 	bl	80005b8 <calendar_start>
	  calendar_handleAlarm();
 8001a00:	e779      	b.n	80018f6 <main+0x5e>
 8001a02:	bf00      	nop
 8001a04:	20001dac 	.word	0x20001dac
 8001a08:	20001d74 	.word	0x20001d74
 8001a0c:	4f484345 	.word	0x4f484345
 8001a10:	08001877 	.word	0x08001877
 8001a14:	08001887 	.word	0x08001887

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09a      	sub	sp, #104	; 0x68
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	2248      	movs	r2, #72	; 0x48
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 f83c 	bl	8005aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a3e:	f001 f907 	bl	8002c50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fee0 	bl	8001808 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <SystemClock_Config+0xb8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <SystemClock_Config+0xb8>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <SystemClock_Config+0xb8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001a64:	232c      	movs	r3, #44	; 0x2c
 8001a66:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a68:	2381      	movs	r3, #129	; 0x81
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a74:	2360      	movs	r3, #96	; 0x60
 8001a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 0320 	add.w	r3, r7, #32
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fbcb 	bl	8003224 <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a94:	f000 f91f 	bl	8001cd6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001a98:	236f      	movs	r3, #111	; 0x6f
 8001a9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 ff35 	bl	8003928 <HAL_RCC_ClockConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ac4:	f000 f907 	bl	8001cd6 <Error_Handler>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3768      	adds	r7, #104	; 0x68
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	58000400 	.word	0x58000400

08001ad4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b092      	sub	sp, #72	; 0x48
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ada:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001aea:	2300      	movs	r3, #0
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	222c      	movs	r2, #44	; 0x2c
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 ffd5 	bl	8005aa4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <MX_RTC_Init+0x134>)
 8001afc:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <MX_RTC_Init+0x138>)
 8001afe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b08:	227f      	movs	r2, #127	; 0x7f
 8001b0a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b0c:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b0e:	22ff      	movs	r2, #255	; 0xff
 8001b10:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b18:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b38:	4833      	ldr	r0, [pc, #204]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b3a:	f002 fbcf 	bl	80042dc <HAL_RTC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001b44:	f000 f8c7 	bl	8001cd6 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b66:	2201      	movs	r2, #1
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4827      	ldr	r0, [pc, #156]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b6c:	f002 fc38 	bl	80043e0 <HAL_RTC_SetTime>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001b76:	f000 f8ae 	bl	8001cd6 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b96:	2201      	movs	r2, #1
 8001b98:	4619      	mov	r1, r3
 8001b9a:	481b      	ldr	r0, [pc, #108]	; (8001c08 <MX_RTC_Init+0x134>)
 8001b9c:	f002 fd1e 	bl	80045dc <HAL_RTC_SetDate>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001ba6:	f000 f896 	bl	8001cd6 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4619      	mov	r1, r3
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <MX_RTC_Init+0x134>)
 8001be2:	f002 fdcf 	bl	8004784 <HAL_RTC_SetAlarm_IT>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001bec:	f000 f873 	bl	8001cd6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	202a      	movs	r0, #42	; 0x2a
 8001bf6:	f000 fdb0 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001bfa:	202a      	movs	r0, #42	; 0x2a
 8001bfc:	f000 fdc7 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3748      	adds	r7, #72	; 0x48
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20001d74 	.word	0x20001d74
 8001c0c:	40002800 	.word	0x40002800

08001c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c16:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <MX_USART2_UART_Init+0xa8>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001c30:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c32:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c58:	2230      	movs	r2, #48	; 0x30
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c6e:	f003 f817 	bl	8004ca0 <HAL_UART_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001c78:	f000 f82d 	bl	8001cd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c80:	f003 fe0b 	bl	800589a <HAL_UARTEx_SetTxFifoThreshold>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001c8a:	f000 f824 	bl	8001cd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001c92:	f003 fe40 	bl	8005916 <HAL_UARTEx_SetRxFifoThreshold>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001c9c:	f000 f81b 	bl	8001cd6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_USART2_UART_Init+0xa4>)
 8001ca2:	f003 fdc2 	bl	800582a <HAL_UARTEx_DisableFifoMode>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8001cac:	f000 f813 	bl	8001cd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20001dac 	.word	0x20001dac
 8001cb8:	40004400 	.word	0x40004400

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fdb6 	bl	8001832 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	2004      	movs	r0, #4
 8001cc8:	f7ff fdb3 	bl	8001832 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff fdb0 	bl	8001832 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cda:	b672      	cpsid	i
}
 8001cdc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cde:	e7fe      	b.n	8001cde <Error_Handler+0x8>

08001ce0 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <rtcAlarmControl_init+0x18>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20001e40 	.word	0x20001e40

08001cfc <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71bb      	strb	r3, [r7, #6]
 8001d12:	460b      	mov	r3, r1
 8001d14:	717b      	strb	r3, [r7, #5]
 8001d16:	4613      	mov	r3, r2
 8001d18:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <setDateTime+0x18c>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	08db      	lsrs	r3, r3, #3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	b258      	sxtb	r0, r3
 8001d2a:	79fa      	ldrb	r2, [r7, #7]
 8001d2c:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <setDateTime+0x18c>)
 8001d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d32:	08d9      	lsrs	r1, r3, #3
 8001d34:	460b      	mov	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	4303      	orrs	r3, r0
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <setDateTime+0x18c>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	b258      	sxtb	r0, r3
 8001d5a:	79ba      	ldrb	r2, [r7, #6]
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <setDateTime+0x18c>)
 8001d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d62:	08d9      	lsrs	r1, r3, #3
 8001d64:	460b      	mov	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	4303      	orrs	r3, r0
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <setDateTime+0x18c>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	08db      	lsrs	r3, r3, #3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	b258      	sxtb	r0, r3
 8001d8a:	797a      	ldrb	r2, [r7, #5]
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <setDateTime+0x18c>)
 8001d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d92:	08d9      	lsrs	r1, r3, #3
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4303      	orrs	r3, r0
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8001dae:	793b      	ldrb	r3, [r7, #4]
 8001db0:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <setDateTime+0x18c>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	b258      	sxtb	r0, r3
 8001dbe:	793a      	ldrb	r2, [r7, #4]
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <setDateTime+0x18c>)
 8001dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc6:	08d9      	lsrs	r1, r3, #3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4303      	orrs	r3, r0
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8001dde:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001de2:	4a29      	ldr	r2, [pc, #164]	; (8001e88 <setDateTime+0x18c>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	b258      	sxtb	r0, r3
 8001df0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <setDateTime+0x18c>)
 8001df6:	fba3 1302 	umull	r1, r3, r3, r2
 8001dfa:	08d9      	lsrs	r1, r3, #3
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	4303      	orrs	r3, r0
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001e12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e16:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <setDateTime+0x18c>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	b258      	sxtb	r0, r3
 8001e24:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <setDateTime+0x18c>)
 8001e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e2e:	08d9      	lsrs	r1, r3, #3
 8001e30:	460b      	mov	r3, r1
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	4303      	orrs	r3, r0
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <setDateTime+0x190>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f107 011c 	add.w	r1, r7, #28
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fbc3 	bl	80045dc <HAL_RTC_SetDate>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
}
 8001e5e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001e60:	e7fe      	b.n	8001e60 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <setDateTime+0x190>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f107 0108 	add.w	r1, r7, #8
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 fab7 	bl	80043e0 <HAL_RTC_SetTime>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001e7c:	e7fe      	b.n	8001e7c <setDateTime+0x180>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd90      	pop	{r4, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	cccccccd 	.word	0xcccccccd
 8001e8c:	20001e40 	.word	0x20001e40

08001e90 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <getDateTime+0x124>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f107 0114 	add.w	r1, r7, #20
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fb2b 	bl	8004518 <HAL_RTC_GetTime>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001ecc:	e7fe      	b.n	8001ecc <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001ece:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <getDateTime+0x124>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f107 0110 	add.w	r1, r7, #16
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 fc05 	bl	80046e8 <HAL_RTC_GetDate>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001ee8:	e7fe      	b.n	8001ee8 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001f0a:	7c7b      	ldrb	r3, [r7, #17]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	7c7b      	ldrb	r3, [r7, #17]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001f2a:	7cbb      	ldrb	r3, [r7, #18]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7cbb      	ldrb	r3, [r7, #18]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8001f4a:	7d3b      	ldrb	r3, [r7, #20]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	7d3b      	ldrb	r3, [r7, #20]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8001f6a:	7d7b      	ldrb	r3, [r7, #21]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	7d7b      	ldrb	r3, [r7, #21]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	7dbb      	ldrb	r3, [r7, #22]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa8:	701a      	strb	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20001e40 	.word	0x20001e40

08001fb8 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b08f      	sub	sp, #60	; 0x3c
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71bb      	strb	r3, [r7, #6]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	717b      	strb	r3, [r7, #5]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	222c      	movs	r2, #44	; 0x2c
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fd60 	bl	8005aa4 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	; (80020e8 <setAlarm_A+0x130>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	b258      	sxtb	r0, r3
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <setAlarm_A+0x130>)
 8001ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ffc:	08d9      	lsrs	r1, r3, #3
 8001ffe:	460b      	mov	r3, r1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	b25b      	sxtb	r3, r3
 800200c:	4303      	orrs	r3, r0
 800200e:	b25b      	sxtb	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <setAlarm_A+0x130>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	b258      	sxtb	r0, r3
 8002026:	79ba      	ldrb	r2, [r7, #6]
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <setAlarm_A+0x130>)
 800202a:	fba3 1302 	umull	r1, r3, r3, r2
 800202e:	08d9      	lsrs	r1, r3, #3
 8002030:	460b      	mov	r3, r1
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	b25b      	sxtb	r3, r3
 800203e:	4303      	orrs	r3, r0
 8002040:	b25b      	sxtb	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8002046:	797b      	ldrb	r3, [r7, #5]
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <setAlarm_A+0x130>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	b258      	sxtb	r0, r3
 8002056:	797a      	ldrb	r2, [r7, #5]
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <setAlarm_A+0x130>)
 800205a:	fba3 1302 	umull	r1, r3, r3, r2
 800205e:	08d9      	lsrs	r1, r3, #3
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4303      	orrs	r3, r0
 8002070:	b25b      	sxtb	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8002076:	793b      	ldrb	r3, [r7, #4]
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <setAlarm_A+0x130>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	08db      	lsrs	r3, r3, #3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	b258      	sxtb	r0, r3
 8002086:	793a      	ldrb	r2, [r7, #4]
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <setAlarm_A+0x130>)
 800208a:	fba3 1302 	umull	r1, r3, r3, r2
 800208e:	08d9      	lsrs	r1, r3, #3
 8002090:	460b      	mov	r3, r1
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	b25b      	sxtb	r3, r3
 800209e:	4303      	orrs	r3, r0
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 80020be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <setAlarm_A+0x134>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f107 010c 	add.w	r1, r7, #12
 80020cc:	2201      	movs	r2, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fb58 	bl	8004784 <HAL_RTC_SetAlarm_IT>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 80020da:	b672      	cpsid	i
}
 80020dc:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 80020de:	e7fe      	b.n	80020de <setAlarm_A+0x126>
  }
}
 80020e0:	bf00      	nop
 80020e2:	373c      	adds	r7, #60	; 0x3c
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd90      	pop	{r4, r7, pc}
 80020e8:	cccccccd 	.word	0xcccccccd
 80020ec:	20001e40 	.word	0x20001e40

080020f0 <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <diableAlarm_A+0x24>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fc4d 	bl	800499c <HAL_RTC_DeactivateAlarm>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 800210c:	e7fe      	b.n	800210c <diableAlarm_A+0x1c>
	}
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20001e40 	.word	0x20001e40

08002118 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <LL_AHB2_GRP1_EnableClock>:
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4313      	orrs	r3, r2
 800214e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002184:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218c:	68fb      	ldr	r3, [r7, #12]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b090      	sub	sp, #64	; 0x40
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	2238      	movs	r2, #56	; 0x38
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 fc75 	bl	8005aa4 <memset>
  if(hrtc->Instance==RTC)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_RTC_MspInit+0x54>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d115      	bne.n	80021f0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4618      	mov	r0, r3
 80021d6:	f001 ff67 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021e0:	f7ff fd79 	bl	8001cd6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021e4:	f7ff ff98 	bl	8002118 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ec:	f7ff ffbc 	bl	8002168 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3740      	adds	r7, #64	; 0x40
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40002800 	.word	0x40002800

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b096      	sub	sp, #88	; 0x58
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	2238      	movs	r2, #56	; 0x38
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fc41 	bl	8005aa4 <memset>
  if(huart->Instance==USART2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_UART_MspInit+0x88>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d126      	bne.n	800227a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800222c:	2302      	movs	r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002230:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002234:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4618      	mov	r0, r3
 800223c:	f001 ff34 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002246:	f7ff fd46 	bl	8001cd6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800224a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800224e:	f7ff ff8b 	bl	8002168 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff ff70 	bl	8002138 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002258:	230c      	movs	r3, #12
 800225a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002268:	2307      	movs	r3, #7
 800226a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002276:	f000 faa5 	bl	80027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	3758      	adds	r7, #88	; 0x58
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40004400 	.word	0x40004400

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800228c:	e7fe      	b.n	800228c <NMI_Handler+0x4>

0800228e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <HardFault_Handler+0x4>

08002294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <MemManage_Handler+0x4>

0800229a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ce:	f000 f951 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <RTC_Alarm_IRQHandler+0x10>)
 80022de:	f002 fbb9 	bl	8004a54 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20001d74 	.word	0x20001d74

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <_kill>:

int _kill(int pid, int sig)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002304:	f003 fb96 	bl	8005a34 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	2216      	movs	r2, #22
 800230c:	601a      	str	r2, [r3, #0]
  return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_exit>:

void _exit (int status)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002322:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffe7 	bl	80022fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800232c:	e7fe      	b.n	800232c <_exit+0x12>

0800232e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e00a      	b.n	8002356 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002340:	f3af 8000 	nop.w
 8002344:	4601      	mov	r1, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	60ba      	str	r2, [r7, #8]
 800234c:	b2ca      	uxtb	r2, r1
 800234e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	dbf0      	blt.n	8002340 <_read+0x12>
  }

  return len;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e009      	b.n	800238e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	60ba      	str	r2, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	dbf1      	blt.n	800237a <_write+0x12>
  }
  return len;
 8002396:	687b      	ldr	r3, [r7, #4]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_close>:

int _close(int file)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
  return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <_isatty>:

int _isatty(int file)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f003 fb00 	bl	8005a34 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20008000 	.word	0x20008000
 8002460:	00000400 	.word	0x00000400
 8002464:	20001e44 	.word	0x20001e44
 8002468:	20001e60 	.word	0x20001e60

0800246c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800246e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002470:	f7fe f858 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <LoopForever+0xe>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	; (80024b8 <LoopForever+0x16>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800249a:	f003 fad1 	bl	8005a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff f9fb 	bl	8001898 <main>

080024a2 <LoopForever>:

LoopForever:
    b LoopForever
 80024a2:	e7fe      	b.n	80024a2 <LoopForever>
  ldr   r0, =_estack
 80024a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024b0:	0800742c 	.word	0x0800742c
  ldr r2, =_sbss
 80024b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024b8:	20001e5c 	.word	0x20001e5c

080024bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f000 f93a 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024d0:	f001 fc0c 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_Init+0x3c>)
 80024d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 f810 	bl	8002500 <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	e001      	b.n	80024f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ec:	f7ff fe54 	bl	8002198 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f0:	79fb      	ldrb	r3, [r7, #7]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000000 	.word	0x20000000

08002500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_InitTick+0x6c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d024      	beq.n	800255e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002514:	f001 fbea 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_InitTick+0x6c>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002524:	fbb3 f3f1 	udiv	r3, r3, r1
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f93c 	bl	80027aa <HAL_SYSTICK_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10f      	bne.n	8002558 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	d809      	bhi.n	8002552 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253e:	2200      	movs	r2, #0
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002546:	f000 f908 	bl	800275a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_InitTick+0x70>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e007      	b.n	8002562 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e004      	b.n	8002562 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e001      	b.n	8002562 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000010 	.word	0x20000010
 8002570:	2000000c 	.word	0x2000000c

08002574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_IncTick+0x1c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_IncTick+0x20>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a03      	ldr	r2, [pc, #12]	; (8002594 <HAL_IncTick+0x20>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000010 	.word	0x20000010
 8002594:	20001e48 	.word	0x20001e48

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b02      	ldr	r3, [pc, #8]	; (80025a8 <HAL_GetTick+0x10>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	20001e48 	.word	0x20001e48

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4906      	ldr	r1, [pc, #24]	; (8002644 <__NVIC_EnableIRQ+0x34>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	; (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002724:	f7ff ff90 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff2d 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff44 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff92 	bl	800269c <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff61 	bl	8002648 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff37 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffa4 	bl	8002700 <SysTick_Config>
 80027b8:	4603      	mov	r3, r0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d2:	e140      	b.n	8002a56 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8132 	beq.w	8002a50 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d005      	beq.n	8002804 <HAL_GPIO_Init+0x40>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d130      	bne.n	8002866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800283a:	2201      	movs	r2, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 0201 	and.w	r2, r3, #1
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b03      	cmp	r3, #3
 8002870:	d017      	beq.n	80028a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d123      	bne.n	80028f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	6939      	ldr	r1, [r7, #16]
 80028f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 808c 	beq.w	8002a50 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x2b0>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	2207      	movs	r2, #7
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002962:	d00d      	beq.n	8002980 <HAL_GPIO_Init+0x1bc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a44      	ldr	r2, [pc, #272]	; (8002a78 <HAL_GPIO_Init+0x2b4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <HAL_GPIO_Init+0x1b8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <HAL_GPIO_Init+0x2b8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_GPIO_Init+0x1b4>
 8002974:	2302      	movs	r3, #2
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x1be>
 8002978:	2307      	movs	r3, #7
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x1be>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x1be>
 8002980:	2300      	movs	r3, #0
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002992:	4938      	ldr	r1, [pc, #224]	; (8002a74 <HAL_GPIO_Init+0x2b0>)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a0:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029c4:	4a2e      	ldr	r2, [pc, #184]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ee:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 80029f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a28:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_GPIO_Init+0x2bc>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f aeb7 	bne.w	80027d4 <HAL_GPIO_Init+0x10>
  }
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	48000400 	.word	0x48000400
 8002a7c:	48000800 	.word	0x48000800
 8002a80:	58000800 	.word	0x58000800

08002a84 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a92:	e0af      	b.n	8002bf4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a94:	2201      	movs	r2, #1
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a2 	beq.w	8002bee <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002aaa:	4a59      	ldr	r2, [pc, #356]	; (8002c10 <HAL_GPIO_DeInit+0x18c>)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ad2:	d00d      	beq.n	8002af0 <HAL_GPIO_DeInit+0x6c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a4f      	ldr	r2, [pc, #316]	; (8002c14 <HAL_GPIO_DeInit+0x190>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <HAL_GPIO_DeInit+0x68>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_GPIO_DeInit+0x194>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_GPIO_DeInit+0x64>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e004      	b.n	8002af2 <HAL_GPIO_DeInit+0x6e>
 8002ae8:	2307      	movs	r3, #7
 8002aea:	e002      	b.n	8002af2 <HAL_GPIO_DeInit+0x6e>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_GPIO_DeInit+0x6e>
 8002af0:	2300      	movs	r3, #0
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	f002 0203 	and.w	r2, r2, #3
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	4093      	lsls	r3, r2
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d136      	bne.n	8002b70 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b04:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4943      	ldr	r1, [pc, #268]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	493f      	ldr	r1, [pc, #252]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	493b      	ldr	r1, [pc, #236]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002b34:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_GPIO_DeInit+0x198>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b52:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <HAL_GPIO_DeInit+0x18c>)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43da      	mvns	r2, r3
 8002b62:	482b      	ldr	r0, [pc, #172]	; (8002c10 <HAL_GPIO_DeInit+0x18c>)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	400a      	ands	r2, r1
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2103      	movs	r1, #3
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	220f      	movs	r2, #15
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	08d2      	lsrs	r2, r2, #3
 8002ba4:	4019      	ands	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2103      	movs	r1, #3
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2103      	movs	r1, #3
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	401a      	ands	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f af49 	bne.w	8002a94 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40010000 	.word	0x40010000
 8002c14:	48000400 	.word	0x48000400
 8002c18:	48000800 	.word	0x48000800
 8002c1c:	58000800 	.word	0x58000800

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	58000400 	.word	0x58000400

08002c6c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <LL_PWR_EnableBootC2+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <LL_PWR_EnableBootC2+0x18>)
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7a:	60d3      	str	r3, [r2, #12]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	58000400 	.word	0x58000400

08002c88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_PWREx_GetVoltageRange+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	58000400 	.word	0x58000400

08002ca0 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002ca8:	f7ff ffe0 	bl	8002c6c <LL_PWR_EnableBootC2>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc4:	d101      	bne.n	8002cca <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	58000400 	.word	0x58000400

08002cd8 <LL_RCC_HSE_EnableTcxo>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <LL_RCC_HSE_DisableTcxo>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d06:	6013      	str	r3, [r2, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d22:	d101      	bne.n	8002d28 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <LL_RCC_HSE_Enable>:
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_HSE_Disable>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_HSE_IsReady>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d7c:	d101      	bne.n	8002d82 <LL_RCC_HSE_IsReady+0x18>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <LL_RCC_HSE_IsReady+0x1a>
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <LL_RCC_HSI_Enable>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_RCC_HSI_Disable>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_HSI_IsReady>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d101      	bne.n	8002ddc <LL_RCC_HSI_IsReady+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_RCC_HSI_IsReady+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <LL_RCC_LSE_IsReady>:
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d101      	bne.n	8002e26 <LL_RCC_LSE_IsReady+0x18>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <LL_RCC_LSE_IsReady+0x1a>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <LL_RCC_LSI_Enable>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <LL_RCC_LSI_Disable>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_LSI_IsReady>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d101      	bne.n	8002e88 <LL_RCC_LSI_IsReady+0x18>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <LL_RCC_LSI_IsReady+0x1a>
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <LL_RCC_MSI_Enable>:
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6013      	str	r3, [r2, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_MSI_Disable>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6013      	str	r3, [r2, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <LL_RCC_MSI_IsReady>:
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d101      	bne.n	8002ee0 <LL_RCC_MSI_IsReady+0x16>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_RCC_MSI_IsReady+0x18>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d101      	bne.n	8002f00 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <LL_RCC_MSI_GetRange>:
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_SetSysClkSource>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_GetSysClkSource>:
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_SetAHBPrescaler>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_SetAHB3Prescaler>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffc:	f023 020f 	bic.w	r2, r3, #15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <LL_RCC_SetAPB1Prescaler>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800302a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4313      	orrs	r3, r2
 8003032:	608b      	str	r3, [r1, #8]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <LL_RCC_SetAPB2Prescaler>:
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <LL_RCC_GetAHBPrescaler>:
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <LL_RCC_GetAHB3Prescaler>:
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003082:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <LL_RCC_GetAPB1Prescaler>:
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <LL_RCC_GetAPB2Prescaler>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800310a:	d101      	bne.n	8003110 <LL_RCC_PLL_IsReady+0x18>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <LL_RCC_PLL_IsReady+0x1a>
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0303 	and.w	r3, r3, #3
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d101      	bne.n	800318c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031aa:	d101      	bne.n	80031b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d101      	bne.n	80031d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f0:	d101      	bne.n	80031f6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003212:	d101      	bne.n	8003218 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
	...

08003224 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e36f      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003236:	f7ff fea6 	bl	8002f86 <LL_RCC_GetSysClkSource>
 800323a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800323c:	f7ff ff8f 	bl	800315e <LL_RCC_PLL_GetMainSource>
 8003240:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80c4 	beq.w	80033d8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x3e>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d176      	bne.n	800334a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d173      	bne.n	800334a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e353      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_OscConfig+0x68>
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328a:	e006      	b.n	800329a <HAL_RCC_OscConfig+0x76>
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329a:	4293      	cmp	r3, r2
 800329c:	d222      	bcs.n	80032e4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fd5a 	bl	8003d5c <RCC_SetFlashLatencyFromMSIRange>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e331      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fe2b 	bl	8002f38 <LL_RCC_MSI_SetCalibTrimming>
 80032e2:	e021      	b.n	8003328 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ee:	f043 0308 	orr.w	r3, r3, #8
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fe12 	bl	8002f38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fd1f 	bl	8003d5c <RCC_SetFlashLatencyFromMSIRange>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e2f6      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003328:	f000 fce0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 800332c:	4603      	mov	r3, r0
 800332e:	4aa7      	ldr	r2, [pc, #668]	; (80035cc <HAL_RCC_OscConfig+0x3a8>)
 8003330:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003332:	4ba7      	ldr	r3, [pc, #668]	; (80035d0 <HAL_RCC_OscConfig+0x3ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff f8e2 	bl	8002500 <HAL_InitTick>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d047      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	e2e5      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d02c      	beq.n	80033ac <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003352:	f7ff fd9e 	bl	8002e92 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003356:	f7ff f91f 	bl	8002598 <HAL_GetTick>
 800335a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800335e:	f7ff f91b 	bl	8002598 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e2d2      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003370:	f7ff fdab 	bl	8002eca <LL_RCC_MSI_IsReady>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f1      	beq.n	800335e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fdc7 	bl	8002f38 <LL_RCC_MSI_SetCalibTrimming>
 80033aa:	e015      	b.n	80033d8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ac:	f7ff fd7f 	bl	8002eae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033b0:	f7ff f8f2 	bl	8002598 <HAL_GetTick>
 80033b4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033b8:	f7ff f8ee 	bl	8002598 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e2a5      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80033ca:	f7ff fd7e 	bl	8002eca <LL_RCC_MSI_IsReady>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f1      	bne.n	80033b8 <HAL_RCC_OscConfig+0x194>
 80033d4:	e000      	b.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033d6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d058      	beq.n	8003496 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1d2>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d108      	bne.n	8003402 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d14b      	bne.n	8003496 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e289      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d102      	bne.n	8003428 <HAL_RCC_OscConfig+0x204>
 8003422:	f7ff fc86 	bl	8002d32 <LL_RCC_HSE_Enable>
 8003426:	e00d      	b.n	8003444 <HAL_RCC_OscConfig+0x220>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003430:	d104      	bne.n	800343c <HAL_RCC_OscConfig+0x218>
 8003432:	f7ff fc51 	bl	8002cd8 <LL_RCC_HSE_EnableTcxo>
 8003436:	f7ff fc7c 	bl	8002d32 <LL_RCC_HSE_Enable>
 800343a:	e003      	b.n	8003444 <HAL_RCC_OscConfig+0x220>
 800343c:	f7ff fc87 	bl	8002d4e <LL_RCC_HSE_Disable>
 8003440:	f7ff fc58 	bl	8002cf4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7ff f8a4 	bl	8002598 <HAL_GetTick>
 8003450:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7ff f8a0 	bl	8002598 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e257      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003466:	f7ff fc80 	bl	8002d6a <LL_RCC_HSE_IsReady>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f1      	beq.n	8003454 <HAL_RCC_OscConfig+0x230>
 8003470:	e011      	b.n	8003496 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7ff f891 	bl	8002598 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347a:	f7ff f88d 	bl	8002598 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b64      	cmp	r3, #100	; 0x64
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e244      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800348c:	f7ff fc6d 	bl	8002d6a <LL_RCC_HSE_IsReady>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f1      	bne.n	800347a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d046      	beq.n	8003530 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x290>
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d10e      	bne.n	80034cc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d10b      	bne.n	80034cc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e22a      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fc8e 	bl	8002de6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034ca:	e031      	b.n	8003530 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d019      	beq.n	8003508 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	f7ff fc5a 	bl	8002d8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7ff f85e 	bl	8002598 <HAL_GetTick>
 80034dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7ff f85a 	bl	8002598 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e211      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80034f2:	f7ff fc67 	bl	8002dc4 <LL_RCC_HSI_IsReady>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f1      	beq.n	80034e0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fc70 	bl	8002de6 <LL_RCC_HSI_SetCalibTrimming>
 8003506:	e013      	b.n	8003530 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003508:	f7ff fc4e 	bl	8002da8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7ff f844 	bl	8002598 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7ff f840 	bl	8002598 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1f7      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003526:	f7ff fc4d 	bl	8002dc4 <LL_RCC_HSI_IsReady>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f1      	bne.n	8003514 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d06e      	beq.n	800361a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d056      	beq.n	80035f2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	429a      	cmp	r2, r3
 800355a:	d031      	beq.n	80035c0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e1d0      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d013      	beq.n	80035a6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800357e:	f7ff fc67 	bl	8002e50 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003582:	f7ff f809 	bl	8002598 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358a:	f7ff f805 	bl	8002598 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b11      	cmp	r3, #17
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e1bc      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800359c:	f7ff fc68 	bl	8002e70 <LL_RCC_LSI_IsReady>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f1      	bne.n	800358a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ae:	f023 0210 	bic.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c0:	f7ff fc36 	bl	8002e30 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fe ffe8 	bl	8002598 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80035ca:	e00c      	b.n	80035e6 <HAL_RCC_OscConfig+0x3c2>
 80035cc:	20000000 	.word	0x20000000
 80035d0:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fe ffe0 	bl	8002598 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b11      	cmp	r3, #17
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e197      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80035e6:	f7ff fc43 	bl	8002e70 <LL_RCC_LSI_IsReady>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f1      	beq.n	80035d4 <HAL_RCC_OscConfig+0x3b0>
 80035f0:	e013      	b.n	800361a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f2:	f7ff fc2d 	bl	8002e50 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fe ffcf 	bl	8002598 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fe ffcb 	bl	8002598 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b11      	cmp	r3, #17
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e182      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003610:	f7ff fc2e 	bl	8002e70 <LL_RCC_LSI_IsReady>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f1      	bne.n	80035fe <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80d8 	beq.w	80037d8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003628:	f7ff fb44 	bl	8002cb4 <LL_PWR_IsEnabledBkUpAccess>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d113      	bne.n	800365a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003632:	f7ff fb0d 	bl	8002c50 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7fe ffaf 	bl	8002598 <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363e:	f7fe ffab 	bl	8002598 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e162      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003650:	f7ff fb30 	bl	8002cb4 <LL_PWR_IsEnabledBkUpAccess>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f1      	beq.n	800363e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d07b      	beq.n	800375a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b85      	cmp	r3, #133	; 0x85
 8003668:	d003      	beq.n	8003672 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d109      	bne.n	8003686 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fe ff87 	bl	8002598 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe ff79 	bl	8002598 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e12e      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80036b8:	f7ff fba9 	bl	8002e0e <LL_RCC_LSE_IsReady>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ef      	beq.n	80036a2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b81      	cmp	r3, #129	; 0x81
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b85      	cmp	r3, #133	; 0x85
 80036d0:	d121      	bne.n	8003716 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe ff61 	bl	8002598 <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fe ff53 	bl	8002598 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e108      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ec      	beq.n	80036ee <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003714:	e060      	b.n	80037d8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe ff3f 	bl	8002598 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe ff31 	bl	8002598 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0e6      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ec      	bne.n	8003732 <HAL_RCC_OscConfig+0x50e>
 8003758:	e03e      	b.n	80037d8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375a:	f7fe ff1d 	bl	8002598 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fe ff0f 	bl	8002598 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	; 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0c4      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ec      	bne.n	8003776 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7fe fefc 	bl	8002598 <HAL_GetTick>
 80037a0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe feee 	bl	8002598 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0a3      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037ce:	f7ff fb1e 	bl	8002e0e <LL_RCC_LSE_IsReady>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8099 	beq.w	8003914 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d06c      	beq.n	80038c2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d14b      	bne.n	8003888 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f0:	f7ff fc74 	bl	80030dc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe fed0 	bl	8002598 <HAL_GetTick>
 80037f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fecc 	bl	8002598 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b0a      	cmp	r3, #10
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e083      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800380e:	f7ff fc73 	bl	80030f8 <LL_RCC_PLL_IsReady>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f1      	bne.n	80037fc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x6fc>)
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382a:	4311      	orrs	r1, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003830:	0212      	lsls	r2, r2, #8
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003844:	430a      	orrs	r2, r1
 8003846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800384a:	4313      	orrs	r3, r2
 800384c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384e:	f7ff fc37 	bl	80030c0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003860:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fe99 	bl	8002598 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386a:	f7fe fe95 	bl	8002598 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b0a      	cmp	r3, #10
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e04c      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800387c:	f7ff fc3c 	bl	80030f8 <LL_RCC_PLL_IsReady>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f1      	beq.n	800386a <HAL_RCC_OscConfig+0x646>
 8003886:	e045      	b.n	8003914 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	f7ff fc28 	bl	80030dc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe fe84 	bl	8002598 <HAL_GetTick>
 8003890:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fe80 	bl	8002598 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b0a      	cmp	r3, #10
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e037      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80038a6:	f7ff fc27 	bl	80030f8 <LL_RCC_PLL_IsReady>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f1      	bne.n	8003894 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <HAL_RCC_OscConfig+0x700>)
 80038bc:	4013      	ands	r3, r2
 80038be:	60cb      	str	r3, [r1, #12]
 80038c0:	e028      	b.n	8003914 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0203 	and.w	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d115      	bne.n	8003910 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d10e      	bne.n	8003910 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	429a      	cmp	r2, r3
 8003900:	d106      	bne.n	8003910 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	11c1808c 	.word	0x11c1808c
 8003924:	eefefffc 	.word	0xeefefffc

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e12c      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b98      	ldr	r3, [pc, #608]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d91b      	bls.n	8003982 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b95      	ldr	r3, [pc, #596]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4993      	ldr	r1, [pc, #588]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800395a:	f7fe fe1d 	bl	8002598 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003960:	e008      	b.n	8003974 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003962:	f7fe fe19 	bl	8002598 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e110      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003974:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d1ef      	bne.n	8003962 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fb02 	bl	8002f9c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003998:	f7fe fdfe 	bl	8002598 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039a0:	f7fe fdfa 	bl	8002598 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e0f1      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039b2:	f7ff fbdf 	bl	8003174 <LL_RCC_IsActiveFlag_HPRE>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f1      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d016      	beq.n	80039f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff faf8 	bl	8002fc2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039d2:	f7fe fde1 	bl	8002598 <HAL_GetTick>
 80039d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039da:	f7fe fddd 	bl	8002598 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0d4      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039ec:	f7ff fbd3 	bl	8003196 <LL_RCC_IsActiveFlag_C2HPRE>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f1      	beq.n	80039da <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff faf0 	bl	8002fec <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe fdc4 	bl	8002598 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a14:	f7fe fdc0 	bl	8002598 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0b7      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a26:	f7ff fbc8 	bl	80031ba <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f1      	beq.n	8003a14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fae9 	bl	8003018 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a46:	f7fe fda7 	bl	8002598 <HAL_GetTick>
 8003a4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a4e:	f7fe fda3 	bl	8002598 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e09a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a60:	f7ff fbbd 	bl	80031de <LL_RCC_IsActiveFlag_PPRE1>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f1      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d017      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fade 	bl	800303e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a82:	f7fe fd89 	bl	8002598 <HAL_GetTick>
 8003a86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a8a:	f7fe fd85 	bl	8002598 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e07c      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a9c:	f7ff fbb0 	bl	8003200 <LL_RCC_IsActiveFlag_PPRE2>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f1      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d043      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003aba:	f7ff f956 	bl	8002d6a <LL_RCC_HSE_IsReady>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d11e      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e066      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d106      	bne.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ad0:	f7ff fb12 	bl	80030f8 <LL_RCC_PLL_IsReady>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d113      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e05b      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003ae6:	f7ff f9f0 	bl	8002eca <LL_RCC_MSI_IsReady>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e050      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003af4:	f7ff f966 	bl	8002dc4 <LL_RCC_HSI_IsReady>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e049      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fa2a 	bl	8002f60 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fd44 	bl	8002598 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fd40 	bl	8002598 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e035      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	f7ff fa2c 	bl	8002f86 <LL_RCC_GetSysClkSource>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d1ec      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3a:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d21b      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b48:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 0207 	bic.w	r2, r3, #7
 8003b50:	4913      	ldr	r1, [pc, #76]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b58:	f7fe fd1e 	bl	8002598 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b60:	f7fe fd1a 	bl	8002598 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e011      	b.n	8003b96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x278>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1ef      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b80:	f000 f8b4 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <HAL_RCC_ClockConfig+0x27c>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <HAL_RCC_ClockConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fcb6 	bl	8002500 <HAL_InitTick>
 8003b94:	4603      	mov	r3, r0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	58004000 	.word	0x58004000
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	2000000c 	.word	0x2000000c

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bba:	f7ff f9e4 	bl	8002f86 <LL_RCC_GetSysClkSource>
 8003bbe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc0:	f7ff facd 	bl	800315e <LL_RCC_PLL_GetMainSource>
 8003bc4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x2c>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d139      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d136      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003bd8:	f7ff f987 	bl	8002eea <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d115      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x62>
 8003be2:	f7ff f982 	bl	8002eea <LL_RCC_MSI_IsEnabledRangeSelect>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_GetSysClockFreq+0x4e>
 8003bec:	f7ff f98d 	bl	8002f0a <LL_RCC_MSI_GetRange>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	e005      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x5a>
 8003bfa:	f7ff f991 	bl	8002f20 <LL_RCC_MSI_GetRangeAfterStandby>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	4a36      	ldr	r2, [pc, #216]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x8c>
 8003c0e:	f7ff f96c 	bl	8002eea <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0x7a>
 8003c18:	f7ff f977 	bl	8002f0a <LL_RCC_MSI_GetRange>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	e005      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x86>
 8003c26:	f7ff f97b 	bl	8002f20 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d115      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c44:	e012      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c4c:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e00c      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d109      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c58:	f7ff f85a 	bl	8002d10 <LL_RCC_HSE_IsEnabledDiv2>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e001      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c6a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c6c:	f7ff f98b 	bl	8002f86 <LL_RCC_GetSysClkSource>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d12f      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c76:	f7ff fa72 	bl	800315e <LL_RCC_PLL_GetMainSource>
 8003c7a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0xde>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d003      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0xe4>
 8003c88:	e00d      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003c8a:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c8c:	60fb      	str	r3, [r7, #12]
        break;
 8003c8e:	e00d      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c90:	f7ff f83e 	bl	8002d10 <LL_RCC_HSE_IsEnabledDiv2>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c9c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003c9e:	e005      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ca2:	60fb      	str	r3, [r7, #12]
        break;
 8003ca4:	e002      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	60fb      	str	r3, [r7, #12]
        break;
 8003caa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cac:	f7ff fa35 	bl	800311a <LL_RCC_PLL_GetN>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	fb03 f402 	mul.w	r4, r3, r2
 8003cb8:	f7ff fa46 	bl	8003148 <LL_RCC_PLL_GetDivider>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cc6:	f7ff fa34 	bl	8003132 <LL_RCC_PLL_GetR>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	0f5b      	lsrs	r3, r3, #29
 8003cce:	3301      	adds	r3, #1
 8003cd0:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cd4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003cd6:	697b      	ldr	r3, [r7, #20]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd90      	pop	{r4, r7, pc}
 8003ce0:	0800716c 	.word	0x0800716c
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	01e84800 	.word	0x01e84800

08003cec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b598      	push	{r3, r4, r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003cf0:	f7ff ff5c 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	f7ff f9b5 	bl	8003064 <LL_RCC_GetAHBPrescaler>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd98      	pop	{r3, r4, r7, pc}
 8003d10:	0800710c 	.word	0x0800710c

08003d14 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d14:	b598      	push	{r3, r4, r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d18:	f7ff ffe8 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	f7ff f9b9 	bl	8003094 <LL_RCC_GetAPB1Prescaler>
 8003d22:	4603      	mov	r3, r0
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	4a03      	ldr	r2, [pc, #12]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd98      	pop	{r3, r4, r7, pc}
 8003d34:	0800714c 	.word	0x0800714c

08003d38 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b598      	push	{r3, r4, r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d3c:	f7ff ffd6 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d40:	4604      	mov	r4, r0
 8003d42:	f7ff f9b2 	bl	80030aa <LL_RCC_GetAPB2Prescaler>
 8003d46:	4603      	mov	r3, r0
 8003d48:	0adb      	lsrs	r3, r3, #11
 8003d4a:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd98      	pop	{r3, r4, r7, pc}
 8003d58:	0800714c 	.word	0x0800714c

08003d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d72:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003d74:	f7ff f981 	bl	800307a <LL_RCC_GetAHB3Prescaler>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	0c9c      	lsrs	r4, r3, #18
 8003d98:	f7fe ff76 	bl	8002c88 <HAL_PWREx_GetVoltageRange>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 f80b 	bl	8003dbc <RCC_SetFlashLatency>
 8003da6:	4603      	mov	r3, r0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}
 8003db0:	0800716c 	.word	0x0800716c
 8003db4:	0800710c 	.word	0x0800710c
 8003db8:	431bde83 	.word	0x431bde83

08003dbc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08e      	sub	sp, #56	; 0x38
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003dc6:	4a3a      	ldr	r2, [pc, #232]	; (8003eb0 <RCC_SetFlashLatency+0xf4>)
 8003dc8:	f107 0320 	add.w	r3, r7, #32
 8003dcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dd0:	6018      	str	r0, [r3, #0]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003dd6:	4a37      	ldr	r2, [pc, #220]	; (8003eb4 <RCC_SetFlashLatency+0xf8>)
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003de0:	6018      	str	r0, [r3, #0]
 8003de2:	3304      	adds	r3, #4
 8003de4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003de6:	4a34      	ldr	r2, [pc, #208]	; (8003eb8 <RCC_SetFlashLatency+0xfc>)
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003df2:	2300      	movs	r3, #0
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfc:	d11b      	bne.n	8003e36 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
 8003e02:	e014      	b.n	8003e2e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	3338      	adds	r3, #56	; 0x38
 8003e0a:	443b      	add	r3, r7
 8003e0c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d807      	bhi.n	8003e28 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	3338      	adds	r3, #56	; 0x38
 8003e1e:	443b      	add	r3, r7
 8003e20:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e26:	e021      	b.n	8003e6c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d9e7      	bls.n	8003e04 <RCC_SetFlashLatency+0x48>
 8003e34:	e01a      	b.n	8003e6c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3a:	e014      	b.n	8003e66 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	3338      	adds	r3, #56	; 0x38
 8003e42:	443b      	add	r3, r7
 8003e44:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d807      	bhi.n	8003e60 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	3338      	adds	r3, #56	; 0x38
 8003e56:	443b      	add	r3, r7
 8003e58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e5e:	e005      	b.n	8003e6c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	3301      	adds	r3, #1
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d9e7      	bls.n	8003e3c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <RCC_SetFlashLatency+0x100>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 0207 	bic.w	r2, r3, #7
 8003e74:	4911      	ldr	r1, [pc, #68]	; (8003ebc <RCC_SetFlashLatency+0x100>)
 8003e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e7c:	f7fe fb8c 	bl	8002598 <HAL_GetTick>
 8003e80:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e82:	e008      	b.n	8003e96 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e84:	f7fe fb88 	bl	8002598 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e007      	b.n	8003ea6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <RCC_SetFlashLatency+0x100>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1ef      	bne.n	8003e84 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3738      	adds	r7, #56	; 0x38
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	080070f0 	.word	0x080070f0
 8003eb4:	080070f8 	.word	0x080070f8
 8003eb8:	08007100 	.word	0x08007100
 8003ebc:	58004000 	.word	0x58004000

08003ec0 <LL_RCC_LSE_IsReady>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d101      	bne.n	8003ed8 <LL_RCC_LSE_IsReady+0x18>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <LL_RCC_LSE_IsReady+0x1a>
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_SetUSARTClockSource>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	401a      	ands	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <LL_RCC_SetI2SClockSource>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <LL_RCC_SetLPUARTClockSource>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_SetI2CClockSource>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	401a      	ands	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_SetLPTIMClockSource>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <LL_RCC_SetRNGClockSource>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_SetADCClockSource>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800400e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <LL_RCC_SetRTCClockSource>:
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <LL_RCC_GetRTCClockSource>:
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <LL_RCC_ForceBackupDomainReset>:
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800409e:	bf00      	nop
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80040b4:	2300      	movs	r3, #0
 80040b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040b8:	2300      	movs	r3, #0
 80040ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d058      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80040c8:	f7fe fdc2 	bl	8002c50 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040cc:	f7fe fa64 	bl	8002598 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80040d2:	e009      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d4:	f7fe fa60 	bl	8002598 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d902      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	74fb      	strb	r3, [r7, #19]
        break;
 80040e6:	e006      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80040e8:	4b7b      	ldr	r3, [pc, #492]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f4:	d1ee      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d13c      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80040fc:	f7ff ffa7 	bl	800404e <LL_RCC_GetRTCClockSource>
 8004100:	4602      	mov	r2, r0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	429a      	cmp	r2, r3
 8004108:	d00f      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004116:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004118:	f7ff ffa5 	bl	8004066 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800411c:	f7ff ffb3 	bl	8004086 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d014      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe fa30 	bl	8002598 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800413a:	e00b      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe fa2c 	bl	8002598 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d902      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	74fb      	strb	r3, [r7, #19]
            break;
 8004152:	e004      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004154:	f7ff feb4 	bl	8003ec0 <LL_RCC_LSE_IsReady>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d1ee      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff5b 	bl	8004024 <LL_RCC_SetRTCClockSource>
 800416e:	e004      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
 8004174:	e001      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fea9 	bl	8003ee2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fe9e 	bl	8003ee2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fec0 	bl	8003f3c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fee6 	bl	8003f9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fedb 	bl	8003f9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d004      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fed0 	bl	8003f9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fea9 	bl	8003f66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fe9e 	bl	8003f66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fe93 	bl	8003f66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d011      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fe5e 	bl	8003f12 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425e:	d107      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800426e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fea5 	bl	8003fd0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	2b00      	cmp	r3, #0
 800428c:	d107      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d011      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fea3 	bl	8003ffa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042bc:	d107      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80042ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	58000400 	.word	0x58000400

080042dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d071      	beq.n	80043d2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd ff4e 	bl	80021a4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004310:	4b32      	ldr	r3, [pc, #200]	; (80043dc <HAL_RTC_Init+0x100>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b10      	cmp	r3, #16
 800431a:	d051      	beq.n	80043c0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800431c:	4b2f      	ldr	r3, [pc, #188]	; (80043dc <HAL_RTC_Init+0x100>)
 800431e:	22ca      	movs	r2, #202	; 0xca
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
 8004322:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_RTC_Init+0x100>)
 8004324:	2253      	movs	r2, #83	; 0x53
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fbe3 	bl	8004af4 <RTC_EnterInitMode>
 800432e:	4603      	mov	r3, r0
 8004330:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d13f      	bne.n	80043b8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <HAL_RTC_Init+0x100>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <HAL_RTC_Init+0x100>)
 800433e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004348:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_RTC_Init+0x100>)
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	4319      	orrs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	430b      	orrs	r3, r1
 800435c:	491f      	ldr	r1, [pc, #124]	; (80043dc <HAL_RTC_Init+0x100>)
 800435e:	4313      	orrs	r3, r2
 8004360:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	491b      	ldr	r1, [pc, #108]	; (80043dc <HAL_RTC_Init+0x100>)
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_RTC_Init+0x100>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	430b      	orrs	r3, r1
 8004384:	4915      	ldr	r1, [pc, #84]	; (80043dc <HAL_RTC_Init+0x100>)
 8004386:	4313      	orrs	r3, r2
 8004388:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fbe6 	bl	8004b5c <RTC_ExitInitMode>
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10e      	bne.n	80043b8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_RTC_Init+0x100>)
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a19      	ldr	r1, [r3, #32]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	4319      	orrs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	490a      	ldr	r1, [pc, #40]	; (80043dc <HAL_RTC_Init+0x100>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_RTC_Init+0x100>)
 80043ba:	22ff      	movs	r2, #255	; 0xff
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
 80043be:	e001      	b.n	80043c4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40002800 	.word	0x40002800

080043e0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_RTC_SetTime+0x1a>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e088      	b.n	800450c <HAL_RTC_SetTime+0x12c>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800440a:	4b42      	ldr	r3, [pc, #264]	; (8004514 <HAL_RTC_SetTime+0x134>)
 800440c:	22ca      	movs	r2, #202	; 0xca
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
 8004410:	4b40      	ldr	r3, [pc, #256]	; (8004514 <HAL_RTC_SetTime+0x134>)
 8004412:	2253      	movs	r2, #83	; 0x53
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fb6c 	bl	8004af4 <RTC_EnterInitMode>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d15e      	bne.n	80044e4 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004426:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <HAL_RTC_SetTime+0x134>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004432:	d057      	beq.n	80044e4 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d125      	bne.n	8004486 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RTC_SetTime+0x134>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fbc1 	bl	8004bd8 <RTC_ByteToBcd2>
 8004456:	4603      	mov	r3, r0
 8004458:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fbba 	bl	8004bd8 <RTC_ByteToBcd2>
 8004464:	4603      	mov	r3, r0
 8004466:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004468:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	789b      	ldrb	r3, [r3, #2]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fbb2 	bl	8004bd8 <RTC_ByteToBcd2>
 8004474:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004476:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e017      	b.n	80044b6 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <HAL_RTC_SetTime+0x134>)
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044a4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044aa:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	78db      	ldrb	r3, [r3, #3]
 80044b0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_RTC_SetTime+0x134>)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044c2:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80044c4:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_RTC_SetTime+0x134>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	4a12      	ldr	r2, [pc, #72]	; (8004514 <HAL_RTC_SetTime+0x134>)
 80044ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ce:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <HAL_RTC_SetTime+0x134>)
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68d9      	ldr	r1, [r3, #12]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	430b      	orrs	r3, r1
 80044de:	490d      	ldr	r1, [pc, #52]	; (8004514 <HAL_RTC_SetTime+0x134>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fb39 	bl	8004b5c <RTC_ExitInitMode>
 80044ea:	4603      	mov	r3, r0
 80044ec:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RTC_SetTime+0x134>)
 80044f0:	22ff      	movs	r2, #255	; 0xff
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800450a:	7cfb      	ldrb	r3, [r7, #19]
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd90      	pop	{r4, r7, pc}
 8004514:	40002800 	.word	0x40002800

08004518 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8004524:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <HAL_RTC_GetTime+0xc0>)
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800452c:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_RTC_GetTime+0xc0>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004538:	d049      	beq.n	80045ce <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_RTC_GetTime+0xc0>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RTC_GetTime+0xc0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800454e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004552:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456e:	b2da      	uxtb	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	0d9b      	lsrs	r3, r3, #22
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11a      	bne.n	80045ce <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fb3a 	bl	8004c16 <RTC_Bcd2ToByte>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fb31 	bl	8004c16 <RTC_Bcd2ToByte>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	789b      	ldrb	r3, [r3, #2]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fb28 	bl	8004c16 <RTC_Bcd2ToByte>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40002800 	.word	0x40002800

080045dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_RTC_SetDate+0x1a>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e071      	b.n	80046da <HAL_RTC_SetDate+0xfe>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10e      	bne.n	800462a <HAL_RTC_SetDate+0x4e>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	f023 0310 	bic.w	r3, r3, #16
 8004620:	b2db      	uxtb	r3, r3
 8004622:	330a      	adds	r3, #10
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11c      	bne.n	800466a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	78db      	ldrb	r3, [r3, #3]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 facf 	bl	8004bd8 <RTC_ByteToBcd2>
 800463a:	4603      	mov	r3, r0
 800463c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fac8 	bl	8004bd8 <RTC_ByteToBcd2>
 8004648:	4603      	mov	r3, r0
 800464a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800464c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	789b      	ldrb	r3, [r3, #2]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fac0 	bl	8004bd8 <RTC_ByteToBcd2>
 8004658:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800465a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e00e      	b.n	8004688 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	78db      	ldrb	r3, [r3, #3]
 800466e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004676:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800467c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004688:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <HAL_RTC_SetDate+0x108>)
 800468a:	22ca      	movs	r2, #202	; 0xca
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_RTC_SetDate+0x108>)
 8004690:	2253      	movs	r2, #83	; 0x53
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fa2d 	bl	8004af4 <RTC_EnterInitMode>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80046a4:	4a0f      	ldr	r2, [pc, #60]	; (80046e4 <HAL_RTC_SetDate+0x108>)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fa52 	bl	8004b5c <RTC_ExitInitMode>
 80046b8:	4603      	mov	r3, r0
 80046ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RTC_SetDate+0x108>)
 80046be:	22ff      	movs	r2, #255	; 0xff
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40002800 	.word	0x40002800

080046e8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80046f4:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RTC_GetDate+0x98>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004700:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	b2da      	uxtb	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	0b5b      	lsrs	r3, r3, #13
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11a      	bne.n	8004776 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fa66 	bl	8004c16 <RTC_Bcd2ToByte>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fa5d 	bl	8004c16 <RTC_Bcd2ToByte>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	789b      	ldrb	r3, [r3, #2]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fa54 	bl	8004c16 <RTC_Bcd2ToByte>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40002800 	.word	0x40002800

08004784 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_RTC_SetAlarm_IT+0x1e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e0f3      	b.n	800498a <HAL_RTC_SetAlarm_IT+0x206>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80047b2:	4b78      	ldr	r3, [pc, #480]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c2:	d06a      	beq.n	800489a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d13a      	bne.n	8004840 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80047ca:	4b72      	ldr	r3, [pc, #456]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f9f5 	bl	8004bd8 <RTC_ByteToBcd2>
 80047ee:	4603      	mov	r3, r0
 80047f0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f9ee 	bl	8004bd8 <RTC_ByteToBcd2>
 80047fc:	4603      	mov	r3, r0
 80047fe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004800:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	789b      	ldrb	r3, [r3, #2]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f9e6 	bl	8004bd8 <RTC_ByteToBcd2>
 800480c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800480e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	78db      	ldrb	r3, [r3, #3]
 8004816:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004818:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f9d8 	bl	8004bd8 <RTC_ByteToBcd2>
 8004828:	4603      	mov	r3, r0
 800482a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800482c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004834:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e02c      	b.n	800489a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004848:	d00d      	beq.n	8004866 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004852:	d008      	beq.n	8004866 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004854:	4b4f      	ldr	r3, [pc, #316]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2200      	movs	r2, #0
 8004864:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004872:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004878:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	78db      	ldrb	r3, [r3, #3]
 800487e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004880:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004888:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800488a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004890:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800489a:	4b3e      	ldr	r3, [pc, #248]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 800489c:	22ca      	movs	r2, #202	; 0xca
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
 80048a0:	4b3c      	ldr	r3, [pc, #240]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048a2:	2253      	movs	r2, #83	; 0x53
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ae:	d12c      	bne.n	800490a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80048b0:	4b38      	ldr	r3, [pc, #224]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	4a37      	ldr	r2, [pc, #220]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048ba:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80048bc:	4b35      	ldr	r3, [pc, #212]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048be:	2201      	movs	r2, #1
 80048c0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c8:	d107      	bne.n	80048da <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	4930      	ldr	r1, [pc, #192]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	644b      	str	r3, [r1, #68]	; 0x44
 80048d8:	e006      	b.n	80048e8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80048da:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80048e8:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f043 0201 	orr.w	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	4a24      	ldr	r2, [pc, #144]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004902:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004906:	6193      	str	r3, [r2, #24]
 8004908:	e02b      	b.n	8004962 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004910:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004914:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004916:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004918:	2202      	movs	r2, #2
 800491a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004922:	d107      	bne.n	8004934 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	4919      	ldr	r1, [pc, #100]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 800492e:	4313      	orrs	r3, r2
 8004930:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004932:	e006      	b.n	8004942 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800493a:	4a16      	ldr	r2, [pc, #88]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004942:	4a14      	ldr	r2, [pc, #80]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f043 0202 	orr.w	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 800495c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004960:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RTC_SetAlarm_IT+0x214>)
 8004964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <HAL_RTC_SetAlarm_IT+0x214>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_RTC_SetAlarm_IT+0x210>)
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd90      	pop	{r4, r7, pc}
 8004992:	bf00      	nop
 8004994:	40002800 	.word	0x40002800
 8004998:	58000800 	.word	0x58000800

0800499c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_RTC_DeactivateAlarm+0x18>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e048      	b.n	8004a46 <HAL_RTC_DeactivateAlarm+0xaa>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049c4:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049c6:	22ca      	movs	r2, #202	; 0xca
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
 80049ca:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049cc:	2253      	movs	r2, #83	; 0x53
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d115      	bne.n	8004a04 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049e2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049ee:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	f023 0201 	bic.w	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a02:	e014      	b.n	8004a2e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a0a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004a0e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a14:	4a0e      	ldr	r2, [pc, #56]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a1a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	f023 0202 	bic.w	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a30:	22ff      	movs	r2, #255	; 0xff
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr
 8004a50:	40002800 	.word	0x40002800

08004a54 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fc fef2 	bl	8001862 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8dc 	bl	8004c4c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40002800 	.word	0x40002800

08004aa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <HAL_RTC_WaitForSynchro+0x48>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <HAL_RTC_WaitForSynchro+0x48>)
 8004ab6:	f023 0320 	bic.w	r3, r3, #32
 8004aba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004abc:	f7fd fd6c 	bl	8002598 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004ac2:	e009      	b.n	8004ad8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ac4:	f7fd fd68 	bl	8002598 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e006      	b.n	8004ae6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RTC_WaitForSynchro+0x48>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ef      	beq.n	8004ac4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40002800 	.word	0x40002800

08004af4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <RTC_EnterInitMode+0x64>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d120      	bne.n	8004b4e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <RTC_EnterInitMode+0x64>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <RTC_EnterInitMode+0x64>)
 8004b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b16:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004b18:	f7fd fd3e 	bl	8002598 <HAL_GetTick>
 8004b1c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b1e:	e00d      	b.n	8004b3c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b20:	f7fd fd3a 	bl	8002598 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b2e:	d905      	bls.n	8004b3c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2203      	movs	r2, #3
 8004b38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <RTC_EnterInitMode+0x64>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <RTC_EnterInitMode+0x5a>
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d1e8      	bne.n	8004b20 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40002800 	.word	0x40002800

08004b5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <RTC_ExitInitMode+0x78>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <RTC_ExitInitMode+0x78>)
 8004b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b72:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <RTC_ExitInitMode+0x78>)
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10c      	bne.n	8004b9a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff91 	bl	8004aa8 <HAL_RTC_WaitForSynchro>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01e      	beq.n	8004bca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e017      	b.n	8004bca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <RTC_ExitInitMode+0x78>)
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <RTC_ExitInitMode+0x78>)
 8004ba0:	f023 0320 	bic.w	r3, r3, #32
 8004ba4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff7e 	bl	8004aa8 <HAL_RTC_WaitForSynchro>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <RTC_ExitInitMode+0x78>)
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <RTC_ExitInitMode+0x78>)
 8004bc4:	f043 0320 	orr.w	r3, r3, #32
 8004bc8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40002800 	.word	0x40002800

08004bd8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004bea:	e005      	b.n	8004bf8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004bf2:	7afb      	ldrb	r3, [r7, #11]
 8004bf4:	3b0a      	subs	r3, #10
 8004bf6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	2b09      	cmp	r3, #9
 8004bfc:	d8f6      	bhi.n	8004bec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	7afb      	ldrb	r3, [r7, #11]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	b2db      	uxtb	r3, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	b2db      	uxtb	r3, r3
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <LL_RCC_GetUSARTClockSource>:
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	401a      	ands	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	4313      	orrs	r3, r2
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <LL_RCC_GetLPUARTClockSource>:
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4013      	ands	r3, r2
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e042      	b.n	8004d38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fd fa99 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2224      	movs	r2, #36	; 0x24
 8004cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f976 	bl	8004fd4 <UART_SetConfig>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e022      	b.n	8004d38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fbde 	bl	80054bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fc64 	bl	80055fe <UART_CheckIdleState>
 8004d36:	4603      	mov	r3, r0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d173      	bne.n	8004e42 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_UART_Transmit+0x26>
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e06c      	b.n	8004e44 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2221      	movs	r2, #33	; 0x21
 8004d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d7a:	f7fd fc0d 	bl	8002598 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d98:	d108      	bne.n	8004dac <HAL_UART_Transmit+0x6c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e003      	b.n	8004db4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004db4:	e02c      	b.n	8004e10 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fc6a 	bl	800569a <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e039      	b.n	8004e44 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3302      	adds	r3, #2
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	e007      	b.n	8004dfe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1cc      	bne.n	8004db6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fc37 	bl	800569a <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e006      	b.n	8004e44 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	f040 80b1 	bne.w	8004fca <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_UART_Receive+0x28>
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0a9      	b.n	8004fcc <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2222      	movs	r2, #34	; 0x22
 8004e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8e:	f7fd fb83 	bl	8002598 <HAL_GetTick>
 8004e92:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eac:	d10e      	bne.n	8004ecc <HAL_UART_Receive+0x80>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_Receive+0x76>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ec0:	e02d      	b.n	8004f1e <HAL_UART_Receive+0xd2>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	22ff      	movs	r2, #255	; 0xff
 8004ec6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004eca:	e028      	b.n	8004f1e <HAL_UART_Receive+0xd2>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_UART_Receive+0xa4>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <HAL_UART_Receive+0x9a>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	22ff      	movs	r2, #255	; 0xff
 8004ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ee4:	e01b      	b.n	8004f1e <HAL_UART_Receive+0xd2>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	227f      	movs	r2, #127	; 0x7f
 8004eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004eee:	e016      	b.n	8004f1e <HAL_UART_Receive+0xd2>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef8:	d10d      	bne.n	8004f16 <HAL_UART_Receive+0xca>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <HAL_UART_Receive+0xc0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	227f      	movs	r2, #127	; 0x7f
 8004f06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f0a:	e008      	b.n	8004f1e <HAL_UART_Receive+0xd2>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	223f      	movs	r2, #63	; 0x3f
 8004f10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f14:	e003      	b.n	8004f1e <HAL_UART_Receive+0xd2>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f24:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d108      	bne.n	8004f42 <HAL_UART_Receive+0xf6>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e003      	b.n	8004f4a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f4a:	e032      	b.n	8004fb2 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2120      	movs	r1, #32
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fb9f 	bl	800569a <UART_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e032      	b.n	8004fcc <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10c      	bne.n	8004f86 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	8a7b      	ldrh	r3, [r7, #18]
 8004f76:	4013      	ands	r3, r2
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	3302      	adds	r3, #2
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	e00c      	b.n	8004fa0 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	8a7b      	ldrh	r3, [r7, #18]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	4013      	ands	r3, r2
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1c6      	bne.n	8004f4c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd8:	b08c      	sub	sp, #48	; 0x30
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b94      	ldr	r3, [pc, #592]	; (8005254 <UART_SetConfig+0x280>)
 8005004:	4013      	ands	r3, r2
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500c:	430b      	orrs	r3, r1
 800500e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a89      	ldr	r2, [pc, #548]	; (8005258 <UART_SetConfig+0x284>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503c:	4313      	orrs	r3, r2
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800504a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005054:	430b      	orrs	r3, r1
 8005056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f023 010f 	bic.w	r1, r3, #15
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a7a      	ldr	r2, [pc, #488]	; (800525c <UART_SetConfig+0x288>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d127      	bne.n	80050c8 <UART_SetConfig+0xf4>
 8005078:	2003      	movs	r0, #3
 800507a:	f7ff fdf0 	bl	8004c5e <LL_RCC_GetUSARTClockSource>
 800507e:	4603      	mov	r3, r0
 8005080:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005084:	2b03      	cmp	r3, #3
 8005086:	d81b      	bhi.n	80050c0 <UART_SetConfig+0xec>
 8005088:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0xbc>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050b1 	.word	0x080050b1
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a6:	e080      	b.n	80051aa <UART_SetConfig+0x1d6>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ae:	e07c      	b.n	80051aa <UART_SetConfig+0x1d6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b6:	e078      	b.n	80051aa <UART_SetConfig+0x1d6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050be:	e074      	b.n	80051aa <UART_SetConfig+0x1d6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e070      	b.n	80051aa <UART_SetConfig+0x1d6>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a64      	ldr	r2, [pc, #400]	; (8005260 <UART_SetConfig+0x28c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d138      	bne.n	8005144 <UART_SetConfig+0x170>
 80050d2:	200c      	movs	r0, #12
 80050d4:	f7ff fdc3 	bl	8004c5e <LL_RCC_GetUSARTClockSource>
 80050d8:	4603      	mov	r3, r0
 80050da:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80050de:	2b0c      	cmp	r3, #12
 80050e0:	d82c      	bhi.n	800513c <UART_SetConfig+0x168>
 80050e2:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <UART_SetConfig+0x114>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	0800511d 	.word	0x0800511d
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	0800513d 	.word	0x0800513d
 80050f4:	0800513d 	.word	0x0800513d
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	0800513d 	.word	0x0800513d
 8005100:	0800513d 	.word	0x0800513d
 8005104:	0800513d 	.word	0x0800513d
 8005108:	08005125 	.word	0x08005125
 800510c:	0800513d 	.word	0x0800513d
 8005110:	0800513d 	.word	0x0800513d
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005135 	.word	0x08005135
 800511c:	2300      	movs	r3, #0
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005122:	e042      	b.n	80051aa <UART_SetConfig+0x1d6>
 8005124:	2302      	movs	r3, #2
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512a:	e03e      	b.n	80051aa <UART_SetConfig+0x1d6>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005132:	e03a      	b.n	80051aa <UART_SetConfig+0x1d6>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513a:	e036      	b.n	80051aa <UART_SetConfig+0x1d6>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005142:	e032      	b.n	80051aa <UART_SetConfig+0x1d6>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a43      	ldr	r2, [pc, #268]	; (8005258 <UART_SetConfig+0x284>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d12a      	bne.n	80051a4 <UART_SetConfig+0x1d0>
 800514e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005152:	f7ff fd96 	bl	8004c82 <LL_RCC_GetLPUARTClockSource>
 8005156:	4603      	mov	r3, r0
 8005158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800515c:	d01a      	beq.n	8005194 <UART_SetConfig+0x1c0>
 800515e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005162:	d81b      	bhi.n	800519c <UART_SetConfig+0x1c8>
 8005164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005168:	d00c      	beq.n	8005184 <UART_SetConfig+0x1b0>
 800516a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516e:	d815      	bhi.n	800519c <UART_SetConfig+0x1c8>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <UART_SetConfig+0x1a8>
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005178:	d008      	beq.n	800518c <UART_SetConfig+0x1b8>
 800517a:	e00f      	b.n	800519c <UART_SetConfig+0x1c8>
 800517c:	2300      	movs	r3, #0
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005182:	e012      	b.n	80051aa <UART_SetConfig+0x1d6>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518a:	e00e      	b.n	80051aa <UART_SetConfig+0x1d6>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e00a      	b.n	80051aa <UART_SetConfig+0x1d6>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e006      	b.n	80051aa <UART_SetConfig+0x1d6>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e002      	b.n	80051aa <UART_SetConfig+0x1d6>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <UART_SetConfig+0x284>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	f040 80a4 	bne.w	80052fe <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d823      	bhi.n	8005206 <UART_SetConfig+0x232>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0x1f0>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	08005207 	.word	0x08005207
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	08005207 	.word	0x08005207
 80051d4:	080051f7 	.word	0x080051f7
 80051d8:	08005207 	.word	0x08005207
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005207 	.word	0x08005207
 80051e4:	080051ff 	.word	0x080051ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fe fd94 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051ee:	e010      	b.n	8005212 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <UART_SetConfig+0x290>)
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051f4:	e00d      	b.n	8005212 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fe fcd9 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 80051fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051fc:	e009      	b.n	8005212 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005204:	e005      	b.n	8005212 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8137 	beq.w	8005488 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <UART_SetConfig+0x294>)
 8005220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005224:	461a      	mov	r2, r3
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	fbb3 f3f2 	udiv	r3, r3, r2
 800522c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4413      	add	r3, r2
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	429a      	cmp	r2, r3
 800523c:	d305      	bcc.n	800524a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	429a      	cmp	r2, r3
 8005248:	d910      	bls.n	800526c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005250:	e11a      	b.n	8005488 <UART_SetConfig+0x4b4>
 8005252:	bf00      	nop
 8005254:	cfff69f3 	.word	0xcfff69f3
 8005258:	40008000 	.word	0x40008000
 800525c:	40013800 	.word	0x40013800
 8005260:	40004400 	.word	0x40004400
 8005264:	00f42400 	.word	0x00f42400
 8005268:	080071ac 	.word	0x080071ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	2200      	movs	r2, #0
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	60fa      	str	r2, [r7, #12]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	4a8e      	ldr	r2, [pc, #568]	; (80054b4 <UART_SetConfig+0x4e0>)
 800527a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800527e:	b29b      	uxth	r3, r3
 8005280:	2200      	movs	r2, #0
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800528e:	f7fa ffc7 	bl	8000220 <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	020b      	lsls	r3, r1, #8
 80052a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052a8:	0202      	lsls	r2, r0, #8
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	6849      	ldr	r1, [r1, #4]
 80052ae:	0849      	lsrs	r1, r1, #1
 80052b0:	2000      	movs	r0, #0
 80052b2:	460c      	mov	r4, r1
 80052b4:	4605      	mov	r5, r0
 80052b6:	eb12 0804 	adds.w	r8, r2, r4
 80052ba:	eb43 0905 	adc.w	r9, r3, r5
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	469a      	mov	sl, r3
 80052c6:	4693      	mov	fp, r2
 80052c8:	4652      	mov	r2, sl
 80052ca:	465b      	mov	r3, fp
 80052cc:	4640      	mov	r0, r8
 80052ce:	4649      	mov	r1, r9
 80052d0:	f7fa ffa6 	bl	8000220 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e2:	d308      	bcc.n	80052f6 <UART_SetConfig+0x322>
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ea:	d204      	bcs.n	80052f6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	60da      	str	r2, [r3, #12]
 80052f4:	e0c8      	b.n	8005488 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052fc:	e0c4      	b.n	8005488 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005306:	d167      	bne.n	80053d8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800530c:	2b08      	cmp	r3, #8
 800530e:	d828      	bhi.n	8005362 <UART_SetConfig+0x38e>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x344>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005363 	.word	0x08005363
 8005328:	08005353 	.word	0x08005353
 800532c:	08005363 	.word	0x08005363
 8005330:	08005363 	.word	0x08005363
 8005334:	08005363 	.word	0x08005363
 8005338:	0800535b 	.word	0x0800535b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7fe fcea 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005342:	e014      	b.n	800536e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7fe fcf8 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800534a:	e010      	b.n	800536e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4b5a      	ldr	r3, [pc, #360]	; (80054b8 <UART_SetConfig+0x4e4>)
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005350:	e00d      	b.n	800536e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7fe fc2b 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8005356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005358:	e009      	b.n	800536e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005360:	e005      	b.n	800536e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800536c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8089 	beq.w	8005488 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	4a4e      	ldr	r2, [pc, #312]	; (80054b4 <UART_SetConfig+0x4e0>)
 800537c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005380:	461a      	mov	r2, r3
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	fbb3 f3f2 	udiv	r3, r3, r2
 8005388:	005a      	lsls	r2, r3, #1
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	441a      	add	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d916      	bls.n	80053d0 <UART_SetConfig+0x3fc>
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d212      	bcs.n	80053d0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f023 030f 	bic.w	r3, r3, #15
 80053b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	b29a      	uxth	r2, r3
 80053c0:	8bfb      	ldrh	r3, [r7, #30]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	8bfa      	ldrh	r2, [r7, #30]
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e05b      	b.n	8005488 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053d6:	e057      	b.n	8005488 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d828      	bhi.n	8005432 <UART_SetConfig+0x45e>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <UART_SetConfig+0x414>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800540d 	.word	0x0800540d
 80053ec:	08005415 	.word	0x08005415
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	08005433 	.word	0x08005433
 80053f8:	08005423 	.word	0x08005423
 80053fc:	08005433 	.word	0x08005433
 8005400:	08005433 	.word	0x08005433
 8005404:	08005433 	.word	0x08005433
 8005408:	0800542b 	.word	0x0800542b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800540c:	f7fe fc82 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005412:	e014      	b.n	800543e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005414:	f7fe fc90 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800541a:	e010      	b.n	800543e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800541c:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <UART_SetConfig+0x4e4>)
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005420:	e00d      	b.n	800543e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005422:	f7fe fbc3 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005428:	e009      	b.n	800543e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005430:	e005      	b.n	800543e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800543c:	bf00      	nop
    }

    if (pclk != 0U)
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d021      	beq.n	8005488 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <UART_SetConfig+0x4e0>)
 800544a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800544e:	461a      	mov	r2, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	fbb3 f2f2 	udiv	r2, r3, r2
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	441a      	add	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b0f      	cmp	r3, #15
 800546c:	d909      	bls.n	8005482 <UART_SetConfig+0x4ae>
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005474:	d205      	bcs.n	8005482 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	b29a      	uxth	r2, r3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e002      	b.n	8005488 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2201      	movs	r2, #1
 800548c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2201      	movs	r2, #1
 8005494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2200      	movs	r2, #0
 800549c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3730      	adds	r7, #48	; 0x30
 80054ac:	46bd      	mov	sp, r7
 80054ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054b2:	bf00      	nop
 80054b4:	080071ac 	.word	0x080071ac
 80054b8:	00f42400 	.word	0x00f42400

080054bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01a      	beq.n	80055d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ba:	d10a      	bne.n	80055d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]
  }
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr

080055fe <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af02      	add	r7, sp, #8
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800560e:	f7fc ffc3 	bl	8002598 <HAL_GetTick>
 8005612:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d10e      	bne.n	8005640 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005622:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f832 	bl	800569a <UART_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e028      	b.n	8005692 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d10e      	bne.n	800566c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800564e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f81c 	bl	800569a <UART_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e012      	b.n	8005692 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b09c      	sub	sp, #112	; 0x70
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056aa:	e0a9      	b.n	8005800 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b2:	f000 80a5 	beq.w	8005800 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7fc ff6f 	bl	8002598 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d302      	bcc.n	80056cc <UART_WaitOnFlagUntilTimeout+0x32>
 80056c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d140      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056e0:	667b      	str	r3, [r7, #100]	; 0x64
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e6      	bne.n	80056cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	f023 0301 	bic.w	r3, r3, #1
 8005714:	663b      	str	r3, [r7, #96]	; 0x60
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3308      	adds	r3, #8
 800571c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800571e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800572c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e5      	bne.n	80056fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e069      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d051      	beq.n	8005800 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800576a:	d149      	bne.n	8005800 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800578a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800579a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e6      	bne.n	8005776 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	613b      	str	r3, [r7, #16]
   return(result);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057c8:	623a      	str	r2, [r7, #32]
 80057ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69f9      	ldr	r1, [r7, #28]
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e010      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4013      	ands	r3, r2
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	429a      	cmp	r2, r3
 800581c:	f43f af46 	beq.w	80056ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3770      	adds	r7, #112	; 0x70
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_UARTEx_DisableFifoMode+0x16>
 800583c:	2302      	movs	r3, #2
 800583e:	e027      	b.n	8005890 <HAL_UARTEx_DisableFifoMode+0x66>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2224      	movs	r2, #36	; 0x24
 800584c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800586e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e02d      	b.n	800590e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2224      	movs	r2, #36	; 0x24
 80058be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f850 	bl	8005994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800592a:	2302      	movs	r3, #2
 800592c:	e02d      	b.n	800598a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2224      	movs	r2, #36	; 0x24
 800593a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f812 	bl	8005994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d108      	bne.n	80059b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059b4:	e031      	b.n	8005a1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059b6:	2308      	movs	r3, #8
 80059b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059ba:	2308      	movs	r3, #8
 80059bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	0e5b      	lsrs	r3, r3, #25
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	0f5b      	lsrs	r3, r3, #29
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	7b3a      	ldrb	r2, [r7, #12]
 80059e2:	4910      	ldr	r1, [pc, #64]	; (8005a24 <UARTEx_SetNbDataToProcess+0x90>)
 80059e4:	5c8a      	ldrb	r2, [r1, r2]
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059ea:	7b3a      	ldrb	r2, [r7, #12]
 80059ec:	490e      	ldr	r1, [pc, #56]	; (8005a28 <UARTEx_SetNbDataToProcess+0x94>)
 80059ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	7b7a      	ldrb	r2, [r7, #13]
 8005a00:	4908      	ldr	r1, [pc, #32]	; (8005a24 <UARTEx_SetNbDataToProcess+0x90>)
 8005a02:	5c8a      	ldrb	r2, [r1, r2]
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a08:	7b7a      	ldrb	r2, [r7, #13]
 8005a0a:	4907      	ldr	r1, [pc, #28]	; (8005a28 <UARTEx_SetNbDataToProcess+0x94>)
 8005a0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	080071c4 	.word	0x080071c4
 8005a28:	080071cc 	.word	0x080071cc

08005a2c <atoi>:
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	2100      	movs	r1, #0
 8005a30:	f000 b960 	b.w	8005cf4 <strtol>

08005a34 <__errno>:
 8005a34:	4b01      	ldr	r3, [pc, #4]	; (8005a3c <__errno+0x8>)
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000014 	.word	0x20000014

08005a40 <__libc_init_array>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4d0d      	ldr	r5, [pc, #52]	; (8005a78 <__libc_init_array+0x38>)
 8005a44:	4c0d      	ldr	r4, [pc, #52]	; (8005a7c <__libc_init_array+0x3c>)
 8005a46:	1b64      	subs	r4, r4, r5
 8005a48:	10a4      	asrs	r4, r4, #2
 8005a4a:	2600      	movs	r6, #0
 8005a4c:	42a6      	cmp	r6, r4
 8005a4e:	d109      	bne.n	8005a64 <__libc_init_array+0x24>
 8005a50:	4d0b      	ldr	r5, [pc, #44]	; (8005a80 <__libc_init_array+0x40>)
 8005a52:	4c0c      	ldr	r4, [pc, #48]	; (8005a84 <__libc_init_array+0x44>)
 8005a54:	f001 faf8 	bl	8007048 <_init>
 8005a58:	1b64      	subs	r4, r4, r5
 8005a5a:	10a4      	asrs	r4, r4, #2
 8005a5c:	2600      	movs	r6, #0
 8005a5e:	42a6      	cmp	r6, r4
 8005a60:	d105      	bne.n	8005a6e <__libc_init_array+0x2e>
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a68:	4798      	blx	r3
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	e7ee      	b.n	8005a4c <__libc_init_array+0xc>
 8005a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a72:	4798      	blx	r3
 8005a74:	3601      	adds	r6, #1
 8005a76:	e7f2      	b.n	8005a5e <__libc_init_array+0x1e>
 8005a78:	08007424 	.word	0x08007424
 8005a7c:	08007424 	.word	0x08007424
 8005a80:	08007424 	.word	0x08007424
 8005a84:	08007428 	.word	0x08007428

08005a88 <memcpy>:
 8005a88:	440a      	add	r2, r1
 8005a8a:	4291      	cmp	r1, r2
 8005a8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a90:	d100      	bne.n	8005a94 <memcpy+0xc>
 8005a92:	4770      	bx	lr
 8005a94:	b510      	push	{r4, lr}
 8005a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9e:	4291      	cmp	r1, r2
 8005aa0:	d1f9      	bne.n	8005a96 <memcpy+0xe>
 8005aa2:	bd10      	pop	{r4, pc}

08005aa4 <memset>:
 8005aa4:	4402      	add	r2, r0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d100      	bne.n	8005aae <memset+0xa>
 8005aac:	4770      	bx	lr
 8005aae:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab2:	e7f9      	b.n	8005aa8 <memset+0x4>

08005ab4 <sniprintf>:
 8005ab4:	b40c      	push	{r2, r3}
 8005ab6:	b530      	push	{r4, r5, lr}
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <sniprintf+0x64>)
 8005aba:	1e0c      	subs	r4, r1, #0
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	b09d      	sub	sp, #116	; 0x74
 8005ac0:	da08      	bge.n	8005ad4 <sniprintf+0x20>
 8005ac2:	238b      	movs	r3, #139	; 0x8b
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aca:	b01d      	add	sp, #116	; 0x74
 8005acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad0:	b002      	add	sp, #8
 8005ad2:	4770      	bx	lr
 8005ad4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005ad8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005adc:	bf14      	ite	ne
 8005ade:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005ae2:	4623      	moveq	r3, r4
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aec:	9002      	str	r0, [sp, #8]
 8005aee:	9006      	str	r0, [sp, #24]
 8005af0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005af4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005af6:	ab21      	add	r3, sp, #132	; 0x84
 8005af8:	a902      	add	r1, sp, #8
 8005afa:	4628      	mov	r0, r5
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	f000 fa75 	bl	8005fec <_svfiprintf_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	bfbc      	itt	lt
 8005b06:	238b      	movlt	r3, #139	; 0x8b
 8005b08:	602b      	strlt	r3, [r5, #0]
 8005b0a:	2c00      	cmp	r4, #0
 8005b0c:	d0dd      	beq.n	8005aca <sniprintf+0x16>
 8005b0e:	9b02      	ldr	r3, [sp, #8]
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e7d9      	b.n	8005aca <sniprintf+0x16>
 8005b16:	bf00      	nop
 8005b18:	20000014 	.word	0x20000014

08005b1c <strncmp>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	4603      	mov	r3, r0
 8005b20:	b172      	cbz	r2, 8005b40 <strncmp+0x24>
 8005b22:	3901      	subs	r1, #1
 8005b24:	1884      	adds	r4, r0, r2
 8005b26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005b2e:	4290      	cmp	r0, r2
 8005b30:	d101      	bne.n	8005b36 <strncmp+0x1a>
 8005b32:	42a3      	cmp	r3, r4
 8005b34:	d101      	bne.n	8005b3a <strncmp+0x1e>
 8005b36:	1a80      	subs	r0, r0, r2
 8005b38:	bd10      	pop	{r4, pc}
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d1f3      	bne.n	8005b26 <strncmp+0xa>
 8005b3e:	e7fa      	b.n	8005b36 <strncmp+0x1a>
 8005b40:	4610      	mov	r0, r2
 8005b42:	e7f9      	b.n	8005b38 <strncmp+0x1c>

08005b44 <strtok>:
 8005b44:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <strtok+0x5c>)
 8005b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4a:	681f      	ldr	r7, [r3, #0]
 8005b4c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005b4e:	4605      	mov	r5, r0
 8005b50:	460e      	mov	r6, r1
 8005b52:	b9ec      	cbnz	r4, 8005b90 <strtok+0x4c>
 8005b54:	2050      	movs	r0, #80	; 0x50
 8005b56:	f000 f907 	bl	8005d68 <malloc>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	65b8      	str	r0, [r7, #88]	; 0x58
 8005b5e:	b920      	cbnz	r0, 8005b6a <strtok+0x26>
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <strtok+0x60>)
 8005b62:	4811      	ldr	r0, [pc, #68]	; (8005ba8 <strtok+0x64>)
 8005b64:	2157      	movs	r1, #87	; 0x57
 8005b66:	f000 f8cf 	bl	8005d08 <__assert_func>
 8005b6a:	e9c0 4400 	strd	r4, r4, [r0]
 8005b6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005b72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005b76:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005b7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005b7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005b82:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005b86:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005b8a:	6184      	str	r4, [r0, #24]
 8005b8c:	7704      	strb	r4, [r0, #28]
 8005b8e:	6244      	str	r4, [r0, #36]	; 0x24
 8005b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	2301      	movs	r3, #1
 8005b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	f000 b806 	b.w	8005bac <__strtok_r>
 8005ba0:	20000014 	.word	0x20000014
 8005ba4:	080071d8 	.word	0x080071d8
 8005ba8:	080071ef 	.word	0x080071ef

08005bac <__strtok_r>:
 8005bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bae:	b908      	cbnz	r0, 8005bb4 <__strtok_r+0x8>
 8005bb0:	6810      	ldr	r0, [r2, #0]
 8005bb2:	b188      	cbz	r0, 8005bd8 <__strtok_r+0x2c>
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005bc2:	b91e      	cbnz	r6, 8005bcc <__strtok_r+0x20>
 8005bc4:	b965      	cbnz	r5, 8005be0 <__strtok_r+0x34>
 8005bc6:	6015      	str	r5, [r2, #0]
 8005bc8:	4628      	mov	r0, r5
 8005bca:	e005      	b.n	8005bd8 <__strtok_r+0x2c>
 8005bcc:	42b5      	cmp	r5, r6
 8005bce:	d1f6      	bne.n	8005bbe <__strtok_r+0x12>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f0      	bne.n	8005bb6 <__strtok_r+0xa>
 8005bd4:	6014      	str	r4, [r2, #0]
 8005bd6:	7003      	strb	r3, [r0, #0]
 8005bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bda:	461c      	mov	r4, r3
 8005bdc:	e00c      	b.n	8005bf8 <__strtok_r+0x4c>
 8005bde:	b915      	cbnz	r5, 8005be6 <__strtok_r+0x3a>
 8005be0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005be4:	460e      	mov	r6, r1
 8005be6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005bea:	42ab      	cmp	r3, r5
 8005bec:	d1f7      	bne.n	8005bde <__strtok_r+0x32>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f3      	beq.n	8005bda <__strtok_r+0x2e>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005bf8:	6014      	str	r4, [r2, #0]
 8005bfa:	e7ed      	b.n	8005bd8 <__strtok_r+0x2c>

08005bfc <_strtol_l.constprop.0>:
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c02:	4680      	mov	r8, r0
 8005c04:	d001      	beq.n	8005c0a <_strtol_l.constprop.0+0xe>
 8005c06:	2b24      	cmp	r3, #36	; 0x24
 8005c08:	d906      	bls.n	8005c18 <_strtol_l.constprop.0+0x1c>
 8005c0a:	f7ff ff13 	bl	8005a34 <__errno>
 8005c0e:	2316      	movs	r3, #22
 8005c10:	6003      	str	r3, [r0, #0]
 8005c12:	2000      	movs	r0, #0
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c18:	4f35      	ldr	r7, [pc, #212]	; (8005cf0 <_strtol_l.constprop.0+0xf4>)
 8005c1a:	460d      	mov	r5, r1
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c22:	5de6      	ldrb	r6, [r4, r7]
 8005c24:	f016 0608 	ands.w	r6, r6, #8
 8005c28:	d1f8      	bne.n	8005c1c <_strtol_l.constprop.0+0x20>
 8005c2a:	2c2d      	cmp	r4, #45	; 0x2d
 8005c2c:	d12f      	bne.n	8005c8e <_strtol_l.constprop.0+0x92>
 8005c2e:	782c      	ldrb	r4, [r5, #0]
 8005c30:	2601      	movs	r6, #1
 8005c32:	1c85      	adds	r5, r0, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d057      	beq.n	8005ce8 <_strtol_l.constprop.0+0xec>
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d109      	bne.n	8005c50 <_strtol_l.constprop.0+0x54>
 8005c3c:	2c30      	cmp	r4, #48	; 0x30
 8005c3e:	d107      	bne.n	8005c50 <_strtol_l.constprop.0+0x54>
 8005c40:	7828      	ldrb	r0, [r5, #0]
 8005c42:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005c46:	2858      	cmp	r0, #88	; 0x58
 8005c48:	d149      	bne.n	8005cde <_strtol_l.constprop.0+0xe2>
 8005c4a:	786c      	ldrb	r4, [r5, #1]
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	3502      	adds	r5, #2
 8005c50:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005c54:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005c58:	2700      	movs	r7, #0
 8005c5a:	fbbe f9f3 	udiv	r9, lr, r3
 8005c5e:	4638      	mov	r0, r7
 8005c60:	fb03 ea19 	mls	sl, r3, r9, lr
 8005c64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005c68:	f1bc 0f09 	cmp.w	ip, #9
 8005c6c:	d814      	bhi.n	8005c98 <_strtol_l.constprop.0+0x9c>
 8005c6e:	4664      	mov	r4, ip
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	dd22      	ble.n	8005cba <_strtol_l.constprop.0+0xbe>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	db1d      	blt.n	8005cb4 <_strtol_l.constprop.0+0xb8>
 8005c78:	4581      	cmp	r9, r0
 8005c7a:	d31b      	bcc.n	8005cb4 <_strtol_l.constprop.0+0xb8>
 8005c7c:	d101      	bne.n	8005c82 <_strtol_l.constprop.0+0x86>
 8005c7e:	45a2      	cmp	sl, r4
 8005c80:	db18      	blt.n	8005cb4 <_strtol_l.constprop.0+0xb8>
 8005c82:	fb00 4003 	mla	r0, r0, r3, r4
 8005c86:	2701      	movs	r7, #1
 8005c88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c8c:	e7ea      	b.n	8005c64 <_strtol_l.constprop.0+0x68>
 8005c8e:	2c2b      	cmp	r4, #43	; 0x2b
 8005c90:	bf04      	itt	eq
 8005c92:	782c      	ldrbeq	r4, [r5, #0]
 8005c94:	1c85      	addeq	r5, r0, #2
 8005c96:	e7cd      	b.n	8005c34 <_strtol_l.constprop.0+0x38>
 8005c98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005c9c:	f1bc 0f19 	cmp.w	ip, #25
 8005ca0:	d801      	bhi.n	8005ca6 <_strtol_l.constprop.0+0xaa>
 8005ca2:	3c37      	subs	r4, #55	; 0x37
 8005ca4:	e7e4      	b.n	8005c70 <_strtol_l.constprop.0+0x74>
 8005ca6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005caa:	f1bc 0f19 	cmp.w	ip, #25
 8005cae:	d804      	bhi.n	8005cba <_strtol_l.constprop.0+0xbe>
 8005cb0:	3c57      	subs	r4, #87	; 0x57
 8005cb2:	e7dd      	b.n	8005c70 <_strtol_l.constprop.0+0x74>
 8005cb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005cb8:	e7e6      	b.n	8005c88 <_strtol_l.constprop.0+0x8c>
 8005cba:	2f00      	cmp	r7, #0
 8005cbc:	da07      	bge.n	8005cce <_strtol_l.constprop.0+0xd2>
 8005cbe:	2322      	movs	r3, #34	; 0x22
 8005cc0:	f8c8 3000 	str.w	r3, [r8]
 8005cc4:	4670      	mov	r0, lr
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	d0a4      	beq.n	8005c14 <_strtol_l.constprop.0+0x18>
 8005cca:	1e69      	subs	r1, r5, #1
 8005ccc:	e005      	b.n	8005cda <_strtol_l.constprop.0+0xde>
 8005cce:	b106      	cbz	r6, 8005cd2 <_strtol_l.constprop.0+0xd6>
 8005cd0:	4240      	negs	r0, r0
 8005cd2:	2a00      	cmp	r2, #0
 8005cd4:	d09e      	beq.n	8005c14 <_strtol_l.constprop.0+0x18>
 8005cd6:	2f00      	cmp	r7, #0
 8005cd8:	d1f7      	bne.n	8005cca <_strtol_l.constprop.0+0xce>
 8005cda:	6011      	str	r1, [r2, #0]
 8005cdc:	e79a      	b.n	8005c14 <_strtol_l.constprop.0+0x18>
 8005cde:	2430      	movs	r4, #48	; 0x30
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1b5      	bne.n	8005c50 <_strtol_l.constprop.0+0x54>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	e7b3      	b.n	8005c50 <_strtol_l.constprop.0+0x54>
 8005ce8:	2c30      	cmp	r4, #48	; 0x30
 8005cea:	d0a9      	beq.n	8005c40 <_strtol_l.constprop.0+0x44>
 8005cec:	230a      	movs	r3, #10
 8005cee:	e7af      	b.n	8005c50 <_strtol_l.constprop.0+0x54>
 8005cf0:	08007289 	.word	0x08007289

08005cf4 <strtol>:
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	460a      	mov	r2, r1
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	4802      	ldr	r0, [pc, #8]	; (8005d04 <strtol+0x10>)
 8005cfc:	6800      	ldr	r0, [r0, #0]
 8005cfe:	f7ff bf7d 	b.w	8005bfc <_strtol_l.constprop.0>
 8005d02:	bf00      	nop
 8005d04:	20000014 	.word	0x20000014

08005d08 <__assert_func>:
 8005d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d0a:	4614      	mov	r4, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <__assert_func+0x2c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4605      	mov	r5, r0
 8005d14:	68d8      	ldr	r0, [r3, #12]
 8005d16:	b14c      	cbz	r4, 8005d2c <__assert_func+0x24>
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <__assert_func+0x30>)
 8005d1a:	9100      	str	r1, [sp, #0]
 8005d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d20:	4906      	ldr	r1, [pc, #24]	; (8005d3c <__assert_func+0x34>)
 8005d22:	462b      	mov	r3, r5
 8005d24:	f000 f80e 	bl	8005d44 <fiprintf>
 8005d28:	f000 fe1c 	bl	8006964 <abort>
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <__assert_func+0x38>)
 8005d2e:	461c      	mov	r4, r3
 8005d30:	e7f3      	b.n	8005d1a <__assert_func+0x12>
 8005d32:	bf00      	nop
 8005d34:	20000014 	.word	0x20000014
 8005d38:	0800724c 	.word	0x0800724c
 8005d3c:	08007259 	.word	0x08007259
 8005d40:	08007287 	.word	0x08007287

08005d44 <fiprintf>:
 8005d44:	b40e      	push	{r1, r2, r3}
 8005d46:	b503      	push	{r0, r1, lr}
 8005d48:	4601      	mov	r1, r0
 8005d4a:	ab03      	add	r3, sp, #12
 8005d4c:	4805      	ldr	r0, [pc, #20]	; (8005d64 <fiprintf+0x20>)
 8005d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d52:	6800      	ldr	r0, [r0, #0]
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	f000 fa71 	bl	800623c <_vfiprintf_r>
 8005d5a:	b002      	add	sp, #8
 8005d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d60:	b003      	add	sp, #12
 8005d62:	4770      	bx	lr
 8005d64:	20000014 	.word	0x20000014

08005d68 <malloc>:
 8005d68:	4b02      	ldr	r3, [pc, #8]	; (8005d74 <malloc+0xc>)
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f000 b86d 	b.w	8005e4c <_malloc_r>
 8005d72:	bf00      	nop
 8005d74:	20000014 	.word	0x20000014

08005d78 <_free_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	d041      	beq.n	8005e04 <_free_r+0x8c>
 8005d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d84:	1f0c      	subs	r4, r1, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bfb8      	it	lt
 8005d8a:	18e4      	addlt	r4, r4, r3
 8005d8c:	f001 f828 	bl	8006de0 <__malloc_lock>
 8005d90:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <_free_r+0x90>)
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	b933      	cbnz	r3, 8005da4 <_free_r+0x2c>
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	6014      	str	r4, [r2, #0]
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da0:	f001 b824 	b.w	8006dec <__malloc_unlock>
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d908      	bls.n	8005dba <_free_r+0x42>
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	1821      	adds	r1, r4, r0
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf01      	itttt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	1809      	addeq	r1, r1, r0
 8005db6:	6021      	streq	r1, [r4, #0]
 8005db8:	e7ed      	b.n	8005d96 <_free_r+0x1e>
 8005dba:	461a      	mov	r2, r3
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	b10b      	cbz	r3, 8005dc4 <_free_r+0x4c>
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d9fa      	bls.n	8005dba <_free_r+0x42>
 8005dc4:	6811      	ldr	r1, [r2, #0]
 8005dc6:	1850      	adds	r0, r2, r1
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d10b      	bne.n	8005de4 <_free_r+0x6c>
 8005dcc:	6820      	ldr	r0, [r4, #0]
 8005dce:	4401      	add	r1, r0
 8005dd0:	1850      	adds	r0, r2, r1
 8005dd2:	4283      	cmp	r3, r0
 8005dd4:	6011      	str	r1, [r2, #0]
 8005dd6:	d1e0      	bne.n	8005d9a <_free_r+0x22>
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	6053      	str	r3, [r2, #4]
 8005dde:	4401      	add	r1, r0
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	e7da      	b.n	8005d9a <_free_r+0x22>
 8005de4:	d902      	bls.n	8005dec <_free_r+0x74>
 8005de6:	230c      	movs	r3, #12
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	e7d6      	b.n	8005d9a <_free_r+0x22>
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	1821      	adds	r1, r4, r0
 8005df0:	428b      	cmp	r3, r1
 8005df2:	bf04      	itt	eq
 8005df4:	6819      	ldreq	r1, [r3, #0]
 8005df6:	685b      	ldreq	r3, [r3, #4]
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	bf04      	itt	eq
 8005dfc:	1809      	addeq	r1, r1, r0
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	6054      	str	r4, [r2, #4]
 8005e02:	e7ca      	b.n	8005d9a <_free_r+0x22>
 8005e04:	bd38      	pop	{r3, r4, r5, pc}
 8005e06:	bf00      	nop
 8005e08:	20001e4c 	.word	0x20001e4c

08005e0c <sbrk_aligned>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4e0e      	ldr	r6, [pc, #56]	; (8005e48 <sbrk_aligned+0x3c>)
 8005e10:	460c      	mov	r4, r1
 8005e12:	6831      	ldr	r1, [r6, #0]
 8005e14:	4605      	mov	r5, r0
 8005e16:	b911      	cbnz	r1, 8005e1e <sbrk_aligned+0x12>
 8005e18:	f000 fcd4 	bl	80067c4 <_sbrk_r>
 8005e1c:	6030      	str	r0, [r6, #0]
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 fccf 	bl	80067c4 <_sbrk_r>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d00a      	beq.n	8005e40 <sbrk_aligned+0x34>
 8005e2a:	1cc4      	adds	r4, r0, #3
 8005e2c:	f024 0403 	bic.w	r4, r4, #3
 8005e30:	42a0      	cmp	r0, r4
 8005e32:	d007      	beq.n	8005e44 <sbrk_aligned+0x38>
 8005e34:	1a21      	subs	r1, r4, r0
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fcc4 	bl	80067c4 <_sbrk_r>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d101      	bne.n	8005e44 <sbrk_aligned+0x38>
 8005e40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e44:	4620      	mov	r0, r4
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	20001e50 	.word	0x20001e50

08005e4c <_malloc_r>:
 8005e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	1ccd      	adds	r5, r1, #3
 8005e52:	f025 0503 	bic.w	r5, r5, #3
 8005e56:	3508      	adds	r5, #8
 8005e58:	2d0c      	cmp	r5, #12
 8005e5a:	bf38      	it	cc
 8005e5c:	250c      	movcc	r5, #12
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	4607      	mov	r7, r0
 8005e62:	db01      	blt.n	8005e68 <_malloc_r+0x1c>
 8005e64:	42a9      	cmp	r1, r5
 8005e66:	d905      	bls.n	8005e74 <_malloc_r+0x28>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	4630      	mov	r0, r6
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e74:	4e2e      	ldr	r6, [pc, #184]	; (8005f30 <_malloc_r+0xe4>)
 8005e76:	f000 ffb3 	bl	8006de0 <__malloc_lock>
 8005e7a:	6833      	ldr	r3, [r6, #0]
 8005e7c:	461c      	mov	r4, r3
 8005e7e:	bb34      	cbnz	r4, 8005ece <_malloc_r+0x82>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4638      	mov	r0, r7
 8005e84:	f7ff ffc2 	bl	8005e0c <sbrk_aligned>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	d14d      	bne.n	8005f2a <_malloc_r+0xde>
 8005e8e:	6834      	ldr	r4, [r6, #0]
 8005e90:	4626      	mov	r6, r4
 8005e92:	2e00      	cmp	r6, #0
 8005e94:	d140      	bne.n	8005f18 <_malloc_r+0xcc>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	eb04 0803 	add.w	r8, r4, r3
 8005ea0:	f000 fc90 	bl	80067c4 <_sbrk_r>
 8005ea4:	4580      	cmp	r8, r0
 8005ea6:	d13a      	bne.n	8005f1e <_malloc_r+0xd2>
 8005ea8:	6821      	ldr	r1, [r4, #0]
 8005eaa:	3503      	adds	r5, #3
 8005eac:	1a6d      	subs	r5, r5, r1
 8005eae:	f025 0503 	bic.w	r5, r5, #3
 8005eb2:	3508      	adds	r5, #8
 8005eb4:	2d0c      	cmp	r5, #12
 8005eb6:	bf38      	it	cc
 8005eb8:	250c      	movcc	r5, #12
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f7ff ffa5 	bl	8005e0c <sbrk_aligned>
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d02b      	beq.n	8005f1e <_malloc_r+0xd2>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	442b      	add	r3, r5
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	e00e      	b.n	8005eec <_malloc_r+0xa0>
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	1b52      	subs	r2, r2, r5
 8005ed2:	d41e      	bmi.n	8005f12 <_malloc_r+0xc6>
 8005ed4:	2a0b      	cmp	r2, #11
 8005ed6:	d916      	bls.n	8005f06 <_malloc_r+0xba>
 8005ed8:	1961      	adds	r1, r4, r5
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	6025      	str	r5, [r4, #0]
 8005ede:	bf18      	it	ne
 8005ee0:	6059      	strne	r1, [r3, #4]
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	bf08      	it	eq
 8005ee6:	6031      	streq	r1, [r6, #0]
 8005ee8:	5162      	str	r2, [r4, r5]
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	4638      	mov	r0, r7
 8005eee:	f104 060b 	add.w	r6, r4, #11
 8005ef2:	f000 ff7b 	bl	8006dec <__malloc_unlock>
 8005ef6:	f026 0607 	bic.w	r6, r6, #7
 8005efa:	1d23      	adds	r3, r4, #4
 8005efc:	1af2      	subs	r2, r6, r3
 8005efe:	d0b6      	beq.n	8005e6e <_malloc_r+0x22>
 8005f00:	1b9b      	subs	r3, r3, r6
 8005f02:	50a3      	str	r3, [r4, r2]
 8005f04:	e7b3      	b.n	8005e6e <_malloc_r+0x22>
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	bf0c      	ite	eq
 8005f0c:	6032      	streq	r2, [r6, #0]
 8005f0e:	605a      	strne	r2, [r3, #4]
 8005f10:	e7ec      	b.n	8005eec <_malloc_r+0xa0>
 8005f12:	4623      	mov	r3, r4
 8005f14:	6864      	ldr	r4, [r4, #4]
 8005f16:	e7b2      	b.n	8005e7e <_malloc_r+0x32>
 8005f18:	4634      	mov	r4, r6
 8005f1a:	6876      	ldr	r6, [r6, #4]
 8005f1c:	e7b9      	b.n	8005e92 <_malloc_r+0x46>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	4638      	mov	r0, r7
 8005f24:	f000 ff62 	bl	8006dec <__malloc_unlock>
 8005f28:	e7a1      	b.n	8005e6e <_malloc_r+0x22>
 8005f2a:	6025      	str	r5, [r4, #0]
 8005f2c:	e7de      	b.n	8005eec <_malloc_r+0xa0>
 8005f2e:	bf00      	nop
 8005f30:	20001e4c 	.word	0x20001e4c

08005f34 <__ssputs_r>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	688e      	ldr	r6, [r1, #8]
 8005f3a:	429e      	cmp	r6, r3
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	4690      	mov	r8, r2
 8005f42:	461f      	mov	r7, r3
 8005f44:	d838      	bhi.n	8005fb8 <__ssputs_r+0x84>
 8005f46:	898a      	ldrh	r2, [r1, #12]
 8005f48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f4c:	d032      	beq.n	8005fb4 <__ssputs_r+0x80>
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	6909      	ldr	r1, [r1, #16]
 8005f52:	eba5 0901 	sub.w	r9, r5, r1
 8005f56:	6965      	ldr	r5, [r4, #20]
 8005f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f60:	3301      	adds	r3, #1
 8005f62:	444b      	add	r3, r9
 8005f64:	106d      	asrs	r5, r5, #1
 8005f66:	429d      	cmp	r5, r3
 8005f68:	bf38      	it	cc
 8005f6a:	461d      	movcc	r5, r3
 8005f6c:	0553      	lsls	r3, r2, #21
 8005f6e:	d531      	bpl.n	8005fd4 <__ssputs_r+0xa0>
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7ff ff6b 	bl	8005e4c <_malloc_r>
 8005f76:	4606      	mov	r6, r0
 8005f78:	b950      	cbnz	r0, 8005f90 <__ssputs_r+0x5c>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	f8ca 3000 	str.w	r3, [sl]
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f90:	6921      	ldr	r1, [r4, #16]
 8005f92:	464a      	mov	r2, r9
 8005f94:	f7ff fd78 	bl	8005a88 <memcpy>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	6126      	str	r6, [r4, #16]
 8005fa6:	6165      	str	r5, [r4, #20]
 8005fa8:	444e      	add	r6, r9
 8005faa:	eba5 0509 	sub.w	r5, r5, r9
 8005fae:	6026      	str	r6, [r4, #0]
 8005fb0:	60a5      	str	r5, [r4, #8]
 8005fb2:	463e      	mov	r6, r7
 8005fb4:	42be      	cmp	r6, r7
 8005fb6:	d900      	bls.n	8005fba <__ssputs_r+0x86>
 8005fb8:	463e      	mov	r6, r7
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	f000 fef4 	bl	8006dac <memmove>
 8005fc4:	68a3      	ldr	r3, [r4, #8]
 8005fc6:	1b9b      	subs	r3, r3, r6
 8005fc8:	60a3      	str	r3, [r4, #8]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	4433      	add	r3, r6
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7db      	b.n	8005f8c <__ssputs_r+0x58>
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	f000 ff0f 	bl	8006df8 <_realloc_r>
 8005fda:	4606      	mov	r6, r0
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d1e1      	bne.n	8005fa4 <__ssputs_r+0x70>
 8005fe0:	6921      	ldr	r1, [r4, #16]
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	f7ff fec8 	bl	8005d78 <_free_r>
 8005fe8:	e7c7      	b.n	8005f7a <__ssputs_r+0x46>
	...

08005fec <_svfiprintf_r>:
 8005fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff0:	4698      	mov	r8, r3
 8005ff2:	898b      	ldrh	r3, [r1, #12]
 8005ff4:	061b      	lsls	r3, r3, #24
 8005ff6:	b09d      	sub	sp, #116	; 0x74
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	460d      	mov	r5, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	d50e      	bpl.n	800601e <_svfiprintf_r+0x32>
 8006000:	690b      	ldr	r3, [r1, #16]
 8006002:	b963      	cbnz	r3, 800601e <_svfiprintf_r+0x32>
 8006004:	2140      	movs	r1, #64	; 0x40
 8006006:	f7ff ff21 	bl	8005e4c <_malloc_r>
 800600a:	6028      	str	r0, [r5, #0]
 800600c:	6128      	str	r0, [r5, #16]
 800600e:	b920      	cbnz	r0, 800601a <_svfiprintf_r+0x2e>
 8006010:	230c      	movs	r3, #12
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006018:	e0d1      	b.n	80061be <_svfiprintf_r+0x1d2>
 800601a:	2340      	movs	r3, #64	; 0x40
 800601c:	616b      	str	r3, [r5, #20]
 800601e:	2300      	movs	r3, #0
 8006020:	9309      	str	r3, [sp, #36]	; 0x24
 8006022:	2320      	movs	r3, #32
 8006024:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006028:	f8cd 800c 	str.w	r8, [sp, #12]
 800602c:	2330      	movs	r3, #48	; 0x30
 800602e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061d8 <_svfiprintf_r+0x1ec>
 8006032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006036:	f04f 0901 	mov.w	r9, #1
 800603a:	4623      	mov	r3, r4
 800603c:	469a      	mov	sl, r3
 800603e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006042:	b10a      	cbz	r2, 8006048 <_svfiprintf_r+0x5c>
 8006044:	2a25      	cmp	r2, #37	; 0x25
 8006046:	d1f9      	bne.n	800603c <_svfiprintf_r+0x50>
 8006048:	ebba 0b04 	subs.w	fp, sl, r4
 800604c:	d00b      	beq.n	8006066 <_svfiprintf_r+0x7a>
 800604e:	465b      	mov	r3, fp
 8006050:	4622      	mov	r2, r4
 8006052:	4629      	mov	r1, r5
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff ff6d 	bl	8005f34 <__ssputs_r>
 800605a:	3001      	adds	r0, #1
 800605c:	f000 80aa 	beq.w	80061b4 <_svfiprintf_r+0x1c8>
 8006060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006062:	445a      	add	r2, fp
 8006064:	9209      	str	r2, [sp, #36]	; 0x24
 8006066:	f89a 3000 	ldrb.w	r3, [sl]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80a2 	beq.w	80061b4 <_svfiprintf_r+0x1c8>
 8006070:	2300      	movs	r3, #0
 8006072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800607a:	f10a 0a01 	add.w	sl, sl, #1
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	9307      	str	r3, [sp, #28]
 8006082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006086:	931a      	str	r3, [sp, #104]	; 0x68
 8006088:	4654      	mov	r4, sl
 800608a:	2205      	movs	r2, #5
 800608c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006090:	4851      	ldr	r0, [pc, #324]	; (80061d8 <_svfiprintf_r+0x1ec>)
 8006092:	f7fa f875 	bl	8000180 <memchr>
 8006096:	9a04      	ldr	r2, [sp, #16]
 8006098:	b9d8      	cbnz	r0, 80060d2 <_svfiprintf_r+0xe6>
 800609a:	06d0      	lsls	r0, r2, #27
 800609c:	bf44      	itt	mi
 800609e:	2320      	movmi	r3, #32
 80060a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a4:	0711      	lsls	r1, r2, #28
 80060a6:	bf44      	itt	mi
 80060a8:	232b      	movmi	r3, #43	; 0x2b
 80060aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ae:	f89a 3000 	ldrb.w	r3, [sl]
 80060b2:	2b2a      	cmp	r3, #42	; 0x2a
 80060b4:	d015      	beq.n	80060e2 <_svfiprintf_r+0xf6>
 80060b6:	9a07      	ldr	r2, [sp, #28]
 80060b8:	4654      	mov	r4, sl
 80060ba:	2000      	movs	r0, #0
 80060bc:	f04f 0c0a 	mov.w	ip, #10
 80060c0:	4621      	mov	r1, r4
 80060c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060c6:	3b30      	subs	r3, #48	; 0x30
 80060c8:	2b09      	cmp	r3, #9
 80060ca:	d94e      	bls.n	800616a <_svfiprintf_r+0x17e>
 80060cc:	b1b0      	cbz	r0, 80060fc <_svfiprintf_r+0x110>
 80060ce:	9207      	str	r2, [sp, #28]
 80060d0:	e014      	b.n	80060fc <_svfiprintf_r+0x110>
 80060d2:	eba0 0308 	sub.w	r3, r0, r8
 80060d6:	fa09 f303 	lsl.w	r3, r9, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	46a2      	mov	sl, r4
 80060e0:	e7d2      	b.n	8006088 <_svfiprintf_r+0x9c>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	1d19      	adds	r1, r3, #4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	9103      	str	r1, [sp, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bfbb      	ittet	lt
 80060ee:	425b      	neglt	r3, r3
 80060f0:	f042 0202 	orrlt.w	r2, r2, #2
 80060f4:	9307      	strge	r3, [sp, #28]
 80060f6:	9307      	strlt	r3, [sp, #28]
 80060f8:	bfb8      	it	lt
 80060fa:	9204      	strlt	r2, [sp, #16]
 80060fc:	7823      	ldrb	r3, [r4, #0]
 80060fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006100:	d10c      	bne.n	800611c <_svfiprintf_r+0x130>
 8006102:	7863      	ldrb	r3, [r4, #1]
 8006104:	2b2a      	cmp	r3, #42	; 0x2a
 8006106:	d135      	bne.n	8006174 <_svfiprintf_r+0x188>
 8006108:	9b03      	ldr	r3, [sp, #12]
 800610a:	1d1a      	adds	r2, r3, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	9203      	str	r2, [sp, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	bfb8      	it	lt
 8006114:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006118:	3402      	adds	r4, #2
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80061dc <_svfiprintf_r+0x1f0>
 8006120:	7821      	ldrb	r1, [r4, #0]
 8006122:	2203      	movs	r2, #3
 8006124:	4650      	mov	r0, sl
 8006126:	f7fa f82b 	bl	8000180 <memchr>
 800612a:	b140      	cbz	r0, 800613e <_svfiprintf_r+0x152>
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	eba0 000a 	sub.w	r0, r0, sl
 8006132:	fa03 f000 	lsl.w	r0, r3, r0
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	4303      	orrs	r3, r0
 800613a:	3401      	adds	r4, #1
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006142:	4827      	ldr	r0, [pc, #156]	; (80061e0 <_svfiprintf_r+0x1f4>)
 8006144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006148:	2206      	movs	r2, #6
 800614a:	f7fa f819 	bl	8000180 <memchr>
 800614e:	2800      	cmp	r0, #0
 8006150:	d038      	beq.n	80061c4 <_svfiprintf_r+0x1d8>
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <_svfiprintf_r+0x1f8>)
 8006154:	bb1b      	cbnz	r3, 800619e <_svfiprintf_r+0x1b2>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	3307      	adds	r3, #7
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	3308      	adds	r3, #8
 8006160:	9303      	str	r3, [sp, #12]
 8006162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006164:	4433      	add	r3, r6
 8006166:	9309      	str	r3, [sp, #36]	; 0x24
 8006168:	e767      	b.n	800603a <_svfiprintf_r+0x4e>
 800616a:	fb0c 3202 	mla	r2, ip, r2, r3
 800616e:	460c      	mov	r4, r1
 8006170:	2001      	movs	r0, #1
 8006172:	e7a5      	b.n	80060c0 <_svfiprintf_r+0xd4>
 8006174:	2300      	movs	r3, #0
 8006176:	3401      	adds	r4, #1
 8006178:	9305      	str	r3, [sp, #20]
 800617a:	4619      	mov	r1, r3
 800617c:	f04f 0c0a 	mov.w	ip, #10
 8006180:	4620      	mov	r0, r4
 8006182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006186:	3a30      	subs	r2, #48	; 0x30
 8006188:	2a09      	cmp	r2, #9
 800618a:	d903      	bls.n	8006194 <_svfiprintf_r+0x1a8>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0c5      	beq.n	800611c <_svfiprintf_r+0x130>
 8006190:	9105      	str	r1, [sp, #20]
 8006192:	e7c3      	b.n	800611c <_svfiprintf_r+0x130>
 8006194:	fb0c 2101 	mla	r1, ip, r1, r2
 8006198:	4604      	mov	r4, r0
 800619a:	2301      	movs	r3, #1
 800619c:	e7f0      	b.n	8006180 <_svfiprintf_r+0x194>
 800619e:	ab03      	add	r3, sp, #12
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	462a      	mov	r2, r5
 80061a4:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <_svfiprintf_r+0x1fc>)
 80061a6:	a904      	add	r1, sp, #16
 80061a8:	4638      	mov	r0, r7
 80061aa:	f3af 8000 	nop.w
 80061ae:	1c42      	adds	r2, r0, #1
 80061b0:	4606      	mov	r6, r0
 80061b2:	d1d6      	bne.n	8006162 <_svfiprintf_r+0x176>
 80061b4:	89ab      	ldrh	r3, [r5, #12]
 80061b6:	065b      	lsls	r3, r3, #25
 80061b8:	f53f af2c 	bmi.w	8006014 <_svfiprintf_r+0x28>
 80061bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061be:	b01d      	add	sp, #116	; 0x74
 80061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c4:	ab03      	add	r3, sp, #12
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	462a      	mov	r2, r5
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <_svfiprintf_r+0x1fc>)
 80061cc:	a904      	add	r1, sp, #16
 80061ce:	4638      	mov	r0, r7
 80061d0:	f000 f9d2 	bl	8006578 <_printf_i>
 80061d4:	e7eb      	b.n	80061ae <_svfiprintf_r+0x1c2>
 80061d6:	bf00      	nop
 80061d8:	08007389 	.word	0x08007389
 80061dc:	0800738f 	.word	0x0800738f
 80061e0:	08007393 	.word	0x08007393
 80061e4:	00000000 	.word	0x00000000
 80061e8:	08005f35 	.word	0x08005f35

080061ec <__sfputc_r>:
 80061ec:	6893      	ldr	r3, [r2, #8]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	b410      	push	{r4}
 80061f4:	6093      	str	r3, [r2, #8]
 80061f6:	da07      	bge.n	8006208 <__sfputc_r+0x1c>
 80061f8:	6994      	ldr	r4, [r2, #24]
 80061fa:	42a3      	cmp	r3, r4
 80061fc:	db01      	blt.n	8006202 <__sfputc_r+0x16>
 80061fe:	290a      	cmp	r1, #10
 8006200:	d102      	bne.n	8006208 <__sfputc_r+0x1c>
 8006202:	bc10      	pop	{r4}
 8006204:	f000 baee 	b.w	80067e4 <__swbuf_r>
 8006208:	6813      	ldr	r3, [r2, #0]
 800620a:	1c58      	adds	r0, r3, #1
 800620c:	6010      	str	r0, [r2, #0]
 800620e:	7019      	strb	r1, [r3, #0]
 8006210:	4608      	mov	r0, r1
 8006212:	bc10      	pop	{r4}
 8006214:	4770      	bx	lr

08006216 <__sfputs_r>:
 8006216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006218:	4606      	mov	r6, r0
 800621a:	460f      	mov	r7, r1
 800621c:	4614      	mov	r4, r2
 800621e:	18d5      	adds	r5, r2, r3
 8006220:	42ac      	cmp	r4, r5
 8006222:	d101      	bne.n	8006228 <__sfputs_r+0x12>
 8006224:	2000      	movs	r0, #0
 8006226:	e007      	b.n	8006238 <__sfputs_r+0x22>
 8006228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622c:	463a      	mov	r2, r7
 800622e:	4630      	mov	r0, r6
 8006230:	f7ff ffdc 	bl	80061ec <__sfputc_r>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d1f3      	bne.n	8006220 <__sfputs_r+0xa>
 8006238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800623c <_vfiprintf_r>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	460d      	mov	r5, r1
 8006242:	b09d      	sub	sp, #116	; 0x74
 8006244:	4614      	mov	r4, r2
 8006246:	4698      	mov	r8, r3
 8006248:	4606      	mov	r6, r0
 800624a:	b118      	cbz	r0, 8006254 <_vfiprintf_r+0x18>
 800624c:	6983      	ldr	r3, [r0, #24]
 800624e:	b90b      	cbnz	r3, 8006254 <_vfiprintf_r+0x18>
 8006250:	f000 fca6 	bl	8006ba0 <__sinit>
 8006254:	4b89      	ldr	r3, [pc, #548]	; (800647c <_vfiprintf_r+0x240>)
 8006256:	429d      	cmp	r5, r3
 8006258:	d11b      	bne.n	8006292 <_vfiprintf_r+0x56>
 800625a:	6875      	ldr	r5, [r6, #4]
 800625c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	d405      	bmi.n	800626e <_vfiprintf_r+0x32>
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	059a      	lsls	r2, r3, #22
 8006266:	d402      	bmi.n	800626e <_vfiprintf_r+0x32>
 8006268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800626a:	f000 fd37 	bl	8006cdc <__retarget_lock_acquire_recursive>
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	071b      	lsls	r3, r3, #28
 8006272:	d501      	bpl.n	8006278 <_vfiprintf_r+0x3c>
 8006274:	692b      	ldr	r3, [r5, #16]
 8006276:	b9eb      	cbnz	r3, 80062b4 <_vfiprintf_r+0x78>
 8006278:	4629      	mov	r1, r5
 800627a:	4630      	mov	r0, r6
 800627c:	f000 fb04 	bl	8006888 <__swsetup_r>
 8006280:	b1c0      	cbz	r0, 80062b4 <_vfiprintf_r+0x78>
 8006282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006284:	07dc      	lsls	r4, r3, #31
 8006286:	d50e      	bpl.n	80062a6 <_vfiprintf_r+0x6a>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800628c:	b01d      	add	sp, #116	; 0x74
 800628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006292:	4b7b      	ldr	r3, [pc, #492]	; (8006480 <_vfiprintf_r+0x244>)
 8006294:	429d      	cmp	r5, r3
 8006296:	d101      	bne.n	800629c <_vfiprintf_r+0x60>
 8006298:	68b5      	ldr	r5, [r6, #8]
 800629a:	e7df      	b.n	800625c <_vfiprintf_r+0x20>
 800629c:	4b79      	ldr	r3, [pc, #484]	; (8006484 <_vfiprintf_r+0x248>)
 800629e:	429d      	cmp	r5, r3
 80062a0:	bf08      	it	eq
 80062a2:	68f5      	ldreq	r5, [r6, #12]
 80062a4:	e7da      	b.n	800625c <_vfiprintf_r+0x20>
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	0598      	lsls	r0, r3, #22
 80062aa:	d4ed      	bmi.n	8006288 <_vfiprintf_r+0x4c>
 80062ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ae:	f000 fd16 	bl	8006cde <__retarget_lock_release_recursive>
 80062b2:	e7e9      	b.n	8006288 <_vfiprintf_r+0x4c>
 80062b4:	2300      	movs	r3, #0
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
 80062b8:	2320      	movs	r3, #32
 80062ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062be:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c2:	2330      	movs	r3, #48	; 0x30
 80062c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006488 <_vfiprintf_r+0x24c>
 80062c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062cc:	f04f 0901 	mov.w	r9, #1
 80062d0:	4623      	mov	r3, r4
 80062d2:	469a      	mov	sl, r3
 80062d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d8:	b10a      	cbz	r2, 80062de <_vfiprintf_r+0xa2>
 80062da:	2a25      	cmp	r2, #37	; 0x25
 80062dc:	d1f9      	bne.n	80062d2 <_vfiprintf_r+0x96>
 80062de:	ebba 0b04 	subs.w	fp, sl, r4
 80062e2:	d00b      	beq.n	80062fc <_vfiprintf_r+0xc0>
 80062e4:	465b      	mov	r3, fp
 80062e6:	4622      	mov	r2, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ff93 	bl	8006216 <__sfputs_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	f000 80aa 	beq.w	800644a <_vfiprintf_r+0x20e>
 80062f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f8:	445a      	add	r2, fp
 80062fa:	9209      	str	r2, [sp, #36]	; 0x24
 80062fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80a2 	beq.w	800644a <_vfiprintf_r+0x20e>
 8006306:	2300      	movs	r3, #0
 8006308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800630c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006310:	f10a 0a01 	add.w	sl, sl, #1
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800631c:	931a      	str	r3, [sp, #104]	; 0x68
 800631e:	4654      	mov	r4, sl
 8006320:	2205      	movs	r2, #5
 8006322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006326:	4858      	ldr	r0, [pc, #352]	; (8006488 <_vfiprintf_r+0x24c>)
 8006328:	f7f9 ff2a 	bl	8000180 <memchr>
 800632c:	9a04      	ldr	r2, [sp, #16]
 800632e:	b9d8      	cbnz	r0, 8006368 <_vfiprintf_r+0x12c>
 8006330:	06d1      	lsls	r1, r2, #27
 8006332:	bf44      	itt	mi
 8006334:	2320      	movmi	r3, #32
 8006336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800633a:	0713      	lsls	r3, r2, #28
 800633c:	bf44      	itt	mi
 800633e:	232b      	movmi	r3, #43	; 0x2b
 8006340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006344:	f89a 3000 	ldrb.w	r3, [sl]
 8006348:	2b2a      	cmp	r3, #42	; 0x2a
 800634a:	d015      	beq.n	8006378 <_vfiprintf_r+0x13c>
 800634c:	9a07      	ldr	r2, [sp, #28]
 800634e:	4654      	mov	r4, sl
 8006350:	2000      	movs	r0, #0
 8006352:	f04f 0c0a 	mov.w	ip, #10
 8006356:	4621      	mov	r1, r4
 8006358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635c:	3b30      	subs	r3, #48	; 0x30
 800635e:	2b09      	cmp	r3, #9
 8006360:	d94e      	bls.n	8006400 <_vfiprintf_r+0x1c4>
 8006362:	b1b0      	cbz	r0, 8006392 <_vfiprintf_r+0x156>
 8006364:	9207      	str	r2, [sp, #28]
 8006366:	e014      	b.n	8006392 <_vfiprintf_r+0x156>
 8006368:	eba0 0308 	sub.w	r3, r0, r8
 800636c:	fa09 f303 	lsl.w	r3, r9, r3
 8006370:	4313      	orrs	r3, r2
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	46a2      	mov	sl, r4
 8006376:	e7d2      	b.n	800631e <_vfiprintf_r+0xe2>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	1d19      	adds	r1, r3, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	9103      	str	r1, [sp, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	bfbb      	ittet	lt
 8006384:	425b      	neglt	r3, r3
 8006386:	f042 0202 	orrlt.w	r2, r2, #2
 800638a:	9307      	strge	r3, [sp, #28]
 800638c:	9307      	strlt	r3, [sp, #28]
 800638e:	bfb8      	it	lt
 8006390:	9204      	strlt	r2, [sp, #16]
 8006392:	7823      	ldrb	r3, [r4, #0]
 8006394:	2b2e      	cmp	r3, #46	; 0x2e
 8006396:	d10c      	bne.n	80063b2 <_vfiprintf_r+0x176>
 8006398:	7863      	ldrb	r3, [r4, #1]
 800639a:	2b2a      	cmp	r3, #42	; 0x2a
 800639c:	d135      	bne.n	800640a <_vfiprintf_r+0x1ce>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	9203      	str	r2, [sp, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063ae:	3402      	adds	r4, #2
 80063b0:	9305      	str	r3, [sp, #20]
 80063b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800648c <_vfiprintf_r+0x250>
 80063b6:	7821      	ldrb	r1, [r4, #0]
 80063b8:	2203      	movs	r2, #3
 80063ba:	4650      	mov	r0, sl
 80063bc:	f7f9 fee0 	bl	8000180 <memchr>
 80063c0:	b140      	cbz	r0, 80063d4 <_vfiprintf_r+0x198>
 80063c2:	2340      	movs	r3, #64	; 0x40
 80063c4:	eba0 000a 	sub.w	r0, r0, sl
 80063c8:	fa03 f000 	lsl.w	r0, r3, r0
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	4303      	orrs	r3, r0
 80063d0:	3401      	adds	r4, #1
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d8:	482d      	ldr	r0, [pc, #180]	; (8006490 <_vfiprintf_r+0x254>)
 80063da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063de:	2206      	movs	r2, #6
 80063e0:	f7f9 fece 	bl	8000180 <memchr>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d03f      	beq.n	8006468 <_vfiprintf_r+0x22c>
 80063e8:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <_vfiprintf_r+0x258>)
 80063ea:	bb1b      	cbnz	r3, 8006434 <_vfiprintf_r+0x1f8>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	3307      	adds	r3, #7
 80063f0:	f023 0307 	bic.w	r3, r3, #7
 80063f4:	3308      	adds	r3, #8
 80063f6:	9303      	str	r3, [sp, #12]
 80063f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fa:	443b      	add	r3, r7
 80063fc:	9309      	str	r3, [sp, #36]	; 0x24
 80063fe:	e767      	b.n	80062d0 <_vfiprintf_r+0x94>
 8006400:	fb0c 3202 	mla	r2, ip, r2, r3
 8006404:	460c      	mov	r4, r1
 8006406:	2001      	movs	r0, #1
 8006408:	e7a5      	b.n	8006356 <_vfiprintf_r+0x11a>
 800640a:	2300      	movs	r3, #0
 800640c:	3401      	adds	r4, #1
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	4619      	mov	r1, r3
 8006412:	f04f 0c0a 	mov.w	ip, #10
 8006416:	4620      	mov	r0, r4
 8006418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800641c:	3a30      	subs	r2, #48	; 0x30
 800641e:	2a09      	cmp	r2, #9
 8006420:	d903      	bls.n	800642a <_vfiprintf_r+0x1ee>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0c5      	beq.n	80063b2 <_vfiprintf_r+0x176>
 8006426:	9105      	str	r1, [sp, #20]
 8006428:	e7c3      	b.n	80063b2 <_vfiprintf_r+0x176>
 800642a:	fb0c 2101 	mla	r1, ip, r1, r2
 800642e:	4604      	mov	r4, r0
 8006430:	2301      	movs	r3, #1
 8006432:	e7f0      	b.n	8006416 <_vfiprintf_r+0x1da>
 8006434:	ab03      	add	r3, sp, #12
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	462a      	mov	r2, r5
 800643a:	4b17      	ldr	r3, [pc, #92]	; (8006498 <_vfiprintf_r+0x25c>)
 800643c:	a904      	add	r1, sp, #16
 800643e:	4630      	mov	r0, r6
 8006440:	f3af 8000 	nop.w
 8006444:	4607      	mov	r7, r0
 8006446:	1c78      	adds	r0, r7, #1
 8006448:	d1d6      	bne.n	80063f8 <_vfiprintf_r+0x1bc>
 800644a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644c:	07d9      	lsls	r1, r3, #31
 800644e:	d405      	bmi.n	800645c <_vfiprintf_r+0x220>
 8006450:	89ab      	ldrh	r3, [r5, #12]
 8006452:	059a      	lsls	r2, r3, #22
 8006454:	d402      	bmi.n	800645c <_vfiprintf_r+0x220>
 8006456:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006458:	f000 fc41 	bl	8006cde <__retarget_lock_release_recursive>
 800645c:	89ab      	ldrh	r3, [r5, #12]
 800645e:	065b      	lsls	r3, r3, #25
 8006460:	f53f af12 	bmi.w	8006288 <_vfiprintf_r+0x4c>
 8006464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006466:	e711      	b.n	800628c <_vfiprintf_r+0x50>
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	462a      	mov	r2, r5
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <_vfiprintf_r+0x25c>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	4630      	mov	r0, r6
 8006474:	f000 f880 	bl	8006578 <_printf_i>
 8006478:	e7e4      	b.n	8006444 <_vfiprintf_r+0x208>
 800647a:	bf00      	nop
 800647c:	080073dc 	.word	0x080073dc
 8006480:	080073fc 	.word	0x080073fc
 8006484:	080073bc 	.word	0x080073bc
 8006488:	08007389 	.word	0x08007389
 800648c:	0800738f 	.word	0x0800738f
 8006490:	08007393 	.word	0x08007393
 8006494:	00000000 	.word	0x00000000
 8006498:	08006217 	.word	0x08006217

0800649c <_printf_common>:
 800649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	4616      	mov	r6, r2
 80064a2:	4699      	mov	r9, r3
 80064a4:	688a      	ldr	r2, [r1, #8]
 80064a6:	690b      	ldr	r3, [r1, #16]
 80064a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bfb8      	it	lt
 80064b0:	4613      	movlt	r3, r2
 80064b2:	6033      	str	r3, [r6, #0]
 80064b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b8:	4607      	mov	r7, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	b10a      	cbz	r2, 80064c2 <_printf_common+0x26>
 80064be:	3301      	adds	r3, #1
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	0699      	lsls	r1, r3, #26
 80064c6:	bf42      	ittt	mi
 80064c8:	6833      	ldrmi	r3, [r6, #0]
 80064ca:	3302      	addmi	r3, #2
 80064cc:	6033      	strmi	r3, [r6, #0]
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	f015 0506 	ands.w	r5, r5, #6
 80064d4:	d106      	bne.n	80064e4 <_printf_common+0x48>
 80064d6:	f104 0a19 	add.w	sl, r4, #25
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	6832      	ldr	r2, [r6, #0]
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	dc26      	bgt.n	8006532 <_printf_common+0x96>
 80064e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e8:	1e13      	subs	r3, r2, #0
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	bf18      	it	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	0692      	lsls	r2, r2, #26
 80064f2:	d42b      	bmi.n	800654c <_printf_common+0xb0>
 80064f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f8:	4649      	mov	r1, r9
 80064fa:	4638      	mov	r0, r7
 80064fc:	47c0      	blx	r8
 80064fe:	3001      	adds	r0, #1
 8006500:	d01e      	beq.n	8006540 <_printf_common+0xa4>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	68e5      	ldr	r5, [r4, #12]
 8006506:	6832      	ldr	r2, [r6, #0]
 8006508:	f003 0306 	and.w	r3, r3, #6
 800650c:	2b04      	cmp	r3, #4
 800650e:	bf08      	it	eq
 8006510:	1aad      	subeq	r5, r5, r2
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	6922      	ldr	r2, [r4, #16]
 8006516:	bf0c      	ite	eq
 8006518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800651c:	2500      	movne	r5, #0
 800651e:	4293      	cmp	r3, r2
 8006520:	bfc4      	itt	gt
 8006522:	1a9b      	subgt	r3, r3, r2
 8006524:	18ed      	addgt	r5, r5, r3
 8006526:	2600      	movs	r6, #0
 8006528:	341a      	adds	r4, #26
 800652a:	42b5      	cmp	r5, r6
 800652c:	d11a      	bne.n	8006564 <_printf_common+0xc8>
 800652e:	2000      	movs	r0, #0
 8006530:	e008      	b.n	8006544 <_printf_common+0xa8>
 8006532:	2301      	movs	r3, #1
 8006534:	4652      	mov	r2, sl
 8006536:	4649      	mov	r1, r9
 8006538:	4638      	mov	r0, r7
 800653a:	47c0      	blx	r8
 800653c:	3001      	adds	r0, #1
 800653e:	d103      	bne.n	8006548 <_printf_common+0xac>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006548:	3501      	adds	r5, #1
 800654a:	e7c6      	b.n	80064da <_printf_common+0x3e>
 800654c:	18e1      	adds	r1, r4, r3
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	2030      	movs	r0, #48	; 0x30
 8006552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006556:	4422      	add	r2, r4
 8006558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800655c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006560:	3302      	adds	r3, #2
 8006562:	e7c7      	b.n	80064f4 <_printf_common+0x58>
 8006564:	2301      	movs	r3, #1
 8006566:	4622      	mov	r2, r4
 8006568:	4649      	mov	r1, r9
 800656a:	4638      	mov	r0, r7
 800656c:	47c0      	blx	r8
 800656e:	3001      	adds	r0, #1
 8006570:	d0e6      	beq.n	8006540 <_printf_common+0xa4>
 8006572:	3601      	adds	r6, #1
 8006574:	e7d9      	b.n	800652a <_printf_common+0x8e>
	...

08006578 <_printf_i>:
 8006578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	7e0f      	ldrb	r7, [r1, #24]
 800657e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006580:	2f78      	cmp	r7, #120	; 0x78
 8006582:	4691      	mov	r9, r2
 8006584:	4680      	mov	r8, r0
 8006586:	460c      	mov	r4, r1
 8006588:	469a      	mov	sl, r3
 800658a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800658e:	d807      	bhi.n	80065a0 <_printf_i+0x28>
 8006590:	2f62      	cmp	r7, #98	; 0x62
 8006592:	d80a      	bhi.n	80065aa <_printf_i+0x32>
 8006594:	2f00      	cmp	r7, #0
 8006596:	f000 80d8 	beq.w	800674a <_printf_i+0x1d2>
 800659a:	2f58      	cmp	r7, #88	; 0x58
 800659c:	f000 80a3 	beq.w	80066e6 <_printf_i+0x16e>
 80065a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a8:	e03a      	b.n	8006620 <_printf_i+0xa8>
 80065aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ae:	2b15      	cmp	r3, #21
 80065b0:	d8f6      	bhi.n	80065a0 <_printf_i+0x28>
 80065b2:	a101      	add	r1, pc, #4	; (adr r1, 80065b8 <_printf_i+0x40>)
 80065b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006625 	.word	0x08006625
 80065c0:	080065a1 	.word	0x080065a1
 80065c4:	080065a1 	.word	0x080065a1
 80065c8:	080065a1 	.word	0x080065a1
 80065cc:	080065a1 	.word	0x080065a1
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080065a1 	.word	0x080065a1
 80065d8:	080065a1 	.word	0x080065a1
 80065dc:	080065a1 	.word	0x080065a1
 80065e0:	080065a1 	.word	0x080065a1
 80065e4:	08006731 	.word	0x08006731
 80065e8:	08006655 	.word	0x08006655
 80065ec:	08006713 	.word	0x08006713
 80065f0:	080065a1 	.word	0x080065a1
 80065f4:	080065a1 	.word	0x080065a1
 80065f8:	08006753 	.word	0x08006753
 80065fc:	080065a1 	.word	0x080065a1
 8006600:	08006655 	.word	0x08006655
 8006604:	080065a1 	.word	0x080065a1
 8006608:	080065a1 	.word	0x080065a1
 800660c:	0800671b 	.word	0x0800671b
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800661c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006620:	2301      	movs	r3, #1
 8006622:	e0a3      	b.n	800676c <_printf_i+0x1f4>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	6829      	ldr	r1, [r5, #0]
 8006628:	0606      	lsls	r6, r0, #24
 800662a:	f101 0304 	add.w	r3, r1, #4
 800662e:	d50a      	bpl.n	8006646 <_printf_i+0xce>
 8006630:	680e      	ldr	r6, [r1, #0]
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	2e00      	cmp	r6, #0
 8006636:	da03      	bge.n	8006640 <_printf_i+0xc8>
 8006638:	232d      	movs	r3, #45	; 0x2d
 800663a:	4276      	negs	r6, r6
 800663c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006640:	485e      	ldr	r0, [pc, #376]	; (80067bc <_printf_i+0x244>)
 8006642:	230a      	movs	r3, #10
 8006644:	e019      	b.n	800667a <_printf_i+0x102>
 8006646:	680e      	ldr	r6, [r1, #0]
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800664e:	bf18      	it	ne
 8006650:	b236      	sxthne	r6, r6
 8006652:	e7ef      	b.n	8006634 <_printf_i+0xbc>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1d19      	adds	r1, r3, #4
 800665a:	6029      	str	r1, [r5, #0]
 800665c:	0601      	lsls	r1, r0, #24
 800665e:	d501      	bpl.n	8006664 <_printf_i+0xec>
 8006660:	681e      	ldr	r6, [r3, #0]
 8006662:	e002      	b.n	800666a <_printf_i+0xf2>
 8006664:	0646      	lsls	r6, r0, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0xe8>
 8006668:	881e      	ldrh	r6, [r3, #0]
 800666a:	4854      	ldr	r0, [pc, #336]	; (80067bc <_printf_i+0x244>)
 800666c:	2f6f      	cmp	r7, #111	; 0x6f
 800666e:	bf0c      	ite	eq
 8006670:	2308      	moveq	r3, #8
 8006672:	230a      	movne	r3, #10
 8006674:	2100      	movs	r1, #0
 8006676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800667a:	6865      	ldr	r5, [r4, #4]
 800667c:	60a5      	str	r5, [r4, #8]
 800667e:	2d00      	cmp	r5, #0
 8006680:	bfa2      	ittt	ge
 8006682:	6821      	ldrge	r1, [r4, #0]
 8006684:	f021 0104 	bicge.w	r1, r1, #4
 8006688:	6021      	strge	r1, [r4, #0]
 800668a:	b90e      	cbnz	r6, 8006690 <_printf_i+0x118>
 800668c:	2d00      	cmp	r5, #0
 800668e:	d04d      	beq.n	800672c <_printf_i+0x1b4>
 8006690:	4615      	mov	r5, r2
 8006692:	fbb6 f1f3 	udiv	r1, r6, r3
 8006696:	fb03 6711 	mls	r7, r3, r1, r6
 800669a:	5dc7      	ldrb	r7, [r0, r7]
 800669c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066a0:	4637      	mov	r7, r6
 80066a2:	42bb      	cmp	r3, r7
 80066a4:	460e      	mov	r6, r1
 80066a6:	d9f4      	bls.n	8006692 <_printf_i+0x11a>
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d10b      	bne.n	80066c4 <_printf_i+0x14c>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07de      	lsls	r6, r3, #31
 80066b0:	d508      	bpl.n	80066c4 <_printf_i+0x14c>
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	4299      	cmp	r1, r3
 80066b8:	bfde      	ittt	le
 80066ba:	2330      	movle	r3, #48	; 0x30
 80066bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80066c4:	1b52      	subs	r2, r2, r5
 80066c6:	6122      	str	r2, [r4, #16]
 80066c8:	f8cd a000 	str.w	sl, [sp]
 80066cc:	464b      	mov	r3, r9
 80066ce:	aa03      	add	r2, sp, #12
 80066d0:	4621      	mov	r1, r4
 80066d2:	4640      	mov	r0, r8
 80066d4:	f7ff fee2 	bl	800649c <_printf_common>
 80066d8:	3001      	adds	r0, #1
 80066da:	d14c      	bne.n	8006776 <_printf_i+0x1fe>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066e0:	b004      	add	sp, #16
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e6:	4835      	ldr	r0, [pc, #212]	; (80067bc <_printf_i+0x244>)
 80066e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066ec:	6829      	ldr	r1, [r5, #0]
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80066f4:	6029      	str	r1, [r5, #0]
 80066f6:	061d      	lsls	r5, r3, #24
 80066f8:	d514      	bpl.n	8006724 <_printf_i+0x1ac>
 80066fa:	07df      	lsls	r7, r3, #31
 80066fc:	bf44      	itt	mi
 80066fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006702:	6023      	strmi	r3, [r4, #0]
 8006704:	b91e      	cbnz	r6, 800670e <_printf_i+0x196>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f023 0320 	bic.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	2310      	movs	r3, #16
 8006710:	e7b0      	b.n	8006674 <_printf_i+0xfc>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	2378      	movs	r3, #120	; 0x78
 800671c:	4828      	ldr	r0, [pc, #160]	; (80067c0 <_printf_i+0x248>)
 800671e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006722:	e7e3      	b.n	80066ec <_printf_i+0x174>
 8006724:	0659      	lsls	r1, r3, #25
 8006726:	bf48      	it	mi
 8006728:	b2b6      	uxthmi	r6, r6
 800672a:	e7e6      	b.n	80066fa <_printf_i+0x182>
 800672c:	4615      	mov	r5, r2
 800672e:	e7bb      	b.n	80066a8 <_printf_i+0x130>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	6826      	ldr	r6, [r4, #0]
 8006734:	6961      	ldr	r1, [r4, #20]
 8006736:	1d18      	adds	r0, r3, #4
 8006738:	6028      	str	r0, [r5, #0]
 800673a:	0635      	lsls	r5, r6, #24
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	d501      	bpl.n	8006744 <_printf_i+0x1cc>
 8006740:	6019      	str	r1, [r3, #0]
 8006742:	e002      	b.n	800674a <_printf_i+0x1d2>
 8006744:	0670      	lsls	r0, r6, #25
 8006746:	d5fb      	bpl.n	8006740 <_printf_i+0x1c8>
 8006748:	8019      	strh	r1, [r3, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	4615      	mov	r5, r2
 8006750:	e7ba      	b.n	80066c8 <_printf_i+0x150>
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	1d1a      	adds	r2, r3, #4
 8006756:	602a      	str	r2, [r5, #0]
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	6862      	ldr	r2, [r4, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	4628      	mov	r0, r5
 8006760:	f7f9 fd0e 	bl	8000180 <memchr>
 8006764:	b108      	cbz	r0, 800676a <_printf_i+0x1f2>
 8006766:	1b40      	subs	r0, r0, r5
 8006768:	6060      	str	r0, [r4, #4]
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	2300      	movs	r3, #0
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006774:	e7a8      	b.n	80066c8 <_printf_i+0x150>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	462a      	mov	r2, r5
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d0ab      	beq.n	80066dc <_printf_i+0x164>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	079b      	lsls	r3, r3, #30
 8006788:	d413      	bmi.n	80067b2 <_printf_i+0x23a>
 800678a:	68e0      	ldr	r0, [r4, #12]
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	4298      	cmp	r0, r3
 8006790:	bfb8      	it	lt
 8006792:	4618      	movlt	r0, r3
 8006794:	e7a4      	b.n	80066e0 <_printf_i+0x168>
 8006796:	2301      	movs	r3, #1
 8006798:	4632      	mov	r2, r6
 800679a:	4649      	mov	r1, r9
 800679c:	4640      	mov	r0, r8
 800679e:	47d0      	blx	sl
 80067a0:	3001      	adds	r0, #1
 80067a2:	d09b      	beq.n	80066dc <_printf_i+0x164>
 80067a4:	3501      	adds	r5, #1
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	9903      	ldr	r1, [sp, #12]
 80067aa:	1a5b      	subs	r3, r3, r1
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dcf2      	bgt.n	8006796 <_printf_i+0x21e>
 80067b0:	e7eb      	b.n	800678a <_printf_i+0x212>
 80067b2:	2500      	movs	r5, #0
 80067b4:	f104 0619 	add.w	r6, r4, #25
 80067b8:	e7f5      	b.n	80067a6 <_printf_i+0x22e>
 80067ba:	bf00      	nop
 80067bc:	0800739a 	.word	0x0800739a
 80067c0:	080073ab 	.word	0x080073ab

080067c4 <_sbrk_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d06      	ldr	r5, [pc, #24]	; (80067e0 <_sbrk_r+0x1c>)
 80067c8:	2300      	movs	r3, #0
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fb fe16 	bl	8002400 <_sbrk>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d102      	bne.n	80067de <_sbrk_r+0x1a>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	b103      	cbz	r3, 80067de <_sbrk_r+0x1a>
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	20001e58 	.word	0x20001e58

080067e4 <__swbuf_r>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	460e      	mov	r6, r1
 80067e8:	4614      	mov	r4, r2
 80067ea:	4605      	mov	r5, r0
 80067ec:	b118      	cbz	r0, 80067f6 <__swbuf_r+0x12>
 80067ee:	6983      	ldr	r3, [r0, #24]
 80067f0:	b90b      	cbnz	r3, 80067f6 <__swbuf_r+0x12>
 80067f2:	f000 f9d5 	bl	8006ba0 <__sinit>
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <__swbuf_r+0x98>)
 80067f8:	429c      	cmp	r4, r3
 80067fa:	d12b      	bne.n	8006854 <__swbuf_r+0x70>
 80067fc:	686c      	ldr	r4, [r5, #4]
 80067fe:	69a3      	ldr	r3, [r4, #24]
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	071a      	lsls	r2, r3, #28
 8006806:	d52f      	bpl.n	8006868 <__swbuf_r+0x84>
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	b36b      	cbz	r3, 8006868 <__swbuf_r+0x84>
 800680c:	6923      	ldr	r3, [r4, #16]
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	1ac0      	subs	r0, r0, r3
 8006812:	6963      	ldr	r3, [r4, #20]
 8006814:	b2f6      	uxtb	r6, r6
 8006816:	4283      	cmp	r3, r0
 8006818:	4637      	mov	r7, r6
 800681a:	dc04      	bgt.n	8006826 <__swbuf_r+0x42>
 800681c:	4621      	mov	r1, r4
 800681e:	4628      	mov	r0, r5
 8006820:	f000 f92a 	bl	8006a78 <_fflush_r>
 8006824:	bb30      	cbnz	r0, 8006874 <__swbuf_r+0x90>
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	3b01      	subs	r3, #1
 800682a:	60a3      	str	r3, [r4, #8]
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	701e      	strb	r6, [r3, #0]
 8006834:	6963      	ldr	r3, [r4, #20]
 8006836:	3001      	adds	r0, #1
 8006838:	4283      	cmp	r3, r0
 800683a:	d004      	beq.n	8006846 <__swbuf_r+0x62>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	07db      	lsls	r3, r3, #31
 8006840:	d506      	bpl.n	8006850 <__swbuf_r+0x6c>
 8006842:	2e0a      	cmp	r6, #10
 8006844:	d104      	bne.n	8006850 <__swbuf_r+0x6c>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f000 f915 	bl	8006a78 <_fflush_r>
 800684e:	b988      	cbnz	r0, 8006874 <__swbuf_r+0x90>
 8006850:	4638      	mov	r0, r7
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <__swbuf_r+0x9c>)
 8006856:	429c      	cmp	r4, r3
 8006858:	d101      	bne.n	800685e <__swbuf_r+0x7a>
 800685a:	68ac      	ldr	r4, [r5, #8]
 800685c:	e7cf      	b.n	80067fe <__swbuf_r+0x1a>
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <__swbuf_r+0xa0>)
 8006860:	429c      	cmp	r4, r3
 8006862:	bf08      	it	eq
 8006864:	68ec      	ldreq	r4, [r5, #12]
 8006866:	e7ca      	b.n	80067fe <__swbuf_r+0x1a>
 8006868:	4621      	mov	r1, r4
 800686a:	4628      	mov	r0, r5
 800686c:	f000 f80c 	bl	8006888 <__swsetup_r>
 8006870:	2800      	cmp	r0, #0
 8006872:	d0cb      	beq.n	800680c <__swbuf_r+0x28>
 8006874:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006878:	e7ea      	b.n	8006850 <__swbuf_r+0x6c>
 800687a:	bf00      	nop
 800687c:	080073dc 	.word	0x080073dc
 8006880:	080073fc 	.word	0x080073fc
 8006884:	080073bc 	.word	0x080073bc

08006888 <__swsetup_r>:
 8006888:	4b32      	ldr	r3, [pc, #200]	; (8006954 <__swsetup_r+0xcc>)
 800688a:	b570      	push	{r4, r5, r6, lr}
 800688c:	681d      	ldr	r5, [r3, #0]
 800688e:	4606      	mov	r6, r0
 8006890:	460c      	mov	r4, r1
 8006892:	b125      	cbz	r5, 800689e <__swsetup_r+0x16>
 8006894:	69ab      	ldr	r3, [r5, #24]
 8006896:	b913      	cbnz	r3, 800689e <__swsetup_r+0x16>
 8006898:	4628      	mov	r0, r5
 800689a:	f000 f981 	bl	8006ba0 <__sinit>
 800689e:	4b2e      	ldr	r3, [pc, #184]	; (8006958 <__swsetup_r+0xd0>)
 80068a0:	429c      	cmp	r4, r3
 80068a2:	d10f      	bne.n	80068c4 <__swsetup_r+0x3c>
 80068a4:	686c      	ldr	r4, [r5, #4]
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ac:	0719      	lsls	r1, r3, #28
 80068ae:	d42c      	bmi.n	800690a <__swsetup_r+0x82>
 80068b0:	06dd      	lsls	r5, r3, #27
 80068b2:	d411      	bmi.n	80068d8 <__swsetup_r+0x50>
 80068b4:	2309      	movs	r3, #9
 80068b6:	6033      	str	r3, [r6, #0]
 80068b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c2:	e03e      	b.n	8006942 <__swsetup_r+0xba>
 80068c4:	4b25      	ldr	r3, [pc, #148]	; (800695c <__swsetup_r+0xd4>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d101      	bne.n	80068ce <__swsetup_r+0x46>
 80068ca:	68ac      	ldr	r4, [r5, #8]
 80068cc:	e7eb      	b.n	80068a6 <__swsetup_r+0x1e>
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <__swsetup_r+0xd8>)
 80068d0:	429c      	cmp	r4, r3
 80068d2:	bf08      	it	eq
 80068d4:	68ec      	ldreq	r4, [r5, #12]
 80068d6:	e7e6      	b.n	80068a6 <__swsetup_r+0x1e>
 80068d8:	0758      	lsls	r0, r3, #29
 80068da:	d512      	bpl.n	8006902 <__swsetup_r+0x7a>
 80068dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068de:	b141      	cbz	r1, 80068f2 <__swsetup_r+0x6a>
 80068e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068e4:	4299      	cmp	r1, r3
 80068e6:	d002      	beq.n	80068ee <__swsetup_r+0x66>
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff fa45 	bl	8005d78 <_free_r>
 80068ee:	2300      	movs	r3, #0
 80068f0:	6363      	str	r3, [r4, #52]	; 0x34
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	2300      	movs	r3, #0
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	f043 0308 	orr.w	r3, r3, #8
 8006908:	81a3      	strh	r3, [r4, #12]
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	b94b      	cbnz	r3, 8006922 <__swsetup_r+0x9a>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006918:	d003      	beq.n	8006922 <__swsetup_r+0x9a>
 800691a:	4621      	mov	r1, r4
 800691c:	4630      	mov	r0, r6
 800691e:	f000 fa05 	bl	8006d2c <__smakebuf_r>
 8006922:	89a0      	ldrh	r0, [r4, #12]
 8006924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006928:	f010 0301 	ands.w	r3, r0, #1
 800692c:	d00a      	beq.n	8006944 <__swsetup_r+0xbc>
 800692e:	2300      	movs	r3, #0
 8006930:	60a3      	str	r3, [r4, #8]
 8006932:	6963      	ldr	r3, [r4, #20]
 8006934:	425b      	negs	r3, r3
 8006936:	61a3      	str	r3, [r4, #24]
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	b943      	cbnz	r3, 800694e <__swsetup_r+0xc6>
 800693c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006940:	d1ba      	bne.n	80068b8 <__swsetup_r+0x30>
 8006942:	bd70      	pop	{r4, r5, r6, pc}
 8006944:	0781      	lsls	r1, r0, #30
 8006946:	bf58      	it	pl
 8006948:	6963      	ldrpl	r3, [r4, #20]
 800694a:	60a3      	str	r3, [r4, #8]
 800694c:	e7f4      	b.n	8006938 <__swsetup_r+0xb0>
 800694e:	2000      	movs	r0, #0
 8006950:	e7f7      	b.n	8006942 <__swsetup_r+0xba>
 8006952:	bf00      	nop
 8006954:	20000014 	.word	0x20000014
 8006958:	080073dc 	.word	0x080073dc
 800695c:	080073fc 	.word	0x080073fc
 8006960:	080073bc 	.word	0x080073bc

08006964 <abort>:
 8006964:	b508      	push	{r3, lr}
 8006966:	2006      	movs	r0, #6
 8006968:	f000 fa9e 	bl	8006ea8 <raise>
 800696c:	2001      	movs	r0, #1
 800696e:	f7fb fcd4 	bl	800231a <_exit>
	...

08006974 <__sflush_r>:
 8006974:	898a      	ldrh	r2, [r1, #12]
 8006976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006978:	4605      	mov	r5, r0
 800697a:	0710      	lsls	r0, r2, #28
 800697c:	460c      	mov	r4, r1
 800697e:	d457      	bmi.n	8006a30 <__sflush_r+0xbc>
 8006980:	684b      	ldr	r3, [r1, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	dc04      	bgt.n	8006990 <__sflush_r+0x1c>
 8006986:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	dc01      	bgt.n	8006990 <__sflush_r+0x1c>
 800698c:	2000      	movs	r0, #0
 800698e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006992:	2e00      	cmp	r6, #0
 8006994:	d0fa      	beq.n	800698c <__sflush_r+0x18>
 8006996:	2300      	movs	r3, #0
 8006998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800699c:	682f      	ldr	r7, [r5, #0]
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	d032      	beq.n	8006a08 <__sflush_r+0x94>
 80069a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	075a      	lsls	r2, r3, #29
 80069a8:	d505      	bpl.n	80069b6 <__sflush_r+0x42>
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	1ac0      	subs	r0, r0, r3
 80069ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b0:	b10b      	cbz	r3, 80069b6 <__sflush_r+0x42>
 80069b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069b4:	1ac0      	subs	r0, r0, r3
 80069b6:	2300      	movs	r3, #0
 80069b8:	4602      	mov	r2, r0
 80069ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069bc:	6a21      	ldr	r1, [r4, #32]
 80069be:	4628      	mov	r0, r5
 80069c0:	47b0      	blx	r6
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	d106      	bne.n	80069d6 <__sflush_r+0x62>
 80069c8:	6829      	ldr	r1, [r5, #0]
 80069ca:	291d      	cmp	r1, #29
 80069cc:	d82c      	bhi.n	8006a28 <__sflush_r+0xb4>
 80069ce:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <__sflush_r+0x100>)
 80069d0:	40ca      	lsrs	r2, r1
 80069d2:	07d6      	lsls	r6, r2, #31
 80069d4:	d528      	bpl.n	8006a28 <__sflush_r+0xb4>
 80069d6:	2200      	movs	r2, #0
 80069d8:	6062      	str	r2, [r4, #4]
 80069da:	04d9      	lsls	r1, r3, #19
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	d504      	bpl.n	80069ec <__sflush_r+0x78>
 80069e2:	1c42      	adds	r2, r0, #1
 80069e4:	d101      	bne.n	80069ea <__sflush_r+0x76>
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	b903      	cbnz	r3, 80069ec <__sflush_r+0x78>
 80069ea:	6560      	str	r0, [r4, #84]	; 0x54
 80069ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ee:	602f      	str	r7, [r5, #0]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d0cb      	beq.n	800698c <__sflush_r+0x18>
 80069f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f8:	4299      	cmp	r1, r3
 80069fa:	d002      	beq.n	8006a02 <__sflush_r+0x8e>
 80069fc:	4628      	mov	r0, r5
 80069fe:	f7ff f9bb 	bl	8005d78 <_free_r>
 8006a02:	2000      	movs	r0, #0
 8006a04:	6360      	str	r0, [r4, #52]	; 0x34
 8006a06:	e7c2      	b.n	800698e <__sflush_r+0x1a>
 8006a08:	6a21      	ldr	r1, [r4, #32]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b0      	blx	r6
 8006a10:	1c41      	adds	r1, r0, #1
 8006a12:	d1c7      	bne.n	80069a4 <__sflush_r+0x30>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0c4      	beq.n	80069a4 <__sflush_r+0x30>
 8006a1a:	2b1d      	cmp	r3, #29
 8006a1c:	d001      	beq.n	8006a22 <__sflush_r+0xae>
 8006a1e:	2b16      	cmp	r3, #22
 8006a20:	d101      	bne.n	8006a26 <__sflush_r+0xb2>
 8006a22:	602f      	str	r7, [r5, #0]
 8006a24:	e7b2      	b.n	800698c <__sflush_r+0x18>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	e7ae      	b.n	800698e <__sflush_r+0x1a>
 8006a30:	690f      	ldr	r7, [r1, #16]
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	d0aa      	beq.n	800698c <__sflush_r+0x18>
 8006a36:	0793      	lsls	r3, r2, #30
 8006a38:	680e      	ldr	r6, [r1, #0]
 8006a3a:	bf08      	it	eq
 8006a3c:	694b      	ldreq	r3, [r1, #20]
 8006a3e:	600f      	str	r7, [r1, #0]
 8006a40:	bf18      	it	ne
 8006a42:	2300      	movne	r3, #0
 8006a44:	1bf6      	subs	r6, r6, r7
 8006a46:	608b      	str	r3, [r1, #8]
 8006a48:	2e00      	cmp	r6, #0
 8006a4a:	dd9f      	ble.n	800698c <__sflush_r+0x18>
 8006a4c:	6a21      	ldr	r1, [r4, #32]
 8006a4e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a52:	4633      	mov	r3, r6
 8006a54:	463a      	mov	r2, r7
 8006a56:	4628      	mov	r0, r5
 8006a58:	47e0      	blx	ip
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	dc06      	bgt.n	8006a6c <__sflush_r+0xf8>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a6a:	e790      	b.n	800698e <__sflush_r+0x1a>
 8006a6c:	4407      	add	r7, r0
 8006a6e:	1a36      	subs	r6, r6, r0
 8006a70:	e7ea      	b.n	8006a48 <__sflush_r+0xd4>
 8006a72:	bf00      	nop
 8006a74:	20400001 	.word	0x20400001

08006a78 <_fflush_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	690b      	ldr	r3, [r1, #16]
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	b913      	cbnz	r3, 8006a88 <_fflush_r+0x10>
 8006a82:	2500      	movs	r5, #0
 8006a84:	4628      	mov	r0, r5
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	b118      	cbz	r0, 8006a92 <_fflush_r+0x1a>
 8006a8a:	6983      	ldr	r3, [r0, #24]
 8006a8c:	b90b      	cbnz	r3, 8006a92 <_fflush_r+0x1a>
 8006a8e:	f000 f887 	bl	8006ba0 <__sinit>
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <_fflush_r+0x6c>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	d11b      	bne.n	8006ad0 <_fflush_r+0x58>
 8006a98:	686c      	ldr	r4, [r5, #4]
 8006a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0ef      	beq.n	8006a82 <_fflush_r+0xa>
 8006aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aa4:	07d0      	lsls	r0, r2, #31
 8006aa6:	d404      	bmi.n	8006ab2 <_fflush_r+0x3a>
 8006aa8:	0599      	lsls	r1, r3, #22
 8006aaa:	d402      	bmi.n	8006ab2 <_fflush_r+0x3a>
 8006aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aae:	f000 f915 	bl	8006cdc <__retarget_lock_acquire_recursive>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	f7ff ff5d 	bl	8006974 <__sflush_r>
 8006aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006abc:	07da      	lsls	r2, r3, #31
 8006abe:	4605      	mov	r5, r0
 8006ac0:	d4e0      	bmi.n	8006a84 <_fflush_r+0xc>
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	059b      	lsls	r3, r3, #22
 8006ac6:	d4dd      	bmi.n	8006a84 <_fflush_r+0xc>
 8006ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aca:	f000 f908 	bl	8006cde <__retarget_lock_release_recursive>
 8006ace:	e7d9      	b.n	8006a84 <_fflush_r+0xc>
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <_fflush_r+0x70>)
 8006ad2:	429c      	cmp	r4, r3
 8006ad4:	d101      	bne.n	8006ada <_fflush_r+0x62>
 8006ad6:	68ac      	ldr	r4, [r5, #8]
 8006ad8:	e7df      	b.n	8006a9a <_fflush_r+0x22>
 8006ada:	4b04      	ldr	r3, [pc, #16]	; (8006aec <_fflush_r+0x74>)
 8006adc:	429c      	cmp	r4, r3
 8006ade:	bf08      	it	eq
 8006ae0:	68ec      	ldreq	r4, [r5, #12]
 8006ae2:	e7da      	b.n	8006a9a <_fflush_r+0x22>
 8006ae4:	080073dc 	.word	0x080073dc
 8006ae8:	080073fc 	.word	0x080073fc
 8006aec:	080073bc 	.word	0x080073bc

08006af0 <std>:
 8006af0:	2300      	movs	r3, #0
 8006af2:	b510      	push	{r4, lr}
 8006af4:	4604      	mov	r4, r0
 8006af6:	e9c0 3300 	strd	r3, r3, [r0]
 8006afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006afe:	6083      	str	r3, [r0, #8]
 8006b00:	8181      	strh	r1, [r0, #12]
 8006b02:	6643      	str	r3, [r0, #100]	; 0x64
 8006b04:	81c2      	strh	r2, [r0, #14]
 8006b06:	6183      	str	r3, [r0, #24]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	305c      	adds	r0, #92	; 0x5c
 8006b0e:	f7fe ffc9 	bl	8005aa4 <memset>
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <std+0x38>)
 8006b14:	6263      	str	r3, [r4, #36]	; 0x24
 8006b16:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <std+0x3c>)
 8006b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <std+0x40>)
 8006b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <std+0x44>)
 8006b20:	6224      	str	r4, [r4, #32]
 8006b22:	6323      	str	r3, [r4, #48]	; 0x30
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	bf00      	nop
 8006b28:	08006ee1 	.word	0x08006ee1
 8006b2c:	08006f03 	.word	0x08006f03
 8006b30:	08006f3b 	.word	0x08006f3b
 8006b34:	08006f5f 	.word	0x08006f5f

08006b38 <_cleanup_r>:
 8006b38:	4901      	ldr	r1, [pc, #4]	; (8006b40 <_cleanup_r+0x8>)
 8006b3a:	f000 b8af 	b.w	8006c9c <_fwalk_reent>
 8006b3e:	bf00      	nop
 8006b40:	08006a79 	.word	0x08006a79

08006b44 <__sfmoreglue>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	2268      	movs	r2, #104	; 0x68
 8006b48:	1e4d      	subs	r5, r1, #1
 8006b4a:	4355      	muls	r5, r2
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b52:	f7ff f97b 	bl	8005e4c <_malloc_r>
 8006b56:	4604      	mov	r4, r0
 8006b58:	b140      	cbz	r0, 8006b6c <__sfmoreglue+0x28>
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b60:	300c      	adds	r0, #12
 8006b62:	60a0      	str	r0, [r4, #8]
 8006b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b68:	f7fe ff9c 	bl	8005aa4 <memset>
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	bd70      	pop	{r4, r5, r6, pc}

08006b70 <__sfp_lock_acquire>:
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <__sfp_lock_acquire+0x8>)
 8006b72:	f000 b8b3 	b.w	8006cdc <__retarget_lock_acquire_recursive>
 8006b76:	bf00      	nop
 8006b78:	20001e55 	.word	0x20001e55

08006b7c <__sfp_lock_release>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	; (8006b84 <__sfp_lock_release+0x8>)
 8006b7e:	f000 b8ae 	b.w	8006cde <__retarget_lock_release_recursive>
 8006b82:	bf00      	nop
 8006b84:	20001e55 	.word	0x20001e55

08006b88 <__sinit_lock_acquire>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__sinit_lock_acquire+0x8>)
 8006b8a:	f000 b8a7 	b.w	8006cdc <__retarget_lock_acquire_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20001e56 	.word	0x20001e56

08006b94 <__sinit_lock_release>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__sinit_lock_release+0x8>)
 8006b96:	f000 b8a2 	b.w	8006cde <__retarget_lock_release_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	20001e56 	.word	0x20001e56

08006ba0 <__sinit>:
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	f7ff fff0 	bl	8006b88 <__sinit_lock_acquire>
 8006ba8:	69a3      	ldr	r3, [r4, #24]
 8006baa:	b11b      	cbz	r3, 8006bb4 <__sinit+0x14>
 8006bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb0:	f7ff bff0 	b.w	8006b94 <__sinit_lock_release>
 8006bb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8006bba:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <__sinit+0x68>)
 8006bbc:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <__sinit+0x6c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	bf04      	itt	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	61a3      	streq	r3, [r4, #24]
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 f820 	bl	8006c10 <__sfp>
 8006bd0:	6060      	str	r0, [r4, #4]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 f81c 	bl	8006c10 <__sfp>
 8006bd8:	60a0      	str	r0, [r4, #8]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f818 	bl	8006c10 <__sfp>
 8006be0:	2200      	movs	r2, #0
 8006be2:	60e0      	str	r0, [r4, #12]
 8006be4:	2104      	movs	r1, #4
 8006be6:	6860      	ldr	r0, [r4, #4]
 8006be8:	f7ff ff82 	bl	8006af0 <std>
 8006bec:	68a0      	ldr	r0, [r4, #8]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	2109      	movs	r1, #9
 8006bf2:	f7ff ff7d 	bl	8006af0 <std>
 8006bf6:	68e0      	ldr	r0, [r4, #12]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	2112      	movs	r1, #18
 8006bfc:	f7ff ff78 	bl	8006af0 <std>
 8006c00:	2301      	movs	r3, #1
 8006c02:	61a3      	str	r3, [r4, #24]
 8006c04:	e7d2      	b.n	8006bac <__sinit+0xc>
 8006c06:	bf00      	nop
 8006c08:	080071d4 	.word	0x080071d4
 8006c0c:	08006b39 	.word	0x08006b39

08006c10 <__sfp>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	4607      	mov	r7, r0
 8006c14:	f7ff ffac 	bl	8006b70 <__sfp_lock_acquire>
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <__sfp+0x84>)
 8006c1a:	681e      	ldr	r6, [r3, #0]
 8006c1c:	69b3      	ldr	r3, [r6, #24]
 8006c1e:	b913      	cbnz	r3, 8006c26 <__sfp+0x16>
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7ff ffbd 	bl	8006ba0 <__sinit>
 8006c26:	3648      	adds	r6, #72	; 0x48
 8006c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	d503      	bpl.n	8006c38 <__sfp+0x28>
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	b30b      	cbz	r3, 8006c78 <__sfp+0x68>
 8006c34:	6836      	ldr	r6, [r6, #0]
 8006c36:	e7f7      	b.n	8006c28 <__sfp+0x18>
 8006c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c3c:	b9d5      	cbnz	r5, 8006c74 <__sfp+0x64>
 8006c3e:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <__sfp+0x88>)
 8006c40:	60e3      	str	r3, [r4, #12]
 8006c42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c46:	6665      	str	r5, [r4, #100]	; 0x64
 8006c48:	f000 f847 	bl	8006cda <__retarget_lock_init_recursive>
 8006c4c:	f7ff ff96 	bl	8006b7c <__sfp_lock_release>
 8006c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c58:	6025      	str	r5, [r4, #0]
 8006c5a:	61a5      	str	r5, [r4, #24]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c64:	f7fe ff1e 	bl	8005aa4 <memset>
 8006c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c70:	4620      	mov	r0, r4
 8006c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c74:	3468      	adds	r4, #104	; 0x68
 8006c76:	e7d9      	b.n	8006c2c <__sfp+0x1c>
 8006c78:	2104      	movs	r1, #4
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	f7ff ff62 	bl	8006b44 <__sfmoreglue>
 8006c80:	4604      	mov	r4, r0
 8006c82:	6030      	str	r0, [r6, #0]
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d1d5      	bne.n	8006c34 <__sfp+0x24>
 8006c88:	f7ff ff78 	bl	8006b7c <__sfp_lock_release>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	e7ee      	b.n	8006c70 <__sfp+0x60>
 8006c92:	bf00      	nop
 8006c94:	080071d4 	.word	0x080071d4
 8006c98:	ffff0001 	.word	0xffff0001

08006c9c <_fwalk_reent>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	4688      	mov	r8, r1
 8006ca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ca8:	2700      	movs	r7, #0
 8006caa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cae:	f1b9 0901 	subs.w	r9, r9, #1
 8006cb2:	d505      	bpl.n	8006cc0 <_fwalk_reent+0x24>
 8006cb4:	6824      	ldr	r4, [r4, #0]
 8006cb6:	2c00      	cmp	r4, #0
 8006cb8:	d1f7      	bne.n	8006caa <_fwalk_reent+0xe>
 8006cba:	4638      	mov	r0, r7
 8006cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc0:	89ab      	ldrh	r3, [r5, #12]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d907      	bls.n	8006cd6 <_fwalk_reent+0x3a>
 8006cc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	d003      	beq.n	8006cd6 <_fwalk_reent+0x3a>
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	47c0      	blx	r8
 8006cd4:	4307      	orrs	r7, r0
 8006cd6:	3568      	adds	r5, #104	; 0x68
 8006cd8:	e7e9      	b.n	8006cae <_fwalk_reent+0x12>

08006cda <__retarget_lock_init_recursive>:
 8006cda:	4770      	bx	lr

08006cdc <__retarget_lock_acquire_recursive>:
 8006cdc:	4770      	bx	lr

08006cde <__retarget_lock_release_recursive>:
 8006cde:	4770      	bx	lr

08006ce0 <__swhatbuf_r>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	460e      	mov	r6, r1
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	b096      	sub	sp, #88	; 0x58
 8006cec:	4614      	mov	r4, r2
 8006cee:	461d      	mov	r5, r3
 8006cf0:	da08      	bge.n	8006d04 <__swhatbuf_r+0x24>
 8006cf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	602a      	str	r2, [r5, #0]
 8006cfa:	061a      	lsls	r2, r3, #24
 8006cfc:	d410      	bmi.n	8006d20 <__swhatbuf_r+0x40>
 8006cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d02:	e00e      	b.n	8006d22 <__swhatbuf_r+0x42>
 8006d04:	466a      	mov	r2, sp
 8006d06:	f000 f951 	bl	8006fac <_fstat_r>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	dbf1      	blt.n	8006cf2 <__swhatbuf_r+0x12>
 8006d0e:	9a01      	ldr	r2, [sp, #4]
 8006d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d18:	425a      	negs	r2, r3
 8006d1a:	415a      	adcs	r2, r3
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	e7ee      	b.n	8006cfe <__swhatbuf_r+0x1e>
 8006d20:	2340      	movs	r3, #64	; 0x40
 8006d22:	2000      	movs	r0, #0
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	b016      	add	sp, #88	; 0x58
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d2c <__smakebuf_r>:
 8006d2c:	898b      	ldrh	r3, [r1, #12]
 8006d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d30:	079d      	lsls	r5, r3, #30
 8006d32:	4606      	mov	r6, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	d507      	bpl.n	8006d48 <__smakebuf_r+0x1c>
 8006d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	2301      	movs	r3, #1
 8006d42:	6163      	str	r3, [r4, #20]
 8006d44:	b002      	add	sp, #8
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	ab01      	add	r3, sp, #4
 8006d4a:	466a      	mov	r2, sp
 8006d4c:	f7ff ffc8 	bl	8006ce0 <__swhatbuf_r>
 8006d50:	9900      	ldr	r1, [sp, #0]
 8006d52:	4605      	mov	r5, r0
 8006d54:	4630      	mov	r0, r6
 8006d56:	f7ff f879 	bl	8005e4c <_malloc_r>
 8006d5a:	b948      	cbnz	r0, 8006d70 <__smakebuf_r+0x44>
 8006d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d4ef      	bmi.n	8006d44 <__smakebuf_r+0x18>
 8006d64:	f023 0303 	bic.w	r3, r3, #3
 8006d68:	f043 0302 	orr.w	r3, r3, #2
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	e7e3      	b.n	8006d38 <__smakebuf_r+0xc>
 8006d70:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <__smakebuf_r+0x7c>)
 8006d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	6020      	str	r0, [r4, #0]
 8006d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	6163      	str	r3, [r4, #20]
 8006d82:	9b01      	ldr	r3, [sp, #4]
 8006d84:	6120      	str	r0, [r4, #16]
 8006d86:	b15b      	cbz	r3, 8006da0 <__smakebuf_r+0x74>
 8006d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f000 f91f 	bl	8006fd0 <_isatty_r>
 8006d92:	b128      	cbz	r0, 8006da0 <__smakebuf_r+0x74>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	89a0      	ldrh	r0, [r4, #12]
 8006da2:	4305      	orrs	r5, r0
 8006da4:	81a5      	strh	r5, [r4, #12]
 8006da6:	e7cd      	b.n	8006d44 <__smakebuf_r+0x18>
 8006da8:	08006b39 	.word	0x08006b39

08006dac <memmove>:
 8006dac:	4288      	cmp	r0, r1
 8006dae:	b510      	push	{r4, lr}
 8006db0:	eb01 0402 	add.w	r4, r1, r2
 8006db4:	d902      	bls.n	8006dbc <memmove+0x10>
 8006db6:	4284      	cmp	r4, r0
 8006db8:	4623      	mov	r3, r4
 8006dba:	d807      	bhi.n	8006dcc <memmove+0x20>
 8006dbc:	1e43      	subs	r3, r0, #1
 8006dbe:	42a1      	cmp	r1, r4
 8006dc0:	d008      	beq.n	8006dd4 <memmove+0x28>
 8006dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dca:	e7f8      	b.n	8006dbe <memmove+0x12>
 8006dcc:	4402      	add	r2, r0
 8006dce:	4601      	mov	r1, r0
 8006dd0:	428a      	cmp	r2, r1
 8006dd2:	d100      	bne.n	8006dd6 <memmove+0x2a>
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dde:	e7f7      	b.n	8006dd0 <memmove+0x24>

08006de0 <__malloc_lock>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__malloc_lock+0x8>)
 8006de2:	f7ff bf7b 	b.w	8006cdc <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	20001e54 	.word	0x20001e54

08006dec <__malloc_unlock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_unlock+0x8>)
 8006dee:	f7ff bf76 	b.w	8006cde <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	20001e54 	.word	0x20001e54

08006df8 <_realloc_r>:
 8006df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	4614      	mov	r4, r2
 8006e00:	460e      	mov	r6, r1
 8006e02:	b921      	cbnz	r1, 8006e0e <_realloc_r+0x16>
 8006e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e08:	4611      	mov	r1, r2
 8006e0a:	f7ff b81f 	b.w	8005e4c <_malloc_r>
 8006e0e:	b92a      	cbnz	r2, 8006e1c <_realloc_r+0x24>
 8006e10:	f7fe ffb2 	bl	8005d78 <_free_r>
 8006e14:	4625      	mov	r5, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1c:	f000 f8fa 	bl	8007014 <_malloc_usable_size_r>
 8006e20:	4284      	cmp	r4, r0
 8006e22:	4607      	mov	r7, r0
 8006e24:	d802      	bhi.n	8006e2c <_realloc_r+0x34>
 8006e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e2a:	d812      	bhi.n	8006e52 <_realloc_r+0x5a>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f7ff f80c 	bl	8005e4c <_malloc_r>
 8006e34:	4605      	mov	r5, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d0ed      	beq.n	8006e16 <_realloc_r+0x1e>
 8006e3a:	42bc      	cmp	r4, r7
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	4631      	mov	r1, r6
 8006e40:	bf28      	it	cs
 8006e42:	463a      	movcs	r2, r7
 8006e44:	f7fe fe20 	bl	8005a88 <memcpy>
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	f7fe ff94 	bl	8005d78 <_free_r>
 8006e50:	e7e1      	b.n	8006e16 <_realloc_r+0x1e>
 8006e52:	4635      	mov	r5, r6
 8006e54:	e7df      	b.n	8006e16 <_realloc_r+0x1e>

08006e56 <_raise_r>:
 8006e56:	291f      	cmp	r1, #31
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	d904      	bls.n	8006e6a <_raise_r+0x14>
 8006e60:	2316      	movs	r3, #22
 8006e62:	6003      	str	r3, [r0, #0]
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e68:	bd38      	pop	{r3, r4, r5, pc}
 8006e6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e6c:	b112      	cbz	r2, 8006e74 <_raise_r+0x1e>
 8006e6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e72:	b94b      	cbnz	r3, 8006e88 <_raise_r+0x32>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 f831 	bl	8006edc <_getpid_r>
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	4620      	mov	r0, r4
 8006e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e84:	f000 b818 	b.w	8006eb8 <_kill_r>
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d00a      	beq.n	8006ea2 <_raise_r+0x4c>
 8006e8c:	1c59      	adds	r1, r3, #1
 8006e8e:	d103      	bne.n	8006e98 <_raise_r+0x42>
 8006e90:	2316      	movs	r3, #22
 8006e92:	6003      	str	r3, [r0, #0]
 8006e94:	2001      	movs	r0, #1
 8006e96:	e7e7      	b.n	8006e68 <_raise_r+0x12>
 8006e98:	2400      	movs	r4, #0
 8006e9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	4798      	blx	r3
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e7e0      	b.n	8006e68 <_raise_r+0x12>
	...

08006ea8 <raise>:
 8006ea8:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <raise+0xc>)
 8006eaa:	4601      	mov	r1, r0
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	f7ff bfd2 	b.w	8006e56 <_raise_r>
 8006eb2:	bf00      	nop
 8006eb4:	20000014 	.word	0x20000014

08006eb8 <_kill_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4d07      	ldr	r5, [pc, #28]	; (8006ed8 <_kill_r+0x20>)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	f7fb fa18 	bl	80022fa <_kill>
 8006eca:	1c43      	adds	r3, r0, #1
 8006ecc:	d102      	bne.n	8006ed4 <_kill_r+0x1c>
 8006ece:	682b      	ldr	r3, [r5, #0]
 8006ed0:	b103      	cbz	r3, 8006ed4 <_kill_r+0x1c>
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	bd38      	pop	{r3, r4, r5, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20001e58 	.word	0x20001e58

08006edc <_getpid_r>:
 8006edc:	f7fb ba06 	b.w	80022ec <_getpid>

08006ee0 <__sread>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee8:	f000 f89c 	bl	8007024 <_read_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	bfab      	itete	ge
 8006ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef4:	181b      	addge	r3, r3, r0
 8006ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006efa:	bfac      	ite	ge
 8006efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006efe:	81a3      	strhlt	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__swrite>:
 8006f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f06:	461f      	mov	r7, r3
 8006f08:	898b      	ldrh	r3, [r1, #12]
 8006f0a:	05db      	lsls	r3, r3, #23
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4616      	mov	r6, r2
 8006f12:	d505      	bpl.n	8006f20 <__swrite+0x1e>
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	2302      	movs	r3, #2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f000 f868 	bl	8006ff0 <_lseek_r>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	f000 b817 	b.w	8006f68 <_write_r>

08006f3a <__sseek>:
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 f855 	bl	8006ff0 <_lseek_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	bf15      	itete	ne
 8006f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f56:	81a3      	strheq	r3, [r4, #12]
 8006f58:	bf18      	it	ne
 8006f5a:	81a3      	strhne	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__sclose>:
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 b813 	b.w	8006f8c <_close_r>
	...

08006f68 <_write_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	; (8006f88 <_write_r+0x20>)
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	4608      	mov	r0, r1
 8006f70:	4611      	mov	r1, r2
 8006f72:	2200      	movs	r2, #0
 8006f74:	602a      	str	r2, [r5, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f7fb f9f6 	bl	8002368 <_write>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_write_r+0x1e>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_write_r+0x1e>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	20001e58 	.word	0x20001e58

08006f8c <_close_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d06      	ldr	r5, [pc, #24]	; (8006fa8 <_close_r+0x1c>)
 8006f90:	2300      	movs	r3, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	f7fb fa02 	bl	80023a0 <_close>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_close_r+0x1a>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_close_r+0x1a>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	20001e58 	.word	0x20001e58

08006fac <_fstat_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4d07      	ldr	r5, [pc, #28]	; (8006fcc <_fstat_r+0x20>)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	f7fb f9fc 	bl	80023b6 <_fstat>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	d102      	bne.n	8006fc8 <_fstat_r+0x1c>
 8006fc2:	682b      	ldr	r3, [r5, #0]
 8006fc4:	b103      	cbz	r3, 8006fc8 <_fstat_r+0x1c>
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	bd38      	pop	{r3, r4, r5, pc}
 8006fca:	bf00      	nop
 8006fcc:	20001e58 	.word	0x20001e58

08006fd0 <_isatty_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d06      	ldr	r5, [pc, #24]	; (8006fec <_isatty_r+0x1c>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	f7fb f9fa 	bl	80023d4 <_isatty>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_isatty_r+0x1a>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_isatty_r+0x1a>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20001e58 	.word	0x20001e58

08006ff0 <_lseek_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	; (8007010 <_lseek_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7fb f9f2 	bl	80023e8 <_lseek>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_lseek_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_lseek_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20001e58 	.word	0x20001e58

08007014 <_malloc_usable_size_r>:
 8007014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007018:	1f18      	subs	r0, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfbc      	itt	lt
 800701e:	580b      	ldrlt	r3, [r1, r0]
 8007020:	18c0      	addlt	r0, r0, r3
 8007022:	4770      	bx	lr

08007024 <_read_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	; (8007044 <_read_r+0x20>)
 8007028:	4604      	mov	r4, r0
 800702a:	4608      	mov	r0, r1
 800702c:	4611      	mov	r1, r2
 800702e:	2200      	movs	r2, #0
 8007030:	602a      	str	r2, [r5, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f7fb f97b 	bl	800232e <_read>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_read_r+0x1e>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_read_r+0x1e>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20001e58 	.word	0x20001e58

08007048 <_init>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	bf00      	nop
 800704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704e:	bc08      	pop	{r3}
 8007050:	469e      	mov	lr, r3
 8007052:	4770      	bx	lr

08007054 <_fini>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	bf00      	nop
 8007058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705a:	bc08      	pop	{r3}
 800705c:	469e      	mov	lr, r3
 800705e:	4770      	bx	lr

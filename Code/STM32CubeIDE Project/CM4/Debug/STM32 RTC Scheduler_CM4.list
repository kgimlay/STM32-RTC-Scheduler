
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007018  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c8  080075c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d0  080075d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080075d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  20000078  08007650  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e5c  08007650  00021e5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161eb  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003499  00000000  00000000  0003628d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00039728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0003abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f339  00000000  00000000  0003bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bfd  00000000  00000000  0005b279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9e85  00000000  00000000  00070e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012acfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006128  00000000  00000000  0012ad4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007140 	.word	0x08007140

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007140 	.word	0x08007140

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:

/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <calendar_init+0x78>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 fc4a 	bl	8001dd8 <rtcAlarmControl_init>

	// initialize the calendar
	_calendarHead = -1;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <calendar_init+0x7c>)
 8000546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800054a:	601a      	str	r2, [r3, #0]
	_calendarFree = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <calendar_init+0x80>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	_currentEvent = -1;
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <calendar_init+0x84>)
 8000554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000558:	601a      	str	r2, [r3, #0]
	_isInEvent = false;
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <calendar_init+0x88>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e00d      	b.n	8000582 <calendar_init+0x52>
	{
		_calendarEvents[idx].next = idx + 1;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	1c59      	adds	r1, r3, #1
 800056a:	4814      	ldr	r0, [pc, #80]	; (80005bc <calendar_init+0x8c>)
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	4613      	mov	r3, r2
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4403      	add	r3, r0
 8000578:	3318      	adds	r3, #24
 800057a:	6019      	str	r1, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2bfe      	cmp	r3, #254	; 0xfe
 8000586:	ddee      	ble.n	8000566 <calendar_init+0x36>
	}
	_calendarEvents[MAX_NUM_EVENTS - 1].next = -1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <calendar_init+0x8c>)
 800058a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800058e:	461a      	mov	r2, r3
 8000590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000594:	f8c2 3bfc 	str.w	r3, [r2, #3068]	; 0xbfc

	// set init flag
	_isInit = true;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <calendar_init+0x90>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000098 	.word	0x20000098
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20001c9c 	.word	0x20001c9c
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20001ca0 	.word	0x20001ca0
 80005bc:	2000009c 	.word	0x2000009c
 80005c0:	20000094 	.word	0x20000094

080005c4 <calendar_start>:

/*
 *
 */
void calendar_start(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005ca:	1cfa      	adds	r2, r7, #3
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f9ec 	bl	80009b0 <getNextAlarm>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d02b      	beq.n	8000636 <calendar_start+0x72>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005de:	7ab8      	ldrb	r0, [r7, #10]
 80005e0:	7af9      	ldrb	r1, [r7, #11]
 80005e2:	7b3a      	ldrb	r2, [r7, #12]
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	f001 fd63 	bl	80020b0 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d01b      	beq.n	8000628 <calendar_start+0x64>
			if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	4914      	ldr	r1, [pc, #80]	; (8000644 <calendar_start+0x80>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	3308      	adds	r3, #8
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d009      	beq.n	800061a <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].event.start_callback)();
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	490e      	ldr	r1, [pc, #56]	; (8000644 <calendar_start+0x80>)
 800060a:	4613      	mov	r3, r2
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	3308      	adds	r3, #8
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <calendar_start+0x84>)
 800061e:	6013      	str	r3, [r2, #0]
			_isInEvent = true;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <calendar_start+0x88>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e002      	b.n	800062e <calendar_start+0x6a>
		}
		else
		{
			_isInEvent = false;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <calendar_start+0x88>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <calendar_start+0x8c>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 8000634:	e001      	b.n	800063a <calendar_start+0x76>
		diableAlarm_A();
 8000636:	f001 fdd7 	bl	80021e8 <diableAlarm_A>
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000009c 	.word	0x2000009c
 8000648:	20000008 	.word	0x20000008
 800064c:	20001ca0 	.word	0x20001ca0
 8000650:	20000095 	.word	0x20000095

08000654 <calendar_setDateTime>:

/*
 *
 */
void calendar_setDateTime(DateTime dateTime)
{
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
 800065a:	463b      	mov	r3, r7
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000660:	7838      	ldrb	r0, [r7, #0]
 8000662:	7879      	ldrb	r1, [r7, #1]
 8000664:	78bc      	ldrb	r4, [r7, #2]
 8000666:	78fd      	ldrb	r5, [r7, #3]
 8000668:	793b      	ldrb	r3, [r7, #4]
 800066a:	797a      	ldrb	r2, [r7, #5]
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	462b      	mov	r3, r5
 8000672:	4622      	mov	r2, r4
 8000674:	f001 fbbe 	bl	8001df4 <setDateTime>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bdb0      	pop	{r4, r5, r7, pc}

08000680 <calendar_getDateTime>:

/*
 *
 */
void calendar_getDateTime(DateTime* dateTime)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af02      	add	r7, sp, #8
 8000686:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	1c59      	adds	r1, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	1c9c      	adds	r4, r3, #2
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	1cdd      	adds	r5, r3, #3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3304      	adds	r3, #4
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	3205      	adds	r2, #5
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	462b      	mov	r3, r5
 80006a4:	4622      	mov	r2, r4
 80006a6:	f001 fc6f 	bl	8001f88 <getDateTime>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080006b4 <calendar_addEvent>:

/*
 *
 */
CalendarStatus calendar_addEvent(CalendarEvent *event)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	// add only if the calendar has been initialized
	if (_isInit)
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <calendar_addEvent+0x30>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d009      	beq.n	80006d8 <calendar_addEvent+0x24>
	{
		if (_addEvent(event))
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 fa9b 	bl	8000c00 <_addEvent>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <calendar_addEvent+0x20>
		{
			return CALENDAR_OKAY;
 80006d0:	2300      	movs	r3, #0
 80006d2:	e002      	b.n	80006da <calendar_addEvent+0x26>
		}

		else
		{
			return CALENDAR_FULL;
 80006d4:	2302      	movs	r3, #2
 80006d6:	e000      	b.n	80006da <calendar_addEvent+0x26>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDER_NOT_INIT;
 80006d8:	2301      	movs	r3, #1
	}
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000094 	.word	0x20000094

080006e8 <calendar_handleAlarm>:

/*
 *
 */
void calendar_handleAlarm(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 80006ee:	4b7a      	ldr	r3, [pc, #488]	; (80008d8 <calendar_handleAlarm+0x1f0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f000 80ea 	beq.w	80008ce <calendar_handleAlarm+0x1e6>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80006fa:	f107 0243 	add.w	r2, r7, #67	; 0x43
 80006fe:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000702:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f952 	bl	80009b0 <getNextAlarm>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	f000 80bf 	beq.w	8000892 <calendar_handleAlarm+0x1aa>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000714:	f897 004a 	ldrb.w	r0, [r7, #74]	; 0x4a
 8000718:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 800071c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000720:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000724:	f001 fcc4 	bl	80020b0 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 8000728:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800072c:	2b00      	cmp	r3, #0
 800072e:	d01c      	beq.n	800076a <calendar_handleAlarm+0x82>
 8000730:	4b6a      	ldr	r3, [pc, #424]	; (80008dc <calendar_handleAlarm+0x1f4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f083 0301 	eor.w	r3, r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d015      	beq.n	800076a <calendar_handleAlarm+0x82>

				// call start event callback
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 800073e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000740:	4967      	ldr	r1, [pc, #412]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 8000742:	4613      	mov	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	3308      	adds	r3, #8
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d061      	beq.n	8000818 <calendar_handleAlarm+0x130>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 8000754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000756:	4962      	ldr	r1, [pc, #392]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 8000758:	4613      	mov	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	1a9b      	subs	r3, r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	440b      	add	r3, r1
 8000762:	3308      	adds	r3, #8
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8000768:	e056      	b.n	8000818 <calendar_handleAlarm+0x130>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 800076a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800076e:	2b00      	cmp	r3, #0
 8000770:	d030      	beq.n	80007d4 <calendar_handleAlarm+0xec>
 8000772:	4b5a      	ldr	r3, [pc, #360]	; (80008dc <calendar_handleAlarm+0x1f4>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d02c      	beq.n	80007d4 <calendar_handleAlarm+0xec>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 800077a:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4958      	ldr	r1, [pc, #352]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 8000780:	4613      	mov	r3, r2
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00a      	beq.n	80007a8 <calendar_handleAlarm+0xc0>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 8000792:	4b54      	ldr	r3, [pc, #336]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4952      	ldr	r1, [pc, #328]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 8000798:	4613      	mov	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	440b      	add	r3, r1
 80007a2:	3314      	adds	r3, #20
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80007a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007aa:	494d      	ldr	r1, [pc, #308]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 80007ac:	4613      	mov	r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	3308      	adds	r3, #8
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d02c      	beq.n	8000818 <calendar_handleAlarm+0x130>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 80007be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007c0:	4947      	ldr	r1, [pc, #284]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	3308      	adds	r3, #8
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80007d2:	e021      	b.n	8000818 <calendar_handleAlarm+0x130>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 80007d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80007d8:	f083 0301 	eor.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d01a      	beq.n	8000818 <calendar_handleAlarm+0x130>
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <calendar_handleAlarm+0x1f4>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d016      	beq.n	8000818 <calendar_handleAlarm+0x130>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	493c      	ldr	r1, [pc, #240]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 80007f0:	4613      	mov	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	3314      	adds	r3, #20
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00a      	beq.n	8000818 <calendar_handleAlarm+0x130>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4936      	ldr	r1, [pc, #216]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 8000808:	4613      	mov	r3, r2
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	1a9b      	subs	r3, r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	3314      	adds	r3, #20
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4798      	blx	r3

			// else, alarm is just being reset for next month/year


			// update current event
			_currentEvent = currentEventIdx;
 8000818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800081a:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 800081c:	6013      	str	r3, [r2, #0]
			if (withinEvent)
 800081e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000822:	2b00      	cmp	r3, #0
 8000824:	d01b      	beq.n	800085e <calendar_handleAlarm+0x176>
			{
				_isInEvent = true;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <calendar_handleAlarm+0x1f4>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
				// for testing purposes
				char body[UART_MESSAGE_BODY_SIZE] = {0};
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2238      	movs	r2, #56	; 0x38
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f005 f9af 	bl	8005b9c <memset>
				snprintf(body, UART_MESSAGE_SIZE, "IN EVENT %d", _currentEvent+1);
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	1d38      	adds	r0, r7, #4
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <calendar_handleAlarm+0x200>)
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	f005 f9af 	bl	8005bac <sniprintf>
				tell("MESG", body);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4826      	ldr	r0, [pc, #152]	; (80008ec <calendar_handleAlarm+0x204>)
 8000854:	f000 fca8 	bl	80011a8 <tell>
				session_cycle();
 8000858:	f000 fc8e 	bl	8001178 <session_cycle>
 800085c:	e034      	b.n	80008c8 <calendar_handleAlarm+0x1e0>
			}
			else
			{
				_isInEvent = false;
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <calendar_handleAlarm+0x1f4>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
				// for testing purposes
				char body[UART_MESSAGE_BODY_SIZE] = {0};
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2238      	movs	r2, #56	; 0x38
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f005 f993 	bl	8005b9c <memset>
				snprintf(body, UART_MESSAGE_SIZE, "NOT IN EVENT");
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <calendar_handleAlarm+0x208>)
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	4618      	mov	r0, r3
 800087e:	f005 f995 	bl	8005bac <sniprintf>
				tell("MESG", body);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4819      	ldr	r0, [pc, #100]	; (80008ec <calendar_handleAlarm+0x204>)
 8000888:	f000 fc8e 	bl	80011a8 <tell>
				session_cycle();
 800088c:	f000 fc74 	bl	8001178 <session_cycle>
 8000890:	e01a      	b.n	80008c8 <calendar_handleAlarm+0x1e0>

		// if there is no alarm to set, disable the alarm and exit any events
		else {
//			diableAlarm_A();

			if (CURRENTLY_IN_EVENT) {
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <calendar_handleAlarm+0x1f4>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d016      	beq.n	80008c8 <calendar_handleAlarm+0x1e0>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4910      	ldr	r1, [pc, #64]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	3314      	adds	r3, #20
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00a      	beq.n	80008c8 <calendar_handleAlarm+0x1e0>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <calendar_handleAlarm+0x1fc>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	490a      	ldr	r1, [pc, #40]	; (80008e0 <calendar_handleAlarm+0x1f8>)
 80008b8:	4613      	mov	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	1a9b      	subs	r3, r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	3314      	adds	r3, #20
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <calendar_handleAlarm+0x1f0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	}
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000095 	.word	0x20000095
 80008dc:	20001ca0 	.word	0x20001ca0
 80008e0:	2000009c 	.word	0x2000009c
 80008e4:	20000008 	.word	0x20000008
 80008e8:	08007158 	.word	0x08007158
 80008ec:	08007164 	.word	0x08007164
 80008f0:	0800716c 	.word	0x0800716c

080008f4 <calendar_AlarmA_ISR>:

/*
 *
 */
void calendar_AlarmA_ISR(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <calendar_AlarmA_ISR+0x14>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000095 	.word	0x20000095

0800090c <compareDateTime>:
/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	f107 0408 	add.w	r4, r7, #8
 8000916:	e884 0003 	stmia.w	r4, {r0, r1}
 800091a:	4639      	mov	r1, r7
 800091c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000928:	f000 f80e 	bl	8000948 <dateTimeToSeconds>
 800092c:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 800092e:	463b      	mov	r3, r7
 8000930:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000934:	f000 f808 	bl	8000948 <dateTimeToSeconds>
 8000938:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	1ad3      	subs	r3, r2, r3
}
 8000940:	4618      	mov	r0, r3
 8000942:	371c      	adds	r7, #28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd90      	pop	{r4, r7, pc}

08000948 <dateTimeToSeconds>:

/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	463b      	mov	r3, r7
 8000950:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 8000958:	793b      	ldrb	r3, [r7, #4]
 800095a:	461a      	mov	r2, r3
 800095c:	4613      	mov	r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800096e:	fb01 f303 	mul.w	r3, r1, r3
 8000972:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000974:	78bb      	ldrb	r3, [r7, #2]
 8000976:	3b01      	subs	r3, #1
 8000978:	490a      	ldr	r1, [pc, #40]	; (80009a4 <dateTimeToSeconds+0x5c>)
 800097a:	fb01 f303 	mul.w	r3, r1, r3
 800097e:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000980:	787b      	ldrb	r3, [r7, #1]
 8000982:	3b01      	subs	r3, #1
 8000984:	4908      	ldr	r1, [pc, #32]	; (80009a8 <dateTimeToSeconds+0x60>)
 8000986:	fb01 f303 	mul.w	r3, r1, r3
 800098a:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 800098c:	783b      	ldrb	r3, [r7, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <dateTimeToSeconds+0x64>)
 8000992:	fb01 f303 	mul.w	r3, r1, r3
 8000996:	4413      	add	r3, r2
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	00015180 	.word	0x00015180
 80009a8:	00278d00 	.word	0x00278d00
 80009ac:	01da9c00 	.word	0x01da9c00

080009b0 <getNextAlarm>:

/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b08d      	sub	sp, #52	; 0x34
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
	bool nextAlarmFound = false;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	DateTime now = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	1cdc      	adds	r4, r3, #3
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	1c9a      	adds	r2, r3, #2
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	1c59      	adds	r1, r3, #1
 80009ec:	f107 001c 	add.w	r0, r7, #28
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	3305      	adds	r3, #5
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	3304      	adds	r3, #4
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	4623      	mov	r3, r4
 8000a02:	f001 fac1 	bl	8001f88 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = _calendarHead;
 8000a06:	4b7c      	ldr	r3, [pc, #496]	; (8000bf8 <getNextAlarm+0x248>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
	nextAlarmFound = false;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (eventIdx != -1)
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a18:	f000 80ce 	beq.w	8000bb8 <getNextAlarm+0x208>
	{
		while (eventIdx != -1 && !nextAlarmFound) {
 8000a1c:	e0c0      	b.n	8000ba0 <getNextAlarm+0x1f0>
			// test if before event
			if (compareDateTime(now, _calendarEvents[eventIdx].event.start) < 0)
 8000a1e:	4977      	ldr	r1, [pc, #476]	; (8000bfc <getNextAlarm+0x24c>)
 8000a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a22:	4613      	mov	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	cb0c      	ldmia	r3, {r2, r3}
 8000a2e:	f107 011c 	add.w	r1, r7, #28
 8000a32:	c903      	ldmia	r1, {r0, r1}
 8000a34:	f7ff ff6a 	bl	800090c <compareDateTime>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da41      	bge.n	8000ac2 <getNextAlarm+0x112>
			{
				// then the next alarm is the beginning of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.start.year;
 8000a3e:	496f      	ldr	r1, [pc, #444]	; (8000bfc <getNextAlarm+0x24c>)
 8000a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a42:	4613      	mov	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.start.month;
 8000a50:	496a      	ldr	r1, [pc, #424]	; (8000bfc <getNextAlarm+0x24c>)
 8000a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a54:	4613      	mov	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3301      	adds	r3, #1
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.start.day;
 8000a64:	4965      	ldr	r1, [pc, #404]	; (8000bfc <getNextAlarm+0x24c>)
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	4613      	mov	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	440b      	add	r3, r1
 8000a72:	3302      	adds	r3, #2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.start.hour;
 8000a78:	4960      	ldr	r1, [pc, #384]	; (8000bfc <getNextAlarm+0x24c>)
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	1a9b      	subs	r3, r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	3303      	adds	r3, #3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.start.minute;
 8000a8c:	495b      	ldr	r1, [pc, #364]	; (8000bfc <getNextAlarm+0x24c>)
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	440b      	add	r3, r1
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.start.second;
 8000aa0:	4956      	ldr	r1, [pc, #344]	; (8000bfc <getNextAlarm+0x24c>)
 8000aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	440b      	add	r3, r1
 8000aae:	3305      	adds	r3, #5
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = false;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e06e      	b.n	8000ba0 <getNextAlarm+0x1f0>
			}

			// test if within event
			else if(compareDateTime(now, _calendarEvents[eventIdx].event.start) >= 0
 8000ac2:	494e      	ldr	r1, [pc, #312]	; (8000bfc <getNextAlarm+0x24c>)
 8000ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	440b      	add	r3, r1
 8000ad0:	cb0c      	ldmia	r3, {r2, r3}
 8000ad2:	f107 011c 	add.w	r1, r7, #28
 8000ad6:	c903      	ldmia	r1, {r0, r1}
 8000ad8:	f7ff ff18 	bl	800090c <compareDateTime>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db54      	blt.n	8000b8c <getNextAlarm+0x1dc>
					&& compareDateTime(now, _calendarEvents[eventIdx].event.end) < 0)
 8000ae2:	4946      	ldr	r1, [pc, #280]	; (8000bfc <getNextAlarm+0x24c>)
 8000ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	440b      	add	r3, r1
 8000af0:	3308      	adds	r3, #8
 8000af2:	3304      	adds	r3, #4
 8000af4:	cb0c      	ldmia	r3, {r2, r3}
 8000af6:	f107 011c 	add.w	r1, r7, #28
 8000afa:	c903      	ldmia	r1, {r0, r1}
 8000afc:	f7ff ff06 	bl	800090c <compareDateTime>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da42      	bge.n	8000b8c <getNextAlarm+0x1dc>
			{
				// then the next alarm is the end of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.end.year;
 8000b06:	493d      	ldr	r1, [pc, #244]	; (8000bfc <getNextAlarm+0x24c>)
 8000b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	330c      	adds	r3, #12
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.end.month;
 8000b1a:	4938      	ldr	r1, [pc, #224]	; (8000bfc <getNextAlarm+0x24c>)
 8000b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1e:	4613      	mov	r3, r2
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	330d      	adds	r3, #13
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.end.day;
 8000b2e:	4933      	ldr	r1, [pc, #204]	; (8000bfc <getNextAlarm+0x24c>)
 8000b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b32:	4613      	mov	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	330e      	adds	r3, #14
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.end.hour;
 8000b42:	492e      	ldr	r1, [pc, #184]	; (8000bfc <getNextAlarm+0x24c>)
 8000b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b46:	4613      	mov	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	330f      	adds	r3, #15
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.end.minute;
 8000b56:	4929      	ldr	r1, [pc, #164]	; (8000bfc <getNextAlarm+0x24c>)
 8000b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	1a9b      	subs	r3, r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	3310      	adds	r3, #16
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.end.second;
 8000b6a:	4924      	ldr	r1, [pc, #144]	; (8000bfc <getNextAlarm+0x24c>)
 8000b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6e:	4613      	mov	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	1a9b      	subs	r3, r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	3311      	adds	r3, #17
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = true;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e009      	b.n	8000ba0 <getNextAlarm+0x1f0>
			}

			// traverse to next event
			else {
				eventIdx = _calendarEvents[eventIdx].next;
 8000b8c:	491b      	ldr	r1, [pc, #108]	; (8000bfc <getNextAlarm+0x24c>)
 8000b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b90:	4613      	mov	r3, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	440b      	add	r3, r1
 8000b9a:	3318      	adds	r3, #24
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
		while (eventIdx != -1 && !nextAlarmFound) {
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba6:	d007      	beq.n	8000bb8 <getNextAlarm+0x208>
 8000ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f47f af33 	bne.w	8000a1e <getNextAlarm+0x6e>
			}
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <getNextAlarm+0x226>
		dateTime = NULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	601a      	str	r2, [r3, #0]
		return false;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e00b      	b.n	8000bee <getNextAlarm+0x23e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	6010      	str	r0, [r2, #0]
 8000be2:	889b      	ldrh	r3, [r3, #4]
 8000be4:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = eventIdx;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bea:	601a      	str	r2, [r3, #0]
		return true;
 8000bec:	2301      	movs	r3, #1
	}
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	372c      	adds	r7, #44	; 0x2c
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	2000009c 	.word	0x2000009c

08000c00 <_addEvent>:

/*
 *
 */
bool _addEvent(CalendarEvent* event)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	int tempEndOfHead;

	// if the calendar is full, return early
	if (_calendarFree == -1)
 8000c08:	4b42      	ldr	r3, [pc, #264]	; (8000d14 <_addEvent+0x114>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c10:	d101      	bne.n	8000c16 <_addEvent+0x16>
	{
		return false;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e079      	b.n	8000d0a <_addEvent+0x10a>
	}

	// if the calendar is empty, insert at front
	if (_calendarHead == -1)
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <_addEvent+0x118>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c1e:	d128      	bne.n	8000c72 <_addEvent+0x72>
	{
		// copy event into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <_addEvent+0x114>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4a3b      	ldr	r2, [pc, #236]	; (8000d1c <_addEvent+0x11c>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f874 	bl	8000d20 <_copyEvent>

		// set the head
		_calendarHead = _calendarFree;
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <_addEvent+0x114>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a36      	ldr	r2, [pc, #216]	; (8000d18 <_addEvent+0x118>)
 8000c3e:	6013      	str	r3, [r2, #0]

		// set free to next free
		_calendarFree = _calendarEvents[_calendarFree].next;
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <_addEvent+0x114>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4935      	ldr	r1, [pc, #212]	; (8000d1c <_addEvent+0x11c>)
 8000c46:	4613      	mov	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3318      	adds	r3, #24
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <_addEvent+0x114>)
 8000c56:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[_calendarHead].next = -1;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <_addEvent+0x118>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	492f      	ldr	r1, [pc, #188]	; (8000d1c <_addEvent+0x11c>)
 8000c5e:	4613      	mov	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	3318      	adds	r3, #24
 8000c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e04a      	b.n	8000d08 <_addEvent+0x108>

	// if the calendar is not empty (or full), insert at end of list
	else
	{
		// find end of head
		tempEndOfHead = _calendarHead;
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <_addEvent+0x118>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000c78:	e009      	b.n	8000c8e <_addEvent+0x8e>
			tempEndOfHead = _calendarEvents[tempEndOfHead].next;
 8000c7a:	4928      	ldr	r1, [pc, #160]	; (8000d1c <_addEvent+0x11c>)
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	3318      	adds	r3, #24
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000c8e:	4923      	ldr	r1, [pc, #140]	; (8000d1c <_addEvent+0x11c>)
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4613      	mov	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca4:	d1e9      	bne.n	8000c7a <_addEvent+0x7a>

		// copy events into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <_addEvent+0x114>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4613      	mov	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	1a9b      	subs	r3, r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <_addEvent+0x11c>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f831 	bl	8000d20 <_copyEvent>

		// link into head list
		_calendarEvents[tempEndOfHead].next = _calendarFree;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_addEvent+0x114>)
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	4816      	ldr	r0, [pc, #88]	; (8000d1c <_addEvent+0x11c>)
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4403      	add	r3, r0
 8000cd0:	3318      	adds	r3, #24
 8000cd2:	6019      	str	r1, [r3, #0]
		tempEndOfHead = _calendarFree;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <_addEvent+0x114>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]

		// set free to next free
			_calendarFree = _calendarEvents[_calendarFree].next;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <_addEvent+0x114>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	490f      	ldr	r1, [pc, #60]	; (8000d1c <_addEvent+0x11c>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	3318      	adds	r3, #24
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <_addEvent+0x114>)
 8000cf0:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[tempEndOfHead].next = -1;
 8000cf2:	490a      	ldr	r1, [pc, #40]	; (8000d1c <_addEvent+0x11c>)
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	3318      	adds	r3, #24
 8000d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d06:	601a      	str	r2, [r3, #0]
	}

	// return okay
	return true;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20001c9c 	.word	0x20001c9c
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	2000009c 	.word	0x2000009c

08000d20 <_copyEvent>:

/*
 *
 */
void _copyEvent(CalendarEvent* to, CalendarEvent* from)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	785a      	ldrb	r2, [r3, #1]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	789a      	ldrb	r2, [r3, #2]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	78da      	ldrb	r2, [r3, #3]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	791a      	ldrb	r2, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	795a      	ldrb	r2, [r3, #5]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	609a      	str	r2, [r3, #8]
	to->end.year = from->end.year;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	7b1a      	ldrb	r2, [r3, #12]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	731a      	strb	r2, [r3, #12]
	to->end.month = from->end.month;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	7b5a      	ldrb	r2, [r3, #13]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	735a      	strb	r2, [r3, #13]
	to->end.day = from->end.day;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	7b9a      	ldrb	r2, [r3, #14]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	739a      	strb	r2, [r3, #14]
	to->end.hour = from->end.hour;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	7bda      	ldrb	r2, [r3, #15]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	73da      	strb	r2, [r3, #15]
	to->end.minute = from->end.minute;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	7c1a      	ldrb	r2, [r3, #16]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	741a      	strb	r2, [r3, #16]
	to->end.second = from->end.second;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	7c5a      	ldrb	r2, [r3, #17]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	745a      	strb	r2, [r3, #17]
	to->end_callback = from->end_callback;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	615a      	str	r2, [r3, #20]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	223c      	movs	r2, #60	; 0x3c
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 fedc 	bl	8005b80 <memcpy>
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3304      	adds	r3, #4
 8000dea:	223c      	movs	r2, #60	; 0x3c
 8000dec:	4619      	mov	r1, r3
 8000dee:	68b8      	ldr	r0, [r7, #8]
 8000df0:	f004 fec6 	bl	8005b80 <memcpy>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <code_to_appActions>:

/*
 *
 */
AppActions code_to_appActions(char* code)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000e04:	2204      	movs	r2, #4
 8000e06:	4925      	ldr	r1, [pc, #148]	; (8000e9c <code_to_appActions+0xa0>)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f004 ff03 	bl	8005c14 <strncmp>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e03c      	b.n	8000e92 <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000e18:	2204      	movs	r2, #4
 8000e1a:	4921      	ldr	r1, [pc, #132]	; (8000ea0 <code_to_appActions+0xa4>)
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f004 fef9 	bl	8005c14 <strncmp>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e032      	b.n	8000e92 <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	491d      	ldr	r1, [pc, #116]	; (8000ea4 <code_to_appActions+0xa8>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f004 feef 	bl	8005c14 <strncmp>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e028      	b.n	8000e92 <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000e40:	2204      	movs	r2, #4
 8000e42:	4919      	ldr	r1, [pc, #100]	; (8000ea8 <code_to_appActions+0xac>)
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f004 fee5 	bl	8005c14 <strncmp>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 8000e50:	2304      	movs	r3, #4
 8000e52:	e01e      	b.n	8000e92 <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000e54:	2204      	movs	r2, #4
 8000e56:	4915      	ldr	r1, [pc, #84]	; (8000eac <code_to_appActions+0xb0>)
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f004 fedb 	bl	8005c14 <strncmp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 8000e64:	2305      	movs	r3, #5
 8000e66:	e014      	b.n	8000e92 <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_MESSAGE_HEADER_SIZE))
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4911      	ldr	r1, [pc, #68]	; (8000eb0 <code_to_appActions+0xb4>)
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f004 fed1 	bl	8005c14 <strncmp>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e00a      	b.n	8000e92 <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_MESSAGE_HEADER_SIZE))
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <code_to_appActions+0xb8>)
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f004 fec7 	bl	8005c14 <strncmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <code_to_appActions+0x94>
			return START_CALENDAR;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	e000      	b.n	8000e92 <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0800717c 	.word	0x0800717c
 8000ea0:	08007184 	.word	0x08007184
 8000ea4:	0800718c 	.word	0x0800718c
 8000ea8:	08007194 	.word	0x08007194
 8000eac:	0800719c 	.word	0x0800719c
 8000eb0:	080071a4 	.word	0x080071a4
 8000eb4:	080071ac 	.word	0x080071ac

08000eb8 <parseDateTime>:

/*
 *
 */
void parseDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	// parse year
	dateTime->year = atoi(strtok(data, ";"));
 8000ec2:	4926      	ldr	r1, [pc, #152]	; (8000f5c <parseDateTime+0xa4>)
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f004 feb9 	bl	8005c3c <strtok>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fe29 	bl	8005b24 <atoi>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	701a      	strb	r2, [r3, #0]

	// parse month
	dateTime->month = atoi(strtok(NULL, ";"));
 8000eda:	4920      	ldr	r1, [pc, #128]	; (8000f5c <parseDateTime+0xa4>)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f004 fead 	bl	8005c3c <strtok>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fe1d 	bl	8005b24 <atoi>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	705a      	strb	r2, [r3, #1]

	// parse date
	dateTime->day = atoi(strtok(NULL, ";"));
 8000ef2:	491a      	ldr	r1, [pc, #104]	; (8000f5c <parseDateTime+0xa4>)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f004 fea1 	bl	8005c3c <strtok>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 fe11 	bl	8005b24 <atoi>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	709a      	strb	r2, [r3, #2]

	// parse hour
	dateTime->hour = atoi(strtok(NULL, ";"));
 8000f0a:	4914      	ldr	r1, [pc, #80]	; (8000f5c <parseDateTime+0xa4>)
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f004 fe95 	bl	8005c3c <strtok>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 fe05 	bl	8005b24 <atoi>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	70da      	strb	r2, [r3, #3]

	// parse minute
	dateTime->minute = atoi(strtok(NULL, ";"));
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <parseDateTime+0xa4>)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f004 fe89 	bl	8005c3c <strtok>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 fdf9 	bl	8005b24 <atoi>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	711a      	strb	r2, [r3, #4]

	// parse second
	dateTime->second = atoi(strtok(NULL, ";"));
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <parseDateTime+0xa4>)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f004 fe7d 	bl	8005c3c <strtok>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fded 	bl	8005b24 <atoi>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	715a      	strb	r2, [r3, #5]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	080071b4 	.word	0x080071b4

08000f60 <formatDateTime>:

/*
 *
 */
void formatDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af06      	add	r7, sp, #24
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	memset(data, 0, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000f6a:	223c      	movs	r2, #60	; 0x3c
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f004 fe14 	bl	8005b9c <memset>
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461d      	mov	r5, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	785b      	ldrb	r3, [r3, #1]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	4619      	mov	r1, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	78db      	ldrb	r3, [r3, #3]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000f8a:	4618      	mov	r0, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	791b      	ldrb	r3, [r3, #4]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000f90:	461c      	mov	r4, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	795b      	ldrb	r3, [r3, #5]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000f96:	9304      	str	r3, [sp, #16]
 8000f98:	9403      	str	r4, [sp, #12]
 8000f9a:	9002      	str	r0, [sp, #8]
 8000f9c:	9101      	str	r1, [sp, #4]
 8000f9e:	9200      	str	r2, [sp, #0]
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <formatDateTime+0x54>)
 8000fa4:	213c      	movs	r1, #60	; 0x3c
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f004 fe00 	bl	8005bac <sniprintf>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb4:	080071b8 	.word	0x080071b8

08000fb8 <parseEvent>:

/*
 *
 */
void parseEvent(char data[UART_MESSAGE_BODY_SIZE], CalendarEvent* event)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	// parse start year
	event->start.year = atoi(strtok(data, ";"));
 8000fc2:	494a      	ldr	r1, [pc, #296]	; (80010ec <parseEvent+0x134>)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f004 fe39 	bl	8005c3c <strtok>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 fda9 	bl	8005b24 <atoi>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	701a      	strb	r2, [r3, #0]

	// parse start month
	event->start.month = atoi(strtok(NULL, ";"));
 8000fda:	4944      	ldr	r1, [pc, #272]	; (80010ec <parseEvent+0x134>)
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f004 fe2d 	bl	8005c3c <strtok>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 fd9d 	bl	8005b24 <atoi>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	705a      	strb	r2, [r3, #1]

	// parse start date
	event->start.day = atoi(strtok(NULL, ";"));
 8000ff2:	493e      	ldr	r1, [pc, #248]	; (80010ec <parseEvent+0x134>)
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f004 fe21 	bl	8005c3c <strtok>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 fd91 	bl	8005b24 <atoi>
 8001002:	4603      	mov	r3, r0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	709a      	strb	r2, [r3, #2]

	// parse start hour
	event->start.hour = atoi(strtok(NULL, ";"));
 800100a:	4938      	ldr	r1, [pc, #224]	; (80010ec <parseEvent+0x134>)
 800100c:	2000      	movs	r0, #0
 800100e:	f004 fe15 	bl	8005c3c <strtok>
 8001012:	4603      	mov	r3, r0
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fd85 	bl	8005b24 <atoi>
 800101a:	4603      	mov	r3, r0
 800101c:	b2da      	uxtb	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	70da      	strb	r2, [r3, #3]

	// parse start minute
	event->start.minute = atoi(strtok(NULL, ";"));
 8001022:	4932      	ldr	r1, [pc, #200]	; (80010ec <parseEvent+0x134>)
 8001024:	2000      	movs	r0, #0
 8001026:	f004 fe09 	bl	8005c3c <strtok>
 800102a:	4603      	mov	r3, r0
 800102c:	4618      	mov	r0, r3
 800102e:	f004 fd79 	bl	8005b24 <atoi>
 8001032:	4603      	mov	r3, r0
 8001034:	b2da      	uxtb	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	711a      	strb	r2, [r3, #4]

	// parse start second
	event->start.second = atoi(strtok(NULL, ";"));
 800103a:	492c      	ldr	r1, [pc, #176]	; (80010ec <parseEvent+0x134>)
 800103c:	2000      	movs	r0, #0
 800103e:	f004 fdfd 	bl	8005c3c <strtok>
 8001042:	4603      	mov	r3, r0
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fd6d 	bl	8005b24 <atoi>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	715a      	strb	r2, [r3, #5]

	// parse end year
	event->end.year = atoi(strtok(NULL, ";"));
 8001052:	4926      	ldr	r1, [pc, #152]	; (80010ec <parseEvent+0x134>)
 8001054:	2000      	movs	r0, #0
 8001056:	f004 fdf1 	bl	8005c3c <strtok>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fd61 	bl	8005b24 <atoi>
 8001062:	4603      	mov	r3, r0
 8001064:	b2da      	uxtb	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	731a      	strb	r2, [r3, #12]

	// parse end month
	event->end.month = atoi(strtok(NULL, ";"));
 800106a:	4920      	ldr	r1, [pc, #128]	; (80010ec <parseEvent+0x134>)
 800106c:	2000      	movs	r0, #0
 800106e:	f004 fde5 	bl	8005c3c <strtok>
 8001072:	4603      	mov	r3, r0
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fd55 	bl	8005b24 <atoi>
 800107a:	4603      	mov	r3, r0
 800107c:	b2da      	uxtb	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	735a      	strb	r2, [r3, #13]

	// parse end date
	event->end.day = atoi(strtok(NULL, ";"));
 8001082:	491a      	ldr	r1, [pc, #104]	; (80010ec <parseEvent+0x134>)
 8001084:	2000      	movs	r0, #0
 8001086:	f004 fdd9 	bl	8005c3c <strtok>
 800108a:	4603      	mov	r3, r0
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fd49 	bl	8005b24 <atoi>
 8001092:	4603      	mov	r3, r0
 8001094:	b2da      	uxtb	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	739a      	strb	r2, [r3, #14]

	// parse end hour
	event->end.hour = atoi(strtok(NULL, ";"));
 800109a:	4914      	ldr	r1, [pc, #80]	; (80010ec <parseEvent+0x134>)
 800109c:	2000      	movs	r0, #0
 800109e:	f004 fdcd 	bl	8005c3c <strtok>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fd3d 	bl	8005b24 <atoi>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	73da      	strb	r2, [r3, #15]

	// parse end minute
	event->end.minute = atoi(strtok(NULL, ";"));
 80010b2:	490e      	ldr	r1, [pc, #56]	; (80010ec <parseEvent+0x134>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f004 fdc1 	bl	8005c3c <strtok>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 fd31 	bl	8005b24 <atoi>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	741a      	strb	r2, [r3, #16]

	// parse end second
	event->end.second = atoi(strtok(NULL, ";"));
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <parseEvent+0x134>)
 80010cc:	2000      	movs	r0, #0
 80010ce:	f004 fdb5 	bl	8005c3c <strtok>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fd25 	bl	8005b24 <atoi>
 80010da:	4603      	mov	r3, r0
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	745a      	strb	r2, [r3, #17]
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	080071b4 	.word	0x080071b4

080010f0 <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fa6d 	bl	80015d8 <com_transport_init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <com_session_init+0x24>
	{
		_sessionOpen = false;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <com_session_init+0x30>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <com_session_init+0x34>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
		return true;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <com_session_init+0x26>
	}

	else
	{
		return false;
 8001114:	2300      	movs	r3, #0
	}
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20001ca1 	.word	0x20001ca1
 8001124:	20001ca2 	.word	0x20001ca2

08001128 <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <start_session+0x48>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d016      	beq.n	8001164 <start_session+0x3c>
	{
		if (!_sessionOpen)
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <start_session+0x4c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <start_session+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f000 f850 	bl	80011ec <_handshake>
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <start_session+0x34>
				_sessionOpen = true;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <start_session+0x4c>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	e002      	b.n	8001166 <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8001164:	2303      	movs	r3, #3
	}
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20001ca2 	.word	0x20001ca2
 8001174:	20001ca1 	.word	0x20001ca1

08001178 <session_cycle>:

/*
 *
 */
SESSION_STATUS session_cycle(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	if (_sessionInit)
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <session_cycle+0x28>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <session_cycle+0x20>
	{
		if (_sessionOpen)
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <session_cycle+0x2c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <session_cycle+0x1c>
		{
			return _session_cycle();
 800118c:	f000 f916 	bl	80013bc <_session_cycle>
 8001190:	4603      	mov	r3, r0
 8001192:	e002      	b.n	800119a <session_cycle+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 8001194:	2304      	movs	r3, #4
 8001196:	e000      	b.n	800119a <session_cycle+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8001198:	2303      	movs	r3, #3
	}
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20001ca2 	.word	0x20001ca2
 80011a4:	20001ca1 	.word	0x20001ca1

080011a8 <tell>:

/*
 *
 */
SESSION_STATUS tell(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	TRANSPORT_STATUS transportStatus;

	if (_sessionInit)
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <tell+0x3c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00e      	beq.n	80011d8 <tell+0x30>
	{
		if (_sessionOpen)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <tell+0x40>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <tell+0x2c>
		{
			// enqueue message
			if (queue_tx(header, body) != TRANSPORT_OKAY)
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fa25 	bl	8001614 <queue_tx>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <tell+0x34>
			{
				return SESSION_BUSY;
 80011d0:	2305      	movs	r3, #5
 80011d2:	e003      	b.n	80011dc <tell+0x34>
//			}
		}

		else
		{
			return SESSION_NOT_OPEN;
 80011d4:	2304      	movs	r3, #4
 80011d6:	e001      	b.n	80011dc <tell+0x34>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e7ff      	b.n	80011dc <tell+0x34>
	}
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20001ca2 	.word	0x20001ca2
 80011e8:	20001ca1 	.word	0x20001ca1

080011ec <_handshake>:

/*
 *
 */
SESSION_STATUS _handshake(unsigned int timeout_ms)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8001204:	2300      	movs	r3, #0
 8001206:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2238      	movs	r2, #56	; 0x38
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fcc1 	bl	8005b9c <memset>

	while (!success && !error)
 800121a:	e0a2      	b.n	8001362 <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 800121c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <_handshake+0x44>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fa8e 	bl	8001744 <rx>
 8001228:	4603      	mov	r3, r0
 800122a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800122e:	e063      	b.n	80012f8 <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 8001230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10b      	bne.n	800124e <_handshake+0x62>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8001236:	f107 0208 	add.w	r2, r7, #8
 800123a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fa0d 	bl	8001660 <dequeue_rx>
 8001246:	4603      	mov	r3, r0
 8001248:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800124c:	e054      	b.n	80012f8 <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 800124e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001250:	2b02      	cmp	r3, #2
 8001252:	d10d      	bne.n	8001270 <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 8001254:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001258:	2204      	movs	r2, #4
 800125a:	4955      	ldr	r1, [pc, #340]	; (80013b0 <_handshake+0x1c4>)
 800125c:	4618      	mov	r0, r3
 800125e:	f004 fcd9 	bl	8005c14 <strncmp>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d047      	beq.n	80012f8 <_handshake+0x10c>
			{
				error = true;
 8001268:	2301      	movs	r3, #1
 800126a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800126e:	e043      	b.n	80012f8 <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 8001270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001272:	2b03      	cmp	r3, #3
 8001274:	d110      	bne.n	8001298 <_handshake+0xac>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	223c      	movs	r2, #60	; 0x3c
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fc8c 	bl	8005b9c <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	484a      	ldr	r0, [pc, #296]	; (80013b4 <_handshake+0x1c8>)
 800128c:	f000 f9c2 	bl	8001614 <queue_tx>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001296:	e02f      	b.n	80012f8 <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 8001298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129a:	2b04      	cmp	r3, #4
 800129c:	d106      	bne.n	80012ac <_handshake+0xc0>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f000 fa16 	bl	80016d0 <tx>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80012aa:	e025      	b.n	80012f8 <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 80012ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d106      	bne.n	80012c0 <_handshake+0xd4>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 80012b2:	20fa      	movs	r0, #250	; 0xfa
 80012b4:	f000 fa46 	bl	8001744 <rx>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80012be:	e01b      	b.n	80012f8 <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 80012c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d10b      	bne.n	80012de <_handshake+0xf2>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 80012c6:	f107 0208 	add.w	r2, r7, #8
 80012ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f9c5 	bl	8001660 <dequeue_rx>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80012dc:	e00c      	b.n	80012f8 <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 80012de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012e2:	2204      	movs	r2, #4
 80012e4:	4934      	ldr	r1, [pc, #208]	; (80013b8 <_handshake+0x1cc>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 fc94 	bl	8005c14 <strncmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <_handshake+0x10c>
			{
				error = true;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 80012f8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d12d      	bne.n	800135c <_handshake+0x170>
		{
			if (state == 0)
 8001300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <_handshake+0x120>
				state = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800130a:	e02a      	b.n	8001362 <_handshake+0x176>
			else if (state == 1)
 800130c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <_handshake+0x12c>
				state = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001316:	e024      	b.n	8001362 <_handshake+0x176>
			else if (state == 2)
 8001318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131a:	2b02      	cmp	r3, #2
 800131c:	d102      	bne.n	8001324 <_handshake+0x138>
				state = 3;
 800131e:	2303      	movs	r3, #3
 8001320:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001322:	e01e      	b.n	8001362 <_handshake+0x176>
			else if (state == 3)
 8001324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001326:	2b03      	cmp	r3, #3
 8001328:	d102      	bne.n	8001330 <_handshake+0x144>
				state = 4;
 800132a:	2304      	movs	r3, #4
 800132c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800132e:	e018      	b.n	8001362 <_handshake+0x176>
			else if (state == 4)
 8001330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001332:	2b04      	cmp	r3, #4
 8001334:	d102      	bne.n	800133c <_handshake+0x150>
				state = 5;
 8001336:	2305      	movs	r3, #5
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800133a:	e012      	b.n	8001362 <_handshake+0x176>
			else if (state == 5)
 800133c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133e:	2b05      	cmp	r3, #5
 8001340:	d102      	bne.n	8001348 <_handshake+0x15c>
				state = 6;
 8001342:	2306      	movs	r3, #6
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001346:	e00c      	b.n	8001362 <_handshake+0x176>
			else if (state == 6)
 8001348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134a:	2b06      	cmp	r3, #6
 800134c:	d102      	bne.n	8001354 <_handshake+0x168>
				state = 7;
 800134e:	2307      	movs	r3, #7
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001352:	e006      	b.n	8001362 <_handshake+0x176>
			else // if (state == 7)
				success = true;
 8001354:	2301      	movs	r3, #1
 8001356:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800135a:	e002      	b.n	8001362 <_handshake+0x176>
		}
		else
		{
			error = true;
 800135c:	2301      	movs	r3, #1
 800135e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 8001362:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <_handshake+0x194>
 8001370:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001374:	f083 0301 	eor.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	f47f af4e 	bne.w	800121c <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 8001380:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <_handshake+0x1ae>
 8001388:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 8001396:	2300      	movs	r3, #0
 8001398:	e006      	b.n	80013a8 <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 800139a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 80013a6:	2302      	movs	r3, #2
		}
	}
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	080071cc 	.word	0x080071cc
 80013b4:	080071d4 	.word	0x080071d4
 80013b8:	080071dc 	.word	0x080071dc

080013bc <_session_cycle>:

/*
 *
 */
SESSION_STATUS _session_cycle(void)
{
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b092      	sub	sp, #72	; 0x48
 80013c0:	af00      	add	r7, sp, #0
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 80013c2:	2300      	movs	r3, #0
 80013c4:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2238      	movs	r2, #56	; 0x38
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 fbe2 	bl	8005b9c <memset>
	SESSION_STATUS status;

	// Perform Tx message phase of session cycle.
	status = _tell();
 80013d8:	f000 f8b0 	bl	800153c <_tell>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Perform Rx message phase of session cycle.
	status = _listen();
 80013e2:	f000 f859 	bl	8001498 <_listen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 80013ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d101      	bne.n	80013f8 <_session_cycle+0x3c>
	{
		return SESSION_ERROR;
 80013f4:	2302      	movs	r3, #2
 80013f6:	e03e      	b.n	8001476 <_session_cycle+0xba>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 80013f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d139      	bne.n	8001474 <_session_cycle+0xb8>
	{
		// dequeue received message
		dequeue_rx(messageHeader, messageBody);
 8001400:	1d3a      	adds	r2, r7, #4
 8001402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f929 	bl	8001660 <dequeue_rx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_MESSAGE_HEADER_SIZE))
 800140e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001412:	2204      	movs	r2, #4
 8001414:	491a      	ldr	r1, [pc, #104]	; (8001480 <_session_cycle+0xc4>)
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fbfc 	bl	8005c14 <strncmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <_session_cycle+0x6e>
		{
			_sessionOpen = false;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <_session_cycle+0xc8>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e024      	b.n	8001474 <_session_cycle+0xb8>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_MESSAGE_HEADER_SIZE))
 800142a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800142e:	2204      	movs	r2, #4
 8001430:	4915      	ldr	r1, [pc, #84]	; (8001488 <_session_cycle+0xcc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fbee 	bl	8005c14 <strncmp>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <_session_cycle+0x92>
		{
			tell(messageHeader, messageBody);
 800143e:	1d3a      	adds	r2, r7, #4
 8001440:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff feae 	bl	80011a8 <tell>
 800144c:	e012      	b.n	8001474 <_session_cycle+0xb8>
 800144e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <_session_cycle+0xd0>)
 8001452:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <_session_cycle+0xd4>)
 8001456:	461d      	mov	r5, r3
 8001458:	1d3c      	adds	r4, r7, #4
 800145a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800146a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <_session_cycle+0xd8>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
		}
	}

	return SESSION_OKAY;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3748      	adds	r7, #72	; 0x48
 800147a:	46bd      	mov	sp, r7
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
 800147e:	bf00      	nop
 8001480:	080071e4 	.word	0x080071e4
 8001484:	20001ca1 	.word	0x20001ca1
 8001488:	080071ec 	.word	0x080071ec
 800148c:	20001ca4 	.word	0x20001ca4
 8001490:	20001ca8 	.word	0x20001ca8
 8001494:	20001ce4 	.word	0x20001ce4

08001498 <_listen>:

/*
 *
 */
SESSION_STATUS _listen(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b090      	sub	sp, #64	; 0x40
 800149c:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2238      	movs	r2, #56	; 0x38
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 fb77 	bl	8005b9c <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 80014ae:	463b      	mov	r3, r7
 80014b0:	223c      	movs	r2, #60	; 0x3c
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 fb71 	bl	8005b9c <memset>
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "Clear to send!\n");
 80014ba:	463b      	mov	r3, r7
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <_listen+0x9c>)
 80014be:	213c      	movs	r1, #60	; 0x3c
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fb73 	bl	8005bac <sniprintf>
	transportStatus = queue_tx(CTS_HEADER, messageBody);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	481b      	ldr	r0, [pc, #108]	; (8001538 <_listen+0xa0>)
 80014cc:	f000 f8a2 	bl	8001614 <queue_tx>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 80014d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_listen+0x4a>
	{
		return SESSION_ERROR;
 80014de:	2302      	movs	r3, #2
 80014e0:	e024      	b.n	800152c <_listen+0x94>
	}

	transportStatus = tx(TX_TIMEOUT_MS);
 80014e2:	2064      	movs	r0, #100	; 0x64
 80014e4:	f000 f8f4 	bl	80016d0 <tx>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 80014ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e018      	b.n	800152c <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 80014fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <_listen+0x6e>
	{
		return SESSION_ERROR;
 8001502:	2302      	movs	r3, #2
 8001504:	e012      	b.n	800152c <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = rx(RX_TIMEOUT_MS);
 8001506:	20fa      	movs	r0, #250	; 0xfa
 8001508:	f000 f91c 	bl	8001744 <rx>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8001512:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 800151a:	2301      	movs	r3, #1
 800151c:	e006      	b.n	800152c <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 800151e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <_listen+0x92>
	{
		return SESSION_ERROR;
 8001526:	2302      	movs	r3, #2
 8001528:	e000      	b.n	800152c <_listen+0x94>
	}

	return SESSION_OKAY;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3740      	adds	r7, #64	; 0x40
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	080071f4 	.word	0x080071f4
 8001538:	08007204 	.word	0x08007204

0800153c <_tell>:

/*
 *
 */
SESSION_STATUS _tell(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;

	transportStatus = tx(TX_TIMEOUT_MS);
 8001542:	2064      	movs	r0, #100	; 0x64
 8001544:	f000 f8c4 	bl	80016d0 <tx>
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]

	if (transportStatus == TRANSPORT_OKAY)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <_tell+0x1a>
	{
		return SESSION_OKAY;
 8001552:	2300      	movs	r3, #0
 8001554:	e005      	b.n	8001562 <_tell+0x26>
	}
	else if (transportStatus == TRANSPORT_TIMEOUT)
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <_tell+0x24>
	{
		return SESSION_TIMEOUT;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <_tell+0x26>
	}
	else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
	{
		return SESSION_ERROR;
 8001560:	2302      	movs	r3, #2
	}
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <getCommand>:

/*
 *
 */
SESSION_STATUS getCommand(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	if (_messageReady)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <getCommand+0x60>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d020      	beq.n	80015c0 <getCommand+0x54>
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <getCommand+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(header, _messageCommand, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
		memcpy(body, _messageData, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <getCommand+0x68>)
 800158a:	4614      	mov	r4, r2
 800158c:	469c      	mov	ip, r3
 800158e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001592:	4665      	mov	r5, ip
 8001594:	4626      	mov	r6, r4
 8001596:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001598:	6028      	str	r0, [r5, #0]
 800159a:	6069      	str	r1, [r5, #4]
 800159c:	60aa      	str	r2, [r5, #8]
 800159e:	60eb      	str	r3, [r5, #12]
 80015a0:	3410      	adds	r4, #16
 80015a2:	f10c 0c10 	add.w	ip, ip, #16
 80015a6:	4574      	cmp	r4, lr
 80015a8:	d1f3      	bne.n	8001592 <getCommand+0x26>
 80015aa:	4665      	mov	r5, ip
 80015ac:	4623      	mov	r3, r4
 80015ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80015b0:	6028      	str	r0, [r5, #0]
 80015b2:	6069      	str	r1, [r5, #4]
 80015b4:	60aa      	str	r2, [r5, #8]
		_messageReady = false;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <getCommand+0x60>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

		return SESSION_OKAY;
 80015bc:	2300      	movs	r3, #0
 80015be:	e000      	b.n	80015c2 <getCommand+0x56>
	}

	else
	{
		return SESSION_ERROR;
 80015c0:	2302      	movs	r3, #2
	}
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20001ce4 	.word	0x20001ce4
 80015d0:	20001ca4 	.word	0x20001ca4
 80015d4:	20001ca8 	.word	0x20001ca8

080015d8 <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <com_transport_init+0x24>
	{
		_uartHandle = huart;
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <com_transport_init+0x30>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <com_transport_init+0x34>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <com_transport_init+0x38>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
		return true;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <com_transport_init+0x26>
	}

	else
	{
		return false;
 80015fc:	2300      	movs	r3, #0
	}
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20001ce8 	.word	0x20001ce8
 800160c:	20001d6c 	.word	0x20001d6c
 8001610:	20001d6d 	.word	0x20001d6d

08001614 <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <queue_tx+0x40>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d010      	beq.n	8001648 <queue_tx+0x34>
	{
		if (_txBuffer_full)
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <queue_tx+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 8001630:	2304      	movs	r3, #4
 8001632:	e00a      	b.n	800164a <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <queue_tx+0x48>)
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fbb3 	bl	8000da4 <composeMessage>
			_txBuffer_full = true;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <queue_tx+0x44>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8001644:	2300      	movs	r3, #0
 8001646:	e000      	b.n	800164a <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001648:	2308      	movs	r3, #8
	}
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20001ce8 	.word	0x20001ce8
 8001658:	20001d6c 	.word	0x20001d6c
 800165c:	20001cec 	.word	0x20001cec

08001660 <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b092      	sub	sp, #72	; 0x48
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <dequeue_rx+0x64>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d023      	beq.n	80016ba <dequeue_rx+0x5a>
	{
		if (!_rxBuffer_full)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <dequeue_rx+0x68>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f083 0301 	eor.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 8001682:	2306      	movs	r3, #6
 8001684:	e01a      	b.n	80016bc <dequeue_rx+0x5c>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <dequeue_rx+0x6c>)
 8001688:	f107 0408 	add.w	r4, r7, #8
 800168c:	461d      	mov	r5, r3
 800168e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800169e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <dequeue_rx+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	461a      	mov	r2, r3
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fb8d 	bl	8000dd0 <decomposeMessage>

			return TRANSPORT_OKAY;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <dequeue_rx+0x5c>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80016ba:	2308      	movs	r3, #8
	}
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3748      	adds	r7, #72	; 0x48
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdb0      	pop	{r4, r5, r7, pc}
 80016c4:	20001ce8 	.word	0x20001ce8
 80016c8:	20001d6d 	.word	0x20001d6d
 80016cc:	20001d2c 	.word	0x20001d2c

080016d0 <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <tx+0x68>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d026      	beq.n	800172e <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <tx+0x6c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f083 0301 	eor.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 80016f0:	2305      	movs	r3, #5
 80016f2:	e01d      	b.n	8001730 <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <tx+0x68>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	4910      	ldr	r1, [pc, #64]	; (8001740 <tx+0x70>)
 80016fe:	f003 fb9b 	bl	8004e38 <HAL_UART_Transmit>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <tx+0x40>
		{
			return TRANSPORT_ERROR;
 800170c:	2302      	movs	r3, #2
 800170e:	e00f      	b.n	8001730 <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d101      	bne.n	800171a <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 8001716:	2301      	movs	r3, #1
 8001718:	e00a      	b.n	8001730 <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d101      	bne.n	8001724 <tx+0x54>
		{
			return TRANSPORT_BUSY;
 8001720:	2303      	movs	r3, #3
 8001722:	e005      	b.n	8001730 <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <tx+0x6c>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 800172e:	2308      	movs	r3, #8
	}
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20001ce8 	.word	0x20001ce8
 800173c:	20001d6c 	.word	0x20001d6c
 8001740:	20001cec 	.word	0x20001cec

08001744 <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <rx+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <rx+0x68>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 800175e:	2307      	movs	r3, #7
 8001760:	e01d      	b.n	800179e <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <rx+0x64>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	4911      	ldr	r1, [pc, #68]	; (80017b0 <rx+0x6c>)
 800176c:	f003 fbea 	bl	8004f44 <HAL_UART_Receive>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 800177a:	2302      	movs	r3, #2
 800177c:	e00f      	b.n	800179e <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d101      	bne.n	8001788 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 8001784:	2301      	movs	r3, #1
 8001786:	e00a      	b.n	800179e <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d101      	bne.n	8001792 <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 800178e:	2303      	movs	r3, #3
 8001790:	e005      	b.n	800179e <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <rx+0x68>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 800179c:	2308      	movs	r3, #8
	}
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20001ce8 	.word	0x20001ce8
 80017ac:	20001d6d 	.word	0x20001d6d
 80017b0:	20001d2c 	.word	0x20001d2c

080017b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d101      	bne.n	8001800 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	43db      	mvns	r3, r3
 800181e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001822:	4013      	ands	r3, r2
 8001824:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 800183a:	2002      	movs	r0, #2
 800183c:	f7ff ffd2 	bl	80017e4 <LL_AHB2_GRP1_IsEnabledClock>
 8001840:	4603      	mov	r3, r0
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <activate_led+0x60>)
 8001844:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <activate_led+0x60>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2002      	movs	r0, #2
 8001850:	f7ff ffb0 	bl	80017b4 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <activate_led+0x64>)
 8001878:	f001 f820 	bl	80028bc <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	2201      	movs	r2, #1
 8001880:	4619      	mov	r1, r3
 8001882:	4804      	ldr	r0, [pc, #16]	; (8001894 <activate_led+0x64>)
 8001884:	f001 fa48 	bl	8002d18 <HAL_GPIO_WritePin>
}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20001d70 	.word	0x20001d70
 8001894:	48000400 	.word	0x48000400

08001898 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <deactivate_led+0x38>)
 80018aa:	f001 fa35 	bl	8002d18 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <deactivate_led+0x38>)
 80018b4:	f001 f962 	bl	8002b7c <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <deactivate_led+0x3c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7ff ffa3 	bl	800180c <LL_AHB2_GRP1_DisableClock>
  }
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	48000400 	.word	0x48000400
 80018d4:	20001d70 	.word	0x20001d70

080018d8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	f023 0218 	bic.w	r2, r3, #24
 80018ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <LL_AHB2_GRP1_EnableClock>:
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4313      	orrs	r3, r2
 8001918:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4013      	ands	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 800193a:	f7fe ffdb 	bl	80008f4 <calendar_AlarmA_ISR>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <event_start>:

void event_start(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	activate_led(GPIO_PIN_15);
 800194c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001950:	f7ff ff6e 	bl	8001830 <activate_led>
	// note: it is not recommended to send over serial while in ISR!!
	tell("MESG", "EVENT START\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 8001954:	4903      	ldr	r1, [pc, #12]	; (8001964 <event_start+0x1c>)
 8001956:	4804      	ldr	r0, [pc, #16]	; (8001968 <event_start+0x20>)
 8001958:	f7ff fc26 	bl	80011a8 <tell>
	session_cycle();
 800195c:	f7ff fc0c 	bl	8001178 <session_cycle>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	0800720c 	.word	0x0800720c
 8001968:	08007250 	.word	0x08007250

0800196c <event_end>:

void event_end(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	deactivate_led(GPIO_PIN_15);
 8001970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001974:	f7ff ff90 	bl	8001898 <deactivate_led>
	// note: it is not recommended to send over serial while in ISR!!
	tell("MESG", "EVENT END\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 8001978:	4903      	ldr	r1, [pc, #12]	; (8001988 <event_end+0x1c>)
 800197a:	4804      	ldr	r0, [pc, #16]	; (800198c <event_end+0x20>)
 800197c:	f7ff fc14 	bl	80011a8 <tell>
	session_cycle();
 8001980:	f7ff fbfa 	bl	8001178 <session_cycle>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	08007258 	.word	0x08007258
 800198c:	08007250 	.word	0x08007250

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b09a      	sub	sp, #104	; 0x68
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f000 fe0f 	bl	80025b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f8b9 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 fa09 	bl	8001db4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019a2:	f000 f9b1 	bl	8001d08 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80019a6:	f000 f911 	bl	8001bcc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f001 f9f4 	bl	8002d98 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 80019b0:	4852      	ldr	r0, [pc, #328]	; (8001afc <main+0x16c>)
 80019b2:	f7ff fb9d 	bl	80010f0 <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 80019b6:	4852      	ldr	r0, [pc, #328]	; (8001b00 <main+0x170>)
 80019b8:	f7fe fdba 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 80019bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 80019c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019ce:	f7fe fe41 	bl	8000654 <calendar_setDateTime>

  // start calendar
//  calendar_start();

  // begin listening for messages from desktop
  if (start_session() == SESSION_OKAY)
 80019d2:	f7ff fba9 	bl	8001128 <start_session>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <main+0x54>
  {
	  activate_led(GREEN_LED);
 80019dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019e0:	f7ff ff26 	bl	8001830 <activate_led>
  }

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  AppActions commandCode;
  DateTime newDateTime = {0};
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	809a      	strh	r2, [r3, #4]
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 80019ee:	f7fe fe7b 	bl	80006e8 <calendar_handleAlarm>

	  // try to open connection if not present
	  if (start_session() == SESSION_OKAY)
 80019f2:	f7ff fb99 	bl	8001128 <start_session>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <main+0x74>
	  {
		  activate_led(GREEN_LED);
 80019fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a00:	f7ff ff16 	bl	8001830 <activate_led>
	  }

	  // if message present, handle message
	  if (session_cycle() != SESSION_OKAY)
 8001a04:	f7ff fbb8 	bl	8001178 <session_cycle>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <main+0x86>
	  {
		  activate_led(RED_LED);
 8001a0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a12:	f7ff ff0d 	bl	8001830 <activate_led>
	  }

	  // get command if present
	  if (getCommand(messageHeader, messageBody) == SESSION_OKAY)
 8001a16:	f107 0220 	add.w	r2, r7, #32
 8001a1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fda3 	bl	800156c <getCommand>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e0      	bne.n	80019ee <main+0x5e>
	  {
		  // execute command
		  commandCode = code_to_appActions(messageHeader);
 8001a2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f9e3 	bl	8000dfc <code_to_appActions>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  // set date/time
		  if (commandCode == SET_CALENDAR_DATETIME)
 8001a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10e      	bne.n	8001a62 <main+0xd2>
		  {
			  parseDateTime(messageBody, &newDateTime);
 8001a44:	f107 0218 	add.w	r2, r7, #24
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fa32 	bl	8000eb8 <parseDateTime>
			  calendar_setDateTime(newDateTime);
 8001a54:	f107 0318 	add.w	r3, r7, #24
 8001a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a5c:	f7fe fdfa 	bl	8000654 <calendar_setDateTime>
 8001a60:	e7c5      	b.n	80019ee <main+0x5e>
		  }

		  // get date/time
		  else if (commandCode == GET_CALENDAR_DATETIME)
 8001a62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d117      	bne.n	8001a9a <main+0x10a>
		  {
			  calendar_getDateTime(&newDateTime);
 8001a6a:	f107 0318 	add.w	r3, r7, #24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fe06 	bl	8000680 <calendar_getDateTime>
			  formatDateTime(messageBody, &newDateTime);
 8001a74:	f107 0218 	add.w	r2, r7, #24
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fa6e 	bl	8000f60 <formatDateTime>
			  memcpy(messageHeader, "ECHO", UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <main+0x174>)
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
			  tell(messageHeader, messageBody);
 8001a88:	f107 0220 	add.w	r2, r7, #32
 8001a8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fb88 	bl	80011a8 <tell>
 8001a98:	e7a9      	b.n	80019ee <main+0x5e>
		  }

		  // add event
		  else if (commandCode == ADD_CALENDAR_EVENT)
 8001a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d117      	bne.n	8001ad2 <main+0x142>
		  {
			  CalendarEvent tempEvent = {0};
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	615a      	str	r2, [r3, #20]
			  parseEvent(messageBody, &tempEvent);
 8001ab2:	463a      	mov	r2, r7
 8001ab4:	f107 0320 	add.w	r3, r7, #32
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fa7c 	bl	8000fb8 <parseEvent>
			  tempEvent.start_callback = &(event_start);
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <main+0x178>)
 8001ac2:	60bb      	str	r3, [r7, #8]
			  tempEvent.end_callback = &(event_end);
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <main+0x17c>)
 8001ac6:	617b      	str	r3, [r7, #20]
			  calendar_addEvent(&tempEvent);
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fdf2 	bl	80006b4 <calendar_addEvent>
 8001ad0:	e78d      	b.n	80019ee <main+0x5e>
		  }

		  // get/view event
		  else if (commandCode == GET_CALENDAR_EVENT)
 8001ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d089      	beq.n	80019ee <main+0x5e>
		  {

		  }

		  // remove event
		  else if (commandCode == REMOVE_CALENDAR_EVENT)
 8001ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d085      	beq.n	80019ee <main+0x5e>
		  {

		  }

		  // clear all events
		  else if (commandCode == CLEAR_CALENDAR_EVENTS)
 8001ae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d081      	beq.n	80019ee <main+0x5e>
		  {

		  }

		  // start calendar
		  else if (commandCode == START_CALENDAR)
 8001aea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001aee:	2b07      	cmp	r3, #7
 8001af0:	f47f af7d 	bne.w	80019ee <main+0x5e>
		  {
			  calendar_start();
 8001af4:	f7fe fd66 	bl	80005c4 <calendar_start>
	  calendar_handleAlarm();
 8001af8:	e779      	b.n	80019ee <main+0x5e>
 8001afa:	bf00      	nop
 8001afc:	20001dac 	.word	0x20001dac
 8001b00:	20001d74 	.word	0x20001d74
 8001b04:	4f484345 	.word	0x4f484345
 8001b08:	08001949 	.word	0x08001949
 8001b0c:	0800196d 	.word	0x0800196d

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b09a      	sub	sp, #104	; 0x68
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	2248      	movs	r2, #72	; 0x48
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 f83c 	bl	8005b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b36:	f001 f907 	bl	8002d48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fecc 	bl	80018d8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <SystemClock_Config+0xb8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b48:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <SystemClock_Config+0xb8>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <SystemClock_Config+0xb8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001b5c:	232c      	movs	r3, #44	; 0x2c
 8001b5e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b60:	2381      	movs	r3, #129	; 0x81
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b64:	2301      	movs	r3, #1
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b74:	2301      	movs	r3, #1
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 fbcb 	bl	800331c <HAL_RCC_OscConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001b8c:	f000 f91f 	bl	8001dce <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001b90:	236f      	movs	r3, #111	; 0x6f
 8001b92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 ff35 	bl	8003a20 <HAL_RCC_ClockConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001bbc:	f000 f907 	bl	8001dce <Error_Handler>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3768      	adds	r7, #104	; 0x68
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	58000400 	.word	0x58000400

08001bcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b092      	sub	sp, #72	; 0x48
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001be2:	2300      	movs	r3, #0
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	222c      	movs	r2, #44	; 0x2c
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 ffd5 	bl	8005b9c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <MX_RTC_Init+0x134>)
 8001bf4:	4a43      	ldr	r2, [pc, #268]	; (8001d04 <MX_RTC_Init+0x138>)
 8001bf6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <MX_RTC_Init+0x134>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c00:	227f      	movs	r2, #127	; 0x7f
 8001c02:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c04:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c1c:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c22:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c30:	4833      	ldr	r0, [pc, #204]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c32:	f002 fbcf 	bl	80043d4 <HAL_RTC_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001c3c:	f000 f8c7 	bl	8001dce <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4619      	mov	r1, r3
 8001c62:	4827      	ldr	r0, [pc, #156]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c64:	f002 fc38 	bl	80044d8 <HAL_RTC_SetTime>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001c6e:	f000 f8ae 	bl	8001dce <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4619      	mov	r1, r3
 8001c92:	481b      	ldr	r0, [pc, #108]	; (8001d00 <MX_RTC_Init+0x134>)
 8001c94:	f002 fd1e 	bl	80046d4 <HAL_RTC_SetDate>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001c9e:	f000 f896 	bl	8001dce <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <MX_RTC_Init+0x134>)
 8001cda:	f002 fdcf 	bl	800487c <HAL_RTC_SetAlarm_IT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001ce4:	f000 f873 	bl	8001dce <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	202a      	movs	r0, #42	; 0x2a
 8001cee:	f000 fdb0 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cf2:	202a      	movs	r0, #42	; 0x2a
 8001cf4:	f000 fdc7 	bl	8002886 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3748      	adds	r7, #72	; 0x48
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20001d74 	.word	0x20001d74
 8001d04:	40002800 	.word	0x40002800

08001d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <MX_USART2_UART_Init+0xa8>)
 8001d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d26:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d30:	220c      	movs	r2, #12
 8001d32:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d4e:	2230      	movs	r2, #48	; 0x30
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d58:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d62:	4812      	ldr	r0, [pc, #72]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d64:	f003 f818 	bl	8004d98 <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d6e:	f000 f82e 	bl	8001dce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d72:	2100      	movs	r1, #0
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d76:	f003 fe0c 	bl	8005992 <HAL_UARTEx_SetTxFifoThreshold>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d80:	f000 f825 	bl	8001dce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d84:	2100      	movs	r1, #0
 8001d86:	4809      	ldr	r0, [pc, #36]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d88:	f003 fe41 	bl	8005a0e <HAL_UARTEx_SetRxFifoThreshold>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001d92:	f000 f81c 	bl	8001dce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART2_UART_Init+0xa4>)
 8001d98:	f003 fdc3 	bl	8005922 <HAL_UARTEx_DisableFifoMode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8001da2:	f000 f814 	bl	8001dce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20001dac 	.word	0x20001dac
 8001db0:	40004400 	.word	0x40004400

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fda2 	bl	8001902 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	2004      	movs	r0, #4
 8001dc0:	f7ff fd9f 	bl	8001902 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f7ff fd9c 	bl	8001902 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd2:	b672      	cpsid	i
}
 8001dd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <Error_Handler+0x8>

08001dd8 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001de0:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <rtcAlarmControl_init+0x18>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20001e40 	.word	0x20001e40

08001df4 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4623      	mov	r3, r4
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	4603      	mov	r3, r0
 8001e08:	71bb      	strb	r3, [r7, #6]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	717b      	strb	r3, [r7, #5]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	4a5a      	ldr	r2, [pc, #360]	; (8001f80 <setDateTime+0x18c>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	b258      	sxtb	r0, r3
 8001e22:	79fa      	ldrb	r2, [r7, #7]
 8001e24:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <setDateTime+0x18c>)
 8001e26:	fba3 1302 	umull	r1, r3, r3, r2
 8001e2a:	08d9      	lsrs	r1, r3, #3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	4303      	orrs	r3, r0
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	4a4e      	ldr	r2, [pc, #312]	; (8001f80 <setDateTime+0x18c>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	b258      	sxtb	r0, r3
 8001e52:	79ba      	ldrb	r2, [r7, #6]
 8001e54:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <setDateTime+0x18c>)
 8001e56:	fba3 1302 	umull	r1, r3, r3, r2
 8001e5a:	08d9      	lsrs	r1, r3, #3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	4303      	orrs	r3, r0
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8001e72:	797b      	ldrb	r3, [r7, #5]
 8001e74:	4a42      	ldr	r2, [pc, #264]	; (8001f80 <setDateTime+0x18c>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	b258      	sxtb	r0, r3
 8001e82:	797a      	ldrb	r2, [r7, #5]
 8001e84:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <setDateTime+0x18c>)
 8001e86:	fba3 1302 	umull	r1, r3, r3, r2
 8001e8a:	08d9      	lsrs	r1, r3, #3
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	4303      	orrs	r3, r0
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8001ea6:	793b      	ldrb	r3, [r7, #4]
 8001ea8:	4a35      	ldr	r2, [pc, #212]	; (8001f80 <setDateTime+0x18c>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	b258      	sxtb	r0, r3
 8001eb6:	793a      	ldrb	r2, [r7, #4]
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <setDateTime+0x18c>)
 8001eba:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebe:	08d9      	lsrs	r1, r3, #3
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	b25b      	sxtb	r3, r3
 8001ece:	4303      	orrs	r3, r0
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8001ed6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001eda:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <setDateTime+0x18c>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	b258      	sxtb	r0, r3
 8001ee8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <setDateTime+0x18c>)
 8001eee:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef2:	08d9      	lsrs	r1, r3, #3
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	b25b      	sxtb	r3, r3
 8001f02:	4303      	orrs	r3, r0
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001f0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <setDateTime+0x18c>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	b258      	sxtb	r0, r3
 8001f1c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <setDateTime+0x18c>)
 8001f22:	fba3 1302 	umull	r1, r3, r3, r2
 8001f26:	08d9      	lsrs	r1, r3, #3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	4303      	orrs	r3, r0
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <setDateTime+0x190>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f107 011c 	add.w	r1, r7, #28
 8001f46:	2201      	movs	r2, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fbc3 	bl	80046d4 <HAL_RTC_SetDate>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001f58:	e7fe      	b.n	8001f58 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <setDateTime+0x190>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f107 0108 	add.w	r1, r7, #8
 8001f62:	2201      	movs	r2, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 fab7 	bl	80044d8 <HAL_RTC_SetTime>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f70:	b672      	cpsid	i
}
 8001f72:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001f74:	e7fe      	b.n	8001f74 <setDateTime+0x180>
  }
}
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd90      	pop	{r4, r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	cccccccd 	.word	0xcccccccd
 8001f84:	20001e40 	.word	0x20001e40

08001f88 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <getDateTime+0x124>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f107 0114 	add.w	r1, r7, #20
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fb2b 	bl	8004610 <HAL_RTC_GetTime>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001fc4:	e7fe      	b.n	8001fc4 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <getDateTime+0x124>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f107 0110 	add.w	r1, r7, #16
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fc05 	bl	80047e0 <HAL_RTC_GetDate>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001fe0:	e7fe      	b.n	8001fe0 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8002002:	7c7b      	ldrb	r3, [r7, #17]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	7c7b      	ldrb	r3, [r7, #17]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4413      	add	r3, r2
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8002022:	7cbb      	ldrb	r3, [r7, #18]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	7cbb      	ldrb	r3, [r7, #18]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4413      	add	r3, r2
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8002042:	7d3b      	ldrb	r3, [r7, #20]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4413      	add	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	7d3b      	ldrb	r3, [r7, #20]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	b2db      	uxtb	r3, r3
 800205a:	4413      	add	r3, r2
 800205c:	b2da      	uxtb	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8002062:	7d7b      	ldrb	r3, [r7, #21]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4413      	add	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	b2da      	uxtb	r2, r3
 8002072:	7d7b      	ldrb	r3, [r7, #21]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4413      	add	r3, r2
 800207c:	b2da      	uxtb	r2, r3
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8002082:	7dbb      	ldrb	r3, [r7, #22]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4413      	add	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4413      	add	r3, r2
 800209c:	b2da      	uxtb	r2, r3
 800209e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a0:	701a      	strb	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20001e40 	.word	0x20001e40

080020b0 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b08f      	sub	sp, #60	; 0x3c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	4603      	mov	r3, r0
 80020c4:	71bb      	strb	r3, [r7, #6]
 80020c6:	460b      	mov	r3, r1
 80020c8:	717b      	strb	r3, [r7, #5]
 80020ca:	4613      	mov	r3, r2
 80020cc:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	222c      	movs	r2, #44	; 0x2c
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fd60 	bl	8005b9c <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4a40      	ldr	r2, [pc, #256]	; (80021e0 <setAlarm_A+0x130>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	b258      	sxtb	r0, r3
 80020ec:	79fa      	ldrb	r2, [r7, #7]
 80020ee:	4b3c      	ldr	r3, [pc, #240]	; (80021e0 <setAlarm_A+0x130>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	08d9      	lsrs	r1, r3, #3
 80020f6:	460b      	mov	r3, r1
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	b25b      	sxtb	r3, r3
 8002104:	4303      	orrs	r3, r0
 8002106:	b25b      	sxtb	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	4a33      	ldr	r2, [pc, #204]	; (80021e0 <setAlarm_A+0x130>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	08db      	lsrs	r3, r3, #3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	b258      	sxtb	r0, r3
 800211e:	79ba      	ldrb	r2, [r7, #6]
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <setAlarm_A+0x130>)
 8002122:	fba3 1302 	umull	r1, r3, r3, r2
 8002126:	08d9      	lsrs	r1, r3, #3
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	b25b      	sxtb	r3, r3
 8002136:	4303      	orrs	r3, r0
 8002138:	b25b      	sxtb	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 800213e:	797b      	ldrb	r3, [r7, #5]
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <setAlarm_A+0x130>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	b258      	sxtb	r0, r3
 800214e:	797a      	ldrb	r2, [r7, #5]
 8002150:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <setAlarm_A+0x130>)
 8002152:	fba3 1302 	umull	r1, r3, r3, r2
 8002156:	08d9      	lsrs	r1, r3, #3
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	b25b      	sxtb	r3, r3
 8002166:	4303      	orrs	r3, r0
 8002168:	b25b      	sxtb	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 800216e:	793b      	ldrb	r3, [r7, #4]
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <setAlarm_A+0x130>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	b258      	sxtb	r0, r3
 800217e:	793a      	ldrb	r2, [r7, #4]
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <setAlarm_A+0x130>)
 8002182:	fba3 1302 	umull	r1, r3, r3, r2
 8002186:	08d9      	lsrs	r1, r3, #3
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	b25b      	sxtb	r3, r3
 8002196:	4303      	orrs	r3, r0
 8002198:	b25b      	sxtb	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 80021b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <setAlarm_A+0x134>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f107 010c 	add.w	r1, r7, #12
 80021c4:	2201      	movs	r2, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fb58 	bl	800487c <HAL_RTC_SetAlarm_IT>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 80021d2:	b672      	cpsid	i
}
 80021d4:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 80021d6:	e7fe      	b.n	80021d6 <setAlarm_A+0x126>
  }
}
 80021d8:	bf00      	nop
 80021da:	373c      	adds	r7, #60	; 0x3c
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	cccccccd 	.word	0xcccccccd
 80021e4:	20001e40 	.word	0x20001e40

080021e8 <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <diableAlarm_A+0x24>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 fc4d 	bl	8004a94 <HAL_RTC_DeactivateAlarm>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 8002204:	e7fe      	b.n	8002204 <diableAlarm_A+0x1c>
	}
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20001e40 	.word	0x20001e40

08002210 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <LL_AHB2_GRP1_EnableClock>:
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800223e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002254:	68fb      	ldr	r3, [r7, #12]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800226e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4313      	orrs	r3, r2
 8002276:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b090      	sub	sp, #64	; 0x40
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	2238      	movs	r2, #56	; 0x38
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fc75 	bl	8005b9c <memset>
  if(hrtc->Instance==RTC)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_RTC_MspInit+0x54>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d115      	bne.n	80022e8 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 ff67 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80022d8:	f7ff fd79 	bl	8001dce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022dc:	f7ff ff98 	bl	8002210 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80022e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022e4:	f7ff ffbc 	bl	8002260 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022e8:	bf00      	nop
 80022ea:	3740      	adds	r7, #64	; 0x40
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40002800 	.word	0x40002800

080022f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b096      	sub	sp, #88	; 0x58
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2238      	movs	r2, #56	; 0x38
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f003 fc41 	bl	8005b9c <memset>
  if(huart->Instance==USART2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_UART_MspInit+0x88>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d126      	bne.n	8002372 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002324:	2302      	movs	r3, #2
 8002326:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002328:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800232c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	4618      	mov	r0, r3
 8002334:	f001 ff34 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800233e:	f7ff fd46 	bl	8001dce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002342:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002346:	f7ff ff8b 	bl	8002260 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff ff70 	bl	8002230 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002350:	230c      	movs	r3, #12
 8002352:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002360:	2307      	movs	r3, #7
 8002362:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f000 faa5 	bl	80028bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3758      	adds	r7, #88	; 0x58
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40004400 	.word	0x40004400

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c6:	f000 f951 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <RTC_Alarm_IRQHandler+0x10>)
 80023d6:	f002 fbb9 	bl	8004b4c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20001d74 	.word	0x20001d74

080023e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <_kill>:

int _kill(int pid, int sig)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fc:	f003 fb96 	bl	8005b2c <__errno>
 8002400:	4603      	mov	r3, r0
 8002402:	2216      	movs	r2, #22
 8002404:	601a      	str	r2, [r3, #0]
  return -1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_exit>:

void _exit (int status)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800241a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffe7 	bl	80023f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002424:	e7fe      	b.n	8002424 <_exit+0x12>

08002426 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e00a      	b.n	800244e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002438:	f3af 8000 	nop.w
 800243c:	4601      	mov	r1, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbf0      	blt.n	8002438 <_read+0x12>
  }

  return len;
 8002456:	687b      	ldr	r3, [r7, #4]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e009      	b.n	8002486 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	60ba      	str	r2, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	dbf1      	blt.n	8002472 <_write+0x12>
  }
  return len;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_close>:

int _close(int file)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024be:	605a      	str	r2, [r3, #4]
  return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <_isatty>:

int _isatty(int file)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <_sbrk+0x5c>)
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <_sbrk+0x60>)
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <_sbrk+0x64>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_sbrk+0x68>)
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d207      	bcs.n	8002538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002528:	f003 fb00 	bl	8005b2c <__errno>
 800252c:	4603      	mov	r3, r0
 800252e:	220c      	movs	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002536:	e009      	b.n	800254c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <_sbrk+0x64>)
 8002548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20008000 	.word	0x20008000
 8002558:	00000400 	.word	0x00000400
 800255c:	20001e44 	.word	0x20001e44
 8002560:	20001e60 	.word	0x20001e60

08002564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002564:	480d      	ldr	r0, [pc, #52]	; (800259c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002566:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002568:	f7fd ffdc 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800256e:	490d      	ldr	r1, [pc, #52]	; (80025a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <LoopForever+0xe>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002574:	e002      	b.n	800257c <LoopCopyDataInit>

08002576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257a:	3304      	adds	r3, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002580:	d3f9      	bcc.n	8002576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002584:	4c0a      	ldr	r4, [pc, #40]	; (80025b0 <LoopForever+0x16>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002588:	e001      	b.n	800258e <LoopFillZerobss>

0800258a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258c:	3204      	adds	r2, #4

0800258e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002590:	d3fb      	bcc.n	800258a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002592:	f003 fad1 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002596:	f7ff f9fb 	bl	8001990 <main>

0800259a <LoopForever>:

LoopForever:
    b LoopForever
 800259a:	e7fe      	b.n	800259a <LoopForever>
  ldr   r0, =_estack
 800259c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80025a8:	080075d8 	.word	0x080075d8
  ldr r2, =_sbss
 80025ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80025b0:	20001e5c 	.word	0x20001e5c

080025b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC_IRQHandler>
	...

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c2:	2003      	movs	r0, #3
 80025c4:	f000 f93a 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025c8:	f001 fc0c 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_Init+0x3c>)
 80025d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d2:	2000      	movs	r0, #0
 80025d4:	f000 f810 	bl	80025f8 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	e001      	b.n	80025e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025e4:	f7ff fe54 	bl	8002290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025e8:	79fb      	ldrb	r3, [r7, #7]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_InitTick+0x6c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d024      	beq.n	8002656 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800260c:	f001 fbea 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_InitTick+0x6c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f93c 	bl	80028a2 <HAL_SYSTICK_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10f      	bne.n	8002650 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	d809      	bhi.n	800264a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002636:	2200      	movs	r2, #0
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800263e:	f000 f908 	bl	8002852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_InitTick+0x70>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e007      	b.n	800265a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e004      	b.n	800265a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e001      	b.n	800265a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000010 	.word	0x20000010
 8002668:	2000000c 	.word	0x2000000c

0800266c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_IncTick+0x1c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_IncTick+0x20>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a03      	ldr	r2, [pc, #12]	; (800268c <HAL_IncTick+0x20>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	20000010 	.word	0x20000010
 800268c:	20001e48 	.word	0x20001e48

08002690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTick;
 8002694:	4b02      	ldr	r3, [pc, #8]	; (80026a0 <HAL_GetTick+0x10>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20001e48 	.word	0x20001e48

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4906      	ldr	r1, [pc, #24]	; (800273c <__NVIC_EnableIRQ+0x34>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	; (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800281c:	f7ff ff90 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff2d 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002860:	f7ff ff44 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7ff ff92 	bl	8002794 <NVIC_EncodePriority>
 8002870:	4602      	mov	r2, r0
 8002872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff61 	bl	8002740 <__NVIC_SetPriority>
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff37 	bl	8002708 <__NVIC_EnableIRQ>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ffa4 	bl	80027f8 <SysTick_Config>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ca:	e140      	b.n	8002b4e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	4013      	ands	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8132 	beq.w	8002b48 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d005      	beq.n	80028fc <HAL_GPIO_Init+0x40>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d130      	bne.n	800295e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002932:	2201      	movs	r2, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0201 	and.w	r2, r3, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b03      	cmp	r3, #3
 8002968:	d017      	beq.n	800299a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d123      	bne.n	80029ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3208      	adds	r2, #8
 80029e8:	6939      	ldr	r1, [r7, #16]
 80029ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0203 	and.w	r2, r3, #3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 808c 	beq.w	8002b48 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a30:	4a4e      	ldr	r2, [pc, #312]	; (8002b6c <HAL_GPIO_Init+0x2b0>)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	2207      	movs	r2, #7
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a5a:	d00d      	beq.n	8002a78 <HAL_GPIO_Init+0x1bc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a44      	ldr	r2, [pc, #272]	; (8002b70 <HAL_GPIO_Init+0x2b4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <HAL_GPIO_Init+0x1b8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <HAL_GPIO_Init+0x2b8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_GPIO_Init+0x1b4>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e004      	b.n	8002a7a <HAL_GPIO_Init+0x1be>
 8002a70:	2307      	movs	r3, #7
 8002a72:	e002      	b.n	8002a7a <HAL_GPIO_Init+0x1be>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_GPIO_Init+0x1be>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a8a:	4938      	ldr	r1, [pc, #224]	; (8002b6c <HAL_GPIO_Init+0x2b0>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002abc:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ae6:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002b12:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b20:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002b40:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f aeb7 	bne.w	80028cc <HAL_GPIO_Init+0x10>
  }
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	48000400 	.word	0x48000400
 8002b74:	48000800 	.word	0x48000800
 8002b78:	58000800 	.word	0x58000800

08002b7c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b8a:	e0af      	b.n	8002cec <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a2 	beq.w	8002ce6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002ba2:	4a59      	ldr	r2, [pc, #356]	; (8002d08 <HAL_GPIO_DeInit+0x18c>)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	2207      	movs	r2, #7
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bca:	d00d      	beq.n	8002be8 <HAL_GPIO_DeInit+0x6c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a4f      	ldr	r2, [pc, #316]	; (8002d0c <HAL_GPIO_DeInit+0x190>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d007      	beq.n	8002be4 <HAL_GPIO_DeInit+0x68>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a4e      	ldr	r2, [pc, #312]	; (8002d10 <HAL_GPIO_DeInit+0x194>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_GPIO_DeInit+0x64>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e004      	b.n	8002bea <HAL_GPIO_DeInit+0x6e>
 8002be0:	2307      	movs	r3, #7
 8002be2:	e002      	b.n	8002bea <HAL_GPIO_DeInit+0x6e>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_GPIO_DeInit+0x6e>
 8002be8:	2300      	movs	r3, #0
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	f002 0203 	and.w	r2, r2, #3
 8002bf0:	0092      	lsls	r2, r2, #2
 8002bf2:	4093      	lsls	r3, r2
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d136      	bne.n	8002c68 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002bfa:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002bfc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	4943      	ldr	r1, [pc, #268]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002c0c:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002c0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	493f      	ldr	r1, [pc, #252]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	493b      	ldr	r1, [pc, #236]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4937      	ldr	r1, [pc, #220]	; (8002d14 <HAL_GPIO_DeInit+0x198>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	2207      	movs	r2, #7
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002c4a:	4a2f      	ldr	r2, [pc, #188]	; (8002d08 <HAL_GPIO_DeInit+0x18c>)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	482b      	ldr	r0, [pc, #172]	; (8002d08 <HAL_GPIO_DeInit+0x18c>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	400a      	ands	r2, r1
 8002c62:	3302      	adds	r3, #2
 8002c64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2103      	movs	r1, #3
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	08d2      	lsrs	r2, r2, #3
 8002c9c:	4019      	ands	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2103      	movs	r1, #3
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2103      	movs	r1, #3
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f af49 	bne.w	8002b8c <HAL_GPIO_DeInit+0x10>
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	48000400 	.word	0x48000400
 8002d10:	48000800 	.word	0x48000800
 8002d14:	58000800 	.word	0x58000800

08002d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
 8002d24:	4613      	mov	r3, r2
 8002d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d28:	787b      	ldrb	r3, [r7, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a03      	ldr	r2, [pc, #12]	; (8002d60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	58000400 	.word	0x58000400

08002d64 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <LL_PWR_EnableBootC2+0x18>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <LL_PWR_EnableBootC2+0x18>)
 8002d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	58000400 	.word	0x58000400

08002d80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_PWREx_GetVoltageRange+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	58000400 	.word	0x58000400

08002d98 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002da0:	f7ff ffe0 	bl	8002d64 <LL_PWR_EnableBootC2>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <LL_PWR_IsEnabledBkUpAccess>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbc:	d101      	bne.n	8002dc2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	58000400 	.word	0x58000400

08002dd0 <LL_RCC_HSE_EnableTcxo>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <LL_RCC_HSE_DisableTcxo>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1a:	d101      	bne.n	8002e20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <LL_RCC_HSE_Enable>:
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_HSE_Disable>:
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <LL_RCC_HSE_IsReady>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e74:	d101      	bne.n	8002e7a <LL_RCC_HSE_IsReady+0x18>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <LL_RCC_HSE_IsReady+0x1a>
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_HSI_Enable>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_HSI_Disable>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <LL_RCC_HSI_IsReady>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d101      	bne.n	8002ed4 <LL_RCC_HSI_IsReady+0x18>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <LL_RCC_HSI_IsReady+0x1a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_HSI_SetCalibTrimming>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	061b      	lsls	r3, r3, #24
 8002ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <LL_RCC_LSE_IsReady>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d101      	bne.n	8002f1e <LL_RCC_LSE_IsReady+0x18>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <LL_RCC_LSE_IsReady+0x1a>
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <LL_RCC_LSI_Enable>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_LSI_Disable>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_LSI_IsReady>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d101      	bne.n	8002f80 <LL_RCC_LSI_IsReady+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_RCC_LSI_IsReady+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <LL_RCC_MSI_Enable>:
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6013      	str	r3, [r2, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_MSI_Disable>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6013      	str	r3, [r2, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <LL_RCC_MSI_IsReady>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d101      	bne.n	8002fd8 <LL_RCC_MSI_IsReady+0x16>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <LL_RCC_MSI_IsReady+0x18>
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d101      	bne.n	8002ff8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <LL_RCC_MSI_GetRange>:
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003024:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <LL_RCC_SetSysClkSource>:
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <LL_RCC_GetSysClkSource>:
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <LL_RCC_SetAHBPrescaler>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <LL_C2_RCC_SetAHBPrescaler>:
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <LL_RCC_SetAHB3Prescaler>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030f4:	f023 020f 	bic.w	r2, r3, #15
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <LL_RCC_SetAPB1Prescaler>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <LL_RCC_SetAPB2Prescaler>:
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <LL_RCC_GetAHBPrescaler>:
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <LL_RCC_GetAHB3Prescaler>:
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <LL_RCC_GetAPB1Prescaler>:
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <LL_RCC_GetAPB2Prescaler>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003202:	d101      	bne.n	8003208 <LL_RCC_PLL_IsReady+0x18>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <LL_RCC_PLL_IsReady+0x1a>
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800322e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0303 	and.w	r3, r3, #3
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327e:	d101      	bne.n	8003284 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a2:	d101      	bne.n	80032a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c6:	d101      	bne.n	80032cc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e8:	d101      	bne.n	80032ee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800330a:	d101      	bne.n	8003310 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
	...

0800331c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e36f      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332e:	f7ff fea6 	bl	800307e <LL_RCC_GetSysClkSource>
 8003332:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003334:	f7ff ff8f 	bl	8003256 <LL_RCC_PLL_GetMainSource>
 8003338:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80c4 	beq.w	80034d0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_RCC_OscConfig+0x3e>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d176      	bne.n	8003442 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d173      	bne.n	8003442 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e353      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x68>
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003382:	e006      	b.n	8003392 <HAL_RCC_OscConfig+0x76>
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003392:	4293      	cmp	r3, r2
 8003394:	d222      	bcs.n	80033dc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd5a 	bl	8003e54 <RCC_SetFlashLatencyFromMSIRange>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e331      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fe2b 	bl	8003030 <LL_RCC_MSI_SetCalibTrimming>
 80033da:	e021      	b.n	8003420 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e6:	f043 0308 	orr.w	r3, r3, #8
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fe12 	bl	8003030 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fd1f 	bl	8003e54 <RCC_SetFlashLatencyFromMSIRange>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e2f6      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003420:	f000 fce0 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003424:	4603      	mov	r3, r0
 8003426:	4aa7      	ldr	r2, [pc, #668]	; (80036c4 <HAL_RCC_OscConfig+0x3a8>)
 8003428:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800342a:	4ba7      	ldr	r3, [pc, #668]	; (80036c8 <HAL_RCC_OscConfig+0x3ac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f8e2 	bl	80025f8 <HAL_InitTick>
 8003434:	4603      	mov	r3, r0
 8003436:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d047      	beq.n	80034ce <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	e2e5      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d02c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800344a:	f7ff fd9e 	bl	8002f8a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344e:	f7ff f91f 	bl	8002690 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003456:	f7ff f91b 	bl	8002690 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e2d2      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003468:	f7ff fdab 	bl	8002fc2 <LL_RCC_MSI_IsReady>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f1      	beq.n	8003456 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fdc7 	bl	8003030 <LL_RCC_MSI_SetCalibTrimming>
 80034a2:	e015      	b.n	80034d0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a4:	f7ff fd7f 	bl	8002fa6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a8:	f7ff f8f2 	bl	8002690 <HAL_GetTick>
 80034ac:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b0:	f7ff f8ee 	bl	8002690 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e2a5      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034c2:	f7ff fd7e 	bl	8002fc2 <LL_RCC_MSI_IsReady>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f1      	bne.n	80034b0 <HAL_RCC_OscConfig+0x194>
 80034cc:	e000      	b.n	80034d0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034ce:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d058      	beq.n	800358e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x1d2>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d108      	bne.n	80034fa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d105      	bne.n	80034fa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d14b      	bne.n	800358e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e289      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d102      	bne.n	8003520 <HAL_RCC_OscConfig+0x204>
 800351a:	f7ff fc86 	bl	8002e2a <LL_RCC_HSE_Enable>
 800351e:	e00d      	b.n	800353c <HAL_RCC_OscConfig+0x220>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003528:	d104      	bne.n	8003534 <HAL_RCC_OscConfig+0x218>
 800352a:	f7ff fc51 	bl	8002dd0 <LL_RCC_HSE_EnableTcxo>
 800352e:	f7ff fc7c 	bl	8002e2a <LL_RCC_HSE_Enable>
 8003532:	e003      	b.n	800353c <HAL_RCC_OscConfig+0x220>
 8003534:	f7ff fc87 	bl	8002e46 <LL_RCC_HSE_Disable>
 8003538:	f7ff fc58 	bl	8002dec <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff f8a4 	bl	8002690 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7ff f8a0 	bl	8002690 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e257      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800355e:	f7ff fc80 	bl	8002e62 <LL_RCC_HSE_IsReady>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f1      	beq.n	800354c <HAL_RCC_OscConfig+0x230>
 8003568:	e011      	b.n	800358e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7ff f891 	bl	8002690 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003572:	f7ff f88d 	bl	8002690 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b64      	cmp	r3, #100	; 0x64
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e244      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003584:	f7ff fc6d 	bl	8002e62 <LL_RCC_HSE_IsReady>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f1      	bne.n	8003572 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d046      	beq.n	8003628 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d005      	beq.n	80035ac <HAL_RCC_OscConfig+0x290>
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d10e      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e22a      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fc8e 	bl	8002ede <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035c2:	e031      	b.n	8003628 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d019      	beq.n	8003600 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035cc:	f7ff fc5a 	bl	8002e84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7ff f85e 	bl	8002690 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d8:	f7ff f85a 	bl	8002690 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e211      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80035ea:	f7ff fc67 	bl	8002ebc <LL_RCC_HSI_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f1      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fc70 	bl	8002ede <LL_RCC_HSI_SetCalibTrimming>
 80035fe:	e013      	b.n	8003628 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003600:	f7ff fc4e 	bl	8002ea0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7ff f844 	bl	8002690 <HAL_GetTick>
 8003608:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360c:	f7ff f840 	bl	8002690 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1f7      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800361e:	f7ff fc4d 	bl	8002ebc <LL_RCC_HSI_IsReady>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f1      	bne.n	800360c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d06e      	beq.n	8003712 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d056      	beq.n	80036ea <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003644:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	429a      	cmp	r2, r3
 8003652:	d031      	beq.n	80036b8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e1d0      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d013      	beq.n	800369e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003676:	f7ff fc67 	bl	8002f48 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800367a:	f7ff f809 	bl	8002690 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003682:	f7ff f805 	bl	8002690 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b11      	cmp	r3, #17
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e1bc      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003694:	f7ff fc68 	bl	8002f68 <LL_RCC_LSI_IsReady>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f1      	bne.n	8003682 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800369e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a6:	f023 0210 	bic.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b8:	f7ff fc36 	bl	8002f28 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fe ffe8 	bl	8002690 <HAL_GetTick>
 80036c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80036c2:	e00c      	b.n	80036de <HAL_RCC_OscConfig+0x3c2>
 80036c4:	20000000 	.word	0x20000000
 80036c8:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe ffe0 	bl	8002690 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b11      	cmp	r3, #17
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e197      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80036de:	f7ff fc43 	bl	8002f68 <LL_RCC_LSI_IsReady>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f1      	beq.n	80036cc <HAL_RCC_OscConfig+0x3b0>
 80036e8:	e013      	b.n	8003712 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ea:	f7ff fc2d 	bl	8002f48 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fe ffcf 	bl	8002690 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fe ffcb 	bl	8002690 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b11      	cmp	r3, #17
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e182      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003708:	f7ff fc2e 	bl	8002f68 <LL_RCC_LSI_IsReady>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f1      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80d8 	beq.w	80038d0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003720:	f7ff fb44 	bl	8002dac <LL_PWR_IsEnabledBkUpAccess>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d113      	bne.n	8003752 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800372a:	f7ff fb0d 	bl	8002d48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fe ffaf 	bl	8002690 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fe ffab 	bl	8002690 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e162      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003748:	f7ff fb30 	bl	8002dac <LL_PWR_IsEnabledBkUpAccess>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f1      	beq.n	8003736 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d07b      	beq.n	8003852 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b85      	cmp	r3, #133	; 0x85
 8003760:	d003      	beq.n	800376a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d109      	bne.n	800377e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fe ff87 	bl	8002690 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe ff79 	bl	8002690 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e12e      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037b0:	f7ff fba9 	bl	8002f06 <LL_RCC_LSE_IsReady>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ef      	beq.n	800379a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b81      	cmp	r3, #129	; 0x81
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b85      	cmp	r3, #133	; 0x85
 80037c8:	d121      	bne.n	800380e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe ff61 	bl	8002690 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe ff53 	bl	8002690 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e108      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ec      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800380c:	e060      	b.n	80038d0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe ff3f 	bl	8002690 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe ff31 	bl	8002690 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0e6      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ec      	bne.n	800382a <HAL_RCC_OscConfig+0x50e>
 8003850:	e03e      	b.n	80038d0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7fe ff1d 	bl	8002690 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe ff0f 	bl	8002690 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0c4      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ec      	bne.n	800386e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7fe fefc 	bl	8002690 <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fe feee 	bl	8002690 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0a3      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80038c6:	f7ff fb1e 	bl	8002f06 <LL_RCC_LSE_IsReady>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1ef      	bne.n	80038b0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8099 	beq.w	8003a0c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d06c      	beq.n	80039ba <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d14b      	bne.n	8003980 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	f7ff fc74 	bl	80031d4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fed0 	bl	8002690 <HAL_GetTick>
 80038f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fe fecc 	bl	8002690 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b0a      	cmp	r3, #10
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e083      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003906:	f7ff fc73 	bl	80031f0 <LL_RCC_PLL_IsReady>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f1      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <HAL_RCC_OscConfig+0x6fc>)
 8003918:	4013      	ands	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003928:	0212      	lsls	r2, r2, #8
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003930:	4311      	orrs	r1, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800393c:	430a      	orrs	r2, r1
 800393e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003942:	4313      	orrs	r3, r2
 8003944:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003946:	f7ff fc37 	bl	80031b8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe fe99 	bl	8002690 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7fe fe95 	bl	8002690 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b0a      	cmp	r3, #10
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e04c      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003974:	f7ff fc3c 	bl	80031f0 <LL_RCC_PLL_IsReady>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f1      	beq.n	8003962 <HAL_RCC_OscConfig+0x646>
 800397e:	e045      	b.n	8003a0c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003980:	f7ff fc28 	bl	80031d4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fe84 	bl	8002690 <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fe80 	bl	8002690 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b0a      	cmp	r3, #10
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e037      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800399e:	f7ff fc27 	bl	80031f0 <LL_RCC_PLL_IsReady>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f1      	bne.n	800398c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_RCC_OscConfig+0x700>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
 80039b8:	e028      	b.n	8003a0c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e023      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f003 0203 	and.w	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	429a      	cmp	r2, r3
 80039da:	d115      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10e      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	11c1808c 	.word	0x11c1808c
 8003a1c:	eefefffc 	.word	0xeefefffc

08003a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e12c      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b98      	ldr	r3, [pc, #608]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d91b      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b95      	ldr	r3, [pc, #596]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	4993      	ldr	r1, [pc, #588]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a52:	f7fe fe1d 	bl	8002690 <HAL_GetTick>
 8003a56:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a5a:	f7fe fe19 	bl	8002690 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e110      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6c:	4b8a      	ldr	r3, [pc, #552]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d1ef      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fb02 	bl	8003094 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a90:	f7fe fdfe 	bl	8002690 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a98:	f7fe fdfa 	bl	8002690 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0f1      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003aaa:	f7ff fbdf 	bl	800326c <LL_RCC_IsActiveFlag_HPRE>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f1      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d016      	beq.n	8003aee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff faf8 	bl	80030ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aca:	f7fe fde1 	bl	8002690 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ad2:	f7fe fddd 	bl	8002690 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0d4      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ae4:	f7ff fbd3 	bl	800328e <LL_RCC_IsActiveFlag_C2HPRE>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f1      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff faf0 	bl	80030e4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fdc4 	bl	8002690 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b0c:	f7fe fdc0 	bl	8002690 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0b7      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b1e:	f7ff fbc8 	bl	80032b2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f1      	beq.n	8003b0c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d016      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fae9 	bl	8003110 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe fda7 	bl	8002690 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b46:	f7fe fda3 	bl	8002690 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e09a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b58:	f7ff fbbd 	bl	80032d6 <LL_RCC_IsActiveFlag_PPRE1>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f1      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d017      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fade 	bl	8003136 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b7a:	f7fe fd89 	bl	8002690 <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b82:	f7fe fd85 	bl	8002690 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e07c      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b94:	f7ff fbb0 	bl	80032f8 <LL_RCC_IsActiveFlag_PPRE2>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f1      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d043      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003bb2:	f7ff f956 	bl	8002e62 <LL_RCC_HSE_IsReady>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11e      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e066      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003bc8:	f7ff fb12 	bl	80031f0 <LL_RCC_PLL_IsReady>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d113      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e05b      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bde:	f7ff f9f0 	bl	8002fc2 <LL_RCC_MSI_IsReady>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e050      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003bec:	f7ff f966 	bl	8002ebc <LL_RCC_HSI_IsReady>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e049      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fa2a 	bl	8003058 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fe fd44 	bl	8002690 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fe fd40 	bl	8002690 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e035      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	f7ff fa2c 	bl	800307e <LL_RCC_GetSysClkSource>
 8003c26:	4602      	mov	r2, r0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d1ec      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d21b      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 0207 	bic.w	r2, r3, #7
 8003c48:	4913      	ldr	r1, [pc, #76]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c50:	f7fe fd1e 	bl	8002690 <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c58:	f7fe fd1a 	bl	8002690 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e011      	b.n	8003c8e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x278>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1ef      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c78:	f000 f8b4 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_RCC_ClockConfig+0x27c>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCC_ClockConfig+0x280>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fcb6 	bl	80025f8 <HAL_InitTick>
 8003c8c:	4603      	mov	r3, r0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	58004000 	.word	0x58004000
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	2000000c 	.word	0x2000000c

08003ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb2:	f7ff f9e4 	bl	800307e <LL_RCC_GetSysClkSource>
 8003cb6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb8:	f7ff facd 	bl	8003256 <LL_RCC_PLL_GetMainSource>
 8003cbc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x2c>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d139      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d136      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003cd0:	f7ff f987 	bl	8002fe2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x62>
 8003cda:	f7ff f982 	bl	8002fe2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x4e>
 8003ce4:	f7ff f98d 	bl	8003002 <LL_RCC_MSI_GetRange>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	e005      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x5a>
 8003cf2:	f7ff f991 	bl	8003018 <LL_RCC_MSI_GetRangeAfterStandby>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	4a36      	ldr	r2, [pc, #216]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x8c>
 8003d06:	f7ff f96c 	bl	8002fe2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x7a>
 8003d10:	f7ff f977 	bl	8003002 <LL_RCC_MSI_GetRange>
 8003d14:	4603      	mov	r3, r0
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	e005      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x86>
 8003d1e:	f7ff f97b 	bl	8003018 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d22:	4603      	mov	r3, r0
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d115      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d3c:	e012      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x138>)
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e00c      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d109      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d50:	f7ff f85a 	bl	8002e08 <LL_RCC_HSE_IsEnabledDiv2>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x138>)
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e001      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d62:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d64:	f7ff f98b 	bl	800307e <LL_RCC_GetSysClkSource>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d12f      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d6e:	f7ff fa72 	bl	8003256 <LL_RCC_PLL_GetMainSource>
 8003d72:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0xde>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d003      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0xe4>
 8003d80:	e00d      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x138>)
 8003d84:	60fb      	str	r3, [r7, #12]
        break;
 8003d86:	e00d      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d88:	f7ff f83e 	bl	8002e08 <LL_RCC_HSE_IsEnabledDiv2>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x138>)
 8003d94:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d96:	e005      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d9a:	60fb      	str	r3, [r7, #12]
        break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	60fb      	str	r3, [r7, #12]
        break;
 8003da2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003da4:	f7ff fa35 	bl	8003212 <LL_RCC_PLL_GetN>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	fb03 f402 	mul.w	r4, r3, r2
 8003db0:	f7ff fa46 	bl	8003240 <LL_RCC_PLL_GetDivider>
 8003db4:	4603      	mov	r3, r0
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	3301      	adds	r3, #1
 8003dba:	fbb4 f4f3 	udiv	r4, r4, r3
 8003dbe:	f7ff fa34 	bl	800322a <LL_RCC_PLL_GetR>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	0f5b      	lsrs	r3, r3, #29
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003dcc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003dce:	697b      	ldr	r3, [r7, #20]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	08007318 	.word	0x08007318
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	01e84800 	.word	0x01e84800

08003de4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de4:	b598      	push	{r3, r4, r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003de8:	f7ff ff5c 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003dec:	4604      	mov	r4, r0
 8003dee:	f7ff f9b5 	bl	800315c <LL_RCC_GetAHBPrescaler>
 8003df2:	4603      	mov	r3, r0
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <HAL_RCC_GetHCLKFreq+0x24>)
 8003dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e00:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd98      	pop	{r3, r4, r7, pc}
 8003e08:	080072b8 	.word	0x080072b8

08003e0c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b598      	push	{r3, r4, r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e10:	f7ff ffe8 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e14:	4604      	mov	r4, r0
 8003e16:	f7ff f9b9 	bl	800318c <LL_RCC_GetAPB1Prescaler>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd98      	pop	{r3, r4, r7, pc}
 8003e2c:	080072f8 	.word	0x080072f8

08003e30 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e30:	b598      	push	{r3, r4, r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003e34:	f7ff ffd6 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e38:	4604      	mov	r4, r0
 8003e3a:	f7ff f9b2 	bl	80031a2 <LL_RCC_GetAPB2Prescaler>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	0adb      	lsrs	r3, r3, #11
 8003e42:	4a03      	ldr	r2, [pc, #12]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd98      	pop	{r3, r4, r7, pc}
 8003e50:	080072f8 	.word	0x080072f8

08003e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003e6c:	f7ff f981 	bl	8003172 <LL_RCC_GetAHB3Prescaler>
 8003e70:	4603      	mov	r3, r0
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0c9c      	lsrs	r4, r3, #18
 8003e90:	f7fe ff76 	bl	8002d80 <HAL_PWREx_GetVoltageRange>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4619      	mov	r1, r3
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 f80b 	bl	8003eb4 <RCC_SetFlashLatency>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	08007318 	.word	0x08007318
 8003eac:	080072b8 	.word	0x080072b8
 8003eb0:	431bde83 	.word	0x431bde83

08003eb4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08e      	sub	sp, #56	; 0x38
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <RCC_SetFlashLatency+0xf4>)
 8003ec0:	f107 0320 	add.w	r3, r7, #32
 8003ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ec8:	6018      	str	r0, [r3, #0]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003ece:	4a37      	ldr	r2, [pc, #220]	; (8003fac <RCC_SetFlashLatency+0xf8>)
 8003ed0:	f107 0318 	add.w	r3, r7, #24
 8003ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ed8:	6018      	str	r0, [r3, #0]
 8003eda:	3304      	adds	r3, #4
 8003edc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003ede:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <RCC_SetFlashLatency+0xfc>)
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef4:	d11b      	bne.n	8003f2e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8003efa:	e014      	b.n	8003f26 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	3338      	adds	r3, #56	; 0x38
 8003f02:	443b      	add	r3, r7
 8003f04:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d807      	bhi.n	8003f20 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	3338      	adds	r3, #56	; 0x38
 8003f16:	443b      	add	r3, r7
 8003f18:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f1e:	e021      	b.n	8003f64 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	3301      	adds	r3, #1
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d9e7      	bls.n	8003efc <RCC_SetFlashLatency+0x48>
 8003f2c:	e01a      	b.n	8003f64 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f32:	e014      	b.n	8003f5e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	3338      	adds	r3, #56	; 0x38
 8003f3a:	443b      	add	r3, r7
 8003f3c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d807      	bhi.n	8003f58 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	3338      	adds	r3, #56	; 0x38
 8003f4e:	443b      	add	r3, r7
 8003f50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f56:	e005      	b.n	8003f64 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d9e7      	bls.n	8003f34 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <RCC_SetFlashLatency+0x100>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 0207 	bic.w	r2, r3, #7
 8003f6c:	4911      	ldr	r1, [pc, #68]	; (8003fb4 <RCC_SetFlashLatency+0x100>)
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f74:	f7fe fb8c 	bl	8002690 <HAL_GetTick>
 8003f78:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f7a:	e008      	b.n	8003f8e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f7c:	f7fe fb88 	bl	8002690 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e007      	b.n	8003f9e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <RCC_SetFlashLatency+0x100>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d1ef      	bne.n	8003f7c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3738      	adds	r7, #56	; 0x38
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	0800729c 	.word	0x0800729c
 8003fac:	080072a4 	.word	0x080072a4
 8003fb0:	080072ac 	.word	0x080072ac
 8003fb4:	58004000 	.word	0x58004000

08003fb8 <LL_RCC_LSE_IsReady>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d101      	bne.n	8003fd0 <LL_RCC_LSE_IsReady+0x18>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <LL_RCC_LSE_IsReady+0x1a>
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_SetUSARTClockSource>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <LL_RCC_SetI2SClockSource>:
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800401e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <LL_RCC_SetLPUARTClockSource>:
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <LL_RCC_SetI2CClockSource>:
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004076:	43db      	mvns	r3, r3
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <LL_RCC_SetLPTIMClockSource>:
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_SetRNGClockSource>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <LL_RCC_SetADCClockSource>:
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <LL_RCC_SetRTCClockSource>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <LL_RCC_GetRTCClockSource>:
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <LL_RCC_ForceBackupDomainReset>:
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <LL_RCC_ReleaseBackupDomainReset>:
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004196:	bf00      	nop
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80041ac:	2300      	movs	r3, #0
 80041ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80041b0:	2300      	movs	r3, #0
 80041b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d058      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80041c0:	f7fe fdc2 	bl	8002d48 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c4:	f7fe fa64 	bl	8002690 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80041ca:	e009      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fe fa60 	bl	8002690 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d902      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	74fb      	strb	r3, [r7, #19]
        break;
 80041de:	e006      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80041e0:	4b7b      	ldr	r3, [pc, #492]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ec:	d1ee      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d13c      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80041f4:	f7ff ffa7 	bl	8004146 <LL_RCC_GetRTCClockSource>
 80041f8:	4602      	mov	r2, r0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	429a      	cmp	r2, r3
 8004200:	d00f      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004210:	f7ff ffa5 	bl	800415e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004214:	f7ff ffb3 	bl	800417e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d014      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe fa30 	bl	8002690 <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004232:	e00b      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004234:	f7fe fa2c 	bl	8002690 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d902      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	74fb      	strb	r3, [r7, #19]
            break;
 800424a:	e004      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800424c:	f7ff feb4 	bl	8003fb8 <LL_RCC_LSE_IsReady>
 8004250:	4603      	mov	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	d1ee      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ff5b 	bl	800411c <LL_RCC_SetRTCClockSource>
 8004266:	e004      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
 800426c:	e001      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fea9 	bl	8003fda <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fe9e 	bl	8003fda <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fec0 	bl	8004034 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fee6 	bl	8004096 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fedb 	bl	8004096 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fed0 	bl	8004096 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fea9 	bl	800405e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fe9e 	bl	800405e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fe93 	bl	800405e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d011      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fe5e 	bl	800400a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004356:	d107      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004366:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d010      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fea5 	bl	80040c8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	2b00      	cmp	r3, #0
 8004384:	d107      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004394:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fea3 	bl	80040f2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b4:	d107      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80043c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	58000400 	.word	0x58000400

080043d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d071      	beq.n	80044ca <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd ff4e 	bl	800229c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004408:	4b32      	ldr	r3, [pc, #200]	; (80044d4 <HAL_RTC_Init+0x100>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b10      	cmp	r3, #16
 8004412:	d051      	beq.n	80044b8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004414:	4b2f      	ldr	r3, [pc, #188]	; (80044d4 <HAL_RTC_Init+0x100>)
 8004416:	22ca      	movs	r2, #202	; 0xca
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RTC_Init+0x100>)
 800441c:	2253      	movs	r2, #83	; 0x53
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fbe3 	bl	8004bec <RTC_EnterInitMode>
 8004426:	4603      	mov	r3, r0
 8004428:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d13f      	bne.n	80044b0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004430:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <HAL_RTC_Init+0x100>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <HAL_RTC_Init+0x100>)
 8004436:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004440:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <HAL_RTC_Init+0x100>)
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	4319      	orrs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	430b      	orrs	r3, r1
 8004454:	491f      	ldr	r1, [pc, #124]	; (80044d4 <HAL_RTC_Init+0x100>)
 8004456:	4313      	orrs	r3, r2
 8004458:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	491b      	ldr	r1, [pc, #108]	; (80044d4 <HAL_RTC_Init+0x100>)
 8004466:	4313      	orrs	r3, r2
 8004468:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <HAL_RTC_Init+0x100>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	430b      	orrs	r3, r1
 800447c:	4915      	ldr	r1, [pc, #84]	; (80044d4 <HAL_RTC_Init+0x100>)
 800447e:	4313      	orrs	r3, r2
 8004480:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fbe6 	bl	8004c54 <RTC_ExitInitMode>
 8004488:	4603      	mov	r3, r0
 800448a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10e      	bne.n	80044b0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RTC_Init+0x100>)
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a19      	ldr	r1, [r3, #32]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	4319      	orrs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	490a      	ldr	r1, [pc, #40]	; (80044d4 <HAL_RTC_Init+0x100>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_RTC_Init+0x100>)
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
 80044b6:	e001      	b.n	80044bc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40002800 	.word	0x40002800

080044d8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_RTC_SetTime+0x1a>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e088      	b.n	8004604 <HAL_RTC_SetTime+0x12c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004502:	4b42      	ldr	r3, [pc, #264]	; (800460c <HAL_RTC_SetTime+0x134>)
 8004504:	22ca      	movs	r2, #202	; 0xca
 8004506:	625a      	str	r2, [r3, #36]	; 0x24
 8004508:	4b40      	ldr	r3, [pc, #256]	; (800460c <HAL_RTC_SetTime+0x134>)
 800450a:	2253      	movs	r2, #83	; 0x53
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fb6c 	bl	8004bec <RTC_EnterInitMode>
 8004514:	4603      	mov	r3, r0
 8004516:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d15e      	bne.n	80045dc <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RTC_SetTime+0x134>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452a:	d057      	beq.n	80045dc <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d125      	bne.n	800457e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004532:	4b36      	ldr	r3, [pc, #216]	; (800460c <HAL_RTC_SetTime+0x134>)
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fbc1 	bl	8004cd0 <RTC_ByteToBcd2>
 800454e:	4603      	mov	r3, r0
 8004550:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fbba 	bl	8004cd0 <RTC_ByteToBcd2>
 800455c:	4603      	mov	r3, r0
 800455e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004560:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	789b      	ldrb	r3, [r3, #2]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fbb2 	bl	8004cd0 <RTC_ByteToBcd2>
 800456c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800456e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	78db      	ldrb	r3, [r3, #3]
 8004576:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e017      	b.n	80045ae <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800457e:	4b23      	ldr	r3, [pc, #140]	; (800460c <HAL_RTC_SetTime+0x134>)
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2200      	movs	r2, #0
 800458e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800459c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045a2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	78db      	ldrb	r3, [r3, #3]
 80045a8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_RTC_SetTime+0x134>)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80045b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045ba:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RTC_SetTime+0x134>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4a12      	ldr	r2, [pc, #72]	; (800460c <HAL_RTC_SetTime+0x134>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <HAL_RTC_SetTime+0x134>)
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	68d9      	ldr	r1, [r3, #12]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	490d      	ldr	r1, [pc, #52]	; (800460c <HAL_RTC_SetTime+0x134>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fb39 	bl	8004c54 <RTC_ExitInitMode>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RTC_SetTime+0x134>)
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004602:	7cfb      	ldrb	r3, [r7, #19]
}
 8004604:	4618      	mov	r0, r3
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	bd90      	pop	{r4, r7, pc}
 800460c:	40002800 	.word	0x40002800

08004610 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800461c:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <HAL_RTC_GetTime+0xc0>)
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_RTC_GetTime+0xc0>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004630:	d049      	beq.n	80046c6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004632:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_RTC_GetTime+0xc0>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_RTC_GetTime+0xc0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004646:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800464a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	0c1b      	lsrs	r3, r3, #16
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	0d9b      	lsrs	r3, r3, #22
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11a      	bne.n	80046c6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fb3a 	bl	8004d0e <RTC_Bcd2ToByte>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb31 	bl	8004d0e <RTC_Bcd2ToByte>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	789b      	ldrb	r3, [r3, #2]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fb28 	bl	8004d0e <RTC_Bcd2ToByte>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40002800 	.word	0x40002800

080046d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_RTC_SetDate+0x1a>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e071      	b.n	80047d2 <HAL_RTC_SetDate+0xfe>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10e      	bne.n	8004722 <HAL_RTC_SetDate+0x4e>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	b2db      	uxtb	r3, r3
 800471a:	330a      	adds	r3, #10
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11c      	bne.n	8004762 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 facf 	bl	8004cd0 <RTC_ByteToBcd2>
 8004732:	4603      	mov	r3, r0
 8004734:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fac8 	bl	8004cd0 <RTC_ByteToBcd2>
 8004740:	4603      	mov	r3, r0
 8004742:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004744:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	789b      	ldrb	r3, [r3, #2]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fac0 	bl	8004cd0 <RTC_ByteToBcd2>
 8004750:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004752:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e00e      	b.n	8004780 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	78db      	ldrb	r3, [r3, #3]
 8004766:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800476e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004774:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004780:	4b16      	ldr	r3, [pc, #88]	; (80047dc <HAL_RTC_SetDate+0x108>)
 8004782:	22ca      	movs	r2, #202	; 0xca
 8004784:	625a      	str	r2, [r3, #36]	; 0x24
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <HAL_RTC_SetDate+0x108>)
 8004788:	2253      	movs	r2, #83	; 0x53
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fa2d 	bl	8004bec <RTC_EnterInitMode>
 8004792:	4603      	mov	r3, r0
 8004794:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800479c:	4a0f      	ldr	r2, [pc, #60]	; (80047dc <HAL_RTC_SetDate+0x108>)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fa52 	bl	8004c54 <RTC_ExitInitMode>
 80047b0:	4603      	mov	r3, r0
 80047b2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RTC_SetDate+0x108>)
 80047b6:	22ff      	movs	r2, #255	; 0xff
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d103      	bne.n	80047c8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd90      	pop	{r4, r7, pc}
 80047da:	bf00      	nop
 80047dc:	40002800 	.word	0x40002800

080047e0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RTC_GetDate+0x98>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	0b5b      	lsrs	r3, r3, #13
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11a      	bne.n	800486e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	78db      	ldrb	r3, [r3, #3]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fa66 	bl	8004d0e <RTC_Bcd2ToByte>
 8004842:	4603      	mov	r3, r0
 8004844:	461a      	mov	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fa5d 	bl	8004d0e <RTC_Bcd2ToByte>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	789b      	ldrb	r3, [r3, #2]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fa54 	bl	8004d0e <RTC_Bcd2ToByte>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40002800 	.word	0x40002800

0800487c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_RTC_SetAlarm_IT+0x1e>
 8004896:	2302      	movs	r3, #2
 8004898:	e0f3      	b.n	8004a82 <HAL_RTC_SetAlarm_IT+0x206>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80048aa:	4b78      	ldr	r3, [pc, #480]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d06a      	beq.n	8004992 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d13a      	bne.n	8004938 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80048c2:	4b72      	ldr	r3, [pc, #456]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2200      	movs	r2, #0
 80048d2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 f9f5 	bl	8004cd0 <RTC_ByteToBcd2>
 80048e6:	4603      	mov	r3, r0
 80048e8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f9ee 	bl	8004cd0 <RTC_ByteToBcd2>
 80048f4:	4603      	mov	r3, r0
 80048f6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048f8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	789b      	ldrb	r3, [r3, #2]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f9e6 	bl	8004cd0 <RTC_ByteToBcd2>
 8004904:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004906:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	78db      	ldrb	r3, [r3, #3]
 800490e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004910:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f9d8 	bl	8004cd0 <RTC_ByteToBcd2>
 8004920:	4603      	mov	r3, r0
 8004922:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004924:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800492c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e02c      	b.n	8004992 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004940:	d00d      	beq.n	800495e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800494a:	d008      	beq.n	800495e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800494c:	4b4f      	ldr	r3, [pc, #316]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800496a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004970:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	78db      	ldrb	r3, [r3, #3]
 8004976:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004978:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004980:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004982:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004988:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004992:	4b3e      	ldr	r3, [pc, #248]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004994:	22ca      	movs	r2, #202	; 0xca
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
 8004998:	4b3c      	ldr	r3, [pc, #240]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 800499a:	2253      	movs	r2, #83	; 0x53
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a6:	d12c      	bne.n	8004a02 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80049a8:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	4a37      	ldr	r2, [pc, #220]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049b2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80049b4:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c0:	d107      	bne.n	80049d2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4930      	ldr	r1, [pc, #192]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	644b      	str	r3, [r1, #68]	; 0x44
 80049d0:	e006      	b.n	80049e0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80049d2:	4a2e      	ldr	r2, [pc, #184]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80049d8:	4a2c      	ldr	r2, [pc, #176]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80049e0:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	f043 0201 	orr.w	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 80049fa:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80049fe:	6193      	str	r3, [r2, #24]
 8004a00:	e02b      	b.n	8004a5a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004a02:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a08:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004a0c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004a0e:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a10:	2202      	movs	r2, #2
 8004a12:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1a:	d107      	bne.n	8004a2c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4919      	ldr	r1, [pc, #100]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a2a:	e006      	b.n	8004a3a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004a32:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004a3a:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f043 0202 	orr.w	r2, r3, #2
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a54:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004a58:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <HAL_RTC_SetAlarm_IT+0x214>)
 8004a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a60:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <HAL_RTC_SetAlarm_IT+0x214>)
 8004a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_RTC_SetAlarm_IT+0x210>)
 8004a6c:	22ff      	movs	r2, #255	; 0xff
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd90      	pop	{r4, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40002800 	.word	0x40002800
 8004a90:	58000800 	.word	0x58000800

08004a94 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_RTC_DeactivateAlarm+0x18>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e048      	b.n	8004b3e <HAL_RTC_DeactivateAlarm+0xaa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004abc:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004abe:	22ca      	movs	r2, #202	; 0xca
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ac2:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004ac4:	2253      	movs	r2, #83	; 0x53
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ace:	d115      	bne.n	8004afc <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004ad0:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004ad6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ada:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004ae2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	f023 0201 	bic.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004afa:	e014      	b.n	8004b26 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004b02:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004b06:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0c:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b12:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f023 0202 	bic.w	r2, r3, #2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004b20:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004b22:	2202      	movs	r2, #2
 8004b24:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	40002800 	.word	0x40002800

08004b4c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004b54:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004b56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc fede 	bl	8001932 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004b82:	2202      	movs	r2, #2
 8004b84:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8dc 	bl	8004d44 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40002800 	.word	0x40002800

08004ba0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <HAL_RTC_WaitForSynchro+0x48>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <HAL_RTC_WaitForSynchro+0x48>)
 8004bae:	f023 0320 	bic.w	r3, r3, #32
 8004bb2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004bb4:	f7fd fd6c 	bl	8002690 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004bba:	e009      	b.n	8004bd0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bbc:	f7fd fd68 	bl	8002690 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bca:	d901      	bls.n	8004bd0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e006      	b.n	8004bde <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RTC_WaitForSynchro+0x48>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40002800 	.word	0x40002800

08004bec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <RTC_EnterInitMode+0x64>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d120      	bne.n	8004c46 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004c04:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <RTC_EnterInitMode+0x64>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a11      	ldr	r2, [pc, #68]	; (8004c50 <RTC_EnterInitMode+0x64>)
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004c10:	f7fd fd3e 	bl	8002690 <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c16:	e00d      	b.n	8004c34 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004c18:	f7fd fd3a 	bl	8002690 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c26:	d905      	bls.n	8004c34 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <RTC_EnterInitMode+0x64>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <RTC_EnterInitMode+0x5a>
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d1e8      	bne.n	8004c18 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40002800 	.word	0x40002800

08004c54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004c60:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <RTC_ExitInitMode+0x78>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <RTC_ExitInitMode+0x78>)
 8004c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c6a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004c6c:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <RTC_ExitInitMode+0x78>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ff91 	bl	8004ba0 <HAL_RTC_WaitForSynchro>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01e      	beq.n	8004cc2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2203      	movs	r2, #3
 8004c88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e017      	b.n	8004cc2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <RTC_ExitInitMode+0x78>)
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <RTC_ExitInitMode+0x78>)
 8004c98:	f023 0320 	bic.w	r3, r3, #32
 8004c9c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff7e 	bl	8004ba0 <HAL_RTC_WaitForSynchro>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2203      	movs	r2, #3
 8004cae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <RTC_ExitInitMode+0x78>)
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <RTC_ExitInitMode+0x78>)
 8004cbc:	f043 0320 	orr.w	r3, r3, #32
 8004cc0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40002800 	.word	0x40002800

08004cd0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004ce2:	e005      	b.n	8004cf0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	3b0a      	subs	r3, #10
 8004cee:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
 8004cf2:	2b09      	cmp	r3, #9
 8004cf4:	d8f6      	bhi.n	8004ce4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	7afb      	ldrb	r3, [r7, #11]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	b2db      	uxtb	r3, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	b2db      	uxtb	r3, r3
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_GetUSARTClockSource>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	401a      	ands	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	4313      	orrs	r3, r2
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <LL_RCC_GetLPUARTClockSource>:
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4013      	ands	r3, r2
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e042      	b.n	8004e30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fd fa99 	bl	80022f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2224      	movs	r2, #36	; 0x24
 8004dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f976 	bl	80050cc <UART_SetConfig>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e022      	b.n	8004e30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fbde 	bl	80055b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fc64 	bl	80056f6 <UART_CheckIdleState>
 8004e2e:	4603      	mov	r3, r0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d173      	bne.n	8004f3a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_UART_Transmit+0x26>
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e06c      	b.n	8004f3c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2221      	movs	r2, #33	; 0x21
 8004e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e72:	f7fd fc0d 	bl	8002690 <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d108      	bne.n	8004ea4 <HAL_UART_Transmit+0x6c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e003      	b.n	8004eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004eac:	e02c      	b.n	8004f08 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fc6a 	bl	8005792 <UART_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e039      	b.n	8004f3c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e007      	b.n	8004ef6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1cc      	bne.n	8004eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2140      	movs	r1, #64	; 0x40
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fc37 	bl	8005792 <UART_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e006      	b.n	8004f3c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3720      	adds	r7, #32
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	f040 80b1 	bne.w	80050c2 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive+0x28>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0a9      	b.n	80050c4 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2222      	movs	r2, #34	; 0x22
 8004f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f86:	f7fd fb83 	bl	8002690 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa4:	d10e      	bne.n	8004fc4 <HAL_UART_Receive+0x80>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d105      	bne.n	8004fba <HAL_UART_Receive+0x76>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fb8:	e02d      	b.n	8005016 <HAL_UART_Receive+0xd2>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fc2:	e028      	b.n	8005016 <HAL_UART_Receive+0xd2>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10d      	bne.n	8004fe8 <HAL_UART_Receive+0xa4>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <HAL_UART_Receive+0x9a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fdc:	e01b      	b.n	8005016 <HAL_UART_Receive+0xd2>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	227f      	movs	r2, #127	; 0x7f
 8004fe2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fe6:	e016      	b.n	8005016 <HAL_UART_Receive+0xd2>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ff0:	d10d      	bne.n	800500e <HAL_UART_Receive+0xca>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <HAL_UART_Receive+0xc0>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	227f      	movs	r2, #127	; 0x7f
 8004ffe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005002:	e008      	b.n	8005016 <HAL_UART_Receive+0xd2>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	223f      	movs	r2, #63	; 0x3f
 8005008:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800500c:	e003      	b.n	8005016 <HAL_UART_Receive+0xd2>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800501c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d108      	bne.n	800503a <HAL_UART_Receive+0xf6>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e003      	b.n	8005042 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005042:	e032      	b.n	80050aa <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2120      	movs	r1, #32
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fb9f 	bl	8005792 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e032      	b.n	80050c4 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10c      	bne.n	800507e <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	b29a      	uxth	r2, r3
 800506c:	8a7b      	ldrh	r3, [r7, #18]
 800506e:	4013      	ands	r3, r2
 8005070:	b29a      	uxth	r2, r3
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	3302      	adds	r3, #2
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e00c      	b.n	8005098 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	b2da      	uxtb	r2, r3
 8005086:	8a7b      	ldrh	r3, [r7, #18]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4013      	ands	r3, r2
 800508c:	b2da      	uxtb	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1c6      	bne.n	8005044 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e000      	b.n	80050c4 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
  }
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b08c      	sub	sp, #48	; 0x30
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b94      	ldr	r3, [pc, #592]	; (800534c <UART_SetConfig+0x280>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005104:	430b      	orrs	r3, r1
 8005106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a89      	ldr	r2, [pc, #548]	; (8005350 <UART_SetConfig+0x284>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005134:	4313      	orrs	r3, r2
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005142:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800514c:	430b      	orrs	r3, r1
 800514e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	f023 010f 	bic.w	r1, r3, #15
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a7a      	ldr	r2, [pc, #488]	; (8005354 <UART_SetConfig+0x288>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d127      	bne.n	80051c0 <UART_SetConfig+0xf4>
 8005170:	2003      	movs	r0, #3
 8005172:	f7ff fdf0 	bl	8004d56 <LL_RCC_GetUSARTClockSource>
 8005176:	4603      	mov	r3, r0
 8005178:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800517c:	2b03      	cmp	r3, #3
 800517e:	d81b      	bhi.n	80051b8 <UART_SetConfig+0xec>
 8005180:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0xbc>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	08005199 	.word	0x08005199
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051a1 	.word	0x080051a1
 8005194:	080051b1 	.word	0x080051b1
 8005198:	2301      	movs	r3, #1
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519e:	e080      	b.n	80052a2 <UART_SetConfig+0x1d6>
 80051a0:	2302      	movs	r3, #2
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a6:	e07c      	b.n	80052a2 <UART_SetConfig+0x1d6>
 80051a8:	2304      	movs	r3, #4
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	e078      	b.n	80052a2 <UART_SetConfig+0x1d6>
 80051b0:	2308      	movs	r3, #8
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b6:	e074      	b.n	80052a2 <UART_SetConfig+0x1d6>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051be:	e070      	b.n	80052a2 <UART_SetConfig+0x1d6>
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a64      	ldr	r2, [pc, #400]	; (8005358 <UART_SetConfig+0x28c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d138      	bne.n	800523c <UART_SetConfig+0x170>
 80051ca:	200c      	movs	r0, #12
 80051cc:	f7ff fdc3 	bl	8004d56 <LL_RCC_GetUSARTClockSource>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d82c      	bhi.n	8005234 <UART_SetConfig+0x168>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x114>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005215 	.word	0x08005215
 80051e4:	08005235 	.word	0x08005235
 80051e8:	08005235 	.word	0x08005235
 80051ec:	08005235 	.word	0x08005235
 80051f0:	08005225 	.word	0x08005225
 80051f4:	08005235 	.word	0x08005235
 80051f8:	08005235 	.word	0x08005235
 80051fc:	08005235 	.word	0x08005235
 8005200:	0800521d 	.word	0x0800521d
 8005204:	08005235 	.word	0x08005235
 8005208:	08005235 	.word	0x08005235
 800520c:	08005235 	.word	0x08005235
 8005210:	0800522d 	.word	0x0800522d
 8005214:	2300      	movs	r3, #0
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521a:	e042      	b.n	80052a2 <UART_SetConfig+0x1d6>
 800521c:	2302      	movs	r3, #2
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005222:	e03e      	b.n	80052a2 <UART_SetConfig+0x1d6>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	e03a      	b.n	80052a2 <UART_SetConfig+0x1d6>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005232:	e036      	b.n	80052a2 <UART_SetConfig+0x1d6>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523a:	e032      	b.n	80052a2 <UART_SetConfig+0x1d6>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a43      	ldr	r2, [pc, #268]	; (8005350 <UART_SetConfig+0x284>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12a      	bne.n	800529c <UART_SetConfig+0x1d0>
 8005246:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800524a:	f7ff fd96 	bl	8004d7a <LL_RCC_GetLPUARTClockSource>
 800524e:	4603      	mov	r3, r0
 8005250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005254:	d01a      	beq.n	800528c <UART_SetConfig+0x1c0>
 8005256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800525a:	d81b      	bhi.n	8005294 <UART_SetConfig+0x1c8>
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005260:	d00c      	beq.n	800527c <UART_SetConfig+0x1b0>
 8005262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005266:	d815      	bhi.n	8005294 <UART_SetConfig+0x1c8>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <UART_SetConfig+0x1a8>
 800526c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005270:	d008      	beq.n	8005284 <UART_SetConfig+0x1b8>
 8005272:	e00f      	b.n	8005294 <UART_SetConfig+0x1c8>
 8005274:	2300      	movs	r3, #0
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800527a:	e012      	b.n	80052a2 <UART_SetConfig+0x1d6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005282:	e00e      	b.n	80052a2 <UART_SetConfig+0x1d6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528a:	e00a      	b.n	80052a2 <UART_SetConfig+0x1d6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005292:	e006      	b.n	80052a2 <UART_SetConfig+0x1d6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529a:	e002      	b.n	80052a2 <UART_SetConfig+0x1d6>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2a      	ldr	r2, [pc, #168]	; (8005350 <UART_SetConfig+0x284>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	f040 80a4 	bne.w	80053f6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d823      	bhi.n	80052fe <UART_SetConfig+0x232>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x1f0>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ef 	.word	0x080052ef
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	080052ff 	.word	0x080052ff
 80052dc:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fe fd94 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052e6:	e010      	b.n	800530a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b1c      	ldr	r3, [pc, #112]	; (800535c <UART_SetConfig+0x290>)
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052ec:	e00d      	b.n	800530a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fe fcd9 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f4:	e009      	b.n	800530a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052fc:	e005      	b.n	800530a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8137 	beq.w	8005580 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <UART_SetConfig+0x294>)
 8005318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800531c:	461a      	mov	r2, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	fbb3 f3f2 	udiv	r3, r3, r2
 8005324:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	429a      	cmp	r2, r3
 8005334:	d305      	bcc.n	8005342 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	429a      	cmp	r2, r3
 8005340:	d910      	bls.n	8005364 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005348:	e11a      	b.n	8005580 <UART_SetConfig+0x4b4>
 800534a:	bf00      	nop
 800534c:	cfff69f3 	.word	0xcfff69f3
 8005350:	40008000 	.word	0x40008000
 8005354:	40013800 	.word	0x40013800
 8005358:	40004400 	.word	0x40004400
 800535c:	00f42400 	.word	0x00f42400
 8005360:	08007358 	.word	0x08007358
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	2200      	movs	r2, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	60fa      	str	r2, [r7, #12]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	4a8e      	ldr	r2, [pc, #568]	; (80055ac <UART_SetConfig+0x4e0>)
 8005372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005376:	b29b      	uxth	r3, r3
 8005378:	2200      	movs	r2, #0
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005382:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005386:	f7fa ff4b 	bl	8000220 <__aeabi_uldivmod>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	020b      	lsls	r3, r1, #8
 800539c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053a0:	0202      	lsls	r2, r0, #8
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	6849      	ldr	r1, [r1, #4]
 80053a6:	0849      	lsrs	r1, r1, #1
 80053a8:	2000      	movs	r0, #0
 80053aa:	460c      	mov	r4, r1
 80053ac:	4605      	mov	r5, r0
 80053ae:	eb12 0804 	adds.w	r8, r2, r4
 80053b2:	eb43 0905 	adc.w	r9, r3, r5
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	469a      	mov	sl, r3
 80053be:	4693      	mov	fp, r2
 80053c0:	4652      	mov	r2, sl
 80053c2:	465b      	mov	r3, fp
 80053c4:	4640      	mov	r0, r8
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fa ff2a 	bl	8000220 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053da:	d308      	bcc.n	80053ee <UART_SetConfig+0x322>
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e2:	d204      	bcs.n	80053ee <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	e0c8      	b.n	8005580 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053f4:	e0c4      	b.n	8005580 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fe:	d167      	bne.n	80054d0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005404:	2b08      	cmp	r3, #8
 8005406:	d828      	bhi.n	800545a <UART_SetConfig+0x38e>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0x344>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005435 	.word	0x08005435
 8005414:	0800543d 	.word	0x0800543d
 8005418:	08005445 	.word	0x08005445
 800541c:	0800545b 	.word	0x0800545b
 8005420:	0800544b 	.word	0x0800544b
 8005424:	0800545b 	.word	0x0800545b
 8005428:	0800545b 	.word	0x0800545b
 800542c:	0800545b 	.word	0x0800545b
 8005430:	08005453 	.word	0x08005453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005434:	f7fe fcea 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800543a:	e014      	b.n	8005466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800543c:	f7fe fcf8 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005442:	e010      	b.n	8005466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005444:	4b5a      	ldr	r3, [pc, #360]	; (80055b0 <UART_SetConfig+0x4e4>)
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005448:	e00d      	b.n	8005466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800544a:	f7fe fc2b 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 800544e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005450:	e009      	b.n	8005466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005458:	e005      	b.n	8005466 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8089 	beq.w	8005580 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	4a4e      	ldr	r2, [pc, #312]	; (80055ac <UART_SetConfig+0x4e0>)
 8005474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005478:	461a      	mov	r2, r3
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005480:	005a      	lsls	r2, r3, #1
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	441a      	add	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d916      	bls.n	80054c8 <UART_SetConfig+0x3fc>
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d212      	bcs.n	80054c8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f023 030f 	bic.w	r3, r3, #15
 80054aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	8bfb      	ldrh	r3, [r7, #30]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	8bfa      	ldrh	r2, [r7, #30]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	e05b      	b.n	8005580 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054ce:	e057      	b.n	8005580 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d828      	bhi.n	800552a <UART_SetConfig+0x45e>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x414>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005515 	.word	0x08005515
 80054ec:	0800552b 	.word	0x0800552b
 80054f0:	0800551b 	.word	0x0800551b
 80054f4:	0800552b 	.word	0x0800552b
 80054f8:	0800552b 	.word	0x0800552b
 80054fc:	0800552b 	.word	0x0800552b
 8005500:	08005523 	.word	0x08005523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005504:	f7fe fc82 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8005508:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800550a:	e014      	b.n	8005536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7fe fc90 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8005510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005512:	e010      	b.n	8005536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <UART_SetConfig+0x4e4>)
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005518:	e00d      	b.n	8005536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551a:	f7fe fbc3 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 800551e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005520:	e009      	b.n	8005536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005528:	e005      	b.n	8005536 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005534:	bf00      	nop
    }

    if (pclk != 0U)
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d021      	beq.n	8005580 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	4a1a      	ldr	r2, [pc, #104]	; (80055ac <UART_SetConfig+0x4e0>)
 8005542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005546:	461a      	mov	r2, r3
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	fbb3 f2f2 	udiv	r2, r3, r2
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	441a      	add	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	2b0f      	cmp	r3, #15
 8005564:	d909      	bls.n	800557a <UART_SetConfig+0x4ae>
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556c:	d205      	bcs.n	800557a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	b29a      	uxth	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	e002      	b.n	8005580 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2201      	movs	r2, #1
 8005584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2201      	movs	r2, #1
 800558c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2200      	movs	r2, #0
 8005594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2200      	movs	r2, #0
 800559a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800559c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3730      	adds	r7, #48	; 0x30
 80055a4:	46bd      	mov	sp, r7
 80055a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055aa:	bf00      	nop
 80055ac:	08007358 	.word	0x08007358
 80055b0:	00f42400 	.word	0x00f42400

080055b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01a      	beq.n	80056ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b2:	d10a      	bne.n	80056ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af02      	add	r7, sp, #8
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005706:	f7fc ffc3 	bl	8002690 <HAL_GetTick>
 800570a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b08      	cmp	r3, #8
 8005718:	d10e      	bne.n	8005738 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800571a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f832 	bl	8005792 <UART_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e028      	b.n	800578a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d10e      	bne.n	8005764 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f81c 	bl	8005792 <UART_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e012      	b.n	800578a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b09c      	sub	sp, #112	; 0x70
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a2:	e0a9      	b.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057aa:	f000 80a5 	beq.w	80058f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ae:	f7fc ff6f 	bl	8002690 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d302      	bcc.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80057be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d140      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057d8:	667b      	str	r3, [r7, #100]	; 0x64
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e6      	bne.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	663b      	str	r3, [r7, #96]	; 0x60
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005816:	64ba      	str	r2, [r7, #72]	; 0x48
 8005818:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800581c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e069      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d051      	beq.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005862:	d149      	bne.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800586c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
 800588e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e6      	bne.n	800586e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	613b      	str	r3, [r7, #16]
   return(result);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058c0:	623a      	str	r2, [r7, #32]
 80058c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	69f9      	ldr	r1, [r7, #28]
 80058c6:	6a3a      	ldr	r2, [r7, #32]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e010      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4013      	ands	r3, r2
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	bf0c      	ite	eq
 8005908:	2301      	moveq	r3, #1
 800590a:	2300      	movne	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	429a      	cmp	r2, r3
 8005914:	f43f af46 	beq.w	80057a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3770      	adds	r7, #112	; 0x70
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UARTEx_DisableFifoMode+0x16>
 8005934:	2302      	movs	r3, #2
 8005936:	e027      	b.n	8005988 <HAL_UARTEx_DisableFifoMode+0x66>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2224      	movs	r2, #36	; 0x24
 8005944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005966:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e02d      	b.n	8005a06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2224      	movs	r2, #36	; 0x24
 80059b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f850 	bl	8005a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e02d      	b.n	8005a82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	; 0x24
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f812 	bl	8005a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d108      	bne.n	8005aae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005aac:	e031      	b.n	8005b12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005aae:	2308      	movs	r3, #8
 8005ab0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	0e5b      	lsrs	r3, r3, #25
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	0f5b      	lsrs	r3, r3, #29
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	7b3a      	ldrb	r2, [r7, #12]
 8005ada:	4910      	ldr	r1, [pc, #64]	; (8005b1c <UARTEx_SetNbDataToProcess+0x90>)
 8005adc:	5c8a      	ldrb	r2, [r1, r2]
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ae2:	7b3a      	ldrb	r2, [r7, #12]
 8005ae4:	490e      	ldr	r1, [pc, #56]	; (8005b20 <UARTEx_SetNbDataToProcess+0x94>)
 8005ae6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	7b7a      	ldrb	r2, [r7, #13]
 8005af8:	4908      	ldr	r1, [pc, #32]	; (8005b1c <UARTEx_SetNbDataToProcess+0x90>)
 8005afa:	5c8a      	ldrb	r2, [r1, r2]
 8005afc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b00:	7b7a      	ldrb	r2, [r7, #13]
 8005b02:	4907      	ldr	r1, [pc, #28]	; (8005b20 <UARTEx_SetNbDataToProcess+0x94>)
 8005b04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b06:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	08007370 	.word	0x08007370
 8005b20:	08007378 	.word	0x08007378

08005b24 <atoi>:
 8005b24:	220a      	movs	r2, #10
 8005b26:	2100      	movs	r1, #0
 8005b28:	f000 b960 	b.w	8005dec <strtol>

08005b2c <__errno>:
 8005b2c:	4b01      	ldr	r3, [pc, #4]	; (8005b34 <__errno+0x8>)
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20000014 	.word	0x20000014

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4d0d      	ldr	r5, [pc, #52]	; (8005b70 <__libc_init_array+0x38>)
 8005b3c:	4c0d      	ldr	r4, [pc, #52]	; (8005b74 <__libc_init_array+0x3c>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	2600      	movs	r6, #0
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	4d0b      	ldr	r5, [pc, #44]	; (8005b78 <__libc_init_array+0x40>)
 8005b4a:	4c0c      	ldr	r4, [pc, #48]	; (8005b7c <__libc_init_array+0x44>)
 8005b4c:	f001 faf8 	bl	8007140 <_init>
 8005b50:	1b64      	subs	r4, r4, r5
 8005b52:	10a4      	asrs	r4, r4, #2
 8005b54:	2600      	movs	r6, #0
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	080075d0 	.word	0x080075d0
 8005b74:	080075d0 	.word	0x080075d0
 8005b78:	080075d0 	.word	0x080075d0
 8005b7c:	080075d4 	.word	0x080075d4

08005b80 <memcpy>:
 8005b80:	440a      	add	r2, r1
 8005b82:	4291      	cmp	r1, r2
 8005b84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b88:	d100      	bne.n	8005b8c <memcpy+0xc>
 8005b8a:	4770      	bx	lr
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b96:	4291      	cmp	r1, r2
 8005b98:	d1f9      	bne.n	8005b8e <memcpy+0xe>
 8005b9a:	bd10      	pop	{r4, pc}

08005b9c <memset>:
 8005b9c:	4402      	add	r2, r0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d100      	bne.n	8005ba6 <memset+0xa>
 8005ba4:	4770      	bx	lr
 8005ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8005baa:	e7f9      	b.n	8005ba0 <memset+0x4>

08005bac <sniprintf>:
 8005bac:	b40c      	push	{r2, r3}
 8005bae:	b530      	push	{r4, r5, lr}
 8005bb0:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <sniprintf+0x64>)
 8005bb2:	1e0c      	subs	r4, r1, #0
 8005bb4:	681d      	ldr	r5, [r3, #0]
 8005bb6:	b09d      	sub	sp, #116	; 0x74
 8005bb8:	da08      	bge.n	8005bcc <sniprintf+0x20>
 8005bba:	238b      	movs	r3, #139	; 0x8b
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc2:	b01d      	add	sp, #116	; 0x74
 8005bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bc8:	b002      	add	sp, #8
 8005bca:	4770      	bx	lr
 8005bcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005bd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005bd4:	bf14      	ite	ne
 8005bd6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005bda:	4623      	moveq	r3, r4
 8005bdc:	9304      	str	r3, [sp, #16]
 8005bde:	9307      	str	r3, [sp, #28]
 8005be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005be4:	9002      	str	r0, [sp, #8]
 8005be6:	9006      	str	r0, [sp, #24]
 8005be8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005bee:	ab21      	add	r3, sp, #132	; 0x84
 8005bf0:	a902      	add	r1, sp, #8
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	f000 fa75 	bl	80060e4 <_svfiprintf_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	bfbc      	itt	lt
 8005bfe:	238b      	movlt	r3, #139	; 0x8b
 8005c00:	602b      	strlt	r3, [r5, #0]
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	d0dd      	beq.n	8005bc2 <sniprintf+0x16>
 8005c06:	9b02      	ldr	r3, [sp, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e7d9      	b.n	8005bc2 <sniprintf+0x16>
 8005c0e:	bf00      	nop
 8005c10:	20000014 	.word	0x20000014

08005c14 <strncmp>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4603      	mov	r3, r0
 8005c18:	b172      	cbz	r2, 8005c38 <strncmp+0x24>
 8005c1a:	3901      	subs	r1, #1
 8005c1c:	1884      	adds	r4, r0, r2
 8005c1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005c22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005c26:	4290      	cmp	r0, r2
 8005c28:	d101      	bne.n	8005c2e <strncmp+0x1a>
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	d101      	bne.n	8005c32 <strncmp+0x1e>
 8005c2e:	1a80      	subs	r0, r0, r2
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d1f3      	bne.n	8005c1e <strncmp+0xa>
 8005c36:	e7fa      	b.n	8005c2e <strncmp+0x1a>
 8005c38:	4610      	mov	r0, r2
 8005c3a:	e7f9      	b.n	8005c30 <strncmp+0x1c>

08005c3c <strtok>:
 8005c3c:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <strtok+0x5c>)
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	681f      	ldr	r7, [r3, #0]
 8005c44:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005c46:	4605      	mov	r5, r0
 8005c48:	460e      	mov	r6, r1
 8005c4a:	b9ec      	cbnz	r4, 8005c88 <strtok+0x4c>
 8005c4c:	2050      	movs	r0, #80	; 0x50
 8005c4e:	f000 f907 	bl	8005e60 <malloc>
 8005c52:	4602      	mov	r2, r0
 8005c54:	65b8      	str	r0, [r7, #88]	; 0x58
 8005c56:	b920      	cbnz	r0, 8005c62 <strtok+0x26>
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <strtok+0x60>)
 8005c5a:	4811      	ldr	r0, [pc, #68]	; (8005ca0 <strtok+0x64>)
 8005c5c:	2157      	movs	r1, #87	; 0x57
 8005c5e:	f000 f8cf 	bl	8005e00 <__assert_func>
 8005c62:	e9c0 4400 	strd	r4, r4, [r0]
 8005c66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005c6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005c6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005c72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005c76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005c7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005c7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005c82:	6184      	str	r4, [r0, #24]
 8005c84:	7704      	strb	r4, [r0, #28]
 8005c86:	6244      	str	r4, [r0, #36]	; 0x24
 8005c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	f000 b806 	b.w	8005ca4 <__strtok_r>
 8005c98:	20000014 	.word	0x20000014
 8005c9c:	08007384 	.word	0x08007384
 8005ca0:	0800739b 	.word	0x0800739b

08005ca4 <__strtok_r>:
 8005ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca6:	b908      	cbnz	r0, 8005cac <__strtok_r+0x8>
 8005ca8:	6810      	ldr	r0, [r2, #0]
 8005caa:	b188      	cbz	r0, 8005cd0 <__strtok_r+0x2c>
 8005cac:	4604      	mov	r4, r0
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005cb4:	460f      	mov	r7, r1
 8005cb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005cba:	b91e      	cbnz	r6, 8005cc4 <__strtok_r+0x20>
 8005cbc:	b965      	cbnz	r5, 8005cd8 <__strtok_r+0x34>
 8005cbe:	6015      	str	r5, [r2, #0]
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	e005      	b.n	8005cd0 <__strtok_r+0x2c>
 8005cc4:	42b5      	cmp	r5, r6
 8005cc6:	d1f6      	bne.n	8005cb6 <__strtok_r+0x12>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <__strtok_r+0xa>
 8005ccc:	6014      	str	r4, [r2, #0]
 8005cce:	7003      	strb	r3, [r0, #0]
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	e00c      	b.n	8005cf0 <__strtok_r+0x4c>
 8005cd6:	b915      	cbnz	r5, 8005cde <__strtok_r+0x3a>
 8005cd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005cdc:	460e      	mov	r6, r1
 8005cde:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005ce2:	42ab      	cmp	r3, r5
 8005ce4:	d1f7      	bne.n	8005cd6 <__strtok_r+0x32>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f3      	beq.n	8005cd2 <__strtok_r+0x2e>
 8005cea:	2300      	movs	r3, #0
 8005cec:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005cf0:	6014      	str	r4, [r2, #0]
 8005cf2:	e7ed      	b.n	8005cd0 <__strtok_r+0x2c>

08005cf4 <_strtol_l.constprop.0>:
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	d001      	beq.n	8005d02 <_strtol_l.constprop.0+0xe>
 8005cfe:	2b24      	cmp	r3, #36	; 0x24
 8005d00:	d906      	bls.n	8005d10 <_strtol_l.constprop.0+0x1c>
 8005d02:	f7ff ff13 	bl	8005b2c <__errno>
 8005d06:	2316      	movs	r3, #22
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d10:	4f35      	ldr	r7, [pc, #212]	; (8005de8 <_strtol_l.constprop.0+0xf4>)
 8005d12:	460d      	mov	r5, r1
 8005d14:	4628      	mov	r0, r5
 8005d16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d1a:	5de6      	ldrb	r6, [r4, r7]
 8005d1c:	f016 0608 	ands.w	r6, r6, #8
 8005d20:	d1f8      	bne.n	8005d14 <_strtol_l.constprop.0+0x20>
 8005d22:	2c2d      	cmp	r4, #45	; 0x2d
 8005d24:	d12f      	bne.n	8005d86 <_strtol_l.constprop.0+0x92>
 8005d26:	782c      	ldrb	r4, [r5, #0]
 8005d28:	2601      	movs	r6, #1
 8005d2a:	1c85      	adds	r5, r0, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d057      	beq.n	8005de0 <_strtol_l.constprop.0+0xec>
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d109      	bne.n	8005d48 <_strtol_l.constprop.0+0x54>
 8005d34:	2c30      	cmp	r4, #48	; 0x30
 8005d36:	d107      	bne.n	8005d48 <_strtol_l.constprop.0+0x54>
 8005d38:	7828      	ldrb	r0, [r5, #0]
 8005d3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005d3e:	2858      	cmp	r0, #88	; 0x58
 8005d40:	d149      	bne.n	8005dd6 <_strtol_l.constprop.0+0xe2>
 8005d42:	786c      	ldrb	r4, [r5, #1]
 8005d44:	2310      	movs	r3, #16
 8005d46:	3502      	adds	r5, #2
 8005d48:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005d4c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005d50:	2700      	movs	r7, #0
 8005d52:	fbbe f9f3 	udiv	r9, lr, r3
 8005d56:	4638      	mov	r0, r7
 8005d58:	fb03 ea19 	mls	sl, r3, r9, lr
 8005d5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d60:	f1bc 0f09 	cmp.w	ip, #9
 8005d64:	d814      	bhi.n	8005d90 <_strtol_l.constprop.0+0x9c>
 8005d66:	4664      	mov	r4, ip
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	dd22      	ble.n	8005db2 <_strtol_l.constprop.0+0xbe>
 8005d6c:	2f00      	cmp	r7, #0
 8005d6e:	db1d      	blt.n	8005dac <_strtol_l.constprop.0+0xb8>
 8005d70:	4581      	cmp	r9, r0
 8005d72:	d31b      	bcc.n	8005dac <_strtol_l.constprop.0+0xb8>
 8005d74:	d101      	bne.n	8005d7a <_strtol_l.constprop.0+0x86>
 8005d76:	45a2      	cmp	sl, r4
 8005d78:	db18      	blt.n	8005dac <_strtol_l.constprop.0+0xb8>
 8005d7a:	fb00 4003 	mla	r0, r0, r3, r4
 8005d7e:	2701      	movs	r7, #1
 8005d80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d84:	e7ea      	b.n	8005d5c <_strtol_l.constprop.0+0x68>
 8005d86:	2c2b      	cmp	r4, #43	; 0x2b
 8005d88:	bf04      	itt	eq
 8005d8a:	782c      	ldrbeq	r4, [r5, #0]
 8005d8c:	1c85      	addeq	r5, r0, #2
 8005d8e:	e7cd      	b.n	8005d2c <_strtol_l.constprop.0+0x38>
 8005d90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005d94:	f1bc 0f19 	cmp.w	ip, #25
 8005d98:	d801      	bhi.n	8005d9e <_strtol_l.constprop.0+0xaa>
 8005d9a:	3c37      	subs	r4, #55	; 0x37
 8005d9c:	e7e4      	b.n	8005d68 <_strtol_l.constprop.0+0x74>
 8005d9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005da2:	f1bc 0f19 	cmp.w	ip, #25
 8005da6:	d804      	bhi.n	8005db2 <_strtol_l.constprop.0+0xbe>
 8005da8:	3c57      	subs	r4, #87	; 0x57
 8005daa:	e7dd      	b.n	8005d68 <_strtol_l.constprop.0+0x74>
 8005dac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005db0:	e7e6      	b.n	8005d80 <_strtol_l.constprop.0+0x8c>
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	da07      	bge.n	8005dc6 <_strtol_l.constprop.0+0xd2>
 8005db6:	2322      	movs	r3, #34	; 0x22
 8005db8:	f8c8 3000 	str.w	r3, [r8]
 8005dbc:	4670      	mov	r0, lr
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	d0a4      	beq.n	8005d0c <_strtol_l.constprop.0+0x18>
 8005dc2:	1e69      	subs	r1, r5, #1
 8005dc4:	e005      	b.n	8005dd2 <_strtol_l.constprop.0+0xde>
 8005dc6:	b106      	cbz	r6, 8005dca <_strtol_l.constprop.0+0xd6>
 8005dc8:	4240      	negs	r0, r0
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	d09e      	beq.n	8005d0c <_strtol_l.constprop.0+0x18>
 8005dce:	2f00      	cmp	r7, #0
 8005dd0:	d1f7      	bne.n	8005dc2 <_strtol_l.constprop.0+0xce>
 8005dd2:	6011      	str	r1, [r2, #0]
 8005dd4:	e79a      	b.n	8005d0c <_strtol_l.constprop.0+0x18>
 8005dd6:	2430      	movs	r4, #48	; 0x30
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1b5      	bne.n	8005d48 <_strtol_l.constprop.0+0x54>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	e7b3      	b.n	8005d48 <_strtol_l.constprop.0+0x54>
 8005de0:	2c30      	cmp	r4, #48	; 0x30
 8005de2:	d0a9      	beq.n	8005d38 <_strtol_l.constprop.0+0x44>
 8005de4:	230a      	movs	r3, #10
 8005de6:	e7af      	b.n	8005d48 <_strtol_l.constprop.0+0x54>
 8005de8:	08007435 	.word	0x08007435

08005dec <strtol>:
 8005dec:	4613      	mov	r3, r2
 8005dee:	460a      	mov	r2, r1
 8005df0:	4601      	mov	r1, r0
 8005df2:	4802      	ldr	r0, [pc, #8]	; (8005dfc <strtol+0x10>)
 8005df4:	6800      	ldr	r0, [r0, #0]
 8005df6:	f7ff bf7d 	b.w	8005cf4 <_strtol_l.constprop.0>
 8005dfa:	bf00      	nop
 8005dfc:	20000014 	.word	0x20000014

08005e00 <__assert_func>:
 8005e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e02:	4614      	mov	r4, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <__assert_func+0x2c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	68d8      	ldr	r0, [r3, #12]
 8005e0e:	b14c      	cbz	r4, 8005e24 <__assert_func+0x24>
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <__assert_func+0x30>)
 8005e12:	9100      	str	r1, [sp, #0]
 8005e14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e18:	4906      	ldr	r1, [pc, #24]	; (8005e34 <__assert_func+0x34>)
 8005e1a:	462b      	mov	r3, r5
 8005e1c:	f000 f80e 	bl	8005e3c <fiprintf>
 8005e20:	f000 fe1c 	bl	8006a5c <abort>
 8005e24:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <__assert_func+0x38>)
 8005e26:	461c      	mov	r4, r3
 8005e28:	e7f3      	b.n	8005e12 <__assert_func+0x12>
 8005e2a:	bf00      	nop
 8005e2c:	20000014 	.word	0x20000014
 8005e30:	080073f8 	.word	0x080073f8
 8005e34:	08007405 	.word	0x08007405
 8005e38:	08007433 	.word	0x08007433

08005e3c <fiprintf>:
 8005e3c:	b40e      	push	{r1, r2, r3}
 8005e3e:	b503      	push	{r0, r1, lr}
 8005e40:	4601      	mov	r1, r0
 8005e42:	ab03      	add	r3, sp, #12
 8005e44:	4805      	ldr	r0, [pc, #20]	; (8005e5c <fiprintf+0x20>)
 8005e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e4a:	6800      	ldr	r0, [r0, #0]
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	f000 fa71 	bl	8006334 <_vfiprintf_r>
 8005e52:	b002      	add	sp, #8
 8005e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e58:	b003      	add	sp, #12
 8005e5a:	4770      	bx	lr
 8005e5c:	20000014 	.word	0x20000014

08005e60 <malloc>:
 8005e60:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <malloc+0xc>)
 8005e62:	4601      	mov	r1, r0
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f000 b86d 	b.w	8005f44 <_malloc_r>
 8005e6a:	bf00      	nop
 8005e6c:	20000014 	.word	0x20000014

08005e70 <_free_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4605      	mov	r5, r0
 8005e74:	2900      	cmp	r1, #0
 8005e76:	d041      	beq.n	8005efc <_free_r+0x8c>
 8005e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7c:	1f0c      	subs	r4, r1, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bfb8      	it	lt
 8005e82:	18e4      	addlt	r4, r4, r3
 8005e84:	f001 f828 	bl	8006ed8 <__malloc_lock>
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <_free_r+0x90>)
 8005e8a:	6813      	ldr	r3, [r2, #0]
 8005e8c:	b933      	cbnz	r3, 8005e9c <_free_r+0x2c>
 8005e8e:	6063      	str	r3, [r4, #4]
 8005e90:	6014      	str	r4, [r2, #0]
 8005e92:	4628      	mov	r0, r5
 8005e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e98:	f001 b824 	b.w	8006ee4 <__malloc_unlock>
 8005e9c:	42a3      	cmp	r3, r4
 8005e9e:	d908      	bls.n	8005eb2 <_free_r+0x42>
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	1821      	adds	r1, r4, r0
 8005ea4:	428b      	cmp	r3, r1
 8005ea6:	bf01      	itttt	eq
 8005ea8:	6819      	ldreq	r1, [r3, #0]
 8005eaa:	685b      	ldreq	r3, [r3, #4]
 8005eac:	1809      	addeq	r1, r1, r0
 8005eae:	6021      	streq	r1, [r4, #0]
 8005eb0:	e7ed      	b.n	8005e8e <_free_r+0x1e>
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	b10b      	cbz	r3, 8005ebc <_free_r+0x4c>
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	d9fa      	bls.n	8005eb2 <_free_r+0x42>
 8005ebc:	6811      	ldr	r1, [r2, #0]
 8005ebe:	1850      	adds	r0, r2, r1
 8005ec0:	42a0      	cmp	r0, r4
 8005ec2:	d10b      	bne.n	8005edc <_free_r+0x6c>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	4401      	add	r1, r0
 8005ec8:	1850      	adds	r0, r2, r1
 8005eca:	4283      	cmp	r3, r0
 8005ecc:	6011      	str	r1, [r2, #0]
 8005ece:	d1e0      	bne.n	8005e92 <_free_r+0x22>
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	6053      	str	r3, [r2, #4]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	6011      	str	r1, [r2, #0]
 8005eda:	e7da      	b.n	8005e92 <_free_r+0x22>
 8005edc:	d902      	bls.n	8005ee4 <_free_r+0x74>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	602b      	str	r3, [r5, #0]
 8005ee2:	e7d6      	b.n	8005e92 <_free_r+0x22>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	1821      	adds	r1, r4, r0
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	bf04      	itt	eq
 8005eec:	6819      	ldreq	r1, [r3, #0]
 8005eee:	685b      	ldreq	r3, [r3, #4]
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	bf04      	itt	eq
 8005ef4:	1809      	addeq	r1, r1, r0
 8005ef6:	6021      	streq	r1, [r4, #0]
 8005ef8:	6054      	str	r4, [r2, #4]
 8005efa:	e7ca      	b.n	8005e92 <_free_r+0x22>
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	bf00      	nop
 8005f00:	20001e4c 	.word	0x20001e4c

08005f04 <sbrk_aligned>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	4e0e      	ldr	r6, [pc, #56]	; (8005f40 <sbrk_aligned+0x3c>)
 8005f08:	460c      	mov	r4, r1
 8005f0a:	6831      	ldr	r1, [r6, #0]
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	b911      	cbnz	r1, 8005f16 <sbrk_aligned+0x12>
 8005f10:	f000 fcd4 	bl	80068bc <_sbrk_r>
 8005f14:	6030      	str	r0, [r6, #0]
 8005f16:	4621      	mov	r1, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 fccf 	bl	80068bc <_sbrk_r>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	d00a      	beq.n	8005f38 <sbrk_aligned+0x34>
 8005f22:	1cc4      	adds	r4, r0, #3
 8005f24:	f024 0403 	bic.w	r4, r4, #3
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d007      	beq.n	8005f3c <sbrk_aligned+0x38>
 8005f2c:	1a21      	subs	r1, r4, r0
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 fcc4 	bl	80068bc <_sbrk_r>
 8005f34:	3001      	adds	r0, #1
 8005f36:	d101      	bne.n	8005f3c <sbrk_aligned+0x38>
 8005f38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	20001e50 	.word	0x20001e50

08005f44 <_malloc_r>:
 8005f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f48:	1ccd      	adds	r5, r1, #3
 8005f4a:	f025 0503 	bic.w	r5, r5, #3
 8005f4e:	3508      	adds	r5, #8
 8005f50:	2d0c      	cmp	r5, #12
 8005f52:	bf38      	it	cc
 8005f54:	250c      	movcc	r5, #12
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	4607      	mov	r7, r0
 8005f5a:	db01      	blt.n	8005f60 <_malloc_r+0x1c>
 8005f5c:	42a9      	cmp	r1, r5
 8005f5e:	d905      	bls.n	8005f6c <_malloc_r+0x28>
 8005f60:	230c      	movs	r3, #12
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	2600      	movs	r6, #0
 8005f66:	4630      	mov	r0, r6
 8005f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6c:	4e2e      	ldr	r6, [pc, #184]	; (8006028 <_malloc_r+0xe4>)
 8005f6e:	f000 ffb3 	bl	8006ed8 <__malloc_lock>
 8005f72:	6833      	ldr	r3, [r6, #0]
 8005f74:	461c      	mov	r4, r3
 8005f76:	bb34      	cbnz	r4, 8005fc6 <_malloc_r+0x82>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	f7ff ffc2 	bl	8005f04 <sbrk_aligned>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	4604      	mov	r4, r0
 8005f84:	d14d      	bne.n	8006022 <_malloc_r+0xde>
 8005f86:	6834      	ldr	r4, [r6, #0]
 8005f88:	4626      	mov	r6, r4
 8005f8a:	2e00      	cmp	r6, #0
 8005f8c:	d140      	bne.n	8006010 <_malloc_r+0xcc>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	4631      	mov	r1, r6
 8005f92:	4638      	mov	r0, r7
 8005f94:	eb04 0803 	add.w	r8, r4, r3
 8005f98:	f000 fc90 	bl	80068bc <_sbrk_r>
 8005f9c:	4580      	cmp	r8, r0
 8005f9e:	d13a      	bne.n	8006016 <_malloc_r+0xd2>
 8005fa0:	6821      	ldr	r1, [r4, #0]
 8005fa2:	3503      	adds	r5, #3
 8005fa4:	1a6d      	subs	r5, r5, r1
 8005fa6:	f025 0503 	bic.w	r5, r5, #3
 8005faa:	3508      	adds	r5, #8
 8005fac:	2d0c      	cmp	r5, #12
 8005fae:	bf38      	it	cc
 8005fb0:	250c      	movcc	r5, #12
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f7ff ffa5 	bl	8005f04 <sbrk_aligned>
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d02b      	beq.n	8006016 <_malloc_r+0xd2>
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	442b      	add	r3, r5
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	e00e      	b.n	8005fe4 <_malloc_r+0xa0>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	1b52      	subs	r2, r2, r5
 8005fca:	d41e      	bmi.n	800600a <_malloc_r+0xc6>
 8005fcc:	2a0b      	cmp	r2, #11
 8005fce:	d916      	bls.n	8005ffe <_malloc_r+0xba>
 8005fd0:	1961      	adds	r1, r4, r5
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	6025      	str	r5, [r4, #0]
 8005fd6:	bf18      	it	ne
 8005fd8:	6059      	strne	r1, [r3, #4]
 8005fda:	6863      	ldr	r3, [r4, #4]
 8005fdc:	bf08      	it	eq
 8005fde:	6031      	streq	r1, [r6, #0]
 8005fe0:	5162      	str	r2, [r4, r5]
 8005fe2:	604b      	str	r3, [r1, #4]
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f104 060b 	add.w	r6, r4, #11
 8005fea:	f000 ff7b 	bl	8006ee4 <__malloc_unlock>
 8005fee:	f026 0607 	bic.w	r6, r6, #7
 8005ff2:	1d23      	adds	r3, r4, #4
 8005ff4:	1af2      	subs	r2, r6, r3
 8005ff6:	d0b6      	beq.n	8005f66 <_malloc_r+0x22>
 8005ff8:	1b9b      	subs	r3, r3, r6
 8005ffa:	50a3      	str	r3, [r4, r2]
 8005ffc:	e7b3      	b.n	8005f66 <_malloc_r+0x22>
 8005ffe:	6862      	ldr	r2, [r4, #4]
 8006000:	42a3      	cmp	r3, r4
 8006002:	bf0c      	ite	eq
 8006004:	6032      	streq	r2, [r6, #0]
 8006006:	605a      	strne	r2, [r3, #4]
 8006008:	e7ec      	b.n	8005fe4 <_malloc_r+0xa0>
 800600a:	4623      	mov	r3, r4
 800600c:	6864      	ldr	r4, [r4, #4]
 800600e:	e7b2      	b.n	8005f76 <_malloc_r+0x32>
 8006010:	4634      	mov	r4, r6
 8006012:	6876      	ldr	r6, [r6, #4]
 8006014:	e7b9      	b.n	8005f8a <_malloc_r+0x46>
 8006016:	230c      	movs	r3, #12
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4638      	mov	r0, r7
 800601c:	f000 ff62 	bl	8006ee4 <__malloc_unlock>
 8006020:	e7a1      	b.n	8005f66 <_malloc_r+0x22>
 8006022:	6025      	str	r5, [r4, #0]
 8006024:	e7de      	b.n	8005fe4 <_malloc_r+0xa0>
 8006026:	bf00      	nop
 8006028:	20001e4c 	.word	0x20001e4c

0800602c <__ssputs_r>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	688e      	ldr	r6, [r1, #8]
 8006032:	429e      	cmp	r6, r3
 8006034:	4682      	mov	sl, r0
 8006036:	460c      	mov	r4, r1
 8006038:	4690      	mov	r8, r2
 800603a:	461f      	mov	r7, r3
 800603c:	d838      	bhi.n	80060b0 <__ssputs_r+0x84>
 800603e:	898a      	ldrh	r2, [r1, #12]
 8006040:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006044:	d032      	beq.n	80060ac <__ssputs_r+0x80>
 8006046:	6825      	ldr	r5, [r4, #0]
 8006048:	6909      	ldr	r1, [r1, #16]
 800604a:	eba5 0901 	sub.w	r9, r5, r1
 800604e:	6965      	ldr	r5, [r4, #20]
 8006050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006058:	3301      	adds	r3, #1
 800605a:	444b      	add	r3, r9
 800605c:	106d      	asrs	r5, r5, #1
 800605e:	429d      	cmp	r5, r3
 8006060:	bf38      	it	cc
 8006062:	461d      	movcc	r5, r3
 8006064:	0553      	lsls	r3, r2, #21
 8006066:	d531      	bpl.n	80060cc <__ssputs_r+0xa0>
 8006068:	4629      	mov	r1, r5
 800606a:	f7ff ff6b 	bl	8005f44 <_malloc_r>
 800606e:	4606      	mov	r6, r0
 8006070:	b950      	cbnz	r0, 8006088 <__ssputs_r+0x5c>
 8006072:	230c      	movs	r3, #12
 8006074:	f8ca 3000 	str.w	r3, [sl]
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800607e:	81a3      	strh	r3, [r4, #12]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006088:	6921      	ldr	r1, [r4, #16]
 800608a:	464a      	mov	r2, r9
 800608c:	f7ff fd78 	bl	8005b80 <memcpy>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	6126      	str	r6, [r4, #16]
 800609e:	6165      	str	r5, [r4, #20]
 80060a0:	444e      	add	r6, r9
 80060a2:	eba5 0509 	sub.w	r5, r5, r9
 80060a6:	6026      	str	r6, [r4, #0]
 80060a8:	60a5      	str	r5, [r4, #8]
 80060aa:	463e      	mov	r6, r7
 80060ac:	42be      	cmp	r6, r7
 80060ae:	d900      	bls.n	80060b2 <__ssputs_r+0x86>
 80060b0:	463e      	mov	r6, r7
 80060b2:	6820      	ldr	r0, [r4, #0]
 80060b4:	4632      	mov	r2, r6
 80060b6:	4641      	mov	r1, r8
 80060b8:	f000 fef4 	bl	8006ea4 <memmove>
 80060bc:	68a3      	ldr	r3, [r4, #8]
 80060be:	1b9b      	subs	r3, r3, r6
 80060c0:	60a3      	str	r3, [r4, #8]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	4433      	add	r3, r6
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	2000      	movs	r0, #0
 80060ca:	e7db      	b.n	8006084 <__ssputs_r+0x58>
 80060cc:	462a      	mov	r2, r5
 80060ce:	f000 ff0f 	bl	8006ef0 <_realloc_r>
 80060d2:	4606      	mov	r6, r0
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d1e1      	bne.n	800609c <__ssputs_r+0x70>
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	4650      	mov	r0, sl
 80060dc:	f7ff fec8 	bl	8005e70 <_free_r>
 80060e0:	e7c7      	b.n	8006072 <__ssputs_r+0x46>
	...

080060e4 <_svfiprintf_r>:
 80060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	4698      	mov	r8, r3
 80060ea:	898b      	ldrh	r3, [r1, #12]
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	b09d      	sub	sp, #116	; 0x74
 80060f0:	4607      	mov	r7, r0
 80060f2:	460d      	mov	r5, r1
 80060f4:	4614      	mov	r4, r2
 80060f6:	d50e      	bpl.n	8006116 <_svfiprintf_r+0x32>
 80060f8:	690b      	ldr	r3, [r1, #16]
 80060fa:	b963      	cbnz	r3, 8006116 <_svfiprintf_r+0x32>
 80060fc:	2140      	movs	r1, #64	; 0x40
 80060fe:	f7ff ff21 	bl	8005f44 <_malloc_r>
 8006102:	6028      	str	r0, [r5, #0]
 8006104:	6128      	str	r0, [r5, #16]
 8006106:	b920      	cbnz	r0, 8006112 <_svfiprintf_r+0x2e>
 8006108:	230c      	movs	r3, #12
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006110:	e0d1      	b.n	80062b6 <_svfiprintf_r+0x1d2>
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	616b      	str	r3, [r5, #20]
 8006116:	2300      	movs	r3, #0
 8006118:	9309      	str	r3, [sp, #36]	; 0x24
 800611a:	2320      	movs	r3, #32
 800611c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006120:	f8cd 800c 	str.w	r8, [sp, #12]
 8006124:	2330      	movs	r3, #48	; 0x30
 8006126:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062d0 <_svfiprintf_r+0x1ec>
 800612a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800612e:	f04f 0901 	mov.w	r9, #1
 8006132:	4623      	mov	r3, r4
 8006134:	469a      	mov	sl, r3
 8006136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800613a:	b10a      	cbz	r2, 8006140 <_svfiprintf_r+0x5c>
 800613c:	2a25      	cmp	r2, #37	; 0x25
 800613e:	d1f9      	bne.n	8006134 <_svfiprintf_r+0x50>
 8006140:	ebba 0b04 	subs.w	fp, sl, r4
 8006144:	d00b      	beq.n	800615e <_svfiprintf_r+0x7a>
 8006146:	465b      	mov	r3, fp
 8006148:	4622      	mov	r2, r4
 800614a:	4629      	mov	r1, r5
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff ff6d 	bl	800602c <__ssputs_r>
 8006152:	3001      	adds	r0, #1
 8006154:	f000 80aa 	beq.w	80062ac <_svfiprintf_r+0x1c8>
 8006158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800615a:	445a      	add	r2, fp
 800615c:	9209      	str	r2, [sp, #36]	; 0x24
 800615e:	f89a 3000 	ldrb.w	r3, [sl]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80a2 	beq.w	80062ac <_svfiprintf_r+0x1c8>
 8006168:	2300      	movs	r3, #0
 800616a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800616e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006172:	f10a 0a01 	add.w	sl, sl, #1
 8006176:	9304      	str	r3, [sp, #16]
 8006178:	9307      	str	r3, [sp, #28]
 800617a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800617e:	931a      	str	r3, [sp, #104]	; 0x68
 8006180:	4654      	mov	r4, sl
 8006182:	2205      	movs	r2, #5
 8006184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006188:	4851      	ldr	r0, [pc, #324]	; (80062d0 <_svfiprintf_r+0x1ec>)
 800618a:	f7f9 fff9 	bl	8000180 <memchr>
 800618e:	9a04      	ldr	r2, [sp, #16]
 8006190:	b9d8      	cbnz	r0, 80061ca <_svfiprintf_r+0xe6>
 8006192:	06d0      	lsls	r0, r2, #27
 8006194:	bf44      	itt	mi
 8006196:	2320      	movmi	r3, #32
 8006198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800619c:	0711      	lsls	r1, r2, #28
 800619e:	bf44      	itt	mi
 80061a0:	232b      	movmi	r3, #43	; 0x2b
 80061a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a6:	f89a 3000 	ldrb.w	r3, [sl]
 80061aa:	2b2a      	cmp	r3, #42	; 0x2a
 80061ac:	d015      	beq.n	80061da <_svfiprintf_r+0xf6>
 80061ae:	9a07      	ldr	r2, [sp, #28]
 80061b0:	4654      	mov	r4, sl
 80061b2:	2000      	movs	r0, #0
 80061b4:	f04f 0c0a 	mov.w	ip, #10
 80061b8:	4621      	mov	r1, r4
 80061ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061be:	3b30      	subs	r3, #48	; 0x30
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	d94e      	bls.n	8006262 <_svfiprintf_r+0x17e>
 80061c4:	b1b0      	cbz	r0, 80061f4 <_svfiprintf_r+0x110>
 80061c6:	9207      	str	r2, [sp, #28]
 80061c8:	e014      	b.n	80061f4 <_svfiprintf_r+0x110>
 80061ca:	eba0 0308 	sub.w	r3, r0, r8
 80061ce:	fa09 f303 	lsl.w	r3, r9, r3
 80061d2:	4313      	orrs	r3, r2
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	46a2      	mov	sl, r4
 80061d8:	e7d2      	b.n	8006180 <_svfiprintf_r+0x9c>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	9103      	str	r1, [sp, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfbb      	ittet	lt
 80061e6:	425b      	neglt	r3, r3
 80061e8:	f042 0202 	orrlt.w	r2, r2, #2
 80061ec:	9307      	strge	r3, [sp, #28]
 80061ee:	9307      	strlt	r3, [sp, #28]
 80061f0:	bfb8      	it	lt
 80061f2:	9204      	strlt	r2, [sp, #16]
 80061f4:	7823      	ldrb	r3, [r4, #0]
 80061f6:	2b2e      	cmp	r3, #46	; 0x2e
 80061f8:	d10c      	bne.n	8006214 <_svfiprintf_r+0x130>
 80061fa:	7863      	ldrb	r3, [r4, #1]
 80061fc:	2b2a      	cmp	r3, #42	; 0x2a
 80061fe:	d135      	bne.n	800626c <_svfiprintf_r+0x188>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	1d1a      	adds	r2, r3, #4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	9203      	str	r2, [sp, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	bfb8      	it	lt
 800620c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006210:	3402      	adds	r4, #2
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80062d4 <_svfiprintf_r+0x1f0>
 8006218:	7821      	ldrb	r1, [r4, #0]
 800621a:	2203      	movs	r2, #3
 800621c:	4650      	mov	r0, sl
 800621e:	f7f9 ffaf 	bl	8000180 <memchr>
 8006222:	b140      	cbz	r0, 8006236 <_svfiprintf_r+0x152>
 8006224:	2340      	movs	r3, #64	; 0x40
 8006226:	eba0 000a 	sub.w	r0, r0, sl
 800622a:	fa03 f000 	lsl.w	r0, r3, r0
 800622e:	9b04      	ldr	r3, [sp, #16]
 8006230:	4303      	orrs	r3, r0
 8006232:	3401      	adds	r4, #1
 8006234:	9304      	str	r3, [sp, #16]
 8006236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623a:	4827      	ldr	r0, [pc, #156]	; (80062d8 <_svfiprintf_r+0x1f4>)
 800623c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006240:	2206      	movs	r2, #6
 8006242:	f7f9 ff9d 	bl	8000180 <memchr>
 8006246:	2800      	cmp	r0, #0
 8006248:	d038      	beq.n	80062bc <_svfiprintf_r+0x1d8>
 800624a:	4b24      	ldr	r3, [pc, #144]	; (80062dc <_svfiprintf_r+0x1f8>)
 800624c:	bb1b      	cbnz	r3, 8006296 <_svfiprintf_r+0x1b2>
 800624e:	9b03      	ldr	r3, [sp, #12]
 8006250:	3307      	adds	r3, #7
 8006252:	f023 0307 	bic.w	r3, r3, #7
 8006256:	3308      	adds	r3, #8
 8006258:	9303      	str	r3, [sp, #12]
 800625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625c:	4433      	add	r3, r6
 800625e:	9309      	str	r3, [sp, #36]	; 0x24
 8006260:	e767      	b.n	8006132 <_svfiprintf_r+0x4e>
 8006262:	fb0c 3202 	mla	r2, ip, r2, r3
 8006266:	460c      	mov	r4, r1
 8006268:	2001      	movs	r0, #1
 800626a:	e7a5      	b.n	80061b8 <_svfiprintf_r+0xd4>
 800626c:	2300      	movs	r3, #0
 800626e:	3401      	adds	r4, #1
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	4619      	mov	r1, r3
 8006274:	f04f 0c0a 	mov.w	ip, #10
 8006278:	4620      	mov	r0, r4
 800627a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800627e:	3a30      	subs	r2, #48	; 0x30
 8006280:	2a09      	cmp	r2, #9
 8006282:	d903      	bls.n	800628c <_svfiprintf_r+0x1a8>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0c5      	beq.n	8006214 <_svfiprintf_r+0x130>
 8006288:	9105      	str	r1, [sp, #20]
 800628a:	e7c3      	b.n	8006214 <_svfiprintf_r+0x130>
 800628c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006290:	4604      	mov	r4, r0
 8006292:	2301      	movs	r3, #1
 8006294:	e7f0      	b.n	8006278 <_svfiprintf_r+0x194>
 8006296:	ab03      	add	r3, sp, #12
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	462a      	mov	r2, r5
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <_svfiprintf_r+0x1fc>)
 800629e:	a904      	add	r1, sp, #16
 80062a0:	4638      	mov	r0, r7
 80062a2:	f3af 8000 	nop.w
 80062a6:	1c42      	adds	r2, r0, #1
 80062a8:	4606      	mov	r6, r0
 80062aa:	d1d6      	bne.n	800625a <_svfiprintf_r+0x176>
 80062ac:	89ab      	ldrh	r3, [r5, #12]
 80062ae:	065b      	lsls	r3, r3, #25
 80062b0:	f53f af2c 	bmi.w	800610c <_svfiprintf_r+0x28>
 80062b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062b6:	b01d      	add	sp, #116	; 0x74
 80062b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062bc:	ab03      	add	r3, sp, #12
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	462a      	mov	r2, r5
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <_svfiprintf_r+0x1fc>)
 80062c4:	a904      	add	r1, sp, #16
 80062c6:	4638      	mov	r0, r7
 80062c8:	f000 f9d2 	bl	8006670 <_printf_i>
 80062cc:	e7eb      	b.n	80062a6 <_svfiprintf_r+0x1c2>
 80062ce:	bf00      	nop
 80062d0:	08007535 	.word	0x08007535
 80062d4:	0800753b 	.word	0x0800753b
 80062d8:	0800753f 	.word	0x0800753f
 80062dc:	00000000 	.word	0x00000000
 80062e0:	0800602d 	.word	0x0800602d

080062e4 <__sfputc_r>:
 80062e4:	6893      	ldr	r3, [r2, #8]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	b410      	push	{r4}
 80062ec:	6093      	str	r3, [r2, #8]
 80062ee:	da07      	bge.n	8006300 <__sfputc_r+0x1c>
 80062f0:	6994      	ldr	r4, [r2, #24]
 80062f2:	42a3      	cmp	r3, r4
 80062f4:	db01      	blt.n	80062fa <__sfputc_r+0x16>
 80062f6:	290a      	cmp	r1, #10
 80062f8:	d102      	bne.n	8006300 <__sfputc_r+0x1c>
 80062fa:	bc10      	pop	{r4}
 80062fc:	f000 baee 	b.w	80068dc <__swbuf_r>
 8006300:	6813      	ldr	r3, [r2, #0]
 8006302:	1c58      	adds	r0, r3, #1
 8006304:	6010      	str	r0, [r2, #0]
 8006306:	7019      	strb	r1, [r3, #0]
 8006308:	4608      	mov	r0, r1
 800630a:	bc10      	pop	{r4}
 800630c:	4770      	bx	lr

0800630e <__sfputs_r>:
 800630e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006310:	4606      	mov	r6, r0
 8006312:	460f      	mov	r7, r1
 8006314:	4614      	mov	r4, r2
 8006316:	18d5      	adds	r5, r2, r3
 8006318:	42ac      	cmp	r4, r5
 800631a:	d101      	bne.n	8006320 <__sfputs_r+0x12>
 800631c:	2000      	movs	r0, #0
 800631e:	e007      	b.n	8006330 <__sfputs_r+0x22>
 8006320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006324:	463a      	mov	r2, r7
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff ffdc 	bl	80062e4 <__sfputc_r>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d1f3      	bne.n	8006318 <__sfputs_r+0xa>
 8006330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006334 <_vfiprintf_r>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	460d      	mov	r5, r1
 800633a:	b09d      	sub	sp, #116	; 0x74
 800633c:	4614      	mov	r4, r2
 800633e:	4698      	mov	r8, r3
 8006340:	4606      	mov	r6, r0
 8006342:	b118      	cbz	r0, 800634c <_vfiprintf_r+0x18>
 8006344:	6983      	ldr	r3, [r0, #24]
 8006346:	b90b      	cbnz	r3, 800634c <_vfiprintf_r+0x18>
 8006348:	f000 fca6 	bl	8006c98 <__sinit>
 800634c:	4b89      	ldr	r3, [pc, #548]	; (8006574 <_vfiprintf_r+0x240>)
 800634e:	429d      	cmp	r5, r3
 8006350:	d11b      	bne.n	800638a <_vfiprintf_r+0x56>
 8006352:	6875      	ldr	r5, [r6, #4]
 8006354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006356:	07d9      	lsls	r1, r3, #31
 8006358:	d405      	bmi.n	8006366 <_vfiprintf_r+0x32>
 800635a:	89ab      	ldrh	r3, [r5, #12]
 800635c:	059a      	lsls	r2, r3, #22
 800635e:	d402      	bmi.n	8006366 <_vfiprintf_r+0x32>
 8006360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006362:	f000 fd37 	bl	8006dd4 <__retarget_lock_acquire_recursive>
 8006366:	89ab      	ldrh	r3, [r5, #12]
 8006368:	071b      	lsls	r3, r3, #28
 800636a:	d501      	bpl.n	8006370 <_vfiprintf_r+0x3c>
 800636c:	692b      	ldr	r3, [r5, #16]
 800636e:	b9eb      	cbnz	r3, 80063ac <_vfiprintf_r+0x78>
 8006370:	4629      	mov	r1, r5
 8006372:	4630      	mov	r0, r6
 8006374:	f000 fb04 	bl	8006980 <__swsetup_r>
 8006378:	b1c0      	cbz	r0, 80063ac <_vfiprintf_r+0x78>
 800637a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800637c:	07dc      	lsls	r4, r3, #31
 800637e:	d50e      	bpl.n	800639e <_vfiprintf_r+0x6a>
 8006380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006384:	b01d      	add	sp, #116	; 0x74
 8006386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638a:	4b7b      	ldr	r3, [pc, #492]	; (8006578 <_vfiprintf_r+0x244>)
 800638c:	429d      	cmp	r5, r3
 800638e:	d101      	bne.n	8006394 <_vfiprintf_r+0x60>
 8006390:	68b5      	ldr	r5, [r6, #8]
 8006392:	e7df      	b.n	8006354 <_vfiprintf_r+0x20>
 8006394:	4b79      	ldr	r3, [pc, #484]	; (800657c <_vfiprintf_r+0x248>)
 8006396:	429d      	cmp	r5, r3
 8006398:	bf08      	it	eq
 800639a:	68f5      	ldreq	r5, [r6, #12]
 800639c:	e7da      	b.n	8006354 <_vfiprintf_r+0x20>
 800639e:	89ab      	ldrh	r3, [r5, #12]
 80063a0:	0598      	lsls	r0, r3, #22
 80063a2:	d4ed      	bmi.n	8006380 <_vfiprintf_r+0x4c>
 80063a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063a6:	f000 fd16 	bl	8006dd6 <__retarget_lock_release_recursive>
 80063aa:	e7e9      	b.n	8006380 <_vfiprintf_r+0x4c>
 80063ac:	2300      	movs	r3, #0
 80063ae:	9309      	str	r3, [sp, #36]	; 0x24
 80063b0:	2320      	movs	r3, #32
 80063b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ba:	2330      	movs	r3, #48	; 0x30
 80063bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006580 <_vfiprintf_r+0x24c>
 80063c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063c4:	f04f 0901 	mov.w	r9, #1
 80063c8:	4623      	mov	r3, r4
 80063ca:	469a      	mov	sl, r3
 80063cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d0:	b10a      	cbz	r2, 80063d6 <_vfiprintf_r+0xa2>
 80063d2:	2a25      	cmp	r2, #37	; 0x25
 80063d4:	d1f9      	bne.n	80063ca <_vfiprintf_r+0x96>
 80063d6:	ebba 0b04 	subs.w	fp, sl, r4
 80063da:	d00b      	beq.n	80063f4 <_vfiprintf_r+0xc0>
 80063dc:	465b      	mov	r3, fp
 80063de:	4622      	mov	r2, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7ff ff93 	bl	800630e <__sfputs_r>
 80063e8:	3001      	adds	r0, #1
 80063ea:	f000 80aa 	beq.w	8006542 <_vfiprintf_r+0x20e>
 80063ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063f0:	445a      	add	r2, fp
 80063f2:	9209      	str	r2, [sp, #36]	; 0x24
 80063f4:	f89a 3000 	ldrb.w	r3, [sl]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80a2 	beq.w	8006542 <_vfiprintf_r+0x20e>
 80063fe:	2300      	movs	r3, #0
 8006400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006408:	f10a 0a01 	add.w	sl, sl, #1
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006414:	931a      	str	r3, [sp, #104]	; 0x68
 8006416:	4654      	mov	r4, sl
 8006418:	2205      	movs	r2, #5
 800641a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641e:	4858      	ldr	r0, [pc, #352]	; (8006580 <_vfiprintf_r+0x24c>)
 8006420:	f7f9 feae 	bl	8000180 <memchr>
 8006424:	9a04      	ldr	r2, [sp, #16]
 8006426:	b9d8      	cbnz	r0, 8006460 <_vfiprintf_r+0x12c>
 8006428:	06d1      	lsls	r1, r2, #27
 800642a:	bf44      	itt	mi
 800642c:	2320      	movmi	r3, #32
 800642e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006432:	0713      	lsls	r3, r2, #28
 8006434:	bf44      	itt	mi
 8006436:	232b      	movmi	r3, #43	; 0x2b
 8006438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800643c:	f89a 3000 	ldrb.w	r3, [sl]
 8006440:	2b2a      	cmp	r3, #42	; 0x2a
 8006442:	d015      	beq.n	8006470 <_vfiprintf_r+0x13c>
 8006444:	9a07      	ldr	r2, [sp, #28]
 8006446:	4654      	mov	r4, sl
 8006448:	2000      	movs	r0, #0
 800644a:	f04f 0c0a 	mov.w	ip, #10
 800644e:	4621      	mov	r1, r4
 8006450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006454:	3b30      	subs	r3, #48	; 0x30
 8006456:	2b09      	cmp	r3, #9
 8006458:	d94e      	bls.n	80064f8 <_vfiprintf_r+0x1c4>
 800645a:	b1b0      	cbz	r0, 800648a <_vfiprintf_r+0x156>
 800645c:	9207      	str	r2, [sp, #28]
 800645e:	e014      	b.n	800648a <_vfiprintf_r+0x156>
 8006460:	eba0 0308 	sub.w	r3, r0, r8
 8006464:	fa09 f303 	lsl.w	r3, r9, r3
 8006468:	4313      	orrs	r3, r2
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	46a2      	mov	sl, r4
 800646e:	e7d2      	b.n	8006416 <_vfiprintf_r+0xe2>
 8006470:	9b03      	ldr	r3, [sp, #12]
 8006472:	1d19      	adds	r1, r3, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	9103      	str	r1, [sp, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfbb      	ittet	lt
 800647c:	425b      	neglt	r3, r3
 800647e:	f042 0202 	orrlt.w	r2, r2, #2
 8006482:	9307      	strge	r3, [sp, #28]
 8006484:	9307      	strlt	r3, [sp, #28]
 8006486:	bfb8      	it	lt
 8006488:	9204      	strlt	r2, [sp, #16]
 800648a:	7823      	ldrb	r3, [r4, #0]
 800648c:	2b2e      	cmp	r3, #46	; 0x2e
 800648e:	d10c      	bne.n	80064aa <_vfiprintf_r+0x176>
 8006490:	7863      	ldrb	r3, [r4, #1]
 8006492:	2b2a      	cmp	r3, #42	; 0x2a
 8006494:	d135      	bne.n	8006502 <_vfiprintf_r+0x1ce>
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	1d1a      	adds	r2, r3, #4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	9203      	str	r2, [sp, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bfb8      	it	lt
 80064a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064a6:	3402      	adds	r4, #2
 80064a8:	9305      	str	r3, [sp, #20]
 80064aa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006584 <_vfiprintf_r+0x250>
 80064ae:	7821      	ldrb	r1, [r4, #0]
 80064b0:	2203      	movs	r2, #3
 80064b2:	4650      	mov	r0, sl
 80064b4:	f7f9 fe64 	bl	8000180 <memchr>
 80064b8:	b140      	cbz	r0, 80064cc <_vfiprintf_r+0x198>
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	eba0 000a 	sub.w	r0, r0, sl
 80064c0:	fa03 f000 	lsl.w	r0, r3, r0
 80064c4:	9b04      	ldr	r3, [sp, #16]
 80064c6:	4303      	orrs	r3, r0
 80064c8:	3401      	adds	r4, #1
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d0:	482d      	ldr	r0, [pc, #180]	; (8006588 <_vfiprintf_r+0x254>)
 80064d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064d6:	2206      	movs	r2, #6
 80064d8:	f7f9 fe52 	bl	8000180 <memchr>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d03f      	beq.n	8006560 <_vfiprintf_r+0x22c>
 80064e0:	4b2a      	ldr	r3, [pc, #168]	; (800658c <_vfiprintf_r+0x258>)
 80064e2:	bb1b      	cbnz	r3, 800652c <_vfiprintf_r+0x1f8>
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	3307      	adds	r3, #7
 80064e8:	f023 0307 	bic.w	r3, r3, #7
 80064ec:	3308      	adds	r3, #8
 80064ee:	9303      	str	r3, [sp, #12]
 80064f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f2:	443b      	add	r3, r7
 80064f4:	9309      	str	r3, [sp, #36]	; 0x24
 80064f6:	e767      	b.n	80063c8 <_vfiprintf_r+0x94>
 80064f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064fc:	460c      	mov	r4, r1
 80064fe:	2001      	movs	r0, #1
 8006500:	e7a5      	b.n	800644e <_vfiprintf_r+0x11a>
 8006502:	2300      	movs	r3, #0
 8006504:	3401      	adds	r4, #1
 8006506:	9305      	str	r3, [sp, #20]
 8006508:	4619      	mov	r1, r3
 800650a:	f04f 0c0a 	mov.w	ip, #10
 800650e:	4620      	mov	r0, r4
 8006510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006514:	3a30      	subs	r2, #48	; 0x30
 8006516:	2a09      	cmp	r2, #9
 8006518:	d903      	bls.n	8006522 <_vfiprintf_r+0x1ee>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0c5      	beq.n	80064aa <_vfiprintf_r+0x176>
 800651e:	9105      	str	r1, [sp, #20]
 8006520:	e7c3      	b.n	80064aa <_vfiprintf_r+0x176>
 8006522:	fb0c 2101 	mla	r1, ip, r1, r2
 8006526:	4604      	mov	r4, r0
 8006528:	2301      	movs	r3, #1
 800652a:	e7f0      	b.n	800650e <_vfiprintf_r+0x1da>
 800652c:	ab03      	add	r3, sp, #12
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	462a      	mov	r2, r5
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <_vfiprintf_r+0x25c>)
 8006534:	a904      	add	r1, sp, #16
 8006536:	4630      	mov	r0, r6
 8006538:	f3af 8000 	nop.w
 800653c:	4607      	mov	r7, r0
 800653e:	1c78      	adds	r0, r7, #1
 8006540:	d1d6      	bne.n	80064f0 <_vfiprintf_r+0x1bc>
 8006542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006544:	07d9      	lsls	r1, r3, #31
 8006546:	d405      	bmi.n	8006554 <_vfiprintf_r+0x220>
 8006548:	89ab      	ldrh	r3, [r5, #12]
 800654a:	059a      	lsls	r2, r3, #22
 800654c:	d402      	bmi.n	8006554 <_vfiprintf_r+0x220>
 800654e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006550:	f000 fc41 	bl	8006dd6 <__retarget_lock_release_recursive>
 8006554:	89ab      	ldrh	r3, [r5, #12]
 8006556:	065b      	lsls	r3, r3, #25
 8006558:	f53f af12 	bmi.w	8006380 <_vfiprintf_r+0x4c>
 800655c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800655e:	e711      	b.n	8006384 <_vfiprintf_r+0x50>
 8006560:	ab03      	add	r3, sp, #12
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	462a      	mov	r2, r5
 8006566:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <_vfiprintf_r+0x25c>)
 8006568:	a904      	add	r1, sp, #16
 800656a:	4630      	mov	r0, r6
 800656c:	f000 f880 	bl	8006670 <_printf_i>
 8006570:	e7e4      	b.n	800653c <_vfiprintf_r+0x208>
 8006572:	bf00      	nop
 8006574:	08007588 	.word	0x08007588
 8006578:	080075a8 	.word	0x080075a8
 800657c:	08007568 	.word	0x08007568
 8006580:	08007535 	.word	0x08007535
 8006584:	0800753b 	.word	0x0800753b
 8006588:	0800753f 	.word	0x0800753f
 800658c:	00000000 	.word	0x00000000
 8006590:	0800630f 	.word	0x0800630f

08006594 <_printf_common>:
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	4616      	mov	r6, r2
 800659a:	4699      	mov	r9, r3
 800659c:	688a      	ldr	r2, [r1, #8]
 800659e:	690b      	ldr	r3, [r1, #16]
 80065a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bfb8      	it	lt
 80065a8:	4613      	movlt	r3, r2
 80065aa:	6033      	str	r3, [r6, #0]
 80065ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065b0:	4607      	mov	r7, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	b10a      	cbz	r2, 80065ba <_printf_common+0x26>
 80065b6:	3301      	adds	r3, #1
 80065b8:	6033      	str	r3, [r6, #0]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	0699      	lsls	r1, r3, #26
 80065be:	bf42      	ittt	mi
 80065c0:	6833      	ldrmi	r3, [r6, #0]
 80065c2:	3302      	addmi	r3, #2
 80065c4:	6033      	strmi	r3, [r6, #0]
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	f015 0506 	ands.w	r5, r5, #6
 80065cc:	d106      	bne.n	80065dc <_printf_common+0x48>
 80065ce:	f104 0a19 	add.w	sl, r4, #25
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	6832      	ldr	r2, [r6, #0]
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dc26      	bgt.n	800662a <_printf_common+0x96>
 80065dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065e0:	1e13      	subs	r3, r2, #0
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	bf18      	it	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	0692      	lsls	r2, r2, #26
 80065ea:	d42b      	bmi.n	8006644 <_printf_common+0xb0>
 80065ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f0:	4649      	mov	r1, r9
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d01e      	beq.n	8006638 <_printf_common+0xa4>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	68e5      	ldr	r5, [r4, #12]
 80065fe:	6832      	ldr	r2, [r6, #0]
 8006600:	f003 0306 	and.w	r3, r3, #6
 8006604:	2b04      	cmp	r3, #4
 8006606:	bf08      	it	eq
 8006608:	1aad      	subeq	r5, r5, r2
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	6922      	ldr	r2, [r4, #16]
 800660e:	bf0c      	ite	eq
 8006610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006614:	2500      	movne	r5, #0
 8006616:	4293      	cmp	r3, r2
 8006618:	bfc4      	itt	gt
 800661a:	1a9b      	subgt	r3, r3, r2
 800661c:	18ed      	addgt	r5, r5, r3
 800661e:	2600      	movs	r6, #0
 8006620:	341a      	adds	r4, #26
 8006622:	42b5      	cmp	r5, r6
 8006624:	d11a      	bne.n	800665c <_printf_common+0xc8>
 8006626:	2000      	movs	r0, #0
 8006628:	e008      	b.n	800663c <_printf_common+0xa8>
 800662a:	2301      	movs	r3, #1
 800662c:	4652      	mov	r2, sl
 800662e:	4649      	mov	r1, r9
 8006630:	4638      	mov	r0, r7
 8006632:	47c0      	blx	r8
 8006634:	3001      	adds	r0, #1
 8006636:	d103      	bne.n	8006640 <_printf_common+0xac>
 8006638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	3501      	adds	r5, #1
 8006642:	e7c6      	b.n	80065d2 <_printf_common+0x3e>
 8006644:	18e1      	adds	r1, r4, r3
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	2030      	movs	r0, #48	; 0x30
 800664a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800664e:	4422      	add	r2, r4
 8006650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006658:	3302      	adds	r3, #2
 800665a:	e7c7      	b.n	80065ec <_printf_common+0x58>
 800665c:	2301      	movs	r3, #1
 800665e:	4622      	mov	r2, r4
 8006660:	4649      	mov	r1, r9
 8006662:	4638      	mov	r0, r7
 8006664:	47c0      	blx	r8
 8006666:	3001      	adds	r0, #1
 8006668:	d0e6      	beq.n	8006638 <_printf_common+0xa4>
 800666a:	3601      	adds	r6, #1
 800666c:	e7d9      	b.n	8006622 <_printf_common+0x8e>
	...

08006670 <_printf_i>:
 8006670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	7e0f      	ldrb	r7, [r1, #24]
 8006676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006678:	2f78      	cmp	r7, #120	; 0x78
 800667a:	4691      	mov	r9, r2
 800667c:	4680      	mov	r8, r0
 800667e:	460c      	mov	r4, r1
 8006680:	469a      	mov	sl, r3
 8006682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006686:	d807      	bhi.n	8006698 <_printf_i+0x28>
 8006688:	2f62      	cmp	r7, #98	; 0x62
 800668a:	d80a      	bhi.n	80066a2 <_printf_i+0x32>
 800668c:	2f00      	cmp	r7, #0
 800668e:	f000 80d8 	beq.w	8006842 <_printf_i+0x1d2>
 8006692:	2f58      	cmp	r7, #88	; 0x58
 8006694:	f000 80a3 	beq.w	80067de <_printf_i+0x16e>
 8006698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800669c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066a0:	e03a      	b.n	8006718 <_printf_i+0xa8>
 80066a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066a6:	2b15      	cmp	r3, #21
 80066a8:	d8f6      	bhi.n	8006698 <_printf_i+0x28>
 80066aa:	a101      	add	r1, pc, #4	; (adr r1, 80066b0 <_printf_i+0x40>)
 80066ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b0:	08006709 	.word	0x08006709
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	08006699 	.word	0x08006699
 80066bc:	08006699 	.word	0x08006699
 80066c0:	08006699 	.word	0x08006699
 80066c4:	08006699 	.word	0x08006699
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006699 	.word	0x08006699
 80066d0:	08006699 	.word	0x08006699
 80066d4:	08006699 	.word	0x08006699
 80066d8:	08006699 	.word	0x08006699
 80066dc:	08006829 	.word	0x08006829
 80066e0:	0800674d 	.word	0x0800674d
 80066e4:	0800680b 	.word	0x0800680b
 80066e8:	08006699 	.word	0x08006699
 80066ec:	08006699 	.word	0x08006699
 80066f0:	0800684b 	.word	0x0800684b
 80066f4:	08006699 	.word	0x08006699
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	08006699 	.word	0x08006699
 8006700:	08006699 	.word	0x08006699
 8006704:	08006813 	.word	0x08006813
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	602a      	str	r2, [r5, #0]
 8006710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006718:	2301      	movs	r3, #1
 800671a:	e0a3      	b.n	8006864 <_printf_i+0x1f4>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	6829      	ldr	r1, [r5, #0]
 8006720:	0606      	lsls	r6, r0, #24
 8006722:	f101 0304 	add.w	r3, r1, #4
 8006726:	d50a      	bpl.n	800673e <_printf_i+0xce>
 8006728:	680e      	ldr	r6, [r1, #0]
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	2e00      	cmp	r6, #0
 800672e:	da03      	bge.n	8006738 <_printf_i+0xc8>
 8006730:	232d      	movs	r3, #45	; 0x2d
 8006732:	4276      	negs	r6, r6
 8006734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006738:	485e      	ldr	r0, [pc, #376]	; (80068b4 <_printf_i+0x244>)
 800673a:	230a      	movs	r3, #10
 800673c:	e019      	b.n	8006772 <_printf_i+0x102>
 800673e:	680e      	ldr	r6, [r1, #0]
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006746:	bf18      	it	ne
 8006748:	b236      	sxthne	r6, r6
 800674a:	e7ef      	b.n	800672c <_printf_i+0xbc>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	6820      	ldr	r0, [r4, #0]
 8006750:	1d19      	adds	r1, r3, #4
 8006752:	6029      	str	r1, [r5, #0]
 8006754:	0601      	lsls	r1, r0, #24
 8006756:	d501      	bpl.n	800675c <_printf_i+0xec>
 8006758:	681e      	ldr	r6, [r3, #0]
 800675a:	e002      	b.n	8006762 <_printf_i+0xf2>
 800675c:	0646      	lsls	r6, r0, #25
 800675e:	d5fb      	bpl.n	8006758 <_printf_i+0xe8>
 8006760:	881e      	ldrh	r6, [r3, #0]
 8006762:	4854      	ldr	r0, [pc, #336]	; (80068b4 <_printf_i+0x244>)
 8006764:	2f6f      	cmp	r7, #111	; 0x6f
 8006766:	bf0c      	ite	eq
 8006768:	2308      	moveq	r3, #8
 800676a:	230a      	movne	r3, #10
 800676c:	2100      	movs	r1, #0
 800676e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006772:	6865      	ldr	r5, [r4, #4]
 8006774:	60a5      	str	r5, [r4, #8]
 8006776:	2d00      	cmp	r5, #0
 8006778:	bfa2      	ittt	ge
 800677a:	6821      	ldrge	r1, [r4, #0]
 800677c:	f021 0104 	bicge.w	r1, r1, #4
 8006780:	6021      	strge	r1, [r4, #0]
 8006782:	b90e      	cbnz	r6, 8006788 <_printf_i+0x118>
 8006784:	2d00      	cmp	r5, #0
 8006786:	d04d      	beq.n	8006824 <_printf_i+0x1b4>
 8006788:	4615      	mov	r5, r2
 800678a:	fbb6 f1f3 	udiv	r1, r6, r3
 800678e:	fb03 6711 	mls	r7, r3, r1, r6
 8006792:	5dc7      	ldrb	r7, [r0, r7]
 8006794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006798:	4637      	mov	r7, r6
 800679a:	42bb      	cmp	r3, r7
 800679c:	460e      	mov	r6, r1
 800679e:	d9f4      	bls.n	800678a <_printf_i+0x11a>
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d10b      	bne.n	80067bc <_printf_i+0x14c>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	07de      	lsls	r6, r3, #31
 80067a8:	d508      	bpl.n	80067bc <_printf_i+0x14c>
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6861      	ldr	r1, [r4, #4]
 80067ae:	4299      	cmp	r1, r3
 80067b0:	bfde      	ittt	le
 80067b2:	2330      	movle	r3, #48	; 0x30
 80067b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80067bc:	1b52      	subs	r2, r2, r5
 80067be:	6122      	str	r2, [r4, #16]
 80067c0:	f8cd a000 	str.w	sl, [sp]
 80067c4:	464b      	mov	r3, r9
 80067c6:	aa03      	add	r2, sp, #12
 80067c8:	4621      	mov	r1, r4
 80067ca:	4640      	mov	r0, r8
 80067cc:	f7ff fee2 	bl	8006594 <_printf_common>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d14c      	bne.n	800686e <_printf_i+0x1fe>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067d8:	b004      	add	sp, #16
 80067da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067de:	4835      	ldr	r0, [pc, #212]	; (80068b4 <_printf_i+0x244>)
 80067e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067e4:	6829      	ldr	r1, [r5, #0]
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067ec:	6029      	str	r1, [r5, #0]
 80067ee:	061d      	lsls	r5, r3, #24
 80067f0:	d514      	bpl.n	800681c <_printf_i+0x1ac>
 80067f2:	07df      	lsls	r7, r3, #31
 80067f4:	bf44      	itt	mi
 80067f6:	f043 0320 	orrmi.w	r3, r3, #32
 80067fa:	6023      	strmi	r3, [r4, #0]
 80067fc:	b91e      	cbnz	r6, 8006806 <_printf_i+0x196>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	f023 0320 	bic.w	r3, r3, #32
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	2310      	movs	r3, #16
 8006808:	e7b0      	b.n	800676c <_printf_i+0xfc>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	f043 0320 	orr.w	r3, r3, #32
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	2378      	movs	r3, #120	; 0x78
 8006814:	4828      	ldr	r0, [pc, #160]	; (80068b8 <_printf_i+0x248>)
 8006816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800681a:	e7e3      	b.n	80067e4 <_printf_i+0x174>
 800681c:	0659      	lsls	r1, r3, #25
 800681e:	bf48      	it	mi
 8006820:	b2b6      	uxthmi	r6, r6
 8006822:	e7e6      	b.n	80067f2 <_printf_i+0x182>
 8006824:	4615      	mov	r5, r2
 8006826:	e7bb      	b.n	80067a0 <_printf_i+0x130>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	6826      	ldr	r6, [r4, #0]
 800682c:	6961      	ldr	r1, [r4, #20]
 800682e:	1d18      	adds	r0, r3, #4
 8006830:	6028      	str	r0, [r5, #0]
 8006832:	0635      	lsls	r5, r6, #24
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	d501      	bpl.n	800683c <_printf_i+0x1cc>
 8006838:	6019      	str	r1, [r3, #0]
 800683a:	e002      	b.n	8006842 <_printf_i+0x1d2>
 800683c:	0670      	lsls	r0, r6, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0x1c8>
 8006840:	8019      	strh	r1, [r3, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	4615      	mov	r5, r2
 8006848:	e7ba      	b.n	80067c0 <_printf_i+0x150>
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	1d1a      	adds	r2, r3, #4
 800684e:	602a      	str	r2, [r5, #0]
 8006850:	681d      	ldr	r5, [r3, #0]
 8006852:	6862      	ldr	r2, [r4, #4]
 8006854:	2100      	movs	r1, #0
 8006856:	4628      	mov	r0, r5
 8006858:	f7f9 fc92 	bl	8000180 <memchr>
 800685c:	b108      	cbz	r0, 8006862 <_printf_i+0x1f2>
 800685e:	1b40      	subs	r0, r0, r5
 8006860:	6060      	str	r0, [r4, #4]
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	2300      	movs	r3, #0
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686c:	e7a8      	b.n	80067c0 <_printf_i+0x150>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	462a      	mov	r2, r5
 8006872:	4649      	mov	r1, r9
 8006874:	4640      	mov	r0, r8
 8006876:	47d0      	blx	sl
 8006878:	3001      	adds	r0, #1
 800687a:	d0ab      	beq.n	80067d4 <_printf_i+0x164>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	079b      	lsls	r3, r3, #30
 8006880:	d413      	bmi.n	80068aa <_printf_i+0x23a>
 8006882:	68e0      	ldr	r0, [r4, #12]
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	4298      	cmp	r0, r3
 8006888:	bfb8      	it	lt
 800688a:	4618      	movlt	r0, r3
 800688c:	e7a4      	b.n	80067d8 <_printf_i+0x168>
 800688e:	2301      	movs	r3, #1
 8006890:	4632      	mov	r2, r6
 8006892:	4649      	mov	r1, r9
 8006894:	4640      	mov	r0, r8
 8006896:	47d0      	blx	sl
 8006898:	3001      	adds	r0, #1
 800689a:	d09b      	beq.n	80067d4 <_printf_i+0x164>
 800689c:	3501      	adds	r5, #1
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	9903      	ldr	r1, [sp, #12]
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dcf2      	bgt.n	800688e <_printf_i+0x21e>
 80068a8:	e7eb      	b.n	8006882 <_printf_i+0x212>
 80068aa:	2500      	movs	r5, #0
 80068ac:	f104 0619 	add.w	r6, r4, #25
 80068b0:	e7f5      	b.n	800689e <_printf_i+0x22e>
 80068b2:	bf00      	nop
 80068b4:	08007546 	.word	0x08007546
 80068b8:	08007557 	.word	0x08007557

080068bc <_sbrk_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4d06      	ldr	r5, [pc, #24]	; (80068d8 <_sbrk_r+0x1c>)
 80068c0:	2300      	movs	r3, #0
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	f7fb fe16 	bl	80024f8 <_sbrk>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_sbrk_r+0x1a>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_sbrk_r+0x1a>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20001e58 	.word	0x20001e58

080068dc <__swbuf_r>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	460e      	mov	r6, r1
 80068e0:	4614      	mov	r4, r2
 80068e2:	4605      	mov	r5, r0
 80068e4:	b118      	cbz	r0, 80068ee <__swbuf_r+0x12>
 80068e6:	6983      	ldr	r3, [r0, #24]
 80068e8:	b90b      	cbnz	r3, 80068ee <__swbuf_r+0x12>
 80068ea:	f000 f9d5 	bl	8006c98 <__sinit>
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <__swbuf_r+0x98>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d12b      	bne.n	800694c <__swbuf_r+0x70>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d52f      	bpl.n	8006960 <__swbuf_r+0x84>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b36b      	cbz	r3, 8006960 <__swbuf_r+0x84>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	1ac0      	subs	r0, r0, r3
 800690a:	6963      	ldr	r3, [r4, #20]
 800690c:	b2f6      	uxtb	r6, r6
 800690e:	4283      	cmp	r3, r0
 8006910:	4637      	mov	r7, r6
 8006912:	dc04      	bgt.n	800691e <__swbuf_r+0x42>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f92a 	bl	8006b70 <_fflush_r>
 800691c:	bb30      	cbnz	r0, 800696c <__swbuf_r+0x90>
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	3b01      	subs	r3, #1
 8006922:	60a3      	str	r3, [r4, #8]
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	701e      	strb	r6, [r3, #0]
 800692c:	6963      	ldr	r3, [r4, #20]
 800692e:	3001      	adds	r0, #1
 8006930:	4283      	cmp	r3, r0
 8006932:	d004      	beq.n	800693e <__swbuf_r+0x62>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d506      	bpl.n	8006948 <__swbuf_r+0x6c>
 800693a:	2e0a      	cmp	r6, #10
 800693c:	d104      	bne.n	8006948 <__swbuf_r+0x6c>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f915 	bl	8006b70 <_fflush_r>
 8006946:	b988      	cbnz	r0, 800696c <__swbuf_r+0x90>
 8006948:	4638      	mov	r0, r7
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <__swbuf_r+0x9c>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <__swbuf_r+0x7a>
 8006952:	68ac      	ldr	r4, [r5, #8]
 8006954:	e7cf      	b.n	80068f6 <__swbuf_r+0x1a>
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <__swbuf_r+0xa0>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68ec      	ldreq	r4, [r5, #12]
 800695e:	e7ca      	b.n	80068f6 <__swbuf_r+0x1a>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f80c 	bl	8006980 <__swsetup_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0cb      	beq.n	8006904 <__swbuf_r+0x28>
 800696c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006970:	e7ea      	b.n	8006948 <__swbuf_r+0x6c>
 8006972:	bf00      	nop
 8006974:	08007588 	.word	0x08007588
 8006978:	080075a8 	.word	0x080075a8
 800697c:	08007568 	.word	0x08007568

08006980 <__swsetup_r>:
 8006980:	4b32      	ldr	r3, [pc, #200]	; (8006a4c <__swsetup_r+0xcc>)
 8006982:	b570      	push	{r4, r5, r6, lr}
 8006984:	681d      	ldr	r5, [r3, #0]
 8006986:	4606      	mov	r6, r0
 8006988:	460c      	mov	r4, r1
 800698a:	b125      	cbz	r5, 8006996 <__swsetup_r+0x16>
 800698c:	69ab      	ldr	r3, [r5, #24]
 800698e:	b913      	cbnz	r3, 8006996 <__swsetup_r+0x16>
 8006990:	4628      	mov	r0, r5
 8006992:	f000 f981 	bl	8006c98 <__sinit>
 8006996:	4b2e      	ldr	r3, [pc, #184]	; (8006a50 <__swsetup_r+0xd0>)
 8006998:	429c      	cmp	r4, r3
 800699a:	d10f      	bne.n	80069bc <__swsetup_r+0x3c>
 800699c:	686c      	ldr	r4, [r5, #4]
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a4:	0719      	lsls	r1, r3, #28
 80069a6:	d42c      	bmi.n	8006a02 <__swsetup_r+0x82>
 80069a8:	06dd      	lsls	r5, r3, #27
 80069aa:	d411      	bmi.n	80069d0 <__swsetup_r+0x50>
 80069ac:	2309      	movs	r3, #9
 80069ae:	6033      	str	r3, [r6, #0]
 80069b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ba:	e03e      	b.n	8006a3a <__swsetup_r+0xba>
 80069bc:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <__swsetup_r+0xd4>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	d101      	bne.n	80069c6 <__swsetup_r+0x46>
 80069c2:	68ac      	ldr	r4, [r5, #8]
 80069c4:	e7eb      	b.n	800699e <__swsetup_r+0x1e>
 80069c6:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <__swsetup_r+0xd8>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	bf08      	it	eq
 80069cc:	68ec      	ldreq	r4, [r5, #12]
 80069ce:	e7e6      	b.n	800699e <__swsetup_r+0x1e>
 80069d0:	0758      	lsls	r0, r3, #29
 80069d2:	d512      	bpl.n	80069fa <__swsetup_r+0x7a>
 80069d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d6:	b141      	cbz	r1, 80069ea <__swsetup_r+0x6a>
 80069d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069dc:	4299      	cmp	r1, r3
 80069de:	d002      	beq.n	80069e6 <__swsetup_r+0x66>
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff fa45 	bl	8005e70 <_free_r>
 80069e6:	2300      	movs	r3, #0
 80069e8:	6363      	str	r3, [r4, #52]	; 0x34
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	2300      	movs	r3, #0
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f043 0308 	orr.w	r3, r3, #8
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	b94b      	cbnz	r3, 8006a1a <__swsetup_r+0x9a>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a10:	d003      	beq.n	8006a1a <__swsetup_r+0x9a>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 fa05 	bl	8006e24 <__smakebuf_r>
 8006a1a:	89a0      	ldrh	r0, [r4, #12]
 8006a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a20:	f010 0301 	ands.w	r3, r0, #1
 8006a24:	d00a      	beq.n	8006a3c <__swsetup_r+0xbc>
 8006a26:	2300      	movs	r3, #0
 8006a28:	60a3      	str	r3, [r4, #8]
 8006a2a:	6963      	ldr	r3, [r4, #20]
 8006a2c:	425b      	negs	r3, r3
 8006a2e:	61a3      	str	r3, [r4, #24]
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	b943      	cbnz	r3, 8006a46 <__swsetup_r+0xc6>
 8006a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a38:	d1ba      	bne.n	80069b0 <__swsetup_r+0x30>
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	0781      	lsls	r1, r0, #30
 8006a3e:	bf58      	it	pl
 8006a40:	6963      	ldrpl	r3, [r4, #20]
 8006a42:	60a3      	str	r3, [r4, #8]
 8006a44:	e7f4      	b.n	8006a30 <__swsetup_r+0xb0>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e7f7      	b.n	8006a3a <__swsetup_r+0xba>
 8006a4a:	bf00      	nop
 8006a4c:	20000014 	.word	0x20000014
 8006a50:	08007588 	.word	0x08007588
 8006a54:	080075a8 	.word	0x080075a8
 8006a58:	08007568 	.word	0x08007568

08006a5c <abort>:
 8006a5c:	b508      	push	{r3, lr}
 8006a5e:	2006      	movs	r0, #6
 8006a60:	f000 fa9e 	bl	8006fa0 <raise>
 8006a64:	2001      	movs	r0, #1
 8006a66:	f7fb fcd4 	bl	8002412 <_exit>
	...

08006a6c <__sflush_r>:
 8006a6c:	898a      	ldrh	r2, [r1, #12]
 8006a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a70:	4605      	mov	r5, r0
 8006a72:	0710      	lsls	r0, r2, #28
 8006a74:	460c      	mov	r4, r1
 8006a76:	d457      	bmi.n	8006b28 <__sflush_r+0xbc>
 8006a78:	684b      	ldr	r3, [r1, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dc04      	bgt.n	8006a88 <__sflush_r+0x1c>
 8006a7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dc01      	bgt.n	8006a88 <__sflush_r+0x1c>
 8006a84:	2000      	movs	r0, #0
 8006a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	d0fa      	beq.n	8006a84 <__sflush_r+0x18>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a94:	682f      	ldr	r7, [r5, #0]
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	d032      	beq.n	8006b00 <__sflush_r+0x94>
 8006a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	075a      	lsls	r2, r3, #29
 8006aa0:	d505      	bpl.n	8006aae <__sflush_r+0x42>
 8006aa2:	6863      	ldr	r3, [r4, #4]
 8006aa4:	1ac0      	subs	r0, r0, r3
 8006aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa8:	b10b      	cbz	r3, 8006aae <__sflush_r+0x42>
 8006aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aac:	1ac0      	subs	r0, r0, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab4:	6a21      	ldr	r1, [r4, #32]
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b0      	blx	r6
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	d106      	bne.n	8006ace <__sflush_r+0x62>
 8006ac0:	6829      	ldr	r1, [r5, #0]
 8006ac2:	291d      	cmp	r1, #29
 8006ac4:	d82c      	bhi.n	8006b20 <__sflush_r+0xb4>
 8006ac6:	4a29      	ldr	r2, [pc, #164]	; (8006b6c <__sflush_r+0x100>)
 8006ac8:	40ca      	lsrs	r2, r1
 8006aca:	07d6      	lsls	r6, r2, #31
 8006acc:	d528      	bpl.n	8006b20 <__sflush_r+0xb4>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	6062      	str	r2, [r4, #4]
 8006ad2:	04d9      	lsls	r1, r3, #19
 8006ad4:	6922      	ldr	r2, [r4, #16]
 8006ad6:	6022      	str	r2, [r4, #0]
 8006ad8:	d504      	bpl.n	8006ae4 <__sflush_r+0x78>
 8006ada:	1c42      	adds	r2, r0, #1
 8006adc:	d101      	bne.n	8006ae2 <__sflush_r+0x76>
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	b903      	cbnz	r3, 8006ae4 <__sflush_r+0x78>
 8006ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae6:	602f      	str	r7, [r5, #0]
 8006ae8:	2900      	cmp	r1, #0
 8006aea:	d0cb      	beq.n	8006a84 <__sflush_r+0x18>
 8006aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af0:	4299      	cmp	r1, r3
 8006af2:	d002      	beq.n	8006afa <__sflush_r+0x8e>
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7ff f9bb 	bl	8005e70 <_free_r>
 8006afa:	2000      	movs	r0, #0
 8006afc:	6360      	str	r0, [r4, #52]	; 0x34
 8006afe:	e7c2      	b.n	8006a86 <__sflush_r+0x1a>
 8006b00:	6a21      	ldr	r1, [r4, #32]
 8006b02:	2301      	movs	r3, #1
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b0      	blx	r6
 8006b08:	1c41      	adds	r1, r0, #1
 8006b0a:	d1c7      	bne.n	8006a9c <__sflush_r+0x30>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0c4      	beq.n	8006a9c <__sflush_r+0x30>
 8006b12:	2b1d      	cmp	r3, #29
 8006b14:	d001      	beq.n	8006b1a <__sflush_r+0xae>
 8006b16:	2b16      	cmp	r3, #22
 8006b18:	d101      	bne.n	8006b1e <__sflush_r+0xb2>
 8006b1a:	602f      	str	r7, [r5, #0]
 8006b1c:	e7b2      	b.n	8006a84 <__sflush_r+0x18>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	e7ae      	b.n	8006a86 <__sflush_r+0x1a>
 8006b28:	690f      	ldr	r7, [r1, #16]
 8006b2a:	2f00      	cmp	r7, #0
 8006b2c:	d0aa      	beq.n	8006a84 <__sflush_r+0x18>
 8006b2e:	0793      	lsls	r3, r2, #30
 8006b30:	680e      	ldr	r6, [r1, #0]
 8006b32:	bf08      	it	eq
 8006b34:	694b      	ldreq	r3, [r1, #20]
 8006b36:	600f      	str	r7, [r1, #0]
 8006b38:	bf18      	it	ne
 8006b3a:	2300      	movne	r3, #0
 8006b3c:	1bf6      	subs	r6, r6, r7
 8006b3e:	608b      	str	r3, [r1, #8]
 8006b40:	2e00      	cmp	r6, #0
 8006b42:	dd9f      	ble.n	8006a84 <__sflush_r+0x18>
 8006b44:	6a21      	ldr	r1, [r4, #32]
 8006b46:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006b4a:	4633      	mov	r3, r6
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47e0      	blx	ip
 8006b52:	2800      	cmp	r0, #0
 8006b54:	dc06      	bgt.n	8006b64 <__sflush_r+0xf8>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5c:	81a3      	strh	r3, [r4, #12]
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b62:	e790      	b.n	8006a86 <__sflush_r+0x1a>
 8006b64:	4407      	add	r7, r0
 8006b66:	1a36      	subs	r6, r6, r0
 8006b68:	e7ea      	b.n	8006b40 <__sflush_r+0xd4>
 8006b6a:	bf00      	nop
 8006b6c:	20400001 	.word	0x20400001

08006b70 <_fflush_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	4605      	mov	r5, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	b913      	cbnz	r3, 8006b80 <_fflush_r+0x10>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	b118      	cbz	r0, 8006b8a <_fflush_r+0x1a>
 8006b82:	6983      	ldr	r3, [r0, #24]
 8006b84:	b90b      	cbnz	r3, 8006b8a <_fflush_r+0x1a>
 8006b86:	f000 f887 	bl	8006c98 <__sinit>
 8006b8a:	4b14      	ldr	r3, [pc, #80]	; (8006bdc <_fflush_r+0x6c>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	d11b      	bne.n	8006bc8 <_fflush_r+0x58>
 8006b90:	686c      	ldr	r4, [r5, #4]
 8006b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0ef      	beq.n	8006b7a <_fflush_r+0xa>
 8006b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b9c:	07d0      	lsls	r0, r2, #31
 8006b9e:	d404      	bmi.n	8006baa <_fflush_r+0x3a>
 8006ba0:	0599      	lsls	r1, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_fflush_r+0x3a>
 8006ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba6:	f000 f915 	bl	8006dd4 <__retarget_lock_acquire_recursive>
 8006baa:	4628      	mov	r0, r5
 8006bac:	4621      	mov	r1, r4
 8006bae:	f7ff ff5d 	bl	8006a6c <__sflush_r>
 8006bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb4:	07da      	lsls	r2, r3, #31
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	d4e0      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	059b      	lsls	r3, r3, #22
 8006bbe:	d4dd      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc2:	f000 f908 	bl	8006dd6 <__retarget_lock_release_recursive>
 8006bc6:	e7d9      	b.n	8006b7c <_fflush_r+0xc>
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <_fflush_r+0x70>)
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d101      	bne.n	8006bd2 <_fflush_r+0x62>
 8006bce:	68ac      	ldr	r4, [r5, #8]
 8006bd0:	e7df      	b.n	8006b92 <_fflush_r+0x22>
 8006bd2:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <_fflush_r+0x74>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	bf08      	it	eq
 8006bd8:	68ec      	ldreq	r4, [r5, #12]
 8006bda:	e7da      	b.n	8006b92 <_fflush_r+0x22>
 8006bdc:	08007588 	.word	0x08007588
 8006be0:	080075a8 	.word	0x080075a8
 8006be4:	08007568 	.word	0x08007568

08006be8 <std>:
 8006be8:	2300      	movs	r3, #0
 8006bea:	b510      	push	{r4, lr}
 8006bec:	4604      	mov	r4, r0
 8006bee:	e9c0 3300 	strd	r3, r3, [r0]
 8006bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf6:	6083      	str	r3, [r0, #8]
 8006bf8:	8181      	strh	r1, [r0, #12]
 8006bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8006bfc:	81c2      	strh	r2, [r0, #14]
 8006bfe:	6183      	str	r3, [r0, #24]
 8006c00:	4619      	mov	r1, r3
 8006c02:	2208      	movs	r2, #8
 8006c04:	305c      	adds	r0, #92	; 0x5c
 8006c06:	f7fe ffc9 	bl	8005b9c <memset>
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <std+0x38>)
 8006c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <std+0x3c>)
 8006c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <std+0x40>)
 8006c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <std+0x44>)
 8006c18:	6224      	str	r4, [r4, #32]
 8006c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	bf00      	nop
 8006c20:	08006fd9 	.word	0x08006fd9
 8006c24:	08006ffb 	.word	0x08006ffb
 8006c28:	08007033 	.word	0x08007033
 8006c2c:	08007057 	.word	0x08007057

08006c30 <_cleanup_r>:
 8006c30:	4901      	ldr	r1, [pc, #4]	; (8006c38 <_cleanup_r+0x8>)
 8006c32:	f000 b8af 	b.w	8006d94 <_fwalk_reent>
 8006c36:	bf00      	nop
 8006c38:	08006b71 	.word	0x08006b71

08006c3c <__sfmoreglue>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	2268      	movs	r2, #104	; 0x68
 8006c40:	1e4d      	subs	r5, r1, #1
 8006c42:	4355      	muls	r5, r2
 8006c44:	460e      	mov	r6, r1
 8006c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c4a:	f7ff f97b 	bl	8005f44 <_malloc_r>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	b140      	cbz	r0, 8006c64 <__sfmoreglue+0x28>
 8006c52:	2100      	movs	r1, #0
 8006c54:	e9c0 1600 	strd	r1, r6, [r0]
 8006c58:	300c      	adds	r0, #12
 8006c5a:	60a0      	str	r0, [r4, #8]
 8006c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c60:	f7fe ff9c 	bl	8005b9c <memset>
 8006c64:	4620      	mov	r0, r4
 8006c66:	bd70      	pop	{r4, r5, r6, pc}

08006c68 <__sfp_lock_acquire>:
 8006c68:	4801      	ldr	r0, [pc, #4]	; (8006c70 <__sfp_lock_acquire+0x8>)
 8006c6a:	f000 b8b3 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006c6e:	bf00      	nop
 8006c70:	20001e55 	.word	0x20001e55

08006c74 <__sfp_lock_release>:
 8006c74:	4801      	ldr	r0, [pc, #4]	; (8006c7c <__sfp_lock_release+0x8>)
 8006c76:	f000 b8ae 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	20001e55 	.word	0x20001e55

08006c80 <__sinit_lock_acquire>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__sinit_lock_acquire+0x8>)
 8006c82:	f000 b8a7 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	20001e56 	.word	0x20001e56

08006c8c <__sinit_lock_release>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__sinit_lock_release+0x8>)
 8006c8e:	f000 b8a2 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	20001e56 	.word	0x20001e56

08006c98 <__sinit>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	f7ff fff0 	bl	8006c80 <__sinit_lock_acquire>
 8006ca0:	69a3      	ldr	r3, [r4, #24]
 8006ca2:	b11b      	cbz	r3, 8006cac <__sinit+0x14>
 8006ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca8:	f7ff bff0 	b.w	8006c8c <__sinit_lock_release>
 8006cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <__sinit+0x68>)
 8006cb4:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <__sinit+0x6c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	bf04      	itt	eq
 8006cbe:	2301      	moveq	r3, #1
 8006cc0:	61a3      	streq	r3, [r4, #24]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f820 	bl	8006d08 <__sfp>
 8006cc8:	6060      	str	r0, [r4, #4]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f81c 	bl	8006d08 <__sfp>
 8006cd0:	60a0      	str	r0, [r4, #8]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f818 	bl	8006d08 <__sfp>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	60e0      	str	r0, [r4, #12]
 8006cdc:	2104      	movs	r1, #4
 8006cde:	6860      	ldr	r0, [r4, #4]
 8006ce0:	f7ff ff82 	bl	8006be8 <std>
 8006ce4:	68a0      	ldr	r0, [r4, #8]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	2109      	movs	r1, #9
 8006cea:	f7ff ff7d 	bl	8006be8 <std>
 8006cee:	68e0      	ldr	r0, [r4, #12]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	2112      	movs	r1, #18
 8006cf4:	f7ff ff78 	bl	8006be8 <std>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	61a3      	str	r3, [r4, #24]
 8006cfc:	e7d2      	b.n	8006ca4 <__sinit+0xc>
 8006cfe:	bf00      	nop
 8006d00:	08007380 	.word	0x08007380
 8006d04:	08006c31 	.word	0x08006c31

08006d08 <__sfp>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	f7ff ffac 	bl	8006c68 <__sfp_lock_acquire>
 8006d10:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <__sfp+0x84>)
 8006d12:	681e      	ldr	r6, [r3, #0]
 8006d14:	69b3      	ldr	r3, [r6, #24]
 8006d16:	b913      	cbnz	r3, 8006d1e <__sfp+0x16>
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7ff ffbd 	bl	8006c98 <__sinit>
 8006d1e:	3648      	adds	r6, #72	; 0x48
 8006d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	d503      	bpl.n	8006d30 <__sfp+0x28>
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	b30b      	cbz	r3, 8006d70 <__sfp+0x68>
 8006d2c:	6836      	ldr	r6, [r6, #0]
 8006d2e:	e7f7      	b.n	8006d20 <__sfp+0x18>
 8006d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d34:	b9d5      	cbnz	r5, 8006d6c <__sfp+0x64>
 8006d36:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <__sfp+0x88>)
 8006d38:	60e3      	str	r3, [r4, #12]
 8006d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d40:	f000 f847 	bl	8006dd2 <__retarget_lock_init_recursive>
 8006d44:	f7ff ff96 	bl	8006c74 <__sfp_lock_release>
 8006d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d50:	6025      	str	r5, [r4, #0]
 8006d52:	61a5      	str	r5, [r4, #24]
 8006d54:	2208      	movs	r2, #8
 8006d56:	4629      	mov	r1, r5
 8006d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d5c:	f7fe ff1e 	bl	8005b9c <memset>
 8006d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d68:	4620      	mov	r0, r4
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6c:	3468      	adds	r4, #104	; 0x68
 8006d6e:	e7d9      	b.n	8006d24 <__sfp+0x1c>
 8006d70:	2104      	movs	r1, #4
 8006d72:	4638      	mov	r0, r7
 8006d74:	f7ff ff62 	bl	8006c3c <__sfmoreglue>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	6030      	str	r0, [r6, #0]
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1d5      	bne.n	8006d2c <__sfp+0x24>
 8006d80:	f7ff ff78 	bl	8006c74 <__sfp_lock_release>
 8006d84:	230c      	movs	r3, #12
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	e7ee      	b.n	8006d68 <__sfp+0x60>
 8006d8a:	bf00      	nop
 8006d8c:	08007380 	.word	0x08007380
 8006d90:	ffff0001 	.word	0xffff0001

08006d94 <_fwalk_reent>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	4606      	mov	r6, r0
 8006d9a:	4688      	mov	r8, r1
 8006d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006da0:	2700      	movs	r7, #0
 8006da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da6:	f1b9 0901 	subs.w	r9, r9, #1
 8006daa:	d505      	bpl.n	8006db8 <_fwalk_reent+0x24>
 8006dac:	6824      	ldr	r4, [r4, #0]
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d1f7      	bne.n	8006da2 <_fwalk_reent+0xe>
 8006db2:	4638      	mov	r0, r7
 8006db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db8:	89ab      	ldrh	r3, [r5, #12]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d907      	bls.n	8006dce <_fwalk_reent+0x3a>
 8006dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	d003      	beq.n	8006dce <_fwalk_reent+0x3a>
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4630      	mov	r0, r6
 8006dca:	47c0      	blx	r8
 8006dcc:	4307      	orrs	r7, r0
 8006dce:	3568      	adds	r5, #104	; 0x68
 8006dd0:	e7e9      	b.n	8006da6 <_fwalk_reent+0x12>

08006dd2 <__retarget_lock_init_recursive>:
 8006dd2:	4770      	bx	lr

08006dd4 <__retarget_lock_acquire_recursive>:
 8006dd4:	4770      	bx	lr

08006dd6 <__retarget_lock_release_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <__swhatbuf_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	460e      	mov	r6, r1
 8006ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de0:	2900      	cmp	r1, #0
 8006de2:	b096      	sub	sp, #88	; 0x58
 8006de4:	4614      	mov	r4, r2
 8006de6:	461d      	mov	r5, r3
 8006de8:	da08      	bge.n	8006dfc <__swhatbuf_r+0x24>
 8006dea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	061a      	lsls	r2, r3, #24
 8006df4:	d410      	bmi.n	8006e18 <__swhatbuf_r+0x40>
 8006df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dfa:	e00e      	b.n	8006e1a <__swhatbuf_r+0x42>
 8006dfc:	466a      	mov	r2, sp
 8006dfe:	f000 f951 	bl	80070a4 <_fstat_r>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	dbf1      	blt.n	8006dea <__swhatbuf_r+0x12>
 8006e06:	9a01      	ldr	r2, [sp, #4]
 8006e08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e10:	425a      	negs	r2, r3
 8006e12:	415a      	adcs	r2, r3
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	e7ee      	b.n	8006df6 <__swhatbuf_r+0x1e>
 8006e18:	2340      	movs	r3, #64	; 0x40
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	b016      	add	sp, #88	; 0x58
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e24 <__smakebuf_r>:
 8006e24:	898b      	ldrh	r3, [r1, #12]
 8006e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e28:	079d      	lsls	r5, r3, #30
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	d507      	bpl.n	8006e40 <__smakebuf_r+0x1c>
 8006e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6163      	str	r3, [r4, #20]
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	ab01      	add	r3, sp, #4
 8006e42:	466a      	mov	r2, sp
 8006e44:	f7ff ffc8 	bl	8006dd8 <__swhatbuf_r>
 8006e48:	9900      	ldr	r1, [sp, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff f879 	bl	8005f44 <_malloc_r>
 8006e52:	b948      	cbnz	r0, 8006e68 <__smakebuf_r+0x44>
 8006e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d4ef      	bmi.n	8006e3c <__smakebuf_r+0x18>
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	e7e3      	b.n	8006e30 <__smakebuf_r+0xc>
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <__smakebuf_r+0x7c>)
 8006e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	6020      	str	r0, [r4, #0]
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	6163      	str	r3, [r4, #20]
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	6120      	str	r0, [r4, #16]
 8006e7e:	b15b      	cbz	r3, 8006e98 <__smakebuf_r+0x74>
 8006e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e84:	4630      	mov	r0, r6
 8006e86:	f000 f91f 	bl	80070c8 <_isatty_r>
 8006e8a:	b128      	cbz	r0, 8006e98 <__smakebuf_r+0x74>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	89a0      	ldrh	r0, [r4, #12]
 8006e9a:	4305      	orrs	r5, r0
 8006e9c:	81a5      	strh	r5, [r4, #12]
 8006e9e:	e7cd      	b.n	8006e3c <__smakebuf_r+0x18>
 8006ea0:	08006c31 	.word	0x08006c31

08006ea4 <memmove>:
 8006ea4:	4288      	cmp	r0, r1
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	eb01 0402 	add.w	r4, r1, r2
 8006eac:	d902      	bls.n	8006eb4 <memmove+0x10>
 8006eae:	4284      	cmp	r4, r0
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	d807      	bhi.n	8006ec4 <memmove+0x20>
 8006eb4:	1e43      	subs	r3, r0, #1
 8006eb6:	42a1      	cmp	r1, r4
 8006eb8:	d008      	beq.n	8006ecc <memmove+0x28>
 8006eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ec2:	e7f8      	b.n	8006eb6 <memmove+0x12>
 8006ec4:	4402      	add	r2, r0
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	428a      	cmp	r2, r1
 8006eca:	d100      	bne.n	8006ece <memmove+0x2a>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed6:	e7f7      	b.n	8006ec8 <memmove+0x24>

08006ed8 <__malloc_lock>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__malloc_lock+0x8>)
 8006eda:	f7ff bf7b 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20001e54 	.word	0x20001e54

08006ee4 <__malloc_unlock>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__malloc_unlock+0x8>)
 8006ee6:	f7ff bf76 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	20001e54 	.word	0x20001e54

08006ef0 <_realloc_r>:
 8006ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	4614      	mov	r4, r2
 8006ef8:	460e      	mov	r6, r1
 8006efa:	b921      	cbnz	r1, 8006f06 <_realloc_r+0x16>
 8006efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	4611      	mov	r1, r2
 8006f02:	f7ff b81f 	b.w	8005f44 <_malloc_r>
 8006f06:	b92a      	cbnz	r2, 8006f14 <_realloc_r+0x24>
 8006f08:	f7fe ffb2 	bl	8005e70 <_free_r>
 8006f0c:	4625      	mov	r5, r4
 8006f0e:	4628      	mov	r0, r5
 8006f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f14:	f000 f8fa 	bl	800710c <_malloc_usable_size_r>
 8006f18:	4284      	cmp	r4, r0
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	d802      	bhi.n	8006f24 <_realloc_r+0x34>
 8006f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f22:	d812      	bhi.n	8006f4a <_realloc_r+0x5a>
 8006f24:	4621      	mov	r1, r4
 8006f26:	4640      	mov	r0, r8
 8006f28:	f7ff f80c 	bl	8005f44 <_malloc_r>
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d0ed      	beq.n	8006f0e <_realloc_r+0x1e>
 8006f32:	42bc      	cmp	r4, r7
 8006f34:	4622      	mov	r2, r4
 8006f36:	4631      	mov	r1, r6
 8006f38:	bf28      	it	cs
 8006f3a:	463a      	movcs	r2, r7
 8006f3c:	f7fe fe20 	bl	8005b80 <memcpy>
 8006f40:	4631      	mov	r1, r6
 8006f42:	4640      	mov	r0, r8
 8006f44:	f7fe ff94 	bl	8005e70 <_free_r>
 8006f48:	e7e1      	b.n	8006f0e <_realloc_r+0x1e>
 8006f4a:	4635      	mov	r5, r6
 8006f4c:	e7df      	b.n	8006f0e <_realloc_r+0x1e>

08006f4e <_raise_r>:
 8006f4e:	291f      	cmp	r1, #31
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4604      	mov	r4, r0
 8006f54:	460d      	mov	r5, r1
 8006f56:	d904      	bls.n	8006f62 <_raise_r+0x14>
 8006f58:	2316      	movs	r3, #22
 8006f5a:	6003      	str	r3, [r0, #0]
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f60:	bd38      	pop	{r3, r4, r5, pc}
 8006f62:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f64:	b112      	cbz	r2, 8006f6c <_raise_r+0x1e>
 8006f66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f6a:	b94b      	cbnz	r3, 8006f80 <_raise_r+0x32>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 f831 	bl	8006fd4 <_getpid_r>
 8006f72:	462a      	mov	r2, r5
 8006f74:	4601      	mov	r1, r0
 8006f76:	4620      	mov	r0, r4
 8006f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f7c:	f000 b818 	b.w	8006fb0 <_kill_r>
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d00a      	beq.n	8006f9a <_raise_r+0x4c>
 8006f84:	1c59      	adds	r1, r3, #1
 8006f86:	d103      	bne.n	8006f90 <_raise_r+0x42>
 8006f88:	2316      	movs	r3, #22
 8006f8a:	6003      	str	r3, [r0, #0]
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	e7e7      	b.n	8006f60 <_raise_r+0x12>
 8006f90:	2400      	movs	r4, #0
 8006f92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f96:	4628      	mov	r0, r5
 8006f98:	4798      	blx	r3
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e7e0      	b.n	8006f60 <_raise_r+0x12>
	...

08006fa0 <raise>:
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <raise+0xc>)
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	f7ff bfd2 	b.w	8006f4e <_raise_r>
 8006faa:	bf00      	nop
 8006fac:	20000014 	.word	0x20000014

08006fb0 <_kill_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d07      	ldr	r5, [pc, #28]	; (8006fd0 <_kill_r+0x20>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	602b      	str	r3, [r5, #0]
 8006fbe:	f7fb fa18 	bl	80023f2 <_kill>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	d102      	bne.n	8006fcc <_kill_r+0x1c>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	b103      	cbz	r3, 8006fcc <_kill_r+0x1c>
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	20001e58 	.word	0x20001e58

08006fd4 <_getpid_r>:
 8006fd4:	f7fb ba06 	b.w	80023e4 <_getpid>

08006fd8 <__sread>:
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	460c      	mov	r4, r1
 8006fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe0:	f000 f89c 	bl	800711c <_read_r>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	bfab      	itete	ge
 8006fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fea:	89a3      	ldrhlt	r3, [r4, #12]
 8006fec:	181b      	addge	r3, r3, r0
 8006fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff2:	bfac      	ite	ge
 8006ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ff6:	81a3      	strhlt	r3, [r4, #12]
 8006ff8:	bd10      	pop	{r4, pc}

08006ffa <__swrite>:
 8006ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffe:	461f      	mov	r7, r3
 8007000:	898b      	ldrh	r3, [r1, #12]
 8007002:	05db      	lsls	r3, r3, #23
 8007004:	4605      	mov	r5, r0
 8007006:	460c      	mov	r4, r1
 8007008:	4616      	mov	r6, r2
 800700a:	d505      	bpl.n	8007018 <__swrite+0x1e>
 800700c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007010:	2302      	movs	r3, #2
 8007012:	2200      	movs	r2, #0
 8007014:	f000 f868 	bl	80070e8 <_lseek_r>
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	4632      	mov	r2, r6
 8007026:	463b      	mov	r3, r7
 8007028:	4628      	mov	r0, r5
 800702a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800702e:	f000 b817 	b.w	8007060 <_write_r>

08007032 <__sseek>:
 8007032:	b510      	push	{r4, lr}
 8007034:	460c      	mov	r4, r1
 8007036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703a:	f000 f855 	bl	80070e8 <_lseek_r>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	bf15      	itete	ne
 8007044:	6560      	strne	r0, [r4, #84]	; 0x54
 8007046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800704a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800704e:	81a3      	strheq	r3, [r4, #12]
 8007050:	bf18      	it	ne
 8007052:	81a3      	strhne	r3, [r4, #12]
 8007054:	bd10      	pop	{r4, pc}

08007056 <__sclose>:
 8007056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705a:	f000 b813 	b.w	8007084 <_close_r>
	...

08007060 <_write_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d07      	ldr	r5, [pc, #28]	; (8007080 <_write_r+0x20>)
 8007064:	4604      	mov	r4, r0
 8007066:	4608      	mov	r0, r1
 8007068:	4611      	mov	r1, r2
 800706a:	2200      	movs	r2, #0
 800706c:	602a      	str	r2, [r5, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	f7fb f9f6 	bl	8002460 <_write>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_write_r+0x1e>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_write_r+0x1e>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20001e58 	.word	0x20001e58

08007084 <_close_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d06      	ldr	r5, [pc, #24]	; (80070a0 <_close_r+0x1c>)
 8007088:	2300      	movs	r3, #0
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f7fb fa02 	bl	8002498 <_close>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_close_r+0x1a>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_close_r+0x1a>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	20001e58 	.word	0x20001e58

080070a4 <_fstat_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d07      	ldr	r5, [pc, #28]	; (80070c4 <_fstat_r+0x20>)
 80070a8:	2300      	movs	r3, #0
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	4611      	mov	r1, r2
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	f7fb f9fc 	bl	80024ae <_fstat>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	d102      	bne.n	80070c0 <_fstat_r+0x1c>
 80070ba:	682b      	ldr	r3, [r5, #0]
 80070bc:	b103      	cbz	r3, 80070c0 <_fstat_r+0x1c>
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	bd38      	pop	{r3, r4, r5, pc}
 80070c2:	bf00      	nop
 80070c4:	20001e58 	.word	0x20001e58

080070c8 <_isatty_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_isatty_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7fb f9fa 	bl	80024cc <_isatty>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_isatty_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_isatty_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20001e58 	.word	0x20001e58

080070e8 <_lseek_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	; (8007108 <_lseek_r+0x20>)
 80070ec:	4604      	mov	r4, r0
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f7fb f9f2 	bl	80024e0 <_lseek>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_lseek_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_lseek_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20001e58 	.word	0x20001e58

0800710c <_malloc_usable_size_r>:
 800710c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007110:	1f18      	subs	r0, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfbc      	itt	lt
 8007116:	580b      	ldrlt	r3, [r1, r0]
 8007118:	18c0      	addlt	r0, r0, r3
 800711a:	4770      	bx	lr

0800711c <_read_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	; (800713c <_read_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fb f97b 	bl	8002426 <_read>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_read_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_read_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20001e58 	.word	0x20001e58

08007140 <_init>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr

0800714c <_fini>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr

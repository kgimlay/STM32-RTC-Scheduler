
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080068f4  080068f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a5c  08006a5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a64  08006a64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000070  08006adc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08006adc  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f0a  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1d  00000000  00000000  00034fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00037dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  00039180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de3e  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d84  00000000  00000000  0005824e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8809  00000000  00000000  0006bfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001247db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  0012482c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080068dc 	.word	0x080068dc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080068dc 	.word	0x080068dc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fb28 	bl	8000b94 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000180 	.word	0x20000180

08000550 <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	// reset current event index
	_currentEventIdx = 0;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <calendar_start+0x24>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]

	// set alarm for start of first event in list
	setAlarm_A(_calendarEvents[0].start_day, _calendarEvents[0].start_hour, _calendarEvents[0].start_minute, _calendarEvents[0].start_second);
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <calendar_start+0x28>)
 800055c:	7898      	ldrb	r0, [r3, #2]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <calendar_start+0x28>)
 8000560:	78d9      	ldrb	r1, [r3, #3]
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <calendar_start+0x28>)
 8000564:	791a      	ldrb	r2, [r3, #4]
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <calendar_start+0x28>)
 8000568:	795b      	ldrb	r3, [r3, #5]
 800056a:	f000 fc8d 	bl	8000e88 <setAlarm_A>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000017c 	.word	0x2000017c
 8000578:	2000008c 	.word	0x2000008c

0800057c <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	463b      	mov	r3, r7
 8000584:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000588:	7838      	ldrb	r0, [r7, #0]
 800058a:	7879      	ldrb	r1, [r7, #1]
 800058c:	78bc      	ldrb	r4, [r7, #2]
 800058e:	78fd      	ldrb	r5, [r7, #3]
 8000590:	793b      	ldrb	r3, [r7, #4]
 8000592:	797a      	ldrb	r2, [r7, #5]
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	462b      	mov	r3, r5
 800059a:	4622      	mov	r2, r4
 800059c:	f000 fb08 	bl	8000bb0 <setDateTime>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bdb0      	pop	{r4, r5, r7, pc}

080005a8 <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	1c59      	adds	r1, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	1c9c      	adds	r4, r3, #2
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1cdd      	adds	r5, r3, #3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3304      	adds	r3, #4
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	3205      	adds	r2, #5
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	462b      	mov	r3, r5
 80005cc:	4622      	mov	r2, r4
 80005ce:	f000 fbb9 	bl	8000d44 <getDateTime>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005dc <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS]) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005e4:	22f0      	movs	r2, #240	; 0xf0
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <calendar_setEvents+0x1c>)
 80005ea:	f005 fcef 	bl	8005fcc <memcpy>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000008c 	.word	0x2000008c

080005fc <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000618:	f023 0218 	bic.w	r2, r3, #24
 800061c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4313      	orrs	r3, r2
 8000624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000632:	b480      	push	{r7}
 8000634:	b085      	sub	sp, #20
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800063a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800063e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4313      	orrs	r3, r2
 8000648:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4013      	ands	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
	...

08000664 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_UART_ErrorCallback+0x28>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d006      	beq.n	8000684 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <HAL_UART_ErrorCallback+0x2c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d101      	bne.n	8000684 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000680:	f000 fe5e 	bl	8001340 <uartBasic_Error_ISR>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40004400 	.word	0x40004400

08000694 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_UART_TxCpltCallback+0x28>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d006      	beq.n	80006b4 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <HAL_UART_TxCpltCallback+0x2c>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d101      	bne.n	80006b4 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 80006b0:	f000 fe3a 	bl	8001328 <uartBasic_TX_Complete_ISR>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40013800 	.word	0x40013800
 80006c0:	40004400 	.word	0x40004400

080006c4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_UART_RxCpltCallback+0x28>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d006      	beq.n	80006e4 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <HAL_UART_RxCpltCallback+0x2c>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d101      	bne.n	80006e4 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 80006e0:	f000 fe16 	bl	8001310 <uartBasic_RX_Complete_ISR>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40013800 	.word	0x40013800
 80006f0:	40004400 	.word	0x40004400

080006f4 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80006fc:	f7ff ff7e 	bl	80005fc <calendar_AlarmA_ISR>

	// send message for debugging
	char messageBody[UART_MESSAGE_BODY_SIZE] = "ALARM EVENT!\n\0";
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_RTC_AlarmAEventCallback+0x40>)
 8000702:	f107 040c 	add.w	r4, r7, #12
 8000706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000708:	c407      	stmia	r4!, {r0, r1, r2}
 800070a:	8023      	strh	r3, [r4, #0]
 800070c:	3402      	adds	r4, #2
 800070e:	0c1b      	lsrs	r3, r3, #16
 8000710:	7023      	strb	r3, [r4, #0]
 8000712:	f107 031b 	add.w	r3, r7, #27
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	731a      	strb	r2, [r3, #12]
	uartBasic_TX_IT("TIME", messageBody);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4804      	ldr	r0, [pc, #16]	; (8000738 <HAL_RTC_AlarmAEventCallback+0x44>)
 8000728:	f000 fd92 	bl	8001250 <uartBasic_TX_IT>
}
 800072c:	bf00      	nop
 800072e:	372c      	adds	r7, #44	; 0x2c
 8000730:	46bd      	mov	sp, r7
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	080068fc 	.word	0x080068fc
 8000738:	080068f4 	.word	0x080068f4

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	b0d1      	sub	sp, #324	; 0x144
 8000740:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fe87 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f8c9 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 fa11 	bl	8000b70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074e:	f000 f9b9 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000752:	f000 f921 	bl	8000998 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000756:	2001      	movs	r0, #1
 8000758:	f001 fa42 	bl	8001be0 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 800075c:	4859      	ldr	r0, [pc, #356]	; (80008c4 <main+0x188>)
 800075e:	f000 fd69 	bl	8001234 <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000762:	4859      	ldr	r0, [pc, #356]	; (80008c8 <main+0x18c>)
 8000764:	f7ff fee4 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8000768:	4a58      	ldr	r2, [pc, #352]	; (80008cc <main+0x190>)
 800076a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800076e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000772:	6018      	str	r0, [r3, #0]
 8000774:	3304      	adds	r3, #4
 8000776:	8019      	strh	r1, [r3, #0]
		  .day = 8,
		  .hour = 2,
		  .minute = 30,
		  .second = 0
  };
  calendar_setDateTime(now);
 8000778:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800077c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000780:	f7ff fefc 	bl	800057c <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000784:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800078c:	4618      	mov	r0, r3
 800078e:	23f0      	movs	r3, #240	; 0xf0
 8000790:	461a      	mov	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f005 fc28 	bl	8005fe8 <memset>
  events[0].start_year = 23;
 8000798:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800079c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007a0:	2217      	movs	r2, #23
 80007a2:	701a      	strb	r2, [r3, #0]
  events[0].start_month = 7;
 80007a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80007a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007ac:	2207      	movs	r2, #7
 80007ae:	705a      	strb	r2, [r3, #1]
  events[0].start_day = 8;
 80007b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80007b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007b8:	2208      	movs	r2, #8
 80007ba:	709a      	strb	r2, [r3, #2]
  events[0].start_hour = 2;
 80007bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80007c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007c4:	2202      	movs	r2, #2
 80007c6:	70da      	strb	r2, [r3, #3]
  events[0].start_minute = 30;
 80007c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80007cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007d0:	221e      	movs	r2, #30
 80007d2:	711a      	strb	r2, [r3, #4]
  events[0].start_second = 10;
 80007d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80007d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007dc:	220a      	movs	r2, #10
 80007de:	715a      	strb	r2, [r3, #5]
  calendar_setEvents(events);
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fef9 	bl	80005dc <calendar_setEvents>

  // start calendar
  calendar_start();
 80007ea:	f7ff feb1 	bl	8000550 <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 80007ee:	f000 fd51 	bl	8001294 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int timeSeconds = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  int timeMinutes = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 8000804:	463a      	mov	r2, r7
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fd55 	bl	80012bc <uartBasic_get_RX>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	  // if message present, handle message
	  if (messageStatus == true) {
 8000818:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00d      	beq.n	800083c <main+0x100>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 8000820:	463a      	mov	r2, r7
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fd11 	bl	8001250 <uartBasic_TX_IT>
		  messageCount++;
 800082e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000832:	3301      	adds	r3, #1
 8000834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  uartBasic_RX_IT();
 8000838:	f000 fd2c 	bl	8001294 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 800083c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff feb1 	bl	80005a8 <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000846:	463b      	mov	r3, r7
 8000848:	221c      	movs	r2, #28
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f005 fbcb 	bl	8005fe8 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000852:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8000856:	461e      	mov	r6, r3
 8000858:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800085c:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8000860:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
 8000864:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 8000868:	4604      	mov	r4, r0
 800086a:	f897 0115 	ldrb.w	r0, [r7, #277]	; 0x115
 800086e:	4605      	mov	r5, r0
 8000870:	4638      	mov	r0, r7
 8000872:	9504      	str	r5, [sp, #16]
 8000874:	9403      	str	r4, [sp, #12]
 8000876:	9102      	str	r1, [sp, #8]
 8000878:	9201      	str	r2, [sp, #4]
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4633      	mov	r3, r6
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <main+0x194>)
 8000880:	211c      	movs	r1, #28
 8000882:	f005 fbb9 	bl	8005ff8 <sniprintf>
	  uartBasic_TX_IT("TIME", messageBody);
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <main+0x198>)
 800088c:	f000 fce0 	bl	8001250 <uartBasic_TX_IT>
	  timeSeconds++;
 8000890:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000894:	3301      	adds	r3, #1
 8000896:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  timeMinutes++;
 800089a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800089e:	3301      	adds	r3, #1
 80008a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	  long int i = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 80008aa:	e004      	b.n	80008b6 <main+0x17a>
		  i++;
 80008ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008b0:	3301      	adds	r3, #1
 80008b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 80008b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <main+0x19c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	ddf5      	ble.n	80008ac <main+0x170>
  {
 80008c0:	e7a0      	b.n	8000804 <main+0xc8>
 80008c2:	bf00      	nop
 80008c4:	200001bc 	.word	0x200001bc
 80008c8:	20000184 	.word	0x20000184
 80008cc:	0800693c 	.word	0x0800693c
 80008d0:	08006918 	.word	0x08006918
 80008d4:	080068f4 	.word	0x080068f4
 80008d8:	0001fffd 	.word	0x0001fffd

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09a      	sub	sp, #104	; 0x68
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	2248      	movs	r2, #72	; 0x48
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fb7c 	bl	8005fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000902:	f001 f945 	bl	8001b90 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fe7e 	bl	8000608 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <SystemClock_Config+0xb8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000914:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <SystemClock_Config+0xb8>)
 8000916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <SystemClock_Config+0xb8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000928:	232c      	movs	r3, #44	; 0x2c
 800092a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092c:	2381      	movs	r3, #129	; 0x81
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000934:	2300      	movs	r3, #0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fc09 	bl	8002164 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000958:	f000 f917 	bl	8000b8a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 800095c:	236f      	movs	r3, #111	; 0x6f
 800095e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f001 ff73 	bl	8002868 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000988:	f000 f8ff 	bl	8000b8a <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3768      	adds	r7, #104	; 0x68
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	58000400 	.word	0x58000400

08000998 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b092      	sub	sp, #72	; 0x48
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800099e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	222c      	movs	r2, #44	; 0x2c
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 fb15 	bl	8005fe8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009be:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <MX_RTC_Init+0x124>)
 80009c0:	4a3f      	ldr	r2, [pc, #252]	; (8000ac0 <MX_RTC_Init+0x128>)
 80009c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c4:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <MX_RTC_Init+0x124>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009ca:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <MX_RTC_Init+0x124>)
 80009cc:	227f      	movs	r2, #127	; 0x7f
 80009ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009d0:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <MX_RTC_Init+0x124>)
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <MX_RTC_Init+0x124>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009dc:	4b37      	ldr	r3, [pc, #220]	; (8000abc <MX_RTC_Init+0x124>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009e2:	4b36      	ldr	r3, [pc, #216]	; (8000abc <MX_RTC_Init+0x124>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e8:	4b34      	ldr	r3, [pc, #208]	; (8000abc <MX_RTC_Init+0x124>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009f0:	4b32      	ldr	r3, [pc, #200]	; (8000abc <MX_RTC_Init+0x124>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <MX_RTC_Init+0x124>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fc:	482f      	ldr	r0, [pc, #188]	; (8000abc <MX_RTC_Init+0x124>)
 80009fe:	f002 fc0d 	bl	800321c <HAL_RTC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000a08:	f000 f8bf 	bl	8000b8a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4823      	ldr	r0, [pc, #140]	; (8000abc <MX_RTC_Init+0x124>)
 8000a30:	f002 fc76 	bl	8003320 <HAL_RTC_SetTime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000a3a:	f000 f8a6 	bl	8000b8a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4817      	ldr	r0, [pc, #92]	; (8000abc <MX_RTC_Init+0x124>)
 8000a60:	f002 fd5c 	bl	800351c <HAL_RTC_SetDate>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000a6a:	f000 f88e 	bl	8000b8a <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_RTC_Init+0x124>)
 8000aa6:	f002 fe0d 	bl	80036c4 <HAL_RTC_SetAlarm_IT>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000ab0:	f000 f86b 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	3748      	adds	r7, #72	; 0x48
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000184 	.word	0x20000184
 8000ac0:	40002800 	.word	0x40002800

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000aca:	4a28      	ldr	r2, [pc, #160]	; (8000b6c <MX_USART2_UART_Init+0xa8>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000ae6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b0c:	2230      	movs	r2, #48	; 0x30
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b22:	f003 f801 	bl	8003b28 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000b2c:	f000 f82d 	bl	8000b8a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b34:	f005 f957 	bl	8005de6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000b3e:	f000 f824 	bl	8000b8a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b46:	f005 f98c 	bl	8005e62 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000b50:	f000 f81b 	bl	8000b8a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_USART2_UART_Init+0xa4>)
 8000b56:	f005 f90e 	bl	8005d76 <HAL_UARTEx_DisableFifoMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000b60:	f000 f813 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001bc 	.word	0x200001bc
 8000b6c:	40004400 	.word	0x40004400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fd5c 	bl	8000632 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2004      	movs	r0, #4
 8000b7c:	f7ff fd59 	bl	8000632 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fd56 	bl	8000632 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8e:	b672      	cpsid	i
}
 8000b90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <Error_Handler+0x8>

08000b94 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <rtcAlarmControl_init+0x18>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000250 	.word	0x20000250

08000bb0 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71bb      	strb	r3, [r7, #6]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	717b      	strb	r3, [r7, #5]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a5a      	ldr	r2, [pc, #360]	; (8000d3c <setDateTime+0x18c>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	b258      	sxtb	r0, r3
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	4b56      	ldr	r3, [pc, #344]	; (8000d3c <setDateTime+0x18c>)
 8000be2:	fba3 1302 	umull	r1, r3, r3, r2
 8000be6:	08d9      	lsrs	r1, r3, #3
 8000be8:	460b      	mov	r3, r1
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	4303      	orrs	r3, r0
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <setDateTime+0x18c>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	b258      	sxtb	r0, r3
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	4b4a      	ldr	r3, [pc, #296]	; (8000d3c <setDateTime+0x18c>)
 8000c12:	fba3 1302 	umull	r1, r3, r3, r2
 8000c16:	08d9      	lsrs	r1, r3, #3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	4303      	orrs	r3, r0
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8000c2e:	797b      	ldrb	r3, [r7, #5]
 8000c30:	4a42      	ldr	r2, [pc, #264]	; (8000d3c <setDateTime+0x18c>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	b258      	sxtb	r0, r3
 8000c3e:	797a      	ldrb	r2, [r7, #5]
 8000c40:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <setDateTime+0x18c>)
 8000c42:	fba3 1302 	umull	r1, r3, r3, r2
 8000c46:	08d9      	lsrs	r1, r3, #3
 8000c48:	460b      	mov	r3, r1
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	4303      	orrs	r3, r0
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8000c62:	793b      	ldrb	r3, [r7, #4]
 8000c64:	4a35      	ldr	r2, [pc, #212]	; (8000d3c <setDateTime+0x18c>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	b258      	sxtb	r0, r3
 8000c72:	793a      	ldrb	r2, [r7, #4]
 8000c74:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <setDateTime+0x18c>)
 8000c76:	fba3 1302 	umull	r1, r3, r3, r2
 8000c7a:	08d9      	lsrs	r1, r3, #3
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	4303      	orrs	r3, r0
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8000c92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c96:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <setDateTime+0x18c>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	b258      	sxtb	r0, r3
 8000ca4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <setDateTime+0x18c>)
 8000caa:	fba3 1302 	umull	r1, r3, r3, r2
 8000cae:	08d9      	lsrs	r1, r3, #3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	4303      	orrs	r3, r0
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8000cc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <setDateTime+0x18c>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	b258      	sxtb	r0, r3
 8000cd8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <setDateTime+0x18c>)
 8000cde:	fba3 1302 	umull	r1, r3, r3, r2
 8000ce2:	08d9      	lsrs	r1, r3, #3
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <setDateTime+0x190>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f107 011c 	add.w	r1, r7, #28
 8000d02:	2201      	movs	r2, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fc09 	bl	800351c <HAL_RTC_SetDate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000d14:	e7fe      	b.n	8000d14 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <setDateTime+0x190>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f107 0108 	add.w	r1, r7, #8
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 fafd 	bl	8003320 <HAL_RTC_SetTime>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000d30:	e7fe      	b.n	8000d30 <setDateTime+0x180>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	cccccccd 	.word	0xcccccccd
 8000d40:	20000250 	.word	0x20000250

08000d44 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <getDateTime+0x140>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f107 0114 	add.w	r1, r7, #20
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fb71 	bl	8003458 <HAL_RTC_GetTime>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000d80:	e7fe      	b.n	8000d80 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000d82:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <getDateTime+0x140>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f107 0110 	add.w	r1, r7, #16
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 fc4b 	bl	8003628 <HAL_RTC_GetDate>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000d9c:	e7fe      	b.n	8000d9c <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0b11110000) >> 4) * 10 + (date.Year & 0b00001111);
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	7cfb      	ldrb	r3, [r7, #19]
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4413      	add	r3, r2
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0b00010000) >> 4) * 10 + (date.Month & 0b00001111);
 8000dbe:	7c7b      	ldrb	r3, [r7, #17]
 8000dc0:	111b      	asrs	r3, r3, #4
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	7c7b      	ldrb	r3, [r7, #17]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0b00110000) >> 4) * 10 + (date.Date & 0b00001111);
 8000de4:	7cbb      	ldrb	r3, [r7, #18]
 8000de6:	111b      	asrs	r3, r3, #4
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	7cbb      	ldrb	r3, [r7, #18]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0b00110000) >> 4) * 10 + (time.Hours & 0b00001111);
 8000e0a:	7d3b      	ldrb	r3, [r7, #20]
 8000e0c:	111b      	asrs	r3, r3, #4
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	7d3b      	ldrb	r3, [r7, #20]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0b01110000) >> 4) * 10 + (time.Minutes & 0b00001111);
 8000e30:	7d7b      	ldrb	r3, [r7, #21]
 8000e32:	111b      	asrs	r3, r3, #4
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	7d7b      	ldrb	r3, [r7, #21]
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e54:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0b01110000) >> 4) * 10 + (time.Seconds & 0b00001111);
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	111b      	asrs	r3, r3, #4
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	7dbb      	ldrb	r3, [r7, #22]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4413      	add	r3, r2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	701a      	strb	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000250 	.word	0x20000250

08000e88 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08f      	sub	sp, #60	; 0x3c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71bb      	strb	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	717b      	strb	r3, [r7, #5]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	222c      	movs	r2, #44	; 0x2c
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 f89a 	bl	8005fe8 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <setAlarm_A+0x130>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	b258      	sxtb	r0, r3
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <setAlarm_A+0x130>)
 8000ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8000ecc:	08d9      	lsrs	r1, r3, #3
 8000ece:	460b      	mov	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	4303      	orrs	r3, r0
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8000ee6:	79bb      	ldrb	r3, [r7, #6]
 8000ee8:	4a33      	ldr	r2, [pc, #204]	; (8000fb8 <setAlarm_A+0x130>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	b258      	sxtb	r0, r3
 8000ef6:	79ba      	ldrb	r2, [r7, #6]
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <setAlarm_A+0x130>)
 8000efa:	fba3 1302 	umull	r1, r3, r3, r2
 8000efe:	08d9      	lsrs	r1, r3, #3
 8000f00:	460b      	mov	r3, r1
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	4303      	orrs	r3, r0
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <setAlarm_A+0x130>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	b258      	sxtb	r0, r3
 8000f26:	797a      	ldrb	r2, [r7, #5]
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <setAlarm_A+0x130>)
 8000f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f2e:	08d9      	lsrs	r1, r3, #3
 8000f30:	460b      	mov	r3, r1
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4303      	orrs	r3, r0
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8000f46:	793b      	ldrb	r3, [r7, #4]
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <setAlarm_A+0x130>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	b258      	sxtb	r0, r3
 8000f56:	793a      	ldrb	r2, [r7, #4]
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <setAlarm_A+0x130>)
 8000f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f5e:	08d9      	lsrs	r1, r3, #3
 8000f60:	460b      	mov	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4303      	orrs	r3, r0
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 8000f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <setAlarm_A+0x134>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f107 010c 	add.w	r1, r7, #12
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fb90 	bl	80036c4 <HAL_RTC_SetAlarm_IT>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8000faa:	b672      	cpsid	i
}
 8000fac:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 8000fae:	e7fe      	b.n	8000fae <setAlarm_A+0x126>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	373c      	adds	r7, #60	; 0x3c
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	cccccccd 	.word	0xcccccccd
 8000fbc:	20000250 	.word	0x20000250

08000fc0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <LL_AHB2_GRP1_EnableClock>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001004:	68fb      	ldr	r3, [r7, #12]
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800101e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b090      	sub	sp, #64	; 0x40
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2238      	movs	r2, #56	; 0x38
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f004 ffc3 	bl	8005fe8 <memset>
  if(hrtc->Instance==RTC)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_RTC_MspInit+0x64>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d11d      	bne.n	80010a8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4618      	mov	r0, r3
 800107e:	f001 ffb3 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001088:	f7ff fd7f 	bl	8000b8a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800108c:	f7ff ff98 	bl	8000fc0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001090:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001094:	f7ff ffbc 	bl	8001010 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	202a      	movs	r0, #42	; 0x2a
 800109e:	f000 fb26 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80010a2:	202a      	movs	r0, #42	; 0x2a
 80010a4:	f000 fb3d 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3740      	adds	r7, #64	; 0x40
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40002800 	.word	0x40002800

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b096      	sub	sp, #88	; 0x58
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2238      	movs	r2, #56	; 0x38
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 ff87 	bl	8005fe8 <memset>
  if(huart->Instance==USART2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_UART_MspInit+0x98>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d12e      	bne.n	8001142 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80010ec:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 ff78 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010fe:	f7ff fd44 	bl	8000b8a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001102:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001106:	f7ff ff83 	bl	8001010 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff ff68 	bl	8000fe0 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001110:	230c      	movs	r3, #12
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001120:	2307      	movs	r3, #7
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f000 fbcf 	bl	80018d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2025      	movs	r0, #37	; 0x25
 8001138:	f000 fad9 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800113c:	2025      	movs	r0, #37	; 0x25
 800113e:	f000 faf0 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3758      	adds	r7, #88	; 0x58
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004400 	.word	0x40004400

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001196:	f000 f9b7 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <USART2_IRQHandler+0x10>)
 80011a6:	f002 fdef 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001bc 	.word	0x200001bc

080011b4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <RTC_Alarm_IRQHandler+0x10>)
 80011ba:	f002 fb8f 	bl	80038dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000184 	.word	0x20000184

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f004 febe 	bl	8005f78 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20008000 	.word	0x20008000
 8001228:	00000400 	.word	0x00000400
 800122c:	20000254 	.word	0x20000254
 8001230:	200002b8 	.word	0x200002b8

08001234 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <uartBasic_init+0x18>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	2000025c 	.word	0x2000025c

08001250 <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <uartBasic_TX_IT+0x3c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <uartBasic_TX_IT+0x40>)
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f89a 	bl	80013a8 <composeMessage>
		_txBuffer_full = true;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <uartBasic_TX_IT+0x3c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 800127a:	f000 f865 	bl	8001348 <_txMessage_IT>

		// report successfully queued
		return true;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 8001282:	2300      	movs	r3, #0
	}
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200002a0 	.word	0x200002a0
 8001290:	20000260 	.word	0x20000260

08001294 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <uartBasic_RX_IT+0x24>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 80012a8:	f000 f866 	bl	8001378 <_rxMessage_IT>

		// return success
		return true;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 80012b0:	2300      	movs	r3, #0
	}
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002a1 	.word	0x200002a1

080012bc <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <uartBasic_get_RX+0x4c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d015      	beq.n	80012fc <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <uartBasic_get_RX+0x50>)
 80012d2:	f107 0408 	add.w	r4, r7, #8
 80012d6:	461d      	mov	r5, r3
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <uartBasic_get_RX+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	461a      	mov	r2, r3
 80012f0:	6839      	ldr	r1, [r7, #0]
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f86e 	bl	80013d4 <decomposeMessage>

		// report successfully dequeued
		return true;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 80012fc:	2300      	movs	r3, #0
	}
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	200002a1 	.word	0x200002a1
 800130c:	20000280 	.word	0x20000280

08001310 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <uartBasic_RX_Complete_ISR+0x14>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200002a1 	.word	0x200002a1

08001328 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <uartBasic_TX_Complete_ISR+0x14>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200002a0 	.word	0x200002a0

08001340 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 8001344:	e7fe      	b.n	8001344 <uartBasic_Error_ISR+0x4>
	...

08001348 <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <_txMessage_IT+0x24>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2220      	movs	r2, #32
 8001352:	4907      	ldr	r1, [pc, #28]	; (8001370 <_txMessage_IT+0x28>)
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fc37 	bl	8003bc8 <HAL_UART_Transmit_IT>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d102      	bne.n	8001366 <_txMessage_IT+0x1e>
		_txError = true;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <_txMessage_IT+0x2c>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000025c 	.word	0x2000025c
 8001370:	20000260 	.word	0x20000260
 8001374:	20000258 	.word	0x20000258

08001378 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <_rxMessage_IT+0x24>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2220      	movs	r2, #32
 8001382:	4907      	ldr	r1, [pc, #28]	; (80013a0 <_rxMessage_IT+0x28>)
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fcb3 	bl	8003cf0 <HAL_UART_Receive_IT>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <_rxMessage_IT+0x1e>
		_rxError = true;
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <_rxMessage_IT+0x2c>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000025c 	.word	0x2000025c
 80013a0:	20000280 	.word	0x20000280
 80013a4:	20000259 	.word	0x20000259

080013a8 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3304      	adds	r3, #4
 80013c2:	221c      	movs	r2, #28
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fe00 	bl	8005fcc <memcpy>
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	221c      	movs	r2, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f004 fdea 	bl	8005fcc <memcpy>
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001402:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001404:	f7ff f88e 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800142e:	f004 fda9 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001432:	f7ff f983 	bl	800073c <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   r0, =_estack
 8001438:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001444:	08006a6c 	.word	0x08006a6c
  ldr r2, =_sbss
 8001448:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800144c:	200002b8 	.word	0x200002b8

08001450 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145e:	2003      	movs	r0, #3
 8001460:	f000 f93a 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001464:	f001 fbe2 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8001468:	4603      	mov	r3, r0
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_Init+0x3c>)
 800146c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f810 	bl	8001494 <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	e001      	b.n	8001484 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001480:	f7ff fdde 	bl	8001040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001484:	79fb      	ldrb	r3, [r7, #7]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_InitTick+0x6c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d024      	beq.n	80014f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a8:	f001 fbc0 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_InitTick+0x6c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80014bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f93c 	bl	800173e <HAL_SYSTICK_Config>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10f      	bne.n	80014ec <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d809      	bhi.n	80014e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d2:	2200      	movs	r2, #0
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014da:	f000 f908 	bl	80016ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_InitTick+0x70>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e007      	b.n	80014f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e004      	b.n	80014f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e001      	b.n	80014f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x1c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a03      	ldr	r2, [pc, #12]	; (8001528 <HAL_IncTick+0x20>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000008 	.word	0x20000008
 8001528:	200002a4 	.word	0x200002a4

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <HAL_GetTick+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200002a4 	.word	0x200002a4

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4906      	ldr	r1, [pc, #24]	; (80015d8 <__NVIC_EnableIRQ+0x34>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b8:	f7ff ff90 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff2d 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff44 	bl	8001588 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff92 	bl	8001630 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff61 	bl	80015dc <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff37 	bl	80015a4 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa4 	bl	8001694 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e04f      	b.n	8001808 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d008      	beq.n	8001786 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2204      	movs	r2, #4
 8001778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e040      	b.n	8001808 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 020e 	bic.w	r2, r2, #14
 8001794:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f003 021c 	and.w	r2, r3, #28
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00c      	beq.n	80017f6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d005      	beq.n	8001836 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e047      	b.n	80018c6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020e 	bic.w	r2, r2, #14
 8001844:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 021c 	and.w	r2, r3, #28
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001882:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800189a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
    }
  }
  return status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e140      	b.n	8001b62 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2101      	movs	r1, #1
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8132 	beq.w	8001b5c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d005      	beq.n	8001910 <HAL_GPIO_Init+0x40>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d130      	bne.n	8001972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001946:	2201      	movs	r2, #1
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	f003 0201 	and.w	r2, r3, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b03      	cmp	r3, #3
 800197c:	d017      	beq.n	80019ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d123      	bne.n	8001a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	220f      	movs	r2, #15
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	6939      	ldr	r1, [r7, #16]
 80019fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0203 	and.w	r2, r3, #3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 808c 	beq.w	8001b5c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a44:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_GPIO_Init+0x2b0>)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1bc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a44      	ldr	r2, [pc, #272]	; (8001b84 <HAL_GPIO_Init+0x2b4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1b8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a43      	ldr	r2, [pc, #268]	; (8001b88 <HAL_GPIO_Init+0x2b8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1b4>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1be>
 8001a84:	2307      	movs	r3, #7
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1be>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1be>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9e:	4938      	ldr	r1, [pc, #224]	; (8001b80 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aac:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad0:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001afa:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b06:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b34:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f47f aeb7 	bne.w	80018e0 <HAL_GPIO_Init+0x10>
  }
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	58000800 	.word	0x58000800

08001b90 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	58000400 	.word	0x58000400

08001bac <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <LL_PWR_EnableBootC2+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <LL_PWR_EnableBootC2+0x18>)
 8001bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	58000400 	.word	0x58000400

08001bc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_PWREx_GetVoltageRange+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	58000400 	.word	0x58000400

08001be0 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001be8:	f7ff ffe0 	bl	8001bac <LL_PWR_EnableBootC2>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c04:	d101      	bne.n	8001c0a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	58000400 	.word	0x58000400

08001c18 <LL_RCC_HSE_EnableTcxo>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <LL_RCC_HSE_DisableTcxo>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c62:	d101      	bne.n	8001c68 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <LL_RCC_HSE_Enable>:
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_HSE_Disable>:
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <LL_RCC_HSE_IsReady>:
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cbc:	d101      	bne.n	8001cc2 <LL_RCC_HSE_IsReady+0x18>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_RCC_HSE_IsReady+0x1a>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_RCC_HSI_Enable>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <LL_RCC_HSI_Disable>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <LL_RCC_HSI_IsReady>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d16:	d101      	bne.n	8001d1c <LL_RCC_HSI_IsReady+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_RCC_HSI_IsReady+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_LSE_IsReady>:
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d101      	bne.n	8001d66 <LL_RCC_LSE_IsReady+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_RCC_LSE_IsReady+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <LL_RCC_LSI_Enable>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_LSI_Disable>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <LL_RCC_LSI_IsReady>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d101      	bne.n	8001dc8 <LL_RCC_LSI_IsReady+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_RCC_LSI_IsReady+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_MSI_Enable>:
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6013      	str	r3, [r2, #0]
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_MSI_Disable>:
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6013      	str	r3, [r2, #0]
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_MSI_IsReady>:
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d101      	bne.n	8001e20 <LL_RCC_MSI_IsReady+0x16>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_RCC_MSI_IsReady+0x18>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d101      	bne.n	8001e40 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_MSI_GetRange>:
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_SetSysClkSource>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_GetSysClkSource>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <LL_RCC_SetAHBPrescaler>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <LL_RCC_SetAHB3Prescaler>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f3c:	f023 020f 	bic.w	r2, r3, #15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <LL_RCC_SetAPB1Prescaler>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <LL_RCC_SetAPB2Prescaler>:
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <LL_RCC_GetAHBPrescaler>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <LL_RCC_GetAHB3Prescaler>:
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_GetAPB1Prescaler>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_GetAPB2Prescaler>:
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800204a:	d101      	bne.n	8002050 <LL_RCC_PLL_IsReady+0x18>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <LL_RCC_PLL_IsReady+0x1a>
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0303 	and.w	r3, r3, #3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c6:	d101      	bne.n	80020cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020ea:	d101      	bne.n	80020f0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002102:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210e:	d101      	bne.n	8002114 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002130:	d101      	bne.n	8002136 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002152:	d101      	bne.n	8002158 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e36f      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	f7ff fea6 	bl	8001ec6 <LL_RCC_GetSysClkSource>
 800217a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217c:	f7ff ff8f 	bl	800209e <LL_RCC_PLL_GetMainSource>
 8002180:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80c4 	beq.w	8002318 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3e>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d176      	bne.n	800228a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d173      	bne.n	800228a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e353      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_OscConfig+0x68>
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ca:	e006      	b.n	80021da <HAL_RCC_OscConfig+0x76>
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021da:	4293      	cmp	r3, r2
 80021dc:	d222      	bcs.n	8002224 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fd5a 	bl	8002c9c <RCC_SetFlashLatencyFromMSIRange>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e331      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe2b 	bl	8001e78 <LL_RCC_MSI_SetCalibTrimming>
 8002222:	e021      	b.n	8002268 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe12 	bl	8001e78 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fd1f 	bl	8002c9c <RCC_SetFlashLatencyFromMSIRange>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e2f6      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002268:	f000 fce0 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 800226c:	4603      	mov	r3, r0
 800226e:	4aa7      	ldr	r2, [pc, #668]	; (800250c <HAL_RCC_OscConfig+0x3a8>)
 8002270:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002272:	4ba7      	ldr	r3, [pc, #668]	; (8002510 <HAL_RCC_OscConfig+0x3ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f90c 	bl	8001494 <HAL_InitTick>
 800227c:	4603      	mov	r3, r0
 800227e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d047      	beq.n	8002316 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	e2e5      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d02c      	beq.n	80022ec <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002292:	f7ff fd9e 	bl	8001dd2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002296:	f7ff f949 	bl	800152c <HAL_GetTick>
 800229a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229e:	f7ff f945 	bl	800152c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e2d2      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80022b0:	f7ff fdab 	bl	8001e0a <LL_RCC_MSI_IsReady>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f1      	beq.n	800229e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fdc7 	bl	8001e78 <LL_RCC_MSI_SetCalibTrimming>
 80022ea:	e015      	b.n	8002318 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022ec:	f7ff fd7f 	bl	8001dee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f0:	f7ff f91c 	bl	800152c <HAL_GetTick>
 80022f4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f8:	f7ff f918 	bl	800152c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e2a5      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800230a:	f7ff fd7e 	bl	8001e0a <LL_RCC_MSI_IsReady>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f1      	bne.n	80022f8 <HAL_RCC_OscConfig+0x194>
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002316:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d058      	beq.n	80023d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b08      	cmp	r3, #8
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x1d2>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d108      	bne.n	8002342 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d105      	bne.n	8002342 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d14b      	bne.n	80023d6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e289      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d102      	bne.n	8002368 <HAL_RCC_OscConfig+0x204>
 8002362:	f7ff fc86 	bl	8001c72 <LL_RCC_HSE_Enable>
 8002366:	e00d      	b.n	8002384 <HAL_RCC_OscConfig+0x220>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002370:	d104      	bne.n	800237c <HAL_RCC_OscConfig+0x218>
 8002372:	f7ff fc51 	bl	8001c18 <LL_RCC_HSE_EnableTcxo>
 8002376:	f7ff fc7c 	bl	8001c72 <LL_RCC_HSE_Enable>
 800237a:	e003      	b.n	8002384 <HAL_RCC_OscConfig+0x220>
 800237c:	f7ff fc87 	bl	8001c8e <LL_RCC_HSE_Disable>
 8002380:	f7ff fc58 	bl	8001c34 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff f8ce 	bl	800152c <HAL_GetTick>
 8002390:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff f8ca 	bl	800152c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e257      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80023a6:	f7ff fc80 	bl	8001caa <LL_RCC_HSE_IsReady>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f1      	beq.n	8002394 <HAL_RCC_OscConfig+0x230>
 80023b0:	e011      	b.n	80023d6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff f8bb 	bl	800152c <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ba:	f7ff f8b7 	bl	800152c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e244      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80023cc:	f7ff fc6d 	bl	8001caa <LL_RCC_HSE_IsReady>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f1      	bne.n	80023ba <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d046      	beq.n	8002470 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_OscConfig+0x290>
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d10e      	bne.n	800240c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d10b      	bne.n	800240c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e22a      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fc8e 	bl	8001d26 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800240a:	e031      	b.n	8002470 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d019      	beq.n	8002448 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	f7ff fc5a 	bl	8001ccc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff f888 	bl	800152c <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7ff f884 	bl	800152c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e211      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002432:	f7ff fc67 	bl	8001d04 <LL_RCC_HSI_IsReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f1      	beq.n	8002420 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fc70 	bl	8001d26 <LL_RCC_HSI_SetCalibTrimming>
 8002446:	e013      	b.n	8002470 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002448:	f7ff fc4e 	bl	8001ce8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff f86e 	bl	800152c <HAL_GetTick>
 8002450:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7ff f86a 	bl	800152c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1f7      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002466:	f7ff fc4d 	bl	8001d04 <LL_RCC_HSI_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f1      	bne.n	8002454 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d06e      	beq.n	800255a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d056      	beq.n	8002532 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	429a      	cmp	r2, r3
 800249a:	d031      	beq.n	8002500 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e1d0      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d013      	beq.n	80024e6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80024be:	f7ff fc67 	bl	8001d90 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024c2:	f7ff f833 	bl	800152c <HAL_GetTick>
 80024c6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ca:	f7ff f82f 	bl	800152c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1bc      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80024dc:	f7ff fc68 	bl	8001db0 <LL_RCC_LSI_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f1      	bne.n	80024ca <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	f023 0210 	bic.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002500:	f7ff fc36 	bl	8001d70 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7ff f812 	bl	800152c <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800250a:	e00c      	b.n	8002526 <HAL_RCC_OscConfig+0x3c2>
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7ff f80a 	bl	800152c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b11      	cmp	r3, #17
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e197      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002526:	f7ff fc43 	bl	8001db0 <LL_RCC_LSI_IsReady>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f1      	beq.n	8002514 <HAL_RCC_OscConfig+0x3b0>
 8002530:	e013      	b.n	800255a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002532:	f7ff fc2d 	bl	8001d90 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7fe fff9 	bl	800152c <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe fff5 	bl	800152c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b11      	cmp	r3, #17
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e182      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002550:	f7ff fc2e 	bl	8001db0 <LL_RCC_LSI_IsReady>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f1      	bne.n	800253e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80d8 	beq.w	8002718 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002568:	f7ff fb44 	bl	8001bf4 <LL_PWR_IsEnabledBkUpAccess>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d113      	bne.n	800259a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002572:	f7ff fb0d 	bl	8001b90 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe ffd9 	bl	800152c <HAL_GetTick>
 800257a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe ffd5 	bl	800152c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e162      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002590:	f7ff fb30 	bl	8001bf4 <LL_PWR_IsEnabledBkUpAccess>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f1      	beq.n	800257e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d07b      	beq.n	800269a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b85      	cmp	r3, #133	; 0x85
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe ffb1 	bl	800152c <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe ffa3 	bl	800152c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e12e      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025f8:	f7ff fba9 	bl	8001d4e <LL_RCC_LSE_IsReady>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ef      	beq.n	80025e2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b81      	cmp	r3, #129	; 0x81
 8002608:	d003      	beq.n	8002612 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b85      	cmp	r3, #133	; 0x85
 8002610:	d121      	bne.n	8002656 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe ff8b 	bl	800152c <HAL_GetTick>
 8002616:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe ff7d 	bl	800152c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e108      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ec      	beq.n	800262e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002654:	e060      	b.n	8002718 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7fe ff69 	bl	800152c <HAL_GetTick>
 800265a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe ff5b 	bl	800152c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0e6      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ec      	bne.n	8002672 <HAL_RCC_OscConfig+0x50e>
 8002698:	e03e      	b.n	8002718 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7fe ff47 	bl	800152c <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe ff39 	bl	800152c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0c4      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ec      	bne.n	80026b6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026dc:	f7fe ff26 	bl	800152c <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7fe ff18 	bl	800152c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0a3      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800270e:	f7ff fb1e 	bl	8001d4e <LL_RCC_LSE_IsReady>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ef      	bne.n	80026f8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8099 	beq.w	8002854 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d06c      	beq.n	8002802 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2b02      	cmp	r3, #2
 800272e:	d14b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	f7ff fc74 	bl	800201c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fefa 	bl	800152c <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fef6 	bl	800152c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b0a      	cmp	r3, #10
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e083      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800274e:	f7ff fc73 	bl	8002038 <LL_RCC_PLL_IsReady>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f1      	bne.n	800273c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4b40      	ldr	r3, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x6fc>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002770:	0212      	lsls	r2, r2, #8
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800277e:	4311      	orrs	r1, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002784:	430a      	orrs	r2, r1
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278a:	4313      	orrs	r3, r2
 800278c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278e:	f7ff fc37 	bl	8002000 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fec3 	bl	800152c <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe febf 	bl	800152c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b0a      	cmp	r3, #10
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e04c      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80027bc:	f7ff fc3c 	bl	8002038 <LL_RCC_PLL_IsReady>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f1      	beq.n	80027aa <HAL_RCC_OscConfig+0x646>
 80027c6:	e045      	b.n	8002854 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	f7ff fc28 	bl	800201c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe feae 	bl	800152c <HAL_GetTick>
 80027d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe feaa 	bl	800152c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b0a      	cmp	r3, #10
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e037      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80027e6:	f7ff fc27 	bl	8002038 <LL_RCC_PLL_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f1      	bne.n	80027d4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_OscConfig+0x700>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	60cb      	str	r3, [r1, #12]
 8002800:	e028      	b.n	8002854 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e023      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f003 0203 	and.w	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	429a      	cmp	r2, r3
 8002822:	d115      	bne.n	8002850 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	429a      	cmp	r2, r3
 8002830:	d10e      	bne.n	8002850 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	429a      	cmp	r2, r3
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	11c1808c 	.word	0x11c1808c
 8002864:	eefefffc 	.word	0xeefefffc

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e12c      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b98      	ldr	r3, [pc, #608]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d91b      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b95      	ldr	r3, [pc, #596]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4993      	ldr	r1, [pc, #588]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289a:	f7fe fe47 	bl	800152c <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a2:	f7fe fe43 	bl	800152c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e110      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b4:	4b8a      	ldr	r3, [pc, #552]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d1ef      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fb02 	bl	8001edc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fe28 	bl	800152c <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028e0:	f7fe fe24 	bl	800152c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e0f1      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028f2:	f7ff fbdf 	bl	80020b4 <LL_RCC_IsActiveFlag_HPRE>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f1      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d016      	beq.n	8002936 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff faf8 	bl	8001f02 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002912:	f7fe fe0b 	bl	800152c <HAL_GetTick>
 8002916:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800291a:	f7fe fe07 	bl	800152c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0d4      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800292c:	f7ff fbd3 	bl	80020d6 <LL_RCC_IsActiveFlag_C2HPRE>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f1      	beq.n	800291a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d016      	beq.n	8002970 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff faf0 	bl	8001f2c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800294c:	f7fe fdee 	bl	800152c <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002954:	f7fe fdea 	bl	800152c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0b7      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002966:	f7ff fbc8 	bl	80020fa <LL_RCC_IsActiveFlag_SHDHPRE>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f1      	beq.n	8002954 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d016      	beq.n	80029aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fae9 	bl	8001f58 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002986:	f7fe fdd1 	bl	800152c <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800298e:	f7fe fdcd 	bl	800152c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e09a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029a0:	f7ff fbbd 	bl	800211e <LL_RCC_IsActiveFlag_PPRE1>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f1      	beq.n	800298e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d017      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fade 	bl	8001f7e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029c2:	f7fe fdb3 	bl	800152c <HAL_GetTick>
 80029c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ca:	f7fe fdaf 	bl	800152c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e07c      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029dc:	f7ff fbb0 	bl	8002140 <LL_RCC_IsActiveFlag_PPRE2>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f1      	beq.n	80029ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d043      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d106      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80029fa:	f7ff f956 	bl	8001caa <LL_RCC_HSE_IsReady>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11e      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e066      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a10:	f7ff fb12 	bl	8002038 <LL_RCC_PLL_IsReady>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d113      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e05b      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002a26:	f7ff f9f0 	bl	8001e0a <LL_RCC_MSI_IsReady>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e050      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002a34:	f7ff f966 	bl	8001d04 <LL_RCC_HSI_IsReady>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e049      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fa2a 	bl	8001ea0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fd6e 	bl	800152c <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fe fd6a 	bl	800152c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e035      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	f7ff fa2c 	bl	8001ec6 <LL_RCC_GetSysClkSource>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d1ec      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d21b      	bcs.n	8002ac0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 0207 	bic.w	r2, r3, #7
 8002a90:	4913      	ldr	r1, [pc, #76]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fd48 	bl	800152c <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002aa0:	f7fe fd44 	bl	800152c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x278>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1ef      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ac0:	f000 f8b4 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <HAL_RCC_ClockConfig+0x27c>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_RCC_ClockConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fce0 	bl	8001494 <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	58004000 	.word	0x58004000
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afa:	f7ff f9e4 	bl	8001ec6 <LL_RCC_GetSysClkSource>
 8002afe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b00:	f7ff facd 	bl	800209e <LL_RCC_PLL_GetMainSource>
 8002b04:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x2c>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d139      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d136      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b18:	f7ff f987 	bl	8001e2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d115      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x62>
 8002b22:	f7ff f982 	bl	8001e2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x4e>
 8002b2c:	f7ff f98d 	bl	8001e4a <LL_RCC_MSI_GetRange>
 8002b30:	4603      	mov	r3, r0
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	e005      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x5a>
 8002b3a:	f7ff f991 	bl	8001e60 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	e014      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x8c>
 8002b4e:	f7ff f96c 	bl	8001e2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x7a>
 8002b58:	f7ff f977 	bl	8001e4a <LL_RCC_MSI_GetRange>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	e005      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x86>
 8002b66:	f7ff f97b 	bl	8001e60 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d115      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b84:	e012      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	e00c      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d109      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b98:	f7ff f85a 	bl	8001c50 <LL_RCC_HSE_IsEnabledDiv2>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e001      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002baa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bac:	f7ff f98b 	bl	8001ec6 <LL_RCC_GetSysClkSource>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d12f      	bne.n	8002c16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002bb6:	f7ff fa72 	bl	800209e <LL_RCC_PLL_GetMainSource>
 8002bba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0xde>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d003      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xe4>
 8002bc8:	e00d      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bcc:	60fb      	str	r3, [r7, #12]
        break;
 8002bce:	e00d      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bd0:	f7ff f83e 	bl	8001c50 <LL_RCC_HSE_IsEnabledDiv2>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bdc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002bde:	e005      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002be2:	60fb      	str	r3, [r7, #12]
        break;
 8002be4:	e002      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	60fb      	str	r3, [r7, #12]
        break;
 8002bea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002bec:	f7ff fa35 	bl	800205a <LL_RCC_PLL_GetN>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	fb03 f402 	mul.w	r4, r3, r2
 8002bf8:	f7ff fa46 	bl	8002088 <LL_RCC_PLL_GetDivider>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	3301      	adds	r3, #1
 8002c02:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c06:	f7ff fa34 	bl	8002072 <LL_RCC_PLL_GetR>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	0f5b      	lsrs	r3, r3, #29
 8002c0e:	3301      	adds	r3, #1
 8002c10:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002c16:	697b      	ldr	r3, [r7, #20]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd90      	pop	{r4, r7, pc}
 8002c20:	080069c0 	.word	0x080069c0
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	01e84800 	.word	0x01e84800

08002c2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b598      	push	{r3, r4, r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c30:	f7ff ff5c 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002c34:	4604      	mov	r4, r0
 8002c36:	f7ff f9b5 	bl	8001fa4 <LL_RCC_GetAHBPrescaler>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	4a03      	ldr	r2, [pc, #12]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x24>)
 8002c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd98      	pop	{r3, r4, r7, pc}
 8002c50:	08006960 	.word	0x08006960

08002c54 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b598      	push	{r3, r4, r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c58:	f7ff ffe8 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	f7ff f9b9 	bl	8001fd4 <LL_RCC_GetAPB1Prescaler>
 8002c62:	4603      	mov	r3, r0
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	4a03      	ldr	r2, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd98      	pop	{r3, r4, r7, pc}
 8002c74:	080069a0 	.word	0x080069a0

08002c78 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b598      	push	{r3, r4, r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002c7c:	f7ff ffd6 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c80:	4604      	mov	r4, r0
 8002c82:	f7ff f9b2 	bl	8001fea <LL_RCC_GetAPB2Prescaler>
 8002c86:	4603      	mov	r3, r0
 8002c88:	0adb      	lsrs	r3, r3, #11
 8002c8a:	4a03      	ldr	r2, [pc, #12]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd98      	pop	{r3, r4, r7, pc}
 8002c98:	080069a0 	.word	0x080069a0

08002c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002cb4:	f7ff f981 	bl	8001fba <LL_RCC_GetAHB3Prescaler>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0c9c      	lsrs	r4, r3, #18
 8002cd8:	f7fe ff76 	bl	8001bc8 <HAL_PWREx_GetVoltageRange>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f000 f80b 	bl	8002cfc <RCC_SetFlashLatency>
 8002ce6:	4603      	mov	r3, r0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd90      	pop	{r4, r7, pc}
 8002cf0:	080069c0 	.word	0x080069c0
 8002cf4:	08006960 	.word	0x08006960
 8002cf8:	431bde83 	.word	0x431bde83

08002cfc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08e      	sub	sp, #56	; 0x38
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <RCC_SetFlashLatency+0xf4>)
 8002d08:	f107 0320 	add.w	r3, r7, #32
 8002d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d10:	6018      	str	r0, [r3, #0]
 8002d12:	3304      	adds	r3, #4
 8002d14:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002d16:	4a37      	ldr	r2, [pc, #220]	; (8002df4 <RCC_SetFlashLatency+0xf8>)
 8002d18:	f107 0318 	add.w	r3, r7, #24
 8002d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d20:	6018      	str	r0, [r3, #0]
 8002d22:	3304      	adds	r3, #4
 8002d24:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002d26:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <RCC_SetFlashLatency+0xfc>)
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3c:	d11b      	bne.n	8002d76 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
 8002d42:	e014      	b.n	8002d6e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	3338      	adds	r3, #56	; 0x38
 8002d4a:	443b      	add	r3, r7
 8002d4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d50:	461a      	mov	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d807      	bhi.n	8002d68 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3338      	adds	r3, #56	; 0x38
 8002d5e:	443b      	add	r3, r7
 8002d60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d66:	e021      	b.n	8002dac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d9e7      	bls.n	8002d44 <RCC_SetFlashLatency+0x48>
 8002d74:	e01a      	b.n	8002dac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	e014      	b.n	8002da6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	3338      	adds	r3, #56	; 0x38
 8002d82:	443b      	add	r3, r7
 8002d84:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d807      	bhi.n	8002da0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3338      	adds	r3, #56	; 0x38
 8002d96:	443b      	add	r3, r7
 8002d98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d9e:	e005      	b.n	8002dac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	3301      	adds	r3, #1
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d9e7      	bls.n	8002d7c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <RCC_SetFlashLatency+0x100>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 0207 	bic.w	r2, r3, #7
 8002db4:	4911      	ldr	r1, [pc, #68]	; (8002dfc <RCC_SetFlashLatency+0x100>)
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002dbc:	f7fe fbb6 	bl	800152c <HAL_GetTick>
 8002dc0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002dc2:	e008      	b.n	8002dd6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dc4:	f7fe fbb2 	bl	800152c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e007      	b.n	8002de6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <RCC_SetFlashLatency+0x100>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1ef      	bne.n	8002dc4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3738      	adds	r7, #56	; 0x38
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	08006944 	.word	0x08006944
 8002df4:	0800694c 	.word	0x0800694c
 8002df8:	08006954 	.word	0x08006954
 8002dfc:	58004000 	.word	0x58004000

08002e00 <LL_RCC_LSE_IsReady>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d101      	bne.n	8002e18 <LL_RCC_LSE_IsReady+0x18>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <LL_RCC_LSE_IsReady+0x1a>
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_SetUSARTClockSource>:
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	43db      	mvns	r3, r3
 8002e38:	401a      	ands	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_SetI2SClockSource>:
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_SetLPUARTClockSource>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <LL_RCC_SetI2CClockSource>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_SetLPTIMClockSource>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <LL_RCC_SetRNGClockSource>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_SetADCClockSource>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_SetRTCClockSource>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_GetRTCClockSource>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_ForceBackupDomainReset>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d058      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003008:	f7fe fdc2 	bl	8001b90 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800300c:	f7fe fa8e 	bl	800152c <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003012:	e009      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003014:	f7fe fa8a 	bl	800152c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d902      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	74fb      	strb	r3, [r7, #19]
        break;
 8003026:	e006      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003028:	4b7b      	ldr	r3, [pc, #492]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d1ee      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d13c      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800303c:	f7ff ffa7 	bl	8002f8e <LL_RCC_GetRTCClockSource>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	429a      	cmp	r2, r3
 8003048:	d00f      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003058:	f7ff ffa5 	bl	8002fa6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800305c:	f7ff ffb3 	bl	8002fc6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d014      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fa5a 	bl	800152c <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800307a:	e00b      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe fa56 	bl	800152c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d902      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	74fb      	strb	r3, [r7, #19]
            break;
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003094:	f7ff feb4 	bl	8002e00 <LL_RCC_LSE_IsReady>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d1ee      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff5b 	bl	8002f64 <LL_RCC_SetRTCClockSource>
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
 80030b4:	e001      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fea9 	bl	8002e22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fe9e 	bl	8002e22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fec0 	bl	8002e7c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fee6 	bl	8002ede <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fedb 	bl	8002ede <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fed0 	bl	8002ede <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fea9 	bl	8002ea6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fe9e 	bl	8002ea6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe93 	bl	8002ea6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	d011      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fe5e 	bl	8002e52 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d107      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d010      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fea5 	bl	8002f10 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d011      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fea3 	bl	8002f3a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fc:	d107      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800320e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58000400 	.word	0x58000400

0800321c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d071      	beq.n	8003312 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd ff02 	bl	800104c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RTC_Init+0x100>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b10      	cmp	r3, #16
 800325a:	d051      	beq.n	8003300 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800325c:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_RTC_Init+0x100>)
 800325e:	22ca      	movs	r2, #202	; 0xca
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
 8003262:	4b2e      	ldr	r3, [pc, #184]	; (800331c <HAL_RTC_Init+0x100>)
 8003264:	2253      	movs	r2, #83	; 0x53
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fb87 	bl	800397c <RTC_EnterInitMode>
 800326e:	4603      	mov	r3, r0
 8003270:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d13f      	bne.n	80032f8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RTC_Init+0x100>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_RTC_Init+0x100>)
 800327e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003286:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003288:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RTC_Init+0x100>)
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	4319      	orrs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	430b      	orrs	r3, r1
 800329c:	491f      	ldr	r1, [pc, #124]	; (800331c <HAL_RTC_Init+0x100>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	491b      	ldr	r1, [pc, #108]	; (800331c <HAL_RTC_Init+0x100>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RTC_Init+0x100>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	430b      	orrs	r3, r1
 80032c4:	4915      	ldr	r1, [pc, #84]	; (800331c <HAL_RTC_Init+0x100>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fb8a 	bl	80039e4 <RTC_ExitInitMode>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10e      	bne.n	80032f8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RTC_Init+0x100>)
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a19      	ldr	r1, [r3, #32]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4319      	orrs	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RTC_Init+0x100>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_RTC_Init+0x100>)
 80032fa:	22ff      	movs	r2, #255	; 0xff
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
 80032fe:	e001      	b.n	8003304 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40002800 	.word	0x40002800

08003320 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_RTC_SetTime+0x1a>
 8003336:	2302      	movs	r3, #2
 8003338:	e088      	b.n	800344c <HAL_RTC_SetTime+0x12c>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800334a:	4b42      	ldr	r3, [pc, #264]	; (8003454 <HAL_RTC_SetTime+0x134>)
 800334c:	22ca      	movs	r2, #202	; 0xca
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
 8003350:	4b40      	ldr	r3, [pc, #256]	; (8003454 <HAL_RTC_SetTime+0x134>)
 8003352:	2253      	movs	r2, #83	; 0x53
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fb10 	bl	800397c <RTC_EnterInitMode>
 800335c:	4603      	mov	r3, r0
 800335e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d15e      	bne.n	8003424 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RTC_SetTime+0x134>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003372:	d057      	beq.n	8003424 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d125      	bne.n	80033c6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RTC_SetTime+0x134>)
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fb65 	bl	8003a60 <RTC_ByteToBcd2>
 8003396:	4603      	mov	r3, r0
 8003398:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fb5e 	bl	8003a60 <RTC_ByteToBcd2>
 80033a4:	4603      	mov	r3, r0
 80033a6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80033a8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	789b      	ldrb	r3, [r3, #2]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fb56 	bl	8003a60 <RTC_ByteToBcd2>
 80033b4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033b6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	78db      	ldrb	r3, [r3, #3]
 80033be:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e017      	b.n	80033f6 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <HAL_RTC_SetTime+0x134>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2200      	movs	r2, #0
 80033d6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	785b      	ldrb	r3, [r3, #1]
 80033e2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80033e4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033ea:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	78db      	ldrb	r3, [r3, #3]
 80033f0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80033f6:	4a17      	ldr	r2, [pc, #92]	; (8003454 <HAL_RTC_SetTime+0x134>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80033fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003402:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_RTC_SetTime+0x134>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_RTC_SetTime+0x134>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003410:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_RTC_SetTime+0x134>)
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	430b      	orrs	r3, r1
 800341e:	490d      	ldr	r1, [pc, #52]	; (8003454 <HAL_RTC_SetTime+0x134>)
 8003420:	4313      	orrs	r3, r2
 8003422:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fadd 	bl	80039e4 <RTC_ExitInitMode>
 800342a:	4603      	mov	r3, r0
 800342c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RTC_SetTime+0x134>)
 8003430:	22ff      	movs	r2, #255	; 0xff
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800344a:	7cfb      	ldrb	r3, [r7, #19]
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	40002800 	.word	0x40002800

08003458 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003464:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_RTC_GetTime+0xc0>)
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_RTC_GetTime+0xc0>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003478:	d049      	beq.n	800350e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800347a:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_RTC_GetTime+0xc0>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RTC_GetTime+0xc0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800348e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003492:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	0d9b      	lsrs	r3, r3, #22
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11a      	bne.n	800350e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fade 	bl	8003a9e <RTC_Bcd2ToByte>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fad5 	bl	8003a9e <RTC_Bcd2ToByte>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	789b      	ldrb	r3, [r3, #2]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 facc 	bl	8003a9e <RTC_Bcd2ToByte>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40002800 	.word	0x40002800

0800351c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_RTC_SetDate+0x1a>
 8003532:	2302      	movs	r3, #2
 8003534:	e071      	b.n	800361a <HAL_RTC_SetDate+0xfe>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10e      	bne.n	800356a <HAL_RTC_SetDate+0x4e>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	785b      	ldrb	r3, [r3, #1]
 800355c:	f023 0310 	bic.w	r3, r3, #16
 8003560:	b2db      	uxtb	r3, r3
 8003562:	330a      	adds	r3, #10
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11c      	bne.n	80035aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fa73 	bl	8003a60 <RTC_ByteToBcd2>
 800357a:	4603      	mov	r3, r0
 800357c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fa6c 	bl	8003a60 <RTC_ByteToBcd2>
 8003588:	4603      	mov	r3, r0
 800358a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800358c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	789b      	ldrb	r3, [r3, #2]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fa64 	bl	8003a60 <RTC_ByteToBcd2>
 8003598:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800359a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e00e      	b.n	80035c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	78db      	ldrb	r3, [r3, #3]
 80035ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80035b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80035bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RTC_SetDate+0x108>)
 80035ca:	22ca      	movs	r2, #202	; 0xca
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_RTC_SetDate+0x108>)
 80035d0:	2253      	movs	r2, #83	; 0x53
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f9d1 	bl	800397c <RTC_EnterInitMode>
 80035da:	4603      	mov	r3, r0
 80035dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80035e4:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <HAL_RTC_SetDate+0x108>)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f9f6 	bl	80039e4 <RTC_ExitInitMode>
 80035f8:	4603      	mov	r3, r0
 80035fa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RTC_SetDate+0x108>)
 80035fe:	22ff      	movs	r2, #255	; 0xff
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
}
 800361a:	4618      	mov	r0, r3
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	bf00      	nop
 8003624:	40002800 	.word	0x40002800

08003628 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003634:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RTC_GetDate+0x98>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800363c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003640:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	0b5b      	lsrs	r3, r3, #13
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11a      	bne.n	80036b6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	78db      	ldrb	r3, [r3, #3]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fa0a 	bl	8003a9e <RTC_Bcd2ToByte>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	785b      	ldrb	r3, [r3, #1]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fa01 	bl	8003a9e <RTC_Bcd2ToByte>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	789b      	ldrb	r3, [r3, #2]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f9f8 	bl	8003a9e <RTC_Bcd2ToByte>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40002800 	.word	0x40002800

080036c4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_RTC_SetAlarm_IT+0x1e>
 80036de:	2302      	movs	r3, #2
 80036e0:	e0f3      	b.n	80038ca <HAL_RTC_SetAlarm_IT+0x206>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80036f2:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003702:	d06a      	beq.n	80037da <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d13a      	bne.n	8003780 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f999 	bl	8003a60 <RTC_ByteToBcd2>
 800372e:	4603      	mov	r3, r0
 8003730:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f992 	bl	8003a60 <RTC_ByteToBcd2>
 800373c:	4603      	mov	r3, r0
 800373e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003740:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	789b      	ldrb	r3, [r3, #2]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f98a 	bl	8003a60 <RTC_ByteToBcd2>
 800374c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800374e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003758:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f97c 	bl	8003a60 <RTC_ByteToBcd2>
 8003768:	4603      	mov	r3, r0
 800376a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800376c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003774:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e02c      	b.n	80037da <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003788:	d00d      	beq.n	80037a6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003792:	d008      	beq.n	80037a6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037b2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037b8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	78db      	ldrb	r3, [r3, #3]
 80037be:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037c0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037ca:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037d0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037da:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80037dc:	22ca      	movs	r2, #202	; 0xca
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
 80037e0:	4b3c      	ldr	r3, [pc, #240]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80037e2:	2253      	movs	r2, #83	; 0x53
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d12c      	bne.n	800384a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80037f0:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	4a37      	ldr	r2, [pc, #220]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80037f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037fa:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80037fc:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80037fe:	2201      	movs	r2, #1
 8003800:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003808:	d107      	bne.n	800381a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4930      	ldr	r1, [pc, #192]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003814:	4313      	orrs	r3, r2
 8003816:	644b      	str	r3, [r1, #68]	; 0x44
 8003818:	e006      	b.n	8003828 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003820:	4a2c      	ldr	r2, [pc, #176]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003828:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003842:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003846:	6193      	str	r3, [r2, #24]
 8003848:	e02b      	b.n	80038a2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003850:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003854:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003856:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003858:	2202      	movs	r2, #2
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003862:	d107      	bne.n	8003874 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4919      	ldr	r1, [pc, #100]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800386e:	4313      	orrs	r3, r2
 8003870:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003872:	e006      	b.n	8003882 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003882:	4a14      	ldr	r2, [pc, #80]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800389c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80038a0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_RTC_SetAlarm_IT+0x214>)
 80038a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a8:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <HAL_RTC_SetAlarm_IT+0x214>)
 80038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80038b4:	22ff      	movs	r2, #255	; 0xff
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40002800 	.word	0x40002800
 80038d8:	58000800 	.word	0x58000800

080038dc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_RTC_AlarmIRQHandler+0x50>)
 80038e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_RTC_AlarmIRQHandler+0x50>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fc fef7 	bl	80006f4 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003912:	2202      	movs	r2, #2
 8003914:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8dc 	bl	8003ad4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40002800 	.word	0x40002800

08003930 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <HAL_RTC_WaitForSynchro+0x48>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <HAL_RTC_WaitForSynchro+0x48>)
 800393e:	f023 0320 	bic.w	r3, r3, #32
 8003942:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003944:	f7fd fdf2 	bl	800152c <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800394a:	e009      	b.n	8003960 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800394c:	f7fd fdee 	bl	800152c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800395a:	d901      	bls.n	8003960 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e006      	b.n	800396e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RTC_WaitForSynchro+0x48>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40002800 	.word	0x40002800

0800397c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003988:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <RTC_EnterInitMode+0x64>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d120      	bne.n	80039d6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <RTC_EnterInitMode+0x64>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <RTC_EnterInitMode+0x64>)
 800399a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80039a0:	f7fd fdc4 	bl	800152c <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039a6:	e00d      	b.n	80039c4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80039a8:	f7fd fdc0 	bl	800152c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b6:	d905      	bls.n	80039c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2203      	movs	r2, #3
 80039c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <RTC_EnterInitMode+0x64>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <RTC_EnterInitMode+0x5a>
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d1e8      	bne.n	80039a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40002800 	.word	0x40002800

080039e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <RTC_ExitInitMode+0x78>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <RTC_ExitInitMode+0x78>)
 80039f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039fa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <RTC_ExitInitMode+0x78>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10c      	bne.n	8003a22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff91 	bl	8003930 <HAL_RTC_WaitForSynchro>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01e      	beq.n	8003a52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2203      	movs	r2, #3
 8003a18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e017      	b.n	8003a52 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <RTC_ExitInitMode+0x78>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <RTC_ExitInitMode+0x78>)
 8003a28:	f023 0320 	bic.w	r3, r3, #32
 8003a2c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff7e 	bl	8003930 <HAL_RTC_WaitForSynchro>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <RTC_ExitInitMode+0x78>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <RTC_ExitInitMode+0x78>)
 8003a4c:	f043 0320 	orr.w	r3, r3, #32
 8003a50:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40002800 	.word	0x40002800

08003a60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003a72:	e005      	b.n	8003a80 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003a7a:	7afb      	ldrb	r3, [r7, #11]
 8003a7c:	3b0a      	subs	r3, #10
 8003a7e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	d8f6      	bhi.n	8003a74 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	b2db      	uxtb	r3, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <LL_RCC_GetUSARTClockSource>:
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	401a      	ands	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	4313      	orrs	r3, r2
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <LL_RCC_GetLPUARTClockSource>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4013      	ands	r3, r2
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e042      	b.n	8003bc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fd fab1 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2224      	movs	r2, #36	; 0x24
 8003b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fc3c 	bl	80043e8 <UART_SetConfig>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e022      	b.n	8003bc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fea4 	bl	80048d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 ff2a 	bl	8004a12 <UART_CheckIdleState>
 8003bbe:	4603      	mov	r3, r0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b091      	sub	sp, #68	; 0x44
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d178      	bne.n	8003cd2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_UART_Transmit_IT+0x24>
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e071      	b.n	8003cd4 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2221      	movs	r2, #33	; 0x21
 8003c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c24:	d12a      	bne.n	8003c7c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2e:	d107      	bne.n	8003c40 <HAL_UART_Transmit_IT+0x78>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <HAL_UART_Transmit_IT+0x118>)
 8003c3c:	679a      	str	r2, [r3, #120]	; 0x78
 8003c3e:	e002      	b.n	8003c46 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_UART_Transmit_IT+0x11c>)
 8003c44:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c66:	637a      	str	r2, [r7, #52]	; 0x34
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <HAL_UART_Transmit_IT+0x7e>
 8003c7a:	e028      	b.n	8003cce <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c84:	d107      	bne.n	8003c96 <HAL_UART_Transmit_IT+0xce>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_UART_Transmit_IT+0x120>)
 8003c92:	679a      	str	r2, [r3, #120]	; 0x78
 8003c94:	e002      	b.n	8003c9c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_UART_Transmit_IT+0x124>)
 8003c9a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	69f9      	ldr	r1, [r7, #28]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e6      	bne.n	8003c9c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3744      	adds	r7, #68	; 0x44
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	080051cb 	.word	0x080051cb
 8003ce4:	080050ed 	.word	0x080050ed
 8003ce8:	0800502d 	.word	0x0800502d
 8003cec:	08004f77 	.word	0x08004f77

08003cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d137      	bne.n	8003d78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_UART_Receive_IT+0x24>
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e030      	b.n	8003d7a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_UART_Receive_IT+0x94>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d01f      	beq.n	8003d68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d018      	beq.n	8003d68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	613b      	str	r3, [r7, #16]
   return(result);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	623b      	str	r3, [r7, #32]
 8003d56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	69f9      	ldr	r1, [r7, #28]
 8003d5a:	6a3a      	ldr	r2, [r7, #32]
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e6      	bne.n	8003d36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 ff66 	bl	8004c40 <UART_Start_Receive_IT>
 8003d74:	4603      	mov	r3, r0
 8003d76:	e000      	b.n	8003d7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3728      	adds	r7, #40	; 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40008000 	.word	0x40008000

08003d88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0ba      	sub	sp, #232	; 0xe8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003db2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003db6:	4013      	ands	r3, r2
 8003db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003dbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11b      	bne.n	8003dfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 82e3 	beq.w	80043b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
      }
      return;
 8003dfa:	e2dd      	b.n	80043b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8123 	beq.w	800404c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e0a:	4b8d      	ldr	r3, [pc, #564]	; (8004040 <HAL_UART_IRQHandler+0x2b8>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e16:	4b8b      	ldr	r3, [pc, #556]	; (8004044 <HAL_UART_IRQHandler+0x2bc>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8116 	beq.w	800404c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d011      	beq.n	8003e50 <HAL_UART_IRQHandler+0xc8>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d011      	beq.n	8003e80 <HAL_UART_IRQHandler+0xf8>
 8003e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d011      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x128>
 8003e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f043 0202 	orr.w	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ec8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003ecc:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_UART_IRQHandler+0x2b8>)
 8003ece:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f043 0208 	orr.w	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <HAL_UART_IRQHandler+0x196>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8249 	beq.w	80043bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d013      	beq.n	8003f5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d054      	beq.n	800402c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 ff7c 	bl	8004e80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d146      	bne.n	8004024 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1d9      	bne.n	8003f96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d017      	beq.n	800401c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <HAL_UART_IRQHandler+0x2c0>)
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fd fc08 	bl	8001812 <HAL_DMA_Abort_IT>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d019      	beq.n	800403c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004016:	4610      	mov	r0, r2
 8004018:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401a:	e00f      	b.n	800403c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7fc fb21 	bl	8000664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004022:	e00b      	b.n	800403c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fc fb1d 	bl	8000664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402a:	e007      	b.n	800403c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fc fb19 	bl	8000664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800403a:	e1bf      	b.n	80043bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	bf00      	nop
    return;
 800403e:	e1bd      	b.n	80043bc <HAL_UART_IRQHandler+0x634>
 8004040:	10000001 	.word	0x10000001
 8004044:	04000120 	.word	0x04000120
 8004048:	08004f4b 	.word	0x08004f4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 8153 	bne.w	80042fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 814c 	beq.w	80042fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8145 	beq.w	80042fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2210      	movs	r2, #16
 8004078:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	f040 80bb 	bne.w	8004200 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004098:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 818f 	beq.w	80043c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f080 8187 	bcs.w	80043c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 8087 	bne.w	80041de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004106:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1da      	bne.n	80040d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3308      	adds	r3, #8
 8004120:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800412a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800413e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004142:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004146:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e1      	bne.n	800411a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3308      	adds	r3, #8
 800415c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3308      	adds	r3, #8
 8004176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800417a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800417c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e3      	bne.n	8004156 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041be:	65bb      	str	r3, [r7, #88]	; 0x58
 80041c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e4      	bne.n	800419c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fd fabc 	bl	8001756 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f8e9 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041fe:	e0df      	b.n	80043c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800420c:	b29b      	uxth	r3, r3
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80d1 	beq.w	80043c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80cc 	beq.w	80043c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800423a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
 8004250:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e4      	bne.n	800422c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3308      	adds	r3, #8
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	623b      	str	r3, [r7, #32]
   return(result);
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800428a:	633a      	str	r2, [r7, #48]	; 0x30
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e1      	bne.n	8004262 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	617b      	str	r3, [r7, #20]
   return(result);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e4      	bne.n	80042b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f86b 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042fa:	e063      	b.n	80043c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <HAL_UART_IRQHandler+0x59e>
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800430c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800431c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f001 fd0e 	bl	8005d40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004324:	e051      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d014      	beq.n	800435c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800433e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800434e:	2b00      	cmp	r3, #0
 8004350:	d03a      	beq.n	80043c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4798      	blx	r3
    }
    return;
 800435a:	e035      	b.n	80043c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800435c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <HAL_UART_IRQHandler+0x5f4>
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 ff9c 	bl	80052b2 <UART_EndTransmit_IT>
    return;
 800437a:	e026      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_UART_IRQHandler+0x614>
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 fce5 	bl	8005d64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800439a:	e016      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <HAL_UART_IRQHandler+0x642>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	da0c      	bge.n	80043ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f001 fcce 	bl	8005d52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043b6:	e008      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
      return;
 80043b8:	bf00      	nop
 80043ba:	e006      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
    return;
 80043bc:	bf00      	nop
 80043be:	e004      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
      return;
 80043c0:	bf00      	nop
 80043c2:	e002      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
      return;
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <HAL_UART_IRQHandler+0x642>
    return;
 80043c8:	bf00      	nop
  }
}
 80043ca:	37e8      	adds	r7, #232	; 0xe8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
	...

080043e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b08c      	sub	sp, #48	; 0x30
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	431a      	orrs	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	431a      	orrs	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4313      	orrs	r3, r2
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b94      	ldr	r3, [pc, #592]	; (8004668 <UART_SetConfig+0x280>)
 8004418:	4013      	ands	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004420:	430b      	orrs	r3, r1
 8004422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a89      	ldr	r2, [pc, #548]	; (800466c <UART_SetConfig+0x284>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004450:	4313      	orrs	r3, r2
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800445e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004468:	430b      	orrs	r3, r1
 800446a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	f023 010f 	bic.w	r1, r3, #15
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7a      	ldr	r2, [pc, #488]	; (8004670 <UART_SetConfig+0x288>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d127      	bne.n	80044dc <UART_SetConfig+0xf4>
 800448c:	2003      	movs	r0, #3
 800448e:	f7ff fb2a 	bl	8003ae6 <LL_RCC_GetUSARTClockSource>
 8004492:	4603      	mov	r3, r0
 8004494:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004498:	2b03      	cmp	r3, #3
 800449a:	d81b      	bhi.n	80044d4 <UART_SetConfig+0xec>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0xbc>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044c5 	.word	0x080044c5
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044cd 	.word	0x080044cd
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ba:	e080      	b.n	80045be <UART_SetConfig+0x1d6>
 80044bc:	2302      	movs	r3, #2
 80044be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c2:	e07c      	b.n	80045be <UART_SetConfig+0x1d6>
 80044c4:	2304      	movs	r3, #4
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ca:	e078      	b.n	80045be <UART_SetConfig+0x1d6>
 80044cc:	2308      	movs	r3, #8
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d2:	e074      	b.n	80045be <UART_SetConfig+0x1d6>
 80044d4:	2310      	movs	r3, #16
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044da:	e070      	b.n	80045be <UART_SetConfig+0x1d6>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a64      	ldr	r2, [pc, #400]	; (8004674 <UART_SetConfig+0x28c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d138      	bne.n	8004558 <UART_SetConfig+0x170>
 80044e6:	200c      	movs	r0, #12
 80044e8:	f7ff fafd 	bl	8003ae6 <LL_RCC_GetUSARTClockSource>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d82c      	bhi.n	8004550 <UART_SetConfig+0x168>
 80044f6:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <UART_SetConfig+0x114>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	08004531 	.word	0x08004531
 8004500:	08004551 	.word	0x08004551
 8004504:	08004551 	.word	0x08004551
 8004508:	08004551 	.word	0x08004551
 800450c:	08004541 	.word	0x08004541
 8004510:	08004551 	.word	0x08004551
 8004514:	08004551 	.word	0x08004551
 8004518:	08004551 	.word	0x08004551
 800451c:	08004539 	.word	0x08004539
 8004520:	08004551 	.word	0x08004551
 8004524:	08004551 	.word	0x08004551
 8004528:	08004551 	.word	0x08004551
 800452c:	08004549 	.word	0x08004549
 8004530:	2300      	movs	r3, #0
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004536:	e042      	b.n	80045be <UART_SetConfig+0x1d6>
 8004538:	2302      	movs	r3, #2
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453e:	e03e      	b.n	80045be <UART_SetConfig+0x1d6>
 8004540:	2304      	movs	r3, #4
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004546:	e03a      	b.n	80045be <UART_SetConfig+0x1d6>
 8004548:	2308      	movs	r3, #8
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454e:	e036      	b.n	80045be <UART_SetConfig+0x1d6>
 8004550:	2310      	movs	r3, #16
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004556:	e032      	b.n	80045be <UART_SetConfig+0x1d6>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a43      	ldr	r2, [pc, #268]	; (800466c <UART_SetConfig+0x284>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d12a      	bne.n	80045b8 <UART_SetConfig+0x1d0>
 8004562:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004566:	f7ff fad0 	bl	8003b0a <LL_RCC_GetLPUARTClockSource>
 800456a:	4603      	mov	r3, r0
 800456c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004570:	d01a      	beq.n	80045a8 <UART_SetConfig+0x1c0>
 8004572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004576:	d81b      	bhi.n	80045b0 <UART_SetConfig+0x1c8>
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457c:	d00c      	beq.n	8004598 <UART_SetConfig+0x1b0>
 800457e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004582:	d815      	bhi.n	80045b0 <UART_SetConfig+0x1c8>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <UART_SetConfig+0x1a8>
 8004588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458c:	d008      	beq.n	80045a0 <UART_SetConfig+0x1b8>
 800458e:	e00f      	b.n	80045b0 <UART_SetConfig+0x1c8>
 8004590:	2300      	movs	r3, #0
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004596:	e012      	b.n	80045be <UART_SetConfig+0x1d6>
 8004598:	2302      	movs	r3, #2
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459e:	e00e      	b.n	80045be <UART_SetConfig+0x1d6>
 80045a0:	2304      	movs	r3, #4
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a6:	e00a      	b.n	80045be <UART_SetConfig+0x1d6>
 80045a8:	2308      	movs	r3, #8
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ae:	e006      	b.n	80045be <UART_SetConfig+0x1d6>
 80045b0:	2310      	movs	r3, #16
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b6:	e002      	b.n	80045be <UART_SetConfig+0x1d6>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2a      	ldr	r2, [pc, #168]	; (800466c <UART_SetConfig+0x284>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f040 80a4 	bne.w	8004712 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d823      	bhi.n	800461a <UART_SetConfig+0x232>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0x1f0>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800460b 	.word	0x0800460b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800461b 	.word	0x0800461b
 80045f8:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe fb2a 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8004600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <UART_SetConfig+0x290>)
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe fa6f 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8137 	beq.w	800489c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	4a12      	ldr	r2, [pc, #72]	; (800467c <UART_SetConfig+0x294>)
 8004634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004638:	461a      	mov	r2, r3
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004640:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	429a      	cmp	r2, r3
 8004650:	d305      	bcc.n	800465e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	429a      	cmp	r2, r3
 800465c:	d910      	bls.n	8004680 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004664:	e11a      	b.n	800489c <UART_SetConfig+0x4b4>
 8004666:	bf00      	nop
 8004668:	cfff69f3 	.word	0xcfff69f3
 800466c:	40008000 	.word	0x40008000
 8004670:	40013800 	.word	0x40013800
 8004674:	40004400 	.word	0x40004400
 8004678:	00f42400 	.word	0x00f42400
 800467c:	08006a00 	.word	0x08006a00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	2200      	movs	r2, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	60fa      	str	r2, [r7, #12]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	4a8e      	ldr	r2, [pc, #568]	; (80048c8 <UART_SetConfig+0x4e0>)
 800468e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004692:	b29b      	uxth	r3, r3
 8004694:	2200      	movs	r2, #0
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046a2:	f7fb fdbd 	bl	8000220 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4610      	mov	r0, r2
 80046ac:	4619      	mov	r1, r3
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	020b      	lsls	r3, r1, #8
 80046b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046bc:	0202      	lsls	r2, r0, #8
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	6849      	ldr	r1, [r1, #4]
 80046c2:	0849      	lsrs	r1, r1, #1
 80046c4:	2000      	movs	r0, #0
 80046c6:	460c      	mov	r4, r1
 80046c8:	4605      	mov	r5, r0
 80046ca:	eb12 0804 	adds.w	r8, r2, r4
 80046ce:	eb43 0905 	adc.w	r9, r3, r5
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	469a      	mov	sl, r3
 80046da:	4693      	mov	fp, r2
 80046dc:	4652      	mov	r2, sl
 80046de:	465b      	mov	r3, fp
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fb fd9c 	bl	8000220 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4613      	mov	r3, r2
 80046ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046f6:	d308      	bcc.n	800470a <UART_SetConfig+0x322>
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fe:	d204      	bcs.n	800470a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e0c8      	b.n	800489c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004710:	e0c4      	b.n	800489c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	d167      	bne.n	80047ec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800471c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004720:	2b08      	cmp	r3, #8
 8004722:	d828      	bhi.n	8004776 <UART_SetConfig+0x38e>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0x344>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004751 	.word	0x08004751
 8004730:	08004759 	.word	0x08004759
 8004734:	08004761 	.word	0x08004761
 8004738:	08004777 	.word	0x08004777
 800473c:	08004767 	.word	0x08004767
 8004740:	08004777 	.word	0x08004777
 8004744:	08004777 	.word	0x08004777
 8004748:	08004777 	.word	0x08004777
 800474c:	0800476f 	.word	0x0800476f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004750:	f7fe fa80 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004756:	e014      	b.n	8004782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004758:	f7fe fa8e 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800475e:	e010      	b.n	8004782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004760:	4b5a      	ldr	r3, [pc, #360]	; (80048cc <UART_SetConfig+0x4e4>)
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004764:	e00d      	b.n	8004782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004766:	f7fe f9c1 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800476c:	e009      	b.n	8004782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800476e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004774:	e005      	b.n	8004782 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8089 	beq.w	800489c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	4a4e      	ldr	r2, [pc, #312]	; (80048c8 <UART_SetConfig+0x4e0>)
 8004790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004794:	461a      	mov	r2, r3
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	fbb3 f3f2 	udiv	r3, r3, r2
 800479c:	005a      	lsls	r2, r3, #1
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	441a      	add	r2, r3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	d916      	bls.n	80047e4 <UART_SetConfig+0x3fc>
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d212      	bcs.n	80047e4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f023 030f 	bic.w	r3, r3, #15
 80047c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	8bfb      	ldrh	r3, [r7, #30]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	8bfa      	ldrh	r2, [r7, #30]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	e05b      	b.n	800489c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047ea:	e057      	b.n	800489c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d828      	bhi.n	8004846 <UART_SetConfig+0x45e>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x414>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004829 	.word	0x08004829
 8004804:	08004831 	.word	0x08004831
 8004808:	08004847 	.word	0x08004847
 800480c:	08004837 	.word	0x08004837
 8004810:	08004847 	.word	0x08004847
 8004814:	08004847 	.word	0x08004847
 8004818:	08004847 	.word	0x08004847
 800481c:	0800483f 	.word	0x0800483f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe fa18 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8004824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004826:	e014      	b.n	8004852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe fa26 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <UART_SetConfig+0x4e4>)
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004834:	e00d      	b.n	8004852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004836:	f7fe f959 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800483c:	e009      	b.n	8004852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004844:	e005      	b.n	8004852 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004850:	bf00      	nop
    }

    if (pclk != 0U)
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d021      	beq.n	800489c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <UART_SetConfig+0x4e0>)
 800485e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004862:	461a      	mov	r2, r3
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	fbb3 f2f2 	udiv	r2, r3, r2
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	441a      	add	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d909      	bls.n	8004896 <UART_SetConfig+0x4ae>
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d205      	bcs.n	8004896 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	b29a      	uxth	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e002      	b.n	800489c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2201      	movs	r2, #1
 80048a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80048b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3730      	adds	r7, #48	; 0x30
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	08006a00 	.word	0x08006a00
 80048cc:	00f42400 	.word	0x00f42400

080048d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ce:	d10a      	bne.n	80049e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af02      	add	r7, sp, #8
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a22:	f7fc fd83 	bl	800152c <HAL_GetTick>
 8004a26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d10e      	bne.n	8004a54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f832 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e028      	b.n	8004aa6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d10e      	bne.n	8004a80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f81c 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e012      	b.n	8004aa6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b09c      	sub	sp, #112	; 0x70
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abe:	e0a9      	b.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac6:	f000 80a5 	beq.w	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fc fd2f 	bl	800152c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d140      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004af4:	667b      	str	r3, [r7, #100]	; 0x64
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e6      	bne.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	663b      	str	r3, [r7, #96]	; 0x60
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3308      	adds	r3, #8
 8004b30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b32:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e069      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d051      	beq.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7e:	d149      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8004baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e6      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	613b      	str	r3, [r7, #16]
   return(result);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bdc:	623a      	str	r2, [r7, #32]
 8004bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	69f9      	ldr	r1, [r7, #28]
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e010      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	f43f af46 	beq.w	8004ac0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3770      	adds	r7, #112	; 0x70
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b0a3      	sub	sp, #140	; 0x8c
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d10e      	bne.n	8004c92 <UART_Start_Receive_IT+0x52>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <UART_Start_Receive_IT+0x48>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c86:	e02d      	b.n	8004ce4 <UART_Start_Receive_IT+0xa4>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	22ff      	movs	r2, #255	; 0xff
 8004c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c90:	e028      	b.n	8004ce4 <UART_Start_Receive_IT+0xa4>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <UART_Start_Receive_IT+0x76>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <UART_Start_Receive_IT+0x6c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	22ff      	movs	r2, #255	; 0xff
 8004ca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004caa:	e01b      	b.n	8004ce4 <UART_Start_Receive_IT+0xa4>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	227f      	movs	r2, #127	; 0x7f
 8004cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cb4:	e016      	b.n	8004ce4 <UART_Start_Receive_IT+0xa4>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cbe:	d10d      	bne.n	8004cdc <UART_Start_Receive_IT+0x9c>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <UART_Start_Receive_IT+0x92>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	227f      	movs	r2, #127	; 0x7f
 8004ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cd0:	e008      	b.n	8004ce4 <UART_Start_Receive_IT+0xa4>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	223f      	movs	r2, #63	; 0x3f
 8004cd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cda:	e003      	b.n	8004ce4 <UART_Start_Receive_IT+0xa4>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2222      	movs	r2, #34	; 0x22
 8004cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004d18:	673a      	str	r2, [r7, #112]	; 0x70
 8004d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004d1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e3      	bne.n	8004cf4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d34:	d14f      	bne.n	8004dd6 <UART_Start_Receive_IT+0x196>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d3c:	88fa      	ldrh	r2, [r7, #6]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d349      	bcc.n	8004dd6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	d107      	bne.n	8004d5c <UART_Start_Receive_IT+0x11c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a46      	ldr	r2, [pc, #280]	; (8004e70 <UART_Start_Receive_IT+0x230>)
 8004d58:	675a      	str	r2, [r3, #116]	; 0x74
 8004d5a:	e002      	b.n	8004d62 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a45      	ldr	r2, [pc, #276]	; (8004e74 <UART_Start_Receive_IT+0x234>)
 8004d60:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01a      	beq.n	8004da0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e4      	bne.n	8004d6a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004dc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <UART_Start_Receive_IT+0x160>
 8004dd4:	e046      	b.n	8004e64 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d107      	bne.n	8004df0 <UART_Start_Receive_IT+0x1b0>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <UART_Start_Receive_IT+0x238>)
 8004dec:	675a      	str	r2, [r3, #116]	; 0x74
 8004dee:	e002      	b.n	8004df6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <UART_Start_Receive_IT+0x23c>)
 8004df4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d019      	beq.n	8004e32 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e12:	677b      	str	r3, [r7, #116]	; 0x74
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e6      	bne.n	8004dfe <UART_Start_Receive_IT+0x1be>
 8004e30:	e018      	b.n	8004e64 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f043 0320 	orr.w	r3, r3, #32
 8004e46:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e50:	623b      	str	r3, [r7, #32]
 8004e52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	69f9      	ldr	r1, [r7, #28]
 8004e56:	6a3a      	ldr	r2, [r7, #32]
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e6      	bne.n	8004e32 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	378c      	adds	r7, #140	; 0x8c
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	080059d9 	.word	0x080059d9
 8004e74:	08005679 	.word	0x08005679
 8004e78:	080054c1 	.word	0x080054c1
 8004e7c:	08005309 	.word	0x08005309

08004e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b095      	sub	sp, #84	; 0x54
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e6      	bne.n	8004e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e3      	bne.n	8004eba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d118      	bne.n	8004f2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f023 0310 	bic.w	r3, r3, #16
 8004f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6979      	ldr	r1, [r7, #20]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	613b      	str	r3, [r7, #16]
   return(result);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e6      	bne.n	8004efa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f40:	bf00      	nop
 8004f42:	3754      	adds	r7, #84	; 0x54
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7fb fb7b 	bl	8000664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b08f      	sub	sp, #60	; 0x3c
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	2b21      	cmp	r3, #33	; 0x21
 8004f86:	d14c      	bne.n	8005022 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d132      	bne.n	8004ffa <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ff8:	e013      	b.n	8005022 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005022:	bf00      	nop
 8005024:	373c      	adds	r7, #60	; 0x3c
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b091      	sub	sp, #68	; 0x44
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	2b21      	cmp	r3, #33	; 0x21
 800503c:	d151      	bne.n	80050e2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d132      	bne.n	80050b0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	623b      	str	r3, [r7, #32]
   return(result);
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	633b      	str	r3, [r7, #48]	; 0x30
 800506a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800506e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	60fb      	str	r3, [r7, #12]
   return(result);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	69b9      	ldr	r1, [r7, #24]
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	617b      	str	r3, [r7, #20]
   return(result);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e6      	bne.n	800507c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80050ae:	e018      	b.n	80050e2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80050e2:	bf00      	nop
 80050e4:	3744      	adds	r7, #68	; 0x44
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b091      	sub	sp, #68	; 0x44
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	2b21      	cmp	r3, #33	; 0x21
 80050fc:	d160      	bne.n	80051c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005104:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005106:	e057      	b.n	80051b8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d133      	bne.n	800517c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	623b      	str	r3, [r7, #32]
   return(result);
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005134:	633a      	str	r2, [r7, #48]	; 0x30
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800513a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60fb      	str	r3, [r7, #12]
   return(result);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	69b9      	ldr	r1, [r7, #24]
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	617b      	str	r3, [r7, #20]
   return(result);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800517a:	e021      	b.n	80051c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d013      	beq.n	80051b2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518e:	781a      	ldrb	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80051b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051b4:	3b01      	subs	r3, #1
 80051b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1a4      	bne.n	8005108 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80051be:	e7ff      	b.n	80051c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80051c0:	bf00      	nop
 80051c2:	3744      	adds	r7, #68	; 0x44
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b091      	sub	sp, #68	; 0x44
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	2b21      	cmp	r3, #33	; 0x21
 80051da:	d165      	bne.n	80052a8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051e4:	e05c      	b.n	80052a0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d133      	bne.n	800525a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3308      	adds	r3, #8
 80051f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	61fb      	str	r3, [r7, #28]
   return(result);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e5      	bne.n	80051f2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	60bb      	str	r3, [r7, #8]
   return(result);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800523a:	633b      	str	r3, [r7, #48]	; 0x30
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6979      	ldr	r1, [r7, #20]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	613b      	str	r3, [r7, #16]
   return(result);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e6      	bne.n	8005226 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005258:	e026      	b.n	80052a8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d018      	beq.n	800529a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800527c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005282:	1c9a      	adds	r2, r3, #2
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800529a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800529c:	3b01      	subs	r3, #1
 800529e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80052a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d19f      	bne.n	80051e6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80052a6:	e7ff      	b.n	80052a8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80052a8:	bf00      	nop
 80052aa:	3744      	adds	r7, #68	; 0x44
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b088      	sub	sp, #32
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	613b      	str	r3, [r7, #16]
   return(result);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e6      	bne.n	80052ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb f9ca 	bl	8000694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005300:	bf00      	nop
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b09c      	sub	sp, #112	; 0x70
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005316:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005320:	2b22      	cmp	r3, #34	; 0x22
 8005322:	f040 80be 	bne.w	80054a2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005330:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005334:	b2d9      	uxtb	r1, r3
 8005336:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800533a:	b2da      	uxtb	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005340:	400a      	ands	r2, r1
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 80a1 	bne.w	80054b2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005384:	66bb      	str	r3, [r7, #104]	; 0x68
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800538e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005390:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e6      	bne.n	8005370 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053c2:	647a      	str	r2, [r7, #68]	; 0x44
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e5      	bne.n	80053a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a33      	ldr	r2, [pc, #204]	; (80054bc <UART_RxISR_8BIT+0x1b4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d01f      	beq.n	8005434 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	623b      	str	r3, [r7, #32]
   return(result);
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005416:	663b      	str	r3, [r7, #96]	; 0x60
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005420:	633b      	str	r3, [r7, #48]	; 0x30
 8005422:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d12e      	bne.n	800549a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0310 	bic.w	r3, r3, #16
 8005456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	617b      	str	r3, [r7, #20]
   return(result);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e6      	bne.n	8005442 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d103      	bne.n	800548a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2210      	movs	r2, #16
 8005488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe ff9c 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005498:	e00b      	b.n	80054b2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fb f912 	bl	80006c4 <HAL_UART_RxCpltCallback>
}
 80054a0:	e007      	b.n	80054b2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0208 	orr.w	r2, r2, #8
 80054b0:	619a      	str	r2, [r3, #24]
}
 80054b2:	bf00      	nop
 80054b4:	3770      	adds	r7, #112	; 0x70
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40008000 	.word	0x40008000

080054c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b09c      	sub	sp, #112	; 0x70
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d8:	2b22      	cmp	r3, #34	; 0x22
 80054da:	f040 80be 	bne.w	800565a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80054ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80054f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80054f6:	4013      	ands	r3, r2
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	1c9a      	adds	r2, r3, #2
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 80a1 	bne.w	800566a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800553c:	667b      	str	r3, [r7, #100]	; 0x64
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005546:	657b      	str	r3, [r7, #84]	; 0x54
 8005548:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800554c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e6      	bne.n	8005528 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	663b      	str	r3, [r7, #96]	; 0x60
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800557a:	643a      	str	r2, [r7, #64]	; 0x40
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e5      	bne.n	800555a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a33      	ldr	r2, [pc, #204]	; (8005674 <UART_RxISR_16BIT+0x1b4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01f      	beq.n	80055ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d018      	beq.n	80055ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055da:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d12e      	bne.n	8005652 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	60bb      	str	r3, [r7, #8]
   return(result);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f023 0310 	bic.w	r3, r3, #16
 800560e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6979      	ldr	r1, [r7, #20]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	613b      	str	r3, [r7, #16]
   return(result);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b10      	cmp	r3, #16
 8005638:	d103      	bne.n	8005642 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2210      	movs	r2, #16
 8005640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fe fec0 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005650:	e00b      	b.n	800566a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb f836 	bl	80006c4 <HAL_UART_RxCpltCallback>
}
 8005658:	e007      	b.n	800566a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0208 	orr.w	r2, r2, #8
 8005668:	619a      	str	r2, [r3, #24]
}
 800566a:	bf00      	nop
 800566c:	3770      	adds	r7, #112	; 0x70
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40008000 	.word	0x40008000

08005678 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b0ac      	sub	sp, #176	; 0xb0
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005686:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ae:	2b22      	cmp	r3, #34	; 0x22
 80056b0:	f040 8182 	bne.w	80059b8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056ba:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056be:	e125      	b.n	800590c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056ca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80056ce:	b2d9      	uxtb	r1, r3
 80056d0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056da:	400a      	ands	r2, r1
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	2b00      	cmp	r3, #0
 8005710:	d053      	beq.n	80057ba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d011      	beq.n	8005742 <UART_RxISR_8BIT_FIFOEN+0xca>
 800571e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2201      	movs	r2, #1
 8005730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f043 0201 	orr.w	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d011      	beq.n	8005772 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800574e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2202      	movs	r2, #2
 8005760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	f043 0204 	orr.w	r2, r3, #4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800577e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2204      	movs	r2, #4
 8005790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f043 0202 	orr.w	r2, r3, #2
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d006      	beq.n	80057ba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fa ff59 	bl	8000664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 80a2 	bne.w	800590c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057ec:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80057f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80057f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e4      	bne.n	80057c8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800580e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005826:	66ba      	str	r2, [r7, #104]	; 0x68
 8005828:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800582c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e1      	bne.n	80057fe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a5f      	ldr	r2, [pc, #380]	; (80059d0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d021      	beq.n	800589c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01a      	beq.n	800589c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005876:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800587a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005888:	657b      	str	r3, [r7, #84]	; 0x54
 800588a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800588e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e4      	bne.n	8005866 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d130      	bne.n	8005906 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058cc:	643b      	str	r3, [r7, #64]	; 0x40
 80058ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e4      	bne.n	80058aa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d103      	bne.n	80058f6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2210      	movs	r2, #16
 80058f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fe fd66 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
 8005904:	e002      	b.n	800590c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fa fedc 	bl	80006c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800590c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	f47f aecf 	bne.w	80056c0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005928:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800592c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005930:	2b00      	cmp	r3, #0
 8005932:	d049      	beq.n	80059c8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800593a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800593e:	429a      	cmp	r2, r3
 8005940:	d242      	bcs.n	80059c8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	61fb      	str	r3, [r7, #28]
   return(result);
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e3      	bne.n	8005942 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800597e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	60bb      	str	r3, [r7, #8]
   return(result);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e4      	bne.n	8005980 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059b6:	e007      	b.n	80059c8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0208 	orr.w	r2, r2, #8
 80059c6:	619a      	str	r2, [r3, #24]
}
 80059c8:	bf00      	nop
 80059ca:	37b0      	adds	r7, #176	; 0xb0
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40008000 	.word	0x40008000
 80059d4:	08005309 	.word	0x08005309

080059d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b0ae      	sub	sp, #184	; 0xb8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80059e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0e:	2b22      	cmp	r3, #34	; 0x22
 8005a10:	f040 8186 	bne.w	8005d20 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a1a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a1e:	e129      	b.n	8005c74 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a32:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005a36:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a48:	1c9a      	adds	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d053      	beq.n	8005b1e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d011      	beq.n	8005aa6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2201      	movs	r2, #1
 8005a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9c:	f043 0201 	orr.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d011      	beq.n	8005ad6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	f043 0204 	orr.w	r2, r3, #4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d011      	beq.n	8005b06 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2204      	movs	r2, #4
 8005af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	f043 0202 	orr.w	r2, r3, #2
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d006      	beq.n	8005b1e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fa fda7 	bl	8000664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f040 80a4 	bne.w	8005c74 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b52:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e2      	bne.n	8005b2c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e1      	bne.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a5f      	ldr	r2, [pc, #380]	; (8005d38 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d021      	beq.n	8005c04 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01a      	beq.n	8005c04 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bf2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e4      	bne.n	8005bce <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d130      	bne.n	8005c6e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	f023 0310 	bic.w	r3, r3, #16
 8005c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
 8005c36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e4      	bne.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d103      	bne.n	8005c5e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2210      	movs	r2, #16
 8005c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fe fbb2 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
 8005c6c:	e002      	b.n	8005c74 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fa fd28 	bl	80006c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c74:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005c7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f47f aecb 	bne.w	8005a20 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c90:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c94:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d049      	beq.n	8005d30 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ca2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d242      	bcs.n	8005d30 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005cce:	633a      	str	r2, [r7, #48]	; 0x30
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e3      	bne.n	8005caa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005ce6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f043 0320 	orr.w	r3, r3, #32
 8005cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	69b9      	ldr	r1, [r7, #24]
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	617b      	str	r3, [r7, #20]
   return(result);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e4      	bne.n	8005ce8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d1e:	e007      	b.n	8005d30 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0208 	orr.w	r2, r2, #8
 8005d2e:	619a      	str	r2, [r3, #24]
}
 8005d30:	bf00      	nop
 8005d32:	37b8      	adds	r7, #184	; 0xb8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40008000 	.word	0x40008000
 8005d3c:	080054c1 	.word	0x080054c1

08005d40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr

08005d76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_UARTEx_DisableFifoMode+0x16>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e027      	b.n	8005ddc <HAL_UARTEx_DisableFifoMode+0x66>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	; 0x24
 8005d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005dba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr

08005de6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e02d      	b.n	8005e5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2224      	movs	r2, #36	; 0x24
 8005e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f850 	bl	8005ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e02d      	b.n	8005ed6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2224      	movs	r2, #36	; 0x24
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f812 	bl	8005ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d108      	bne.n	8005f02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f00:	e031      	b.n	8005f66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f02:	2308      	movs	r3, #8
 8005f04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f06:	2308      	movs	r3, #8
 8005f08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	0e5b      	lsrs	r3, r3, #25
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	0f5b      	lsrs	r3, r3, #29
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	7b3a      	ldrb	r2, [r7, #12]
 8005f2e:	4910      	ldr	r1, [pc, #64]	; (8005f70 <UARTEx_SetNbDataToProcess+0x90>)
 8005f30:	5c8a      	ldrb	r2, [r1, r2]
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f36:	7b3a      	ldrb	r2, [r7, #12]
 8005f38:	490e      	ldr	r1, [pc, #56]	; (8005f74 <UARTEx_SetNbDataToProcess+0x94>)
 8005f3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	7b7a      	ldrb	r2, [r7, #13]
 8005f4c:	4908      	ldr	r1, [pc, #32]	; (8005f70 <UARTEx_SetNbDataToProcess+0x90>)
 8005f4e:	5c8a      	ldrb	r2, [r1, r2]
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f54:	7b7a      	ldrb	r2, [r7, #13]
 8005f56:	4907      	ldr	r1, [pc, #28]	; (8005f74 <UARTEx_SetNbDataToProcess+0x94>)
 8005f58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr
 8005f70:	08006a18 	.word	0x08006a18
 8005f74:	08006a20 	.word	0x08006a20

08005f78 <__errno>:
 8005f78:	4b01      	ldr	r3, [pc, #4]	; (8005f80 <__errno+0x8>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	2000000c 	.word	0x2000000c

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4d0d      	ldr	r5, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2600      	movs	r6, #0
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4d0b      	ldr	r5, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f000 fca0 	bl	80068dc <_init>
 8005f9c:	1b64      	subs	r4, r4, r5
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	08006a64 	.word	0x08006a64
 8005fc0:	08006a64 	.word	0x08006a64
 8005fc4:	08006a64 	.word	0x08006a64
 8005fc8:	08006a68 	.word	0x08006a68

08005fcc <memcpy>:
 8005fcc:	440a      	add	r2, r1
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fd4:	d100      	bne.n	8005fd8 <memcpy+0xc>
 8005fd6:	4770      	bx	lr
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d1f9      	bne.n	8005fda <memcpy+0xe>
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <memset>:
 8005fe8:	4402      	add	r2, r0
 8005fea:	4603      	mov	r3, r0
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <memset+0xa>
 8005ff0:	4770      	bx	lr
 8005ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff6:	e7f9      	b.n	8005fec <memset+0x4>

08005ff8 <sniprintf>:
 8005ff8:	b40c      	push	{r2, r3}
 8005ffa:	b530      	push	{r4, r5, lr}
 8005ffc:	4b17      	ldr	r3, [pc, #92]	; (800605c <sniprintf+0x64>)
 8005ffe:	1e0c      	subs	r4, r1, #0
 8006000:	681d      	ldr	r5, [r3, #0]
 8006002:	b09d      	sub	sp, #116	; 0x74
 8006004:	da08      	bge.n	8006018 <sniprintf+0x20>
 8006006:	238b      	movs	r3, #139	; 0x8b
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800600e:	b01d      	add	sp, #116	; 0x74
 8006010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006014:	b002      	add	sp, #8
 8006016:	4770      	bx	lr
 8006018:	f44f 7302 	mov.w	r3, #520	; 0x208
 800601c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006020:	bf14      	ite	ne
 8006022:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006026:	4623      	moveq	r3, r4
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	9307      	str	r3, [sp, #28]
 800602c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006030:	9002      	str	r0, [sp, #8]
 8006032:	9006      	str	r0, [sp, #24]
 8006034:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006038:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800603a:	ab21      	add	r3, sp, #132	; 0x84
 800603c:	a902      	add	r1, sp, #8
 800603e:	4628      	mov	r0, r5
 8006040:	9301      	str	r3, [sp, #4]
 8006042:	f000 f869 	bl	8006118 <_svfiprintf_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	bfbc      	itt	lt
 800604a:	238b      	movlt	r3, #139	; 0x8b
 800604c:	602b      	strlt	r3, [r5, #0]
 800604e:	2c00      	cmp	r4, #0
 8006050:	d0dd      	beq.n	800600e <sniprintf+0x16>
 8006052:	9b02      	ldr	r3, [sp, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e7d9      	b.n	800600e <sniprintf+0x16>
 800605a:	bf00      	nop
 800605c:	2000000c 	.word	0x2000000c

08006060 <__ssputs_r>:
 8006060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	688e      	ldr	r6, [r1, #8]
 8006066:	429e      	cmp	r6, r3
 8006068:	4682      	mov	sl, r0
 800606a:	460c      	mov	r4, r1
 800606c:	4690      	mov	r8, r2
 800606e:	461f      	mov	r7, r3
 8006070:	d838      	bhi.n	80060e4 <__ssputs_r+0x84>
 8006072:	898a      	ldrh	r2, [r1, #12]
 8006074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006078:	d032      	beq.n	80060e0 <__ssputs_r+0x80>
 800607a:	6825      	ldr	r5, [r4, #0]
 800607c:	6909      	ldr	r1, [r1, #16]
 800607e:	eba5 0901 	sub.w	r9, r5, r1
 8006082:	6965      	ldr	r5, [r4, #20]
 8006084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800608c:	3301      	adds	r3, #1
 800608e:	444b      	add	r3, r9
 8006090:	106d      	asrs	r5, r5, #1
 8006092:	429d      	cmp	r5, r3
 8006094:	bf38      	it	cc
 8006096:	461d      	movcc	r5, r3
 8006098:	0553      	lsls	r3, r2, #21
 800609a:	d531      	bpl.n	8006100 <__ssputs_r+0xa0>
 800609c:	4629      	mov	r1, r5
 800609e:	f000 fb53 	bl	8006748 <_malloc_r>
 80060a2:	4606      	mov	r6, r0
 80060a4:	b950      	cbnz	r0, 80060bc <__ssputs_r+0x5c>
 80060a6:	230c      	movs	r3, #12
 80060a8:	f8ca 3000 	str.w	r3, [sl]
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060bc:	6921      	ldr	r1, [r4, #16]
 80060be:	464a      	mov	r2, r9
 80060c0:	f7ff ff84 	bl	8005fcc <memcpy>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	6126      	str	r6, [r4, #16]
 80060d2:	6165      	str	r5, [r4, #20]
 80060d4:	444e      	add	r6, r9
 80060d6:	eba5 0509 	sub.w	r5, r5, r9
 80060da:	6026      	str	r6, [r4, #0]
 80060dc:	60a5      	str	r5, [r4, #8]
 80060de:	463e      	mov	r6, r7
 80060e0:	42be      	cmp	r6, r7
 80060e2:	d900      	bls.n	80060e6 <__ssputs_r+0x86>
 80060e4:	463e      	mov	r6, r7
 80060e6:	6820      	ldr	r0, [r4, #0]
 80060e8:	4632      	mov	r2, r6
 80060ea:	4641      	mov	r1, r8
 80060ec:	f000 faa8 	bl	8006640 <memmove>
 80060f0:	68a3      	ldr	r3, [r4, #8]
 80060f2:	1b9b      	subs	r3, r3, r6
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	4433      	add	r3, r6
 80060fa:	6023      	str	r3, [r4, #0]
 80060fc:	2000      	movs	r0, #0
 80060fe:	e7db      	b.n	80060b8 <__ssputs_r+0x58>
 8006100:	462a      	mov	r2, r5
 8006102:	f000 fb95 	bl	8006830 <_realloc_r>
 8006106:	4606      	mov	r6, r0
 8006108:	2800      	cmp	r0, #0
 800610a:	d1e1      	bne.n	80060d0 <__ssputs_r+0x70>
 800610c:	6921      	ldr	r1, [r4, #16]
 800610e:	4650      	mov	r0, sl
 8006110:	f000 fab0 	bl	8006674 <_free_r>
 8006114:	e7c7      	b.n	80060a6 <__ssputs_r+0x46>
	...

08006118 <_svfiprintf_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4698      	mov	r8, r3
 800611e:	898b      	ldrh	r3, [r1, #12]
 8006120:	061b      	lsls	r3, r3, #24
 8006122:	b09d      	sub	sp, #116	; 0x74
 8006124:	4607      	mov	r7, r0
 8006126:	460d      	mov	r5, r1
 8006128:	4614      	mov	r4, r2
 800612a:	d50e      	bpl.n	800614a <_svfiprintf_r+0x32>
 800612c:	690b      	ldr	r3, [r1, #16]
 800612e:	b963      	cbnz	r3, 800614a <_svfiprintf_r+0x32>
 8006130:	2140      	movs	r1, #64	; 0x40
 8006132:	f000 fb09 	bl	8006748 <_malloc_r>
 8006136:	6028      	str	r0, [r5, #0]
 8006138:	6128      	str	r0, [r5, #16]
 800613a:	b920      	cbnz	r0, 8006146 <_svfiprintf_r+0x2e>
 800613c:	230c      	movs	r3, #12
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006144:	e0d1      	b.n	80062ea <_svfiprintf_r+0x1d2>
 8006146:	2340      	movs	r3, #64	; 0x40
 8006148:	616b      	str	r3, [r5, #20]
 800614a:	2300      	movs	r3, #0
 800614c:	9309      	str	r3, [sp, #36]	; 0x24
 800614e:	2320      	movs	r3, #32
 8006150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006154:	f8cd 800c 	str.w	r8, [sp, #12]
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006304 <_svfiprintf_r+0x1ec>
 800615e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006162:	f04f 0901 	mov.w	r9, #1
 8006166:	4623      	mov	r3, r4
 8006168:	469a      	mov	sl, r3
 800616a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800616e:	b10a      	cbz	r2, 8006174 <_svfiprintf_r+0x5c>
 8006170:	2a25      	cmp	r2, #37	; 0x25
 8006172:	d1f9      	bne.n	8006168 <_svfiprintf_r+0x50>
 8006174:	ebba 0b04 	subs.w	fp, sl, r4
 8006178:	d00b      	beq.n	8006192 <_svfiprintf_r+0x7a>
 800617a:	465b      	mov	r3, fp
 800617c:	4622      	mov	r2, r4
 800617e:	4629      	mov	r1, r5
 8006180:	4638      	mov	r0, r7
 8006182:	f7ff ff6d 	bl	8006060 <__ssputs_r>
 8006186:	3001      	adds	r0, #1
 8006188:	f000 80aa 	beq.w	80062e0 <_svfiprintf_r+0x1c8>
 800618c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618e:	445a      	add	r2, fp
 8006190:	9209      	str	r2, [sp, #36]	; 0x24
 8006192:	f89a 3000 	ldrb.w	r3, [sl]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80a2 	beq.w	80062e0 <_svfiprintf_r+0x1c8>
 800619c:	2300      	movs	r3, #0
 800619e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a6:	f10a 0a01 	add.w	sl, sl, #1
 80061aa:	9304      	str	r3, [sp, #16]
 80061ac:	9307      	str	r3, [sp, #28]
 80061ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061b2:	931a      	str	r3, [sp, #104]	; 0x68
 80061b4:	4654      	mov	r4, sl
 80061b6:	2205      	movs	r2, #5
 80061b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061bc:	4851      	ldr	r0, [pc, #324]	; (8006304 <_svfiprintf_r+0x1ec>)
 80061be:	f7f9 ffdf 	bl	8000180 <memchr>
 80061c2:	9a04      	ldr	r2, [sp, #16]
 80061c4:	b9d8      	cbnz	r0, 80061fe <_svfiprintf_r+0xe6>
 80061c6:	06d0      	lsls	r0, r2, #27
 80061c8:	bf44      	itt	mi
 80061ca:	2320      	movmi	r3, #32
 80061cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d0:	0711      	lsls	r1, r2, #28
 80061d2:	bf44      	itt	mi
 80061d4:	232b      	movmi	r3, #43	; 0x2b
 80061d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061da:	f89a 3000 	ldrb.w	r3, [sl]
 80061de:	2b2a      	cmp	r3, #42	; 0x2a
 80061e0:	d015      	beq.n	800620e <_svfiprintf_r+0xf6>
 80061e2:	9a07      	ldr	r2, [sp, #28]
 80061e4:	4654      	mov	r4, sl
 80061e6:	2000      	movs	r0, #0
 80061e8:	f04f 0c0a 	mov.w	ip, #10
 80061ec:	4621      	mov	r1, r4
 80061ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f2:	3b30      	subs	r3, #48	; 0x30
 80061f4:	2b09      	cmp	r3, #9
 80061f6:	d94e      	bls.n	8006296 <_svfiprintf_r+0x17e>
 80061f8:	b1b0      	cbz	r0, 8006228 <_svfiprintf_r+0x110>
 80061fa:	9207      	str	r2, [sp, #28]
 80061fc:	e014      	b.n	8006228 <_svfiprintf_r+0x110>
 80061fe:	eba0 0308 	sub.w	r3, r0, r8
 8006202:	fa09 f303 	lsl.w	r3, r9, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	46a2      	mov	sl, r4
 800620c:	e7d2      	b.n	80061b4 <_svfiprintf_r+0x9c>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	9103      	str	r1, [sp, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	bfbb      	ittet	lt
 800621a:	425b      	neglt	r3, r3
 800621c:	f042 0202 	orrlt.w	r2, r2, #2
 8006220:	9307      	strge	r3, [sp, #28]
 8006222:	9307      	strlt	r3, [sp, #28]
 8006224:	bfb8      	it	lt
 8006226:	9204      	strlt	r2, [sp, #16]
 8006228:	7823      	ldrb	r3, [r4, #0]
 800622a:	2b2e      	cmp	r3, #46	; 0x2e
 800622c:	d10c      	bne.n	8006248 <_svfiprintf_r+0x130>
 800622e:	7863      	ldrb	r3, [r4, #1]
 8006230:	2b2a      	cmp	r3, #42	; 0x2a
 8006232:	d135      	bne.n	80062a0 <_svfiprintf_r+0x188>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	9203      	str	r2, [sp, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	bfb8      	it	lt
 8006240:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006244:	3402      	adds	r4, #2
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006308 <_svfiprintf_r+0x1f0>
 800624c:	7821      	ldrb	r1, [r4, #0]
 800624e:	2203      	movs	r2, #3
 8006250:	4650      	mov	r0, sl
 8006252:	f7f9 ff95 	bl	8000180 <memchr>
 8006256:	b140      	cbz	r0, 800626a <_svfiprintf_r+0x152>
 8006258:	2340      	movs	r3, #64	; 0x40
 800625a:	eba0 000a 	sub.w	r0, r0, sl
 800625e:	fa03 f000 	lsl.w	r0, r3, r0
 8006262:	9b04      	ldr	r3, [sp, #16]
 8006264:	4303      	orrs	r3, r0
 8006266:	3401      	adds	r4, #1
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626e:	4827      	ldr	r0, [pc, #156]	; (800630c <_svfiprintf_r+0x1f4>)
 8006270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006274:	2206      	movs	r2, #6
 8006276:	f7f9 ff83 	bl	8000180 <memchr>
 800627a:	2800      	cmp	r0, #0
 800627c:	d038      	beq.n	80062f0 <_svfiprintf_r+0x1d8>
 800627e:	4b24      	ldr	r3, [pc, #144]	; (8006310 <_svfiprintf_r+0x1f8>)
 8006280:	bb1b      	cbnz	r3, 80062ca <_svfiprintf_r+0x1b2>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	3307      	adds	r3, #7
 8006286:	f023 0307 	bic.w	r3, r3, #7
 800628a:	3308      	adds	r3, #8
 800628c:	9303      	str	r3, [sp, #12]
 800628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006290:	4433      	add	r3, r6
 8006292:	9309      	str	r3, [sp, #36]	; 0x24
 8006294:	e767      	b.n	8006166 <_svfiprintf_r+0x4e>
 8006296:	fb0c 3202 	mla	r2, ip, r2, r3
 800629a:	460c      	mov	r4, r1
 800629c:	2001      	movs	r0, #1
 800629e:	e7a5      	b.n	80061ec <_svfiprintf_r+0xd4>
 80062a0:	2300      	movs	r3, #0
 80062a2:	3401      	adds	r4, #1
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	4619      	mov	r1, r3
 80062a8:	f04f 0c0a 	mov.w	ip, #10
 80062ac:	4620      	mov	r0, r4
 80062ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062b2:	3a30      	subs	r2, #48	; 0x30
 80062b4:	2a09      	cmp	r2, #9
 80062b6:	d903      	bls.n	80062c0 <_svfiprintf_r+0x1a8>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0c5      	beq.n	8006248 <_svfiprintf_r+0x130>
 80062bc:	9105      	str	r1, [sp, #20]
 80062be:	e7c3      	b.n	8006248 <_svfiprintf_r+0x130>
 80062c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062c4:	4604      	mov	r4, r0
 80062c6:	2301      	movs	r3, #1
 80062c8:	e7f0      	b.n	80062ac <_svfiprintf_r+0x194>
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	462a      	mov	r2, r5
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <_svfiprintf_r+0x1fc>)
 80062d2:	a904      	add	r1, sp, #16
 80062d4:	4638      	mov	r0, r7
 80062d6:	f3af 8000 	nop.w
 80062da:	1c42      	adds	r2, r0, #1
 80062dc:	4606      	mov	r6, r0
 80062de:	d1d6      	bne.n	800628e <_svfiprintf_r+0x176>
 80062e0:	89ab      	ldrh	r3, [r5, #12]
 80062e2:	065b      	lsls	r3, r3, #25
 80062e4:	f53f af2c 	bmi.w	8006140 <_svfiprintf_r+0x28>
 80062e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ea:	b01d      	add	sp, #116	; 0x74
 80062ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f0:	ab03      	add	r3, sp, #12
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	462a      	mov	r2, r5
 80062f6:	4b07      	ldr	r3, [pc, #28]	; (8006314 <_svfiprintf_r+0x1fc>)
 80062f8:	a904      	add	r1, sp, #16
 80062fa:	4638      	mov	r0, r7
 80062fc:	f000 f87a 	bl	80063f4 <_printf_i>
 8006300:	e7eb      	b.n	80062da <_svfiprintf_r+0x1c2>
 8006302:	bf00      	nop
 8006304:	08006a28 	.word	0x08006a28
 8006308:	08006a2e 	.word	0x08006a2e
 800630c:	08006a32 	.word	0x08006a32
 8006310:	00000000 	.word	0x00000000
 8006314:	08006061 	.word	0x08006061

08006318 <_printf_common>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	4616      	mov	r6, r2
 800631e:	4699      	mov	r9, r3
 8006320:	688a      	ldr	r2, [r1, #8]
 8006322:	690b      	ldr	r3, [r1, #16]
 8006324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006328:	4293      	cmp	r3, r2
 800632a:	bfb8      	it	lt
 800632c:	4613      	movlt	r3, r2
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006334:	4607      	mov	r7, r0
 8006336:	460c      	mov	r4, r1
 8006338:	b10a      	cbz	r2, 800633e <_printf_common+0x26>
 800633a:	3301      	adds	r3, #1
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	0699      	lsls	r1, r3, #26
 8006342:	bf42      	ittt	mi
 8006344:	6833      	ldrmi	r3, [r6, #0]
 8006346:	3302      	addmi	r3, #2
 8006348:	6033      	strmi	r3, [r6, #0]
 800634a:	6825      	ldr	r5, [r4, #0]
 800634c:	f015 0506 	ands.w	r5, r5, #6
 8006350:	d106      	bne.n	8006360 <_printf_common+0x48>
 8006352:	f104 0a19 	add.w	sl, r4, #25
 8006356:	68e3      	ldr	r3, [r4, #12]
 8006358:	6832      	ldr	r2, [r6, #0]
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	42ab      	cmp	r3, r5
 800635e:	dc26      	bgt.n	80063ae <_printf_common+0x96>
 8006360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006364:	1e13      	subs	r3, r2, #0
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	bf18      	it	ne
 800636a:	2301      	movne	r3, #1
 800636c:	0692      	lsls	r2, r2, #26
 800636e:	d42b      	bmi.n	80063c8 <_printf_common+0xb0>
 8006370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006374:	4649      	mov	r1, r9
 8006376:	4638      	mov	r0, r7
 8006378:	47c0      	blx	r8
 800637a:	3001      	adds	r0, #1
 800637c:	d01e      	beq.n	80063bc <_printf_common+0xa4>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	68e5      	ldr	r5, [r4, #12]
 8006382:	6832      	ldr	r2, [r6, #0]
 8006384:	f003 0306 	and.w	r3, r3, #6
 8006388:	2b04      	cmp	r3, #4
 800638a:	bf08      	it	eq
 800638c:	1aad      	subeq	r5, r5, r2
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	6922      	ldr	r2, [r4, #16]
 8006392:	bf0c      	ite	eq
 8006394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006398:	2500      	movne	r5, #0
 800639a:	4293      	cmp	r3, r2
 800639c:	bfc4      	itt	gt
 800639e:	1a9b      	subgt	r3, r3, r2
 80063a0:	18ed      	addgt	r5, r5, r3
 80063a2:	2600      	movs	r6, #0
 80063a4:	341a      	adds	r4, #26
 80063a6:	42b5      	cmp	r5, r6
 80063a8:	d11a      	bne.n	80063e0 <_printf_common+0xc8>
 80063aa:	2000      	movs	r0, #0
 80063ac:	e008      	b.n	80063c0 <_printf_common+0xa8>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4652      	mov	r2, sl
 80063b2:	4649      	mov	r1, r9
 80063b4:	4638      	mov	r0, r7
 80063b6:	47c0      	blx	r8
 80063b8:	3001      	adds	r0, #1
 80063ba:	d103      	bne.n	80063c4 <_printf_common+0xac>
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c4:	3501      	adds	r5, #1
 80063c6:	e7c6      	b.n	8006356 <_printf_common+0x3e>
 80063c8:	18e1      	adds	r1, r4, r3
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	2030      	movs	r0, #48	; 0x30
 80063ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063d2:	4422      	add	r2, r4
 80063d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063dc:	3302      	adds	r3, #2
 80063de:	e7c7      	b.n	8006370 <_printf_common+0x58>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4622      	mov	r2, r4
 80063e4:	4649      	mov	r1, r9
 80063e6:	4638      	mov	r0, r7
 80063e8:	47c0      	blx	r8
 80063ea:	3001      	adds	r0, #1
 80063ec:	d0e6      	beq.n	80063bc <_printf_common+0xa4>
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7d9      	b.n	80063a6 <_printf_common+0x8e>
	...

080063f4 <_printf_i>:
 80063f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	7e0f      	ldrb	r7, [r1, #24]
 80063fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063fc:	2f78      	cmp	r7, #120	; 0x78
 80063fe:	4691      	mov	r9, r2
 8006400:	4680      	mov	r8, r0
 8006402:	460c      	mov	r4, r1
 8006404:	469a      	mov	sl, r3
 8006406:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800640a:	d807      	bhi.n	800641c <_printf_i+0x28>
 800640c:	2f62      	cmp	r7, #98	; 0x62
 800640e:	d80a      	bhi.n	8006426 <_printf_i+0x32>
 8006410:	2f00      	cmp	r7, #0
 8006412:	f000 80d8 	beq.w	80065c6 <_printf_i+0x1d2>
 8006416:	2f58      	cmp	r7, #88	; 0x58
 8006418:	f000 80a3 	beq.w	8006562 <_printf_i+0x16e>
 800641c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006424:	e03a      	b.n	800649c <_printf_i+0xa8>
 8006426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800642a:	2b15      	cmp	r3, #21
 800642c:	d8f6      	bhi.n	800641c <_printf_i+0x28>
 800642e:	a101      	add	r1, pc, #4	; (adr r1, 8006434 <_printf_i+0x40>)
 8006430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006434:	0800648d 	.word	0x0800648d
 8006438:	080064a1 	.word	0x080064a1
 800643c:	0800641d 	.word	0x0800641d
 8006440:	0800641d 	.word	0x0800641d
 8006444:	0800641d 	.word	0x0800641d
 8006448:	0800641d 	.word	0x0800641d
 800644c:	080064a1 	.word	0x080064a1
 8006450:	0800641d 	.word	0x0800641d
 8006454:	0800641d 	.word	0x0800641d
 8006458:	0800641d 	.word	0x0800641d
 800645c:	0800641d 	.word	0x0800641d
 8006460:	080065ad 	.word	0x080065ad
 8006464:	080064d1 	.word	0x080064d1
 8006468:	0800658f 	.word	0x0800658f
 800646c:	0800641d 	.word	0x0800641d
 8006470:	0800641d 	.word	0x0800641d
 8006474:	080065cf 	.word	0x080065cf
 8006478:	0800641d 	.word	0x0800641d
 800647c:	080064d1 	.word	0x080064d1
 8006480:	0800641d 	.word	0x0800641d
 8006484:	0800641d 	.word	0x0800641d
 8006488:	08006597 	.word	0x08006597
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	1d1a      	adds	r2, r3, #4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	602a      	str	r2, [r5, #0]
 8006494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800649c:	2301      	movs	r3, #1
 800649e:	e0a3      	b.n	80065e8 <_printf_i+0x1f4>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	6829      	ldr	r1, [r5, #0]
 80064a4:	0606      	lsls	r6, r0, #24
 80064a6:	f101 0304 	add.w	r3, r1, #4
 80064aa:	d50a      	bpl.n	80064c2 <_printf_i+0xce>
 80064ac:	680e      	ldr	r6, [r1, #0]
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	2e00      	cmp	r6, #0
 80064b2:	da03      	bge.n	80064bc <_printf_i+0xc8>
 80064b4:	232d      	movs	r3, #45	; 0x2d
 80064b6:	4276      	negs	r6, r6
 80064b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064bc:	485e      	ldr	r0, [pc, #376]	; (8006638 <_printf_i+0x244>)
 80064be:	230a      	movs	r3, #10
 80064c0:	e019      	b.n	80064f6 <_printf_i+0x102>
 80064c2:	680e      	ldr	r6, [r1, #0]
 80064c4:	602b      	str	r3, [r5, #0]
 80064c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064ca:	bf18      	it	ne
 80064cc:	b236      	sxthne	r6, r6
 80064ce:	e7ef      	b.n	80064b0 <_printf_i+0xbc>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	1d19      	adds	r1, r3, #4
 80064d6:	6029      	str	r1, [r5, #0]
 80064d8:	0601      	lsls	r1, r0, #24
 80064da:	d501      	bpl.n	80064e0 <_printf_i+0xec>
 80064dc:	681e      	ldr	r6, [r3, #0]
 80064de:	e002      	b.n	80064e6 <_printf_i+0xf2>
 80064e0:	0646      	lsls	r6, r0, #25
 80064e2:	d5fb      	bpl.n	80064dc <_printf_i+0xe8>
 80064e4:	881e      	ldrh	r6, [r3, #0]
 80064e6:	4854      	ldr	r0, [pc, #336]	; (8006638 <_printf_i+0x244>)
 80064e8:	2f6f      	cmp	r7, #111	; 0x6f
 80064ea:	bf0c      	ite	eq
 80064ec:	2308      	moveq	r3, #8
 80064ee:	230a      	movne	r3, #10
 80064f0:	2100      	movs	r1, #0
 80064f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064f6:	6865      	ldr	r5, [r4, #4]
 80064f8:	60a5      	str	r5, [r4, #8]
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	bfa2      	ittt	ge
 80064fe:	6821      	ldrge	r1, [r4, #0]
 8006500:	f021 0104 	bicge.w	r1, r1, #4
 8006504:	6021      	strge	r1, [r4, #0]
 8006506:	b90e      	cbnz	r6, 800650c <_printf_i+0x118>
 8006508:	2d00      	cmp	r5, #0
 800650a:	d04d      	beq.n	80065a8 <_printf_i+0x1b4>
 800650c:	4615      	mov	r5, r2
 800650e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006512:	fb03 6711 	mls	r7, r3, r1, r6
 8006516:	5dc7      	ldrb	r7, [r0, r7]
 8006518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800651c:	4637      	mov	r7, r6
 800651e:	42bb      	cmp	r3, r7
 8006520:	460e      	mov	r6, r1
 8006522:	d9f4      	bls.n	800650e <_printf_i+0x11a>
 8006524:	2b08      	cmp	r3, #8
 8006526:	d10b      	bne.n	8006540 <_printf_i+0x14c>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07de      	lsls	r6, r3, #31
 800652c:	d508      	bpl.n	8006540 <_printf_i+0x14c>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	6861      	ldr	r1, [r4, #4]
 8006532:	4299      	cmp	r1, r3
 8006534:	bfde      	ittt	le
 8006536:	2330      	movle	r3, #48	; 0x30
 8006538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800653c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006540:	1b52      	subs	r2, r2, r5
 8006542:	6122      	str	r2, [r4, #16]
 8006544:	f8cd a000 	str.w	sl, [sp]
 8006548:	464b      	mov	r3, r9
 800654a:	aa03      	add	r2, sp, #12
 800654c:	4621      	mov	r1, r4
 800654e:	4640      	mov	r0, r8
 8006550:	f7ff fee2 	bl	8006318 <_printf_common>
 8006554:	3001      	adds	r0, #1
 8006556:	d14c      	bne.n	80065f2 <_printf_i+0x1fe>
 8006558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800655c:	b004      	add	sp, #16
 800655e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006562:	4835      	ldr	r0, [pc, #212]	; (8006638 <_printf_i+0x244>)
 8006564:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006568:	6829      	ldr	r1, [r5, #0]
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006570:	6029      	str	r1, [r5, #0]
 8006572:	061d      	lsls	r5, r3, #24
 8006574:	d514      	bpl.n	80065a0 <_printf_i+0x1ac>
 8006576:	07df      	lsls	r7, r3, #31
 8006578:	bf44      	itt	mi
 800657a:	f043 0320 	orrmi.w	r3, r3, #32
 800657e:	6023      	strmi	r3, [r4, #0]
 8006580:	b91e      	cbnz	r6, 800658a <_printf_i+0x196>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	f023 0320 	bic.w	r3, r3, #32
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	2310      	movs	r3, #16
 800658c:	e7b0      	b.n	80064f0 <_printf_i+0xfc>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	f043 0320 	orr.w	r3, r3, #32
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	2378      	movs	r3, #120	; 0x78
 8006598:	4828      	ldr	r0, [pc, #160]	; (800663c <_printf_i+0x248>)
 800659a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800659e:	e7e3      	b.n	8006568 <_printf_i+0x174>
 80065a0:	0659      	lsls	r1, r3, #25
 80065a2:	bf48      	it	mi
 80065a4:	b2b6      	uxthmi	r6, r6
 80065a6:	e7e6      	b.n	8006576 <_printf_i+0x182>
 80065a8:	4615      	mov	r5, r2
 80065aa:	e7bb      	b.n	8006524 <_printf_i+0x130>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	6826      	ldr	r6, [r4, #0]
 80065b0:	6961      	ldr	r1, [r4, #20]
 80065b2:	1d18      	adds	r0, r3, #4
 80065b4:	6028      	str	r0, [r5, #0]
 80065b6:	0635      	lsls	r5, r6, #24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	d501      	bpl.n	80065c0 <_printf_i+0x1cc>
 80065bc:	6019      	str	r1, [r3, #0]
 80065be:	e002      	b.n	80065c6 <_printf_i+0x1d2>
 80065c0:	0670      	lsls	r0, r6, #25
 80065c2:	d5fb      	bpl.n	80065bc <_printf_i+0x1c8>
 80065c4:	8019      	strh	r1, [r3, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	4615      	mov	r5, r2
 80065cc:	e7ba      	b.n	8006544 <_printf_i+0x150>
 80065ce:	682b      	ldr	r3, [r5, #0]
 80065d0:	1d1a      	adds	r2, r3, #4
 80065d2:	602a      	str	r2, [r5, #0]
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	2100      	movs	r1, #0
 80065da:	4628      	mov	r0, r5
 80065dc:	f7f9 fdd0 	bl	8000180 <memchr>
 80065e0:	b108      	cbz	r0, 80065e6 <_printf_i+0x1f2>
 80065e2:	1b40      	subs	r0, r0, r5
 80065e4:	6060      	str	r0, [r4, #4]
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	2300      	movs	r3, #0
 80065ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f0:	e7a8      	b.n	8006544 <_printf_i+0x150>
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	462a      	mov	r2, r5
 80065f6:	4649      	mov	r1, r9
 80065f8:	4640      	mov	r0, r8
 80065fa:	47d0      	blx	sl
 80065fc:	3001      	adds	r0, #1
 80065fe:	d0ab      	beq.n	8006558 <_printf_i+0x164>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	079b      	lsls	r3, r3, #30
 8006604:	d413      	bmi.n	800662e <_printf_i+0x23a>
 8006606:	68e0      	ldr	r0, [r4, #12]
 8006608:	9b03      	ldr	r3, [sp, #12]
 800660a:	4298      	cmp	r0, r3
 800660c:	bfb8      	it	lt
 800660e:	4618      	movlt	r0, r3
 8006610:	e7a4      	b.n	800655c <_printf_i+0x168>
 8006612:	2301      	movs	r3, #1
 8006614:	4632      	mov	r2, r6
 8006616:	4649      	mov	r1, r9
 8006618:	4640      	mov	r0, r8
 800661a:	47d0      	blx	sl
 800661c:	3001      	adds	r0, #1
 800661e:	d09b      	beq.n	8006558 <_printf_i+0x164>
 8006620:	3501      	adds	r5, #1
 8006622:	68e3      	ldr	r3, [r4, #12]
 8006624:	9903      	ldr	r1, [sp, #12]
 8006626:	1a5b      	subs	r3, r3, r1
 8006628:	42ab      	cmp	r3, r5
 800662a:	dcf2      	bgt.n	8006612 <_printf_i+0x21e>
 800662c:	e7eb      	b.n	8006606 <_printf_i+0x212>
 800662e:	2500      	movs	r5, #0
 8006630:	f104 0619 	add.w	r6, r4, #25
 8006634:	e7f5      	b.n	8006622 <_printf_i+0x22e>
 8006636:	bf00      	nop
 8006638:	08006a39 	.word	0x08006a39
 800663c:	08006a4a 	.word	0x08006a4a

08006640 <memmove>:
 8006640:	4288      	cmp	r0, r1
 8006642:	b510      	push	{r4, lr}
 8006644:	eb01 0402 	add.w	r4, r1, r2
 8006648:	d902      	bls.n	8006650 <memmove+0x10>
 800664a:	4284      	cmp	r4, r0
 800664c:	4623      	mov	r3, r4
 800664e:	d807      	bhi.n	8006660 <memmove+0x20>
 8006650:	1e43      	subs	r3, r0, #1
 8006652:	42a1      	cmp	r1, r4
 8006654:	d008      	beq.n	8006668 <memmove+0x28>
 8006656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800665a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800665e:	e7f8      	b.n	8006652 <memmove+0x12>
 8006660:	4402      	add	r2, r0
 8006662:	4601      	mov	r1, r0
 8006664:	428a      	cmp	r2, r1
 8006666:	d100      	bne.n	800666a <memmove+0x2a>
 8006668:	bd10      	pop	{r4, pc}
 800666a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800666e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006672:	e7f7      	b.n	8006664 <memmove+0x24>

08006674 <_free_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4605      	mov	r5, r0
 8006678:	2900      	cmp	r1, #0
 800667a:	d041      	beq.n	8006700 <_free_r+0x8c>
 800667c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006680:	1f0c      	subs	r4, r1, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfb8      	it	lt
 8006686:	18e4      	addlt	r4, r4, r3
 8006688:	f000 f912 	bl	80068b0 <__malloc_lock>
 800668c:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <_free_r+0x90>)
 800668e:	6813      	ldr	r3, [r2, #0]
 8006690:	b933      	cbnz	r3, 80066a0 <_free_r+0x2c>
 8006692:	6063      	str	r3, [r4, #4]
 8006694:	6014      	str	r4, [r2, #0]
 8006696:	4628      	mov	r0, r5
 8006698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800669c:	f000 b90e 	b.w	80068bc <__malloc_unlock>
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	d908      	bls.n	80066b6 <_free_r+0x42>
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	1821      	adds	r1, r4, r0
 80066a8:	428b      	cmp	r3, r1
 80066aa:	bf01      	itttt	eq
 80066ac:	6819      	ldreq	r1, [r3, #0]
 80066ae:	685b      	ldreq	r3, [r3, #4]
 80066b0:	1809      	addeq	r1, r1, r0
 80066b2:	6021      	streq	r1, [r4, #0]
 80066b4:	e7ed      	b.n	8006692 <_free_r+0x1e>
 80066b6:	461a      	mov	r2, r3
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	b10b      	cbz	r3, 80066c0 <_free_r+0x4c>
 80066bc:	42a3      	cmp	r3, r4
 80066be:	d9fa      	bls.n	80066b6 <_free_r+0x42>
 80066c0:	6811      	ldr	r1, [r2, #0]
 80066c2:	1850      	adds	r0, r2, r1
 80066c4:	42a0      	cmp	r0, r4
 80066c6:	d10b      	bne.n	80066e0 <_free_r+0x6c>
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	4401      	add	r1, r0
 80066cc:	1850      	adds	r0, r2, r1
 80066ce:	4283      	cmp	r3, r0
 80066d0:	6011      	str	r1, [r2, #0]
 80066d2:	d1e0      	bne.n	8006696 <_free_r+0x22>
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	6053      	str	r3, [r2, #4]
 80066da:	4401      	add	r1, r0
 80066dc:	6011      	str	r1, [r2, #0]
 80066de:	e7da      	b.n	8006696 <_free_r+0x22>
 80066e0:	d902      	bls.n	80066e8 <_free_r+0x74>
 80066e2:	230c      	movs	r3, #12
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	e7d6      	b.n	8006696 <_free_r+0x22>
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	1821      	adds	r1, r4, r0
 80066ec:	428b      	cmp	r3, r1
 80066ee:	bf04      	itt	eq
 80066f0:	6819      	ldreq	r1, [r3, #0]
 80066f2:	685b      	ldreq	r3, [r3, #4]
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	bf04      	itt	eq
 80066f8:	1809      	addeq	r1, r1, r0
 80066fa:	6021      	streq	r1, [r4, #0]
 80066fc:	6054      	str	r4, [r2, #4]
 80066fe:	e7ca      	b.n	8006696 <_free_r+0x22>
 8006700:	bd38      	pop	{r3, r4, r5, pc}
 8006702:	bf00      	nop
 8006704:	200002a8 	.word	0x200002a8

08006708 <sbrk_aligned>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	4e0e      	ldr	r6, [pc, #56]	; (8006744 <sbrk_aligned+0x3c>)
 800670c:	460c      	mov	r4, r1
 800670e:	6831      	ldr	r1, [r6, #0]
 8006710:	4605      	mov	r5, r0
 8006712:	b911      	cbnz	r1, 800671a <sbrk_aligned+0x12>
 8006714:	f000 f8bc 	bl	8006890 <_sbrk_r>
 8006718:	6030      	str	r0, [r6, #0]
 800671a:	4621      	mov	r1, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f000 f8b7 	bl	8006890 <_sbrk_r>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d00a      	beq.n	800673c <sbrk_aligned+0x34>
 8006726:	1cc4      	adds	r4, r0, #3
 8006728:	f024 0403 	bic.w	r4, r4, #3
 800672c:	42a0      	cmp	r0, r4
 800672e:	d007      	beq.n	8006740 <sbrk_aligned+0x38>
 8006730:	1a21      	subs	r1, r4, r0
 8006732:	4628      	mov	r0, r5
 8006734:	f000 f8ac 	bl	8006890 <_sbrk_r>
 8006738:	3001      	adds	r0, #1
 800673a:	d101      	bne.n	8006740 <sbrk_aligned+0x38>
 800673c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006740:	4620      	mov	r0, r4
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	200002ac 	.word	0x200002ac

08006748 <_malloc_r>:
 8006748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674c:	1ccd      	adds	r5, r1, #3
 800674e:	f025 0503 	bic.w	r5, r5, #3
 8006752:	3508      	adds	r5, #8
 8006754:	2d0c      	cmp	r5, #12
 8006756:	bf38      	it	cc
 8006758:	250c      	movcc	r5, #12
 800675a:	2d00      	cmp	r5, #0
 800675c:	4607      	mov	r7, r0
 800675e:	db01      	blt.n	8006764 <_malloc_r+0x1c>
 8006760:	42a9      	cmp	r1, r5
 8006762:	d905      	bls.n	8006770 <_malloc_r+0x28>
 8006764:	230c      	movs	r3, #12
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	2600      	movs	r6, #0
 800676a:	4630      	mov	r0, r6
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	4e2e      	ldr	r6, [pc, #184]	; (800682c <_malloc_r+0xe4>)
 8006772:	f000 f89d 	bl	80068b0 <__malloc_lock>
 8006776:	6833      	ldr	r3, [r6, #0]
 8006778:	461c      	mov	r4, r3
 800677a:	bb34      	cbnz	r4, 80067ca <_malloc_r+0x82>
 800677c:	4629      	mov	r1, r5
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff ffc2 	bl	8006708 <sbrk_aligned>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	4604      	mov	r4, r0
 8006788:	d14d      	bne.n	8006826 <_malloc_r+0xde>
 800678a:	6834      	ldr	r4, [r6, #0]
 800678c:	4626      	mov	r6, r4
 800678e:	2e00      	cmp	r6, #0
 8006790:	d140      	bne.n	8006814 <_malloc_r+0xcc>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	4631      	mov	r1, r6
 8006796:	4638      	mov	r0, r7
 8006798:	eb04 0803 	add.w	r8, r4, r3
 800679c:	f000 f878 	bl	8006890 <_sbrk_r>
 80067a0:	4580      	cmp	r8, r0
 80067a2:	d13a      	bne.n	800681a <_malloc_r+0xd2>
 80067a4:	6821      	ldr	r1, [r4, #0]
 80067a6:	3503      	adds	r5, #3
 80067a8:	1a6d      	subs	r5, r5, r1
 80067aa:	f025 0503 	bic.w	r5, r5, #3
 80067ae:	3508      	adds	r5, #8
 80067b0:	2d0c      	cmp	r5, #12
 80067b2:	bf38      	it	cc
 80067b4:	250c      	movcc	r5, #12
 80067b6:	4629      	mov	r1, r5
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff ffa5 	bl	8006708 <sbrk_aligned>
 80067be:	3001      	adds	r0, #1
 80067c0:	d02b      	beq.n	800681a <_malloc_r+0xd2>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	442b      	add	r3, r5
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	e00e      	b.n	80067e8 <_malloc_r+0xa0>
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	1b52      	subs	r2, r2, r5
 80067ce:	d41e      	bmi.n	800680e <_malloc_r+0xc6>
 80067d0:	2a0b      	cmp	r2, #11
 80067d2:	d916      	bls.n	8006802 <_malloc_r+0xba>
 80067d4:	1961      	adds	r1, r4, r5
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	6025      	str	r5, [r4, #0]
 80067da:	bf18      	it	ne
 80067dc:	6059      	strne	r1, [r3, #4]
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	bf08      	it	eq
 80067e2:	6031      	streq	r1, [r6, #0]
 80067e4:	5162      	str	r2, [r4, r5]
 80067e6:	604b      	str	r3, [r1, #4]
 80067e8:	4638      	mov	r0, r7
 80067ea:	f104 060b 	add.w	r6, r4, #11
 80067ee:	f000 f865 	bl	80068bc <__malloc_unlock>
 80067f2:	f026 0607 	bic.w	r6, r6, #7
 80067f6:	1d23      	adds	r3, r4, #4
 80067f8:	1af2      	subs	r2, r6, r3
 80067fa:	d0b6      	beq.n	800676a <_malloc_r+0x22>
 80067fc:	1b9b      	subs	r3, r3, r6
 80067fe:	50a3      	str	r3, [r4, r2]
 8006800:	e7b3      	b.n	800676a <_malloc_r+0x22>
 8006802:	6862      	ldr	r2, [r4, #4]
 8006804:	42a3      	cmp	r3, r4
 8006806:	bf0c      	ite	eq
 8006808:	6032      	streq	r2, [r6, #0]
 800680a:	605a      	strne	r2, [r3, #4]
 800680c:	e7ec      	b.n	80067e8 <_malloc_r+0xa0>
 800680e:	4623      	mov	r3, r4
 8006810:	6864      	ldr	r4, [r4, #4]
 8006812:	e7b2      	b.n	800677a <_malloc_r+0x32>
 8006814:	4634      	mov	r4, r6
 8006816:	6876      	ldr	r6, [r6, #4]
 8006818:	e7b9      	b.n	800678e <_malloc_r+0x46>
 800681a:	230c      	movs	r3, #12
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4638      	mov	r0, r7
 8006820:	f000 f84c 	bl	80068bc <__malloc_unlock>
 8006824:	e7a1      	b.n	800676a <_malloc_r+0x22>
 8006826:	6025      	str	r5, [r4, #0]
 8006828:	e7de      	b.n	80067e8 <_malloc_r+0xa0>
 800682a:	bf00      	nop
 800682c:	200002a8 	.word	0x200002a8

08006830 <_realloc_r>:
 8006830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006834:	4680      	mov	r8, r0
 8006836:	4614      	mov	r4, r2
 8006838:	460e      	mov	r6, r1
 800683a:	b921      	cbnz	r1, 8006846 <_realloc_r+0x16>
 800683c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	4611      	mov	r1, r2
 8006842:	f7ff bf81 	b.w	8006748 <_malloc_r>
 8006846:	b92a      	cbnz	r2, 8006854 <_realloc_r+0x24>
 8006848:	f7ff ff14 	bl	8006674 <_free_r>
 800684c:	4625      	mov	r5, r4
 800684e:	4628      	mov	r0, r5
 8006850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006854:	f000 f838 	bl	80068c8 <_malloc_usable_size_r>
 8006858:	4284      	cmp	r4, r0
 800685a:	4607      	mov	r7, r0
 800685c:	d802      	bhi.n	8006864 <_realloc_r+0x34>
 800685e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006862:	d812      	bhi.n	800688a <_realloc_r+0x5a>
 8006864:	4621      	mov	r1, r4
 8006866:	4640      	mov	r0, r8
 8006868:	f7ff ff6e 	bl	8006748 <_malloc_r>
 800686c:	4605      	mov	r5, r0
 800686e:	2800      	cmp	r0, #0
 8006870:	d0ed      	beq.n	800684e <_realloc_r+0x1e>
 8006872:	42bc      	cmp	r4, r7
 8006874:	4622      	mov	r2, r4
 8006876:	4631      	mov	r1, r6
 8006878:	bf28      	it	cs
 800687a:	463a      	movcs	r2, r7
 800687c:	f7ff fba6 	bl	8005fcc <memcpy>
 8006880:	4631      	mov	r1, r6
 8006882:	4640      	mov	r0, r8
 8006884:	f7ff fef6 	bl	8006674 <_free_r>
 8006888:	e7e1      	b.n	800684e <_realloc_r+0x1e>
 800688a:	4635      	mov	r5, r6
 800688c:	e7df      	b.n	800684e <_realloc_r+0x1e>
	...

08006890 <_sbrk_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d06      	ldr	r5, [pc, #24]	; (80068ac <_sbrk_r+0x1c>)
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	602b      	str	r3, [r5, #0]
 800689c:	f7fa fc94 	bl	80011c8 <_sbrk>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_sbrk_r+0x1a>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_sbrk_r+0x1a>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	200002b0 	.word	0x200002b0

080068b0 <__malloc_lock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_lock+0x8>)
 80068b2:	f000 b811 	b.w	80068d8 <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	200002b4 	.word	0x200002b4

080068bc <__malloc_unlock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__malloc_unlock+0x8>)
 80068be:	f000 b80c 	b.w	80068da <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	200002b4 	.word	0x200002b4

080068c8 <_malloc_usable_size_r>:
 80068c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068cc:	1f18      	subs	r0, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfbc      	itt	lt
 80068d2:	580b      	ldrlt	r3, [r1, r0]
 80068d4:	18c0      	addlt	r0, r0, r3
 80068d6:	4770      	bx	lr

080068d8 <__retarget_lock_acquire_recursive>:
 80068d8:	4770      	bx	lr

080068da <__retarget_lock_release_recursive>:
 80068da:	4770      	bx	lr

080068dc <_init>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	bf00      	nop
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr

080068e8 <_fini>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr


STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f5c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e8  080074e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f0  080074f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080074f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  20000078  08007570  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e5c  08007570  00021e5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160e5  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342a  00000000  00000000  00036187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f248  00000000  00000000  0003bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ad1  00000000  00000000  0005b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9e83  00000000  00000000  00070ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a96c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006128  00000000  00000000  0012a9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007084 	.word	0x08007084

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007084 	.word	0x08007084

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:

/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <calendar_init+0x70>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 fbec 	bl	8001d1c <rtcAlarmControl_init>

	// initialize the calendar
	_calendarHead = -1;
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <calendar_init+0x74>)
 8000546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800054a:	601a      	str	r2, [r3, #0]
	_calendarFree = 0;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <calendar_init+0x78>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	_currentEvent = -1;
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <calendar_init+0x7c>)
 8000554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000558:	601a      	str	r2, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e00d      	b.n	800057c <calendar_init+0x4c>
	{
		_calendarEvents[idx].next = idx + 1;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	1c59      	adds	r1, r3, #1
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <calendar_init+0x80>)
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	4613      	mov	r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4403      	add	r3, r0
 8000572:	3318      	adds	r3, #24
 8000574:	6019      	str	r1, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2bfe      	cmp	r3, #254	; 0xfe
 8000580:	ddee      	ble.n	8000560 <calendar_init+0x30>
	}
	_calendarEvents[MAX_NUM_EVENTS - 1].next = -1;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <calendar_init+0x80>)
 8000584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000588:	461a      	mov	r2, r3
 800058a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058e:	f8c2 3bfc 	str.w	r3, [r2, #3068]	; 0xbfc

	// set init flag
	_isInit = true;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <calendar_init+0x84>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000098 	.word	0x20000098
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20001c9c 	.word	0x20001c9c
 80005ac:	20000008 	.word	0x20000008
 80005b0:	2000009c 	.word	0x2000009c
 80005b4:	20000094 	.word	0x20000094

080005b8 <calendar_start>:

/*
 *
 */
void calendar_start(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005be:	1cfa      	adds	r2, r7, #3
 80005c0:	1d39      	adds	r1, r7, #4
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f998 	bl	80008fc <getNextAlarm>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d024      	beq.n	800061c <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005d2:	7ab8      	ldrb	r0, [r7, #10]
 80005d4:	7af9      	ldrb	r1, [r7, #11]
 80005d6:	7b3a      	ldrb	r2, [r7, #12]
 80005d8:	7b7b      	ldrb	r3, [r7, #13]
 80005da:	f001 fd0b 	bl	8001ff4 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d017      	beq.n	8000614 <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4910      	ldr	r1, [pc, #64]	; (8000628 <calendar_start+0x70>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	3308      	adds	r3, #8
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d009      	beq.n	800060e <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].event.start_callback)();
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	490a      	ldr	r1, [pc, #40]	; (8000628 <calendar_start+0x70>)
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	3308      	adds	r3, #8
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <calendar_start+0x74>)
 8000612:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <calendar_start+0x78>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 800061a:	e001      	b.n	8000620 <calendar_start+0x68>
		diableAlarm_A();
 800061c:	f001 fd86 	bl	800212c <diableAlarm_A>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000009c 	.word	0x2000009c
 800062c:	20000008 	.word	0x20000008
 8000630:	20000095 	.word	0x20000095

08000634 <calendar_setDateTime>:

/*
 *
 */
void calendar_setDateTime(DateTime dateTime)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
 800063a:	463b      	mov	r3, r7
 800063c:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000640:	7838      	ldrb	r0, [r7, #0]
 8000642:	7879      	ldrb	r1, [r7, #1]
 8000644:	78bc      	ldrb	r4, [r7, #2]
 8000646:	78fd      	ldrb	r5, [r7, #3]
 8000648:	793b      	ldrb	r3, [r7, #4]
 800064a:	797a      	ldrb	r2, [r7, #5]
 800064c:	9201      	str	r2, [sp, #4]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	462b      	mov	r3, r5
 8000652:	4622      	mov	r2, r4
 8000654:	f001 fb70 	bl	8001d38 <setDateTime>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bdb0      	pop	{r4, r5, r7, pc}

08000660 <calendar_getDateTime>:

/*
 *
 */
void calendar_getDateTime(DateTime* dateTime)
{
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	1c59      	adds	r1, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	1c9c      	adds	r4, r3, #2
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	1cdd      	adds	r5, r3, #3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3304      	adds	r3, #4
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	3205      	adds	r2, #5
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	462b      	mov	r3, r5
 8000684:	4622      	mov	r2, r4
 8000686:	f001 fc21 	bl	8001ecc <getDateTime>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000694 <calendar_addEvent>:

/*
 *
 */
CalendarStatus calendar_addEvent(CalendarEvent *event)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	// add only if the calendar has been initialized
	if (_isInit)
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <calendar_addEvent+0x30>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d009      	beq.n	80006b8 <calendar_addEvent+0x24>
	{
		if (_addEvent(event))
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 fa51 	bl	8000b4c <_addEvent>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <calendar_addEvent+0x20>
		{
			return CALENDAR_OKAY;
 80006b0:	2300      	movs	r3, #0
 80006b2:	e002      	b.n	80006ba <calendar_addEvent+0x26>
		}

		else
		{
			return CALENDAR_FULL;
 80006b4:	2302      	movs	r3, #2
 80006b6:	e000      	b.n	80006ba <calendar_addEvent+0x26>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDER_NOT_INIT;
 80006b8:	2301      	movs	r3, #1
	}
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000094 	.word	0x20000094

080006c8 <calendar_handleAlarm>:

/*
 *
 */
void calendar_handleAlarm(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 80006ce:	4b59      	ldr	r3, [pc, #356]	; (8000834 <calendar_handleAlarm+0x16c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f000 80a8 	beq.w	800082a <calendar_handleAlarm+0x162>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80006da:	1cfa      	adds	r2, r7, #3
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f90a 	bl	80008fc <getNextAlarm>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d07e      	beq.n	80007ec <calendar_handleAlarm+0x124>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80006ee:	7ab8      	ldrb	r0, [r7, #10]
 80006f0:	7af9      	ldrb	r1, [r7, #11]
 80006f2:	7b3a      	ldrb	r2, [r7, #12]
 80006f4:	7b7b      	ldrb	r3, [r7, #13]
 80006f6:	f001 fc7d 	bl	8001ff4 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d01a      	beq.n	8000736 <calendar_handleAlarm+0x6e>
 8000700:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <calendar_handleAlarm+0x170>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000708:	d115      	bne.n	8000736 <calendar_handleAlarm+0x6e>

				// call start event callback
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	494b      	ldr	r1, [pc, #300]	; (800083c <calendar_handleAlarm+0x174>)
 800070e:	4613      	mov	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	1a9b      	subs	r3, r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	440b      	add	r3, r1
 8000718:	3308      	adds	r3, #8
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d061      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4946      	ldr	r1, [pc, #280]	; (800083c <calendar_handleAlarm+0x174>)
 8000724:	4613      	mov	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	3308      	adds	r3, #8
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8000734:	e056      	b.n	80007e4 <calendar_handleAlarm+0x11c>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d031      	beq.n	80007a0 <calendar_handleAlarm+0xd8>
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <calendar_handleAlarm+0x170>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000744:	d02c      	beq.n	80007a0 <calendar_handleAlarm+0xd8>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <calendar_handleAlarm+0x170>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	493c      	ldr	r1, [pc, #240]	; (800083c <calendar_handleAlarm+0x174>)
 800074c:	4613      	mov	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	3314      	adds	r3, #20
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <calendar_handleAlarm+0xac>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <calendar_handleAlarm+0x170>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4936      	ldr	r1, [pc, #216]	; (800083c <calendar_handleAlarm+0x174>)
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	3314      	adds	r3, #20
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4931      	ldr	r1, [pc, #196]	; (800083c <calendar_handleAlarm+0x174>)
 8000778:	4613      	mov	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	3308      	adds	r3, #8
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d02c      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	492b      	ldr	r1, [pc, #172]	; (800083c <calendar_handleAlarm+0x174>)
 800078e:	4613      	mov	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3308      	adds	r3, #8
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 800079e:	e021      	b.n	80007e4 <calendar_handleAlarm+0x11c>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01b      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <calendar_handleAlarm+0x170>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007b4:	d016      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <calendar_handleAlarm+0x170>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4920      	ldr	r1, [pc, #128]	; (800083c <calendar_handleAlarm+0x174>)
 80007bc:	4613      	mov	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	1a9b      	subs	r3, r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	3314      	adds	r3, #20
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <calendar_handleAlarm+0x11c>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <calendar_handleAlarm+0x170>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	491a      	ldr	r1, [pc, #104]	; (800083c <calendar_handleAlarm+0x174>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	3314      	adds	r3, #20
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4798      	blx	r3
			}

			// else, alarm is just being reset for next month/year

			// update current event
			_currentEvent = currentEventIdx;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <calendar_handleAlarm+0x170>)
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e01b      	b.n	8000824 <calendar_handleAlarm+0x15c>

		// if there is no alarm to set, disable the alarm and exit any events
		else {
//			diableAlarm_A();

			if (CURRENTLY_IN_EVENT) {
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <calendar_handleAlarm+0x170>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007f4:	d016      	beq.n	8000824 <calendar_handleAlarm+0x15c>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <calendar_handleAlarm+0x170>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4910      	ldr	r1, [pc, #64]	; (800083c <calendar_handleAlarm+0x174>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	440b      	add	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <calendar_handleAlarm+0x15c>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <calendar_handleAlarm+0x170>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	490a      	ldr	r1, [pc, #40]	; (800083c <calendar_handleAlarm+0x174>)
 8000814:	4613      	mov	r3, r2
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	3314      	adds	r3, #20
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <calendar_handleAlarm+0x16c>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
	}
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000095 	.word	0x20000095
 8000838:	20000008 	.word	0x20000008
 800083c:	2000009c 	.word	0x2000009c

08000840 <calendar_AlarmA_ISR>:

/*
 *
 */
void calendar_AlarmA_ISR(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <calendar_AlarmA_ISR+0x14>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000095 	.word	0x20000095

08000858 <compareDateTime>:
/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	f107 0408 	add.w	r4, r7, #8
 8000862:	e884 0003 	stmia.w	r4, {r0, r1}
 8000866:	4639      	mov	r1, r7
 8000868:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000874:	f000 f80e 	bl	8000894 <dateTimeToSeconds>
 8000878:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 800087a:	463b      	mov	r3, r7
 800087c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000880:	f000 f808 	bl	8000894 <dateTimeToSeconds>
 8000884:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	1ad3      	subs	r3, r2, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <dateTimeToSeconds>:

/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	463b      	mov	r3, r7
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80008a4:	793b      	ldrb	r3, [r7, #4]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4613      	mov	r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	1a9b      	subs	r3, r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80008ba:	fb01 f303 	mul.w	r3, r1, r3
 80008be:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	490a      	ldr	r1, [pc, #40]	; (80008f0 <dateTimeToSeconds+0x5c>)
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 80008cc:	787b      	ldrb	r3, [r7, #1]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4908      	ldr	r1, [pc, #32]	; (80008f4 <dateTimeToSeconds+0x60>)
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 80008d8:	783b      	ldrb	r3, [r7, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <dateTimeToSeconds+0x64>)
 80008de:	fb01 f303 	mul.w	r3, r1, r3
 80008e2:	4413      	add	r3, r2
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	00015180 	.word	0x00015180
 80008f4:	00278d00 	.word	0x00278d00
 80008f8:	01da9c00 	.word	0x01da9c00

080008fc <getNextAlarm>:

/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08d      	sub	sp, #52	; 0x34
 8000900:	af02      	add	r7, sp, #8
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
	bool nextAlarmFound = false;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	DateTime now = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	1cdc      	adds	r4, r3, #3
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	1c9a      	adds	r2, r3, #2
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	1c59      	adds	r1, r3, #1
 8000938:	f107 001c 	add.w	r0, r7, #28
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	3305      	adds	r3, #5
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	3304      	adds	r3, #4
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	4623      	mov	r3, r4
 800094e:	f001 fabd 	bl	8001ecc <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = _calendarHead;
 8000952:	4b7c      	ldr	r3, [pc, #496]	; (8000b44 <getNextAlarm+0x248>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
	nextAlarmFound = false;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (eventIdx != -1)
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000964:	f000 80ce 	beq.w	8000b04 <getNextAlarm+0x208>
	{
		while (eventIdx != -1 && !nextAlarmFound) {
 8000968:	e0c0      	b.n	8000aec <getNextAlarm+0x1f0>
			// test if before event
			if (compareDateTime(now, _calendarEvents[eventIdx].event.start) < 0)
 800096a:	4977      	ldr	r1, [pc, #476]	; (8000b48 <getNextAlarm+0x24c>)
 800096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	cb0c      	ldmia	r3, {r2, r3}
 800097a:	f107 011c 	add.w	r1, r7, #28
 800097e:	c903      	ldmia	r1, {r0, r1}
 8000980:	f7ff ff6a 	bl	8000858 <compareDateTime>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	da41      	bge.n	8000a0e <getNextAlarm+0x112>
			{
				// then the next alarm is the beginning of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.start.year;
 800098a:	496f      	ldr	r1, [pc, #444]	; (8000b48 <getNextAlarm+0x24c>)
 800098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098e:	4613      	mov	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.start.month;
 800099c:	496a      	ldr	r1, [pc, #424]	; (8000b48 <getNextAlarm+0x24c>)
 800099e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a0:	4613      	mov	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	1a9b      	subs	r3, r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	3301      	adds	r3, #1
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.start.day;
 80009b0:	4965      	ldr	r1, [pc, #404]	; (8000b48 <getNextAlarm+0x24c>)
 80009b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b4:	4613      	mov	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	3302      	adds	r3, #2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.start.hour;
 80009c4:	4960      	ldr	r1, [pc, #384]	; (8000b48 <getNextAlarm+0x24c>)
 80009c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c8:	4613      	mov	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	3303      	adds	r3, #3
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.start.minute;
 80009d8:	495b      	ldr	r1, [pc, #364]	; (8000b48 <getNextAlarm+0x24c>)
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	4613      	mov	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	3304      	adds	r3, #4
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.start.second;
 80009ec:	4956      	ldr	r1, [pc, #344]	; (8000b48 <getNextAlarm+0x24c>)
 80009ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f0:	4613      	mov	r3, r2
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	440b      	add	r3, r1
 80009fa:	3305      	adds	r3, #5
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = false;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e06e      	b.n	8000aec <getNextAlarm+0x1f0>
			}

			// test if within event
			else if(compareDateTime(now, _calendarEvents[eventIdx].event.start) >= 0
 8000a0e:	494e      	ldr	r1, [pc, #312]	; (8000b48 <getNextAlarm+0x24c>)
 8000a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a12:	4613      	mov	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	cb0c      	ldmia	r3, {r2, r3}
 8000a1e:	f107 011c 	add.w	r1, r7, #28
 8000a22:	c903      	ldmia	r1, {r0, r1}
 8000a24:	f7ff ff18 	bl	8000858 <compareDateTime>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db54      	blt.n	8000ad8 <getNextAlarm+0x1dc>
					&& compareDateTime(now, _calendarEvents[eventIdx].event.end) < 0)
 8000a2e:	4946      	ldr	r1, [pc, #280]	; (8000b48 <getNextAlarm+0x24c>)
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3308      	adds	r3, #8
 8000a3e:	3304      	adds	r3, #4
 8000a40:	cb0c      	ldmia	r3, {r2, r3}
 8000a42:	f107 011c 	add.w	r1, r7, #28
 8000a46:	c903      	ldmia	r1, {r0, r1}
 8000a48:	f7ff ff06 	bl	8000858 <compareDateTime>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da42      	bge.n	8000ad8 <getNextAlarm+0x1dc>
			{
				// then the next alarm is the end of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.end.year;
 8000a52:	493d      	ldr	r1, [pc, #244]	; (8000b48 <getNextAlarm+0x24c>)
 8000a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a56:	4613      	mov	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	440b      	add	r3, r1
 8000a60:	330c      	adds	r3, #12
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.end.month;
 8000a66:	4938      	ldr	r1, [pc, #224]	; (8000b48 <getNextAlarm+0x24c>)
 8000a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	440b      	add	r3, r1
 8000a74:	330d      	adds	r3, #13
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.end.day;
 8000a7a:	4933      	ldr	r1, [pc, #204]	; (8000b48 <getNextAlarm+0x24c>)
 8000a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7e:	4613      	mov	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	440b      	add	r3, r1
 8000a88:	330e      	adds	r3, #14
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.end.hour;
 8000a8e:	492e      	ldr	r1, [pc, #184]	; (8000b48 <getNextAlarm+0x24c>)
 8000a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a92:	4613      	mov	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	330f      	adds	r3, #15
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.end.minute;
 8000aa2:	4929      	ldr	r1, [pc, #164]	; (8000b48 <getNextAlarm+0x24c>)
 8000aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	3310      	adds	r3, #16
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.end.second;
 8000ab6:	4924      	ldr	r1, [pc, #144]	; (8000b48 <getNextAlarm+0x24c>)
 8000ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aba:	4613      	mov	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3311      	adds	r3, #17
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = true;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e009      	b.n	8000aec <getNextAlarm+0x1f0>
			}

			// traverse to next event
			else {
				eventIdx = _calendarEvents[eventIdx].next;
 8000ad8:	491b      	ldr	r1, [pc, #108]	; (8000b48 <getNextAlarm+0x24c>)
 8000ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000adc:	4613      	mov	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
		while (eventIdx != -1 && !nextAlarmFound) {
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000af2:	d007      	beq.n	8000b04 <getNextAlarm+0x208>
 8000af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000af8:	f083 0301 	eor.w	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f47f af33 	bne.w	800096a <getNextAlarm+0x6e>
			}
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <getNextAlarm+0x226>
		dateTime = NULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	601a      	str	r2, [r3, #0]
		return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e00b      	b.n	8000b3a <getNextAlarm+0x23e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	6010      	str	r0, [r2, #0]
 8000b2e:	889b      	ldrh	r3, [r3, #4]
 8000b30:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = eventIdx;
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b36:	601a      	str	r2, [r3, #0]
		return true;
 8000b38:	2301      	movs	r3, #1
	}
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	372c      	adds	r7, #44	; 0x2c
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000004 	.word	0x20000004
 8000b48:	2000009c 	.word	0x2000009c

08000b4c <_addEvent>:

/*
 *
 */
bool _addEvent(CalendarEvent* event)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	int tempEndOfHead;

	// if the calendar is full, return early
	if (_calendarFree == -1)
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <_addEvent+0x114>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b5c:	d101      	bne.n	8000b62 <_addEvent+0x16>
	{
		return false;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e079      	b.n	8000c56 <_addEvent+0x10a>
	}

	// if the calendar is empty, insert at front
	if (_calendarHead == -1)
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <_addEvent+0x118>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b6a:	d128      	bne.n	8000bbe <_addEvent+0x72>
	{
		// copy event into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000b6c:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <_addEvent+0x114>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4a3b      	ldr	r2, [pc, #236]	; (8000c68 <_addEvent+0x11c>)
 8000b7a:	4413      	add	r3, r2
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f874 	bl	8000c6c <_copyEvent>

		// set the head
		_calendarHead = _calendarFree;
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <_addEvent+0x114>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <_addEvent+0x118>)
 8000b8a:	6013      	str	r3, [r2, #0]

		// set free to next free
		_calendarFree = _calendarEvents[_calendarFree].next;
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <_addEvent+0x114>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4935      	ldr	r1, [pc, #212]	; (8000c68 <_addEvent+0x11c>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	1a9b      	subs	r3, r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3318      	adds	r3, #24
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <_addEvent+0x114>)
 8000ba2:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[_calendarHead].next = -1;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <_addEvent+0x118>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	492f      	ldr	r1, [pc, #188]	; (8000c68 <_addEvent+0x11c>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3318      	adds	r3, #24
 8000bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e04a      	b.n	8000c54 <_addEvent+0x108>

	// if the calendar is not empty (or full), insert at end of list
	else
	{
		// find end of head
		tempEndOfHead = _calendarHead;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <_addEvent+0x118>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000bc4:	e009      	b.n	8000bda <_addEvent+0x8e>
			tempEndOfHead = _calendarEvents[tempEndOfHead].next;
 8000bc6:	4928      	ldr	r1, [pc, #160]	; (8000c68 <_addEvent+0x11c>)
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3318      	adds	r3, #24
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000bda:	4923      	ldr	r1, [pc, #140]	; (8000c68 <_addEvent+0x11c>)
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3318      	adds	r3, #24
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf0:	d1e9      	bne.n	8000bc6 <_addEvent+0x7a>

		// copy events into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <_addEvent+0x114>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <_addEvent+0x11c>)
 8000c00:	4413      	add	r3, r2
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f831 	bl	8000c6c <_copyEvent>

		// link into head list
		_calendarEvents[tempEndOfHead].next = _calendarFree;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_addEvent+0x114>)
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	4816      	ldr	r0, [pc, #88]	; (8000c68 <_addEvent+0x11c>)
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4613      	mov	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4403      	add	r3, r0
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	6019      	str	r1, [r3, #0]
		tempEndOfHead = _calendarFree;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <_addEvent+0x114>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]

		// set free to next free
			_calendarFree = _calendarEvents[_calendarFree].next;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <_addEvent+0x114>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	490f      	ldr	r1, [pc, #60]	; (8000c68 <_addEvent+0x11c>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3318      	adds	r3, #24
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <_addEvent+0x114>)
 8000c3c:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[tempEndOfHead].next = -1;
 8000c3e:	490a      	ldr	r1, [pc, #40]	; (8000c68 <_addEvent+0x11c>)
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4613      	mov	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	3318      	adds	r3, #24
 8000c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c52:	601a      	str	r2, [r3, #0]
	}

	// return okay
	return true;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20001c9c 	.word	0x20001c9c
 8000c64:	20000004 	.word	0x20000004
 8000c68:	2000009c 	.word	0x2000009c

08000c6c <_copyEvent>:

/*
 *
 */
void _copyEvent(CalendarEvent* to, CalendarEvent* from)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	785a      	ldrb	r2, [r3, #1]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	789a      	ldrb	r2, [r3, #2]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	78da      	ldrb	r2, [r3, #3]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	791a      	ldrb	r2, [r3, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	795a      	ldrb	r2, [r3, #5]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
	to->end.year = from->end.year;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	7b1a      	ldrb	r2, [r3, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	731a      	strb	r2, [r3, #12]
	to->end.month = from->end.month;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	7b5a      	ldrb	r2, [r3, #13]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	735a      	strb	r2, [r3, #13]
	to->end.day = from->end.day;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	7b9a      	ldrb	r2, [r3, #14]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	739a      	strb	r2, [r3, #14]
	to->end.hour = from->end.hour;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	7bda      	ldrb	r2, [r3, #15]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	73da      	strb	r2, [r3, #15]
	to->end.minute = from->end.minute;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	7c1a      	ldrb	r2, [r3, #16]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	741a      	strb	r2, [r3, #16]
	to->end.second = from->end.second;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	7c5a      	ldrb	r2, [r3, #17]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	745a      	strb	r2, [r3, #17]
	to->end_callback = from->end_callback;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	615a      	str	r2, [r3, #20]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	223c      	movs	r2, #60	; 0x3c
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fed8 	bl	8005ac4 <memcpy>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3304      	adds	r3, #4
 8000d36:	223c      	movs	r2, #60	; 0x3c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f004 fec2 	bl	8005ac4 <memcpy>
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <code_to_appActions>:

/*
 *
 */
AppActions code_to_appActions(char* code)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d50:	2204      	movs	r2, #4
 8000d52:	4925      	ldr	r1, [pc, #148]	; (8000de8 <code_to_appActions+0xa0>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f004 feff 	bl	8005b58 <strncmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e03c      	b.n	8000dde <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d64:	2204      	movs	r2, #4
 8000d66:	4921      	ldr	r1, [pc, #132]	; (8000dec <code_to_appActions+0xa4>)
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f004 fef5 	bl	8005b58 <strncmp>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8000d74:	2302      	movs	r3, #2
 8000d76:	e032      	b.n	8000dde <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d78:	2204      	movs	r2, #4
 8000d7a:	491d      	ldr	r1, [pc, #116]	; (8000df0 <code_to_appActions+0xa8>)
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f004 feeb 	bl	8005b58 <strncmp>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e028      	b.n	8000dde <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	4919      	ldr	r1, [pc, #100]	; (8000df4 <code_to_appActions+0xac>)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f004 fee1 	bl	8005b58 <strncmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e01e      	b.n	8000dde <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000da0:	2204      	movs	r2, #4
 8000da2:	4915      	ldr	r1, [pc, #84]	; (8000df8 <code_to_appActions+0xb0>)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f004 fed7 	bl	8005b58 <strncmp>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 8000db0:	2305      	movs	r3, #5
 8000db2:	e014      	b.n	8000dde <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_MESSAGE_HEADER_SIZE))
 8000db4:	2204      	movs	r2, #4
 8000db6:	4911      	ldr	r1, [pc, #68]	; (8000dfc <code_to_appActions+0xb4>)
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f004 fecd 	bl	8005b58 <strncmp>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	e00a      	b.n	8000dde <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_MESSAGE_HEADER_SIZE))
 8000dc8:	2204      	movs	r2, #4
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <code_to_appActions+0xb8>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f004 fec3 	bl	8005b58 <strncmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <code_to_appActions+0x94>
			return START_CALENDAR;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	e000      	b.n	8000dde <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	0800709c 	.word	0x0800709c
 8000dec:	080070a4 	.word	0x080070a4
 8000df0:	080070ac 	.word	0x080070ac
 8000df4:	080070b4 	.word	0x080070b4
 8000df8:	080070bc 	.word	0x080070bc
 8000dfc:	080070c4 	.word	0x080070c4
 8000e00:	080070cc 	.word	0x080070cc

08000e04 <parseDateTime>:

/*
 *
 */
void parseDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	// parse year
	dateTime->year = atoi(strtok(data, ";"));
 8000e0e:	4926      	ldr	r1, [pc, #152]	; (8000ea8 <parseDateTime+0xa4>)
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f004 feb5 	bl	8005b80 <strtok>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fe25 	bl	8005a68 <atoi>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	701a      	strb	r2, [r3, #0]

	// parse month
	dateTime->month = atoi(strtok(NULL, ";"));
 8000e26:	4920      	ldr	r1, [pc, #128]	; (8000ea8 <parseDateTime+0xa4>)
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f004 fea9 	bl	8005b80 <strtok>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 fe19 	bl	8005a68 <atoi>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	705a      	strb	r2, [r3, #1]

	// parse date
	dateTime->day = atoi(strtok(NULL, ";"));
 8000e3e:	491a      	ldr	r1, [pc, #104]	; (8000ea8 <parseDateTime+0xa4>)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f004 fe9d 	bl	8005b80 <strtok>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fe0d 	bl	8005a68 <atoi>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	709a      	strb	r2, [r3, #2]

	// parse hour
	dateTime->hour = atoi(strtok(NULL, ";"));
 8000e56:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <parseDateTime+0xa4>)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f004 fe91 	bl	8005b80 <strtok>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fe01 	bl	8005a68 <atoi>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	70da      	strb	r2, [r3, #3]

	// parse minute
	dateTime->minute = atoi(strtok(NULL, ";"));
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <parseDateTime+0xa4>)
 8000e70:	2000      	movs	r0, #0
 8000e72:	f004 fe85 	bl	8005b80 <strtok>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fdf5 	bl	8005a68 <atoi>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	711a      	strb	r2, [r3, #4]

	// parse second
	dateTime->second = atoi(strtok(NULL, ";"));
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <parseDateTime+0xa4>)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f004 fe79 	bl	8005b80 <strtok>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fde9 	bl	8005a68 <atoi>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	715a      	strb	r2, [r3, #5]
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	080070d4 	.word	0x080070d4

08000eac <formatDateTime>:

/*
 *
 */
void formatDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af06      	add	r7, sp, #24
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	memset(data, 0, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000eb6:	223c      	movs	r2, #60	; 0x3c
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f004 fe10 	bl	8005ae0 <memset>
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	4619      	mov	r1, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	78db      	ldrb	r3, [r3, #3]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ed6:	4618      	mov	r0, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	791b      	ldrb	r3, [r3, #4]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000edc:	461c      	mov	r4, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	795b      	ldrb	r3, [r3, #5]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ee2:	9304      	str	r3, [sp, #16]
 8000ee4:	9403      	str	r4, [sp, #12]
 8000ee6:	9002      	str	r0, [sp, #8]
 8000ee8:	9101      	str	r1, [sp, #4]
 8000eea:	9200      	str	r2, [sp, #0]
 8000eec:	462b      	mov	r3, r5
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <formatDateTime+0x54>)
 8000ef0:	213c      	movs	r1, #60	; 0x3c
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f004 fdfc 	bl	8005af0 <sniprintf>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bdb0      	pop	{r4, r5, r7, pc}
 8000f00:	080070d8 	.word	0x080070d8

08000f04 <parseEvent>:

/*
 *
 */
void parseEvent(char data[UART_MESSAGE_BODY_SIZE], CalendarEvent* event)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	// parse start year
	event->start.year = atoi(strtok(data, ";"));
 8000f0e:	494a      	ldr	r1, [pc, #296]	; (8001038 <parseEvent+0x134>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f004 fe35 	bl	8005b80 <strtok>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fda5 	bl	8005a68 <atoi>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	701a      	strb	r2, [r3, #0]

	// parse start month
	event->start.month = atoi(strtok(NULL, ";"));
 8000f26:	4944      	ldr	r1, [pc, #272]	; (8001038 <parseEvent+0x134>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f004 fe29 	bl	8005b80 <strtok>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fd99 	bl	8005a68 <atoi>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	705a      	strb	r2, [r3, #1]

	// parse start date
	event->start.day = atoi(strtok(NULL, ";"));
 8000f3e:	493e      	ldr	r1, [pc, #248]	; (8001038 <parseEvent+0x134>)
 8000f40:	2000      	movs	r0, #0
 8000f42:	f004 fe1d 	bl	8005b80 <strtok>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 fd8d 	bl	8005a68 <atoi>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	709a      	strb	r2, [r3, #2]

	// parse start hour
	event->start.hour = atoi(strtok(NULL, ";"));
 8000f56:	4938      	ldr	r1, [pc, #224]	; (8001038 <parseEvent+0x134>)
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f004 fe11 	bl	8005b80 <strtok>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 fd81 	bl	8005a68 <atoi>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	70da      	strb	r2, [r3, #3]

	// parse start minute
	event->start.minute = atoi(strtok(NULL, ";"));
 8000f6e:	4932      	ldr	r1, [pc, #200]	; (8001038 <parseEvent+0x134>)
 8000f70:	2000      	movs	r0, #0
 8000f72:	f004 fe05 	bl	8005b80 <strtok>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fd75 	bl	8005a68 <atoi>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	711a      	strb	r2, [r3, #4]

	// parse start second
	event->start.second = atoi(strtok(NULL, ";"));
 8000f86:	492c      	ldr	r1, [pc, #176]	; (8001038 <parseEvent+0x134>)
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f004 fdf9 	bl	8005b80 <strtok>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 fd69 	bl	8005a68 <atoi>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	715a      	strb	r2, [r3, #5]

	// parse end year
	event->end.year = atoi(strtok(NULL, ";"));
 8000f9e:	4926      	ldr	r1, [pc, #152]	; (8001038 <parseEvent+0x134>)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f004 fded 	bl	8005b80 <strtok>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 fd5d 	bl	8005a68 <atoi>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	731a      	strb	r2, [r3, #12]

	// parse end month
	event->end.month = atoi(strtok(NULL, ";"));
 8000fb6:	4920      	ldr	r1, [pc, #128]	; (8001038 <parseEvent+0x134>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f004 fde1 	bl	8005b80 <strtok>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fd51 	bl	8005a68 <atoi>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	735a      	strb	r2, [r3, #13]

	// parse end date
	event->end.day = atoi(strtok(NULL, ";"));
 8000fce:	491a      	ldr	r1, [pc, #104]	; (8001038 <parseEvent+0x134>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f004 fdd5 	bl	8005b80 <strtok>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fd45 	bl	8005a68 <atoi>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	739a      	strb	r2, [r3, #14]

	// parse end hour
	event->end.hour = atoi(strtok(NULL, ";"));
 8000fe6:	4914      	ldr	r1, [pc, #80]	; (8001038 <parseEvent+0x134>)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f004 fdc9 	bl	8005b80 <strtok>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fd39 	bl	8005a68 <atoi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	73da      	strb	r2, [r3, #15]

	// parse end minute
	event->end.minute = atoi(strtok(NULL, ";"));
 8000ffe:	490e      	ldr	r1, [pc, #56]	; (8001038 <parseEvent+0x134>)
 8001000:	2000      	movs	r0, #0
 8001002:	f004 fdbd 	bl	8005b80 <strtok>
 8001006:	4603      	mov	r3, r0
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fd2d 	bl	8005a68 <atoi>
 800100e:	4603      	mov	r3, r0
 8001010:	b2da      	uxtb	r2, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	741a      	strb	r2, [r3, #16]

	// parse end second
	event->end.second = atoi(strtok(NULL, ";"));
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <parseEvent+0x134>)
 8001018:	2000      	movs	r0, #0
 800101a:	f004 fdb1 	bl	8005b80 <strtok>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fd21 	bl	8005a68 <atoi>
 8001026:	4603      	mov	r3, r0
 8001028:	b2da      	uxtb	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	745a      	strb	r2, [r3, #17]
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	080070d4 	.word	0x080070d4

0800103c <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fa6d 	bl	8001524 <com_transport_init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <com_session_init+0x24>
	{
		_sessionOpen = false;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <com_session_init+0x30>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <com_session_init+0x34>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		return true;
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <com_session_init+0x26>
	}

	else
	{
		return false;
 8001060:	2300      	movs	r3, #0
	}
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20001ca0 	.word	0x20001ca0
 8001070:	20001ca1 	.word	0x20001ca1

08001074 <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <start_session+0x48>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d016      	beq.n	80010b0 <start_session+0x3c>
	{
		if (!_sessionOpen)
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <start_session+0x4c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f083 0301 	eor.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00d      	beq.n	80010ac <start_session+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8001090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001094:	f000 f850 	bl	8001138 <_handshake>
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <start_session+0x34>
				_sessionOpen = true;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <start_session+0x4c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	e002      	b.n	80010b2 <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80010b0:	2303      	movs	r3, #3
	}
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20001ca1 	.word	0x20001ca1
 80010c0:	20001ca0 	.word	0x20001ca0

080010c4 <session_cycle>:

/*
 *
 */
SESSION_STATUS session_cycle(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	if (_sessionInit)
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <session_cycle+0x28>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <session_cycle+0x20>
	{
		if (_sessionOpen)
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <session_cycle+0x2c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <session_cycle+0x1c>
		{
			return _session_cycle();
 80010d8:	f000 f916 	bl	8001308 <_session_cycle>
 80010dc:	4603      	mov	r3, r0
 80010de:	e002      	b.n	80010e6 <session_cycle+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 80010e0:	2304      	movs	r3, #4
 80010e2:	e000      	b.n	80010e6 <session_cycle+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80010e4:	2303      	movs	r3, #3
	}
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001ca1 	.word	0x20001ca1
 80010f0:	20001ca0 	.word	0x20001ca0

080010f4 <tell>:

/*
 *
 */
SESSION_STATUS tell(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	TRANSPORT_STATUS transportStatus;

	if (_sessionInit)
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <tell+0x3c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00e      	beq.n	8001124 <tell+0x30>
	{
		if (_sessionOpen)
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <tell+0x40>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d008      	beq.n	8001120 <tell+0x2c>
		{
			// enqueue message
			if (queue_tx(header, body) != TRANSPORT_OKAY)
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fa25 	bl	8001560 <queue_tx>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <tell+0x34>
			{
				return SESSION_BUSY;
 800111c:	2305      	movs	r3, #5
 800111e:	e003      	b.n	8001128 <tell+0x34>
//			}
		}

		else
		{
			return SESSION_NOT_OPEN;
 8001120:	2304      	movs	r3, #4
 8001122:	e001      	b.n	8001128 <tell+0x34>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8001124:	2303      	movs	r3, #3
 8001126:	e7ff      	b.n	8001128 <tell+0x34>
	}
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20001ca1 	.word	0x20001ca1
 8001134:	20001ca0 	.word	0x20001ca0

08001138 <_handshake>:

/*
 *
 */
SESSION_STATUS _handshake(unsigned int timeout_ms)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8001150:	2300      	movs	r3, #0
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2238      	movs	r2, #56	; 0x38
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fcbd 	bl	8005ae0 <memset>

	while (!success && !error)
 8001166:	e0a2      	b.n	80012ae <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 8001168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800116a:	2b00      	cmp	r3, #0
 800116c:	d106      	bne.n	800117c <_handshake+0x44>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fa8e 	bl	8001690 <rx>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800117a:	e063      	b.n	8001244 <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 800117c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10b      	bne.n	800119a <_handshake+0x62>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8001182:	f107 0208 	add.w	r2, r7, #8
 8001186:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fa0d 	bl	80015ac <dequeue_rx>
 8001192:	4603      	mov	r3, r0
 8001194:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001198:	e054      	b.n	8001244 <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 800119a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800119c:	2b02      	cmp	r3, #2
 800119e:	d10d      	bne.n	80011bc <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 80011a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011a4:	2204      	movs	r2, #4
 80011a6:	4955      	ldr	r1, [pc, #340]	; (80012fc <_handshake+0x1c4>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fcd5 	bl	8005b58 <strncmp>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d047      	beq.n	8001244 <_handshake+0x10c>
			{
				error = true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80011ba:	e043      	b.n	8001244 <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 80011bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d110      	bne.n	80011e4 <_handshake+0xac>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	223c      	movs	r2, #60	; 0x3c
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fc88 	bl	8005ae0 <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	484a      	ldr	r0, [pc, #296]	; (8001300 <_handshake+0x1c8>)
 80011d8:	f000 f9c2 	bl	8001560 <queue_tx>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80011e2:	e02f      	b.n	8001244 <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 80011e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d106      	bne.n	80011f8 <_handshake+0xc0>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f000 fa16 	bl	800161c <tx>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80011f6:	e025      	b.n	8001244 <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 80011f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d106      	bne.n	800120c <_handshake+0xd4>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 80011fe:	20fa      	movs	r0, #250	; 0xfa
 8001200:	f000 fa46 	bl	8001690 <rx>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800120a:	e01b      	b.n	8001244 <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 800120c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800120e:	2b06      	cmp	r3, #6
 8001210:	d10b      	bne.n	800122a <_handshake+0xf2>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8001212:	f107 0208 	add.w	r2, r7, #8
 8001216:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f9c5 	bl	80015ac <dequeue_rx>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001228:	e00c      	b.n	8001244 <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 800122a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800122e:	2204      	movs	r2, #4
 8001230:	4934      	ldr	r1, [pc, #208]	; (8001304 <_handshake+0x1cc>)
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fc90 	bl	8005b58 <strncmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <_handshake+0x10c>
			{
				error = true;
 800123e:	2301      	movs	r3, #1
 8001240:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8001244:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001248:	2b00      	cmp	r3, #0
 800124a:	d12d      	bne.n	80012a8 <_handshake+0x170>
		{
			if (state == 0)
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <_handshake+0x120>
				state = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001256:	e02a      	b.n	80012ae <_handshake+0x176>
			else if (state == 1)
 8001258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <_handshake+0x12c>
				state = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001262:	e024      	b.n	80012ae <_handshake+0x176>
			else if (state == 2)
 8001264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001266:	2b02      	cmp	r3, #2
 8001268:	d102      	bne.n	8001270 <_handshake+0x138>
				state = 3;
 800126a:	2303      	movs	r3, #3
 800126c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800126e:	e01e      	b.n	80012ae <_handshake+0x176>
			else if (state == 3)
 8001270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001272:	2b03      	cmp	r3, #3
 8001274:	d102      	bne.n	800127c <_handshake+0x144>
				state = 4;
 8001276:	2304      	movs	r3, #4
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800127a:	e018      	b.n	80012ae <_handshake+0x176>
			else if (state == 4)
 800127c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127e:	2b04      	cmp	r3, #4
 8001280:	d102      	bne.n	8001288 <_handshake+0x150>
				state = 5;
 8001282:	2305      	movs	r3, #5
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001286:	e012      	b.n	80012ae <_handshake+0x176>
			else if (state == 5)
 8001288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800128a:	2b05      	cmp	r3, #5
 800128c:	d102      	bne.n	8001294 <_handshake+0x15c>
				state = 6;
 800128e:	2306      	movs	r3, #6
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001292:	e00c      	b.n	80012ae <_handshake+0x176>
			else if (state == 6)
 8001294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001296:	2b06      	cmp	r3, #6
 8001298:	d102      	bne.n	80012a0 <_handshake+0x168>
				state = 7;
 800129a:	2307      	movs	r3, #7
 800129c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800129e:	e006      	b.n	80012ae <_handshake+0x176>
			else // if (state == 7)
				success = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80012a6:	e002      	b.n	80012ae <_handshake+0x176>
		}
		else
		{
			error = true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 80012ae:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d007      	beq.n	80012cc <_handshake+0x194>
 80012bc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f47f af4e 	bne.w	8001168 <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 80012cc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <_handshake+0x1ae>
 80012d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012d8:	f083 0301 	eor.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e006      	b.n	80012f4 <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 80012e6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 80012f2:	2302      	movs	r3, #2
		}
	}
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3750      	adds	r7, #80	; 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	080070ec 	.word	0x080070ec
 8001300:	080070f4 	.word	0x080070f4
 8001304:	080070fc 	.word	0x080070fc

08001308 <_session_cycle>:

/*
 *
 */
SESSION_STATUS _session_cycle(void)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b092      	sub	sp, #72	; 0x48
 800130c:	af00      	add	r7, sp, #0
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 800130e:	2300      	movs	r3, #0
 8001310:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2238      	movs	r2, #56	; 0x38
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fbde 	bl	8005ae0 <memset>
	SESSION_STATUS status;

	// Perform Tx message phase of session cycle.
	status = _tell();
 8001324:	f000 f8b0 	bl	8001488 <_tell>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Perform Rx message phase of session cycle.
	status = _listen();
 800132e:	f000 f859 	bl	80013e4 <_listen>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 8001338:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800133c:	2b02      	cmp	r3, #2
 800133e:	d101      	bne.n	8001344 <_session_cycle+0x3c>
	{
		return SESSION_ERROR;
 8001340:	2302      	movs	r3, #2
 8001342:	e03e      	b.n	80013c2 <_session_cycle+0xba>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 8001344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001348:	2b00      	cmp	r3, #0
 800134a:	d139      	bne.n	80013c0 <_session_cycle+0xb8>
	{
		// dequeue received message
		dequeue_rx(messageHeader, messageBody);
 800134c:	1d3a      	adds	r2, r7, #4
 800134e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f929 	bl	80015ac <dequeue_rx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_MESSAGE_HEADER_SIZE))
 800135a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800135e:	2204      	movs	r2, #4
 8001360:	491a      	ldr	r1, [pc, #104]	; (80013cc <_session_cycle+0xc4>)
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fbf8 	bl	8005b58 <strncmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <_session_cycle+0x6e>
		{
			_sessionOpen = false;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <_session_cycle+0xc8>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	e024      	b.n	80013c0 <_session_cycle+0xb8>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_MESSAGE_HEADER_SIZE))
 8001376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137a:	2204      	movs	r2, #4
 800137c:	4915      	ldr	r1, [pc, #84]	; (80013d4 <_session_cycle+0xcc>)
 800137e:	4618      	mov	r0, r3
 8001380:	f004 fbea 	bl	8005b58 <strncmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <_session_cycle+0x92>
		{
			tell(messageHeader, messageBody);
 800138a:	1d3a      	adds	r2, r7, #4
 800138c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff feae 	bl	80010f4 <tell>
 8001398:	e012      	b.n	80013c0 <_session_cycle+0xb8>
 800139a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <_session_cycle+0xd0>)
 800139e:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <_session_cycle+0xd4>)
 80013a2:	461d      	mov	r5, r3
 80013a4:	1d3c      	adds	r4, r7, #4
 80013a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <_session_cycle+0xd8>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
		}
	}

	return SESSION_OKAY;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3748      	adds	r7, #72	; 0x48
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08007104 	.word	0x08007104
 80013d0:	20001ca0 	.word	0x20001ca0
 80013d4:	0800710c 	.word	0x0800710c
 80013d8:	20001ca4 	.word	0x20001ca4
 80013dc:	20001ca8 	.word	0x20001ca8
 80013e0:	20001ce4 	.word	0x20001ce4

080013e4 <_listen>:

/*
 *
 */
SESSION_STATUS _listen(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b090      	sub	sp, #64	; 0x40
 80013e8:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2238      	movs	r2, #56	; 0x38
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 fb73 	bl	8005ae0 <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 80013fa:	463b      	mov	r3, r7
 80013fc:	223c      	movs	r2, #60	; 0x3c
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f004 fb6d 	bl	8005ae0 <memset>
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "Clear to send!\n");
 8001406:	463b      	mov	r3, r7
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <_listen+0x9c>)
 800140a:	213c      	movs	r1, #60	; 0x3c
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fb6f 	bl	8005af0 <sniprintf>
	transportStatus = queue_tx(CTS_HEADER, messageBody);
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <_listen+0xa0>)
 8001418:	f000 f8a2 	bl	8001560 <queue_tx>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 8001422:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <_listen+0x4a>
	{
		return SESSION_ERROR;
 800142a:	2302      	movs	r3, #2
 800142c:	e024      	b.n	8001478 <_listen+0x94>
	}

	transportStatus = tx(TX_TIMEOUT_MS);
 800142e:	2064      	movs	r0, #100	; 0x64
 8001430:	f000 f8f4 	bl	800161c <tx>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 800143a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 8001442:	2301      	movs	r3, #1
 8001444:	e018      	b.n	8001478 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8001446:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <_listen+0x6e>
	{
		return SESSION_ERROR;
 800144e:	2302      	movs	r3, #2
 8001450:	e012      	b.n	8001478 <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = rx(RX_TIMEOUT_MS);
 8001452:	20fa      	movs	r0, #250	; 0xfa
 8001454:	f000 f91c 	bl	8001690 <rx>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 800145e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 8001466:	2301      	movs	r3, #1
 8001468:	e006      	b.n	8001478 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 800146a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <_listen+0x92>
	{
		return SESSION_ERROR;
 8001472:	2302      	movs	r3, #2
 8001474:	e000      	b.n	8001478 <_listen+0x94>
	}

	return SESSION_OKAY;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3740      	adds	r7, #64	; 0x40
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	08007114 	.word	0x08007114
 8001484:	08007124 	.word	0x08007124

08001488 <_tell>:

/*
 *
 */
SESSION_STATUS _tell(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;

	transportStatus = tx(TX_TIMEOUT_MS);
 800148e:	2064      	movs	r0, #100	; 0x64
 8001490:	f000 f8c4 	bl	800161c <tx>
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]

	if (transportStatus == TRANSPORT_OKAY)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <_tell+0x1a>
	{
		return SESSION_OKAY;
 800149e:	2300      	movs	r3, #0
 80014a0:	e005      	b.n	80014ae <_tell+0x26>
	}
	else if (transportStatus == TRANSPORT_TIMEOUT)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <_tell+0x24>
	{
		return SESSION_TIMEOUT;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <_tell+0x26>
	}
	else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
	{
		return SESSION_ERROR;
 80014ac:	2302      	movs	r3, #2
	}
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <getCommand>:

/*
 *
 */
SESSION_STATUS getCommand(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	if (_messageReady)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <getCommand+0x60>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d020      	beq.n	800150c <getCommand+0x54>
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <getCommand+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(header, _messageCommand, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
		memcpy(body, _messageData, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <getCommand+0x68>)
 80014d6:	4614      	mov	r4, r2
 80014d8:	469c      	mov	ip, r3
 80014da:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014de:	4665      	mov	r5, ip
 80014e0:	4626      	mov	r6, r4
 80014e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014e4:	6028      	str	r0, [r5, #0]
 80014e6:	6069      	str	r1, [r5, #4]
 80014e8:	60aa      	str	r2, [r5, #8]
 80014ea:	60eb      	str	r3, [r5, #12]
 80014ec:	3410      	adds	r4, #16
 80014ee:	f10c 0c10 	add.w	ip, ip, #16
 80014f2:	4574      	cmp	r4, lr
 80014f4:	d1f3      	bne.n	80014de <getCommand+0x26>
 80014f6:	4665      	mov	r5, ip
 80014f8:	4623      	mov	r3, r4
 80014fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014fc:	6028      	str	r0, [r5, #0]
 80014fe:	6069      	str	r1, [r5, #4]
 8001500:	60aa      	str	r2, [r5, #8]
		_messageReady = false;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <getCommand+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]

		return SESSION_OKAY;
 8001508:	2300      	movs	r3, #0
 800150a:	e000      	b.n	800150e <getCommand+0x56>
	}

	else
	{
		return SESSION_ERROR;
 800150c:	2302      	movs	r3, #2
	}
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001516:	bf00      	nop
 8001518:	20001ce4 	.word	0x20001ce4
 800151c:	20001ca4 	.word	0x20001ca4
 8001520:	20001ca8 	.word	0x20001ca8

08001524 <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00a      	beq.n	8001548 <com_transport_init+0x24>
	{
		_uartHandle = huart;
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <com_transport_init+0x30>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <com_transport_init+0x34>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <com_transport_init+0x38>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		return true;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <com_transport_init+0x26>
	}

	else
	{
		return false;
 8001548:	2300      	movs	r3, #0
	}
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20001ce8 	.word	0x20001ce8
 8001558:	20001d6c 	.word	0x20001d6c
 800155c:	20001d6d 	.word	0x20001d6d

08001560 <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <queue_tx+0x40>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d010      	beq.n	8001594 <queue_tx+0x34>
	{
		if (_txBuffer_full)
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <queue_tx+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 800157c:	2304      	movs	r3, #4
 800157e:	e00a      	b.n	8001596 <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <queue_tx+0x48>)
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fbb3 	bl	8000cf0 <composeMessage>
			_txBuffer_full = true;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <queue_tx+0x44>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8001590:	2300      	movs	r3, #0
 8001592:	e000      	b.n	8001596 <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001594:	2308      	movs	r3, #8
	}
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20001ce8 	.word	0x20001ce8
 80015a4:	20001d6c 	.word	0x20001d6c
 80015a8:	20001cec 	.word	0x20001cec

080015ac <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b092      	sub	sp, #72	; 0x48
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <dequeue_rx+0x64>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d023      	beq.n	8001606 <dequeue_rx+0x5a>
	{
		if (!_rxBuffer_full)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <dequeue_rx+0x68>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f083 0301 	eor.w	r3, r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 80015ce:	2306      	movs	r3, #6
 80015d0:	e01a      	b.n	8001608 <dequeue_rx+0x5c>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <dequeue_rx+0x6c>)
 80015d4:	f107 0408 	add.w	r4, r7, #8
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <dequeue_rx+0x68>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	461a      	mov	r2, r3
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fb8d 	bl	8000d1c <decomposeMessage>

			return TRANSPORT_OKAY;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <dequeue_rx+0x5c>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001606:	2308      	movs	r3, #8
	}
}
 8001608:	4618      	mov	r0, r3
 800160a:	3748      	adds	r7, #72	; 0x48
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	20001ce8 	.word	0x20001ce8
 8001614:	20001d6d 	.word	0x20001d6d
 8001618:	20001d2c 	.word	0x20001d2c

0800161c <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <tx+0x68>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d026      	beq.n	800167a <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <tx+0x6c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 800163c:	2305      	movs	r3, #5
 800163e:	e01d      	b.n	800167c <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <tx+0x68>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	4910      	ldr	r1, [pc, #64]	; (800168c <tx+0x70>)
 800164a:	f003 fb97 	bl	8004d7c <HAL_UART_Transmit>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <tx+0x40>
		{
			return TRANSPORT_ERROR;
 8001658:	2302      	movs	r3, #2
 800165a:	e00f      	b.n	800167c <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d101      	bne.n	8001666 <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 8001662:	2301      	movs	r3, #1
 8001664:	e00a      	b.n	800167c <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d101      	bne.n	8001670 <tx+0x54>
		{
			return TRANSPORT_BUSY;
 800166c:	2303      	movs	r3, #3
 800166e:	e005      	b.n	800167c <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <tx+0x6c>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 800167a:	2308      	movs	r3, #8
	}
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20001ce8 	.word	0x20001ce8
 8001688:	20001d6c 	.word	0x20001d6c
 800168c:	20001cec 	.word	0x20001cec

08001690 <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <rx+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <rx+0x68>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 80016aa:	2307      	movs	r3, #7
 80016ac:	e01d      	b.n	80016ea <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <rx+0x64>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2240      	movs	r2, #64	; 0x40
 80016b6:	4911      	ldr	r1, [pc, #68]	; (80016fc <rx+0x6c>)
 80016b8:	f003 fbe6 	bl	8004e88 <HAL_UART_Receive>
 80016bc:	4603      	mov	r3, r0
 80016be:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 80016c6:	2302      	movs	r3, #2
 80016c8:	e00f      	b.n	80016ea <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d101      	bne.n	80016d4 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e00a      	b.n	80016ea <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d101      	bne.n	80016de <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 80016da:	2303      	movs	r3, #3
 80016dc:	e005      	b.n	80016ea <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <rx+0x68>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80016e8:	2308      	movs	r3, #8
	}
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20001ce8 	.word	0x20001ce8
 80016f8:	20001d6d 	.word	0x20001d6d
 80016fc:	20001d2c 	.word	0x20001d2c

08001700 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800170e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001724:	68fb      	ldr	r3, [r7, #12]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	d101      	bne.n	800174c <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	43db      	mvns	r3, r3
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	4013      	ands	r3, r2
 8001770:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8001786:	2002      	movs	r0, #2
 8001788:	f7ff ffd2 	bl	8001730 <LL_AHB2_GRP1_IsEnabledClock>
 800178c:	4603      	mov	r3, r0
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <activate_led+0x60>)
 8001790:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <activate_led+0x60>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	2002      	movs	r0, #2
 800179c:	f7ff ffb0 	bl	8001700 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <activate_led+0x64>)
 80017c4:	f001 f81c 	bl	8002800 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4619      	mov	r1, r3
 80017ce:	4804      	ldr	r0, [pc, #16]	; (80017e0 <activate_led+0x64>)
 80017d0:	f001 fa44 	bl	8002c5c <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20001d70 	.word	0x20001d70
 80017e0:	48000400 	.word	0x48000400

080017e4 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <deactivate_led+0x38>)
 80017f6:	f001 fa31 	bl	8002c5c <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <deactivate_led+0x38>)
 8001800:	f001 f95e 	bl	8002ac0 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <deactivate_led+0x3c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 800180c:	2002      	movs	r0, #2
 800180e:	f7ff ffa3 	bl	8001758 <LL_AHB2_GRP1_DisableClock>
  }
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	48000400 	.word	0x48000400
 8001820:	20001d70 	.word	0x20001d70

08001824 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800182c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	f023 0218 	bic.w	r2, r3, #24
 8001838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4313      	orrs	r3, r2
 8001840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <LL_AHB2_GRP1_EnableClock>:
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800185c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8001886:	f7fe ffdb 	bl	8000840 <calendar_AlarmA_ISR>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <event_start>:

void event_start(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	activate_led(GPIO_PIN_15);
 8001898:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800189c:	f7ff ff6e 	bl	800177c <activate_led>
	// note: it is not recommended to send over serial while in ISR!!
	tell("MESG", "EVENT START\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 80018a0:	4902      	ldr	r1, [pc, #8]	; (80018ac <event_start+0x18>)
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <event_start+0x1c>)
 80018a4:	f7ff fc26 	bl	80010f4 <tell>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	0800712c 	.word	0x0800712c
 80018b0:	08007170 	.word	0x08007170

080018b4 <event_end>:

void event_end(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	deactivate_led(GPIO_PIN_15);
 80018b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018bc:	f7ff ff92 	bl	80017e4 <deactivate_led>
	// note: it is not recommended to send over serial while in ISR!!
	tell("MESG", "EVENT END\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 80018c0:	4902      	ldr	r1, [pc, #8]	; (80018cc <event_end+0x18>)
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <event_end+0x1c>)
 80018c4:	f7ff fc16 	bl	80010f4 <tell>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	08007178 	.word	0x08007178
 80018d0:	08007170 	.word	0x08007170

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b09a      	sub	sp, #104	; 0x68
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018da:	f000 fe0f 	bl	80024fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018de:	f000 f8b9 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e2:	f000 fa09 	bl	8001cf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018e6:	f000 f9b1 	bl	8001c4c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80018ea:	f000 f911 	bl	8001b10 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f001 f9f4 	bl	8002cdc <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 80018f4:	4852      	ldr	r0, [pc, #328]	; (8001a40 <main+0x16c>)
 80018f6:	f7ff fba1 	bl	800103c <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 80018fa:	4852      	ldr	r0, [pc, #328]	; (8001a44 <main+0x170>)
 80018fc:	f7fe fe18 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8001900:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 800190a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800190e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001912:	f7fe fe8f 	bl	8000634 <calendar_setDateTime>

  // start calendar
//  calendar_start();

  // begin listening for messages from desktop
  if (start_session() == SESSION_OKAY)
 8001916:	f7ff fbad 	bl	8001074 <start_session>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <main+0x54>
  {
	  activate_led(GREEN_LED);
 8001920:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001924:	f7ff ff2a 	bl	800177c <activate_led>
  }

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  AppActions commandCode;
  DateTime newDateTime = {0};
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	809a      	strh	r2, [r3, #4]
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 8001932:	f7fe fec9 	bl	80006c8 <calendar_handleAlarm>

	  // try to open connection if not present
	  if (start_session() == SESSION_OKAY)
 8001936:	f7ff fb9d 	bl	8001074 <start_session>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <main+0x74>
	  {
		  activate_led(GREEN_LED);
 8001940:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001944:	f7ff ff1a 	bl	800177c <activate_led>
	  }

	  // if message present, handle message
	  if (session_cycle() != SESSION_OKAY)
 8001948:	f7ff fbbc 	bl	80010c4 <session_cycle>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <main+0x86>
	  {
		  activate_led(RED_LED);
 8001952:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001956:	f7ff ff11 	bl	800177c <activate_led>
	  }

	  // get command if present
	  if (getCommand(messageHeader, messageBody) == SESSION_OKAY)
 800195a:	f107 0220 	add.w	r2, r7, #32
 800195e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fda7 	bl	80014b8 <getCommand>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e0      	bne.n	8001932 <main+0x5e>
	  {
		  // execute command
		  commandCode = code_to_appActions(messageHeader);
 8001970:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9e7 	bl	8000d48 <code_to_appActions>
 800197a:	4603      	mov	r3, r0
 800197c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  // set date/time
		  if (commandCode == SET_CALENDAR_DATETIME)
 8001980:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001984:	2b01      	cmp	r3, #1
 8001986:	d10e      	bne.n	80019a6 <main+0xd2>
		  {
			  parseDateTime(messageBody, &newDateTime);
 8001988:	f107 0218 	add.w	r2, r7, #24
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fa36 	bl	8000e04 <parseDateTime>
			  calendar_setDateTime(newDateTime);
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019a0:	f7fe fe48 	bl	8000634 <calendar_setDateTime>
 80019a4:	e7c5      	b.n	8001932 <main+0x5e>
		  }

		  // get date/time
		  else if (commandCode == GET_CALENDAR_DATETIME)
 80019a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d117      	bne.n	80019de <main+0x10a>
		  {
			  calendar_getDateTime(&newDateTime);
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fe54 	bl	8000660 <calendar_getDateTime>
			  formatDateTime(messageBody, &newDateTime);
 80019b8:	f107 0218 	add.w	r2, r7, #24
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fa72 	bl	8000eac <formatDateTime>
			  memcpy(messageHeader, "ECHO", UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <main+0x174>)
 80019ca:	65fb      	str	r3, [r7, #92]	; 0x5c
			  tell(messageHeader, messageBody);
 80019cc:	f107 0220 	add.w	r2, r7, #32
 80019d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb8c 	bl	80010f4 <tell>
 80019dc:	e7a9      	b.n	8001932 <main+0x5e>
		  }

		  // add event
		  else if (commandCode == ADD_CALENDAR_EVENT)
 80019de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d117      	bne.n	8001a16 <main+0x142>
		  {
			  CalendarEvent tempEvent = {0};
 80019e6:	463b      	mov	r3, r7
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	615a      	str	r2, [r3, #20]
			  parseEvent(messageBody, &tempEvent);
 80019f6:	463a      	mov	r2, r7
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa80 	bl	8000f04 <parseEvent>
			  tempEvent.start_callback = &(event_start);
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <main+0x178>)
 8001a06:	60bb      	str	r3, [r7, #8]
			  tempEvent.end_callback = &(event_end);
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <main+0x17c>)
 8001a0a:	617b      	str	r3, [r7, #20]
			  calendar_addEvent(&tempEvent);
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fe40 	bl	8000694 <calendar_addEvent>
 8001a14:	e78d      	b.n	8001932 <main+0x5e>
		  }

		  // get/view event
		  else if (commandCode == GET_CALENDAR_EVENT)
 8001a16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d089      	beq.n	8001932 <main+0x5e>
		  {

		  }

		  // remove event
		  else if (commandCode == REMOVE_CALENDAR_EVENT)
 8001a1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d085      	beq.n	8001932 <main+0x5e>
		  {

		  }

		  // clear all events
		  else if (commandCode == CLEAR_CALENDAR_EVENTS)
 8001a26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d081      	beq.n	8001932 <main+0x5e>
		  {

		  }

		  // start calendar
		  else if (commandCode == START_CALENDAR)
 8001a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	f47f af7d 	bne.w	8001932 <main+0x5e>
		  {
			  calendar_start();
 8001a38:	f7fe fdbe 	bl	80005b8 <calendar_start>
	  calendar_handleAlarm();
 8001a3c:	e779      	b.n	8001932 <main+0x5e>
 8001a3e:	bf00      	nop
 8001a40:	20001dac 	.word	0x20001dac
 8001a44:	20001d74 	.word	0x20001d74
 8001a48:	4f484345 	.word	0x4f484345
 8001a4c:	08001895 	.word	0x08001895
 8001a50:	080018b5 	.word	0x080018b5

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b09a      	sub	sp, #104	; 0x68
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	2248      	movs	r2, #72	; 0x48
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 f83c 	bl	8005ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a7a:	f001 f907 	bl	8002c8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fed0 	bl	8001824 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <SystemClock_Config+0xb8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <SystemClock_Config+0xb8>)
 8001a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <SystemClock_Config+0xb8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001aa0:	232c      	movs	r3, #44	; 0x2c
 8001aa2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aa4:	2381      	movs	r3, #129	; 0x81
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fbcb 	bl	8003260 <HAL_RCC_OscConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001ad0:	f000 f91f 	bl	8001d12 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001ad4:	236f      	movs	r3, #111	; 0x6f
 8001ad6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 ff35 	bl	8003964 <HAL_RCC_ClockConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b00:	f000 f907 	bl	8001d12 <Error_Handler>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3768      	adds	r7, #104	; 0x68
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58000400 	.word	0x58000400

08001b10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b092      	sub	sp, #72	; 0x48
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	222c      	movs	r2, #44	; 0x2c
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 ffd5 	bl	8005ae0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b38:	4a43      	ldr	r2, [pc, #268]	; (8001c48 <MX_RTC_Init+0x138>)
 8001b3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b44:	227f      	movs	r2, #127	; 0x7f
 8001b46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b4a:	22ff      	movs	r2, #255	; 0xff
 8001b4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b60:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b66:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b74:	4833      	ldr	r0, [pc, #204]	; (8001c44 <MX_RTC_Init+0x134>)
 8001b76:	f002 fbcf 	bl	8004318 <HAL_RTC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001b80:	f000 f8c7 	bl	8001d12 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4827      	ldr	r0, [pc, #156]	; (8001c44 <MX_RTC_Init+0x134>)
 8001ba8:	f002 fc38 	bl	800441c <HAL_RTC_SetTime>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001bb2:	f000 f8ae 	bl	8001d12 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481b      	ldr	r0, [pc, #108]	; (8001c44 <MX_RTC_Init+0x134>)
 8001bd8:	f002 fd1e 	bl	8004618 <HAL_RTC_SetDate>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001be2:	f000 f896 	bl	8001d12 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4809      	ldr	r0, [pc, #36]	; (8001c44 <MX_RTC_Init+0x134>)
 8001c1e:	f002 fdcf 	bl	80047c0 <HAL_RTC_SetAlarm_IT>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001c28:	f000 f873 	bl	8001d12 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	202a      	movs	r0, #42	; 0x2a
 8001c32:	f000 fdb0 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c36:	202a      	movs	r0, #42	; 0x2a
 8001c38:	f000 fdc7 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3748      	adds	r7, #72	; 0x48
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20001d74 	.word	0x20001d74
 8001c48:	40002800 	.word	0x40002800

08001c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c52:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <MX_USART2_UART_Init+0xa8>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c74:	220c      	movs	r2, #12
 8001c76:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c92:	2230      	movs	r2, #48	; 0x30
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001ca0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001ca8:	f003 f818 	bl	8004cdc <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f000 f82e 	bl	8001d12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001cba:	f003 fe0c 	bl	80058d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f000 f825 	bl	8001d12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001ccc:	f003 fe41 	bl	8005952 <HAL_UARTEx_SetRxFifoThreshold>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001cd6:	f000 f81c 	bl	8001d12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART2_UART_Init+0xa4>)
 8001cdc:	f003 fdc3 	bl	8005866 <HAL_UARTEx_DisableFifoMode>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8001ce6:	f000 f814 	bl	8001d12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20001dac 	.word	0x20001dac
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff fda6 	bl	800184e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	2004      	movs	r0, #4
 8001d04:	f7ff fda3 	bl	800184e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f7ff fda0 	bl	800184e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d16:	b672      	cpsid	i
}
 8001d18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <Error_Handler+0x8>

08001d1c <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001d24:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <rtcAlarmControl_init+0x18>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20001e40 	.word	0x20001e40

08001d38 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4604      	mov	r4, r0
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71bb      	strb	r3, [r7, #6]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	717b      	strb	r3, [r7, #5]
 8001d52:	4613      	mov	r3, r2
 8001d54:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <setDateTime+0x18c>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	08db      	lsrs	r3, r3, #3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	b258      	sxtb	r0, r3
 8001d66:	79fa      	ldrb	r2, [r7, #7]
 8001d68:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <setDateTime+0x18c>)
 8001d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6e:	08d9      	lsrs	r1, r3, #3
 8001d70:	460b      	mov	r3, r1
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	4a4e      	ldr	r2, [pc, #312]	; (8001ec4 <setDateTime+0x18c>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	b258      	sxtb	r0, r3
 8001d96:	79ba      	ldrb	r2, [r7, #6]
 8001d98:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <setDateTime+0x18c>)
 8001d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d9e:	08d9      	lsrs	r1, r3, #3
 8001da0:	460b      	mov	r3, r1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	4303      	orrs	r3, r0
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8001db6:	797b      	ldrb	r3, [r7, #5]
 8001db8:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <setDateTime+0x18c>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	b258      	sxtb	r0, r3
 8001dc6:	797a      	ldrb	r2, [r7, #5]
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <setDateTime+0x18c>)
 8001dca:	fba3 1302 	umull	r1, r3, r3, r2
 8001dce:	08d9      	lsrs	r1, r3, #3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	4303      	orrs	r3, r0
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8001dea:	793b      	ldrb	r3, [r7, #4]
 8001dec:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <setDateTime+0x18c>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	b258      	sxtb	r0, r3
 8001dfa:	793a      	ldrb	r2, [r7, #4]
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <setDateTime+0x18c>)
 8001dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8001e02:	08d9      	lsrs	r1, r3, #3
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	4303      	orrs	r3, r0
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8001e1a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e1e:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <setDateTime+0x18c>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	b258      	sxtb	r0, r3
 8001e2c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <setDateTime+0x18c>)
 8001e32:	fba3 1302 	umull	r1, r3, r3, r2
 8001e36:	08d9      	lsrs	r1, r3, #3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	4303      	orrs	r3, r0
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001e4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e52:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <setDateTime+0x18c>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	b258      	sxtb	r0, r3
 8001e60:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <setDateTime+0x18c>)
 8001e66:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6a:	08d9      	lsrs	r1, r3, #3
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	4303      	orrs	r3, r0
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <setDateTime+0x190>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f107 011c 	add.w	r1, r7, #28
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 fbc3 	bl	8004618 <HAL_RTC_SetDate>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001e9c:	e7fe      	b.n	8001e9c <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <setDateTime+0x190>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f107 0108 	add.w	r1, r7, #8
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fab7 	bl	800441c <HAL_RTC_SetTime>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001eb8:	e7fe      	b.n	8001eb8 <setDateTime+0x180>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	cccccccd 	.word	0xcccccccd
 8001ec8:	20001e40 	.word	0x20001e40

08001ecc <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001eee:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <getDateTime+0x124>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f107 0114 	add.w	r1, r7, #20
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fb2b 	bl	8004554 <HAL_RTC_GetTime>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001f08:	e7fe      	b.n	8001f08 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001f0a:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <getDateTime+0x124>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f107 0110 	add.w	r1, r7, #16
 8001f12:	2201      	movs	r2, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fc05 	bl	8004724 <HAL_RTC_GetDate>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001f24:	e7fe      	b.n	8001f24 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001f46:	7c7b      	ldrb	r3, [r7, #17]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	7c7b      	ldrb	r3, [r7, #17]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001f66:	7cbb      	ldrb	r3, [r7, #18]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	7cbb      	ldrb	r3, [r7, #18]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8001f86:	7d3b      	ldrb	r3, [r7, #20]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	7d3b      	ldrb	r3, [r7, #20]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8001fa6:	7d7b      	ldrb	r3, [r7, #21]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	7d7b      	ldrb	r3, [r7, #21]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8001fc6:	7dbb      	ldrb	r3, [r7, #22]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	0092      	lsls	r2, r2, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	7dbb      	ldrb	r3, [r7, #22]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20001e40 	.word	0x20001e40

08001ff4 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b08f      	sub	sp, #60	; 0x3c
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4623      	mov	r3, r4
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	4603      	mov	r3, r0
 8002008:	71bb      	strb	r3, [r7, #6]
 800200a:	460b      	mov	r3, r1
 800200c:	717b      	strb	r3, [r7, #5]
 800200e:	4613      	mov	r3, r2
 8002010:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	222c      	movs	r2, #44	; 0x2c
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fd60 	bl	8005ae0 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4a40      	ldr	r2, [pc, #256]	; (8002124 <setAlarm_A+0x130>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	b258      	sxtb	r0, r3
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <setAlarm_A+0x130>)
 8002034:	fba3 1302 	umull	r1, r3, r3, r2
 8002038:	08d9      	lsrs	r1, r3, #3
 800203a:	460b      	mov	r3, r1
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4303      	orrs	r3, r0
 800204a:	b25b      	sxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	4a33      	ldr	r2, [pc, #204]	; (8002124 <setAlarm_A+0x130>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	b258      	sxtb	r0, r3
 8002062:	79ba      	ldrb	r2, [r7, #6]
 8002064:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <setAlarm_A+0x130>)
 8002066:	fba3 1302 	umull	r1, r3, r3, r2
 800206a:	08d9      	lsrs	r1, r3, #3
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	b25b      	sxtb	r3, r3
 800207a:	4303      	orrs	r3, r0
 800207c:	b25b      	sxtb	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8002082:	797b      	ldrb	r3, [r7, #5]
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <setAlarm_A+0x130>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	b258      	sxtb	r0, r3
 8002092:	797a      	ldrb	r2, [r7, #5]
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <setAlarm_A+0x130>)
 8002096:	fba3 1302 	umull	r1, r3, r3, r2
 800209a:	08d9      	lsrs	r1, r3, #3
 800209c:	460b      	mov	r3, r1
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	4303      	orrs	r3, r0
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 80020b2:	793b      	ldrb	r3, [r7, #4]
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <setAlarm_A+0x130>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	b258      	sxtb	r0, r3
 80020c2:	793a      	ldrb	r2, [r7, #4]
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <setAlarm_A+0x130>)
 80020c6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ca:	08d9      	lsrs	r1, r3, #3
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4303      	orrs	r3, r0
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 80020fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <setAlarm_A+0x134>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f107 010c 	add.w	r1, r7, #12
 8002108:	2201      	movs	r2, #1
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fb58 	bl	80047c0 <HAL_RTC_SetAlarm_IT>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8002116:	b672      	cpsid	i
}
 8002118:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 800211a:	e7fe      	b.n	800211a <setAlarm_A+0x126>
  }
}
 800211c:	bf00      	nop
 800211e:	373c      	adds	r7, #60	; 0x3c
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	cccccccd 	.word	0xcccccccd
 8002128:	20001e40 	.word	0x20001e40

0800212c <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <diableAlarm_A+0x24>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fc4d 	bl	80049d8 <HAL_RTC_DeactivateAlarm>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002144:	b672      	cpsid	i
}
 8002146:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 8002148:	e7fe      	b.n	8002148 <diableAlarm_A+0x1c>
	}
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20001e40 	.word	0x20001e40

08002154 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <LL_AHB2_GRP1_EnableClock>:
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4313      	orrs	r3, r2
 800218a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002198:	68fb      	ldr	r3, [r7, #12]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b090      	sub	sp, #64	; 0x40
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	2238      	movs	r2, #56	; 0x38
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fc75 	bl	8005ae0 <memset>
  if(hrtc->Instance==RTC)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <HAL_RTC_MspInit+0x54>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d115      	bne.n	800222c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002204:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	4618      	mov	r0, r3
 8002212:	f001 ff67 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800221c:	f7ff fd79 	bl	8001d12 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002220:	f7ff ff98 	bl	8002154 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002224:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002228:	f7ff ffbc 	bl	80021a4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3740      	adds	r7, #64	; 0x40
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40002800 	.word	0x40002800

08002238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b096      	sub	sp, #88	; 0x58
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2238      	movs	r2, #56	; 0x38
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fc41 	bl	8005ae0 <memset>
  if(huart->Instance==USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_UART_MspInit+0x88>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d126      	bne.n	80022b6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002268:	2302      	movs	r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800226c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002270:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4618      	mov	r0, r3
 8002278:	f001 ff34 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002282:	f7ff fd46 	bl	8001d12 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002286:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800228a:	f7ff ff8b 	bl	80021a4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff ff70 	bl	8002174 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002294:	230c      	movs	r3, #12
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a4:	2307      	movs	r3, #7
 80022a6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022ac:	4619      	mov	r1, r3
 80022ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b2:	f000 faa5 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3758      	adds	r7, #88	; 0x58
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40004400 	.word	0x40004400

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <NMI_Handler+0x4>

080022ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <MemManage_Handler+0x4>

080022d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230a:	f000 f951 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <RTC_Alarm_IRQHandler+0x10>)
 800231a:	f002 fbb9 	bl	8004a90 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20001d74 	.word	0x20001d74

08002328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return 1;
 800232c:	2301      	movs	r3, #1
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <_kill>:

int _kill(int pid, int sig)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002340:	f003 fb96 	bl	8005a70 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	2216      	movs	r2, #22
 8002348:	601a      	str	r2, [r3, #0]
  return -1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_exit>:

void _exit (int status)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800235e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffe7 	bl	8002336 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002368:	e7fe      	b.n	8002368 <_exit+0x12>

0800236a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e00a      	b.n	8002392 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800237c:	f3af 8000 	nop.w
 8002380:	4601      	mov	r1, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	60ba      	str	r2, [r7, #8]
 8002388:	b2ca      	uxtb	r2, r1
 800238a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	dbf0      	blt.n	800237c <_read+0x12>
  }

  return len;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e009      	b.n	80023ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	60ba      	str	r2, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	dbf1      	blt.n	80023b6 <_write+0x12>
  }
  return len;
 80023d2:	687b      	ldr	r3, [r7, #4]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_close>:

int _close(int file)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002402:	605a      	str	r2, [r3, #4]
  return 0;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <_isatty>:

int _isatty(int file)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f003 fb00 	bl	8005a70 <__errno>
 8002470:	4603      	mov	r3, r0
 8002472:	220c      	movs	r2, #12
 8002474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <_sbrk+0x64>)
 800248c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20008000 	.word	0x20008000
 800249c:	00000400 	.word	0x00000400
 80024a0:	20001e44 	.word	0x20001e44
 80024a4:	20001e60 	.word	0x20001e60

080024a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024a8:	480d      	ldr	r0, [pc, #52]	; (80024e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024ac:	f7fe f83a 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b2:	490d      	ldr	r1, [pc, #52]	; (80024e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <LoopForever+0xe>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c8:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <LoopForever+0x16>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024d6:	f003 fad1 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024da:	f7ff f9fb 	bl	80018d4 <main>

080024de <LoopForever>:

LoopForever:
    b LoopForever
 80024de:	e7fe      	b.n	80024de <LoopForever>
  ldr   r0, =_estack
 80024e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024ec:	080074f8 	.word	0x080074f8
  ldr r2, =_sbss
 80024f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024f4:	20001e5c 	.word	0x20001e5c

080024f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC_IRQHandler>
	...

080024fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002506:	2003      	movs	r0, #3
 8002508:	f000 f93a 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800250c:	f001 fc0c 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8002510:	4603      	mov	r3, r0
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_Init+0x3c>)
 8002514:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f810 	bl	800253c <HAL_InitTick>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e001      	b.n	800252c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002528:	f7ff fe54 	bl	80021d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800252c:	79fb      	ldrb	r3, [r7, #7]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_InitTick+0x6c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d024      	beq.n	800259a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002550:	f001 fbea 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_InitTick+0x6c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002560:	fbb3 f3f1 	udiv	r3, r3, r1
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f93c 	bl	80027e6 <HAL_SYSTICK_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	d809      	bhi.n	800258e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257a:	2200      	movs	r2, #0
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002582:	f000 f908 	bl	8002796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_InitTick+0x70>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e007      	b.n	800259e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e004      	b.n	800259e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e001      	b.n	800259e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000010 	.word	0x20000010
 80025ac:	2000000c 	.word	0x2000000c

080025b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x1c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_IncTick+0x20>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <HAL_IncTick+0x20>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000010 	.word	0x20000010
 80025d0:	20001e48 	.word	0x20001e48

080025d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return uwTick;
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <HAL_GetTick+0x10>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	20001e48 	.word	0x20001e48

080025e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261a:	4a04      	ldr	r2, [pc, #16]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60d3      	str	r3, [r2, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <__NVIC_GetPriorityGrouping+0x18>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db0b      	blt.n	8002676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4906      	ldr	r1, [pc, #24]	; (8002680 <__NVIC_EnableIRQ+0x34>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	; (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
         );
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002760:	f7ff ff90 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff2d 	bl	80025e8 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff44 	bl	8002630 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff92 	bl	80026d8 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff61 	bl	8002684 <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff37 	bl	800264c <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa4 	bl	800273c <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280e:	e140      	b.n	8002a92 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8132 	beq.w	8002a8c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d005      	beq.n	8002840 <HAL_GPIO_Init+0x40>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d130      	bne.n	80028a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002876:	2201      	movs	r2, #1
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 0201 	and.w	r2, r3, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d017      	beq.n	80028de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d123      	bne.n	8002932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	6939      	ldr	r1, [r7, #16]
 800292e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0203 	and.w	r2, r3, #3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 808c 	beq.w	8002a8c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002974:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	2207      	movs	r2, #7
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800299e:	d00d      	beq.n	80029bc <HAL_GPIO_Init+0x1bc>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a44      	ldr	r2, [pc, #272]	; (8002ab4 <HAL_GPIO_Init+0x2b4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x1b8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a43      	ldr	r2, [pc, #268]	; (8002ab8 <HAL_GPIO_Init+0x2b8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_GPIO_Init+0x1b4>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1be>
 80029b4:	2307      	movs	r3, #7
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1be>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1be>
 80029bc:	2300      	movs	r3, #0
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ce:	4938      	ldr	r1, [pc, #224]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 8002a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a36:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002a56:	4a19      	ldr	r2, [pc, #100]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 8002a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a64:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_GPIO_Init+0x2bc>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f aeb7 	bne.w	8002810 <HAL_GPIO_Init+0x10>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	48000400 	.word	0x48000400
 8002ab8:	48000800 	.word	0x48000800
 8002abc:	58000800 	.word	0x58000800

08002ac0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002ace:	e0af      	b.n	8002c30 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a2 	beq.w	8002c2a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002ae6:	4a59      	ldr	r2, [pc, #356]	; (8002c4c <HAL_GPIO_DeInit+0x18c>)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	2207      	movs	r2, #7
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b0e:	d00d      	beq.n	8002b2c <HAL_GPIO_DeInit+0x6c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_GPIO_DeInit+0x190>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_DeInit+0x68>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a4e      	ldr	r2, [pc, #312]	; (8002c54 <HAL_GPIO_DeInit+0x194>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_GPIO_DeInit+0x64>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_DeInit+0x6e>
 8002b24:	2307      	movs	r3, #7
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_DeInit+0x6e>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_DeInit+0x6e>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d136      	bne.n	8002bac <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002b3e:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	4943      	ldr	r1, [pc, #268]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	493f      	ldr	r1, [pc, #252]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	493b      	ldr	r1, [pc, #236]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	4937      	ldr	r1, [pc, #220]	; (8002c58 <HAL_GPIO_DeInit+0x198>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	2207      	movs	r2, #7
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <HAL_GPIO_DeInit+0x18c>)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	482b      	ldr	r0, [pc, #172]	; (8002c4c <HAL_GPIO_DeInit+0x18c>)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	08d2      	lsrs	r2, r2, #3
 8002be0:	4019      	ands	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	2101      	movs	r1, #1
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	401a      	ands	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f af49 	bne.w	8002ad0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	48000400 	.word	0x48000400
 8002c54:	48000800 	.word	0x48000800
 8002c58:	58000800 	.word	0x58000800

08002c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a03      	ldr	r2, [pc, #12]	; (8002ca4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	58000400 	.word	0x58000400

08002ca8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <LL_PWR_EnableBootC2+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <LL_PWR_EnableBootC2+0x18>)
 8002cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	58000400 	.word	0x58000400

08002cc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_PWREx_GetVoltageRange+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	58000400 	.word	0x58000400

08002cdc <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002ce4:	f7ff ffe0 	bl	8002ca8 <LL_PWR_EnableBootC2>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d00:	d101      	bne.n	8002d06 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	58000400 	.word	0x58000400

08002d14 <LL_RCC_HSE_EnableTcxo>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <LL_RCC_HSE_DisableTcxo>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5e:	d101      	bne.n	8002d64 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_HSE_Enable>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_HSE_Disable>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_HSE_IsReady>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db8:	d101      	bne.n	8002dbe <LL_RCC_HSE_IsReady+0x18>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_RCC_HSE_IsReady+0x1a>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <LL_RCC_HSI_Enable>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <LL_RCC_HSI_Disable>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <LL_RCC_HSI_IsReady>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d101      	bne.n	8002e18 <LL_RCC_HSI_IsReady+0x18>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <LL_RCC_HSI_IsReady+0x1a>
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_LSE_IsReady>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d101      	bne.n	8002e62 <LL_RCC_LSE_IsReady+0x18>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <LL_RCC_LSE_IsReady+0x1a>
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_LSI_Enable>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_LSI_Disable>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_LSI_IsReady>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d101      	bne.n	8002ec4 <LL_RCC_LSI_IsReady+0x18>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <LL_RCC_LSI_IsReady+0x1a>
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <LL_RCC_MSI_Enable>:
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6013      	str	r3, [r2, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_MSI_Disable>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <LL_RCC_MSI_IsReady>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d101      	bne.n	8002f1c <LL_RCC_MSI_IsReady+0x16>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_RCC_MSI_IsReady+0x18>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d101      	bne.n	8002f3c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <LL_RCC_MSI_GetRange>:
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_SetSysClkSource>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <LL_RCC_GetSysClkSource>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <LL_RCC_SetAHBPrescaler>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <LL_C2_RCC_SetAHBPrescaler>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800300e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <LL_RCC_SetAHB3Prescaler>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003038:	f023 020f 	bic.w	r2, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <LL_RCC_SetAPB1Prescaler>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <LL_RCC_SetAPB2Prescaler>:
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <LL_RCC_GetAHBPrescaler>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <LL_RCC_GetAHB3Prescaler>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_GetAPB1Prescaler>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <LL_RCC_GetAPB2Prescaler>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003146:	d101      	bne.n	800314c <LL_RCC_PLL_IsReady+0x18>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <LL_RCC_PLL_IsReady+0x1a>
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800319e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0303 	and.w	r3, r3, #3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d101      	bne.n	80031c8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e6:	d101      	bne.n	80031ec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320a:	d101      	bne.n	8003210 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800322c:	d101      	bne.n	8003232 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800324e:	d101      	bne.n	8003254 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
	...

08003260 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e36f      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	f7ff fea6 	bl	8002fc2 <LL_RCC_GetSysClkSource>
 8003276:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003278:	f7ff ff8f 	bl	800319a <LL_RCC_PLL_GetMainSource>
 800327c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80c4 	beq.w	8003414 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_RCC_OscConfig+0x3e>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d176      	bne.n	8003386 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d173      	bne.n	8003386 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e353      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x68>
 80032bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c6:	e006      	b.n	80032d6 <HAL_RCC_OscConfig+0x76>
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d222      	bcs.n	8003320 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fd5a 	bl	8003d98 <RCC_SetFlashLatencyFromMSIRange>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e331      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fe2b 	bl	8002f74 <LL_RCC_MSI_SetCalibTrimming>
 800331e:	e021      	b.n	8003364 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fe12 	bl	8002f74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd1f 	bl	8003d98 <RCC_SetFlashLatencyFromMSIRange>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e2f6      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003364:	f000 fce0 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003368:	4603      	mov	r3, r0
 800336a:	4aa7      	ldr	r2, [pc, #668]	; (8003608 <HAL_RCC_OscConfig+0x3a8>)
 800336c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800336e:	4ba7      	ldr	r3, [pc, #668]	; (800360c <HAL_RCC_OscConfig+0x3ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f8e2 	bl	800253c <HAL_InitTick>
 8003378:	4603      	mov	r3, r0
 800337a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d047      	beq.n	8003412 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	e2e5      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800338e:	f7ff fd9e 	bl	8002ece <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003392:	f7ff f91f 	bl	80025d4 <HAL_GetTick>
 8003396:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800339a:	f7ff f91b 	bl	80025d4 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e2d2      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80033ac:	f7ff fdab 	bl	8002f06 <LL_RCC_MSI_IsReady>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f1      	beq.n	800339a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fdc7 	bl	8002f74 <LL_RCC_MSI_SetCalibTrimming>
 80033e6:	e015      	b.n	8003414 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033e8:	f7ff fd7f 	bl	8002eea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ec:	f7ff f8f2 	bl	80025d4 <HAL_GetTick>
 80033f0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f4:	f7ff f8ee 	bl	80025d4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e2a5      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003406:	f7ff fd7e 	bl	8002f06 <LL_RCC_MSI_IsReady>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f1      	bne.n	80033f4 <HAL_RCC_OscConfig+0x194>
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003412:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d058      	beq.n	80034d2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d005      	beq.n	8003432 <HAL_RCC_OscConfig+0x1d2>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b0c      	cmp	r3, #12
 800342a:	d108      	bne.n	800343e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d105      	bne.n	800343e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d14b      	bne.n	80034d2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e289      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d102      	bne.n	8003464 <HAL_RCC_OscConfig+0x204>
 800345e:	f7ff fc86 	bl	8002d6e <LL_RCC_HSE_Enable>
 8003462:	e00d      	b.n	8003480 <HAL_RCC_OscConfig+0x220>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800346c:	d104      	bne.n	8003478 <HAL_RCC_OscConfig+0x218>
 800346e:	f7ff fc51 	bl	8002d14 <LL_RCC_HSE_EnableTcxo>
 8003472:	f7ff fc7c 	bl	8002d6e <LL_RCC_HSE_Enable>
 8003476:	e003      	b.n	8003480 <HAL_RCC_OscConfig+0x220>
 8003478:	f7ff fc87 	bl	8002d8a <LL_RCC_HSE_Disable>
 800347c:	f7ff fc58 	bl	8002d30 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff f8a4 	bl	80025d4 <HAL_GetTick>
 800348c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7ff f8a0 	bl	80025d4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e257      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034a2:	f7ff fc80 	bl	8002da6 <LL_RCC_HSE_IsReady>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f1      	beq.n	8003490 <HAL_RCC_OscConfig+0x230>
 80034ac:	e011      	b.n	80034d2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7ff f891 	bl	80025d4 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b6:	f7ff f88d 	bl	80025d4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	; 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e244      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034c8:	f7ff fc6d 	bl	8002da6 <LL_RCC_HSE_IsReady>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f1      	bne.n	80034b6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d046      	beq.n	800356c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_OscConfig+0x290>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d10e      	bne.n	8003508 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d10b      	bne.n	8003508 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e22a      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fc8e 	bl	8002e22 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003506:	e031      	b.n	800356c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d019      	beq.n	8003544 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003510:	f7ff fc5a 	bl	8002dc8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7ff f85e 	bl	80025d4 <HAL_GetTick>
 8003518:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7ff f85a 	bl	80025d4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e211      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800352e:	f7ff fc67 	bl	8002e00 <LL_RCC_HSI_IsReady>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f1      	beq.n	800351c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fc70 	bl	8002e22 <LL_RCC_HSI_SetCalibTrimming>
 8003542:	e013      	b.n	800356c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003544:	f7ff fc4e 	bl	8002de4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7ff f844 	bl	80025d4 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003550:	f7ff f840 	bl	80025d4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1f7      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003562:	f7ff fc4d 	bl	8002e00 <LL_RCC_HSI_IsReady>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f1      	bne.n	8003550 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d06e      	beq.n	8003656 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d056      	beq.n	800362e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	429a      	cmp	r2, r3
 8003596:	d031      	beq.n	80035fc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d006      	beq.n	80035b0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e1d0      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d013      	beq.n	80035e2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80035ba:	f7ff fc67 	bl	8002e8c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035be:	f7ff f809 	bl	80025d4 <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c6:	f7ff f805 	bl	80025d4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b11      	cmp	r3, #17
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1bc      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80035d8:	f7ff fc68 	bl	8002eac <LL_RCC_LSI_IsReady>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f1      	bne.n	80035c6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80035e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ea:	f023 0210 	bic.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fc:	f7ff fc36 	bl	8002e6c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7fe ffe8 	bl	80025d4 <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003606:	e00c      	b.n	8003622 <HAL_RCC_OscConfig+0x3c2>
 8003608:	20000000 	.word	0x20000000
 800360c:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003610:	f7fe ffe0 	bl	80025d4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b11      	cmp	r3, #17
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e197      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003622:	f7ff fc43 	bl	8002eac <LL_RCC_LSI_IsReady>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f1      	beq.n	8003610 <HAL_RCC_OscConfig+0x3b0>
 800362c:	e013      	b.n	8003656 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362e:	f7ff fc2d 	bl	8002e8c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003632:	f7fe ffcf 	bl	80025d4 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363a:	f7fe ffcb 	bl	80025d4 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b11      	cmp	r3, #17
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e182      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800364c:	f7ff fc2e 	bl	8002eac <LL_RCC_LSI_IsReady>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f1      	bne.n	800363a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80d8 	beq.w	8003814 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003664:	f7ff fb44 	bl	8002cf0 <LL_PWR_IsEnabledBkUpAccess>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800366e:	f7ff fb0d 	bl	8002c8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fe ffaf 	bl	80025d4 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7fe ffab 	bl	80025d4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e162      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800368c:	f7ff fb30 	bl	8002cf0 <LL_PWR_IsEnabledBkUpAccess>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f1      	beq.n	800367a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d07b      	beq.n	8003796 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b85      	cmp	r3, #133	; 0x85
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d109      	bne.n	80036c2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fe ff87 	bl	80025d4 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe ff79 	bl	80025d4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e12e      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80036f4:	f7ff fba9 	bl	8002e4a <LL_RCC_LSE_IsReady>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ef      	beq.n	80036de <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b81      	cmp	r3, #129	; 0x81
 8003704:	d003      	beq.n	800370e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b85      	cmp	r3, #133	; 0x85
 800370c:	d121      	bne.n	8003752 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fe ff61 	bl	80025d4 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fe ff53 	bl	80025d4 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e108      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ec      	beq.n	800372a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003750:	e060      	b.n	8003814 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe ff3f 	bl	80025d4 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe ff31 	bl	80025d4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0e6      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ec      	bne.n	800376e <HAL_RCC_OscConfig+0x50e>
 8003794:	e03e      	b.n	8003814 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7fe ff1d 	bl	80025d4 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800379c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fe ff0f 	bl	80025d4 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e0c4      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ec      	bne.n	80037b2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fe fefc 	bl	80025d4 <HAL_GetTick>
 80037dc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe feee 	bl	80025d4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0a3      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800380a:	f7ff fb1e 	bl	8002e4a <LL_RCC_LSE_IsReady>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ef      	bne.n	80037f4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8099 	beq.w	8003950 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d06c      	beq.n	80038fe <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2b02      	cmp	r3, #2
 800382a:	d14b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382c:	f7ff fc74 	bl	8003118 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe fed0 	bl	80025d4 <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fecc 	bl	80025d4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b0a      	cmp	r3, #10
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e083      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800384a:	f7ff fc73 	bl	8003134 <LL_RCC_PLL_IsReady>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f1      	bne.n	8003838 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	4b40      	ldr	r3, [pc, #256]	; (800395c <HAL_RCC_OscConfig+0x6fc>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800386c:	0212      	lsls	r2, r2, #8
 800386e:	4311      	orrs	r1, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003880:	430a      	orrs	r2, r1
 8003882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388a:	f7ff fc37 	bl	80030fc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fe fe99 	bl	80025d4 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fe fe95 	bl	80025d4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b0a      	cmp	r3, #10
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e04c      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80038b8:	f7ff fc3c 	bl	8003134 <LL_RCC_PLL_IsReady>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f1      	beq.n	80038a6 <HAL_RCC_OscConfig+0x646>
 80038c2:	e045      	b.n	8003950 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c4:	f7ff fc28 	bl	8003118 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe fe84 	bl	80025d4 <HAL_GetTick>
 80038cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe fe80 	bl	80025d4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b0a      	cmp	r3, #10
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e037      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80038e2:	f7ff fc27 	bl	8003134 <LL_RCC_PLL_IsReady>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f1      	bne.n	80038d0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <HAL_RCC_OscConfig+0x700>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	60cb      	str	r3, [r1, #12]
 80038fc:	e028      	b.n	8003950 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e023      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	429a      	cmp	r2, r3
 800391e:	d115      	bne.n	800394c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	429a      	cmp	r2, r3
 800392c:	d10e      	bne.n	800394c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	429a      	cmp	r2, r3
 800393c:	d106      	bne.n	800394c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	11c1808c 	.word	0x11c1808c
 8003960:	eefefffc 	.word	0xeefefffc

08003964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e12c      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003978:	4b98      	ldr	r3, [pc, #608]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d91b      	bls.n	80039be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b95      	ldr	r3, [pc, #596]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	4993      	ldr	r1, [pc, #588]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003996:	f7fe fe1d 	bl	80025d4 <HAL_GetTick>
 800399a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800399e:	f7fe fe19 	bl	80025d4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e110      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b0:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d1ef      	bne.n	800399e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fb02 	bl	8002fd8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039d4:	f7fe fdfe 	bl	80025d4 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039dc:	f7fe fdfa 	bl	80025d4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0f1      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039ee:	f7ff fbdf 	bl	80031b0 <LL_RCC_IsActiveFlag_HPRE>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f1      	beq.n	80039dc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d016      	beq.n	8003a32 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff faf8 	bl	8002ffe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a0e:	f7fe fde1 	bl	80025d4 <HAL_GetTick>
 8003a12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a16:	f7fe fddd 	bl	80025d4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0d4      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a28:	f7ff fbd3 	bl	80031d2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f1      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff faf0 	bl	8003028 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a48:	f7fe fdc4 	bl	80025d4 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a50:	f7fe fdc0 	bl	80025d4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0b7      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a62:	f7ff fbc8 	bl	80031f6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f1      	beq.n	8003a50 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d016      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fae9 	bl	8003054 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a82:	f7fe fda7 	bl	80025d4 <HAL_GetTick>
 8003a86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a8a:	f7fe fda3 	bl	80025d4 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e09a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a9c:	f7ff fbbd 	bl	800321a <LL_RCC_IsActiveFlag_PPRE1>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f1      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d017      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fade 	bl	800307a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003abe:	f7fe fd89 	bl	80025d4 <HAL_GetTick>
 8003ac2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ac6:	f7fe fd85 	bl	80025d4 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e07c      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ad8:	f7ff fbb0 	bl	800323c <LL_RCC_IsActiveFlag_PPRE2>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f1      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d043      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d106      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003af6:	f7ff f956 	bl	8002da6 <LL_RCC_HSE_IsReady>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11e      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e066      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b0c:	f7ff fb12 	bl	8003134 <LL_RCC_PLL_IsReady>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d113      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e05b      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b22:	f7ff f9f0 	bl	8002f06 <LL_RCC_MSI_IsReady>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d108      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e050      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b30:	f7ff f966 	bl	8002e00 <LL_RCC_HSI_IsReady>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e049      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fa2a 	bl	8002f9c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b48:	f7fe fd44 	bl	80025d4 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fe fd40 	bl	80025d4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e035      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	f7ff fa2c 	bl	8002fc2 <LL_RCC_GetSysClkSource>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d1ec      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b76:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d21b      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f023 0207 	bic.w	r2, r3, #7
 8003b8c:	4913      	ldr	r1, [pc, #76]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b94:	f7fe fd1e 	bl	80025d4 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b9c:	f7fe fd1a 	bl	80025d4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e011      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x278>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d1ef      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bbc:	f000 f8b4 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4a07      	ldr	r2, [pc, #28]	; (8003be0 <HAL_RCC_ClockConfig+0x27c>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_RCC_ClockConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fcb6 	bl	800253c <HAL_InitTick>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	58004000 	.word	0x58004000
 8003be0:	20000000 	.word	0x20000000
 8003be4:	2000000c 	.word	0x2000000c

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf6:	f7ff f9e4 	bl	8002fc2 <LL_RCC_GetSysClkSource>
 8003bfa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bfc:	f7ff facd 	bl	800319a <LL_RCC_PLL_GetMainSource>
 8003c00:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x2c>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d139      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d136      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c14:	f7ff f987 	bl	8002f26 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d115      	bne.n	8003c4a <HAL_RCC_GetSysClockFreq+0x62>
 8003c1e:	f7ff f982 	bl	8002f26 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x4e>
 8003c28:	f7ff f98d 	bl	8002f46 <LL_RCC_MSI_GetRange>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x5a>
 8003c36:	f7ff f991 	bl	8002f5c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	4a36      	ldr	r2, [pc, #216]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x134>)
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	e014      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x8c>
 8003c4a:	f7ff f96c 	bl	8002f26 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x7a>
 8003c54:	f7ff f977 	bl	8002f46 <LL_RCC_MSI_GetRange>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	e005      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x86>
 8003c62:	f7ff f97b 	bl	8002f5c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c66:	4603      	mov	r3, r0
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x134>)
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d115      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c80:	e012      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e00c      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d109      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c94:	f7ff f85a 	bl	8002d4c <LL_RCC_HSE_IsEnabledDiv2>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e001      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ca6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca8:	f7ff f98b 	bl	8002fc2 <LL_RCC_GetSysClkSource>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d12f      	bne.n	8003d12 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003cb2:	f7ff fa72 	bl	800319a <LL_RCC_PLL_GetMainSource>
 8003cb6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0xde>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0xe4>
 8003cc4:	e00d      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cc8:	60fb      	str	r3, [r7, #12]
        break;
 8003cca:	e00d      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ccc:	f7ff f83e 	bl	8002d4c <LL_RCC_HSE_IsEnabledDiv2>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cd8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cda:	e005      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cde:	60fb      	str	r3, [r7, #12]
        break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	60fb      	str	r3, [r7, #12]
        break;
 8003ce6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ce8:	f7ff fa35 	bl	8003156 <LL_RCC_PLL_GetN>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	fb03 f402 	mul.w	r4, r3, r2
 8003cf4:	f7ff fa46 	bl	8003184 <LL_RCC_PLL_GetDivider>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d02:	f7ff fa34 	bl	800316e <LL_RCC_PLL_GetR>
 8003d06:	4603      	mov	r3, r0
 8003d08:	0f5b      	lsrs	r3, r3, #29
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d10:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d12:	697b      	ldr	r3, [r7, #20]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd90      	pop	{r4, r7, pc}
 8003d1c:	08007238 	.word	0x08007238
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	01e84800 	.word	0x01e84800

08003d28 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b598      	push	{r3, r4, r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d2c:	f7ff ff5c 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003d30:	4604      	mov	r4, r0
 8003d32:	f7ff f9b5 	bl	80030a0 <LL_RCC_GetAHBPrescaler>
 8003d36:	4603      	mov	r3, r0
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	4a03      	ldr	r2, [pc, #12]	; (8003d4c <HAL_RCC_GetHCLKFreq+0x24>)
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd98      	pop	{r3, r4, r7, pc}
 8003d4c:	080071d8 	.word	0x080071d8

08003d50 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d50:	b598      	push	{r3, r4, r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d54:	f7ff ffe8 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d58:	4604      	mov	r4, r0
 8003d5a:	f7ff f9b9 	bl	80030d0 <LL_RCC_GetAPB1Prescaler>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd98      	pop	{r3, r4, r7, pc}
 8003d70:	08007218 	.word	0x08007218

08003d74 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d74:	b598      	push	{r3, r4, r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d78:	f7ff ffd6 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	f7ff f9b2 	bl	80030e6 <LL_RCC_GetAPB2Prescaler>
 8003d82:	4603      	mov	r3, r0
 8003d84:	0adb      	lsrs	r3, r3, #11
 8003d86:	4a03      	ldr	r2, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd98      	pop	{r3, r4, r7, pc}
 8003d94:	08007218 	.word	0x08007218

08003d98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	4a10      	ldr	r2, [pc, #64]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dae:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003db0:	f7ff f981 	bl	80030b6 <LL_RCC_GetAHB3Prescaler>
 8003db4:	4603      	mov	r3, r0
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0c9c      	lsrs	r4, r3, #18
 8003dd4:	f7fe ff76 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f000 f80b 	bl	8003df8 <RCC_SetFlashLatency>
 8003de2:	4603      	mov	r3, r0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd90      	pop	{r4, r7, pc}
 8003dec:	08007238 	.word	0x08007238
 8003df0:	080071d8 	.word	0x080071d8
 8003df4:	431bde83 	.word	0x431bde83

08003df8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	; 0x38
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003e02:	4a3a      	ldr	r2, [pc, #232]	; (8003eec <RCC_SetFlashLatency+0xf4>)
 8003e04:	f107 0320 	add.w	r3, r7, #32
 8003e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e0c:	6018      	str	r0, [r3, #0]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <RCC_SetFlashLatency+0xf8>)
 8003e14:	f107 0318 	add.w	r3, r7, #24
 8003e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e1c:	6018      	str	r0, [r3, #0]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003e22:	4a34      	ldr	r2, [pc, #208]	; (8003ef4 <RCC_SetFlashLatency+0xfc>)
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e2e:	2300      	movs	r3, #0
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e38:	d11b      	bne.n	8003e72 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3e:	e014      	b.n	8003e6a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	3338      	adds	r3, #56	; 0x38
 8003e46:	443b      	add	r3, r7
 8003e48:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d807      	bhi.n	8003e64 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	3338      	adds	r3, #56	; 0x38
 8003e5a:	443b      	add	r3, r7
 8003e5c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e62:	e021      	b.n	8003ea8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	3301      	adds	r3, #1
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d9e7      	bls.n	8003e40 <RCC_SetFlashLatency+0x48>
 8003e70:	e01a      	b.n	8003ea8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e76:	e014      	b.n	8003ea2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	3338      	adds	r3, #56	; 0x38
 8003e7e:	443b      	add	r3, r7
 8003e80:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003e84:	461a      	mov	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d807      	bhi.n	8003e9c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	3338      	adds	r3, #56	; 0x38
 8003e92:	443b      	add	r3, r7
 8003e94:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e9a:	e005      	b.n	8003ea8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d9e7      	bls.n	8003e78 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <RCC_SetFlashLatency+0x100>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 0207 	bic.w	r2, r3, #7
 8003eb0:	4911      	ldr	r1, [pc, #68]	; (8003ef8 <RCC_SetFlashLatency+0x100>)
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003eb8:	f7fe fb8c 	bl	80025d4 <HAL_GetTick>
 8003ebc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ebe:	e008      	b.n	8003ed2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ec0:	f7fe fb88 	bl	80025d4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e007      	b.n	8003ee2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <RCC_SetFlashLatency+0x100>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d1ef      	bne.n	8003ec0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3738      	adds	r7, #56	; 0x38
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	080071bc 	.word	0x080071bc
 8003ef0:	080071c4 	.word	0x080071c4
 8003ef4:	080071cc 	.word	0x080071cc
 8003ef8:	58004000 	.word	0x58004000

08003efc <LL_RCC_LSE_IsReady>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d101      	bne.n	8003f14 <LL_RCC_LSE_IsReady+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_RCC_LSE_IsReady+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <LL_RCC_SetUSARTClockSource>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	43db      	mvns	r3, r3
 8003f34:	401a      	ands	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_SetI2SClockSource>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_SetLPUARTClockSource>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <LL_RCC_SetI2CClockSource>:
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_SetLPTIMClockSource>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <LL_RCC_SetRNGClockSource>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <LL_RCC_SetADCClockSource>:
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <LL_RCC_SetRTCClockSource>:
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <LL_RCC_GetRTCClockSource>:
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_ForceBackupDomainReset>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040da:	bf00      	nop
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80040f0:	2300      	movs	r3, #0
 80040f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040f4:	2300      	movs	r3, #0
 80040f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d058      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004104:	f7fe fdc2 	bl	8002c8c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004108:	f7fe fa64 	bl	80025d4 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800410e:	e009      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004110:	f7fe fa60 	bl	80025d4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d902      	bls.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	74fb      	strb	r3, [r7, #19]
        break;
 8004122:	e006      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004124:	4b7b      	ldr	r3, [pc, #492]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004130:	d1ee      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004132:	7cfb      	ldrb	r3, [r7, #19]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d13c      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004138:	f7ff ffa7 	bl	800408a <LL_RCC_GetRTCClockSource>
 800413c:	4602      	mov	r2, r0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	429a      	cmp	r2, r3
 8004144:	d00f      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004154:	f7ff ffa5 	bl	80040a2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004158:	f7ff ffb3 	bl	80040c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800415c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d014      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fe fa30 	bl	80025d4 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004176:	e00b      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fe fa2c 	bl	80025d4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d902      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	74fb      	strb	r3, [r7, #19]
            break;
 800418e:	e004      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004190:	f7ff feb4 	bl	8003efc <LL_RCC_LSE_IsReady>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d1ee      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff5b 	bl	8004060 <LL_RCC_SetRTCClockSource>
 80041aa:	e004      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	74bb      	strb	r3, [r7, #18]
 80041b0:	e001      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fea9 	bl	8003f1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fe9e 	bl	8003f1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fec0 	bl	8003f78 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fee6 	bl	8003fda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fedb 	bl	8003fda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fed0 	bl	8003fda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fea9 	bl	8003fa2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe9e 	bl	8003fa2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fe93 	bl	8003fa2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d011      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fe5e 	bl	8003f4e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429a:	d107      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d010      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fea5 	bl	800400c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d011      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fea3 	bl	8004036 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f8:	d107      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800430a:	7cbb      	ldrb	r3, [r7, #18]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	58000400 	.word	0x58000400

08004318 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d071      	beq.n	800440e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd ff4e 	bl	80021e0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800434c:	4b32      	ldr	r3, [pc, #200]	; (8004418 <HAL_RTC_Init+0x100>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d051      	beq.n	80043fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004358:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_RTC_Init+0x100>)
 800435a:	22ca      	movs	r2, #202	; 0xca
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
 800435e:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <HAL_RTC_Init+0x100>)
 8004360:	2253      	movs	r2, #83	; 0x53
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fbe3 	bl	8004b30 <RTC_EnterInitMode>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d13f      	bne.n	80043f4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_RTC_Init+0x100>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <HAL_RTC_Init+0x100>)
 800437a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800437e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004382:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RTC_Init+0x100>)
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6859      	ldr	r1, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	4319      	orrs	r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	430b      	orrs	r3, r1
 8004398:	491f      	ldr	r1, [pc, #124]	; (8004418 <HAL_RTC_Init+0x100>)
 800439a:	4313      	orrs	r3, r2
 800439c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	491b      	ldr	r1, [pc, #108]	; (8004418 <HAL_RTC_Init+0x100>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_RTC_Init+0x100>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	430b      	orrs	r3, r1
 80043c0:	4915      	ldr	r1, [pc, #84]	; (8004418 <HAL_RTC_Init+0x100>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fbe6 	bl	8004b98 <RTC_ExitInitMode>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10e      	bne.n	80043f4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RTC_Init+0x100>)
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a19      	ldr	r1, [r3, #32]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4319      	orrs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	490a      	ldr	r1, [pc, #40]	; (8004418 <HAL_RTC_Init+0x100>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_RTC_Init+0x100>)
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24
 80043fa:	e001      	b.n	8004400 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40002800 	.word	0x40002800

0800441c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_RTC_SetTime+0x1a>
 8004432:	2302      	movs	r3, #2
 8004434:	e088      	b.n	8004548 <HAL_RTC_SetTime+0x12c>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004446:	4b42      	ldr	r3, [pc, #264]	; (8004550 <HAL_RTC_SetTime+0x134>)
 8004448:	22ca      	movs	r2, #202	; 0xca
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
 800444c:	4b40      	ldr	r3, [pc, #256]	; (8004550 <HAL_RTC_SetTime+0x134>)
 800444e:	2253      	movs	r2, #83	; 0x53
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fb6c 	bl	8004b30 <RTC_EnterInitMode>
 8004458:	4603      	mov	r3, r0
 800445a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d15e      	bne.n	8004520 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_RTC_SetTime+0x134>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446e:	d057      	beq.n	8004520 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d125      	bne.n	80044c2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <HAL_RTC_SetTime+0x134>)
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fbc1 	bl	8004c14 <RTC_ByteToBcd2>
 8004492:	4603      	mov	r3, r0
 8004494:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	785b      	ldrb	r3, [r3, #1]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fbba 	bl	8004c14 <RTC_ByteToBcd2>
 80044a0:	4603      	mov	r3, r0
 80044a2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044a4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	789b      	ldrb	r3, [r3, #2]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fbb2 	bl	8004c14 <RTC_ByteToBcd2>
 80044b0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044b2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	78db      	ldrb	r3, [r3, #3]
 80044ba:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	e017      	b.n	80044f2 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RTC_SetTime+0x134>)
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044e0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044e6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	78db      	ldrb	r3, [r3, #3]
 80044ec:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_RTC_SetTime+0x134>)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044fe:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8004500:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_RTC_SetTime+0x134>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	4a12      	ldr	r2, [pc, #72]	; (8004550 <HAL_RTC_SetTime+0x134>)
 8004506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_RTC_SetTime+0x134>)
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	68d9      	ldr	r1, [r3, #12]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	430b      	orrs	r3, r1
 800451a:	490d      	ldr	r1, [pc, #52]	; (8004550 <HAL_RTC_SetTime+0x134>)
 800451c:	4313      	orrs	r3, r2
 800451e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fb39 	bl	8004b98 <RTC_ExitInitMode>
 8004526:	4603      	mov	r3, r0
 8004528:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RTC_SetTime+0x134>)
 800452c:	22ff      	movs	r2, #255	; 0xff
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004546:	7cfb      	ldrb	r3, [r7, #19]
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd90      	pop	{r4, r7, pc}
 8004550:	40002800 	.word	0x40002800

08004554 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <HAL_RTC_GetTime+0xc0>)
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004568:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RTC_GetTime+0xc0>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004574:	d049      	beq.n	800460a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <HAL_RTC_GetTime+0xc0>)
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <HAL_RTC_GetTime+0xc0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800458a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800458e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	0c1b      	lsrs	r3, r3, #16
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	0d9b      	lsrs	r3, r3, #22
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11a      	bne.n	800460a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fb3a 	bl	8004c52 <RTC_Bcd2ToByte>
 80045de:	4603      	mov	r3, r0
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb31 	bl	8004c52 <RTC_Bcd2ToByte>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	789b      	ldrb	r3, [r3, #2]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fb28 	bl	8004c52 <RTC_Bcd2ToByte>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40002800 	.word	0x40002800

08004618 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_RTC_SetDate+0x1a>
 800462e:	2302      	movs	r3, #2
 8004630:	e071      	b.n	8004716 <HAL_RTC_SetDate+0xfe>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10e      	bne.n	8004666 <HAL_RTC_SetDate+0x4e>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	785b      	ldrb	r3, [r3, #1]
 8004658:	f023 0310 	bic.w	r3, r3, #16
 800465c:	b2db      	uxtb	r3, r3
 800465e:	330a      	adds	r3, #10
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d11c      	bne.n	80046a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	78db      	ldrb	r3, [r3, #3]
 8004670:	4618      	mov	r0, r3
 8004672:	f000 facf 	bl	8004c14 <RTC_ByteToBcd2>
 8004676:	4603      	mov	r3, r0
 8004678:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	785b      	ldrb	r3, [r3, #1]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fac8 	bl	8004c14 <RTC_ByteToBcd2>
 8004684:	4603      	mov	r3, r0
 8004686:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004688:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	789b      	ldrb	r3, [r3, #2]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fac0 	bl	8004c14 <RTC_ByteToBcd2>
 8004694:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004696:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e00e      	b.n	80046c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	78db      	ldrb	r3, [r3, #3]
 80046aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <HAL_RTC_SetDate+0x108>)
 80046c6:	22ca      	movs	r2, #202	; 0xca
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_RTC_SetDate+0x108>)
 80046cc:	2253      	movs	r2, #83	; 0x53
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa2d 	bl	8004b30 <RTC_EnterInitMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80046e0:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <HAL_RTC_SetDate+0x108>)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fa52 	bl	8004b98 <RTC_ExitInitMode>
 80046f4:	4603      	mov	r3, r0
 80046f6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RTC_SetDate+0x108>)
 80046fa:	22ff      	movs	r2, #255	; 0xff
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
}
 8004716:	4618      	mov	r0, r3
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}
 800471e:	bf00      	nop
 8004720:	40002800 	.word	0x40002800

08004724 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8004730:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_RTC_GetDate+0x98>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004738:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800473c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	b2da      	uxtb	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	0b5b      	lsrs	r3, r3, #13
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11a      	bne.n	80047b2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fa66 	bl	8004c52 <RTC_Bcd2ToByte>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fa5d 	bl	8004c52 <RTC_Bcd2ToByte>
 8004798:	4603      	mov	r3, r0
 800479a:	461a      	mov	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	789b      	ldrb	r3, [r3, #2]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fa54 	bl	8004c52 <RTC_Bcd2ToByte>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40002800 	.word	0x40002800

080047c0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_RTC_SetAlarm_IT+0x1e>
 80047da:	2302      	movs	r3, #2
 80047dc:	e0f3      	b.n	80049c6 <HAL_RTC_SetAlarm_IT+0x206>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80047ee:	4b78      	ldr	r3, [pc, #480]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fe:	d06a      	beq.n	80048d6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d13a      	bne.n	800487c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004806:	4b72      	ldr	r3, [pc, #456]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f9f5 	bl	8004c14 <RTC_ByteToBcd2>
 800482a:	4603      	mov	r3, r0
 800482c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f9ee 	bl	8004c14 <RTC_ByteToBcd2>
 8004838:	4603      	mov	r3, r0
 800483a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800483c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	789b      	ldrb	r3, [r3, #2]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f9e6 	bl	8004c14 <RTC_ByteToBcd2>
 8004848:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800484a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004854:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f9d8 	bl	8004c14 <RTC_ByteToBcd2>
 8004864:	4603      	mov	r3, r0
 8004866:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004868:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004870:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e02c      	b.n	80048d6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004884:	d00d      	beq.n	80048a2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800488e:	d008      	beq.n	80048a2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004890:	4b4f      	ldr	r3, [pc, #316]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2200      	movs	r2, #0
 80048a0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048ae:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048b4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	78db      	ldrb	r3, [r3, #3]
 80048ba:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048bc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048c4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048c6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048cc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 80048d8:	22ca      	movs	r2, #202	; 0xca
 80048da:	625a      	str	r2, [r3, #36]	; 0x24
 80048dc:	4b3c      	ldr	r3, [pc, #240]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 80048de:	2253      	movs	r2, #83	; 0x53
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d12c      	bne.n	8004946 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80048ec:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 80048f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048f6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80048f8:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004904:	d107      	bne.n	8004916 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	4930      	ldr	r1, [pc, #192]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004910:	4313      	orrs	r3, r2
 8004912:	644b      	str	r3, [r1, #68]	; 0x44
 8004914:	e006      	b.n	8004924 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004916:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800491c:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004924:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 800493e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004942:	6193      	str	r3, [r2, #24]
 8004944:	e02b      	b.n	800499e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004946:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 800494c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004950:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004954:	2202      	movs	r2, #2
 8004956:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d107      	bne.n	8004970 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	4919      	ldr	r1, [pc, #100]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 800496a:	4313      	orrs	r3, r2
 800496c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800496e:	e006      	b.n	800497e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800497e:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f043 0202 	orr.w	r2, r3, #2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	4a0e      	ldr	r2, [pc, #56]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004998:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800499c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <HAL_RTC_SetAlarm_IT+0x214>)
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a4:	4a0b      	ldr	r2, [pc, #44]	; (80049d4 <HAL_RTC_SetAlarm_IT+0x214>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_RTC_SetAlarm_IT+0x210>)
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd90      	pop	{r4, r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40002800 	.word	0x40002800
 80049d4:	58000800 	.word	0x58000800

080049d8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_RTC_DeactivateAlarm+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e048      	b.n	8004a82 <HAL_RTC_DeactivateAlarm+0xaa>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a00:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a02:	22ca      	movs	r2, #202	; 0xca
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a08:	2253      	movs	r2, #83	; 0x53
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d115      	bne.n	8004a40 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004a14:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a1e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004a20:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a2a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f023 0201 	bic.w	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004a38:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a3e:	e014      	b.n	8004a6a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a46:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004a4a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a56:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f023 0202 	bic.w	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a66:	2202      	movs	r2, #2
 8004a68:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a6c:	22ff      	movs	r2, #255	; 0xff
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	40002800 	.word	0x40002800

08004a90 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004aae:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fc fee2 	bl	800187e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8dc 	bl	8004c88 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40002800 	.word	0x40002800

08004ae4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_RTC_WaitForSynchro+0x48>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <HAL_RTC_WaitForSynchro+0x48>)
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004af8:	f7fd fd6c 	bl	80025d4 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004afe:	e009      	b.n	8004b14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b00:	f7fd fd68 	bl	80025d4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0e:	d901      	bls.n	8004b14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e006      	b.n	8004b22 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RTC_WaitForSynchro+0x48>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ef      	beq.n	8004b00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40002800 	.word	0x40002800

08004b30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004b3c:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <RTC_EnterInitMode+0x64>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d120      	bne.n	8004b8a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <RTC_EnterInitMode+0x64>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <RTC_EnterInitMode+0x64>)
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004b54:	f7fd fd3e 	bl	80025d4 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b5a:	e00d      	b.n	8004b78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b5c:	f7fd fd3a 	bl	80025d4 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b6a:	d905      	bls.n	8004b78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2203      	movs	r2, #3
 8004b74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <RTC_EnterInitMode+0x64>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <RTC_EnterInitMode+0x5a>
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d1e8      	bne.n	8004b5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40002800 	.word	0x40002800

08004b98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <RTC_ExitInitMode+0x78>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <RTC_ExitInitMode+0x78>)
 8004baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bae:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004bb0:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <RTC_ExitInitMode+0x78>)
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10c      	bne.n	8004bd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff91 	bl	8004ae4 <HAL_RTC_WaitForSynchro>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01e      	beq.n	8004c06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e017      	b.n	8004c06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <RTC_ExitInitMode+0x78>)
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <RTC_ExitInitMode+0x78>)
 8004bdc:	f023 0320 	bic.w	r3, r3, #32
 8004be0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ff7e 	bl	8004ae4 <HAL_RTC_WaitForSynchro>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <RTC_ExitInitMode+0x78>)
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <RTC_ExitInitMode+0x78>)
 8004c00:	f043 0320 	orr.w	r3, r3, #32
 8004c04:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40002800 	.word	0x40002800

08004c14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004c26:	e005      	b.n	8004c34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004c2e:	7afb      	ldrb	r3, [r7, #11]
 8004c30:	3b0a      	subs	r3, #10
 8004c32:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004c34:	7afb      	ldrb	r3, [r7, #11]
 8004c36:	2b09      	cmp	r3, #9
 8004c38:	d8f6      	bhi.n	8004c28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	7afb      	ldrb	r3, [r7, #11]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b2db      	uxtb	r3, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	b2db      	uxtb	r3, r3
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <LL_RCC_GetUSARTClockSource>:
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	401a      	ands	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	4313      	orrs	r3, r2
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <LL_RCC_GetLPUARTClockSource>:
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4013      	ands	r3, r2
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e042      	b.n	8004d74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fd fa99 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2224      	movs	r2, #36	; 0x24
 8004d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f976 	bl	8005010 <UART_SetConfig>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e022      	b.n	8004d74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fbde 	bl	80054f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fc64 	bl	800563a <UART_CheckIdleState>
 8004d72:	4603      	mov	r3, r0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d173      	bne.n	8004e7e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_UART_Transmit+0x26>
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e06c      	b.n	8004e80 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2221      	movs	r2, #33	; 0x21
 8004db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db6:	f7fd fc0d 	bl	80025d4 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd4:	d108      	bne.n	8004de8 <HAL_UART_Transmit+0x6c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e003      	b.n	8004df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df0:	e02c      	b.n	8004e4c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	; 0x80
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fc6a 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e039      	b.n	8004e80 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3302      	adds	r3, #2
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e007      	b.n	8004e3a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1cc      	bne.n	8004df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2140      	movs	r1, #64	; 0x40
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fc37 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e006      	b.n	8004e80 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	f040 80b1 	bne.w	8005006 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Receive+0x28>
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0a9      	b.n	8005008 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2222      	movs	r2, #34	; 0x22
 8004ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eca:	f7fd fb83 	bl	80025d4 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	d10e      	bne.n	8004f08 <HAL_UART_Receive+0x80>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <HAL_UART_Receive+0x76>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004efc:	e02d      	b.n	8004f5a <HAL_UART_Receive+0xd2>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f06:	e028      	b.n	8004f5a <HAL_UART_Receive+0xd2>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <HAL_UART_Receive+0xa4>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_UART_Receive+0x9a>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f20:	e01b      	b.n	8004f5a <HAL_UART_Receive+0xd2>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	227f      	movs	r2, #127	; 0x7f
 8004f26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f2a:	e016      	b.n	8004f5a <HAL_UART_Receive+0xd2>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f34:	d10d      	bne.n	8004f52 <HAL_UART_Receive+0xca>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d104      	bne.n	8004f48 <HAL_UART_Receive+0xc0>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	227f      	movs	r2, #127	; 0x7f
 8004f42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f46:	e008      	b.n	8004f5a <HAL_UART_Receive+0xd2>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	223f      	movs	r2, #63	; 0x3f
 8004f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f50:	e003      	b.n	8004f5a <HAL_UART_Receive+0xd2>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f60:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6a:	d108      	bne.n	8004f7e <HAL_UART_Receive+0xf6>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	e003      	b.n	8004f86 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f86:	e032      	b.n	8004fee <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2120      	movs	r1, #32
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fb9f 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e032      	b.n	8005008 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	8a7b      	ldrh	r3, [r7, #18]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e00c      	b.n	8004fdc <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	8a7b      	ldrh	r3, [r7, #18]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	4013      	ands	r3, r2
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1c6      	bne.n	8004f88 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005014:	b08c      	sub	sp, #48	; 0x30
 8005016:	af00      	add	r7, sp, #0
 8005018:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	431a      	orrs	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	4313      	orrs	r3, r2
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b94      	ldr	r3, [pc, #592]	; (8005290 <UART_SetConfig+0x280>)
 8005040:	4013      	ands	r3, r2
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005048:	430b      	orrs	r3, r1
 800504a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a89      	ldr	r2, [pc, #548]	; (8005294 <UART_SetConfig+0x284>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005078:	4313      	orrs	r3, r2
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005086:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005090:	430b      	orrs	r3, r1
 8005092:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f023 010f 	bic.w	r1, r3, #15
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a7a      	ldr	r2, [pc, #488]	; (8005298 <UART_SetConfig+0x288>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d127      	bne.n	8005104 <UART_SetConfig+0xf4>
 80050b4:	2003      	movs	r0, #3
 80050b6:	f7ff fdf0 	bl	8004c9a <LL_RCC_GetUSARTClockSource>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d81b      	bhi.n	80050fc <UART_SetConfig+0xec>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0xbc>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050f5 	.word	0x080050f5
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e2:	e080      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ea:	e07c      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f2:	e078      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fa:	e074      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005102:	e070      	b.n	80051e6 <UART_SetConfig+0x1d6>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a64      	ldr	r2, [pc, #400]	; (800529c <UART_SetConfig+0x28c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d138      	bne.n	8005180 <UART_SetConfig+0x170>
 800510e:	200c      	movs	r0, #12
 8005110:	f7ff fdc3 	bl	8004c9a <LL_RCC_GetUSARTClockSource>
 8005114:	4603      	mov	r3, r0
 8005116:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d82c      	bhi.n	8005178 <UART_SetConfig+0x168>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x114>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005159 	.word	0x08005159
 8005128:	08005179 	.word	0x08005179
 800512c:	08005179 	.word	0x08005179
 8005130:	08005179 	.word	0x08005179
 8005134:	08005169 	.word	0x08005169
 8005138:	08005179 	.word	0x08005179
 800513c:	08005179 	.word	0x08005179
 8005140:	08005179 	.word	0x08005179
 8005144:	08005161 	.word	0x08005161
 8005148:	08005179 	.word	0x08005179
 800514c:	08005179 	.word	0x08005179
 8005150:	08005179 	.word	0x08005179
 8005154:	08005171 	.word	0x08005171
 8005158:	2300      	movs	r3, #0
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515e:	e042      	b.n	80051e6 <UART_SetConfig+0x1d6>
 8005160:	2302      	movs	r3, #2
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005166:	e03e      	b.n	80051e6 <UART_SetConfig+0x1d6>
 8005168:	2304      	movs	r3, #4
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e03a      	b.n	80051e6 <UART_SetConfig+0x1d6>
 8005170:	2308      	movs	r3, #8
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005176:	e036      	b.n	80051e6 <UART_SetConfig+0x1d6>
 8005178:	2310      	movs	r3, #16
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517e:	e032      	b.n	80051e6 <UART_SetConfig+0x1d6>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a43      	ldr	r2, [pc, #268]	; (8005294 <UART_SetConfig+0x284>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d12a      	bne.n	80051e0 <UART_SetConfig+0x1d0>
 800518a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800518e:	f7ff fd96 	bl	8004cbe <LL_RCC_GetLPUARTClockSource>
 8005192:	4603      	mov	r3, r0
 8005194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005198:	d01a      	beq.n	80051d0 <UART_SetConfig+0x1c0>
 800519a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800519e:	d81b      	bhi.n	80051d8 <UART_SetConfig+0x1c8>
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a4:	d00c      	beq.n	80051c0 <UART_SetConfig+0x1b0>
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d815      	bhi.n	80051d8 <UART_SetConfig+0x1c8>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <UART_SetConfig+0x1a8>
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	d008      	beq.n	80051c8 <UART_SetConfig+0x1b8>
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x1c8>
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051be:	e012      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80051c0:	2302      	movs	r3, #2
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c6:	e00e      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80051c8:	2304      	movs	r3, #4
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ce:	e00a      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80051d0:	2308      	movs	r3, #8
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d6:	e006      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80051d8:	2310      	movs	r3, #16
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051de:	e002      	b.n	80051e6 <UART_SetConfig+0x1d6>
 80051e0:	2310      	movs	r3, #16
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2a      	ldr	r2, [pc, #168]	; (8005294 <UART_SetConfig+0x284>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	f040 80a4 	bne.w	800533a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d823      	bhi.n	8005242 <UART_SetConfig+0x232>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <UART_SetConfig+0x1f0>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005225 	.word	0x08005225
 8005204:	08005243 	.word	0x08005243
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005243 	.word	0x08005243
 8005210:	08005233 	.word	0x08005233
 8005214:	08005243 	.word	0x08005243
 8005218:	08005243 	.word	0x08005243
 800521c:	08005243 	.word	0x08005243
 8005220:	0800523b 	.word	0x0800523b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005224:	f7fe fd94 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 8005228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800522a:	e010      	b.n	800524e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <UART_SetConfig+0x290>)
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005230:	e00d      	b.n	800524e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005232:	f7fe fcd9 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005238:	e009      	b.n	800524e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800523a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005240:	e005      	b.n	800524e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800524c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8137 	beq.w	80054c4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <UART_SetConfig+0x294>)
 800525c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005260:	461a      	mov	r2, r3
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	fbb3 f3f2 	udiv	r3, r3, r2
 8005268:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4413      	add	r3, r2
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	429a      	cmp	r2, r3
 8005278:	d305      	bcc.n	8005286 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	429a      	cmp	r2, r3
 8005284:	d910      	bls.n	80052a8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800528c:	e11a      	b.n	80054c4 <UART_SetConfig+0x4b4>
 800528e:	bf00      	nop
 8005290:	cfff69f3 	.word	0xcfff69f3
 8005294:	40008000 	.word	0x40008000
 8005298:	40013800 	.word	0x40013800
 800529c:	40004400 	.word	0x40004400
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	08007278 	.word	0x08007278
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2200      	movs	r2, #0
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	60fa      	str	r2, [r7, #12]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	4a8e      	ldr	r2, [pc, #568]	; (80054f0 <UART_SetConfig+0x4e0>)
 80052b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2200      	movs	r2, #0
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052ca:	f7fa ffa9 	bl	8000220 <__aeabi_uldivmod>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4610      	mov	r0, r2
 80052d4:	4619      	mov	r1, r3
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	020b      	lsls	r3, r1, #8
 80052e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052e4:	0202      	lsls	r2, r0, #8
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	6849      	ldr	r1, [r1, #4]
 80052ea:	0849      	lsrs	r1, r1, #1
 80052ec:	2000      	movs	r0, #0
 80052ee:	460c      	mov	r4, r1
 80052f0:	4605      	mov	r5, r0
 80052f2:	eb12 0804 	adds.w	r8, r2, r4
 80052f6:	eb43 0905 	adc.w	r9, r3, r5
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	469a      	mov	sl, r3
 8005302:	4693      	mov	fp, r2
 8005304:	4652      	mov	r2, sl
 8005306:	465b      	mov	r3, fp
 8005308:	4640      	mov	r0, r8
 800530a:	4649      	mov	r1, r9
 800530c:	f7fa ff88 	bl	8000220 <__aeabi_uldivmod>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4613      	mov	r3, r2
 8005316:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531e:	d308      	bcc.n	8005332 <UART_SetConfig+0x322>
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005326:	d204      	bcs.n	8005332 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	e0c8      	b.n	80054c4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005338:	e0c4      	b.n	80054c4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005342:	d167      	bne.n	8005414 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005344:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005348:	2b08      	cmp	r3, #8
 800534a:	d828      	bhi.n	800539e <UART_SetConfig+0x38e>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <UART_SetConfig+0x344>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005379 	.word	0x08005379
 8005358:	08005381 	.word	0x08005381
 800535c:	08005389 	.word	0x08005389
 8005360:	0800539f 	.word	0x0800539f
 8005364:	0800538f 	.word	0x0800538f
 8005368:	0800539f 	.word	0x0800539f
 800536c:	0800539f 	.word	0x0800539f
 8005370:	0800539f 	.word	0x0800539f
 8005374:	08005397 	.word	0x08005397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005378:	f7fe fcea 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 800537c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800537e:	e014      	b.n	80053aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005380:	f7fe fcf8 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 8005384:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005386:	e010      	b.n	80053aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005388:	4b5a      	ldr	r3, [pc, #360]	; (80054f4 <UART_SetConfig+0x4e4>)
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800538c:	e00d      	b.n	80053aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538e:	f7fe fc2b 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8005392:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005394:	e009      	b.n	80053aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800539c:	e005      	b.n	80053aa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8089 	beq.w	80054c4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	4a4e      	ldr	r2, [pc, #312]	; (80054f0 <UART_SetConfig+0x4e0>)
 80053b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053bc:	461a      	mov	r2, r3
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053c4:	005a      	lsls	r2, r3, #1
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	441a      	add	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	d916      	bls.n	800540c <UART_SetConfig+0x3fc>
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d212      	bcs.n	800540c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f023 030f 	bic.w	r3, r3, #15
 80053ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	8bfb      	ldrh	r3, [r7, #30]
 80053fe:	4313      	orrs	r3, r2
 8005400:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	8bfa      	ldrh	r2, [r7, #30]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	e05b      	b.n	80054c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005412:	e057      	b.n	80054c4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005418:	2b08      	cmp	r3, #8
 800541a:	d828      	bhi.n	800546e <UART_SetConfig+0x45e>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x414>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	0800546f 	.word	0x0800546f
 8005434:	0800545f 	.word	0x0800545f
 8005438:	0800546f 	.word	0x0800546f
 800543c:	0800546f 	.word	0x0800546f
 8005440:	0800546f 	.word	0x0800546f
 8005444:	08005467 	.word	0x08005467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fe fc82 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 800544c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800544e:	e014      	b.n	800547a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005450:	f7fe fc90 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 8005454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005456:	e010      	b.n	800547a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005458:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <UART_SetConfig+0x4e4>)
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800545c:	e00d      	b.n	800547a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545e:	f7fe fbc3 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8005462:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005464:	e009      	b.n	800547a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800546c:	e005      	b.n	800547a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005478:	bf00      	nop
    }

    if (pclk != 0U)
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d021      	beq.n	80054c4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <UART_SetConfig+0x4e0>)
 8005486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800548a:	461a      	mov	r2, r3
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	441a      	add	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b0f      	cmp	r3, #15
 80054a8:	d909      	bls.n	80054be <UART_SetConfig+0x4ae>
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b0:	d205      	bcs.n	80054be <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60da      	str	r2, [r3, #12]
 80054bc:	e002      	b.n	80054c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2200      	movs	r2, #0
 80054d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3730      	adds	r7, #48	; 0x30
 80054e8:	46bd      	mov	sp, r7
 80054ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ee:	bf00      	nop
 80054f0:	08007278 	.word	0x08007278
 80054f4:	00f42400 	.word	0x00f42400

080054f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f6:	d10a      	bne.n	800560e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr

0800563a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b086      	sub	sp, #24
 800563e:	af02      	add	r7, sp, #8
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800564a:	f7fc ffc3 	bl	80025d4 <HAL_GetTick>
 800564e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b08      	cmp	r3, #8
 800565c:	d10e      	bne.n	800567c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f832 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e028      	b.n	80056ce <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b04      	cmp	r3, #4
 8005688:	d10e      	bne.n	80056a8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800568a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f81c 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e012      	b.n	80056ce <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b09c      	sub	sp, #112	; 0x70
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e6:	e0a9      	b.n	800583c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ee:	f000 80a5 	beq.w	800583c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fc ff6f 	bl	80025d4 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <UART_WaitOnFlagUntilTimeout+0x32>
 8005702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005704:	2b00      	cmp	r3, #0
 8005706:	d140      	bne.n	800578a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571c:	667b      	str	r3, [r7, #100]	; 0x64
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005728:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800572c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e6      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	663b      	str	r3, [r7, #96]	; 0x60
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800575a:	64ba      	str	r2, [r7, #72]	; 0x48
 800575c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e5      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e069      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d051      	beq.n	800583c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a6:	d149      	bne.n	800583c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
 80057d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e6      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	613b      	str	r3, [r7, #16]
   return(result);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005804:	623a      	str	r2, [r7, #32]
 8005806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69f9      	ldr	r1, [r7, #28]
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	61bb      	str	r3, [r7, #24]
   return(result);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e010      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	429a      	cmp	r2, r3
 8005858:	f43f af46 	beq.w	80056e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3770      	adds	r7, #112	; 0x70
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_UARTEx_DisableFifoMode+0x16>
 8005878:	2302      	movs	r3, #2
 800587a:	e027      	b.n	80058cc <HAL_UARTEx_DisableFifoMode+0x66>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e02d      	b.n	800594a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2224      	movs	r2, #36	; 0x24
 80058fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0201 	bic.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f850 	bl	80059d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005966:	2302      	movs	r3, #2
 8005968:	e02d      	b.n	80059c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2224      	movs	r2, #36	; 0x24
 8005976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f812 	bl	80059d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d108      	bne.n	80059f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059f0:	e031      	b.n	8005a56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059f2:	2308      	movs	r3, #8
 80059f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059f6:	2308      	movs	r3, #8
 80059f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	0e5b      	lsrs	r3, r3, #25
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	0f5b      	lsrs	r3, r3, #29
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	7b3a      	ldrb	r2, [r7, #12]
 8005a1e:	4910      	ldr	r1, [pc, #64]	; (8005a60 <UARTEx_SetNbDataToProcess+0x90>)
 8005a20:	5c8a      	ldrb	r2, [r1, r2]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a26:	7b3a      	ldrb	r2, [r7, #12]
 8005a28:	490e      	ldr	r1, [pc, #56]	; (8005a64 <UARTEx_SetNbDataToProcess+0x94>)
 8005a2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	7b7a      	ldrb	r2, [r7, #13]
 8005a3c:	4908      	ldr	r1, [pc, #32]	; (8005a60 <UARTEx_SetNbDataToProcess+0x90>)
 8005a3e:	5c8a      	ldrb	r2, [r1, r2]
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a44:	7b7a      	ldrb	r2, [r7, #13]
 8005a46:	4907      	ldr	r1, [pc, #28]	; (8005a64 <UARTEx_SetNbDataToProcess+0x94>)
 8005a48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	08007290 	.word	0x08007290
 8005a64:	08007298 	.word	0x08007298

08005a68 <atoi>:
 8005a68:	220a      	movs	r2, #10
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	f000 b960 	b.w	8005d30 <strtol>

08005a70 <__errno>:
 8005a70:	4b01      	ldr	r3, [pc, #4]	; (8005a78 <__errno+0x8>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000014 	.word	0x20000014

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	; (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	; (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	; (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	; (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f001 faf8 	bl	8007084 <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	080074f0 	.word	0x080074f0
 8005ab8:	080074f0 	.word	0x080074f0
 8005abc:	080074f0 	.word	0x080074f0
 8005ac0:	080074f4 	.word	0x080074f4

08005ac4 <memcpy>:
 8005ac4:	440a      	add	r2, r1
 8005ac6:	4291      	cmp	r1, r2
 8005ac8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005acc:	d100      	bne.n	8005ad0 <memcpy+0xc>
 8005ace:	4770      	bx	lr
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ada:	4291      	cmp	r1, r2
 8005adc:	d1f9      	bne.n	8005ad2 <memcpy+0xe>
 8005ade:	bd10      	pop	{r4, pc}

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <sniprintf>:
 8005af0:	b40c      	push	{r2, r3}
 8005af2:	b530      	push	{r4, r5, lr}
 8005af4:	4b17      	ldr	r3, [pc, #92]	; (8005b54 <sniprintf+0x64>)
 8005af6:	1e0c      	subs	r4, r1, #0
 8005af8:	681d      	ldr	r5, [r3, #0]
 8005afa:	b09d      	sub	sp, #116	; 0x74
 8005afc:	da08      	bge.n	8005b10 <sniprintf+0x20>
 8005afe:	238b      	movs	r3, #139	; 0x8b
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b06:	b01d      	add	sp, #116	; 0x74
 8005b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b0c:	b002      	add	sp, #8
 8005b0e:	4770      	bx	lr
 8005b10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b18:	bf14      	ite	ne
 8005b1a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005b1e:	4623      	moveq	r3, r4
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b28:	9002      	str	r0, [sp, #8]
 8005b2a:	9006      	str	r0, [sp, #24]
 8005b2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b32:	ab21      	add	r3, sp, #132	; 0x84
 8005b34:	a902      	add	r1, sp, #8
 8005b36:	4628      	mov	r0, r5
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	f000 fa75 	bl	8006028 <_svfiprintf_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	bfbc      	itt	lt
 8005b42:	238b      	movlt	r3, #139	; 0x8b
 8005b44:	602b      	strlt	r3, [r5, #0]
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	d0dd      	beq.n	8005b06 <sniprintf+0x16>
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e7d9      	b.n	8005b06 <sniprintf+0x16>
 8005b52:	bf00      	nop
 8005b54:	20000014 	.word	0x20000014

08005b58 <strncmp>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	b172      	cbz	r2, 8005b7c <strncmp+0x24>
 8005b5e:	3901      	subs	r1, #1
 8005b60:	1884      	adds	r4, r0, r2
 8005b62:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005b6a:	4290      	cmp	r0, r2
 8005b6c:	d101      	bne.n	8005b72 <strncmp+0x1a>
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	d101      	bne.n	8005b76 <strncmp+0x1e>
 8005b72:	1a80      	subs	r0, r0, r2
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d1f3      	bne.n	8005b62 <strncmp+0xa>
 8005b7a:	e7fa      	b.n	8005b72 <strncmp+0x1a>
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	e7f9      	b.n	8005b74 <strncmp+0x1c>

08005b80 <strtok>:
 8005b80:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <strtok+0x5c>)
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	681f      	ldr	r7, [r3, #0]
 8005b88:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	460e      	mov	r6, r1
 8005b8e:	b9ec      	cbnz	r4, 8005bcc <strtok+0x4c>
 8005b90:	2050      	movs	r0, #80	; 0x50
 8005b92:	f000 f907 	bl	8005da4 <malloc>
 8005b96:	4602      	mov	r2, r0
 8005b98:	65b8      	str	r0, [r7, #88]	; 0x58
 8005b9a:	b920      	cbnz	r0, 8005ba6 <strtok+0x26>
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <strtok+0x60>)
 8005b9e:	4811      	ldr	r0, [pc, #68]	; (8005be4 <strtok+0x64>)
 8005ba0:	2157      	movs	r1, #87	; 0x57
 8005ba2:	f000 f8cf 	bl	8005d44 <__assert_func>
 8005ba6:	e9c0 4400 	strd	r4, r4, [r0]
 8005baa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005bae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005bb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005bb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005bba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005bbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005bc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005bc6:	6184      	str	r4, [r0, #24]
 8005bc8:	7704      	strb	r4, [r0, #28]
 8005bca:	6244      	str	r4, [r0, #36]	; 0x24
 8005bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	f000 b806 	b.w	8005be8 <__strtok_r>
 8005bdc:	20000014 	.word	0x20000014
 8005be0:	080072a4 	.word	0x080072a4
 8005be4:	080072bb 	.word	0x080072bb

08005be8 <__strtok_r>:
 8005be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bea:	b908      	cbnz	r0, 8005bf0 <__strtok_r+0x8>
 8005bec:	6810      	ldr	r0, [r2, #0]
 8005bee:	b188      	cbz	r0, 8005c14 <__strtok_r+0x2c>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005bfe:	b91e      	cbnz	r6, 8005c08 <__strtok_r+0x20>
 8005c00:	b965      	cbnz	r5, 8005c1c <__strtok_r+0x34>
 8005c02:	6015      	str	r5, [r2, #0]
 8005c04:	4628      	mov	r0, r5
 8005c06:	e005      	b.n	8005c14 <__strtok_r+0x2c>
 8005c08:	42b5      	cmp	r5, r6
 8005c0a:	d1f6      	bne.n	8005bfa <__strtok_r+0x12>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f0      	bne.n	8005bf2 <__strtok_r+0xa>
 8005c10:	6014      	str	r4, [r2, #0]
 8005c12:	7003      	strb	r3, [r0, #0]
 8005c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c16:	461c      	mov	r4, r3
 8005c18:	e00c      	b.n	8005c34 <__strtok_r+0x4c>
 8005c1a:	b915      	cbnz	r5, 8005c22 <__strtok_r+0x3a>
 8005c1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c20:	460e      	mov	r6, r1
 8005c22:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c26:	42ab      	cmp	r3, r5
 8005c28:	d1f7      	bne.n	8005c1a <__strtok_r+0x32>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0f3      	beq.n	8005c16 <__strtok_r+0x2e>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c34:	6014      	str	r4, [r2, #0]
 8005c36:	e7ed      	b.n	8005c14 <__strtok_r+0x2c>

08005c38 <_strtol_l.constprop.0>:
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3e:	4680      	mov	r8, r0
 8005c40:	d001      	beq.n	8005c46 <_strtol_l.constprop.0+0xe>
 8005c42:	2b24      	cmp	r3, #36	; 0x24
 8005c44:	d906      	bls.n	8005c54 <_strtol_l.constprop.0+0x1c>
 8005c46:	f7ff ff13 	bl	8005a70 <__errno>
 8005c4a:	2316      	movs	r3, #22
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	4f35      	ldr	r7, [pc, #212]	; (8005d2c <_strtol_l.constprop.0+0xf4>)
 8005c56:	460d      	mov	r5, r1
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c5e:	5de6      	ldrb	r6, [r4, r7]
 8005c60:	f016 0608 	ands.w	r6, r6, #8
 8005c64:	d1f8      	bne.n	8005c58 <_strtol_l.constprop.0+0x20>
 8005c66:	2c2d      	cmp	r4, #45	; 0x2d
 8005c68:	d12f      	bne.n	8005cca <_strtol_l.constprop.0+0x92>
 8005c6a:	782c      	ldrb	r4, [r5, #0]
 8005c6c:	2601      	movs	r6, #1
 8005c6e:	1c85      	adds	r5, r0, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d057      	beq.n	8005d24 <_strtol_l.constprop.0+0xec>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d109      	bne.n	8005c8c <_strtol_l.constprop.0+0x54>
 8005c78:	2c30      	cmp	r4, #48	; 0x30
 8005c7a:	d107      	bne.n	8005c8c <_strtol_l.constprop.0+0x54>
 8005c7c:	7828      	ldrb	r0, [r5, #0]
 8005c7e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005c82:	2858      	cmp	r0, #88	; 0x58
 8005c84:	d149      	bne.n	8005d1a <_strtol_l.constprop.0+0xe2>
 8005c86:	786c      	ldrb	r4, [r5, #1]
 8005c88:	2310      	movs	r3, #16
 8005c8a:	3502      	adds	r5, #2
 8005c8c:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005c90:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005c94:	2700      	movs	r7, #0
 8005c96:	fbbe f9f3 	udiv	r9, lr, r3
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	fb03 ea19 	mls	sl, r3, r9, lr
 8005ca0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005ca4:	f1bc 0f09 	cmp.w	ip, #9
 8005ca8:	d814      	bhi.n	8005cd4 <_strtol_l.constprop.0+0x9c>
 8005caa:	4664      	mov	r4, ip
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	dd22      	ble.n	8005cf6 <_strtol_l.constprop.0+0xbe>
 8005cb0:	2f00      	cmp	r7, #0
 8005cb2:	db1d      	blt.n	8005cf0 <_strtol_l.constprop.0+0xb8>
 8005cb4:	4581      	cmp	r9, r0
 8005cb6:	d31b      	bcc.n	8005cf0 <_strtol_l.constprop.0+0xb8>
 8005cb8:	d101      	bne.n	8005cbe <_strtol_l.constprop.0+0x86>
 8005cba:	45a2      	cmp	sl, r4
 8005cbc:	db18      	blt.n	8005cf0 <_strtol_l.constprop.0+0xb8>
 8005cbe:	fb00 4003 	mla	r0, r0, r3, r4
 8005cc2:	2701      	movs	r7, #1
 8005cc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cc8:	e7ea      	b.n	8005ca0 <_strtol_l.constprop.0+0x68>
 8005cca:	2c2b      	cmp	r4, #43	; 0x2b
 8005ccc:	bf04      	itt	eq
 8005cce:	782c      	ldrbeq	r4, [r5, #0]
 8005cd0:	1c85      	addeq	r5, r0, #2
 8005cd2:	e7cd      	b.n	8005c70 <_strtol_l.constprop.0+0x38>
 8005cd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005cd8:	f1bc 0f19 	cmp.w	ip, #25
 8005cdc:	d801      	bhi.n	8005ce2 <_strtol_l.constprop.0+0xaa>
 8005cde:	3c37      	subs	r4, #55	; 0x37
 8005ce0:	e7e4      	b.n	8005cac <_strtol_l.constprop.0+0x74>
 8005ce2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ce6:	f1bc 0f19 	cmp.w	ip, #25
 8005cea:	d804      	bhi.n	8005cf6 <_strtol_l.constprop.0+0xbe>
 8005cec:	3c57      	subs	r4, #87	; 0x57
 8005cee:	e7dd      	b.n	8005cac <_strtol_l.constprop.0+0x74>
 8005cf0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005cf4:	e7e6      	b.n	8005cc4 <_strtol_l.constprop.0+0x8c>
 8005cf6:	2f00      	cmp	r7, #0
 8005cf8:	da07      	bge.n	8005d0a <_strtol_l.constprop.0+0xd2>
 8005cfa:	2322      	movs	r3, #34	; 0x22
 8005cfc:	f8c8 3000 	str.w	r3, [r8]
 8005d00:	4670      	mov	r0, lr
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	d0a4      	beq.n	8005c50 <_strtol_l.constprop.0+0x18>
 8005d06:	1e69      	subs	r1, r5, #1
 8005d08:	e005      	b.n	8005d16 <_strtol_l.constprop.0+0xde>
 8005d0a:	b106      	cbz	r6, 8005d0e <_strtol_l.constprop.0+0xd6>
 8005d0c:	4240      	negs	r0, r0
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	d09e      	beq.n	8005c50 <_strtol_l.constprop.0+0x18>
 8005d12:	2f00      	cmp	r7, #0
 8005d14:	d1f7      	bne.n	8005d06 <_strtol_l.constprop.0+0xce>
 8005d16:	6011      	str	r1, [r2, #0]
 8005d18:	e79a      	b.n	8005c50 <_strtol_l.constprop.0+0x18>
 8005d1a:	2430      	movs	r4, #48	; 0x30
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1b5      	bne.n	8005c8c <_strtol_l.constprop.0+0x54>
 8005d20:	2308      	movs	r3, #8
 8005d22:	e7b3      	b.n	8005c8c <_strtol_l.constprop.0+0x54>
 8005d24:	2c30      	cmp	r4, #48	; 0x30
 8005d26:	d0a9      	beq.n	8005c7c <_strtol_l.constprop.0+0x44>
 8005d28:	230a      	movs	r3, #10
 8005d2a:	e7af      	b.n	8005c8c <_strtol_l.constprop.0+0x54>
 8005d2c:	08007355 	.word	0x08007355

08005d30 <strtol>:
 8005d30:	4613      	mov	r3, r2
 8005d32:	460a      	mov	r2, r1
 8005d34:	4601      	mov	r1, r0
 8005d36:	4802      	ldr	r0, [pc, #8]	; (8005d40 <strtol+0x10>)
 8005d38:	6800      	ldr	r0, [r0, #0]
 8005d3a:	f7ff bf7d 	b.w	8005c38 <_strtol_l.constprop.0>
 8005d3e:	bf00      	nop
 8005d40:	20000014 	.word	0x20000014

08005d44 <__assert_func>:
 8005d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d46:	4614      	mov	r4, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <__assert_func+0x2c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4605      	mov	r5, r0
 8005d50:	68d8      	ldr	r0, [r3, #12]
 8005d52:	b14c      	cbz	r4, 8005d68 <__assert_func+0x24>
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <__assert_func+0x30>)
 8005d56:	9100      	str	r1, [sp, #0]
 8005d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d5c:	4906      	ldr	r1, [pc, #24]	; (8005d78 <__assert_func+0x34>)
 8005d5e:	462b      	mov	r3, r5
 8005d60:	f000 f80e 	bl	8005d80 <fiprintf>
 8005d64:	f000 fe1c 	bl	80069a0 <abort>
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <__assert_func+0x38>)
 8005d6a:	461c      	mov	r4, r3
 8005d6c:	e7f3      	b.n	8005d56 <__assert_func+0x12>
 8005d6e:	bf00      	nop
 8005d70:	20000014 	.word	0x20000014
 8005d74:	08007318 	.word	0x08007318
 8005d78:	08007325 	.word	0x08007325
 8005d7c:	08007353 	.word	0x08007353

08005d80 <fiprintf>:
 8005d80:	b40e      	push	{r1, r2, r3}
 8005d82:	b503      	push	{r0, r1, lr}
 8005d84:	4601      	mov	r1, r0
 8005d86:	ab03      	add	r3, sp, #12
 8005d88:	4805      	ldr	r0, [pc, #20]	; (8005da0 <fiprintf+0x20>)
 8005d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	f000 fa71 	bl	8006278 <_vfiprintf_r>
 8005d96:	b002      	add	sp, #8
 8005d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d9c:	b003      	add	sp, #12
 8005d9e:	4770      	bx	lr
 8005da0:	20000014 	.word	0x20000014

08005da4 <malloc>:
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <malloc+0xc>)
 8005da6:	4601      	mov	r1, r0
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	f000 b86d 	b.w	8005e88 <_malloc_r>
 8005dae:	bf00      	nop
 8005db0:	20000014 	.word	0x20000014

08005db4 <_free_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4605      	mov	r5, r0
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d041      	beq.n	8005e40 <_free_r+0x8c>
 8005dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc0:	1f0c      	subs	r4, r1, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bfb8      	it	lt
 8005dc6:	18e4      	addlt	r4, r4, r3
 8005dc8:	f001 f828 	bl	8006e1c <__malloc_lock>
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <_free_r+0x90>)
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	b933      	cbnz	r3, 8005de0 <_free_r+0x2c>
 8005dd2:	6063      	str	r3, [r4, #4]
 8005dd4:	6014      	str	r4, [r2, #0]
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ddc:	f001 b824 	b.w	8006e28 <__malloc_unlock>
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d908      	bls.n	8005df6 <_free_r+0x42>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	1821      	adds	r1, r4, r0
 8005de8:	428b      	cmp	r3, r1
 8005dea:	bf01      	itttt	eq
 8005dec:	6819      	ldreq	r1, [r3, #0]
 8005dee:	685b      	ldreq	r3, [r3, #4]
 8005df0:	1809      	addeq	r1, r1, r0
 8005df2:	6021      	streq	r1, [r4, #0]
 8005df4:	e7ed      	b.n	8005dd2 <_free_r+0x1e>
 8005df6:	461a      	mov	r2, r3
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	b10b      	cbz	r3, 8005e00 <_free_r+0x4c>
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	d9fa      	bls.n	8005df6 <_free_r+0x42>
 8005e00:	6811      	ldr	r1, [r2, #0]
 8005e02:	1850      	adds	r0, r2, r1
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d10b      	bne.n	8005e20 <_free_r+0x6c>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	4401      	add	r1, r0
 8005e0c:	1850      	adds	r0, r2, r1
 8005e0e:	4283      	cmp	r3, r0
 8005e10:	6011      	str	r1, [r2, #0]
 8005e12:	d1e0      	bne.n	8005dd6 <_free_r+0x22>
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	6053      	str	r3, [r2, #4]
 8005e1a:	4401      	add	r1, r0
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	e7da      	b.n	8005dd6 <_free_r+0x22>
 8005e20:	d902      	bls.n	8005e28 <_free_r+0x74>
 8005e22:	230c      	movs	r3, #12
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	e7d6      	b.n	8005dd6 <_free_r+0x22>
 8005e28:	6820      	ldr	r0, [r4, #0]
 8005e2a:	1821      	adds	r1, r4, r0
 8005e2c:	428b      	cmp	r3, r1
 8005e2e:	bf04      	itt	eq
 8005e30:	6819      	ldreq	r1, [r3, #0]
 8005e32:	685b      	ldreq	r3, [r3, #4]
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	bf04      	itt	eq
 8005e38:	1809      	addeq	r1, r1, r0
 8005e3a:	6021      	streq	r1, [r4, #0]
 8005e3c:	6054      	str	r4, [r2, #4]
 8005e3e:	e7ca      	b.n	8005dd6 <_free_r+0x22>
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	bf00      	nop
 8005e44:	20001e4c 	.word	0x20001e4c

08005e48 <sbrk_aligned>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4e0e      	ldr	r6, [pc, #56]	; (8005e84 <sbrk_aligned+0x3c>)
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	6831      	ldr	r1, [r6, #0]
 8005e50:	4605      	mov	r5, r0
 8005e52:	b911      	cbnz	r1, 8005e5a <sbrk_aligned+0x12>
 8005e54:	f000 fcd4 	bl	8006800 <_sbrk_r>
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 fccf 	bl	8006800 <_sbrk_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d00a      	beq.n	8005e7c <sbrk_aligned+0x34>
 8005e66:	1cc4      	adds	r4, r0, #3
 8005e68:	f024 0403 	bic.w	r4, r4, #3
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	d007      	beq.n	8005e80 <sbrk_aligned+0x38>
 8005e70:	1a21      	subs	r1, r4, r0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 fcc4 	bl	8006800 <_sbrk_r>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d101      	bne.n	8005e80 <sbrk_aligned+0x38>
 8005e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e80:	4620      	mov	r0, r4
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	20001e50 	.word	0x20001e50

08005e88 <_malloc_r>:
 8005e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8c:	1ccd      	adds	r5, r1, #3
 8005e8e:	f025 0503 	bic.w	r5, r5, #3
 8005e92:	3508      	adds	r5, #8
 8005e94:	2d0c      	cmp	r5, #12
 8005e96:	bf38      	it	cc
 8005e98:	250c      	movcc	r5, #12
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	db01      	blt.n	8005ea4 <_malloc_r+0x1c>
 8005ea0:	42a9      	cmp	r1, r5
 8005ea2:	d905      	bls.n	8005eb0 <_malloc_r+0x28>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	4630      	mov	r0, r6
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb0:	4e2e      	ldr	r6, [pc, #184]	; (8005f6c <_malloc_r+0xe4>)
 8005eb2:	f000 ffb3 	bl	8006e1c <__malloc_lock>
 8005eb6:	6833      	ldr	r3, [r6, #0]
 8005eb8:	461c      	mov	r4, r3
 8005eba:	bb34      	cbnz	r4, 8005f0a <_malloc_r+0x82>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff ffc2 	bl	8005e48 <sbrk_aligned>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	d14d      	bne.n	8005f66 <_malloc_r+0xde>
 8005eca:	6834      	ldr	r4, [r6, #0]
 8005ecc:	4626      	mov	r6, r4
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d140      	bne.n	8005f54 <_malloc_r+0xcc>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	eb04 0803 	add.w	r8, r4, r3
 8005edc:	f000 fc90 	bl	8006800 <_sbrk_r>
 8005ee0:	4580      	cmp	r8, r0
 8005ee2:	d13a      	bne.n	8005f5a <_malloc_r+0xd2>
 8005ee4:	6821      	ldr	r1, [r4, #0]
 8005ee6:	3503      	adds	r5, #3
 8005ee8:	1a6d      	subs	r5, r5, r1
 8005eea:	f025 0503 	bic.w	r5, r5, #3
 8005eee:	3508      	adds	r5, #8
 8005ef0:	2d0c      	cmp	r5, #12
 8005ef2:	bf38      	it	cc
 8005ef4:	250c      	movcc	r5, #12
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f7ff ffa5 	bl	8005e48 <sbrk_aligned>
 8005efe:	3001      	adds	r0, #1
 8005f00:	d02b      	beq.n	8005f5a <_malloc_r+0xd2>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	442b      	add	r3, r5
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	e00e      	b.n	8005f28 <_malloc_r+0xa0>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	1b52      	subs	r2, r2, r5
 8005f0e:	d41e      	bmi.n	8005f4e <_malloc_r+0xc6>
 8005f10:	2a0b      	cmp	r2, #11
 8005f12:	d916      	bls.n	8005f42 <_malloc_r+0xba>
 8005f14:	1961      	adds	r1, r4, r5
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	bf18      	it	ne
 8005f1c:	6059      	strne	r1, [r3, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	bf08      	it	eq
 8005f22:	6031      	streq	r1, [r6, #0]
 8005f24:	5162      	str	r2, [r4, r5]
 8005f26:	604b      	str	r3, [r1, #4]
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f104 060b 	add.w	r6, r4, #11
 8005f2e:	f000 ff7b 	bl	8006e28 <__malloc_unlock>
 8005f32:	f026 0607 	bic.w	r6, r6, #7
 8005f36:	1d23      	adds	r3, r4, #4
 8005f38:	1af2      	subs	r2, r6, r3
 8005f3a:	d0b6      	beq.n	8005eaa <_malloc_r+0x22>
 8005f3c:	1b9b      	subs	r3, r3, r6
 8005f3e:	50a3      	str	r3, [r4, r2]
 8005f40:	e7b3      	b.n	8005eaa <_malloc_r+0x22>
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	bf0c      	ite	eq
 8005f48:	6032      	streq	r2, [r6, #0]
 8005f4a:	605a      	strne	r2, [r3, #4]
 8005f4c:	e7ec      	b.n	8005f28 <_malloc_r+0xa0>
 8005f4e:	4623      	mov	r3, r4
 8005f50:	6864      	ldr	r4, [r4, #4]
 8005f52:	e7b2      	b.n	8005eba <_malloc_r+0x32>
 8005f54:	4634      	mov	r4, r6
 8005f56:	6876      	ldr	r6, [r6, #4]
 8005f58:	e7b9      	b.n	8005ece <_malloc_r+0x46>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f000 ff62 	bl	8006e28 <__malloc_unlock>
 8005f64:	e7a1      	b.n	8005eaa <_malloc_r+0x22>
 8005f66:	6025      	str	r5, [r4, #0]
 8005f68:	e7de      	b.n	8005f28 <_malloc_r+0xa0>
 8005f6a:	bf00      	nop
 8005f6c:	20001e4c 	.word	0x20001e4c

08005f70 <__ssputs_r>:
 8005f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	688e      	ldr	r6, [r1, #8]
 8005f76:	429e      	cmp	r6, r3
 8005f78:	4682      	mov	sl, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4690      	mov	r8, r2
 8005f7e:	461f      	mov	r7, r3
 8005f80:	d838      	bhi.n	8005ff4 <__ssputs_r+0x84>
 8005f82:	898a      	ldrh	r2, [r1, #12]
 8005f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f88:	d032      	beq.n	8005ff0 <__ssputs_r+0x80>
 8005f8a:	6825      	ldr	r5, [r4, #0]
 8005f8c:	6909      	ldr	r1, [r1, #16]
 8005f8e:	eba5 0901 	sub.w	r9, r5, r1
 8005f92:	6965      	ldr	r5, [r4, #20]
 8005f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	444b      	add	r3, r9
 8005fa0:	106d      	asrs	r5, r5, #1
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	bf38      	it	cc
 8005fa6:	461d      	movcc	r5, r3
 8005fa8:	0553      	lsls	r3, r2, #21
 8005faa:	d531      	bpl.n	8006010 <__ssputs_r+0xa0>
 8005fac:	4629      	mov	r1, r5
 8005fae:	f7ff ff6b 	bl	8005e88 <_malloc_r>
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	b950      	cbnz	r0, 8005fcc <__ssputs_r+0x5c>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	f8ca 3000 	str.w	r3, [sl]
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fcc:	6921      	ldr	r1, [r4, #16]
 8005fce:	464a      	mov	r2, r9
 8005fd0:	f7ff fd78 	bl	8005ac4 <memcpy>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	81a3      	strh	r3, [r4, #12]
 8005fe0:	6126      	str	r6, [r4, #16]
 8005fe2:	6165      	str	r5, [r4, #20]
 8005fe4:	444e      	add	r6, r9
 8005fe6:	eba5 0509 	sub.w	r5, r5, r9
 8005fea:	6026      	str	r6, [r4, #0]
 8005fec:	60a5      	str	r5, [r4, #8]
 8005fee:	463e      	mov	r6, r7
 8005ff0:	42be      	cmp	r6, r7
 8005ff2:	d900      	bls.n	8005ff6 <__ssputs_r+0x86>
 8005ff4:	463e      	mov	r6, r7
 8005ff6:	6820      	ldr	r0, [r4, #0]
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4641      	mov	r1, r8
 8005ffc:	f000 fef4 	bl	8006de8 <memmove>
 8006000:	68a3      	ldr	r3, [r4, #8]
 8006002:	1b9b      	subs	r3, r3, r6
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	4433      	add	r3, r6
 800600a:	6023      	str	r3, [r4, #0]
 800600c:	2000      	movs	r0, #0
 800600e:	e7db      	b.n	8005fc8 <__ssputs_r+0x58>
 8006010:	462a      	mov	r2, r5
 8006012:	f000 ff0f 	bl	8006e34 <_realloc_r>
 8006016:	4606      	mov	r6, r0
 8006018:	2800      	cmp	r0, #0
 800601a:	d1e1      	bne.n	8005fe0 <__ssputs_r+0x70>
 800601c:	6921      	ldr	r1, [r4, #16]
 800601e:	4650      	mov	r0, sl
 8006020:	f7ff fec8 	bl	8005db4 <_free_r>
 8006024:	e7c7      	b.n	8005fb6 <__ssputs_r+0x46>
	...

08006028 <_svfiprintf_r>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	4698      	mov	r8, r3
 800602e:	898b      	ldrh	r3, [r1, #12]
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	b09d      	sub	sp, #116	; 0x74
 8006034:	4607      	mov	r7, r0
 8006036:	460d      	mov	r5, r1
 8006038:	4614      	mov	r4, r2
 800603a:	d50e      	bpl.n	800605a <_svfiprintf_r+0x32>
 800603c:	690b      	ldr	r3, [r1, #16]
 800603e:	b963      	cbnz	r3, 800605a <_svfiprintf_r+0x32>
 8006040:	2140      	movs	r1, #64	; 0x40
 8006042:	f7ff ff21 	bl	8005e88 <_malloc_r>
 8006046:	6028      	str	r0, [r5, #0]
 8006048:	6128      	str	r0, [r5, #16]
 800604a:	b920      	cbnz	r0, 8006056 <_svfiprintf_r+0x2e>
 800604c:	230c      	movs	r3, #12
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006054:	e0d1      	b.n	80061fa <_svfiprintf_r+0x1d2>
 8006056:	2340      	movs	r3, #64	; 0x40
 8006058:	616b      	str	r3, [r5, #20]
 800605a:	2300      	movs	r3, #0
 800605c:	9309      	str	r3, [sp, #36]	; 0x24
 800605e:	2320      	movs	r3, #32
 8006060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006064:	f8cd 800c 	str.w	r8, [sp, #12]
 8006068:	2330      	movs	r3, #48	; 0x30
 800606a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006214 <_svfiprintf_r+0x1ec>
 800606e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006072:	f04f 0901 	mov.w	r9, #1
 8006076:	4623      	mov	r3, r4
 8006078:	469a      	mov	sl, r3
 800607a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800607e:	b10a      	cbz	r2, 8006084 <_svfiprintf_r+0x5c>
 8006080:	2a25      	cmp	r2, #37	; 0x25
 8006082:	d1f9      	bne.n	8006078 <_svfiprintf_r+0x50>
 8006084:	ebba 0b04 	subs.w	fp, sl, r4
 8006088:	d00b      	beq.n	80060a2 <_svfiprintf_r+0x7a>
 800608a:	465b      	mov	r3, fp
 800608c:	4622      	mov	r2, r4
 800608e:	4629      	mov	r1, r5
 8006090:	4638      	mov	r0, r7
 8006092:	f7ff ff6d 	bl	8005f70 <__ssputs_r>
 8006096:	3001      	adds	r0, #1
 8006098:	f000 80aa 	beq.w	80061f0 <_svfiprintf_r+0x1c8>
 800609c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609e:	445a      	add	r2, fp
 80060a0:	9209      	str	r2, [sp, #36]	; 0x24
 80060a2:	f89a 3000 	ldrb.w	r3, [sl]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80a2 	beq.w	80061f0 <_svfiprintf_r+0x1c8>
 80060ac:	2300      	movs	r3, #0
 80060ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060b6:	f10a 0a01 	add.w	sl, sl, #1
 80060ba:	9304      	str	r3, [sp, #16]
 80060bc:	9307      	str	r3, [sp, #28]
 80060be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c2:	931a      	str	r3, [sp, #104]	; 0x68
 80060c4:	4654      	mov	r4, sl
 80060c6:	2205      	movs	r2, #5
 80060c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060cc:	4851      	ldr	r0, [pc, #324]	; (8006214 <_svfiprintf_r+0x1ec>)
 80060ce:	f7fa f857 	bl	8000180 <memchr>
 80060d2:	9a04      	ldr	r2, [sp, #16]
 80060d4:	b9d8      	cbnz	r0, 800610e <_svfiprintf_r+0xe6>
 80060d6:	06d0      	lsls	r0, r2, #27
 80060d8:	bf44      	itt	mi
 80060da:	2320      	movmi	r3, #32
 80060dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e0:	0711      	lsls	r1, r2, #28
 80060e2:	bf44      	itt	mi
 80060e4:	232b      	movmi	r3, #43	; 0x2b
 80060e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ea:	f89a 3000 	ldrb.w	r3, [sl]
 80060ee:	2b2a      	cmp	r3, #42	; 0x2a
 80060f0:	d015      	beq.n	800611e <_svfiprintf_r+0xf6>
 80060f2:	9a07      	ldr	r2, [sp, #28]
 80060f4:	4654      	mov	r4, sl
 80060f6:	2000      	movs	r0, #0
 80060f8:	f04f 0c0a 	mov.w	ip, #10
 80060fc:	4621      	mov	r1, r4
 80060fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006102:	3b30      	subs	r3, #48	; 0x30
 8006104:	2b09      	cmp	r3, #9
 8006106:	d94e      	bls.n	80061a6 <_svfiprintf_r+0x17e>
 8006108:	b1b0      	cbz	r0, 8006138 <_svfiprintf_r+0x110>
 800610a:	9207      	str	r2, [sp, #28]
 800610c:	e014      	b.n	8006138 <_svfiprintf_r+0x110>
 800610e:	eba0 0308 	sub.w	r3, r0, r8
 8006112:	fa09 f303 	lsl.w	r3, r9, r3
 8006116:	4313      	orrs	r3, r2
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	46a2      	mov	sl, r4
 800611c:	e7d2      	b.n	80060c4 <_svfiprintf_r+0x9c>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	1d19      	adds	r1, r3, #4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	9103      	str	r1, [sp, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfbb      	ittet	lt
 800612a:	425b      	neglt	r3, r3
 800612c:	f042 0202 	orrlt.w	r2, r2, #2
 8006130:	9307      	strge	r3, [sp, #28]
 8006132:	9307      	strlt	r3, [sp, #28]
 8006134:	bfb8      	it	lt
 8006136:	9204      	strlt	r2, [sp, #16]
 8006138:	7823      	ldrb	r3, [r4, #0]
 800613a:	2b2e      	cmp	r3, #46	; 0x2e
 800613c:	d10c      	bne.n	8006158 <_svfiprintf_r+0x130>
 800613e:	7863      	ldrb	r3, [r4, #1]
 8006140:	2b2a      	cmp	r3, #42	; 0x2a
 8006142:	d135      	bne.n	80061b0 <_svfiprintf_r+0x188>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	9203      	str	r2, [sp, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfb8      	it	lt
 8006150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006154:	3402      	adds	r4, #2
 8006156:	9305      	str	r3, [sp, #20]
 8006158:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006218 <_svfiprintf_r+0x1f0>
 800615c:	7821      	ldrb	r1, [r4, #0]
 800615e:	2203      	movs	r2, #3
 8006160:	4650      	mov	r0, sl
 8006162:	f7fa f80d 	bl	8000180 <memchr>
 8006166:	b140      	cbz	r0, 800617a <_svfiprintf_r+0x152>
 8006168:	2340      	movs	r3, #64	; 0x40
 800616a:	eba0 000a 	sub.w	r0, r0, sl
 800616e:	fa03 f000 	lsl.w	r0, r3, r0
 8006172:	9b04      	ldr	r3, [sp, #16]
 8006174:	4303      	orrs	r3, r0
 8006176:	3401      	adds	r4, #1
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617e:	4827      	ldr	r0, [pc, #156]	; (800621c <_svfiprintf_r+0x1f4>)
 8006180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006184:	2206      	movs	r2, #6
 8006186:	f7f9 fffb 	bl	8000180 <memchr>
 800618a:	2800      	cmp	r0, #0
 800618c:	d038      	beq.n	8006200 <_svfiprintf_r+0x1d8>
 800618e:	4b24      	ldr	r3, [pc, #144]	; (8006220 <_svfiprintf_r+0x1f8>)
 8006190:	bb1b      	cbnz	r3, 80061da <_svfiprintf_r+0x1b2>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	3307      	adds	r3, #7
 8006196:	f023 0307 	bic.w	r3, r3, #7
 800619a:	3308      	adds	r3, #8
 800619c:	9303      	str	r3, [sp, #12]
 800619e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a0:	4433      	add	r3, r6
 80061a2:	9309      	str	r3, [sp, #36]	; 0x24
 80061a4:	e767      	b.n	8006076 <_svfiprintf_r+0x4e>
 80061a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80061aa:	460c      	mov	r4, r1
 80061ac:	2001      	movs	r0, #1
 80061ae:	e7a5      	b.n	80060fc <_svfiprintf_r+0xd4>
 80061b0:	2300      	movs	r3, #0
 80061b2:	3401      	adds	r4, #1
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	4619      	mov	r1, r3
 80061b8:	f04f 0c0a 	mov.w	ip, #10
 80061bc:	4620      	mov	r0, r4
 80061be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c2:	3a30      	subs	r2, #48	; 0x30
 80061c4:	2a09      	cmp	r2, #9
 80061c6:	d903      	bls.n	80061d0 <_svfiprintf_r+0x1a8>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0c5      	beq.n	8006158 <_svfiprintf_r+0x130>
 80061cc:	9105      	str	r1, [sp, #20]
 80061ce:	e7c3      	b.n	8006158 <_svfiprintf_r+0x130>
 80061d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80061d4:	4604      	mov	r4, r0
 80061d6:	2301      	movs	r3, #1
 80061d8:	e7f0      	b.n	80061bc <_svfiprintf_r+0x194>
 80061da:	ab03      	add	r3, sp, #12
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	462a      	mov	r2, r5
 80061e0:	4b10      	ldr	r3, [pc, #64]	; (8006224 <_svfiprintf_r+0x1fc>)
 80061e2:	a904      	add	r1, sp, #16
 80061e4:	4638      	mov	r0, r7
 80061e6:	f3af 8000 	nop.w
 80061ea:	1c42      	adds	r2, r0, #1
 80061ec:	4606      	mov	r6, r0
 80061ee:	d1d6      	bne.n	800619e <_svfiprintf_r+0x176>
 80061f0:	89ab      	ldrh	r3, [r5, #12]
 80061f2:	065b      	lsls	r3, r3, #25
 80061f4:	f53f af2c 	bmi.w	8006050 <_svfiprintf_r+0x28>
 80061f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061fa:	b01d      	add	sp, #116	; 0x74
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	ab03      	add	r3, sp, #12
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	462a      	mov	r2, r5
 8006206:	4b07      	ldr	r3, [pc, #28]	; (8006224 <_svfiprintf_r+0x1fc>)
 8006208:	a904      	add	r1, sp, #16
 800620a:	4638      	mov	r0, r7
 800620c:	f000 f9d2 	bl	80065b4 <_printf_i>
 8006210:	e7eb      	b.n	80061ea <_svfiprintf_r+0x1c2>
 8006212:	bf00      	nop
 8006214:	08007455 	.word	0x08007455
 8006218:	0800745b 	.word	0x0800745b
 800621c:	0800745f 	.word	0x0800745f
 8006220:	00000000 	.word	0x00000000
 8006224:	08005f71 	.word	0x08005f71

08006228 <__sfputc_r>:
 8006228:	6893      	ldr	r3, [r2, #8]
 800622a:	3b01      	subs	r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	b410      	push	{r4}
 8006230:	6093      	str	r3, [r2, #8]
 8006232:	da07      	bge.n	8006244 <__sfputc_r+0x1c>
 8006234:	6994      	ldr	r4, [r2, #24]
 8006236:	42a3      	cmp	r3, r4
 8006238:	db01      	blt.n	800623e <__sfputc_r+0x16>
 800623a:	290a      	cmp	r1, #10
 800623c:	d102      	bne.n	8006244 <__sfputc_r+0x1c>
 800623e:	bc10      	pop	{r4}
 8006240:	f000 baee 	b.w	8006820 <__swbuf_r>
 8006244:	6813      	ldr	r3, [r2, #0]
 8006246:	1c58      	adds	r0, r3, #1
 8006248:	6010      	str	r0, [r2, #0]
 800624a:	7019      	strb	r1, [r3, #0]
 800624c:	4608      	mov	r0, r1
 800624e:	bc10      	pop	{r4}
 8006250:	4770      	bx	lr

08006252 <__sfputs_r>:
 8006252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	4614      	mov	r4, r2
 800625a:	18d5      	adds	r5, r2, r3
 800625c:	42ac      	cmp	r4, r5
 800625e:	d101      	bne.n	8006264 <__sfputs_r+0x12>
 8006260:	2000      	movs	r0, #0
 8006262:	e007      	b.n	8006274 <__sfputs_r+0x22>
 8006264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006268:	463a      	mov	r2, r7
 800626a:	4630      	mov	r0, r6
 800626c:	f7ff ffdc 	bl	8006228 <__sfputc_r>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d1f3      	bne.n	800625c <__sfputs_r+0xa>
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006278 <_vfiprintf_r>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	460d      	mov	r5, r1
 800627e:	b09d      	sub	sp, #116	; 0x74
 8006280:	4614      	mov	r4, r2
 8006282:	4698      	mov	r8, r3
 8006284:	4606      	mov	r6, r0
 8006286:	b118      	cbz	r0, 8006290 <_vfiprintf_r+0x18>
 8006288:	6983      	ldr	r3, [r0, #24]
 800628a:	b90b      	cbnz	r3, 8006290 <_vfiprintf_r+0x18>
 800628c:	f000 fca6 	bl	8006bdc <__sinit>
 8006290:	4b89      	ldr	r3, [pc, #548]	; (80064b8 <_vfiprintf_r+0x240>)
 8006292:	429d      	cmp	r5, r3
 8006294:	d11b      	bne.n	80062ce <_vfiprintf_r+0x56>
 8006296:	6875      	ldr	r5, [r6, #4]
 8006298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800629a:	07d9      	lsls	r1, r3, #31
 800629c:	d405      	bmi.n	80062aa <_vfiprintf_r+0x32>
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	059a      	lsls	r2, r3, #22
 80062a2:	d402      	bmi.n	80062aa <_vfiprintf_r+0x32>
 80062a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a6:	f000 fd37 	bl	8006d18 <__retarget_lock_acquire_recursive>
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	071b      	lsls	r3, r3, #28
 80062ae:	d501      	bpl.n	80062b4 <_vfiprintf_r+0x3c>
 80062b0:	692b      	ldr	r3, [r5, #16]
 80062b2:	b9eb      	cbnz	r3, 80062f0 <_vfiprintf_r+0x78>
 80062b4:	4629      	mov	r1, r5
 80062b6:	4630      	mov	r0, r6
 80062b8:	f000 fb04 	bl	80068c4 <__swsetup_r>
 80062bc:	b1c0      	cbz	r0, 80062f0 <_vfiprintf_r+0x78>
 80062be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c0:	07dc      	lsls	r4, r3, #31
 80062c2:	d50e      	bpl.n	80062e2 <_vfiprintf_r+0x6a>
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062c8:	b01d      	add	sp, #116	; 0x74
 80062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ce:	4b7b      	ldr	r3, [pc, #492]	; (80064bc <_vfiprintf_r+0x244>)
 80062d0:	429d      	cmp	r5, r3
 80062d2:	d101      	bne.n	80062d8 <_vfiprintf_r+0x60>
 80062d4:	68b5      	ldr	r5, [r6, #8]
 80062d6:	e7df      	b.n	8006298 <_vfiprintf_r+0x20>
 80062d8:	4b79      	ldr	r3, [pc, #484]	; (80064c0 <_vfiprintf_r+0x248>)
 80062da:	429d      	cmp	r5, r3
 80062dc:	bf08      	it	eq
 80062de:	68f5      	ldreq	r5, [r6, #12]
 80062e0:	e7da      	b.n	8006298 <_vfiprintf_r+0x20>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	0598      	lsls	r0, r3, #22
 80062e6:	d4ed      	bmi.n	80062c4 <_vfiprintf_r+0x4c>
 80062e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ea:	f000 fd16 	bl	8006d1a <__retarget_lock_release_recursive>
 80062ee:	e7e9      	b.n	80062c4 <_vfiprintf_r+0x4c>
 80062f0:	2300      	movs	r3, #0
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	2320      	movs	r3, #32
 80062f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80062fe:	2330      	movs	r3, #48	; 0x30
 8006300:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064c4 <_vfiprintf_r+0x24c>
 8006304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006308:	f04f 0901 	mov.w	r9, #1
 800630c:	4623      	mov	r3, r4
 800630e:	469a      	mov	sl, r3
 8006310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006314:	b10a      	cbz	r2, 800631a <_vfiprintf_r+0xa2>
 8006316:	2a25      	cmp	r2, #37	; 0x25
 8006318:	d1f9      	bne.n	800630e <_vfiprintf_r+0x96>
 800631a:	ebba 0b04 	subs.w	fp, sl, r4
 800631e:	d00b      	beq.n	8006338 <_vfiprintf_r+0xc0>
 8006320:	465b      	mov	r3, fp
 8006322:	4622      	mov	r2, r4
 8006324:	4629      	mov	r1, r5
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff ff93 	bl	8006252 <__sfputs_r>
 800632c:	3001      	adds	r0, #1
 800632e:	f000 80aa 	beq.w	8006486 <_vfiprintf_r+0x20e>
 8006332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006334:	445a      	add	r2, fp
 8006336:	9209      	str	r2, [sp, #36]	; 0x24
 8006338:	f89a 3000 	ldrb.w	r3, [sl]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80a2 	beq.w	8006486 <_vfiprintf_r+0x20e>
 8006342:	2300      	movs	r3, #0
 8006344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800634c:	f10a 0a01 	add.w	sl, sl, #1
 8006350:	9304      	str	r3, [sp, #16]
 8006352:	9307      	str	r3, [sp, #28]
 8006354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006358:	931a      	str	r3, [sp, #104]	; 0x68
 800635a:	4654      	mov	r4, sl
 800635c:	2205      	movs	r2, #5
 800635e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006362:	4858      	ldr	r0, [pc, #352]	; (80064c4 <_vfiprintf_r+0x24c>)
 8006364:	f7f9 ff0c 	bl	8000180 <memchr>
 8006368:	9a04      	ldr	r2, [sp, #16]
 800636a:	b9d8      	cbnz	r0, 80063a4 <_vfiprintf_r+0x12c>
 800636c:	06d1      	lsls	r1, r2, #27
 800636e:	bf44      	itt	mi
 8006370:	2320      	movmi	r3, #32
 8006372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006376:	0713      	lsls	r3, r2, #28
 8006378:	bf44      	itt	mi
 800637a:	232b      	movmi	r3, #43	; 0x2b
 800637c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006380:	f89a 3000 	ldrb.w	r3, [sl]
 8006384:	2b2a      	cmp	r3, #42	; 0x2a
 8006386:	d015      	beq.n	80063b4 <_vfiprintf_r+0x13c>
 8006388:	9a07      	ldr	r2, [sp, #28]
 800638a:	4654      	mov	r4, sl
 800638c:	2000      	movs	r0, #0
 800638e:	f04f 0c0a 	mov.w	ip, #10
 8006392:	4621      	mov	r1, r4
 8006394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006398:	3b30      	subs	r3, #48	; 0x30
 800639a:	2b09      	cmp	r3, #9
 800639c:	d94e      	bls.n	800643c <_vfiprintf_r+0x1c4>
 800639e:	b1b0      	cbz	r0, 80063ce <_vfiprintf_r+0x156>
 80063a0:	9207      	str	r2, [sp, #28]
 80063a2:	e014      	b.n	80063ce <_vfiprintf_r+0x156>
 80063a4:	eba0 0308 	sub.w	r3, r0, r8
 80063a8:	fa09 f303 	lsl.w	r3, r9, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	9304      	str	r3, [sp, #16]
 80063b0:	46a2      	mov	sl, r4
 80063b2:	e7d2      	b.n	800635a <_vfiprintf_r+0xe2>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	1d19      	adds	r1, r3, #4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	9103      	str	r1, [sp, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bfbb      	ittet	lt
 80063c0:	425b      	neglt	r3, r3
 80063c2:	f042 0202 	orrlt.w	r2, r2, #2
 80063c6:	9307      	strge	r3, [sp, #28]
 80063c8:	9307      	strlt	r3, [sp, #28]
 80063ca:	bfb8      	it	lt
 80063cc:	9204      	strlt	r2, [sp, #16]
 80063ce:	7823      	ldrb	r3, [r4, #0]
 80063d0:	2b2e      	cmp	r3, #46	; 0x2e
 80063d2:	d10c      	bne.n	80063ee <_vfiprintf_r+0x176>
 80063d4:	7863      	ldrb	r3, [r4, #1]
 80063d6:	2b2a      	cmp	r3, #42	; 0x2a
 80063d8:	d135      	bne.n	8006446 <_vfiprintf_r+0x1ce>
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	1d1a      	adds	r2, r3, #4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	9203      	str	r2, [sp, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bfb8      	it	lt
 80063e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063ea:	3402      	adds	r4, #2
 80063ec:	9305      	str	r3, [sp, #20]
 80063ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80064c8 <_vfiprintf_r+0x250>
 80063f2:	7821      	ldrb	r1, [r4, #0]
 80063f4:	2203      	movs	r2, #3
 80063f6:	4650      	mov	r0, sl
 80063f8:	f7f9 fec2 	bl	8000180 <memchr>
 80063fc:	b140      	cbz	r0, 8006410 <_vfiprintf_r+0x198>
 80063fe:	2340      	movs	r3, #64	; 0x40
 8006400:	eba0 000a 	sub.w	r0, r0, sl
 8006404:	fa03 f000 	lsl.w	r0, r3, r0
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	4303      	orrs	r3, r0
 800640c:	3401      	adds	r4, #1
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006414:	482d      	ldr	r0, [pc, #180]	; (80064cc <_vfiprintf_r+0x254>)
 8006416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800641a:	2206      	movs	r2, #6
 800641c:	f7f9 feb0 	bl	8000180 <memchr>
 8006420:	2800      	cmp	r0, #0
 8006422:	d03f      	beq.n	80064a4 <_vfiprintf_r+0x22c>
 8006424:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <_vfiprintf_r+0x258>)
 8006426:	bb1b      	cbnz	r3, 8006470 <_vfiprintf_r+0x1f8>
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	3307      	adds	r3, #7
 800642c:	f023 0307 	bic.w	r3, r3, #7
 8006430:	3308      	adds	r3, #8
 8006432:	9303      	str	r3, [sp, #12]
 8006434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006436:	443b      	add	r3, r7
 8006438:	9309      	str	r3, [sp, #36]	; 0x24
 800643a:	e767      	b.n	800630c <_vfiprintf_r+0x94>
 800643c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006440:	460c      	mov	r4, r1
 8006442:	2001      	movs	r0, #1
 8006444:	e7a5      	b.n	8006392 <_vfiprintf_r+0x11a>
 8006446:	2300      	movs	r3, #0
 8006448:	3401      	adds	r4, #1
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	4619      	mov	r1, r3
 800644e:	f04f 0c0a 	mov.w	ip, #10
 8006452:	4620      	mov	r0, r4
 8006454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006458:	3a30      	subs	r2, #48	; 0x30
 800645a:	2a09      	cmp	r2, #9
 800645c:	d903      	bls.n	8006466 <_vfiprintf_r+0x1ee>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0c5      	beq.n	80063ee <_vfiprintf_r+0x176>
 8006462:	9105      	str	r1, [sp, #20]
 8006464:	e7c3      	b.n	80063ee <_vfiprintf_r+0x176>
 8006466:	fb0c 2101 	mla	r1, ip, r1, r2
 800646a:	4604      	mov	r4, r0
 800646c:	2301      	movs	r3, #1
 800646e:	e7f0      	b.n	8006452 <_vfiprintf_r+0x1da>
 8006470:	ab03      	add	r3, sp, #12
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	462a      	mov	r2, r5
 8006476:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <_vfiprintf_r+0x25c>)
 8006478:	a904      	add	r1, sp, #16
 800647a:	4630      	mov	r0, r6
 800647c:	f3af 8000 	nop.w
 8006480:	4607      	mov	r7, r0
 8006482:	1c78      	adds	r0, r7, #1
 8006484:	d1d6      	bne.n	8006434 <_vfiprintf_r+0x1bc>
 8006486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006488:	07d9      	lsls	r1, r3, #31
 800648a:	d405      	bmi.n	8006498 <_vfiprintf_r+0x220>
 800648c:	89ab      	ldrh	r3, [r5, #12]
 800648e:	059a      	lsls	r2, r3, #22
 8006490:	d402      	bmi.n	8006498 <_vfiprintf_r+0x220>
 8006492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006494:	f000 fc41 	bl	8006d1a <__retarget_lock_release_recursive>
 8006498:	89ab      	ldrh	r3, [r5, #12]
 800649a:	065b      	lsls	r3, r3, #25
 800649c:	f53f af12 	bmi.w	80062c4 <_vfiprintf_r+0x4c>
 80064a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a2:	e711      	b.n	80062c8 <_vfiprintf_r+0x50>
 80064a4:	ab03      	add	r3, sp, #12
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	462a      	mov	r2, r5
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <_vfiprintf_r+0x25c>)
 80064ac:	a904      	add	r1, sp, #16
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f880 	bl	80065b4 <_printf_i>
 80064b4:	e7e4      	b.n	8006480 <_vfiprintf_r+0x208>
 80064b6:	bf00      	nop
 80064b8:	080074a8 	.word	0x080074a8
 80064bc:	080074c8 	.word	0x080074c8
 80064c0:	08007488 	.word	0x08007488
 80064c4:	08007455 	.word	0x08007455
 80064c8:	0800745b 	.word	0x0800745b
 80064cc:	0800745f 	.word	0x0800745f
 80064d0:	00000000 	.word	0x00000000
 80064d4:	08006253 	.word	0x08006253

080064d8 <_printf_common>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	4616      	mov	r6, r2
 80064de:	4699      	mov	r9, r3
 80064e0:	688a      	ldr	r2, [r1, #8]
 80064e2:	690b      	ldr	r3, [r1, #16]
 80064e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	bfb8      	it	lt
 80064ec:	4613      	movlt	r3, r2
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064f4:	4607      	mov	r7, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	b10a      	cbz	r2, 80064fe <_printf_common+0x26>
 80064fa:	3301      	adds	r3, #1
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	0699      	lsls	r1, r3, #26
 8006502:	bf42      	ittt	mi
 8006504:	6833      	ldrmi	r3, [r6, #0]
 8006506:	3302      	addmi	r3, #2
 8006508:	6033      	strmi	r3, [r6, #0]
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	f015 0506 	ands.w	r5, r5, #6
 8006510:	d106      	bne.n	8006520 <_printf_common+0x48>
 8006512:	f104 0a19 	add.w	sl, r4, #25
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	6832      	ldr	r2, [r6, #0]
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	42ab      	cmp	r3, r5
 800651e:	dc26      	bgt.n	800656e <_printf_common+0x96>
 8006520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006524:	1e13      	subs	r3, r2, #0
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	bf18      	it	ne
 800652a:	2301      	movne	r3, #1
 800652c:	0692      	lsls	r2, r2, #26
 800652e:	d42b      	bmi.n	8006588 <_printf_common+0xb0>
 8006530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006534:	4649      	mov	r1, r9
 8006536:	4638      	mov	r0, r7
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d01e      	beq.n	800657c <_printf_common+0xa4>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	68e5      	ldr	r5, [r4, #12]
 8006542:	6832      	ldr	r2, [r6, #0]
 8006544:	f003 0306 	and.w	r3, r3, #6
 8006548:	2b04      	cmp	r3, #4
 800654a:	bf08      	it	eq
 800654c:	1aad      	subeq	r5, r5, r2
 800654e:	68a3      	ldr	r3, [r4, #8]
 8006550:	6922      	ldr	r2, [r4, #16]
 8006552:	bf0c      	ite	eq
 8006554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006558:	2500      	movne	r5, #0
 800655a:	4293      	cmp	r3, r2
 800655c:	bfc4      	itt	gt
 800655e:	1a9b      	subgt	r3, r3, r2
 8006560:	18ed      	addgt	r5, r5, r3
 8006562:	2600      	movs	r6, #0
 8006564:	341a      	adds	r4, #26
 8006566:	42b5      	cmp	r5, r6
 8006568:	d11a      	bne.n	80065a0 <_printf_common+0xc8>
 800656a:	2000      	movs	r0, #0
 800656c:	e008      	b.n	8006580 <_printf_common+0xa8>
 800656e:	2301      	movs	r3, #1
 8006570:	4652      	mov	r2, sl
 8006572:	4649      	mov	r1, r9
 8006574:	4638      	mov	r0, r7
 8006576:	47c0      	blx	r8
 8006578:	3001      	adds	r0, #1
 800657a:	d103      	bne.n	8006584 <_printf_common+0xac>
 800657c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006584:	3501      	adds	r5, #1
 8006586:	e7c6      	b.n	8006516 <_printf_common+0x3e>
 8006588:	18e1      	adds	r1, r4, r3
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	2030      	movs	r0, #48	; 0x30
 800658e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006592:	4422      	add	r2, r4
 8006594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800659c:	3302      	adds	r3, #2
 800659e:	e7c7      	b.n	8006530 <_printf_common+0x58>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4622      	mov	r2, r4
 80065a4:	4649      	mov	r1, r9
 80065a6:	4638      	mov	r0, r7
 80065a8:	47c0      	blx	r8
 80065aa:	3001      	adds	r0, #1
 80065ac:	d0e6      	beq.n	800657c <_printf_common+0xa4>
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7d9      	b.n	8006566 <_printf_common+0x8e>
	...

080065b4 <_printf_i>:
 80065b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	7e0f      	ldrb	r7, [r1, #24]
 80065ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065bc:	2f78      	cmp	r7, #120	; 0x78
 80065be:	4691      	mov	r9, r2
 80065c0:	4680      	mov	r8, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	469a      	mov	sl, r3
 80065c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065ca:	d807      	bhi.n	80065dc <_printf_i+0x28>
 80065cc:	2f62      	cmp	r7, #98	; 0x62
 80065ce:	d80a      	bhi.n	80065e6 <_printf_i+0x32>
 80065d0:	2f00      	cmp	r7, #0
 80065d2:	f000 80d8 	beq.w	8006786 <_printf_i+0x1d2>
 80065d6:	2f58      	cmp	r7, #88	; 0x58
 80065d8:	f000 80a3 	beq.w	8006722 <_printf_i+0x16e>
 80065dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065e4:	e03a      	b.n	800665c <_printf_i+0xa8>
 80065e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ea:	2b15      	cmp	r3, #21
 80065ec:	d8f6      	bhi.n	80065dc <_printf_i+0x28>
 80065ee:	a101      	add	r1, pc, #4	; (adr r1, 80065f4 <_printf_i+0x40>)
 80065f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065f4:	0800664d 	.word	0x0800664d
 80065f8:	08006661 	.word	0x08006661
 80065fc:	080065dd 	.word	0x080065dd
 8006600:	080065dd 	.word	0x080065dd
 8006604:	080065dd 	.word	0x080065dd
 8006608:	080065dd 	.word	0x080065dd
 800660c:	08006661 	.word	0x08006661
 8006610:	080065dd 	.word	0x080065dd
 8006614:	080065dd 	.word	0x080065dd
 8006618:	080065dd 	.word	0x080065dd
 800661c:	080065dd 	.word	0x080065dd
 8006620:	0800676d 	.word	0x0800676d
 8006624:	08006691 	.word	0x08006691
 8006628:	0800674f 	.word	0x0800674f
 800662c:	080065dd 	.word	0x080065dd
 8006630:	080065dd 	.word	0x080065dd
 8006634:	0800678f 	.word	0x0800678f
 8006638:	080065dd 	.word	0x080065dd
 800663c:	08006691 	.word	0x08006691
 8006640:	080065dd 	.word	0x080065dd
 8006644:	080065dd 	.word	0x080065dd
 8006648:	08006757 	.word	0x08006757
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	1d1a      	adds	r2, r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	602a      	str	r2, [r5, #0]
 8006654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800665c:	2301      	movs	r3, #1
 800665e:	e0a3      	b.n	80067a8 <_printf_i+0x1f4>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	6829      	ldr	r1, [r5, #0]
 8006664:	0606      	lsls	r6, r0, #24
 8006666:	f101 0304 	add.w	r3, r1, #4
 800666a:	d50a      	bpl.n	8006682 <_printf_i+0xce>
 800666c:	680e      	ldr	r6, [r1, #0]
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	2e00      	cmp	r6, #0
 8006672:	da03      	bge.n	800667c <_printf_i+0xc8>
 8006674:	232d      	movs	r3, #45	; 0x2d
 8006676:	4276      	negs	r6, r6
 8006678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667c:	485e      	ldr	r0, [pc, #376]	; (80067f8 <_printf_i+0x244>)
 800667e:	230a      	movs	r3, #10
 8006680:	e019      	b.n	80066b6 <_printf_i+0x102>
 8006682:	680e      	ldr	r6, [r1, #0]
 8006684:	602b      	str	r3, [r5, #0]
 8006686:	f010 0f40 	tst.w	r0, #64	; 0x40
 800668a:	bf18      	it	ne
 800668c:	b236      	sxthne	r6, r6
 800668e:	e7ef      	b.n	8006670 <_printf_i+0xbc>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	6820      	ldr	r0, [r4, #0]
 8006694:	1d19      	adds	r1, r3, #4
 8006696:	6029      	str	r1, [r5, #0]
 8006698:	0601      	lsls	r1, r0, #24
 800669a:	d501      	bpl.n	80066a0 <_printf_i+0xec>
 800669c:	681e      	ldr	r6, [r3, #0]
 800669e:	e002      	b.n	80066a6 <_printf_i+0xf2>
 80066a0:	0646      	lsls	r6, r0, #25
 80066a2:	d5fb      	bpl.n	800669c <_printf_i+0xe8>
 80066a4:	881e      	ldrh	r6, [r3, #0]
 80066a6:	4854      	ldr	r0, [pc, #336]	; (80067f8 <_printf_i+0x244>)
 80066a8:	2f6f      	cmp	r7, #111	; 0x6f
 80066aa:	bf0c      	ite	eq
 80066ac:	2308      	moveq	r3, #8
 80066ae:	230a      	movne	r3, #10
 80066b0:	2100      	movs	r1, #0
 80066b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066b6:	6865      	ldr	r5, [r4, #4]
 80066b8:	60a5      	str	r5, [r4, #8]
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	bfa2      	ittt	ge
 80066be:	6821      	ldrge	r1, [r4, #0]
 80066c0:	f021 0104 	bicge.w	r1, r1, #4
 80066c4:	6021      	strge	r1, [r4, #0]
 80066c6:	b90e      	cbnz	r6, 80066cc <_printf_i+0x118>
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	d04d      	beq.n	8006768 <_printf_i+0x1b4>
 80066cc:	4615      	mov	r5, r2
 80066ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80066d2:	fb03 6711 	mls	r7, r3, r1, r6
 80066d6:	5dc7      	ldrb	r7, [r0, r7]
 80066d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066dc:	4637      	mov	r7, r6
 80066de:	42bb      	cmp	r3, r7
 80066e0:	460e      	mov	r6, r1
 80066e2:	d9f4      	bls.n	80066ce <_printf_i+0x11a>
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d10b      	bne.n	8006700 <_printf_i+0x14c>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	07de      	lsls	r6, r3, #31
 80066ec:	d508      	bpl.n	8006700 <_printf_i+0x14c>
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	6861      	ldr	r1, [r4, #4]
 80066f2:	4299      	cmp	r1, r3
 80066f4:	bfde      	ittt	le
 80066f6:	2330      	movle	r3, #48	; 0x30
 80066f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006700:	1b52      	subs	r2, r2, r5
 8006702:	6122      	str	r2, [r4, #16]
 8006704:	f8cd a000 	str.w	sl, [sp]
 8006708:	464b      	mov	r3, r9
 800670a:	aa03      	add	r2, sp, #12
 800670c:	4621      	mov	r1, r4
 800670e:	4640      	mov	r0, r8
 8006710:	f7ff fee2 	bl	80064d8 <_printf_common>
 8006714:	3001      	adds	r0, #1
 8006716:	d14c      	bne.n	80067b2 <_printf_i+0x1fe>
 8006718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800671c:	b004      	add	sp, #16
 800671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006722:	4835      	ldr	r0, [pc, #212]	; (80067f8 <_printf_i+0x244>)
 8006724:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006728:	6829      	ldr	r1, [r5, #0]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006730:	6029      	str	r1, [r5, #0]
 8006732:	061d      	lsls	r5, r3, #24
 8006734:	d514      	bpl.n	8006760 <_printf_i+0x1ac>
 8006736:	07df      	lsls	r7, r3, #31
 8006738:	bf44      	itt	mi
 800673a:	f043 0320 	orrmi.w	r3, r3, #32
 800673e:	6023      	strmi	r3, [r4, #0]
 8006740:	b91e      	cbnz	r6, 800674a <_printf_i+0x196>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	f023 0320 	bic.w	r3, r3, #32
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	2310      	movs	r3, #16
 800674c:	e7b0      	b.n	80066b0 <_printf_i+0xfc>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	f043 0320 	orr.w	r3, r3, #32
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	2378      	movs	r3, #120	; 0x78
 8006758:	4828      	ldr	r0, [pc, #160]	; (80067fc <_printf_i+0x248>)
 800675a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800675e:	e7e3      	b.n	8006728 <_printf_i+0x174>
 8006760:	0659      	lsls	r1, r3, #25
 8006762:	bf48      	it	mi
 8006764:	b2b6      	uxthmi	r6, r6
 8006766:	e7e6      	b.n	8006736 <_printf_i+0x182>
 8006768:	4615      	mov	r5, r2
 800676a:	e7bb      	b.n	80066e4 <_printf_i+0x130>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	6826      	ldr	r6, [r4, #0]
 8006770:	6961      	ldr	r1, [r4, #20]
 8006772:	1d18      	adds	r0, r3, #4
 8006774:	6028      	str	r0, [r5, #0]
 8006776:	0635      	lsls	r5, r6, #24
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	d501      	bpl.n	8006780 <_printf_i+0x1cc>
 800677c:	6019      	str	r1, [r3, #0]
 800677e:	e002      	b.n	8006786 <_printf_i+0x1d2>
 8006780:	0670      	lsls	r0, r6, #25
 8006782:	d5fb      	bpl.n	800677c <_printf_i+0x1c8>
 8006784:	8019      	strh	r1, [r3, #0]
 8006786:	2300      	movs	r3, #0
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	4615      	mov	r5, r2
 800678c:	e7ba      	b.n	8006704 <_printf_i+0x150>
 800678e:	682b      	ldr	r3, [r5, #0]
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	602a      	str	r2, [r5, #0]
 8006794:	681d      	ldr	r5, [r3, #0]
 8006796:	6862      	ldr	r2, [r4, #4]
 8006798:	2100      	movs	r1, #0
 800679a:	4628      	mov	r0, r5
 800679c:	f7f9 fcf0 	bl	8000180 <memchr>
 80067a0:	b108      	cbz	r0, 80067a6 <_printf_i+0x1f2>
 80067a2:	1b40      	subs	r0, r0, r5
 80067a4:	6060      	str	r0, [r4, #4]
 80067a6:	6863      	ldr	r3, [r4, #4]
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	2300      	movs	r3, #0
 80067ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b0:	e7a8      	b.n	8006704 <_printf_i+0x150>
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	462a      	mov	r2, r5
 80067b6:	4649      	mov	r1, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	47d0      	blx	sl
 80067bc:	3001      	adds	r0, #1
 80067be:	d0ab      	beq.n	8006718 <_printf_i+0x164>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	079b      	lsls	r3, r3, #30
 80067c4:	d413      	bmi.n	80067ee <_printf_i+0x23a>
 80067c6:	68e0      	ldr	r0, [r4, #12]
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	4298      	cmp	r0, r3
 80067cc:	bfb8      	it	lt
 80067ce:	4618      	movlt	r0, r3
 80067d0:	e7a4      	b.n	800671c <_printf_i+0x168>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4632      	mov	r2, r6
 80067d6:	4649      	mov	r1, r9
 80067d8:	4640      	mov	r0, r8
 80067da:	47d0      	blx	sl
 80067dc:	3001      	adds	r0, #1
 80067de:	d09b      	beq.n	8006718 <_printf_i+0x164>
 80067e0:	3501      	adds	r5, #1
 80067e2:	68e3      	ldr	r3, [r4, #12]
 80067e4:	9903      	ldr	r1, [sp, #12]
 80067e6:	1a5b      	subs	r3, r3, r1
 80067e8:	42ab      	cmp	r3, r5
 80067ea:	dcf2      	bgt.n	80067d2 <_printf_i+0x21e>
 80067ec:	e7eb      	b.n	80067c6 <_printf_i+0x212>
 80067ee:	2500      	movs	r5, #0
 80067f0:	f104 0619 	add.w	r6, r4, #25
 80067f4:	e7f5      	b.n	80067e2 <_printf_i+0x22e>
 80067f6:	bf00      	nop
 80067f8:	08007466 	.word	0x08007466
 80067fc:	08007477 	.word	0x08007477

08006800 <_sbrk_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d06      	ldr	r5, [pc, #24]	; (800681c <_sbrk_r+0x1c>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fb fe16 	bl	800243c <_sbrk>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_sbrk_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_sbrk_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20001e58 	.word	0x20001e58

08006820 <__swbuf_r>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	460e      	mov	r6, r1
 8006824:	4614      	mov	r4, r2
 8006826:	4605      	mov	r5, r0
 8006828:	b118      	cbz	r0, 8006832 <__swbuf_r+0x12>
 800682a:	6983      	ldr	r3, [r0, #24]
 800682c:	b90b      	cbnz	r3, 8006832 <__swbuf_r+0x12>
 800682e:	f000 f9d5 	bl	8006bdc <__sinit>
 8006832:	4b21      	ldr	r3, [pc, #132]	; (80068b8 <__swbuf_r+0x98>)
 8006834:	429c      	cmp	r4, r3
 8006836:	d12b      	bne.n	8006890 <__swbuf_r+0x70>
 8006838:	686c      	ldr	r4, [r5, #4]
 800683a:	69a3      	ldr	r3, [r4, #24]
 800683c:	60a3      	str	r3, [r4, #8]
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	071a      	lsls	r2, r3, #28
 8006842:	d52f      	bpl.n	80068a4 <__swbuf_r+0x84>
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	b36b      	cbz	r3, 80068a4 <__swbuf_r+0x84>
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	1ac0      	subs	r0, r0, r3
 800684e:	6963      	ldr	r3, [r4, #20]
 8006850:	b2f6      	uxtb	r6, r6
 8006852:	4283      	cmp	r3, r0
 8006854:	4637      	mov	r7, r6
 8006856:	dc04      	bgt.n	8006862 <__swbuf_r+0x42>
 8006858:	4621      	mov	r1, r4
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f92a 	bl	8006ab4 <_fflush_r>
 8006860:	bb30      	cbnz	r0, 80068b0 <__swbuf_r+0x90>
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	3b01      	subs	r3, #1
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	701e      	strb	r6, [r3, #0]
 8006870:	6963      	ldr	r3, [r4, #20]
 8006872:	3001      	adds	r0, #1
 8006874:	4283      	cmp	r3, r0
 8006876:	d004      	beq.n	8006882 <__swbuf_r+0x62>
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	07db      	lsls	r3, r3, #31
 800687c:	d506      	bpl.n	800688c <__swbuf_r+0x6c>
 800687e:	2e0a      	cmp	r6, #10
 8006880:	d104      	bne.n	800688c <__swbuf_r+0x6c>
 8006882:	4621      	mov	r1, r4
 8006884:	4628      	mov	r0, r5
 8006886:	f000 f915 	bl	8006ab4 <_fflush_r>
 800688a:	b988      	cbnz	r0, 80068b0 <__swbuf_r+0x90>
 800688c:	4638      	mov	r0, r7
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006890:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <__swbuf_r+0x9c>)
 8006892:	429c      	cmp	r4, r3
 8006894:	d101      	bne.n	800689a <__swbuf_r+0x7a>
 8006896:	68ac      	ldr	r4, [r5, #8]
 8006898:	e7cf      	b.n	800683a <__swbuf_r+0x1a>
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <__swbuf_r+0xa0>)
 800689c:	429c      	cmp	r4, r3
 800689e:	bf08      	it	eq
 80068a0:	68ec      	ldreq	r4, [r5, #12]
 80068a2:	e7ca      	b.n	800683a <__swbuf_r+0x1a>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 f80c 	bl	80068c4 <__swsetup_r>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d0cb      	beq.n	8006848 <__swbuf_r+0x28>
 80068b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068b4:	e7ea      	b.n	800688c <__swbuf_r+0x6c>
 80068b6:	bf00      	nop
 80068b8:	080074a8 	.word	0x080074a8
 80068bc:	080074c8 	.word	0x080074c8
 80068c0:	08007488 	.word	0x08007488

080068c4 <__swsetup_r>:
 80068c4:	4b32      	ldr	r3, [pc, #200]	; (8006990 <__swsetup_r+0xcc>)
 80068c6:	b570      	push	{r4, r5, r6, lr}
 80068c8:	681d      	ldr	r5, [r3, #0]
 80068ca:	4606      	mov	r6, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	b125      	cbz	r5, 80068da <__swsetup_r+0x16>
 80068d0:	69ab      	ldr	r3, [r5, #24]
 80068d2:	b913      	cbnz	r3, 80068da <__swsetup_r+0x16>
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 f981 	bl	8006bdc <__sinit>
 80068da:	4b2e      	ldr	r3, [pc, #184]	; (8006994 <__swsetup_r+0xd0>)
 80068dc:	429c      	cmp	r4, r3
 80068de:	d10f      	bne.n	8006900 <__swsetup_r+0x3c>
 80068e0:	686c      	ldr	r4, [r5, #4]
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e8:	0719      	lsls	r1, r3, #28
 80068ea:	d42c      	bmi.n	8006946 <__swsetup_r+0x82>
 80068ec:	06dd      	lsls	r5, r3, #27
 80068ee:	d411      	bmi.n	8006914 <__swsetup_r+0x50>
 80068f0:	2309      	movs	r3, #9
 80068f2:	6033      	str	r3, [r6, #0]
 80068f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fe:	e03e      	b.n	800697e <__swsetup_r+0xba>
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <__swsetup_r+0xd4>)
 8006902:	429c      	cmp	r4, r3
 8006904:	d101      	bne.n	800690a <__swsetup_r+0x46>
 8006906:	68ac      	ldr	r4, [r5, #8]
 8006908:	e7eb      	b.n	80068e2 <__swsetup_r+0x1e>
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <__swsetup_r+0xd8>)
 800690c:	429c      	cmp	r4, r3
 800690e:	bf08      	it	eq
 8006910:	68ec      	ldreq	r4, [r5, #12]
 8006912:	e7e6      	b.n	80068e2 <__swsetup_r+0x1e>
 8006914:	0758      	lsls	r0, r3, #29
 8006916:	d512      	bpl.n	800693e <__swsetup_r+0x7a>
 8006918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800691a:	b141      	cbz	r1, 800692e <__swsetup_r+0x6a>
 800691c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006920:	4299      	cmp	r1, r3
 8006922:	d002      	beq.n	800692a <__swsetup_r+0x66>
 8006924:	4630      	mov	r0, r6
 8006926:	f7ff fa45 	bl	8005db4 <_free_r>
 800692a:	2300      	movs	r3, #0
 800692c:	6363      	str	r3, [r4, #52]	; 0x34
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	2300      	movs	r3, #0
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	f043 0308 	orr.w	r3, r3, #8
 8006944:	81a3      	strh	r3, [r4, #12]
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	b94b      	cbnz	r3, 800695e <__swsetup_r+0x9a>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006954:	d003      	beq.n	800695e <__swsetup_r+0x9a>
 8006956:	4621      	mov	r1, r4
 8006958:	4630      	mov	r0, r6
 800695a:	f000 fa05 	bl	8006d68 <__smakebuf_r>
 800695e:	89a0      	ldrh	r0, [r4, #12]
 8006960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006964:	f010 0301 	ands.w	r3, r0, #1
 8006968:	d00a      	beq.n	8006980 <__swsetup_r+0xbc>
 800696a:	2300      	movs	r3, #0
 800696c:	60a3      	str	r3, [r4, #8]
 800696e:	6963      	ldr	r3, [r4, #20]
 8006970:	425b      	negs	r3, r3
 8006972:	61a3      	str	r3, [r4, #24]
 8006974:	6923      	ldr	r3, [r4, #16]
 8006976:	b943      	cbnz	r3, 800698a <__swsetup_r+0xc6>
 8006978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800697c:	d1ba      	bne.n	80068f4 <__swsetup_r+0x30>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	0781      	lsls	r1, r0, #30
 8006982:	bf58      	it	pl
 8006984:	6963      	ldrpl	r3, [r4, #20]
 8006986:	60a3      	str	r3, [r4, #8]
 8006988:	e7f4      	b.n	8006974 <__swsetup_r+0xb0>
 800698a:	2000      	movs	r0, #0
 800698c:	e7f7      	b.n	800697e <__swsetup_r+0xba>
 800698e:	bf00      	nop
 8006990:	20000014 	.word	0x20000014
 8006994:	080074a8 	.word	0x080074a8
 8006998:	080074c8 	.word	0x080074c8
 800699c:	08007488 	.word	0x08007488

080069a0 <abort>:
 80069a0:	b508      	push	{r3, lr}
 80069a2:	2006      	movs	r0, #6
 80069a4:	f000 fa9e 	bl	8006ee4 <raise>
 80069a8:	2001      	movs	r0, #1
 80069aa:	f7fb fcd4 	bl	8002356 <_exit>
	...

080069b0 <__sflush_r>:
 80069b0:	898a      	ldrh	r2, [r1, #12]
 80069b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b4:	4605      	mov	r5, r0
 80069b6:	0710      	lsls	r0, r2, #28
 80069b8:	460c      	mov	r4, r1
 80069ba:	d457      	bmi.n	8006a6c <__sflush_r+0xbc>
 80069bc:	684b      	ldr	r3, [r1, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dc04      	bgt.n	80069cc <__sflush_r+0x1c>
 80069c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dc01      	bgt.n	80069cc <__sflush_r+0x1c>
 80069c8:	2000      	movs	r0, #0
 80069ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d0fa      	beq.n	80069c8 <__sflush_r+0x18>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d8:	682f      	ldr	r7, [r5, #0]
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	d032      	beq.n	8006a44 <__sflush_r+0x94>
 80069de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	075a      	lsls	r2, r3, #29
 80069e4:	d505      	bpl.n	80069f2 <__sflush_r+0x42>
 80069e6:	6863      	ldr	r3, [r4, #4]
 80069e8:	1ac0      	subs	r0, r0, r3
 80069ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069ec:	b10b      	cbz	r3, 80069f2 <__sflush_r+0x42>
 80069ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069f0:	1ac0      	subs	r0, r0, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	4602      	mov	r2, r0
 80069f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f8:	6a21      	ldr	r1, [r4, #32]
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b0      	blx	r6
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	d106      	bne.n	8006a12 <__sflush_r+0x62>
 8006a04:	6829      	ldr	r1, [r5, #0]
 8006a06:	291d      	cmp	r1, #29
 8006a08:	d82c      	bhi.n	8006a64 <__sflush_r+0xb4>
 8006a0a:	4a29      	ldr	r2, [pc, #164]	; (8006ab0 <__sflush_r+0x100>)
 8006a0c:	40ca      	lsrs	r2, r1
 8006a0e:	07d6      	lsls	r6, r2, #31
 8006a10:	d528      	bpl.n	8006a64 <__sflush_r+0xb4>
 8006a12:	2200      	movs	r2, #0
 8006a14:	6062      	str	r2, [r4, #4]
 8006a16:	04d9      	lsls	r1, r3, #19
 8006a18:	6922      	ldr	r2, [r4, #16]
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	d504      	bpl.n	8006a28 <__sflush_r+0x78>
 8006a1e:	1c42      	adds	r2, r0, #1
 8006a20:	d101      	bne.n	8006a26 <__sflush_r+0x76>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	b903      	cbnz	r3, 8006a28 <__sflush_r+0x78>
 8006a26:	6560      	str	r0, [r4, #84]	; 0x54
 8006a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2a:	602f      	str	r7, [r5, #0]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d0cb      	beq.n	80069c8 <__sflush_r+0x18>
 8006a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d002      	beq.n	8006a3e <__sflush_r+0x8e>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7ff f9bb 	bl	8005db4 <_free_r>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	6360      	str	r0, [r4, #52]	; 0x34
 8006a42:	e7c2      	b.n	80069ca <__sflush_r+0x1a>
 8006a44:	6a21      	ldr	r1, [r4, #32]
 8006a46:	2301      	movs	r3, #1
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b0      	blx	r6
 8006a4c:	1c41      	adds	r1, r0, #1
 8006a4e:	d1c7      	bne.n	80069e0 <__sflush_r+0x30>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0c4      	beq.n	80069e0 <__sflush_r+0x30>
 8006a56:	2b1d      	cmp	r3, #29
 8006a58:	d001      	beq.n	8006a5e <__sflush_r+0xae>
 8006a5a:	2b16      	cmp	r3, #22
 8006a5c:	d101      	bne.n	8006a62 <__sflush_r+0xb2>
 8006a5e:	602f      	str	r7, [r5, #0]
 8006a60:	e7b2      	b.n	80069c8 <__sflush_r+0x18>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a68:	81a3      	strh	r3, [r4, #12]
 8006a6a:	e7ae      	b.n	80069ca <__sflush_r+0x1a>
 8006a6c:	690f      	ldr	r7, [r1, #16]
 8006a6e:	2f00      	cmp	r7, #0
 8006a70:	d0aa      	beq.n	80069c8 <__sflush_r+0x18>
 8006a72:	0793      	lsls	r3, r2, #30
 8006a74:	680e      	ldr	r6, [r1, #0]
 8006a76:	bf08      	it	eq
 8006a78:	694b      	ldreq	r3, [r1, #20]
 8006a7a:	600f      	str	r7, [r1, #0]
 8006a7c:	bf18      	it	ne
 8006a7e:	2300      	movne	r3, #0
 8006a80:	1bf6      	subs	r6, r6, r7
 8006a82:	608b      	str	r3, [r1, #8]
 8006a84:	2e00      	cmp	r6, #0
 8006a86:	dd9f      	ble.n	80069c8 <__sflush_r+0x18>
 8006a88:	6a21      	ldr	r1, [r4, #32]
 8006a8a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a8e:	4633      	mov	r3, r6
 8006a90:	463a      	mov	r2, r7
 8006a92:	4628      	mov	r0, r5
 8006a94:	47e0      	blx	ip
 8006a96:	2800      	cmp	r0, #0
 8006a98:	dc06      	bgt.n	8006aa8 <__sflush_r+0xf8>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa6:	e790      	b.n	80069ca <__sflush_r+0x1a>
 8006aa8:	4407      	add	r7, r0
 8006aaa:	1a36      	subs	r6, r6, r0
 8006aac:	e7ea      	b.n	8006a84 <__sflush_r+0xd4>
 8006aae:	bf00      	nop
 8006ab0:	20400001 	.word	0x20400001

08006ab4 <_fflush_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	690b      	ldr	r3, [r1, #16]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	b913      	cbnz	r3, 8006ac4 <_fflush_r+0x10>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	b118      	cbz	r0, 8006ace <_fflush_r+0x1a>
 8006ac6:	6983      	ldr	r3, [r0, #24]
 8006ac8:	b90b      	cbnz	r3, 8006ace <_fflush_r+0x1a>
 8006aca:	f000 f887 	bl	8006bdc <__sinit>
 8006ace:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <_fflush_r+0x6c>)
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	d11b      	bne.n	8006b0c <_fflush_r+0x58>
 8006ad4:	686c      	ldr	r4, [r5, #4]
 8006ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0ef      	beq.n	8006abe <_fflush_r+0xa>
 8006ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ae0:	07d0      	lsls	r0, r2, #31
 8006ae2:	d404      	bmi.n	8006aee <_fflush_r+0x3a>
 8006ae4:	0599      	lsls	r1, r3, #22
 8006ae6:	d402      	bmi.n	8006aee <_fflush_r+0x3a>
 8006ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aea:	f000 f915 	bl	8006d18 <__retarget_lock_acquire_recursive>
 8006aee:	4628      	mov	r0, r5
 8006af0:	4621      	mov	r1, r4
 8006af2:	f7ff ff5d 	bl	80069b0 <__sflush_r>
 8006af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af8:	07da      	lsls	r2, r3, #31
 8006afa:	4605      	mov	r5, r0
 8006afc:	d4e0      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	059b      	lsls	r3, r3, #22
 8006b02:	d4dd      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b06:	f000 f908 	bl	8006d1a <__retarget_lock_release_recursive>
 8006b0a:	e7d9      	b.n	8006ac0 <_fflush_r+0xc>
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <_fflush_r+0x70>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	d101      	bne.n	8006b16 <_fflush_r+0x62>
 8006b12:	68ac      	ldr	r4, [r5, #8]
 8006b14:	e7df      	b.n	8006ad6 <_fflush_r+0x22>
 8006b16:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <_fflush_r+0x74>)
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	bf08      	it	eq
 8006b1c:	68ec      	ldreq	r4, [r5, #12]
 8006b1e:	e7da      	b.n	8006ad6 <_fflush_r+0x22>
 8006b20:	080074a8 	.word	0x080074a8
 8006b24:	080074c8 	.word	0x080074c8
 8006b28:	08007488 	.word	0x08007488

08006b2c <std>:
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	e9c0 3300 	strd	r3, r3, [r0]
 8006b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3a:	6083      	str	r3, [r0, #8]
 8006b3c:	8181      	strh	r1, [r0, #12]
 8006b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b40:	81c2      	strh	r2, [r0, #14]
 8006b42:	6183      	str	r3, [r0, #24]
 8006b44:	4619      	mov	r1, r3
 8006b46:	2208      	movs	r2, #8
 8006b48:	305c      	adds	r0, #92	; 0x5c
 8006b4a:	f7fe ffc9 	bl	8005ae0 <memset>
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <std+0x38>)
 8006b50:	6263      	str	r3, [r4, #36]	; 0x24
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <std+0x3c>)
 8006b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <std+0x40>)
 8006b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <std+0x44>)
 8006b5c:	6224      	str	r4, [r4, #32]
 8006b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b60:	bd10      	pop	{r4, pc}
 8006b62:	bf00      	nop
 8006b64:	08006f1d 	.word	0x08006f1d
 8006b68:	08006f3f 	.word	0x08006f3f
 8006b6c:	08006f77 	.word	0x08006f77
 8006b70:	08006f9b 	.word	0x08006f9b

08006b74 <_cleanup_r>:
 8006b74:	4901      	ldr	r1, [pc, #4]	; (8006b7c <_cleanup_r+0x8>)
 8006b76:	f000 b8af 	b.w	8006cd8 <_fwalk_reent>
 8006b7a:	bf00      	nop
 8006b7c:	08006ab5 	.word	0x08006ab5

08006b80 <__sfmoreglue>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	2268      	movs	r2, #104	; 0x68
 8006b84:	1e4d      	subs	r5, r1, #1
 8006b86:	4355      	muls	r5, r2
 8006b88:	460e      	mov	r6, r1
 8006b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b8e:	f7ff f97b 	bl	8005e88 <_malloc_r>
 8006b92:	4604      	mov	r4, r0
 8006b94:	b140      	cbz	r0, 8006ba8 <__sfmoreglue+0x28>
 8006b96:	2100      	movs	r1, #0
 8006b98:	e9c0 1600 	strd	r1, r6, [r0]
 8006b9c:	300c      	adds	r0, #12
 8006b9e:	60a0      	str	r0, [r4, #8]
 8006ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ba4:	f7fe ff9c 	bl	8005ae0 <memset>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	bd70      	pop	{r4, r5, r6, pc}

08006bac <__sfp_lock_acquire>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__sfp_lock_acquire+0x8>)
 8006bae:	f000 b8b3 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20001e55 	.word	0x20001e55

08006bb8 <__sfp_lock_release>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__sfp_lock_release+0x8>)
 8006bba:	f000 b8ae 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20001e55 	.word	0x20001e55

08006bc4 <__sinit_lock_acquire>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__sinit_lock_acquire+0x8>)
 8006bc6:	f000 b8a7 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	20001e56 	.word	0x20001e56

08006bd0 <__sinit_lock_release>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sinit_lock_release+0x8>)
 8006bd2:	f000 b8a2 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	20001e56 	.word	0x20001e56

08006bdc <__sinit>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	f7ff fff0 	bl	8006bc4 <__sinit_lock_acquire>
 8006be4:	69a3      	ldr	r3, [r4, #24]
 8006be6:	b11b      	cbz	r3, 8006bf0 <__sinit+0x14>
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f7ff bff0 	b.w	8006bd0 <__sinit_lock_release>
 8006bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8006bf6:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <__sinit+0x68>)
 8006bf8:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <__sinit+0x6c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	bf04      	itt	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	61a3      	streq	r3, [r4, #24]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f820 	bl	8006c4c <__sfp>
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 f81c 	bl	8006c4c <__sfp>
 8006c14:	60a0      	str	r0, [r4, #8]
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f818 	bl	8006c4c <__sfp>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	60e0      	str	r0, [r4, #12]
 8006c20:	2104      	movs	r1, #4
 8006c22:	6860      	ldr	r0, [r4, #4]
 8006c24:	f7ff ff82 	bl	8006b2c <std>
 8006c28:	68a0      	ldr	r0, [r4, #8]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	2109      	movs	r1, #9
 8006c2e:	f7ff ff7d 	bl	8006b2c <std>
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	2202      	movs	r2, #2
 8006c36:	2112      	movs	r1, #18
 8006c38:	f7ff ff78 	bl	8006b2c <std>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61a3      	str	r3, [r4, #24]
 8006c40:	e7d2      	b.n	8006be8 <__sinit+0xc>
 8006c42:	bf00      	nop
 8006c44:	080072a0 	.word	0x080072a0
 8006c48:	08006b75 	.word	0x08006b75

08006c4c <__sfp>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	4607      	mov	r7, r0
 8006c50:	f7ff ffac 	bl	8006bac <__sfp_lock_acquire>
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <__sfp+0x84>)
 8006c56:	681e      	ldr	r6, [r3, #0]
 8006c58:	69b3      	ldr	r3, [r6, #24]
 8006c5a:	b913      	cbnz	r3, 8006c62 <__sfp+0x16>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff ffbd 	bl	8006bdc <__sinit>
 8006c62:	3648      	adds	r6, #72	; 0x48
 8006c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	d503      	bpl.n	8006c74 <__sfp+0x28>
 8006c6c:	6833      	ldr	r3, [r6, #0]
 8006c6e:	b30b      	cbz	r3, 8006cb4 <__sfp+0x68>
 8006c70:	6836      	ldr	r6, [r6, #0]
 8006c72:	e7f7      	b.n	8006c64 <__sfp+0x18>
 8006c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c78:	b9d5      	cbnz	r5, 8006cb0 <__sfp+0x64>
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <__sfp+0x88>)
 8006c7c:	60e3      	str	r3, [r4, #12]
 8006c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c82:	6665      	str	r5, [r4, #100]	; 0x64
 8006c84:	f000 f847 	bl	8006d16 <__retarget_lock_init_recursive>
 8006c88:	f7ff ff96 	bl	8006bb8 <__sfp_lock_release>
 8006c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c94:	6025      	str	r5, [r4, #0]
 8006c96:	61a5      	str	r5, [r4, #24]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ca0:	f7fe ff1e 	bl	8005ae0 <memset>
 8006ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cac:	4620      	mov	r0, r4
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb0:	3468      	adds	r4, #104	; 0x68
 8006cb2:	e7d9      	b.n	8006c68 <__sfp+0x1c>
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ff62 	bl	8006b80 <__sfmoreglue>
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	6030      	str	r0, [r6, #0]
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1d5      	bne.n	8006c70 <__sfp+0x24>
 8006cc4:	f7ff ff78 	bl	8006bb8 <__sfp_lock_release>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	e7ee      	b.n	8006cac <__sfp+0x60>
 8006cce:	bf00      	nop
 8006cd0:	080072a0 	.word	0x080072a0
 8006cd4:	ffff0001 	.word	0xffff0001

08006cd8 <_fwalk_reent>:
 8006cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4606      	mov	r6, r0
 8006cde:	4688      	mov	r8, r1
 8006ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ce4:	2700      	movs	r7, #0
 8006ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cea:	f1b9 0901 	subs.w	r9, r9, #1
 8006cee:	d505      	bpl.n	8006cfc <_fwalk_reent+0x24>
 8006cf0:	6824      	ldr	r4, [r4, #0]
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d1f7      	bne.n	8006ce6 <_fwalk_reent+0xe>
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfc:	89ab      	ldrh	r3, [r5, #12]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d907      	bls.n	8006d12 <_fwalk_reent+0x3a>
 8006d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d06:	3301      	adds	r3, #1
 8006d08:	d003      	beq.n	8006d12 <_fwalk_reent+0x3a>
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	47c0      	blx	r8
 8006d10:	4307      	orrs	r7, r0
 8006d12:	3568      	adds	r5, #104	; 0x68
 8006d14:	e7e9      	b.n	8006cea <_fwalk_reent+0x12>

08006d16 <__retarget_lock_init_recursive>:
 8006d16:	4770      	bx	lr

08006d18 <__retarget_lock_acquire_recursive>:
 8006d18:	4770      	bx	lr

08006d1a <__retarget_lock_release_recursive>:
 8006d1a:	4770      	bx	lr

08006d1c <__swhatbuf_r>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	460e      	mov	r6, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	b096      	sub	sp, #88	; 0x58
 8006d28:	4614      	mov	r4, r2
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	da08      	bge.n	8006d40 <__swhatbuf_r+0x24>
 8006d2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	602a      	str	r2, [r5, #0]
 8006d36:	061a      	lsls	r2, r3, #24
 8006d38:	d410      	bmi.n	8006d5c <__swhatbuf_r+0x40>
 8006d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d3e:	e00e      	b.n	8006d5e <__swhatbuf_r+0x42>
 8006d40:	466a      	mov	r2, sp
 8006d42:	f000 f951 	bl	8006fe8 <_fstat_r>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	dbf1      	blt.n	8006d2e <__swhatbuf_r+0x12>
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d54:	425a      	negs	r2, r3
 8006d56:	415a      	adcs	r2, r3
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	e7ee      	b.n	8006d3a <__swhatbuf_r+0x1e>
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	2000      	movs	r0, #0
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	b016      	add	sp, #88	; 0x58
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b002      	add	sp, #8
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffc8 	bl	8006d1c <__swhatbuf_r>
 8006d8c:	9900      	ldr	r1, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff f879 	bl	8005e88 <_malloc_r>
 8006d96:	b948      	cbnz	r0, 8006dac <__smakebuf_r+0x44>
 8006d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d4ef      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e7e3      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <__smakebuf_r+0x7c>)
 8006dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	6020      	str	r0, [r4, #0]
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	6163      	str	r3, [r4, #20]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	6120      	str	r0, [r4, #16]
 8006dc2:	b15b      	cbz	r3, 8006ddc <__smakebuf_r+0x74>
 8006dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f91f 	bl	800700c <_isatty_r>
 8006dce:	b128      	cbz	r0, 8006ddc <__smakebuf_r+0x74>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	89a0      	ldrh	r0, [r4, #12]
 8006dde:	4305      	orrs	r5, r0
 8006de0:	81a5      	strh	r5, [r4, #12]
 8006de2:	e7cd      	b.n	8006d80 <__smakebuf_r+0x18>
 8006de4:	08006b75 	.word	0x08006b75

08006de8 <memmove>:
 8006de8:	4288      	cmp	r0, r1
 8006dea:	b510      	push	{r4, lr}
 8006dec:	eb01 0402 	add.w	r4, r1, r2
 8006df0:	d902      	bls.n	8006df8 <memmove+0x10>
 8006df2:	4284      	cmp	r4, r0
 8006df4:	4623      	mov	r3, r4
 8006df6:	d807      	bhi.n	8006e08 <memmove+0x20>
 8006df8:	1e43      	subs	r3, r0, #1
 8006dfa:	42a1      	cmp	r1, r4
 8006dfc:	d008      	beq.n	8006e10 <memmove+0x28>
 8006dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e06:	e7f8      	b.n	8006dfa <memmove+0x12>
 8006e08:	4402      	add	r2, r0
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	428a      	cmp	r2, r1
 8006e0e:	d100      	bne.n	8006e12 <memmove+0x2a>
 8006e10:	bd10      	pop	{r4, pc}
 8006e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e1a:	e7f7      	b.n	8006e0c <memmove+0x24>

08006e1c <__malloc_lock>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	; (8006e24 <__malloc_lock+0x8>)
 8006e1e:	f7ff bf7b 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006e22:	bf00      	nop
 8006e24:	20001e54 	.word	0x20001e54

08006e28 <__malloc_unlock>:
 8006e28:	4801      	ldr	r0, [pc, #4]	; (8006e30 <__malloc_unlock+0x8>)
 8006e2a:	f7ff bf76 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20001e54 	.word	0x20001e54

08006e34 <_realloc_r>:
 8006e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e38:	4680      	mov	r8, r0
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	460e      	mov	r6, r1
 8006e3e:	b921      	cbnz	r1, 8006e4a <_realloc_r+0x16>
 8006e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e44:	4611      	mov	r1, r2
 8006e46:	f7ff b81f 	b.w	8005e88 <_malloc_r>
 8006e4a:	b92a      	cbnz	r2, 8006e58 <_realloc_r+0x24>
 8006e4c:	f7fe ffb2 	bl	8005db4 <_free_r>
 8006e50:	4625      	mov	r5, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e58:	f000 f8fa 	bl	8007050 <_malloc_usable_size_r>
 8006e5c:	4284      	cmp	r4, r0
 8006e5e:	4607      	mov	r7, r0
 8006e60:	d802      	bhi.n	8006e68 <_realloc_r+0x34>
 8006e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e66:	d812      	bhi.n	8006e8e <_realloc_r+0x5a>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	f7ff f80c 	bl	8005e88 <_malloc_r>
 8006e70:	4605      	mov	r5, r0
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d0ed      	beq.n	8006e52 <_realloc_r+0x1e>
 8006e76:	42bc      	cmp	r4, r7
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	bf28      	it	cs
 8006e7e:	463a      	movcs	r2, r7
 8006e80:	f7fe fe20 	bl	8005ac4 <memcpy>
 8006e84:	4631      	mov	r1, r6
 8006e86:	4640      	mov	r0, r8
 8006e88:	f7fe ff94 	bl	8005db4 <_free_r>
 8006e8c:	e7e1      	b.n	8006e52 <_realloc_r+0x1e>
 8006e8e:	4635      	mov	r5, r6
 8006e90:	e7df      	b.n	8006e52 <_realloc_r+0x1e>

08006e92 <_raise_r>:
 8006e92:	291f      	cmp	r1, #31
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4604      	mov	r4, r0
 8006e98:	460d      	mov	r5, r1
 8006e9a:	d904      	bls.n	8006ea6 <_raise_r+0x14>
 8006e9c:	2316      	movs	r3, #22
 8006e9e:	6003      	str	r3, [r0, #0]
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea4:	bd38      	pop	{r3, r4, r5, pc}
 8006ea6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ea8:	b112      	cbz	r2, 8006eb0 <_raise_r+0x1e>
 8006eaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eae:	b94b      	cbnz	r3, 8006ec4 <_raise_r+0x32>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 f831 	bl	8006f18 <_getpid_r>
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4601      	mov	r1, r0
 8006eba:	4620      	mov	r0, r4
 8006ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec0:	f000 b818 	b.w	8006ef4 <_kill_r>
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d00a      	beq.n	8006ede <_raise_r+0x4c>
 8006ec8:	1c59      	adds	r1, r3, #1
 8006eca:	d103      	bne.n	8006ed4 <_raise_r+0x42>
 8006ecc:	2316      	movs	r3, #22
 8006ece:	6003      	str	r3, [r0, #0]
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	e7e7      	b.n	8006ea4 <_raise_r+0x12>
 8006ed4:	2400      	movs	r4, #0
 8006ed6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006eda:	4628      	mov	r0, r5
 8006edc:	4798      	blx	r3
 8006ede:	2000      	movs	r0, #0
 8006ee0:	e7e0      	b.n	8006ea4 <_raise_r+0x12>
	...

08006ee4 <raise>:
 8006ee4:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <raise+0xc>)
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f7ff bfd2 	b.w	8006e92 <_raise_r>
 8006eee:	bf00      	nop
 8006ef0:	20000014 	.word	0x20000014

08006ef4 <_kill_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d07      	ldr	r5, [pc, #28]	; (8006f14 <_kill_r+0x20>)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	f7fb fa18 	bl	8002336 <_kill>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d102      	bne.n	8006f10 <_kill_r+0x1c>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	b103      	cbz	r3, 8006f10 <_kill_r+0x1c>
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	bf00      	nop
 8006f14:	20001e58 	.word	0x20001e58

08006f18 <_getpid_r>:
 8006f18:	f7fb ba06 	b.w	8002328 <_getpid>

08006f1c <__sread>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	460c      	mov	r4, r1
 8006f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f24:	f000 f89c 	bl	8007060 <_read_r>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	bfab      	itete	ge
 8006f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f30:	181b      	addge	r3, r3, r0
 8006f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f36:	bfac      	ite	ge
 8006f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f3a:	81a3      	strhlt	r3, [r4, #12]
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <__swrite>:
 8006f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	461f      	mov	r7, r3
 8006f44:	898b      	ldrh	r3, [r1, #12]
 8006f46:	05db      	lsls	r3, r3, #23
 8006f48:	4605      	mov	r5, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	d505      	bpl.n	8006f5c <__swrite+0x1e>
 8006f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f54:	2302      	movs	r3, #2
 8006f56:	2200      	movs	r2, #0
 8006f58:	f000 f868 	bl	800702c <_lseek_r>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	4632      	mov	r2, r6
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	f000 b817 	b.w	8006fa4 <_write_r>

08006f76 <__sseek>:
 8006f76:	b510      	push	{r4, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7e:	f000 f855 	bl	800702c <_lseek_r>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	bf15      	itete	ne
 8006f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f92:	81a3      	strheq	r3, [r4, #12]
 8006f94:	bf18      	it	ne
 8006f96:	81a3      	strhne	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__sclose>:
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 b813 	b.w	8006fc8 <_close_r>
	...

08006fa4 <_write_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d07      	ldr	r5, [pc, #28]	; (8006fc4 <_write_r+0x20>)
 8006fa8:	4604      	mov	r4, r0
 8006faa:	4608      	mov	r0, r1
 8006fac:	4611      	mov	r1, r2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	602a      	str	r2, [r5, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f7fb f9f6 	bl	80023a4 <_write>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_write_r+0x1e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_write_r+0x1e>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20001e58 	.word	0x20001e58

08006fc8 <_close_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d06      	ldr	r5, [pc, #24]	; (8006fe4 <_close_r+0x1c>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7fb fa02 	bl	80023dc <_close>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_close_r+0x1a>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_close_r+0x1a>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20001e58 	.word	0x20001e58

08006fe8 <_fstat_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	; (8007008 <_fstat_r+0x20>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	f7fb f9fc 	bl	80023f2 <_fstat>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d102      	bne.n	8007004 <_fstat_r+0x1c>
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	b103      	cbz	r3, 8007004 <_fstat_r+0x1c>
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	20001e58 	.word	0x20001e58

0800700c <_isatty_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d06      	ldr	r5, [pc, #24]	; (8007028 <_isatty_r+0x1c>)
 8007010:	2300      	movs	r3, #0
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	f7fb f9fa 	bl	8002410 <_isatty>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_isatty_r+0x1a>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_isatty_r+0x1a>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20001e58 	.word	0x20001e58

0800702c <_lseek_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_lseek_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fb f9f2 	bl	8002424 <_lseek>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_lseek_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_lseek_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20001e58 	.word	0x20001e58

08007050 <_malloc_usable_size_r>:
 8007050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007054:	1f18      	subs	r0, r3, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	bfbc      	itt	lt
 800705a:	580b      	ldrlt	r3, [r1, r0]
 800705c:	18c0      	addlt	r0, r0, r3
 800705e:	4770      	bx	lr

08007060 <_read_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d07      	ldr	r5, [pc, #28]	; (8007080 <_read_r+0x20>)
 8007064:	4604      	mov	r4, r0
 8007066:	4608      	mov	r0, r1
 8007068:	4611      	mov	r1, r2
 800706a:	2200      	movs	r2, #0
 800706c:	602a      	str	r2, [r5, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	f7fb f97b 	bl	800236a <_read>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_read_r+0x1e>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_read_r+0x1e>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20001e58 	.word	0x20001e58

08007084 <_init>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr

08007090 <_fini>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr

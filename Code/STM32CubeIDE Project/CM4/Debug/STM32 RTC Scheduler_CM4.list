
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd0  08006bd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd8  08006bd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08006c50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006c50  00020294  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001514d  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8d  00000000  00000000  000351e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00038078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df28  00000000  00000000  0003a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001411b  00000000  00000000  00058648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8809  00000000  00000000  0006c763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005628  00000000  00000000  00124fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006a1c 	.word	0x08006a1c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006a1c 	.word	0x08006a1c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fd86 	bl	8001050 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000015c 	.word	0x2000015c

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fd7c 	bl	800106c <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f000 fe2d 	bl	8001200 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS], unsigned int numEvents) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <calendar_setEvents+0x24>)
 80005c0:	f005 fda4 	bl	800610c <memcpy>
	_numberEvents = numEvents;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <calendar_setEvents+0x28>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	20000154 	.word	0x20000154

080005dc <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	DateTime nextAlarm;

	// get calendar alarm for next alarm in event list relative to now
	nextAlarm = getNextAlarm();
 80005e2:	463b      	mov	r3, r7
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f8a5 	bl	8000734 <getNextAlarm>

	// set alarm for start of first event in list
	setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005ea:	78b8      	ldrb	r0, [r7, #2]
 80005ec:	78f9      	ldrb	r1, [r7, #3]
 80005ee:	793a      	ldrb	r2, [r7, #4]
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	f000 fe99 	bl	8001328 <setAlarm_A>

	// make sure that alarm fired is cleared/reset
	_alarmFired = false;
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <calendar_start+0x28>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000158 	.word	0x20000158

08000608 <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
	DateTime nextAlarm;

	if (_alarmFired) {
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <calendar_handleAlarm+0x64>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d024      	beq.n	8000662 <calendar_handleAlarm+0x5a>
		// get calendar alarm for next alarm in event list relative to now
		nextAlarm = getNextAlarm();
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f889 	bl	8000734 <getNextAlarm>

		// set alarm for start of first event in list
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000622:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8000626:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800062a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800062e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000632:	f000 fe79 	bl	8001328 <setAlarm_A>

		// reset alarm fired flag
		_alarmFired = false;
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <calendar_handleAlarm+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

		// send message for debugging
		char messageBody[UART_MESSAGE_BODY_SIZE] = "\nALARM EVENT!\n\n\0";
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <calendar_handleAlarm+0x68>)
 800063e:	1d3c      	adds	r4, r7, #4
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	7023      	strb	r3, [r4, #0]
 800064a:	f107 0315 	add.w	r3, r7, #21
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	f8c3 2007 	str.w	r2, [r3, #7]
		uartBasic_TX_Poll("\0\0\0\0", messageBody);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <calendar_handleAlarm+0x6c>)
 800065e:	f001 f853 	bl	8001708 <uartBasic_TX_Poll>
	}

	else {

	}
}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	; 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bdb0      	pop	{r4, r5, r7, pc}
 800066a:	bf00      	nop
 800066c:	20000158 	.word	0x20000158
 8000670:	08006a3c 	.word	0x08006a3c
 8000674:	08006a34 	.word	0x08006a34

08000678 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmFired = true;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <calendar_AlarmA_ISR+0x14>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000158 	.word	0x20000158

08000690 <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	f107 0408 	add.w	r4, r7, #8
 800069a:	e884 0003 	stmia.w	r4, {r0, r1}
 800069e:	4639      	mov	r1, r7
 80006a0:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ac:	f000 f80e 	bl	80006cc <dateTimeToSeconds>
 80006b0:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 80006b2:	463b      	mov	r3, r7
 80006b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006b8:	f000 f808 	bl	80006cc <dateTimeToSeconds>
 80006bc:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	1ad3      	subs	r3, r2, r3
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	371c      	adds	r7, #28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}

080006cc <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	463b      	mov	r3, r7
 80006d4:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80006dc:	793b      	ldrb	r3, [r7, #4]
 80006de:	461a      	mov	r2, r3
 80006e0:	4613      	mov	r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80006ea:	78fb      	ldrb	r3, [r7, #3]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80006f2:	fb01 f303 	mul.w	r3, r1, r3
 80006f6:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80006f8:	78bb      	ldrb	r3, [r7, #2]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	490a      	ldr	r1, [pc, #40]	; (8000728 <dateTimeToSeconds+0x5c>)
 80006fe:	fb01 f303 	mul.w	r3, r1, r3
 8000702:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000704:	787b      	ldrb	r3, [r7, #1]
 8000706:	3b01      	subs	r3, #1
 8000708:	4908      	ldr	r1, [pc, #32]	; (800072c <dateTimeToSeconds+0x60>)
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 8000710:	783b      	ldrb	r3, [r7, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <dateTimeToSeconds+0x64>)
 8000716:	fb01 f303 	mul.w	r3, r1, r3
 800071a:	4413      	add	r3, r2
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	00015180 	.word	0x00015180
 800072c:	00278d00 	.word	0x00278d00
 8000730:	01da9c00 	.word	0x01da9c00

08000734 <getNextAlarm>:


/*
 *
 */
DateTime getNextAlarm(void) {
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000736:	b095      	sub	sp, #84	; 0x54
 8000738:	af06      	add	r7, sp, #24
 800073a:	6078      	str	r0, [r7, #4]
	int eventIdx = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
	bool nextAlarmFound = false;
 8000740:	2300      	movs	r3, #0
 8000742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	DateTime now = {0};
 8000746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 800075a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075e:	1cdc      	adds	r4, r3, #3
 8000760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000764:	1c9a      	adds	r2, r3, #2
 8000766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076a:	1c59      	adds	r1, r3, #1
 800076c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000774:	3305      	adds	r3, #5
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077c:	3304      	adds	r3, #4
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	4623      	mov	r3, r4
 8000782:	f000 fd3d 	bl	8001200 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any events, within an event, between events, or after all the events.
	eventIdx = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
	nextAlarmFound = false;
 800078a:	2300      	movs	r3, #0
 800078c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000790:	e0bf      	b.n	8000912 <getNextAlarm+0x1de>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 8000792:	4989      	ldr	r1, [pc, #548]	; (80009b8 <getNextAlarm+0x284>)
 8000794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	cb0c      	ldmia	r3, {r2, r3}
 80007a2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80007a6:	c903      	ldmia	r1, {r0, r1}
 80007a8:	f7ff ff72 	bl	8000690 <compareDateTime>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	da44      	bge.n	800083c <getNextAlarm+0x108>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 80007b2:	4981      	ldr	r1, [pc, #516]	; (80009b8 <getNextAlarm+0x284>)
 80007b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 80007c6:	497c      	ldr	r1, [pc, #496]	; (80009b8 <getNextAlarm+0x284>)
 80007c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ca:	4613      	mov	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3301      	adds	r3, #1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 80007dc:	4976      	ldr	r1, [pc, #472]	; (80009b8 <getNextAlarm+0x284>)
 80007de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	3302      	adds	r3, #2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 80007f2:	4971      	ldr	r1, [pc, #452]	; (80009b8 <getNextAlarm+0x284>)
 80007f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	3303      	adds	r3, #3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 8000808:	496b      	ldr	r1, [pc, #428]	; (80009b8 <getNextAlarm+0x284>)
 800080a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	440b      	add	r3, r1
 8000816:	3304      	adds	r3, #4
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 800081e:	4966      	ldr	r1, [pc, #408]	; (80009b8 <getNextAlarm+0x284>)
 8000820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	440b      	add	r3, r1
 800082c:	3305      	adds	r3, #5
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			// set found
			nextAlarmFound = true;
 8000834:	2301      	movs	r3, #1
 8000836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800083a:	e06a      	b.n	8000912 <getNextAlarm+0x1de>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 800083c:	495e      	ldr	r1, [pc, #376]	; (80009b8 <getNextAlarm+0x284>)
 800083e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	cb0c      	ldmia	r3, {r2, r3}
 800084c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000850:	c903      	ldmia	r1, {r0, r1}
 8000852:	f7ff ff1d 	bl	8000690 <compareDateTime>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	db57      	blt.n	800090c <getNextAlarm+0x1d8>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 800085c:	4956      	ldr	r1, [pc, #344]	; (80009b8 <getNextAlarm+0x284>)
 800085e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	3308      	adds	r3, #8
 800086c:	3304      	adds	r3, #4
 800086e:	cb0c      	ldmia	r3, {r2, r3}
 8000870:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000874:	c903      	ldmia	r1, {r0, r1}
 8000876:	f7ff ff0b 	bl	8000690 <compareDateTime>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	da45      	bge.n	800090c <getNextAlarm+0x1d8>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 8000880:	494d      	ldr	r1, [pc, #308]	; (80009b8 <getNextAlarm+0x284>)
 8000882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	330c      	adds	r3, #12
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 8000896:	4948      	ldr	r1, [pc, #288]	; (80009b8 <getNextAlarm+0x284>)
 8000898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	440b      	add	r3, r1
 80008a4:	330d      	adds	r3, #13
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 80008ac:	4942      	ldr	r1, [pc, #264]	; (80009b8 <getNextAlarm+0x284>)
 80008ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	330e      	adds	r3, #14
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 80008c2:	493d      	ldr	r1, [pc, #244]	; (80009b8 <getNextAlarm+0x284>)
 80008c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	330f      	adds	r3, #15
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 80008d8:	4937      	ldr	r1, [pc, #220]	; (80009b8 <getNextAlarm+0x284>)
 80008da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	3310      	adds	r3, #16
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 80008ee:	4932      	ldr	r1, [pc, #200]	; (80009b8 <getNextAlarm+0x284>)
 80008f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	440b      	add	r3, r1
 80008fc:	3311      	adds	r3, #17
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			// set found
			nextAlarmFound = true;
 8000904:	2301      	movs	r3, #1
 8000906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800090a:	e002      	b.n	8000912 <getNextAlarm+0x1de>
		}

		// traverse to next event
		else {
			eventIdx++;
 800090c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090e:	3301      	adds	r3, #1
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <getNextAlarm+0x288>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000918:	429a      	cmp	r2, r3
 800091a:	da07      	bge.n	800092c <getNextAlarm+0x1f8>
 800091c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000920:	f083 0301 	eor.w	r3, r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	f47f af33 	bne.w	8000792 <getNextAlarm+0x5e>
		}
	}

	// If there is no next alarm, then return a generic alarm for
	// the beginning of time (1/1/99 0:0:0)
	if (!nextAlarmFound) {
 800092c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d011      	beq.n	800095e <getNextAlarm+0x22a>
		nextAlarmDateTime.year = 99;
 800093a:	2363      	movs	r3, #99	; 0x63
 800093c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		nextAlarmDateTime.month = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		nextAlarmDateTime.day = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		nextAlarmDateTime.hour = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		nextAlarmDateTime.minute = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		nextAlarmDateTime.second = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	}

	// Return the next alarm found.
	char messageBody[UART_MESSAGE_BODY_SIZE];
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", nextAlarmDateTime.year, nextAlarmDateTime.month, nextAlarmDateTime.day, nextAlarmDateTime.hour, nextAlarmDateTime.minute, nextAlarmDateTime.second);
 800095e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000962:	461e      	mov	r6, r3
 8000964:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000968:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800096c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8000970:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8000974:	4604      	mov	r4, r0
 8000976:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800097a:	4605      	mov	r5, r0
 800097c:	f107 0008 	add.w	r0, r7, #8
 8000980:	9504      	str	r5, [sp, #16]
 8000982:	9403      	str	r4, [sp, #12]
 8000984:	9102      	str	r1, [sp, #8]
 8000986:	9201      	str	r2, [sp, #4]
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	4633      	mov	r3, r6
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <getNextAlarm+0x28c>)
 800098e:	211c      	movs	r1, #28
 8000990:	f005 fbd2 	bl	8006138 <sniprintf>
	uartBasic_TX_Poll("NEXT", messageBody);
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	4619      	mov	r1, r3
 800099a:	480a      	ldr	r0, [pc, #40]	; (80009c4 <getNextAlarm+0x290>)
 800099c:	f000 feb4 	bl	8001708 <uartBasic_TX_Poll>
	return nextAlarmDateTime;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	6010      	str	r0, [r2, #0]
 80009ac:	889b      	ldrh	r3, [r3, #4]
 80009ae:	8093      	strh	r3, [r2, #4]
}
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	373c      	adds	r7, #60	; 0x3c
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b8:	2000008c 	.word	0x2000008c
 80009bc:	20000154 	.word	0x20000154
 80009c0:	08006a58 	.word	0x08006a58
 80009c4:	08006a7c 	.word	0x08006a7c

080009c8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80009d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009d8:	f023 0218 	bic.w	r2, r3, #24
 80009dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4013      	ands	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_UART_ErrorCallback+0x28>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d006      	beq.n	8000a44 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <HAL_UART_ErrorCallback+0x2c>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d101      	bne.n	8000a44 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000a40:	f000 feca 	bl	80017d8 <uartBasic_Error_ISR>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40004400 	.word	0x40004400

08000a54 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_UART_TxCpltCallback+0x28>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d006      	beq.n	8000a74 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <HAL_UART_TxCpltCallback+0x2c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d101      	bne.n	8000a74 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000a70:	f000 fea6 	bl	80017c0 <uartBasic_TX_Complete_ISR>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40004400 	.word	0x40004400

08000a84 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_UART_RxCpltCallback+0x28>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d006      	beq.n	8000aa4 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000aa0:	f000 fe82 	bl	80017a8 <uartBasic_RX_Complete_ISR>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8000abc:	f7ff fddc 	bl	8000678 <calendar_AlarmA_ISR>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aca:	b0c7      	sub	sp, #284	; 0x11c
 8000acc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f000 ff0d 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 f959 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f000 faa9 	bl	800102c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ada:	f000 fa51 	bl	8000f80 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ade:	f000 f9b1 	bl	8000e44 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f001 fac8 	bl	8002078 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 8000ae8:	48a1      	ldr	r0, [pc, #644]	; (8000d70 <main+0x2a8>)
 8000aea:	f000 fdeb 	bl	80016c4 <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000aee:	48a1      	ldr	r0, [pc, #644]	; (8000d74 <main+0x2ac>)
 8000af0:	f7ff fd1e 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8000af4:	4aa0      	ldr	r2, [pc, #640]	; (8000d78 <main+0x2b0>)
 8000af6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afe:	6018      	str	r0, [r3, #0]
 8000b00:	3304      	adds	r3, #4
 8000b02:	8019      	strh	r1, [r3, #0]
		  .day = 16,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 8000b04:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b0c:	f7ff fd20 	bl	8000550 <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000b10:	f107 0320 	add.w	r3, r7, #32
 8000b14:	22c8      	movs	r2, #200	; 0xc8
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f005 fb05 	bl	8006128 <memset>

  events[0].start.year = 23;
 8000b1e:	2317      	movs	r3, #23
 8000b20:	f887 3020 	strb.w	r3, [r7, #32]
  events[0].start.month = 8;
 8000b24:	2308      	movs	r3, #8
 8000b26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  events[0].start.day = 16;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  events[0].start.hour = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  events[0].start.minute = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  events[0].start.second = 5;
 8000b3c:	2305      	movs	r3, #5
 8000b3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  events[0].end.year = 23;
 8000b42:	2317      	movs	r3, #23
 8000b44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  events[0].end.month = 8;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  events[0].end.day = 16;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  events[0].end.hour = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  events[0].end.minute = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  events[0].end.second = 20;
 8000b60:	2314      	movs	r3, #20
 8000b62:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  events[1].start.year = 26;
 8000b66:	231a      	movs	r3, #26
 8000b68:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  events[1].start.month = 8;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  events[1].start.day = 16;
 8000b72:	2310      	movs	r3, #16
 8000b74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  events[1].start.hour = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  events[1].start.minute = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  events[1].start.second = 30;
 8000b84:	231e      	movs	r3, #30
 8000b86:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  events[1].end.year = 23;
 8000b8a:	2317      	movs	r3, #23
 8000b8c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  events[1].end.month = 8;
 8000b90:	2308      	movs	r3, #8
 8000b92:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  events[1].end.day = 16;
 8000b96:	2310      	movs	r3, #16
 8000b98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  events[1].end.hour = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  events[1].end.minute = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  events[1].end.second = 40;
 8000ba8:	2328      	movs	r3, #40	; 0x28
 8000baa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

  events[2].start.year = 23;
 8000bae:	2317      	movs	r3, #23
 8000bb0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  events[2].start.month = 8;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  events[2].start.day = 16;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  events[2].start.hour = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  events[2].start.minute = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  events[2].start.second = 50;
 8000bcc:	2332      	movs	r3, #50	; 0x32
 8000bce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  events[2].end.year = 23;
 8000bd2:	2317      	movs	r3, #23
 8000bd4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  events[2].end.month = 8;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  events[2].end.day = 16;
 8000bde:	2310      	movs	r3, #16
 8000be0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  events[2].end.hour = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  events[2].end.minute = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  events[2].end.second = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  events[3].start.year = 23;
 8000bf6:	2317      	movs	r3, #23
 8000bf8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  events[3].start.month = 8;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  events[3].start.day = 16;
 8000c02:	2310      	movs	r3, #16
 8000c04:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  events[3].start.hour = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  events[3].start.minute = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  events[3].start.second = 10;
 8000c14:	230a      	movs	r3, #10
 8000c16:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  events[3].end.year = 23;
 8000c1a:	2317      	movs	r3, #23
 8000c1c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  events[3].end.month = 8;
 8000c20:	2308      	movs	r3, #8
 8000c22:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  events[3].end.day = 16;
 8000c26:	2310      	movs	r3, #16
 8000c28:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  events[3].end.hour = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  events[3].end.minute = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  events[3].end.second = 20;
 8000c38:	2314      	movs	r3, #20
 8000c3a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  events[4].start.year = 23;
 8000c3e:	2317      	movs	r3, #23
 8000c40:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  events[4].start.month = 8;
 8000c44:	2308      	movs	r3, #8
 8000c46:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  events[4].start.day = 16;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
  events[4].start.hour = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  events[4].start.minute = 1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  events[4].start.second = 30;
 8000c5c:	231e      	movs	r3, #30
 8000c5e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  events[4].end.year = 23;
 8000c62:	2317      	movs	r3, #23
 8000c64:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  events[4].end.month = 8;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  events[4].end.day = 16;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  events[4].end.hour = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  events[4].end.minute = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  events[4].end.second = 40;
 8000c80:	2328      	movs	r3, #40	; 0x28
 8000c82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

  calendar_setEvents(events, 5);
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fc8f 	bl	80005b0 <calendar_setEvents>

  // start calendar
//  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  calendar_start();
 8000c92:	f7ff fca3 	bl	80005dc <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8000c96:	f000 fd23 	bl	80016e0 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  int timeSeconds = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  int timeMinutes = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 8000cac:	f7ff fcac 	bl	8000608 <calendar_handleAlarm>

	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 8000cb0:	463a      	mov	r2, r7
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fd4b 	bl	8001754 <uartBasic_get_RX>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

	  // if message present, handle message
	  if (messageStatus == true) {
 8000cc4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00d      	beq.n	8000ce8 <main+0x220>
		  // echo back to computer
		  uartBasic_TX_Poll(messageHeader, messageBody);
 8000ccc:	463a      	mov	r2, r7
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fd17 	bl	8001708 <uartBasic_TX_Poll>
		  messageCount++;
 8000cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  uartBasic_RX_IT();
 8000ce4:	f000 fcfc 	bl	80016e0 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8000ce8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc45 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	221c      	movs	r2, #28
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 fa15 	bl	8006128 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000cfe:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8000d02:	461e      	mov	r6, r3
 8000d04:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8000d08:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8000d0c:	f897 10eb 	ldrb.w	r1, [r7, #235]	; 0xeb
 8000d10:	f897 00ec 	ldrb.w	r0, [r7, #236]	; 0xec
 8000d14:	4604      	mov	r4, r0
 8000d16:	f897 00ed 	ldrb.w	r0, [r7, #237]	; 0xed
 8000d1a:	4605      	mov	r5, r0
 8000d1c:	4638      	mov	r0, r7
 8000d1e:	9504      	str	r5, [sp, #16]
 8000d20:	9403      	str	r4, [sp, #12]
 8000d22:	9102      	str	r1, [sp, #8]
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4633      	mov	r3, r6
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <main+0x2b4>)
 8000d2c:	211c      	movs	r1, #28
 8000d2e:	f005 fa03 	bl	8006138 <sniprintf>
	  uartBasic_TX_Poll("TIME", messageBody);
 8000d32:	463b      	mov	r3, r7
 8000d34:	4619      	mov	r1, r3
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <main+0x2b8>)
 8000d38:	f000 fce6 	bl	8001708 <uartBasic_TX_Poll>
	  timeSeconds++;
 8000d3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d40:	3301      	adds	r3, #1
 8000d42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  timeMinutes++;
 8000d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	  long int i = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000d56:	e004      	b.n	8000d62 <main+0x29a>
		  i++;
 8000d58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000d62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <main+0x2bc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	ddf5      	ble.n	8000d58 <main+0x290>
  {
 8000d6c:	e79e      	b.n	8000cac <main+0x1e4>
 8000d6e:	bf00      	nop
 8000d70:	20000198 	.word	0x20000198
 8000d74:	20000160 	.word	0x20000160
 8000d78:	08006ab0 	.word	0x08006ab0
 8000d7c:	08006a84 	.word	0x08006a84
 8000d80:	08006aa8 	.word	0x08006aa8
 8000d84:	0001fffd 	.word	0x0001fffd

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09a      	sub	sp, #104	; 0x68
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2248      	movs	r2, #72	; 0x48
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f005 f9c6 	bl	8006128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	615a      	str	r2, [r3, #20]
 8000dac:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dae:	f001 f93b 	bl	8002028 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fe08 	bl	80009c8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <SystemClock_Config+0xb8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <SystemClock_Config+0xb8>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <SystemClock_Config+0xb8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000dd4:	232c      	movs	r3, #44	; 0x2c
 8000dd6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dd8:	2381      	movs	r3, #129	; 0x81
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000de4:	2360      	movs	r3, #96	; 0x60
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0320 	add.w	r3, r7, #32
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fbff 	bl	80025fc <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e04:	f000 f91f 	bl	8001046 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000e08:	236f      	movs	r3, #111	; 0x6f
 8000e0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 ff69 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e34:	f000 f907 	bl	8001046 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3768      	adds	r7, #104	; 0x68
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	58000400 	.word	0x58000400

08000e44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b092      	sub	sp, #72	; 0x48
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	222c      	movs	r2, #44	; 0x2c
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 f95f 	bl	8006128 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e6c:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <MX_RTC_Init+0x138>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e78:	227f      	movs	r2, #127	; 0x7f
 8000e7a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e7c:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e88:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e94:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_RTC_Init+0x134>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000ea2:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <MX_RTC_Init+0x134>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ea8:	4833      	ldr	r0, [pc, #204]	; (8000f78 <MX_RTC_Init+0x134>)
 8000eaa:	f002 fc03 	bl	80036b4 <HAL_RTC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000eb4:	f000 f8c7 	bl	8001046 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ed2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4827      	ldr	r0, [pc, #156]	; (8000f78 <MX_RTC_Init+0x134>)
 8000edc:	f002 fc6c 	bl	80037b8 <HAL_RTC_SetTime>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000ee6:	f000 f8ae 	bl	8001046 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481b      	ldr	r0, [pc, #108]	; (8000f78 <MX_RTC_Init+0x134>)
 8000f0c:	f002 fd52 	bl	80039b4 <HAL_RTC_SetDate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000f16:	f000 f896 	bl	8001046 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_RTC_Init+0x134>)
 8000f52:	f002 fe03 	bl	8003b5c <HAL_RTC_SetAlarm_IT>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000f5c:	f000 f873 	bl	8001046 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	202a      	movs	r0, #42	; 0x2a
 8000f66:	f000 fe0e 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f6a:	202a      	movs	r0, #42	; 0x2a
 8000f6c:	f000 fe25 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3748      	adds	r7, #72	; 0x48
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000160 	.word	0x20000160
 8000f7c:	40002800 	.word	0x40002800

08000f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000f86:	4a28      	ldr	r2, [pc, #160]	; (8001028 <MX_USART2_UART_Init+0xa8>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fa2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000fa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fc8:	2230      	movs	r2, #48	; 0x30
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fda:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000fde:	f002 ffef 	bl	8003fc0 <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000fe8:	f000 f82d 	bl	8001046 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8000ff0:	f004 ff99 	bl	8005f26 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000ffa:	f000 f824 	bl	8001046 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8001002:	f004 ffce 	bl	8005fa2 <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800100c:	f000 f81b 	bl	8001046 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USART2_UART_Init+0xa4>)
 8001012:	f004 ff50 	bl	8005eb6 <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 800101c:	f000 f813 	bl	8001046 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000198 	.word	0x20000198
 8001028:	40004400 	.word	0x40004400

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fcde 	bl	80009f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2004      	movs	r0, #4
 8001038:	f7ff fcdb 	bl	80009f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	2002      	movs	r0, #2
 800103e:	f7ff fcd8 	bl	80009f2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}

08001046 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104a:	b672      	cpsid	i
}
 800104c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104e:	e7fe      	b.n	800104e <Error_Handler+0x8>

08001050 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <rtcAlarmControl_init+0x18>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	2000022c 	.word	0x2000022c

0800106c <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	4604      	mov	r4, r0
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4623      	mov	r3, r4
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	4603      	mov	r3, r0
 8001080:	71bb      	strb	r3, [r7, #6]
 8001082:	460b      	mov	r3, r1
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	4613      	mov	r3, r2
 8001088:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a5a      	ldr	r2, [pc, #360]	; (80011f8 <setDateTime+0x18c>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	08db      	lsrs	r3, r3, #3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	b258      	sxtb	r0, r3
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <setDateTime+0x18c>)
 800109e:	fba3 1302 	umull	r1, r3, r3, r2
 80010a2:	08d9      	lsrs	r1, r3, #3
 80010a4:	460b      	mov	r3, r1
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	4303      	orrs	r3, r0
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <setDateTime+0x18c>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	b258      	sxtb	r0, r3
 80010ca:	79ba      	ldrb	r2, [r7, #6]
 80010cc:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <setDateTime+0x18c>)
 80010ce:	fba3 1302 	umull	r1, r3, r3, r2
 80010d2:	08d9      	lsrs	r1, r3, #3
 80010d4:	460b      	mov	r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	4303      	orrs	r3, r0
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	4a42      	ldr	r2, [pc, #264]	; (80011f8 <setDateTime+0x18c>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	b258      	sxtb	r0, r3
 80010fa:	797a      	ldrb	r2, [r7, #5]
 80010fc:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <setDateTime+0x18c>)
 80010fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001102:	08d9      	lsrs	r1, r3, #3
 8001104:	460b      	mov	r3, r1
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	b25b      	sxtb	r3, r3
 8001112:	4303      	orrs	r3, r0
 8001114:	b25b      	sxtb	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 800111e:	793b      	ldrb	r3, [r7, #4]
 8001120:	4a35      	ldr	r2, [pc, #212]	; (80011f8 <setDateTime+0x18c>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	b258      	sxtb	r0, r3
 800112e:	793a      	ldrb	r2, [r7, #4]
 8001130:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <setDateTime+0x18c>)
 8001132:	fba3 1302 	umull	r1, r3, r3, r2
 8001136:	08d9      	lsrs	r1, r3, #3
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	b25b      	sxtb	r3, r3
 8001146:	4303      	orrs	r3, r0
 8001148:	b25b      	sxtb	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 800114e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001152:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <setDateTime+0x18c>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	b258      	sxtb	r0, r3
 8001160:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <setDateTime+0x18c>)
 8001166:	fba3 1302 	umull	r1, r3, r3, r2
 800116a:	08d9      	lsrs	r1, r3, #3
 800116c:	460b      	mov	r3, r1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4303      	orrs	r3, r0
 800117c:	b25b      	sxtb	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001182:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <setDateTime+0x18c>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	b258      	sxtb	r0, r3
 8001194:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <setDateTime+0x18c>)
 800119a:	fba3 1302 	umull	r1, r3, r3, r2
 800119e:	08d9      	lsrs	r1, r3, #3
 80011a0:	460b      	mov	r3, r1
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	4303      	orrs	r3, r0
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <setDateTime+0x190>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f107 011c 	add.w	r1, r7, #28
 80011be:	2201      	movs	r2, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fbf7 	bl	80039b4 <HAL_RTC_SetDate>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80011d0:	e7fe      	b.n	80011d0 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <setDateTime+0x190>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f107 0108 	add.w	r1, r7, #8
 80011da:	2201      	movs	r2, #1
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 faeb 	bl	80037b8 <HAL_RTC_SetTime>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80011ec:	e7fe      	b.n	80011ec <setDateTime+0x180>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	cccccccd 	.word	0xcccccccd
 80011fc:	2000022c 	.word	0x2000022c

08001200 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <getDateTime+0x124>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f107 0114 	add.w	r1, r7, #20
 800122a:	2201      	movs	r2, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fb5f 	bl	80038f0 <HAL_RTC_GetTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 800123c:	e7fe      	b.n	800123c <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <getDateTime+0x124>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f107 0110 	add.w	r1, r7, #16
 8001246:	2201      	movs	r2, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fc39 	bl	8003ac0 <HAL_RTC_GetDate>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001258:	e7fe      	b.n	8001258 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 800125a:	7cfb      	ldrb	r3, [r7, #19]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	7cfb      	ldrb	r3, [r7, #19]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4413      	add	r3, r2
 8001274:	b2da      	uxtb	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 800127a:	7c7b      	ldrb	r3, [r7, #17]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	b2db      	uxtb	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	7c7b      	ldrb	r3, [r7, #17]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4413      	add	r3, r2
 8001294:	b2da      	uxtb	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 800129a:	7cbb      	ldrb	r3, [r7, #18]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	7cbb      	ldrb	r3, [r7, #18]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 80012ba:	7d3b      	ldrb	r3, [r7, #20]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	7d3b      	ldrb	r3, [r7, #20]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 80012da:	7d7b      	ldrb	r3, [r7, #21]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	7d7b      	ldrb	r3, [r7, #21]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f8:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 80012fa:	7dbb      	ldrb	r3, [r7, #22]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	7dbb      	ldrb	r3, [r7, #22]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b2da      	uxtb	r2, r3
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000022c 	.word	0x2000022c

08001328 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b08f      	sub	sp, #60	; 0x3c
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	222c      	movs	r2, #44	; 0x2c
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f004 feea 	bl	8006128 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <setAlarm_A+0x130>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	b258      	sxtb	r0, r3
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <setAlarm_A+0x130>)
 8001368:	fba3 1302 	umull	r1, r3, r3, r2
 800136c:	08d9      	lsrs	r1, r3, #3
 800136e:	460b      	mov	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	b25b      	sxtb	r3, r3
 800137c:	4303      	orrs	r3, r0
 800137e:	b25b      	sxtb	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	4a33      	ldr	r2, [pc, #204]	; (8001458 <setAlarm_A+0x130>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	b258      	sxtb	r0, r3
 8001396:	79ba      	ldrb	r2, [r7, #6]
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <setAlarm_A+0x130>)
 800139a:	fba3 1302 	umull	r1, r3, r3, r2
 800139e:	08d9      	lsrs	r1, r3, #3
 80013a0:	460b      	mov	r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	4303      	orrs	r3, r0
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <setAlarm_A+0x130>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	797a      	ldrb	r2, [r7, #5]
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <setAlarm_A+0x130>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 80013e6:	793b      	ldrb	r3, [r7, #4]
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <setAlarm_A+0x130>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	b258      	sxtb	r0, r3
 80013f6:	793a      	ldrb	r2, [r7, #4]
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <setAlarm_A+0x130>)
 80013fa:	fba3 1302 	umull	r1, r3, r3, r2
 80013fe:	08d9      	lsrs	r1, r3, #3
 8001400:	460b      	mov	r3, r1
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4303      	orrs	r3, r0
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <setAlarm_A+0x134>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f107 010c 	add.w	r1, r7, #12
 800143c:	2201      	movs	r2, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fb8c 	bl	8003b5c <HAL_RTC_SetAlarm_IT>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 800144a:	b672      	cpsid	i
}
 800144c:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 800144e:	e7fe      	b.n	800144e <setAlarm_A+0x126>
  }
}
 8001450:	bf00      	nop
 8001452:	373c      	adds	r7, #60	; 0x3c
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	cccccccd 	.word	0xcccccccd
 800145c:	2000022c 	.word	0x2000022c

08001460 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <LL_AHB2_GRP1_EnableClock>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4313      	orrs	r3, r2
 8001496:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a4:	68fb      	ldr	r3, [r7, #12]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d4:	68fb      	ldr	r3, [r7, #12]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b090      	sub	sp, #64	; 0x40
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2238      	movs	r2, #56	; 0x38
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fe13 	bl	8006128 <memset>
  if(hrtc->Instance==RTC)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_RTC_MspInit+0x54>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d115      	bne.n	8001538 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f001 ffaf 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001528:	f7ff fd8d 	bl	8001046 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800152c:	f7ff ff98 	bl	8001460 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001530:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001534:	f7ff ffbc 	bl	80014b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3740      	adds	r7, #64	; 0x40
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40002800 	.word	0x40002800

08001544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b096      	sub	sp, #88	; 0x58
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2238      	movs	r2, #56	; 0x38
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fddf 	bl	8006128 <memset>
  if(huart->Instance==USART2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_UART_MspInit+0x98>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d12e      	bne.n	80015d2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001574:	2302      	movs	r3, #2
 8001576:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001578:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800157c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	4618      	mov	r0, r3
 8001584:	f001 ff7c 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800158e:	f7ff fd5a 	bl	8001046 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001596:	f7ff ff8b 	bl	80014b0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff ff70 	bl	8001480 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80015a0:	230c      	movs	r3, #12
 80015a2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b0:	2307      	movs	r3, #7
 80015b2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f000 fbd3 	bl	8001d68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2025      	movs	r0, #37	; 0x25
 80015c8:	f000 fadd 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015cc:	2025      	movs	r0, #37	; 0x25
 80015ce:	f000 faf4 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3758      	adds	r7, #88	; 0x58
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40004400 	.word	0x40004400

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001626:	f000 f9bb 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <USART2_IRQHandler+0x10>)
 8001636:	f002 fde5 	bl	8004204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000198 	.word	0x20000198

08001644 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <RTC_Alarm_IRQHandler+0x10>)
 800164a:	f002 fb93 	bl	8003d74 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000160 	.word	0x20000160

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f004 fd16 	bl	80060b8 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20008000 	.word	0x20008000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	20000230 	.word	0x20000230
 80016c0:	20000298 	.word	0x20000298

080016c4 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <uartBasic_init+0x18>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000238 	.word	0x20000238

080016e0 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <uartBasic_RX_IT+0x24>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f083 0301 	eor.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 80016f4:	f000 f874 	bl	80017e0 <_rxMessage_IT>

		// return success
		return true;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 80016fc:	2300      	movs	r3, #0
	}
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000027d 	.word	0x2000027d

08001708 <uartBasic_TX_Poll>:
/*
 * Start transmitting message over UART.
 */
bool uartBasic_TX_Poll(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <uartBasic_TX_Poll+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f083 0301 	eor.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00e      	beq.n	8001740 <uartBasic_TX_Poll+0x38>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <uartBasic_TX_Poll+0x48>)
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f88a 	bl	8001840 <composeMessage>
		_txBuffer_full = true;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <uartBasic_TX_Poll+0x44>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_Poll();
 8001732:	f000 f86d 	bl	8001810 <_txMessage_Poll>

		// clear buffer full
		_txBuffer_full = false;
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <uartBasic_TX_Poll+0x44>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]

		// report successfully queued
		return true;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <uartBasic_TX_Poll+0x3a>
	}

	else
	{
		// return full buffer
		return false;
 8001740:	2300      	movs	r3, #0
	}
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000027c 	.word	0x2000027c
 8001750:	2000023c 	.word	0x2000023c

08001754 <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <uartBasic_get_RX+0x4c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <uartBasic_get_RX+0x50>)
 800176a:	f107 0408 	add.w	r4, r7, #8
 800176e:	461d      	mov	r5, r3
 8001770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001774:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <uartBasic_get_RX+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	461a      	mov	r2, r3
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f86e 	bl	800186c <decomposeMessage>

		// report successfully dequeued
		return true;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 8001794:	2300      	movs	r3, #0
	}
}
 8001796:	4618      	mov	r0, r3
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000027d 	.word	0x2000027d
 80017a4:	2000025c 	.word	0x2000025c

080017a8 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <uartBasic_RX_Complete_ISR+0x14>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000027d 	.word	0x2000027d

080017c0 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <uartBasic_TX_Complete_ISR+0x14>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000027c 	.word	0x2000027c

080017d8 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 80017dc:	e7fe      	b.n	80017dc <uartBasic_Error_ISR+0x4>
	...

080017e0 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_rxMessage_IT+0x24>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2220      	movs	r2, #32
 80017ea:	4907      	ldr	r1, [pc, #28]	; (8001808 <_rxMessage_IT+0x28>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fcbd 	bl	800416c <HAL_UART_Receive_IT>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d102      	bne.n	80017fe <_rxMessage_IT+0x1e>
		_rxError = true;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <_rxMessage_IT+0x2c>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000238 	.word	0x20000238
 8001808:	2000025c 	.word	0x2000025c
 800180c:	20000235 	.word	0x20000235

08001810 <_txMessage_Poll>:

/*
 *
 */
void _txMessage_Poll(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_txMessage_Poll+0x24>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	23fa      	movs	r3, #250	; 0xfa
 800181a:	2220      	movs	r2, #32
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <_txMessage_Poll+0x28>)
 800181e:	f002 fc1f 	bl	8004060 <HAL_UART_Transmit>
 8001822:	4603      	mov	r3, r0
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <_txMessage_Poll+0x1e>
		_txError = true;
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <_txMessage_Poll+0x2c>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000238 	.word	0x20000238
 8001838:	2000023c 	.word	0x2000023c
 800183c:	20000234 	.word	0x20000234

08001840 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	221c      	movs	r2, #28
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fc54 	bl	800610c <memcpy>
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3304      	adds	r3, #4
 8001886:	221c      	movs	r2, #28
 8001888:	4619      	mov	r1, r3
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f004 fc3e 	bl	800610c <memcpy>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800189a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800189c:	f7fe fe42 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018a2:	490d      	ldr	r1, [pc, #52]	; (80018d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <LoopForever+0xe>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018b8:	4c0a      	ldr	r4, [pc, #40]	; (80018e4 <LoopForever+0x16>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018c6:	f004 fbfd 	bl	80060c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ca:	f7ff f8fd 	bl	8000ac8 <main>

080018ce <LoopForever>:

LoopForever:
    b LoopForever
 80018ce:	e7fe      	b.n	80018ce <LoopForever>
  ldr   r0, =_estack
 80018d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018dc:	08006be0 	.word	0x08006be0
  ldr r2, =_sbss
 80018e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018e4:	20000294 	.word	0x20000294

080018e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f6:	2003      	movs	r0, #3
 80018f8:	f000 f93a 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018fc:	f001 fbe2 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8001900:	4603      	mov	r3, r0
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_Init+0x3c>)
 8001904:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f810 	bl	800192c <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	71fb      	strb	r3, [r7, #7]
 8001916:	e001      	b.n	800191c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001918:	f7ff fde2 	bl	80014e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800191c:	79fb      	ldrb	r3, [r7, #7]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_InitTick+0x6c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d024      	beq.n	800198a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001940:	f001 fbc0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_InitTick+0x6c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001950:	fbb3 f3f1 	udiv	r3, r3, r1
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f000 f93c 	bl	8001bd6 <HAL_SYSTICK_Config>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10f      	bne.n	8001984 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b0f      	cmp	r3, #15
 8001968:	d809      	bhi.n	800197e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196a:	2200      	movs	r2, #0
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001972:	f000 f908 	bl	8001b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_InitTick+0x70>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e007      	b.n	800198e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e004      	b.n	800198e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e001      	b.n	800198e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000008 	.word	0x20000008
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x1c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x20>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_IncTick+0x20>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000280 	.word	0x20000280

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b02      	ldr	r3, [pc, #8]	; (80019d4 <HAL_GetTick+0x10>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000280 	.word	0x20000280

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <__NVIC_EnableIRQ+0x34>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b50:	f7ff ff90 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff2d 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff44 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff92 	bl	8001ac8 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff61 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff37 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa4 	bl	8001b2c <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e04f      	b.n	8001ca0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d008      	beq.n	8001c1e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e040      	b.n	8001ca0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 020e 	bic.w	r2, r2, #14
 8001c2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f003 021c 	and.w	r2, r3, #28
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c60:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d005      	beq.n	8001cce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e047      	b.n	8001d5e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 020e 	bic.w	r2, r2, #14
 8001cdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f003 021c 	and.w	r2, r3, #28
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d1a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00c      	beq.n	8001d3e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d3c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
    }
  }
  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e140      	b.n	8001ffa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8132 	beq.w	8001ff4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d005      	beq.n	8001da8 <HAL_GPIO_Init+0x40>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0201 	and.w	r2, r3, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d017      	beq.n	8001e46 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d123      	bne.n	8001e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	6939      	ldr	r1, [r7, #16]
 8001e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0203 	and.w	r2, r3, #3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 808c 	beq.w	8001ff4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001edc:	4a4e      	ldr	r2, [pc, #312]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f06:	d00d      	beq.n	8001f24 <HAL_GPIO_Init+0x1bc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a44      	ldr	r2, [pc, #272]	; (800201c <HAL_GPIO_Init+0x2b4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x1b8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a43      	ldr	r2, [pc, #268]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_GPIO_Init+0x1b4>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e004      	b.n	8001f26 <HAL_GPIO_Init+0x1be>
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x1be>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_GPIO_Init+0x1be>
 8001f24:	2300      	movs	r3, #0
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	f002 0203 	and.w	r2, r2, #3
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	4093      	lsls	r3, r2
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f36:	4938      	ldr	r1, [pc, #224]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f68:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001fbe:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fcc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	f47f aeb7 	bne.w	8001d78 <HAL_GPIO_Init+0x10>
  }
}
 800200a:	bf00      	nop
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40010000 	.word	0x40010000
 800201c:	48000400 	.word	0x48000400
 8002020:	48000800 	.word	0x48000800
 8002024:	58000800 	.word	0x58000800

08002028 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PWR_EnableBkUpAccess+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a03      	ldr	r2, [pc, #12]	; (8002040 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	58000400 	.word	0x58000400

08002044 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <LL_PWR_EnableBootC2+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <LL_PWR_EnableBootC2+0x18>)
 800204e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	58000400 	.word	0x58000400

08002060 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_PWREx_GetVoltageRange+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	58000400 	.word	0x58000400

08002078 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002080:	f7ff ffe0 	bl	8002044 <LL_PWR_EnableBootC2>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <LL_PWR_IsEnabledBkUpAccess>:
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800209c:	d101      	bne.n	80020a2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	58000400 	.word	0x58000400

080020b0 <LL_RCC_HSE_EnableTcxo>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <LL_RCC_HSE_DisableTcxo>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020fa:	d101      	bne.n	8002100 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <LL_RCC_HSE_Enable>:
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <LL_RCC_HSE_Disable>:
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <LL_RCC_HSE_IsReady>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002154:	d101      	bne.n	800215a <LL_RCC_HSE_IsReady+0x18>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_RCC_HSE_IsReady+0x1a>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <LL_RCC_HSI_Enable>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <LL_RCC_HSI_Disable>:
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <LL_RCC_HSI_IsReady>:
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d101      	bne.n	80021b4 <LL_RCC_HSI_IsReady+0x18>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <LL_RCC_HSI_IsReady+0x1a>
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <LL_RCC_HSI_SetCalibTrimming>:
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <LL_RCC_LSE_IsReady>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d101      	bne.n	80021fe <LL_RCC_LSE_IsReady+0x18>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_RCC_LSE_IsReady+0x1a>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <LL_RCC_LSI_Enable>:
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <LL_RCC_LSI_Disable>:
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <LL_RCC_LSI_IsReady>:
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b02      	cmp	r3, #2
 800225a:	d101      	bne.n	8002260 <LL_RCC_LSI_IsReady+0x18>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <LL_RCC_LSI_IsReady+0x1a>
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <LL_RCC_MSI_Enable>:
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <LL_RCC_MSI_Disable>:
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <LL_RCC_MSI_IsReady>:
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d101      	bne.n	80022b8 <LL_RCC_MSI_IsReady+0x16>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_RCC_MSI_IsReady+0x18>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d101      	bne.n	80022d8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <LL_RCC_MSI_GetRange>:
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002304:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <LL_RCC_SetSysClkSource>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <LL_RCC_GetSysClkSource>:
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <LL_RCC_SetAHBPrescaler>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_C2_RCC_SetAHBPrescaler>:
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <LL_RCC_SetAHB3Prescaler>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023d4:	f023 020f 	bic.w	r2, r3, #15
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <LL_RCC_SetAPB1Prescaler>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <LL_RCC_SetAPB2Prescaler>:
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <LL_RCC_GetAHBPrescaler>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <LL_RCC_GetAHB3Prescaler>:
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <LL_RCC_GetAPB1Prescaler>:
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <LL_RCC_GetAPB2Prescaler>:
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024e2:	d101      	bne.n	80024e8 <LL_RCC_PLL_IsReady+0x18>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_RCC_PLL_IsReady+0x1a>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0303 	and.w	r3, r3, #3
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255e:	d101      	bne.n	8002564 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002576:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002582:	d101      	bne.n	8002588 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a6:	d101      	bne.n	80025ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025c8:	d101      	bne.n	80025ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ea:	d101      	bne.n	80025f0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e36f      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	f7ff fea6 	bl	800235e <LL_RCC_GetSysClkSource>
 8002612:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002614:	f7ff ff8f 	bl	8002536 <LL_RCC_PLL_GetMainSource>
 8002618:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80c4 	beq.w	80027b0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x3e>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d176      	bne.n	8002722 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d173      	bne.n	8002722 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e353      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_OscConfig+0x68>
 8002658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002662:	e006      	b.n	8002672 <HAL_RCC_OscConfig+0x76>
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002672:	4293      	cmp	r3, r2
 8002674:	d222      	bcs.n	80026bc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fd5a 	bl	8003134 <RCC_SetFlashLatencyFromMSIRange>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e331      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe2b 	bl	8002310 <LL_RCC_MSI_SetCalibTrimming>
 80026ba:	e021      	b.n	8002700 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fe12 	bl	8002310 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fd1f 	bl	8003134 <RCC_SetFlashLatencyFromMSIRange>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e2f6      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002700:	f000 fce0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8002704:	4603      	mov	r3, r0
 8002706:	4aa7      	ldr	r2, [pc, #668]	; (80029a4 <HAL_RCC_OscConfig+0x3a8>)
 8002708:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800270a:	4ba7      	ldr	r3, [pc, #668]	; (80029a8 <HAL_RCC_OscConfig+0x3ac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f90c 	bl	800192c <HAL_InitTick>
 8002714:	4603      	mov	r3, r0
 8002716:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d047      	beq.n	80027ae <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	e2e5      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02c      	beq.n	8002784 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800272a:	f7ff fd9e 	bl	800226a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800272e:	f7ff f949 	bl	80019c4 <HAL_GetTick>
 8002732:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002736:	f7ff f945 	bl	80019c4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e2d2      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002748:	f7ff fdab 	bl	80022a2 <LL_RCC_MSI_IsReady>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f1      	beq.n	8002736 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fdc7 	bl	8002310 <LL_RCC_MSI_SetCalibTrimming>
 8002782:	e015      	b.n	80027b0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002784:	f7ff fd7f 	bl	8002286 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002788:	f7ff f91c 	bl	80019c4 <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002790:	f7ff f918 	bl	80019c4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e2a5      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027a2:	f7ff fd7e 	bl	80022a2 <LL_RCC_MSI_IsReady>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f1      	bne.n	8002790 <HAL_RCC_OscConfig+0x194>
 80027ac:	e000      	b.n	80027b0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027ae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d058      	beq.n	800286e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x1d2>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d108      	bne.n	80027da <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d105      	bne.n	80027da <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d14b      	bne.n	800286e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e289      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_OscConfig+0x204>
 80027fa:	f7ff fc86 	bl	800210a <LL_RCC_HSE_Enable>
 80027fe:	e00d      	b.n	800281c <HAL_RCC_OscConfig+0x220>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002808:	d104      	bne.n	8002814 <HAL_RCC_OscConfig+0x218>
 800280a:	f7ff fc51 	bl	80020b0 <LL_RCC_HSE_EnableTcxo>
 800280e:	f7ff fc7c 	bl	800210a <LL_RCC_HSE_Enable>
 8002812:	e003      	b.n	800281c <HAL_RCC_OscConfig+0x220>
 8002814:	f7ff fc87 	bl	8002126 <LL_RCC_HSE_Disable>
 8002818:	f7ff fc58 	bl	80020cc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d012      	beq.n	800284a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff f8ce 	bl	80019c4 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff f8ca 	bl	80019c4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e257      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800283e:	f7ff fc80 	bl	8002142 <LL_RCC_HSE_IsReady>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f1      	beq.n	800282c <HAL_RCC_OscConfig+0x230>
 8002848:	e011      	b.n	800286e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7ff f8bb 	bl	80019c4 <HAL_GetTick>
 800284e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002852:	f7ff f8b7 	bl	80019c4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b64      	cmp	r3, #100	; 0x64
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e244      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002864:	f7ff fc6d 	bl	8002142 <LL_RCC_HSE_IsReady>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f1      	bne.n	8002852 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d046      	beq.n	8002908 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x290>
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d10e      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e22a      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fc8e 	bl	80021be <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028a2:	e031      	b.n	8002908 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d019      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ac:	f7ff fc5a 	bl	8002164 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7ff f888 	bl	80019c4 <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff f884 	bl	80019c4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e211      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028ca:	f7ff fc67 	bl	800219c <LL_RCC_HSI_IsReady>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f1      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fc70 	bl	80021be <LL_RCC_HSI_SetCalibTrimming>
 80028de:	e013      	b.n	8002908 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e0:	f7ff fc4e 	bl	8002180 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7ff f86e 	bl	80019c4 <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ec:	f7ff f86a 	bl	80019c4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1f7      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028fe:	f7ff fc4d 	bl	800219c <LL_RCC_HSI_IsReady>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f1      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d06e      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d056      	beq.n	80029ca <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002924:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	429a      	cmp	r2, r3
 8002932:	d031      	beq.n	8002998 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e1d0      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d013      	beq.n	800297e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002956:	f7ff fc67 	bl	8002228 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800295a:	f7ff f833 	bl	80019c4 <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7ff f82f 	bl	80019c4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b11      	cmp	r3, #17
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1bc      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002974:	f7ff fc68 	bl	8002248 <LL_RCC_LSI_IsReady>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f1      	bne.n	8002962 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002986:	f023 0210 	bic.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002998:	f7ff fc36 	bl	8002208 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7ff f812 	bl	80019c4 <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80029a2:	e00c      	b.n	80029be <HAL_RCC_OscConfig+0x3c2>
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ac:	f7ff f80a 	bl	80019c4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b11      	cmp	r3, #17
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e197      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80029be:	f7ff fc43 	bl	8002248 <LL_RCC_LSI_IsReady>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f1      	beq.n	80029ac <HAL_RCC_OscConfig+0x3b0>
 80029c8:	e013      	b.n	80029f2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ca:	f7ff fc2d 	bl	8002228 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fff9 	bl	80019c4 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe fff5 	bl	80019c4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b11      	cmp	r3, #17
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e182      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80029e8:	f7ff fc2e 	bl	8002248 <LL_RCC_LSI_IsReady>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f1      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80d8 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a00:	f7ff fb44 	bl	800208c <LL_PWR_IsEnabledBkUpAccess>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d113      	bne.n	8002a32 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a0a:	f7ff fb0d 	bl	8002028 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe ffd9 	bl	80019c4 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe ffd5 	bl	80019c4 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e162      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a28:	f7ff fb30 	bl	800208c <LL_PWR_IsEnabledBkUpAccess>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f1      	beq.n	8002a16 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d07b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b85      	cmp	r3, #133	; 0x85
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe ffb1 	bl	80019c4 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe ffa3 	bl	80019c4 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e12e      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a90:	f7ff fba9 	bl	80021e6 <LL_RCC_LSE_IsReady>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ef      	beq.n	8002a7a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b81      	cmp	r3, #129	; 0x81
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b85      	cmp	r3, #133	; 0x85
 8002aa8:	d121      	bne.n	8002aee <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe ff8b 	bl	80019c4 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe ff7d 	bl	80019c4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e108      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ec      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002aec:	e060      	b.n	8002bb0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe ff69 	bl	80019c4 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe ff5b 	bl	80019c4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0e6      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ec      	bne.n	8002b0a <HAL_RCC_OscConfig+0x50e>
 8002b30:	e03e      	b.n	8002bb0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fe ff47 	bl	80019c4 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe ff39 	bl	80019c4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0c4      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ec      	bne.n	8002b4e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7fe ff26 	bl	80019c4 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe ff18 	bl	80019c4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0a3      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ba6:	f7ff fb1e 	bl	80021e6 <LL_RCC_LSE_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ef      	bne.n	8002b90 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8099 	beq.w	8002cec <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d06c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d14b      	bne.n	8002c60 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	f7ff fc74 	bl	80024b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fefa 	bl	80019c4 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fef6 	bl	80019c4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b0a      	cmp	r3, #10
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e083      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002be6:	f7ff fc73 	bl	80024d0 <LL_RCC_PLL_IsReady>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f1      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCC_OscConfig+0x6fc>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c08:	0212      	lsls	r2, r2, #8
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c10:	4311      	orrs	r1, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c26:	f7ff fc37 	bl	8002498 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fec3 	bl	80019c4 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe febf 	bl	80019c4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b0a      	cmp	r3, #10
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e04c      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c54:	f7ff fc3c 	bl	80024d0 <LL_RCC_PLL_IsReady>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f1      	beq.n	8002c42 <HAL_RCC_OscConfig+0x646>
 8002c5e:	e045      	b.n	8002cec <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c60:	f7ff fc28 	bl	80024b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe feae 	bl	80019c4 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe feaa 	bl	80019c4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b0a      	cmp	r3, #10
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e037      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c7e:	f7ff fc27 	bl	80024d0 <LL_RCC_PLL_IsReady>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f1      	bne.n	8002c6c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x700>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
 8002c98:	e028      	b.n	8002cec <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e023      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d115      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	11c1808c 	.word	0x11c1808c
 8002cfc:	eefefffc 	.word	0xeefefffc

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e12c      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b98      	ldr	r3, [pc, #608]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d91b      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b95      	ldr	r3, [pc, #596]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4993      	ldr	r1, [pc, #588]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d32:	f7fe fe47 	bl	80019c4 <HAL_GetTick>
 8002d36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d3a:	f7fe fe43 	bl	80019c4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e110      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4c:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d1ef      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fb02 	bl	8002374 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d70:	f7fe fe28 	bl	80019c4 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d78:	f7fe fe24 	bl	80019c4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0f1      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d8a:	f7ff fbdf 	bl	800254c <LL_RCC_IsActiveFlag_HPRE>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f1      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff faf8 	bl	800239a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002daa:	f7fe fe0b 	bl	80019c4 <HAL_GetTick>
 8002dae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002db2:	f7fe fe07 	bl	80019c4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0d4      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002dc4:	f7ff fbd3 	bl	800256e <LL_RCC_IsActiveFlag_C2HPRE>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f1      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff faf0 	bl	80023c4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fdee 	bl	80019c4 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dec:	f7fe fdea 	bl	80019c4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0b7      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dfe:	f7ff fbc8 	bl	8002592 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f1      	beq.n	8002dec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d016      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fae9 	bl	80023f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fdd1 	bl	80019c4 <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e26:	f7fe fdcd 	bl	80019c4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e09a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e38:	f7ff fbbd 	bl	80025b6 <LL_RCC_IsActiveFlag_PPRE1>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f1      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fade 	bl	8002416 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe fdb3 	bl	80019c4 <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e62:	f7fe fdaf 	bl	80019c4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e07c      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e74:	f7ff fbb0 	bl	80025d8 <LL_RCC_IsActiveFlag_PPRE2>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f1      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d043      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e92:	f7ff f956 	bl	8002142 <LL_RCC_HSE_IsReady>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11e      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e066      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ea8:	f7ff fb12 	bl	80024d0 <LL_RCC_PLL_IsReady>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d113      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e05b      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ebe:	f7ff f9f0 	bl	80022a2 <LL_RCC_MSI_IsReady>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e050      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ecc:	f7ff f966 	bl	800219c <LL_RCC_HSI_IsReady>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e049      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fa2a 	bl	8002338 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fd6e 	bl	80019c4 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eec:	f7fe fd6a 	bl	80019c4 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e035      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	f7ff fa2c 	bl	800235e <LL_RCC_GetSysClkSource>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d1ec      	bne.n	8002eec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d21b      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 0207 	bic.w	r2, r3, #7
 8002f28:	4913      	ldr	r1, [pc, #76]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fd48 	bl	80019c4 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f38:	f7fe fd44 	bl	80019c4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e011      	b.n	8002f6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1ef      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f58:	f000 f8b4 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_RCC_ClockConfig+0x27c>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_RCC_ClockConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fce0 	bl	800192c <HAL_InitTick>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	58004000 	.word	0x58004000
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	20000004 	.word	0x20000004

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f92:	f7ff f9e4 	bl	800235e <LL_RCC_GetSysClkSource>
 8002f96:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f98:	f7ff facd 	bl	8002536 <LL_RCC_PLL_GetMainSource>
 8002f9c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x2c>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d139      	bne.n	800301e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d136      	bne.n	800301e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002fb0:	f7ff f987 	bl	80022c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d115      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x62>
 8002fba:	f7ff f982 	bl	80022c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x4e>
 8002fc4:	f7ff f98d 	bl	80022e2 <LL_RCC_MSI_GetRange>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	e005      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x5a>
 8002fd2:	f7ff f991 	bl	80022f8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	4a36      	ldr	r2, [pc, #216]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	e014      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x8c>
 8002fe6:	f7ff f96c 	bl	80022c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x7a>
 8002ff0:	f7ff f977 	bl	80022e2 <LL_RCC_MSI_GetRange>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	e005      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x86>
 8002ffe:	f7ff f97b 	bl	80022f8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003002:	4603      	mov	r3, r0
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003010:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d115      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800301c:	e012      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d102      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e00c      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d109      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003030:	f7ff f85a 	bl	80020e8 <LL_RCC_HSE_IsEnabledDiv2>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_GetSysClockFreq+0x138>)
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	e001      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003042:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003044:	f7ff f98b 	bl	800235e <LL_RCC_GetSysClkSource>
 8003048:	4603      	mov	r3, r0
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d12f      	bne.n	80030ae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800304e:	f7ff fa72 	bl	8002536 <LL_RCC_PLL_GetMainSource>
 8003052:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0xde>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d003      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0xe4>
 8003060:	e00d      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003064:	60fb      	str	r3, [r7, #12]
        break;
 8003066:	e00d      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003068:	f7ff f83e 	bl	80020e8 <LL_RCC_HSE_IsEnabledDiv2>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003074:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800307a:	60fb      	str	r3, [r7, #12]
        break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	60fb      	str	r3, [r7, #12]
        break;
 8003082:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003084:	f7ff fa35 	bl	80024f2 <LL_RCC_PLL_GetN>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	fb03 f402 	mul.w	r4, r3, r2
 8003090:	f7ff fa46 	bl	8002520 <LL_RCC_PLL_GetDivider>
 8003094:	4603      	mov	r3, r0
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	3301      	adds	r3, #1
 800309a:	fbb4 f4f3 	udiv	r4, r4, r3
 800309e:	f7ff fa34 	bl	800250a <LL_RCC_PLL_GetR>
 80030a2:	4603      	mov	r3, r0
 80030a4:	0f5b      	lsrs	r3, r3, #29
 80030a6:	3301      	adds	r3, #1
 80030a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80030ac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80030ae:	697b      	ldr	r3, [r7, #20]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd90      	pop	{r4, r7, pc}
 80030b8:	08006b34 	.word	0x08006b34
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	01e84800 	.word	0x01e84800

080030c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b598      	push	{r3, r4, r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030c8:	f7ff ff5c 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 80030cc:	4604      	mov	r4, r0
 80030ce:	f7ff f9b5 	bl	800243c <LL_RCC_GetAHBPrescaler>
 80030d2:	4603      	mov	r3, r0
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80030dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd98      	pop	{r3, r4, r7, pc}
 80030e8:	08006ad4 	.word	0x08006ad4

080030ec <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b598      	push	{r3, r4, r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030f0:	f7ff ffe8 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4604      	mov	r4, r0
 80030f6:	f7ff f9b9 	bl	800246c <LL_RCC_GetAPB1Prescaler>
 80030fa:	4603      	mov	r3, r0
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	4a03      	ldr	r2, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd98      	pop	{r3, r4, r7, pc}
 800310c:	08006b14 	.word	0x08006b14

08003110 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b598      	push	{r3, r4, r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003114:	f7ff ffd6 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8003118:	4604      	mov	r4, r0
 800311a:	f7ff f9b2 	bl	8002482 <LL_RCC_GetAPB2Prescaler>
 800311e:	4603      	mov	r3, r0
 8003120:	0adb      	lsrs	r3, r3, #11
 8003122:	4a03      	ldr	r2, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	fa24 f303 	lsr.w	r3, r4, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd98      	pop	{r3, r4, r7, pc}
 8003130:	08006b14 	.word	0x08006b14

08003134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	4a10      	ldr	r2, [pc, #64]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800314c:	f7ff f981 	bl	8002452 <LL_RCC_GetAHB3Prescaler>
 8003150:	4603      	mov	r3, r0
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4a09      	ldr	r2, [pc, #36]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9c      	lsrs	r4, r3, #18
 8003170:	f7fe ff76 	bl	8002060 <HAL_PWREx_GetVoltageRange>
 8003174:	4603      	mov	r3, r0
 8003176:	4619      	mov	r1, r3
 8003178:	4620      	mov	r0, r4
 800317a:	f000 f80b 	bl	8003194 <RCC_SetFlashLatency>
 800317e:	4603      	mov	r3, r0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	08006b34 	.word	0x08006b34
 800318c:	08006ad4 	.word	0x08006ad4
 8003190:	431bde83 	.word	0x431bde83

08003194 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800319e:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <RCC_SetFlashLatency+0xf4>)
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a8:	6018      	str	r0, [r3, #0]
 80031aa:	3304      	adds	r3, #4
 80031ac:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80031ae:	4a37      	ldr	r2, [pc, #220]	; (800328c <RCC_SetFlashLatency+0xf8>)
 80031b0:	f107 0318 	add.w	r3, r7, #24
 80031b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031b8:	6018      	str	r0, [r3, #0]
 80031ba:	3304      	adds	r3, #4
 80031bc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <RCC_SetFlashLatency+0xfc>)
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80031c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031ca:	2300      	movs	r3, #0
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d4:	d11b      	bne.n	800320e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
 80031da:	e014      	b.n	8003206 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	3338      	adds	r3, #56	; 0x38
 80031e2:	443b      	add	r3, r7
 80031e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d807      	bhi.n	8003200 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	3338      	adds	r3, #56	; 0x38
 80031f6:	443b      	add	r3, r7
 80031f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031fe:	e021      	b.n	8003244 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	3301      	adds	r3, #1
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2b02      	cmp	r3, #2
 800320a:	d9e7      	bls.n	80031dc <RCC_SetFlashLatency+0x48>
 800320c:	e01a      	b.n	8003244 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003212:	e014      	b.n	800323e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	3338      	adds	r3, #56	; 0x38
 800321a:	443b      	add	r3, r7
 800321c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4293      	cmp	r3, r2
 8003226:	d807      	bhi.n	8003238 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	3338      	adds	r3, #56	; 0x38
 800322e:	443b      	add	r3, r7
 8003230:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003236:	e005      	b.n	8003244 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	3301      	adds	r3, #1
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b02      	cmp	r3, #2
 8003242:	d9e7      	bls.n	8003214 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <RCC_SetFlashLatency+0x100>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 0207 	bic.w	r2, r3, #7
 800324c:	4911      	ldr	r1, [pc, #68]	; (8003294 <RCC_SetFlashLatency+0x100>)
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003254:	f7fe fbb6 	bl	80019c4 <HAL_GetTick>
 8003258:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800325a:	e008      	b.n	800326e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800325c:	f7fe fbb2 	bl	80019c4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e007      	b.n	800327e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <RCC_SetFlashLatency+0x100>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003278:	429a      	cmp	r2, r3
 800327a:	d1ef      	bne.n	800325c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3738      	adds	r7, #56	; 0x38
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	08006ab8 	.word	0x08006ab8
 800328c:	08006ac0 	.word	0x08006ac0
 8003290:	08006ac8 	.word	0x08006ac8
 8003294:	58004000 	.word	0x58004000

08003298 <LL_RCC_LSE_IsReady>:
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800329c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d101      	bne.n	80032b0 <LL_RCC_LSE_IsReady+0x18>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <LL_RCC_LSE_IsReady+0x1a>
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <LL_RCC_SetUSARTClockSource>:
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	43db      	mvns	r3, r3
 80032d0:	401a      	ands	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <LL_RCC_SetI2SClockSource>:
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <LL_RCC_SetLPUARTClockSource>:
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <LL_RCC_SetI2CClockSource>:
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003356:	43db      	mvns	r3, r3
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <LL_RCC_SetLPTIMClockSource>:
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003382:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <LL_RCC_SetRNGClockSource>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80033bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <LL_RCC_SetADCClockSource>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <LL_RCC_SetRTCClockSource>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <LL_RCC_GetRTCClockSource>:
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <LL_RCC_ForceBackupDomainReset>:
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800344e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <LL_RCC_ReleaseBackupDomainReset>:
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
	...

08003480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800348c:	2300      	movs	r3, #0
 800348e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003490:	2300      	movs	r3, #0
 8003492:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d058      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80034a0:	f7fe fdc2 	bl	8002028 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a4:	f7fe fa8e 	bl	80019c4 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034aa:	e009      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ac:	f7fe fa8a 	bl	80019c4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d902      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	74fb      	strb	r3, [r7, #19]
        break;
 80034be:	e006      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034c0:	4b7b      	ldr	r3, [pc, #492]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034cc:	d1ee      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d13c      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80034d4:	f7ff ffa7 	bl	8003426 <LL_RCC_GetRTCClockSource>
 80034d8:	4602      	mov	r2, r0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	429a      	cmp	r2, r3
 80034e0:	d00f      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034f0:	f7ff ffa5 	bl	800343e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f4:	f7ff ffb3 	bl	800345e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d014      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fa5a 	bl	80019c4 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003512:	e00b      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fe fa56 	bl	80019c4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d902      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	74fb      	strb	r3, [r7, #19]
            break;
 800352a:	e004      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800352c:	f7ff feb4 	bl	8003298 <LL_RCC_LSE_IsReady>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d1ee      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff5b 	bl	80033fc <LL_RCC_SetRTCClockSource>
 8003546:	e004      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
 800354c:	e001      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fea9 	bl	80032ba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fe9e 	bl	80032ba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fec0 	bl	8003314 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fee6 	bl	8003376 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fedb 	bl	8003376 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fed0 	bl	8003376 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fea9 	bl	800333e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fe9e 	bl	800333e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fe93 	bl	800333e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fe5e 	bl	80032ea <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003636:	d107      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003646:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fea5 	bl	80033a8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	2b00      	cmp	r3, #0
 8003664:	d107      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003674:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d011      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fea3 	bl	80033d2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003694:	d107      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80036a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	58000400 	.word	0x58000400

080036b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d071      	beq.n	80037aa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd ff06 	bl	80014ec <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80036e8:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <HAL_RTC_Init+0x100>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d051      	beq.n	8003798 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f4:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <HAL_RTC_Init+0x100>)
 80036f6:	22ca      	movs	r2, #202	; 0xca
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_RTC_Init+0x100>)
 80036fc:	2253      	movs	r2, #83	; 0x53
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fb87 	bl	8003e14 <RTC_EnterInitMode>
 8003706:	4603      	mov	r3, r0
 8003708:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d13f      	bne.n	8003790 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_RTC_Init+0x100>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <HAL_RTC_Init+0x100>)
 8003716:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800371a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RTC_Init+0x100>)
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	4319      	orrs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	430b      	orrs	r3, r1
 8003734:	491f      	ldr	r1, [pc, #124]	; (80037b4 <HAL_RTC_Init+0x100>)
 8003736:	4313      	orrs	r3, r2
 8003738:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	491b      	ldr	r1, [pc, #108]	; (80037b4 <HAL_RTC_Init+0x100>)
 8003746:	4313      	orrs	r3, r2
 8003748:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800374a:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_RTC_Init+0x100>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	430b      	orrs	r3, r1
 800375c:	4915      	ldr	r1, [pc, #84]	; (80037b4 <HAL_RTC_Init+0x100>)
 800375e:	4313      	orrs	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fb8a 	bl	8003e7c <RTC_ExitInitMode>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10e      	bne.n	8003790 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <HAL_RTC_Init+0x100>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a19      	ldr	r1, [r3, #32]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4319      	orrs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	430b      	orrs	r3, r1
 800378a:	490a      	ldr	r1, [pc, #40]	; (80037b4 <HAL_RTC_Init+0x100>)
 800378c:	4313      	orrs	r3, r2
 800378e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RTC_Init+0x100>)
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
 8003796:	e001      	b.n	800379c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40002800 	.word	0x40002800

080037b8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_RTC_SetTime+0x1a>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e088      	b.n	80038e4 <HAL_RTC_SetTime+0x12c>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037e2:	4b42      	ldr	r3, [pc, #264]	; (80038ec <HAL_RTC_SetTime+0x134>)
 80037e4:	22ca      	movs	r2, #202	; 0xca
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
 80037e8:	4b40      	ldr	r3, [pc, #256]	; (80038ec <HAL_RTC_SetTime+0x134>)
 80037ea:	2253      	movs	r2, #83	; 0x53
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fb10 	bl	8003e14 <RTC_EnterInitMode>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d15e      	bne.n	80038bc <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80037fe:	4b3b      	ldr	r3, [pc, #236]	; (80038ec <HAL_RTC_SetTime+0x134>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d057      	beq.n	80038bc <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d125      	bne.n	800385e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_RTC_SetTime+0x134>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fb65 	bl	8003ef8 <RTC_ByteToBcd2>
 800382e:	4603      	mov	r3, r0
 8003830:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fb5e 	bl	8003ef8 <RTC_ByteToBcd2>
 800383c:	4603      	mov	r3, r0
 800383e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003840:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	789b      	ldrb	r3, [r3, #2]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb56 	bl	8003ef8 <RTC_ByteToBcd2>
 800384c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800384e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	78db      	ldrb	r3, [r3, #3]
 8003856:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e017      	b.n	800388e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_RTC_SetTime+0x134>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2200      	movs	r2, #0
 800386e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800387c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003882:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	78db      	ldrb	r3, [r3, #3]
 8003888:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800388e:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_RTC_SetTime+0x134>)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003896:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800389a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_RTC_SetTime+0x134>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_RTC_SetTime+0x134>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80038a8:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_RTC_SetTime+0x134>)
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	68d9      	ldr	r1, [r3, #12]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	490d      	ldr	r1, [pc, #52]	; (80038ec <HAL_RTC_SetTime+0x134>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fadd 	bl	8003e7c <RTC_ExitInitMode>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RTC_SetTime+0x134>)
 80038c8:	22ff      	movs	r2, #255	; 0xff
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd90      	pop	{r4, r7, pc}
 80038ec:	40002800 	.word	0x40002800

080038f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80038fc:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <HAL_RTC_GetTime+0xc0>)
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003904:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <HAL_RTC_GetTime+0xc0>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003910:	d049      	beq.n	80039a6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <HAL_RTC_GetTime+0xc0>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RTC_GetTime+0xc0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003926:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800392a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	0d9b      	lsrs	r3, r3, #22
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11a      	bne.n	80039a6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fade 	bl	8003f36 <RTC_Bcd2ToByte>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fad5 	bl	8003f36 <RTC_Bcd2ToByte>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	789b      	ldrb	r3, [r3, #2]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 facc 	bl	8003f36 <RTC_Bcd2ToByte>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40002800 	.word	0x40002800

080039b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_RTC_SetDate+0x1a>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e071      	b.n	8003ab2 <HAL_RTC_SetDate+0xfe>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10e      	bne.n	8003a02 <HAL_RTC_SetDate+0x4e>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	785b      	ldrb	r3, [r3, #1]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	330a      	adds	r3, #10
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11c      	bne.n	8003a42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	78db      	ldrb	r3, [r3, #3]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa73 	bl	8003ef8 <RTC_ByteToBcd2>
 8003a12:	4603      	mov	r3, r0
 8003a14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa6c 	bl	8003ef8 <RTC_ByteToBcd2>
 8003a20:	4603      	mov	r3, r0
 8003a22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	789b      	ldrb	r3, [r3, #2]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fa64 	bl	8003ef8 <RTC_ByteToBcd2>
 8003a30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e00e      	b.n	8003a60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	78db      	ldrb	r3, [r3, #3]
 8003a46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a4e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003a54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a60:	4b16      	ldr	r3, [pc, #88]	; (8003abc <HAL_RTC_SetDate+0x108>)
 8003a62:	22ca      	movs	r2, #202	; 0xca
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_RTC_SetDate+0x108>)
 8003a68:	2253      	movs	r2, #83	; 0x53
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f9d1 	bl	8003e14 <RTC_EnterInitMode>
 8003a72:	4603      	mov	r3, r0
 8003a74:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003a7c:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <HAL_RTC_SetDate+0x108>)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9f6 	bl	8003e7c <RTC_ExitInitMode>
 8003a90:	4603      	mov	r3, r0
 8003a92:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RTC_SetDate+0x108>)
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40002800 	.word	0x40002800

08003ac0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RTC_GetDate+0x98>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ad4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0b5b      	lsrs	r3, r3, #13
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d11a      	bne.n	8003b4e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	78db      	ldrb	r3, [r3, #3]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fa0a 	bl	8003f36 <RTC_Bcd2ToByte>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa01 	bl	8003f36 <RTC_Bcd2ToByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	789b      	ldrb	r3, [r3, #2]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f9f8 	bl	8003f36 <RTC_Bcd2ToByte>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40002800 	.word	0x40002800

08003b5c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_RTC_SetAlarm_IT+0x1e>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0f3      	b.n	8003d62 <HAL_RTC_SetAlarm_IT+0x206>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003b8a:	4b78      	ldr	r3, [pc, #480]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9a:	d06a      	beq.n	8003c72 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d13a      	bne.n	8003c18 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003ba2:	4b72      	ldr	r3, [pc, #456]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f999 	bl	8003ef8 <RTC_ByteToBcd2>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f992 	bl	8003ef8 <RTC_ByteToBcd2>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003bd8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	789b      	ldrb	r3, [r3, #2]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f98a 	bl	8003ef8 <RTC_ByteToBcd2>
 8003be4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003be6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	78db      	ldrb	r3, [r3, #3]
 8003bee:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003bf0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f97c 	bl	8003ef8 <RTC_ByteToBcd2>
 8003c00:	4603      	mov	r3, r0
 8003c02:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c04:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c0c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e02c      	b.n	8003c72 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003c20:	d00d      	beq.n	8003c3e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c2a:	d008      	beq.n	8003c3e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c2c:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c4a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003c50:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	78db      	ldrb	r3, [r3, #3]
 8003c56:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003c58:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c60:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c62:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c68:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c72:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c74:	22ca      	movs	r2, #202	; 0xca
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
 8003c78:	4b3c      	ldr	r3, [pc, #240]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c7a:	2253      	movs	r2, #83	; 0x53
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c86:	d12c      	bne.n	8003ce2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c92:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003c94:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4930      	ldr	r1, [pc, #192]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	644b      	str	r3, [r1, #68]	; 0x44
 8003cb0:	e006      	b.n	8003cc0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003cb2:	4a2e      	ldr	r2, [pc, #184]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003cb8:	4a2c      	ldr	r2, [pc, #176]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	4a24      	ldr	r2, [pc, #144]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003cda:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003cde:	6193      	str	r3, [r2, #24]
 8003ce0:	e02b      	b.n	8003d3a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003ce8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003cec:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfa:	d107      	bne.n	8003d0c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4919      	ldr	r1, [pc, #100]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d0a:	e006      	b.n	8003d1a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003d0c:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003d12:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003d1a:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f043 0202 	orr.w	r2, r3, #2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003d34:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003d38:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_RTC_SetAlarm_IT+0x214>)
 8003d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <HAL_RTC_SetAlarm_IT+0x214>)
 8003d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <HAL_RTC_SetAlarm_IT+0x210>)
 8003d4c:	22ff      	movs	r2, #255	; 0xff
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd90      	pop	{r4, r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40002800 	.word	0x40002800
 8003d70:	58000800 	.word	0x58000800

08003d74 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fc fe8b 	bl	8000ab4 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003daa:	2202      	movs	r2, #2
 8003dac:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8dc 	bl	8003f6c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40002800 	.word	0x40002800

08003dc8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RTC_WaitForSynchro+0x48>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	; (8003e10 <HAL_RTC_WaitForSynchro+0x48>)
 8003dd6:	f023 0320 	bic.w	r3, r3, #32
 8003dda:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003ddc:	f7fd fdf2 	bl	80019c4 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003de2:	e009      	b.n	8003df8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003de4:	f7fd fdee 	bl	80019c4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df2:	d901      	bls.n	8003df8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e006      	b.n	8003e06 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RTC_WaitForSynchro+0x48>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ef      	beq.n	8003de4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40002800 	.word	0x40002800

08003e14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <RTC_EnterInitMode+0x64>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d120      	bne.n	8003e6e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <RTC_EnterInitMode+0x64>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <RTC_EnterInitMode+0x64>)
 8003e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e36:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003e38:	f7fd fdc4 	bl	80019c4 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e3e:	e00d      	b.n	8003e5c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e40:	f7fd fdc0 	bl	80019c4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e4e:	d905      	bls.n	8003e5c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2203      	movs	r2, #3
 8003e58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <RTC_EnterInitMode+0x64>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <RTC_EnterInitMode+0x5a>
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d1e8      	bne.n	8003e40 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40002800 	.word	0x40002800

08003e7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <RTC_ExitInitMode+0x78>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <RTC_ExitInitMode+0x78>)
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e92:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e94:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <RTC_ExitInitMode+0x78>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10c      	bne.n	8003eba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff91 	bl	8003dc8 <HAL_RTC_WaitForSynchro>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01e      	beq.n	8003eea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	e017      	b.n	8003eea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <RTC_ExitInitMode+0x78>)
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <RTC_ExitInitMode+0x78>)
 8003ec0:	f023 0320 	bic.w	r3, r3, #32
 8003ec4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ff7e 	bl	8003dc8 <HAL_RTC_WaitForSynchro>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <RTC_ExitInitMode+0x78>)
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <RTC_ExitInitMode+0x78>)
 8003ee4:	f043 0320 	orr.w	r3, r3, #32
 8003ee8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40002800 	.word	0x40002800

08003ef8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003f0a:	e005      	b.n	8003f18 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	3b0a      	subs	r3, #10
 8003f16:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003f18:	7afb      	ldrb	r3, [r7, #11]
 8003f1a:	2b09      	cmp	r3, #9
 8003f1c:	d8f6      	bhi.n	8003f0c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	7afb      	ldrb	r3, [r7, #11]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b2db      	uxtb	r3, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	b2db      	uxtb	r3, r3
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_GetUSARTClockSource>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	401a      	ands	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	4313      	orrs	r3, r2
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <LL_RCC_GetLPUARTClockSource>:
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4013      	ands	r3, r2
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e042      	b.n	8004058 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fd faad 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2224      	movs	r2, #36	; 0x24
 8003fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fc2e 	bl	8004864 <UART_SetConfig>
 8004008:	4603      	mov	r3, r0
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e022      	b.n	8004058 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fe96 	bl	8004d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800402e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800403e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 ff1c 	bl	8004e8e <UART_CheckIdleState>
 8004056:	4603      	mov	r3, r0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	2b20      	cmp	r3, #32
 8004078:	d173      	bne.n	8004162 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_UART_Transmit+0x26>
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e06c      	b.n	8004164 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2221      	movs	r2, #33	; 0x21
 8004096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800409a:	f7fd fc93 	bl	80019c4 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d108      	bne.n	80040cc <HAL_UART_Transmit+0x6c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d104      	bne.n	80040cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	e003      	b.n	80040d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d4:	e02c      	b.n	8004130 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 ff22 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e039      	b.n	8004164 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	3302      	adds	r3, #2
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	e007      	b.n	800411e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	3301      	adds	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1cc      	bne.n	80040d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2200      	movs	r2, #0
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 feef 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e006      	b.n	8004164 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	; 0x28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004180:	2b20      	cmp	r3, #32
 8004182:	d137      	bne.n	80041f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_UART_Receive_IT+0x24>
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e030      	b.n	80041f6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_UART_Receive_IT+0x94>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01f      	beq.n	80041e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d018      	beq.n	80041e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	613b      	str	r3, [r7, #16]
   return(result);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69f9      	ldr	r1, [r7, #28]
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e6      	bne.n	80041b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 ff66 	bl	80050bc <UART_Start_Receive_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	e000      	b.n	80041f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3728      	adds	r7, #40	; 0x28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40008000 	.word	0x40008000

08004204 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b0ba      	sub	sp, #232	; 0xe8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800422a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800422e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004232:	4013      	ands	r3, r2
 8004234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11b      	bne.n	8004278 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d015      	beq.n	8004278 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800424c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 82e3 	beq.w	8004834 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
      }
      return;
 8004276:	e2dd      	b.n	8004834 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8123 	beq.w	80044c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004282:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004286:	4b8d      	ldr	r3, [pc, #564]	; (80044bc <HAL_UART_IRQHandler+0x2b8>)
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800428e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004292:	4b8b      	ldr	r3, [pc, #556]	; (80044c0 <HAL_UART_IRQHandler+0x2bc>)
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8116 	beq.w	80044c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d011      	beq.n	80042cc <HAL_UART_IRQHandler+0xc8>
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2201      	movs	r2, #1
 80042ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d011      	beq.n	80042fc <HAL_UART_IRQHandler+0xf8>
 80042d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2202      	movs	r2, #2
 80042ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f043 0204 	orr.w	r2, r3, #4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d011      	beq.n	800432c <HAL_UART_IRQHandler+0x128>
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2204      	movs	r2, #4
 800431a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d017      	beq.n	8004368 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004344:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004348:	4b5c      	ldr	r3, [pc, #368]	; (80044bc <HAL_UART_IRQHandler+0x2b8>)
 800434a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00b      	beq.n	8004368 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2208      	movs	r2, #8
 8004356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f043 0208 	orr.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004370:	2b00      	cmp	r3, #0
 8004372:	d012      	beq.n	800439a <HAL_UART_IRQHandler+0x196>
 8004374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8249 	beq.w	8004838 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d005      	beq.n	80043fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d054      	beq.n	80044a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 ff7c 	bl	80052fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d146      	bne.n	80044a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3308      	adds	r3, #8
 8004418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800442c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3308      	adds	r3, #8
 800443a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800443e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800444a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1d9      	bne.n	8004412 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <HAL_UART_IRQHandler+0x2c0>)
 8004470:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004478:	4618      	mov	r0, r3
 800447a:	f7fd fc16 	bl	8001caa <HAL_DMA_Abort_IT>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d019      	beq.n	80044b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004492:	4610      	mov	r0, r2
 8004494:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004496:	e00f      	b.n	80044b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc fac3 	bl	8000a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449e:	e00b      	b.n	80044b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc fabf 	bl	8000a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a6:	e007      	b.n	80044b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fc fabb 	bl	8000a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80044b6:	e1bf      	b.n	8004838 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	bf00      	nop
    return;
 80044ba:	e1bd      	b.n	8004838 <HAL_UART_IRQHandler+0x634>
 80044bc:	10000001 	.word	0x10000001
 80044c0:	04000120 	.word	0x04000120
 80044c4:	080053c7 	.word	0x080053c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 8153 	bne.w	8004778 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 814c 	beq.w	8004778 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8145 	beq.w	8004778 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2210      	movs	r2, #16
 80044f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	f040 80bb 	bne.w	800467c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 818f 	beq.w	800483c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004524:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004528:	429a      	cmp	r2, r3
 800452a:	f080 8187 	bcs.w	800483c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 8087 	bne.w	800465a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800457a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1da      	bne.n	800454c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e1      	bne.n	8004596 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e3      	bne.n	80045d2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800463a:	65bb      	str	r3, [r7, #88]	; 0x58
 800463c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e4      	bne.n	8004618 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd faca 	bl	8001bee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800466c:	b29b      	uxth	r3, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b29b      	uxth	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f8e9 	bl	800484c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800467a:	e0df      	b.n	800483c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004688:	b29b      	uxth	r3, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80d1 	beq.w	8004840 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800469e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80cc 	beq.w	8004840 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ca:	647b      	str	r3, [r7, #68]	; 0x44
 80046cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e4      	bne.n	80046a8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3308      	adds	r3, #8
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	623b      	str	r3, [r7, #32]
   return(result);
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3308      	adds	r3, #8
 8004702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004706:	633a      	str	r2, [r7, #48]	; 0x30
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800470c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e1      	bne.n	80046de <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	60fb      	str	r3, [r7, #12]
   return(result);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0310 	bic.w	r3, r3, #16
 8004742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	617b      	str	r3, [r7, #20]
   return(result);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e4      	bne.n	800472e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800476a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f86b 	bl	800484c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004776:	e063      	b.n	8004840 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00e      	beq.n	80047a2 <HAL_UART_IRQHandler+0x59e>
 8004784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004798:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 fb70 	bl	8005e80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047a0:	e051      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d014      	beq.n	80047d8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d105      	bne.n	80047c6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d03a      	beq.n	8004844 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
    }
    return;
 80047d6:	e035      	b.n	8004844 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <HAL_UART_IRQHandler+0x5f4>
 80047e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fdfe 	bl	80053f2 <UART_EndTransmit_IT>
    return;
 80047f6:	e026      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_UART_IRQHandler+0x614>
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f001 fb47 	bl	8005ea4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004816:	e016      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d010      	beq.n	8004846 <HAL_UART_IRQHandler+0x642>
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004828:	2b00      	cmp	r3, #0
 800482a:	da0c      	bge.n	8004846 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 fb30 	bl	8005e92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004832:	e008      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
      return;
 8004834:	bf00      	nop
 8004836:	e006      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
    return;
 8004838:	bf00      	nop
 800483a:	e004      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
      return;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
      return;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_UART_IRQHandler+0x642>
    return;
 8004844:	bf00      	nop
  }
}
 8004846:	37e8      	adds	r7, #232	; 0xe8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
	...

08004864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b08c      	sub	sp, #48	; 0x30
 800486a:	af00      	add	r7, sp, #0
 800486c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	431a      	orrs	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	431a      	orrs	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	4313      	orrs	r3, r2
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b94      	ldr	r3, [pc, #592]	; (8004ae4 <UART_SetConfig+0x280>)
 8004894:	4013      	ands	r3, r2
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800489c:	430b      	orrs	r3, r1
 800489e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a89      	ldr	r2, [pc, #548]	; (8004ae8 <UART_SetConfig+0x284>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048cc:	4313      	orrs	r3, r2
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f023 010f 	bic.w	r1, r3, #15
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a7a      	ldr	r2, [pc, #488]	; (8004aec <UART_SetConfig+0x288>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d127      	bne.n	8004958 <UART_SetConfig+0xf4>
 8004908:	2003      	movs	r0, #3
 800490a:	f7ff fb38 	bl	8003f7e <LL_RCC_GetUSARTClockSource>
 800490e:	4603      	mov	r3, r0
 8004910:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004914:	2b03      	cmp	r3, #3
 8004916:	d81b      	bhi.n	8004950 <UART_SetConfig+0xec>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0xbc>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004931 	.word	0x08004931
 8004924:	08004941 	.word	0x08004941
 8004928:	08004939 	.word	0x08004939
 800492c:	08004949 	.word	0x08004949
 8004930:	2301      	movs	r3, #1
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e080      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493e:	e07c      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004946:	e078      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e074      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e070      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a64      	ldr	r2, [pc, #400]	; (8004af0 <UART_SetConfig+0x28c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d138      	bne.n	80049d4 <UART_SetConfig+0x170>
 8004962:	200c      	movs	r0, #12
 8004964:	f7ff fb0b 	bl	8003f7e <LL_RCC_GetUSARTClockSource>
 8004968:	4603      	mov	r3, r0
 800496a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800496e:	2b0c      	cmp	r3, #12
 8004970:	d82c      	bhi.n	80049cc <UART_SetConfig+0x168>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x114>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049cd 	.word	0x080049cd
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049b5 	.word	0x080049b5
 800499c:	080049cd 	.word	0x080049cd
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e042      	b.n	8004a3a <UART_SetConfig+0x1d6>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e03e      	b.n	8004a3a <UART_SetConfig+0x1d6>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c2:	e03a      	b.n	8004a3a <UART_SetConfig+0x1d6>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e036      	b.n	8004a3a <UART_SetConfig+0x1d6>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e032      	b.n	8004a3a <UART_SetConfig+0x1d6>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a43      	ldr	r2, [pc, #268]	; (8004ae8 <UART_SetConfig+0x284>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d12a      	bne.n	8004a34 <UART_SetConfig+0x1d0>
 80049de:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80049e2:	f7ff fade 	bl	8003fa2 <LL_RCC_GetLPUARTClockSource>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ec:	d01a      	beq.n	8004a24 <UART_SetConfig+0x1c0>
 80049ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049f2:	d81b      	bhi.n	8004a2c <UART_SetConfig+0x1c8>
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f8:	d00c      	beq.n	8004a14 <UART_SetConfig+0x1b0>
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d815      	bhi.n	8004a2c <UART_SetConfig+0x1c8>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <UART_SetConfig+0x1a8>
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d008      	beq.n	8004a1c <UART_SetConfig+0x1b8>
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x1c8>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a12:	e012      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	e00e      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a22:	e00a      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	e006      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e002      	b.n	8004a3a <UART_SetConfig+0x1d6>
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <UART_SetConfig+0x284>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	f040 80a4 	bne.w	8004b8e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d823      	bhi.n	8004a96 <UART_SetConfig+0x232>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x1f0>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a97 	.word	0x08004a97
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a87 	.word	0x08004a87
 8004a68:	08004a97 	.word	0x08004a97
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004a97 	.word	0x08004a97
 8004a74:	08004a8f 	.word	0x08004a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe fb38 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a7e:	e010      	b.n	8004aa2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <UART_SetConfig+0x290>)
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a84:	e00d      	b.n	8004aa2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a86:	f7fe fa7d 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a8c:	e009      	b.n	8004aa2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a94:	e005      	b.n	8004aa2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8137 	beq.w	8004d18 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <UART_SetConfig+0x294>)
 8004ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4413      	add	r3, r2
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d305      	bcc.n	8004ada <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ae0:	e11a      	b.n	8004d18 <UART_SetConfig+0x4b4>
 8004ae2:	bf00      	nop
 8004ae4:	cfff69f3 	.word	0xcfff69f3
 8004ae8:	40008000 	.word	0x40008000
 8004aec:	40013800 	.word	0x40013800
 8004af0:	40004400 	.word	0x40004400
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	08006b74 	.word	0x08006b74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	2200      	movs	r2, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	60fa      	str	r2, [r7, #12]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	4a8e      	ldr	r2, [pc, #568]	; (8004d44 <UART_SetConfig+0x4e0>)
 8004b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2200      	movs	r2, #0
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b1e:	f7fb fb7f 	bl	8000220 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	020b      	lsls	r3, r1, #8
 8004b34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b38:	0202      	lsls	r2, r0, #8
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	0849      	lsrs	r1, r1, #1
 8004b40:	2000      	movs	r0, #0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4605      	mov	r5, r0
 8004b46:	eb12 0804 	adds.w	r8, r2, r4
 8004b4a:	eb43 0905 	adc.w	r9, r3, r5
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	469a      	mov	sl, r3
 8004b56:	4693      	mov	fp, r2
 8004b58:	4652      	mov	r2, sl
 8004b5a:	465b      	mov	r3, fp
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb fb5e 	bl	8000220 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b72:	d308      	bcc.n	8004b86 <UART_SetConfig+0x322>
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d204      	bcs.n	8004b86 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	e0c8      	b.n	8004d18 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b8c:	e0c4      	b.n	8004d18 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b96:	d167      	bne.n	8004c68 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004b98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d828      	bhi.n	8004bf2 <UART_SetConfig+0x38e>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x344>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bd5 	.word	0x08004bd5
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bf3 	.word	0x08004bf3
 8004bb8:	08004be3 	.word	0x08004be3
 8004bbc:	08004bf3 	.word	0x08004bf3
 8004bc0:	08004bf3 	.word	0x08004bf3
 8004bc4:	08004bf3 	.word	0x08004bf3
 8004bc8:	08004beb 	.word	0x08004beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe fa8e 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bd2:	e014      	b.n	8004bfe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe fa9c 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bda:	e010      	b.n	8004bfe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b5a      	ldr	r3, [pc, #360]	; (8004d48 <UART_SetConfig+0x4e4>)
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004be0:	e00d      	b.n	8004bfe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fe f9cf 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8004be6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be8:	e009      	b.n	8004bfe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bf0:	e005      	b.n	8004bfe <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8089 	beq.w	8004d18 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	4a4e      	ldr	r2, [pc, #312]	; (8004d44 <UART_SetConfig+0x4e0>)
 8004c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c10:	461a      	mov	r2, r3
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c18:	005a      	lsls	r2, r3, #1
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	441a      	add	r2, r3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2b0f      	cmp	r3, #15
 8004c30:	d916      	bls.n	8004c60 <UART_SetConfig+0x3fc>
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d212      	bcs.n	8004c60 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f023 030f 	bic.w	r3, r3, #15
 8004c42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	8bfa      	ldrh	r2, [r7, #30]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	e05b      	b.n	8004d18 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c66:	e057      	b.n	8004d18 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d828      	bhi.n	8004cc2 <UART_SetConfig+0x45e>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x414>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cc3 	.word	0x08004cc3
 8004c88:	08004cb3 	.word	0x08004cb3
 8004c8c:	08004cc3 	.word	0x08004cc3
 8004c90:	08004cc3 	.word	0x08004cc3
 8004c94:	08004cc3 	.word	0x08004cc3
 8004c98:	08004cbb 	.word	0x08004cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7fe fa26 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ca2:	e014      	b.n	8004cce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fe fa34 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004caa:	e010      	b.n	8004cce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cac:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <UART_SetConfig+0x4e4>)
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cb0:	e00d      	b.n	8004cce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7fe f967 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8004cb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cb8:	e009      	b.n	8004cce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cc0:	e005      	b.n	8004cce <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d021      	beq.n	8004d18 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <UART_SetConfig+0x4e0>)
 8004cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	441a      	add	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	2b0f      	cmp	r3, #15
 8004cfc:	d909      	bls.n	8004d12 <UART_SetConfig+0x4ae>
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d205      	bcs.n	8004d12 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	e002      	b.n	8004d18 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2200      	movs	r2, #0
 8004d32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3730      	adds	r7, #48	; 0x30
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d42:	bf00      	nop
 8004d44:	08006b74 	.word	0x08006b74
 8004d48:	00f42400 	.word	0x00f42400

08004d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d10a      	bne.n	8004e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af02      	add	r7, sp, #8
 8004e94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e9e:	f7fc fd91 	bl	80019c4 <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d10e      	bne.n	8004ed0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f832 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e028      	b.n	8004f22 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d10e      	bne.n	8004efc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ede:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f81c 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e012      	b.n	8004f22 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b09c      	sub	sp, #112	; 0x70
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	e0a9      	b.n	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f42:	f000 80a5 	beq.w	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fc fd3d 	bl	80019c4 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d140      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f70:	667b      	str	r3, [r7, #100]	; 0x64
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e6      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e069      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d051      	beq.n	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffa:	d149      	bne.n	8005090 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005004:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800501a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
 8005026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800502a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	613b      	str	r3, [r7, #16]
   return(result);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005058:	623a      	str	r2, [r7, #32]
 800505a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	69f9      	ldr	r1, [r7, #28]
 800505e:	6a3a      	ldr	r2, [r7, #32]
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	61bb      	str	r3, [r7, #24]
   return(result);
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e010      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69da      	ldr	r2, [r3, #28]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	429a      	cmp	r2, r3
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	f43f af46 	beq.w	8004f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3770      	adds	r7, #112	; 0x70
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050bc:	b480      	push	{r7}
 80050be:	b0a3      	sub	sp, #140	; 0x8c
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d10e      	bne.n	800510e <UART_Start_Receive_IT+0x52>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <UART_Start_Receive_IT+0x48>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005102:	e02d      	b.n	8005160 <UART_Start_Receive_IT+0xa4>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	22ff      	movs	r2, #255	; 0xff
 8005108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800510c:	e028      	b.n	8005160 <UART_Start_Receive_IT+0xa4>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10d      	bne.n	8005132 <UART_Start_Receive_IT+0x76>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <UART_Start_Receive_IT+0x6c>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005126:	e01b      	b.n	8005160 <UART_Start_Receive_IT+0xa4>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	227f      	movs	r2, #127	; 0x7f
 800512c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005130:	e016      	b.n	8005160 <UART_Start_Receive_IT+0xa4>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800513a:	d10d      	bne.n	8005158 <UART_Start_Receive_IT+0x9c>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <UART_Start_Receive_IT+0x92>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	227f      	movs	r2, #127	; 0x7f
 8005148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800514c:	e008      	b.n	8005160 <UART_Start_Receive_IT+0xa4>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	223f      	movs	r2, #63	; 0x3f
 8005152:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005156:	e003      	b.n	8005160 <UART_Start_Receive_IT+0xa4>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2222      	movs	r2, #34	; 0x22
 800516c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005194:	673a      	str	r2, [r7, #112]	; 0x70
 8005196:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800519a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80051a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e3      	bne.n	8005170 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b0:	d14f      	bne.n	8005252 <UART_Start_Receive_IT+0x196>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d349      	bcc.n	8005252 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d107      	bne.n	80051d8 <UART_Start_Receive_IT+0x11c>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a46      	ldr	r2, [pc, #280]	; (80052ec <UART_Start_Receive_IT+0x230>)
 80051d4:	675a      	str	r2, [r3, #116]	; 0x74
 80051d6:	e002      	b.n	80051de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a45      	ldr	r2, [pc, #276]	; (80052f0 <UART_Start_Receive_IT+0x234>)
 80051dc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01a      	beq.n	800521c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800520e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e4      	bne.n	80051e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005232:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3308      	adds	r3, #8
 800523a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800523c:	64ba      	str	r2, [r7, #72]	; 0x48
 800523e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800524a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_Start_Receive_IT+0x160>
 8005250:	e046      	b.n	80052e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525a:	d107      	bne.n	800526c <UART_Start_Receive_IT+0x1b0>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d103      	bne.n	800526c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <UART_Start_Receive_IT+0x238>)
 8005268:	675a      	str	r2, [r3, #116]	; 0x74
 800526a:	e002      	b.n	8005272 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <UART_Start_Receive_IT+0x23c>)
 8005270:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d019      	beq.n	80052ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800528e:	677b      	str	r3, [r7, #116]	; 0x74
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
 800529a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800529e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_Start_Receive_IT+0x1be>
 80052ac:	e018      	b.n	80052e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	613b      	str	r3, [r7, #16]
   return(result);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f043 0320 	orr.w	r3, r3, #32
 80052c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	69f9      	ldr	r1, [r7, #28]
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e6      	bne.n	80052ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	378c      	adds	r7, #140	; 0x8c
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	08005b19 	.word	0x08005b19
 80052f0:	080057b9 	.word	0x080057b9
 80052f4:	08005601 	.word	0x08005601
 80052f8:	08005449 	.word	0x08005449

080052fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b095      	sub	sp, #84	; 0x54
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
 8005324:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e6      	bne.n	8005304 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	61fb      	str	r3, [r7, #28]
   return(result);
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	64bb      	str	r3, [r7, #72]	; 0x48
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3308      	adds	r3, #8
 8005358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800535a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e3      	bne.n	8005336 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d118      	bne.n	80053a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	60bb      	str	r3, [r7, #8]
   return(result);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0310 	bic.w	r3, r3, #16
 800538a:	647b      	str	r3, [r7, #68]	; 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6979      	ldr	r1, [r7, #20]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 80053bc:	bf00      	nop
 80053be:	3754      	adds	r7, #84	; 0x54
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7fb fb1d 	bl	8000a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b088      	sub	sp, #32
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	60bb      	str	r3, [r7, #8]
   return(result);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6979      	ldr	r1, [r7, #20]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	613b      	str	r3, [r7, #16]
   return(result);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e6      	bne.n	80053fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb fb0a 	bl	8000a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005440:	bf00      	nop
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b09c      	sub	sp, #112	; 0x70
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005456:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005460:	2b22      	cmp	r3, #34	; 0x22
 8005462:	f040 80be 	bne.w	80055e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005470:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005474:	b2d9      	uxtb	r1, r3
 8005476:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800547a:	b2da      	uxtb	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	400a      	ands	r2, r1
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 80a1 	bne.w	80055f2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80054d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e6      	bne.n	80054b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	667b      	str	r3, [r7, #100]	; 0x64
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005502:	647a      	str	r2, [r7, #68]	; 0x44
 8005504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e5      	bne.n	80054e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a33      	ldr	r2, [pc, #204]	; (80055fc <UART_RxISR_8BIT+0x1b4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d01f      	beq.n	8005574 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d018      	beq.n	8005574 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	623b      	str	r3, [r7, #32]
   return(result);
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005556:	663b      	str	r3, [r7, #96]	; 0x60
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
 8005562:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d12e      	bne.n	80055da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	617b      	str	r3, [r7, #20]
   return(result);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e6      	bne.n	8005582 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d103      	bne.n	80055ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2210      	movs	r2, #16
 80055c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff f93a 	bl	800484c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055d8:	e00b      	b.n	80055f2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fb fa52 	bl	8000a84 <HAL_UART_RxCpltCallback>
}
 80055e0:	e007      	b.n	80055f2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0208 	orr.w	r2, r2, #8
 80055f0:	619a      	str	r2, [r3, #24]
}
 80055f2:	bf00      	nop
 80055f4:	3770      	adds	r7, #112	; 0x70
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40008000 	.word	0x40008000

08005600 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b09c      	sub	sp, #112	; 0x70
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800560e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005618:	2b22      	cmp	r3, #34	; 0x22
 800561a:	f040 80be 	bne.w	800579a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800562e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005632:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005636:	4013      	ands	r3, r2
 8005638:	b29a      	uxth	r2, r3
 800563a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800563c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	1c9a      	adds	r2, r3, #2
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 80a1 	bne.w	80057aa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800567c:	667b      	str	r3, [r7, #100]	; 0x64
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005686:	657b      	str	r3, [r7, #84]	; 0x54
 8005688:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800568c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e6      	bne.n	8005668 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	663b      	str	r3, [r7, #96]	; 0x60
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056ba:	643a      	str	r2, [r7, #64]	; 0x40
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a33      	ldr	r2, [pc, #204]	; (80057b4 <UART_RxISR_16BIT+0x1b4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d01f      	beq.n	800572c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	61fb      	str	r3, [r7, #28]
   return(result);
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800570e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d12e      	bne.n	8005792 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60bb      	str	r3, [r7, #8]
   return(result);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	613b      	str	r3, [r7, #16]
   return(result);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e6      	bne.n	800573a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	d103      	bne.n	8005782 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2210      	movs	r2, #16
 8005780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff f85e 	bl	800484c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005790:	e00b      	b.n	80057aa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb f976 	bl	8000a84 <HAL_UART_RxCpltCallback>
}
 8005798:	e007      	b.n	80057aa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0208 	orr.w	r2, r2, #8
 80057a8:	619a      	str	r2, [r3, #24]
}
 80057aa:	bf00      	nop
 80057ac:	3770      	adds	r7, #112	; 0x70
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40008000 	.word	0x40008000

080057b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b0ac      	sub	sp, #176	; 0xb0
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ee:	2b22      	cmp	r3, #34	; 0x22
 80057f0:	f040 8182 	bne.w	8005af8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057fa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057fe:	e125      	b.n	8005a4c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800580a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800580e:	b2d9      	uxtb	r1, r3
 8005810:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005814:	b2da      	uxtb	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	400a      	ands	r2, r1
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d053      	beq.n	80058fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d011      	beq.n	8005882 <UART_RxISR_8BIT_FIFOEN+0xca>
 800585e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f043 0201 	orr.w	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d011      	beq.n	80058b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800588e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2202      	movs	r2, #2
 80058a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a8:	f043 0204 	orr.w	r2, r3, #4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d011      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80058be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2204      	movs	r2, #4
 80058d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f043 0202 	orr.w	r2, r3, #2
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d006      	beq.n	80058fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fb f899 	bl	8000a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 80a2 	bne.w	8005a4c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800592a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800592c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005930:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e4      	bne.n	8005908 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800594e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005966:	66ba      	str	r2, [r7, #104]	; 0x68
 8005968:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800596c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e1      	bne.n	800593e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5f      	ldr	r2, [pc, #380]	; (8005b10 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d021      	beq.n	80059dc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01a      	beq.n	80059dc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80059b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059c8:	657b      	str	r3, [r7, #84]	; 0x54
 80059ca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e4      	bne.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d130      	bne.n	8005a46 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	f023 0310 	bic.w	r3, r3, #16
 80059fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e4      	bne.n	80059ea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d103      	bne.n	8005a36 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2210      	movs	r2, #16
 8005a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe ff04 	bl	800484c <HAL_UARTEx_RxEventCallback>
 8005a44:	e002      	b.n	8005a4c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fb f81c 	bl	8000a84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f47f aecf 	bne.w	8005800 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d049      	beq.n	8005b08 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d242      	bcs.n	8005b08 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e3      	bne.n	8005a82 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005abe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f043 0320 	orr.w	r3, r3, #32
 8005ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6979      	ldr	r1, [r7, #20]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	613b      	str	r3, [r7, #16]
   return(result);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e4      	bne.n	8005ac0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005af6:	e007      	b.n	8005b08 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0208 	orr.w	r2, r2, #8
 8005b06:	619a      	str	r2, [r3, #24]
}
 8005b08:	bf00      	nop
 8005b0a:	37b0      	adds	r7, #176	; 0xb0
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40008000 	.word	0x40008000
 8005b14:	08005449 	.word	0x08005449

08005b18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b0ae      	sub	sp, #184	; 0xb8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b26:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4e:	2b22      	cmp	r3, #34	; 0x22
 8005b50:	f040 8186 	bne.w	8005e60 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b5a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b5e:	e129      	b.n	8005db4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b72:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005b76:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d053      	beq.n	8005c5e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d011      	beq.n	8005be6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bdc:	f043 0201 	orr.w	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d011      	beq.n	8005c16 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2202      	movs	r2, #2
 8005c04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d011      	beq.n	8005c46 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2204      	movs	r2, #4
 8005c34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f043 0202 	orr.w	r2, r3, #2
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fa fee7 	bl	8000a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f040 80a4 	bne.w	8005db4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c92:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e2      	bne.n	8005c6c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e1      	bne.n	8005ca6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a5f      	ldr	r2, [pc, #380]	; (8005e78 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d021      	beq.n	8005d44 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01a      	beq.n	8005d44 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e4      	bne.n	8005d0e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d130      	bne.n	8005dae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d62:	f023 0310 	bic.w	r3, r3, #16
 8005d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
 8005d76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e4      	bne.n	8005d52 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d103      	bne.n	8005d9e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2210      	movs	r2, #16
 8005d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fe fd50 	bl	800484c <HAL_UARTEx_RxEventCallback>
 8005dac:	e002      	b.n	8005db4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fa fe68 	bl	8000a84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005db4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f aecb 	bne.w	8005b60 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dd0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d049      	beq.n	8005e70 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005de2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d242      	bcs.n	8005e70 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e3      	bne.n	8005dea <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005e26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f043 0320 	orr.w	r3, r3, #32
 8005e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	617b      	str	r3, [r7, #20]
   return(result);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e4      	bne.n	8005e28 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e5e:	e007      	b.n	8005e70 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0208 	orr.w	r2, r2, #8
 8005e6e:	619a      	str	r2, [r3, #24]
}
 8005e70:	bf00      	nop
 8005e72:	37b8      	adds	r7, #184	; 0xb8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40008000 	.word	0x40008000
 8005e7c:	08005601 	.word	0x08005601

08005e80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_UARTEx_DisableFifoMode+0x16>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e027      	b.n	8005f1c <HAL_UARTEx_DisableFifoMode+0x66>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005efa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e02d      	b.n	8005f9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2224      	movs	r2, #36	; 0x24
 8005f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f850 	bl	8006020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e02d      	b.n	8006016 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2224      	movs	r2, #36	; 0x24
 8005fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f812 	bl	8006020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602c:	2b00      	cmp	r3, #0
 800602e:	d108      	bne.n	8006042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006040:	e031      	b.n	80060a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006042:	2308      	movs	r3, #8
 8006044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006046:	2308      	movs	r3, #8
 8006048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	0e5b      	lsrs	r3, r3, #25
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	0f5b      	lsrs	r3, r3, #29
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	7b3a      	ldrb	r2, [r7, #12]
 800606e:	4910      	ldr	r1, [pc, #64]	; (80060b0 <UARTEx_SetNbDataToProcess+0x90>)
 8006070:	5c8a      	ldrb	r2, [r1, r2]
 8006072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006076:	7b3a      	ldrb	r2, [r7, #12]
 8006078:	490e      	ldr	r1, [pc, #56]	; (80060b4 <UARTEx_SetNbDataToProcess+0x94>)
 800607a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800607c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006080:	b29a      	uxth	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	7b7a      	ldrb	r2, [r7, #13]
 800608c:	4908      	ldr	r1, [pc, #32]	; (80060b0 <UARTEx_SetNbDataToProcess+0x90>)
 800608e:	5c8a      	ldrb	r2, [r1, r2]
 8006090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006094:	7b7a      	ldrb	r2, [r7, #13]
 8006096:	4907      	ldr	r1, [pc, #28]	; (80060b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800609a:	fb93 f3f2 	sdiv	r3, r3, r2
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr
 80060b0:	08006b8c 	.word	0x08006b8c
 80060b4:	08006b94 	.word	0x08006b94

080060b8 <__errno>:
 80060b8:	4b01      	ldr	r3, [pc, #4]	; (80060c0 <__errno+0x8>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	2000000c 	.word	0x2000000c

080060c4 <__libc_init_array>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4d0d      	ldr	r5, [pc, #52]	; (80060fc <__libc_init_array+0x38>)
 80060c8:	4c0d      	ldr	r4, [pc, #52]	; (8006100 <__libc_init_array+0x3c>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	2600      	movs	r6, #0
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	d109      	bne.n	80060e8 <__libc_init_array+0x24>
 80060d4:	4d0b      	ldr	r5, [pc, #44]	; (8006104 <__libc_init_array+0x40>)
 80060d6:	4c0c      	ldr	r4, [pc, #48]	; (8006108 <__libc_init_array+0x44>)
 80060d8:	f000 fca0 	bl	8006a1c <_init>
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	2600      	movs	r6, #0
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d105      	bne.n	80060f2 <__libc_init_array+0x2e>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ec:	4798      	blx	r3
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7ee      	b.n	80060d0 <__libc_init_array+0xc>
 80060f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f6:	4798      	blx	r3
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7f2      	b.n	80060e2 <__libc_init_array+0x1e>
 80060fc:	08006bd8 	.word	0x08006bd8
 8006100:	08006bd8 	.word	0x08006bd8
 8006104:	08006bd8 	.word	0x08006bd8
 8006108:	08006bdc 	.word	0x08006bdc

0800610c <memcpy>:
 800610c:	440a      	add	r2, r1
 800610e:	4291      	cmp	r1, r2
 8006110:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006114:	d100      	bne.n	8006118 <memcpy+0xc>
 8006116:	4770      	bx	lr
 8006118:	b510      	push	{r4, lr}
 800611a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800611e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006122:	4291      	cmp	r1, r2
 8006124:	d1f9      	bne.n	800611a <memcpy+0xe>
 8006126:	bd10      	pop	{r4, pc}

08006128 <memset>:
 8006128:	4402      	add	r2, r0
 800612a:	4603      	mov	r3, r0
 800612c:	4293      	cmp	r3, r2
 800612e:	d100      	bne.n	8006132 <memset+0xa>
 8006130:	4770      	bx	lr
 8006132:	f803 1b01 	strb.w	r1, [r3], #1
 8006136:	e7f9      	b.n	800612c <memset+0x4>

08006138 <sniprintf>:
 8006138:	b40c      	push	{r2, r3}
 800613a:	b530      	push	{r4, r5, lr}
 800613c:	4b17      	ldr	r3, [pc, #92]	; (800619c <sniprintf+0x64>)
 800613e:	1e0c      	subs	r4, r1, #0
 8006140:	681d      	ldr	r5, [r3, #0]
 8006142:	b09d      	sub	sp, #116	; 0x74
 8006144:	da08      	bge.n	8006158 <sniprintf+0x20>
 8006146:	238b      	movs	r3, #139	; 0x8b
 8006148:	602b      	str	r3, [r5, #0]
 800614a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800614e:	b01d      	add	sp, #116	; 0x74
 8006150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006154:	b002      	add	sp, #8
 8006156:	4770      	bx	lr
 8006158:	f44f 7302 	mov.w	r3, #520	; 0x208
 800615c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006160:	bf14      	ite	ne
 8006162:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006166:	4623      	moveq	r3, r4
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006170:	9002      	str	r0, [sp, #8]
 8006172:	9006      	str	r0, [sp, #24]
 8006174:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800617a:	ab21      	add	r3, sp, #132	; 0x84
 800617c:	a902      	add	r1, sp, #8
 800617e:	4628      	mov	r0, r5
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	f000 f869 	bl	8006258 <_svfiprintf_r>
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	bfbc      	itt	lt
 800618a:	238b      	movlt	r3, #139	; 0x8b
 800618c:	602b      	strlt	r3, [r5, #0]
 800618e:	2c00      	cmp	r4, #0
 8006190:	d0dd      	beq.n	800614e <sniprintf+0x16>
 8006192:	9b02      	ldr	r3, [sp, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	e7d9      	b.n	800614e <sniprintf+0x16>
 800619a:	bf00      	nop
 800619c:	2000000c 	.word	0x2000000c

080061a0 <__ssputs_r>:
 80061a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a4:	688e      	ldr	r6, [r1, #8]
 80061a6:	429e      	cmp	r6, r3
 80061a8:	4682      	mov	sl, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	4690      	mov	r8, r2
 80061ae:	461f      	mov	r7, r3
 80061b0:	d838      	bhi.n	8006224 <__ssputs_r+0x84>
 80061b2:	898a      	ldrh	r2, [r1, #12]
 80061b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061b8:	d032      	beq.n	8006220 <__ssputs_r+0x80>
 80061ba:	6825      	ldr	r5, [r4, #0]
 80061bc:	6909      	ldr	r1, [r1, #16]
 80061be:	eba5 0901 	sub.w	r9, r5, r1
 80061c2:	6965      	ldr	r5, [r4, #20]
 80061c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061cc:	3301      	adds	r3, #1
 80061ce:	444b      	add	r3, r9
 80061d0:	106d      	asrs	r5, r5, #1
 80061d2:	429d      	cmp	r5, r3
 80061d4:	bf38      	it	cc
 80061d6:	461d      	movcc	r5, r3
 80061d8:	0553      	lsls	r3, r2, #21
 80061da:	d531      	bpl.n	8006240 <__ssputs_r+0xa0>
 80061dc:	4629      	mov	r1, r5
 80061de:	f000 fb53 	bl	8006888 <_malloc_r>
 80061e2:	4606      	mov	r6, r0
 80061e4:	b950      	cbnz	r0, 80061fc <__ssputs_r+0x5c>
 80061e6:	230c      	movs	r3, #12
 80061e8:	f8ca 3000 	str.w	r3, [sl]
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fc:	6921      	ldr	r1, [r4, #16]
 80061fe:	464a      	mov	r2, r9
 8006200:	f7ff ff84 	bl	800610c <memcpy>
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800620a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	6126      	str	r6, [r4, #16]
 8006212:	6165      	str	r5, [r4, #20]
 8006214:	444e      	add	r6, r9
 8006216:	eba5 0509 	sub.w	r5, r5, r9
 800621a:	6026      	str	r6, [r4, #0]
 800621c:	60a5      	str	r5, [r4, #8]
 800621e:	463e      	mov	r6, r7
 8006220:	42be      	cmp	r6, r7
 8006222:	d900      	bls.n	8006226 <__ssputs_r+0x86>
 8006224:	463e      	mov	r6, r7
 8006226:	6820      	ldr	r0, [r4, #0]
 8006228:	4632      	mov	r2, r6
 800622a:	4641      	mov	r1, r8
 800622c:	f000 faa8 	bl	8006780 <memmove>
 8006230:	68a3      	ldr	r3, [r4, #8]
 8006232:	1b9b      	subs	r3, r3, r6
 8006234:	60a3      	str	r3, [r4, #8]
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	4433      	add	r3, r6
 800623a:	6023      	str	r3, [r4, #0]
 800623c:	2000      	movs	r0, #0
 800623e:	e7db      	b.n	80061f8 <__ssputs_r+0x58>
 8006240:	462a      	mov	r2, r5
 8006242:	f000 fb95 	bl	8006970 <_realloc_r>
 8006246:	4606      	mov	r6, r0
 8006248:	2800      	cmp	r0, #0
 800624a:	d1e1      	bne.n	8006210 <__ssputs_r+0x70>
 800624c:	6921      	ldr	r1, [r4, #16]
 800624e:	4650      	mov	r0, sl
 8006250:	f000 fab0 	bl	80067b4 <_free_r>
 8006254:	e7c7      	b.n	80061e6 <__ssputs_r+0x46>
	...

08006258 <_svfiprintf_r>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	4698      	mov	r8, r3
 800625e:	898b      	ldrh	r3, [r1, #12]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	b09d      	sub	sp, #116	; 0x74
 8006264:	4607      	mov	r7, r0
 8006266:	460d      	mov	r5, r1
 8006268:	4614      	mov	r4, r2
 800626a:	d50e      	bpl.n	800628a <_svfiprintf_r+0x32>
 800626c:	690b      	ldr	r3, [r1, #16]
 800626e:	b963      	cbnz	r3, 800628a <_svfiprintf_r+0x32>
 8006270:	2140      	movs	r1, #64	; 0x40
 8006272:	f000 fb09 	bl	8006888 <_malloc_r>
 8006276:	6028      	str	r0, [r5, #0]
 8006278:	6128      	str	r0, [r5, #16]
 800627a:	b920      	cbnz	r0, 8006286 <_svfiprintf_r+0x2e>
 800627c:	230c      	movs	r3, #12
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006284:	e0d1      	b.n	800642a <_svfiprintf_r+0x1d2>
 8006286:	2340      	movs	r3, #64	; 0x40
 8006288:	616b      	str	r3, [r5, #20]
 800628a:	2300      	movs	r3, #0
 800628c:	9309      	str	r3, [sp, #36]	; 0x24
 800628e:	2320      	movs	r3, #32
 8006290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006294:	f8cd 800c 	str.w	r8, [sp, #12]
 8006298:	2330      	movs	r3, #48	; 0x30
 800629a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006444 <_svfiprintf_r+0x1ec>
 800629e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062a2:	f04f 0901 	mov.w	r9, #1
 80062a6:	4623      	mov	r3, r4
 80062a8:	469a      	mov	sl, r3
 80062aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ae:	b10a      	cbz	r2, 80062b4 <_svfiprintf_r+0x5c>
 80062b0:	2a25      	cmp	r2, #37	; 0x25
 80062b2:	d1f9      	bne.n	80062a8 <_svfiprintf_r+0x50>
 80062b4:	ebba 0b04 	subs.w	fp, sl, r4
 80062b8:	d00b      	beq.n	80062d2 <_svfiprintf_r+0x7a>
 80062ba:	465b      	mov	r3, fp
 80062bc:	4622      	mov	r2, r4
 80062be:	4629      	mov	r1, r5
 80062c0:	4638      	mov	r0, r7
 80062c2:	f7ff ff6d 	bl	80061a0 <__ssputs_r>
 80062c6:	3001      	adds	r0, #1
 80062c8:	f000 80aa 	beq.w	8006420 <_svfiprintf_r+0x1c8>
 80062cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ce:	445a      	add	r2, fp
 80062d0:	9209      	str	r2, [sp, #36]	; 0x24
 80062d2:	f89a 3000 	ldrb.w	r3, [sl]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80a2 	beq.w	8006420 <_svfiprintf_r+0x1c8>
 80062dc:	2300      	movs	r3, #0
 80062de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e6:	f10a 0a01 	add.w	sl, sl, #1
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	9307      	str	r3, [sp, #28]
 80062ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062f2:	931a      	str	r3, [sp, #104]	; 0x68
 80062f4:	4654      	mov	r4, sl
 80062f6:	2205      	movs	r2, #5
 80062f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fc:	4851      	ldr	r0, [pc, #324]	; (8006444 <_svfiprintf_r+0x1ec>)
 80062fe:	f7f9 ff3f 	bl	8000180 <memchr>
 8006302:	9a04      	ldr	r2, [sp, #16]
 8006304:	b9d8      	cbnz	r0, 800633e <_svfiprintf_r+0xe6>
 8006306:	06d0      	lsls	r0, r2, #27
 8006308:	bf44      	itt	mi
 800630a:	2320      	movmi	r3, #32
 800630c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006310:	0711      	lsls	r1, r2, #28
 8006312:	bf44      	itt	mi
 8006314:	232b      	movmi	r3, #43	; 0x2b
 8006316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800631a:	f89a 3000 	ldrb.w	r3, [sl]
 800631e:	2b2a      	cmp	r3, #42	; 0x2a
 8006320:	d015      	beq.n	800634e <_svfiprintf_r+0xf6>
 8006322:	9a07      	ldr	r2, [sp, #28]
 8006324:	4654      	mov	r4, sl
 8006326:	2000      	movs	r0, #0
 8006328:	f04f 0c0a 	mov.w	ip, #10
 800632c:	4621      	mov	r1, r4
 800632e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006332:	3b30      	subs	r3, #48	; 0x30
 8006334:	2b09      	cmp	r3, #9
 8006336:	d94e      	bls.n	80063d6 <_svfiprintf_r+0x17e>
 8006338:	b1b0      	cbz	r0, 8006368 <_svfiprintf_r+0x110>
 800633a:	9207      	str	r2, [sp, #28]
 800633c:	e014      	b.n	8006368 <_svfiprintf_r+0x110>
 800633e:	eba0 0308 	sub.w	r3, r0, r8
 8006342:	fa09 f303 	lsl.w	r3, r9, r3
 8006346:	4313      	orrs	r3, r2
 8006348:	9304      	str	r3, [sp, #16]
 800634a:	46a2      	mov	sl, r4
 800634c:	e7d2      	b.n	80062f4 <_svfiprintf_r+0x9c>
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	1d19      	adds	r1, r3, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	9103      	str	r1, [sp, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfbb      	ittet	lt
 800635a:	425b      	neglt	r3, r3
 800635c:	f042 0202 	orrlt.w	r2, r2, #2
 8006360:	9307      	strge	r3, [sp, #28]
 8006362:	9307      	strlt	r3, [sp, #28]
 8006364:	bfb8      	it	lt
 8006366:	9204      	strlt	r2, [sp, #16]
 8006368:	7823      	ldrb	r3, [r4, #0]
 800636a:	2b2e      	cmp	r3, #46	; 0x2e
 800636c:	d10c      	bne.n	8006388 <_svfiprintf_r+0x130>
 800636e:	7863      	ldrb	r3, [r4, #1]
 8006370:	2b2a      	cmp	r3, #42	; 0x2a
 8006372:	d135      	bne.n	80063e0 <_svfiprintf_r+0x188>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	9203      	str	r2, [sp, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	bfb8      	it	lt
 8006380:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006384:	3402      	adds	r4, #2
 8006386:	9305      	str	r3, [sp, #20]
 8006388:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006448 <_svfiprintf_r+0x1f0>
 800638c:	7821      	ldrb	r1, [r4, #0]
 800638e:	2203      	movs	r2, #3
 8006390:	4650      	mov	r0, sl
 8006392:	f7f9 fef5 	bl	8000180 <memchr>
 8006396:	b140      	cbz	r0, 80063aa <_svfiprintf_r+0x152>
 8006398:	2340      	movs	r3, #64	; 0x40
 800639a:	eba0 000a 	sub.w	r0, r0, sl
 800639e:	fa03 f000 	lsl.w	r0, r3, r0
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	4303      	orrs	r3, r0
 80063a6:	3401      	adds	r4, #1
 80063a8:	9304      	str	r3, [sp, #16]
 80063aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ae:	4827      	ldr	r0, [pc, #156]	; (800644c <_svfiprintf_r+0x1f4>)
 80063b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063b4:	2206      	movs	r2, #6
 80063b6:	f7f9 fee3 	bl	8000180 <memchr>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d038      	beq.n	8006430 <_svfiprintf_r+0x1d8>
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <_svfiprintf_r+0x1f8>)
 80063c0:	bb1b      	cbnz	r3, 800640a <_svfiprintf_r+0x1b2>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	3307      	adds	r3, #7
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	3308      	adds	r3, #8
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d0:	4433      	add	r3, r6
 80063d2:	9309      	str	r3, [sp, #36]	; 0x24
 80063d4:	e767      	b.n	80062a6 <_svfiprintf_r+0x4e>
 80063d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063da:	460c      	mov	r4, r1
 80063dc:	2001      	movs	r0, #1
 80063de:	e7a5      	b.n	800632c <_svfiprintf_r+0xd4>
 80063e0:	2300      	movs	r3, #0
 80063e2:	3401      	adds	r4, #1
 80063e4:	9305      	str	r3, [sp, #20]
 80063e6:	4619      	mov	r1, r3
 80063e8:	f04f 0c0a 	mov.w	ip, #10
 80063ec:	4620      	mov	r0, r4
 80063ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063f2:	3a30      	subs	r2, #48	; 0x30
 80063f4:	2a09      	cmp	r2, #9
 80063f6:	d903      	bls.n	8006400 <_svfiprintf_r+0x1a8>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0c5      	beq.n	8006388 <_svfiprintf_r+0x130>
 80063fc:	9105      	str	r1, [sp, #20]
 80063fe:	e7c3      	b.n	8006388 <_svfiprintf_r+0x130>
 8006400:	fb0c 2101 	mla	r1, ip, r1, r2
 8006404:	4604      	mov	r4, r0
 8006406:	2301      	movs	r3, #1
 8006408:	e7f0      	b.n	80063ec <_svfiprintf_r+0x194>
 800640a:	ab03      	add	r3, sp, #12
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	462a      	mov	r2, r5
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <_svfiprintf_r+0x1fc>)
 8006412:	a904      	add	r1, sp, #16
 8006414:	4638      	mov	r0, r7
 8006416:	f3af 8000 	nop.w
 800641a:	1c42      	adds	r2, r0, #1
 800641c:	4606      	mov	r6, r0
 800641e:	d1d6      	bne.n	80063ce <_svfiprintf_r+0x176>
 8006420:	89ab      	ldrh	r3, [r5, #12]
 8006422:	065b      	lsls	r3, r3, #25
 8006424:	f53f af2c 	bmi.w	8006280 <_svfiprintf_r+0x28>
 8006428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800642a:	b01d      	add	sp, #116	; 0x74
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	ab03      	add	r3, sp, #12
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	462a      	mov	r2, r5
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <_svfiprintf_r+0x1fc>)
 8006438:	a904      	add	r1, sp, #16
 800643a:	4638      	mov	r0, r7
 800643c:	f000 f87a 	bl	8006534 <_printf_i>
 8006440:	e7eb      	b.n	800641a <_svfiprintf_r+0x1c2>
 8006442:	bf00      	nop
 8006444:	08006b9c 	.word	0x08006b9c
 8006448:	08006ba2 	.word	0x08006ba2
 800644c:	08006ba6 	.word	0x08006ba6
 8006450:	00000000 	.word	0x00000000
 8006454:	080061a1 	.word	0x080061a1

08006458 <_printf_common>:
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	4616      	mov	r6, r2
 800645e:	4699      	mov	r9, r3
 8006460:	688a      	ldr	r2, [r1, #8]
 8006462:	690b      	ldr	r3, [r1, #16]
 8006464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006468:	4293      	cmp	r3, r2
 800646a:	bfb8      	it	lt
 800646c:	4613      	movlt	r3, r2
 800646e:	6033      	str	r3, [r6, #0]
 8006470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006474:	4607      	mov	r7, r0
 8006476:	460c      	mov	r4, r1
 8006478:	b10a      	cbz	r2, 800647e <_printf_common+0x26>
 800647a:	3301      	adds	r3, #1
 800647c:	6033      	str	r3, [r6, #0]
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	0699      	lsls	r1, r3, #26
 8006482:	bf42      	ittt	mi
 8006484:	6833      	ldrmi	r3, [r6, #0]
 8006486:	3302      	addmi	r3, #2
 8006488:	6033      	strmi	r3, [r6, #0]
 800648a:	6825      	ldr	r5, [r4, #0]
 800648c:	f015 0506 	ands.w	r5, r5, #6
 8006490:	d106      	bne.n	80064a0 <_printf_common+0x48>
 8006492:	f104 0a19 	add.w	sl, r4, #25
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	6832      	ldr	r2, [r6, #0]
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	42ab      	cmp	r3, r5
 800649e:	dc26      	bgt.n	80064ee <_printf_common+0x96>
 80064a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064a4:	1e13      	subs	r3, r2, #0
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	bf18      	it	ne
 80064aa:	2301      	movne	r3, #1
 80064ac:	0692      	lsls	r2, r2, #26
 80064ae:	d42b      	bmi.n	8006508 <_printf_common+0xb0>
 80064b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064b4:	4649      	mov	r1, r9
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	3001      	adds	r0, #1
 80064bc:	d01e      	beq.n	80064fc <_printf_common+0xa4>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	68e5      	ldr	r5, [r4, #12]
 80064c2:	6832      	ldr	r2, [r6, #0]
 80064c4:	f003 0306 	and.w	r3, r3, #6
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	bf08      	it	eq
 80064cc:	1aad      	subeq	r5, r5, r2
 80064ce:	68a3      	ldr	r3, [r4, #8]
 80064d0:	6922      	ldr	r2, [r4, #16]
 80064d2:	bf0c      	ite	eq
 80064d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064d8:	2500      	movne	r5, #0
 80064da:	4293      	cmp	r3, r2
 80064dc:	bfc4      	itt	gt
 80064de:	1a9b      	subgt	r3, r3, r2
 80064e0:	18ed      	addgt	r5, r5, r3
 80064e2:	2600      	movs	r6, #0
 80064e4:	341a      	adds	r4, #26
 80064e6:	42b5      	cmp	r5, r6
 80064e8:	d11a      	bne.n	8006520 <_printf_common+0xc8>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e008      	b.n	8006500 <_printf_common+0xa8>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4652      	mov	r2, sl
 80064f2:	4649      	mov	r1, r9
 80064f4:	4638      	mov	r0, r7
 80064f6:	47c0      	blx	r8
 80064f8:	3001      	adds	r0, #1
 80064fa:	d103      	bne.n	8006504 <_printf_common+0xac>
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006504:	3501      	adds	r5, #1
 8006506:	e7c6      	b.n	8006496 <_printf_common+0x3e>
 8006508:	18e1      	adds	r1, r4, r3
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	2030      	movs	r0, #48	; 0x30
 800650e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006512:	4422      	add	r2, r4
 8006514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800651c:	3302      	adds	r3, #2
 800651e:	e7c7      	b.n	80064b0 <_printf_common+0x58>
 8006520:	2301      	movs	r3, #1
 8006522:	4622      	mov	r2, r4
 8006524:	4649      	mov	r1, r9
 8006526:	4638      	mov	r0, r7
 8006528:	47c0      	blx	r8
 800652a:	3001      	adds	r0, #1
 800652c:	d0e6      	beq.n	80064fc <_printf_common+0xa4>
 800652e:	3601      	adds	r6, #1
 8006530:	e7d9      	b.n	80064e6 <_printf_common+0x8e>
	...

08006534 <_printf_i>:
 8006534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	7e0f      	ldrb	r7, [r1, #24]
 800653a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800653c:	2f78      	cmp	r7, #120	; 0x78
 800653e:	4691      	mov	r9, r2
 8006540:	4680      	mov	r8, r0
 8006542:	460c      	mov	r4, r1
 8006544:	469a      	mov	sl, r3
 8006546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800654a:	d807      	bhi.n	800655c <_printf_i+0x28>
 800654c:	2f62      	cmp	r7, #98	; 0x62
 800654e:	d80a      	bhi.n	8006566 <_printf_i+0x32>
 8006550:	2f00      	cmp	r7, #0
 8006552:	f000 80d8 	beq.w	8006706 <_printf_i+0x1d2>
 8006556:	2f58      	cmp	r7, #88	; 0x58
 8006558:	f000 80a3 	beq.w	80066a2 <_printf_i+0x16e>
 800655c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006564:	e03a      	b.n	80065dc <_printf_i+0xa8>
 8006566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800656a:	2b15      	cmp	r3, #21
 800656c:	d8f6      	bhi.n	800655c <_printf_i+0x28>
 800656e:	a101      	add	r1, pc, #4	; (adr r1, 8006574 <_printf_i+0x40>)
 8006570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006574:	080065cd 	.word	0x080065cd
 8006578:	080065e1 	.word	0x080065e1
 800657c:	0800655d 	.word	0x0800655d
 8006580:	0800655d 	.word	0x0800655d
 8006584:	0800655d 	.word	0x0800655d
 8006588:	0800655d 	.word	0x0800655d
 800658c:	080065e1 	.word	0x080065e1
 8006590:	0800655d 	.word	0x0800655d
 8006594:	0800655d 	.word	0x0800655d
 8006598:	0800655d 	.word	0x0800655d
 800659c:	0800655d 	.word	0x0800655d
 80065a0:	080066ed 	.word	0x080066ed
 80065a4:	08006611 	.word	0x08006611
 80065a8:	080066cf 	.word	0x080066cf
 80065ac:	0800655d 	.word	0x0800655d
 80065b0:	0800655d 	.word	0x0800655d
 80065b4:	0800670f 	.word	0x0800670f
 80065b8:	0800655d 	.word	0x0800655d
 80065bc:	08006611 	.word	0x08006611
 80065c0:	0800655d 	.word	0x0800655d
 80065c4:	0800655d 	.word	0x0800655d
 80065c8:	080066d7 	.word	0x080066d7
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	1d1a      	adds	r2, r3, #4
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	602a      	str	r2, [r5, #0]
 80065d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065dc:	2301      	movs	r3, #1
 80065de:	e0a3      	b.n	8006728 <_printf_i+0x1f4>
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	6829      	ldr	r1, [r5, #0]
 80065e4:	0606      	lsls	r6, r0, #24
 80065e6:	f101 0304 	add.w	r3, r1, #4
 80065ea:	d50a      	bpl.n	8006602 <_printf_i+0xce>
 80065ec:	680e      	ldr	r6, [r1, #0]
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	2e00      	cmp	r6, #0
 80065f2:	da03      	bge.n	80065fc <_printf_i+0xc8>
 80065f4:	232d      	movs	r3, #45	; 0x2d
 80065f6:	4276      	negs	r6, r6
 80065f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fc:	485e      	ldr	r0, [pc, #376]	; (8006778 <_printf_i+0x244>)
 80065fe:	230a      	movs	r3, #10
 8006600:	e019      	b.n	8006636 <_printf_i+0x102>
 8006602:	680e      	ldr	r6, [r1, #0]
 8006604:	602b      	str	r3, [r5, #0]
 8006606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800660a:	bf18      	it	ne
 800660c:	b236      	sxthne	r6, r6
 800660e:	e7ef      	b.n	80065f0 <_printf_i+0xbc>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	1d19      	adds	r1, r3, #4
 8006616:	6029      	str	r1, [r5, #0]
 8006618:	0601      	lsls	r1, r0, #24
 800661a:	d501      	bpl.n	8006620 <_printf_i+0xec>
 800661c:	681e      	ldr	r6, [r3, #0]
 800661e:	e002      	b.n	8006626 <_printf_i+0xf2>
 8006620:	0646      	lsls	r6, r0, #25
 8006622:	d5fb      	bpl.n	800661c <_printf_i+0xe8>
 8006624:	881e      	ldrh	r6, [r3, #0]
 8006626:	4854      	ldr	r0, [pc, #336]	; (8006778 <_printf_i+0x244>)
 8006628:	2f6f      	cmp	r7, #111	; 0x6f
 800662a:	bf0c      	ite	eq
 800662c:	2308      	moveq	r3, #8
 800662e:	230a      	movne	r3, #10
 8006630:	2100      	movs	r1, #0
 8006632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006636:	6865      	ldr	r5, [r4, #4]
 8006638:	60a5      	str	r5, [r4, #8]
 800663a:	2d00      	cmp	r5, #0
 800663c:	bfa2      	ittt	ge
 800663e:	6821      	ldrge	r1, [r4, #0]
 8006640:	f021 0104 	bicge.w	r1, r1, #4
 8006644:	6021      	strge	r1, [r4, #0]
 8006646:	b90e      	cbnz	r6, 800664c <_printf_i+0x118>
 8006648:	2d00      	cmp	r5, #0
 800664a:	d04d      	beq.n	80066e8 <_printf_i+0x1b4>
 800664c:	4615      	mov	r5, r2
 800664e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006652:	fb03 6711 	mls	r7, r3, r1, r6
 8006656:	5dc7      	ldrb	r7, [r0, r7]
 8006658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800665c:	4637      	mov	r7, r6
 800665e:	42bb      	cmp	r3, r7
 8006660:	460e      	mov	r6, r1
 8006662:	d9f4      	bls.n	800664e <_printf_i+0x11a>
 8006664:	2b08      	cmp	r3, #8
 8006666:	d10b      	bne.n	8006680 <_printf_i+0x14c>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	07de      	lsls	r6, r3, #31
 800666c:	d508      	bpl.n	8006680 <_printf_i+0x14c>
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	6861      	ldr	r1, [r4, #4]
 8006672:	4299      	cmp	r1, r3
 8006674:	bfde      	ittt	le
 8006676:	2330      	movle	r3, #48	; 0x30
 8006678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800667c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006680:	1b52      	subs	r2, r2, r5
 8006682:	6122      	str	r2, [r4, #16]
 8006684:	f8cd a000 	str.w	sl, [sp]
 8006688:	464b      	mov	r3, r9
 800668a:	aa03      	add	r2, sp, #12
 800668c:	4621      	mov	r1, r4
 800668e:	4640      	mov	r0, r8
 8006690:	f7ff fee2 	bl	8006458 <_printf_common>
 8006694:	3001      	adds	r0, #1
 8006696:	d14c      	bne.n	8006732 <_printf_i+0x1fe>
 8006698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800669c:	b004      	add	sp, #16
 800669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a2:	4835      	ldr	r0, [pc, #212]	; (8006778 <_printf_i+0x244>)
 80066a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066a8:	6829      	ldr	r1, [r5, #0]
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80066b0:	6029      	str	r1, [r5, #0]
 80066b2:	061d      	lsls	r5, r3, #24
 80066b4:	d514      	bpl.n	80066e0 <_printf_i+0x1ac>
 80066b6:	07df      	lsls	r7, r3, #31
 80066b8:	bf44      	itt	mi
 80066ba:	f043 0320 	orrmi.w	r3, r3, #32
 80066be:	6023      	strmi	r3, [r4, #0]
 80066c0:	b91e      	cbnz	r6, 80066ca <_printf_i+0x196>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	f023 0320 	bic.w	r3, r3, #32
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	2310      	movs	r3, #16
 80066cc:	e7b0      	b.n	8006630 <_printf_i+0xfc>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	f043 0320 	orr.w	r3, r3, #32
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	2378      	movs	r3, #120	; 0x78
 80066d8:	4828      	ldr	r0, [pc, #160]	; (800677c <_printf_i+0x248>)
 80066da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066de:	e7e3      	b.n	80066a8 <_printf_i+0x174>
 80066e0:	0659      	lsls	r1, r3, #25
 80066e2:	bf48      	it	mi
 80066e4:	b2b6      	uxthmi	r6, r6
 80066e6:	e7e6      	b.n	80066b6 <_printf_i+0x182>
 80066e8:	4615      	mov	r5, r2
 80066ea:	e7bb      	b.n	8006664 <_printf_i+0x130>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	6826      	ldr	r6, [r4, #0]
 80066f0:	6961      	ldr	r1, [r4, #20]
 80066f2:	1d18      	adds	r0, r3, #4
 80066f4:	6028      	str	r0, [r5, #0]
 80066f6:	0635      	lsls	r5, r6, #24
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	d501      	bpl.n	8006700 <_printf_i+0x1cc>
 80066fc:	6019      	str	r1, [r3, #0]
 80066fe:	e002      	b.n	8006706 <_printf_i+0x1d2>
 8006700:	0670      	lsls	r0, r6, #25
 8006702:	d5fb      	bpl.n	80066fc <_printf_i+0x1c8>
 8006704:	8019      	strh	r1, [r3, #0]
 8006706:	2300      	movs	r3, #0
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	4615      	mov	r5, r2
 800670c:	e7ba      	b.n	8006684 <_printf_i+0x150>
 800670e:	682b      	ldr	r3, [r5, #0]
 8006710:	1d1a      	adds	r2, r3, #4
 8006712:	602a      	str	r2, [r5, #0]
 8006714:	681d      	ldr	r5, [r3, #0]
 8006716:	6862      	ldr	r2, [r4, #4]
 8006718:	2100      	movs	r1, #0
 800671a:	4628      	mov	r0, r5
 800671c:	f7f9 fd30 	bl	8000180 <memchr>
 8006720:	b108      	cbz	r0, 8006726 <_printf_i+0x1f2>
 8006722:	1b40      	subs	r0, r0, r5
 8006724:	6060      	str	r0, [r4, #4]
 8006726:	6863      	ldr	r3, [r4, #4]
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	2300      	movs	r3, #0
 800672c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006730:	e7a8      	b.n	8006684 <_printf_i+0x150>
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	462a      	mov	r2, r5
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	47d0      	blx	sl
 800673c:	3001      	adds	r0, #1
 800673e:	d0ab      	beq.n	8006698 <_printf_i+0x164>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	079b      	lsls	r3, r3, #30
 8006744:	d413      	bmi.n	800676e <_printf_i+0x23a>
 8006746:	68e0      	ldr	r0, [r4, #12]
 8006748:	9b03      	ldr	r3, [sp, #12]
 800674a:	4298      	cmp	r0, r3
 800674c:	bfb8      	it	lt
 800674e:	4618      	movlt	r0, r3
 8006750:	e7a4      	b.n	800669c <_printf_i+0x168>
 8006752:	2301      	movs	r3, #1
 8006754:	4632      	mov	r2, r6
 8006756:	4649      	mov	r1, r9
 8006758:	4640      	mov	r0, r8
 800675a:	47d0      	blx	sl
 800675c:	3001      	adds	r0, #1
 800675e:	d09b      	beq.n	8006698 <_printf_i+0x164>
 8006760:	3501      	adds	r5, #1
 8006762:	68e3      	ldr	r3, [r4, #12]
 8006764:	9903      	ldr	r1, [sp, #12]
 8006766:	1a5b      	subs	r3, r3, r1
 8006768:	42ab      	cmp	r3, r5
 800676a:	dcf2      	bgt.n	8006752 <_printf_i+0x21e>
 800676c:	e7eb      	b.n	8006746 <_printf_i+0x212>
 800676e:	2500      	movs	r5, #0
 8006770:	f104 0619 	add.w	r6, r4, #25
 8006774:	e7f5      	b.n	8006762 <_printf_i+0x22e>
 8006776:	bf00      	nop
 8006778:	08006bad 	.word	0x08006bad
 800677c:	08006bbe 	.word	0x08006bbe

08006780 <memmove>:
 8006780:	4288      	cmp	r0, r1
 8006782:	b510      	push	{r4, lr}
 8006784:	eb01 0402 	add.w	r4, r1, r2
 8006788:	d902      	bls.n	8006790 <memmove+0x10>
 800678a:	4284      	cmp	r4, r0
 800678c:	4623      	mov	r3, r4
 800678e:	d807      	bhi.n	80067a0 <memmove+0x20>
 8006790:	1e43      	subs	r3, r0, #1
 8006792:	42a1      	cmp	r1, r4
 8006794:	d008      	beq.n	80067a8 <memmove+0x28>
 8006796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800679a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679e:	e7f8      	b.n	8006792 <memmove+0x12>
 80067a0:	4402      	add	r2, r0
 80067a2:	4601      	mov	r1, r0
 80067a4:	428a      	cmp	r2, r1
 80067a6:	d100      	bne.n	80067aa <memmove+0x2a>
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067b2:	e7f7      	b.n	80067a4 <memmove+0x24>

080067b4 <_free_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4605      	mov	r5, r0
 80067b8:	2900      	cmp	r1, #0
 80067ba:	d041      	beq.n	8006840 <_free_r+0x8c>
 80067bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c0:	1f0c      	subs	r4, r1, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bfb8      	it	lt
 80067c6:	18e4      	addlt	r4, r4, r3
 80067c8:	f000 f912 	bl	80069f0 <__malloc_lock>
 80067cc:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <_free_r+0x90>)
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	b933      	cbnz	r3, 80067e0 <_free_r+0x2c>
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	6014      	str	r4, [r2, #0]
 80067d6:	4628      	mov	r0, r5
 80067d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067dc:	f000 b90e 	b.w	80069fc <__malloc_unlock>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d908      	bls.n	80067f6 <_free_r+0x42>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	1821      	adds	r1, r4, r0
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf01      	itttt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	1809      	addeq	r1, r1, r0
 80067f2:	6021      	streq	r1, [r4, #0]
 80067f4:	e7ed      	b.n	80067d2 <_free_r+0x1e>
 80067f6:	461a      	mov	r2, r3
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b10b      	cbz	r3, 8006800 <_free_r+0x4c>
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d9fa      	bls.n	80067f6 <_free_r+0x42>
 8006800:	6811      	ldr	r1, [r2, #0]
 8006802:	1850      	adds	r0, r2, r1
 8006804:	42a0      	cmp	r0, r4
 8006806:	d10b      	bne.n	8006820 <_free_r+0x6c>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	4401      	add	r1, r0
 800680c:	1850      	adds	r0, r2, r1
 800680e:	4283      	cmp	r3, r0
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	d1e0      	bne.n	80067d6 <_free_r+0x22>
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	6053      	str	r3, [r2, #4]
 800681a:	4401      	add	r1, r0
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	e7da      	b.n	80067d6 <_free_r+0x22>
 8006820:	d902      	bls.n	8006828 <_free_r+0x74>
 8006822:	230c      	movs	r3, #12
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	e7d6      	b.n	80067d6 <_free_r+0x22>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	1821      	adds	r1, r4, r0
 800682c:	428b      	cmp	r3, r1
 800682e:	bf04      	itt	eq
 8006830:	6819      	ldreq	r1, [r3, #0]
 8006832:	685b      	ldreq	r3, [r3, #4]
 8006834:	6063      	str	r3, [r4, #4]
 8006836:	bf04      	itt	eq
 8006838:	1809      	addeq	r1, r1, r0
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	6054      	str	r4, [r2, #4]
 800683e:	e7ca      	b.n	80067d6 <_free_r+0x22>
 8006840:	bd38      	pop	{r3, r4, r5, pc}
 8006842:	bf00      	nop
 8006844:	20000284 	.word	0x20000284

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0e      	ldr	r6, [pc, #56]	; (8006884 <sbrk_aligned+0x3c>)
 800684c:	460c      	mov	r4, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	4605      	mov	r5, r0
 8006852:	b911      	cbnz	r1, 800685a <sbrk_aligned+0x12>
 8006854:	f000 f8bc 	bl	80069d0 <_sbrk_r>
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f8b7 	bl	80069d0 <_sbrk_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <sbrk_aligned+0x34>
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d007      	beq.n	8006880 <sbrk_aligned+0x38>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f8ac 	bl	80069d0 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d101      	bne.n	8006880 <sbrk_aligned+0x38>
 800687c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	20000288 	.word	0x20000288

08006888 <_malloc_r>:
 8006888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4607      	mov	r7, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d905      	bls.n	80068b0 <_malloc_r+0x28>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2600      	movs	r6, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	4e2e      	ldr	r6, [pc, #184]	; (800696c <_malloc_r+0xe4>)
 80068b2:	f000 f89d 	bl	80069f0 <__malloc_lock>
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	461c      	mov	r4, r3
 80068ba:	bb34      	cbnz	r4, 800690a <_malloc_r+0x82>
 80068bc:	4629      	mov	r1, r5
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ffc2 	bl	8006848 <sbrk_aligned>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	4604      	mov	r4, r0
 80068c8:	d14d      	bne.n	8006966 <_malloc_r+0xde>
 80068ca:	6834      	ldr	r4, [r6, #0]
 80068cc:	4626      	mov	r6, r4
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d140      	bne.n	8006954 <_malloc_r+0xcc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	4631      	mov	r1, r6
 80068d6:	4638      	mov	r0, r7
 80068d8:	eb04 0803 	add.w	r8, r4, r3
 80068dc:	f000 f878 	bl	80069d0 <_sbrk_r>
 80068e0:	4580      	cmp	r8, r0
 80068e2:	d13a      	bne.n	800695a <_malloc_r+0xd2>
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	3503      	adds	r5, #3
 80068e8:	1a6d      	subs	r5, r5, r1
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	4629      	mov	r1, r5
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ffa5 	bl	8006848 <sbrk_aligned>
 80068fe:	3001      	adds	r0, #1
 8006900:	d02b      	beq.n	800695a <_malloc_r+0xd2>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	442b      	add	r3, r5
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e00e      	b.n	8006928 <_malloc_r+0xa0>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	1b52      	subs	r2, r2, r5
 800690e:	d41e      	bmi.n	800694e <_malloc_r+0xc6>
 8006910:	2a0b      	cmp	r2, #11
 8006912:	d916      	bls.n	8006942 <_malloc_r+0xba>
 8006914:	1961      	adds	r1, r4, r5
 8006916:	42a3      	cmp	r3, r4
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	bf18      	it	ne
 800691c:	6059      	strne	r1, [r3, #4]
 800691e:	6863      	ldr	r3, [r4, #4]
 8006920:	bf08      	it	eq
 8006922:	6031      	streq	r1, [r6, #0]
 8006924:	5162      	str	r2, [r4, r5]
 8006926:	604b      	str	r3, [r1, #4]
 8006928:	4638      	mov	r0, r7
 800692a:	f104 060b 	add.w	r6, r4, #11
 800692e:	f000 f865 	bl	80069fc <__malloc_unlock>
 8006932:	f026 0607 	bic.w	r6, r6, #7
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	1af2      	subs	r2, r6, r3
 800693a:	d0b6      	beq.n	80068aa <_malloc_r+0x22>
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	50a3      	str	r3, [r4, r2]
 8006940:	e7b3      	b.n	80068aa <_malloc_r+0x22>
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	42a3      	cmp	r3, r4
 8006946:	bf0c      	ite	eq
 8006948:	6032      	streq	r2, [r6, #0]
 800694a:	605a      	strne	r2, [r3, #4]
 800694c:	e7ec      	b.n	8006928 <_malloc_r+0xa0>
 800694e:	4623      	mov	r3, r4
 8006950:	6864      	ldr	r4, [r4, #4]
 8006952:	e7b2      	b.n	80068ba <_malloc_r+0x32>
 8006954:	4634      	mov	r4, r6
 8006956:	6876      	ldr	r6, [r6, #4]
 8006958:	e7b9      	b.n	80068ce <_malloc_r+0x46>
 800695a:	230c      	movs	r3, #12
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4638      	mov	r0, r7
 8006960:	f000 f84c 	bl	80069fc <__malloc_unlock>
 8006964:	e7a1      	b.n	80068aa <_malloc_r+0x22>
 8006966:	6025      	str	r5, [r4, #0]
 8006968:	e7de      	b.n	8006928 <_malloc_r+0xa0>
 800696a:	bf00      	nop
 800696c:	20000284 	.word	0x20000284

08006970 <_realloc_r>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4680      	mov	r8, r0
 8006976:	4614      	mov	r4, r2
 8006978:	460e      	mov	r6, r1
 800697a:	b921      	cbnz	r1, 8006986 <_realloc_r+0x16>
 800697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	4611      	mov	r1, r2
 8006982:	f7ff bf81 	b.w	8006888 <_malloc_r>
 8006986:	b92a      	cbnz	r2, 8006994 <_realloc_r+0x24>
 8006988:	f7ff ff14 	bl	80067b4 <_free_r>
 800698c:	4625      	mov	r5, r4
 800698e:	4628      	mov	r0, r5
 8006990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006994:	f000 f838 	bl	8006a08 <_malloc_usable_size_r>
 8006998:	4284      	cmp	r4, r0
 800699a:	4607      	mov	r7, r0
 800699c:	d802      	bhi.n	80069a4 <_realloc_r+0x34>
 800699e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069a2:	d812      	bhi.n	80069ca <_realloc_r+0x5a>
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff ff6e 	bl	8006888 <_malloc_r>
 80069ac:	4605      	mov	r5, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0ed      	beq.n	800698e <_realloc_r+0x1e>
 80069b2:	42bc      	cmp	r4, r7
 80069b4:	4622      	mov	r2, r4
 80069b6:	4631      	mov	r1, r6
 80069b8:	bf28      	it	cs
 80069ba:	463a      	movcs	r2, r7
 80069bc:	f7ff fba6 	bl	800610c <memcpy>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7ff fef6 	bl	80067b4 <_free_r>
 80069c8:	e7e1      	b.n	800698e <_realloc_r+0x1e>
 80069ca:	4635      	mov	r5, r6
 80069cc:	e7df      	b.n	800698e <_realloc_r+0x1e>
	...

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_sbrk_r+0x1c>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fa fe3c 	bl	8001658 <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	2000028c 	.word	0x2000028c

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f000 b811 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000290 	.word	0x20000290

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f000 b80c 	b.w	8006a1a <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000290 	.word	0x20000290

08006a08 <_malloc_usable_size_r>:
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f18      	subs	r0, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfbc      	itt	lt
 8006a12:	580b      	ldrlt	r3, [r1, r0]
 8006a14:	18c0      	addlt	r0, r0, r3
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr

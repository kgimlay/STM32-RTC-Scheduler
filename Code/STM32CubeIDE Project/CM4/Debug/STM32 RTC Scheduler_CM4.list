
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b2c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007074  08007074  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800707c  0800707c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000070  080070f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  080070f4  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001607d  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f3  00000000  00000000  00036117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea2b  00000000  00000000  0003bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d30  00000000  00000000  0005a7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b90a6  00000000  00000000  00070523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001295c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca0  00000000  00000000  0012961c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006c54 	.word	0x08006c54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006c54 	.word	0x08006c54

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000550:	f023 0218 	bic.w	r2, r3, #24
 8000554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *         @arg @ref LL_DBGMCU_APB1_GRP1_I2C3_STOP
  *         @arg @ref LL_DBGMCU_APB1_GRP1_LPTIM1_STOP
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB1FZR1, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 80005a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e0042000 	.word	0xe0042000

080005c0 <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80005c8:	f003 ff24 	bl	8004414 <calendar_AlarmA_ISR>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <event_start>:

void event_start(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	activate_led(GPIO_PIN_15);
 80005d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005dc:	f004 fc94 	bl	8004f08 <activate_led>
	// note: it is not recommended to send over serial while in ISR!!
	desktopAppSession_enqueueMessage("MESG", "EVENT START\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 80005e0:	4903      	ldr	r1, [pc, #12]	; (80005f0 <event_start+0x1c>)
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <event_start+0x20>)
 80005e4:	f004 fe62 	bl	80052ac <desktopAppSession_enqueueMessage>
	desktopAppSession_update();
 80005e8:	f004 fe48 	bl	800527c <desktopAppSession_update>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08006c6c 	.word	0x08006c6c
 80005f4:	08006cb0 	.word	0x08006cb0

080005f8 <event_end>:

void event_end(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	deactivate_led(GPIO_PIN_15);
 80005fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000600:	f004 fcb6 	bl	8004f70 <deactivate_led>
	// note: it is not recommended to send over serial while in ISR!!
	desktopAppSession_enqueueMessage("MESG", "EVENT END\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 8000604:	4903      	ldr	r1, [pc, #12]	; (8000614 <event_end+0x1c>)
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <event_end+0x20>)
 8000608:	f004 fe50 	bl	80052ac <desktopAppSession_enqueueMessage>
	desktopAppSession_update();
 800060c:	f004 fe36 	bl	800527c <desktopAppSession_update>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	08006cb8 	.word	0x08006cb8
 8000618:	08006cb0 	.word	0x08006cb0

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09c      	sub	sp, #112	; 0x70
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fb6d 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8bd 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fa0d 	bl	8000a48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f9b5 	bl	800099c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000632:	f000 f915 	bl	8000860 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_RTC();	// freezes RTC during debugging pause
 8000636:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800063a:	f7ff ffaf 	bl	800059c <LL_DBGMCU_APB1_GRP1_FreezePeriph>
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800063e:	2001      	movs	r0, #1
 8000640:	f000 ff4e 	bl	80014e0 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  desktopAppSession_init(&huart2);
 8000644:	4852      	ldr	r0, [pc, #328]	; (8000790 <main+0x174>)
 8000646:	f004 fdbb 	bl	80051c0 <desktopAppSession_init>

  // initialize calendar
  calendar_init(&hrtc);
 800064a:	4852      	ldr	r0, [pc, #328]	; (8000794 <main+0x178>)
 800064c:	f003 fe0e 	bl	800426c <calendar_init>

  // set calendar time
  DateTime now = {
 8000650:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 800065a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800065e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000662:	f003 fe47 	bl	80042f4 <calendar_setDateTime>

  // start calendar
//  calendar_start();

  // begin listening for messages from desktop
  if (desktopAppSession_start() == SESSION_OKAY)
 8000666:	f004 fde1 	bl	800522c <desktopAppSession_start>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d103      	bne.n	8000678 <main+0x5c>
  {
	  activate_led(GREEN_LED);
 8000670:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000674:	f004 fc48 	bl	8004f08 <activate_led>
  }

  char messageHeader[UART_PACKET_HEADER_SIZE];
  char messageBody[UART_PACKET_PAYLOAD_SIZE];
  enum AppActions commandCode;
  DateTime newDateTime = {0};
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	809a      	strh	r2, [r3, #4]
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_update();
 8000682:	f003 fea5 	bl	80043d0 <calendar_update>

	  // try to open connection if not present
	  if (desktopAppSession_start() == SESSION_OKAY)
 8000686:	f004 fdd1 	bl	800522c <desktopAppSession_start>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <main+0x7c>
	  {
		  activate_led(GREEN_LED);
 8000690:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000694:	f004 fc38 	bl	8004f08 <activate_led>
	  }

	  // if message present, handle message
	  if (desktopAppSession_update() != SESSION_OKAY)
 8000698:	f004 fdf0 	bl	800527c <desktopAppSession_update>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <main+0x8e>
	  {
		  activate_led(RED_LED);
 80006a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80006a6:	f004 fc2f 	bl	8004f08 <activate_led>
	  }

	  // get command if present
	  if (desktopAppSession_dequeueMessage(messageHeader, messageBody) == SESSION_OKAY)
 80006aa:	f107 0220 	add.w	r2, r7, #32
 80006ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fe15 	bl	80052e4 <desktopAppSession_dequeueMessage>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1e0      	bne.n	8000682 <main+0x66>
	  {
		  // execute command
		  commandCode = code_to_appActions(messageHeader);
 80006c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fc73 	bl	8004fb0 <code_to_appActions>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  // set date/time
		  if (commandCode == SET_CALENDAR_DATETIME)
 80006d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10e      	bne.n	80006f6 <main+0xda>
		  {
			  parseDateTime(&newDateTime, messageBody);
 80006d8:	f107 0220 	add.w	r2, r7, #32
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fcc2 	bl	800506c <parseDateTime>
			  calendar_setDateTime(newDateTime);
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f0:	f003 fe00 	bl	80042f4 <calendar_setDateTime>
 80006f4:	e7c5      	b.n	8000682 <main+0x66>
		  }

		  // get date/time
		  else if (commandCode == GET_CALENDAR_DATETIME)
 80006f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d117      	bne.n	800072e <main+0x112>
		  {
			  calendar_getDateTime(&newDateTime);
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fe16 	bl	8004334 <calendar_getDateTime>
			  formatDateTime(messageBody, &newDateTime);
 8000708:	f107 0218 	add.w	r2, r7, #24
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fcd2 	bl	80050bc <formatDateTime>
			  memcpy(messageHeader, "ECHO", UART_PACKET_HEADER_SIZE*sizeof(char));
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <main+0x17c>)
 800071a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  desktopAppSession_enqueueMessage(messageHeader, messageBody);
 800071c:	f107 0220 	add.w	r2, r7, #32
 8000720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fdc0 	bl	80052ac <desktopAppSession_enqueueMessage>
 800072c:	e7a9      	b.n	8000682 <main+0x66>
		  }

		  // add event
		  else if (commandCode == ADD_CALENDAR_EVENT)
 800072e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000732:	2b03      	cmp	r3, #3
 8000734:	d118      	bne.n	8000768 <main+0x14c>
		  {
			  struct CalendarEvent tempEvent = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
			  parseEvent(&tempEvent, messageBody);
 8000744:	f107 0220 	add.w	r2, r7, #32
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f004 fceb 	bl	8005128 <parseEvent>
			  tempEvent.start_callback = &(event_start);
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0x180>)
 8000754:	613b      	str	r3, [r7, #16]
			  tempEvent.end_callback = &(event_end);
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <main+0x184>)
 8000758:	617b      	str	r3, [r7, #20]
			  calendar_addEvent(tempEvent);
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000762:	f003 fe09 	bl	8004378 <calendar_addEvent>
 8000766:	e78c      	b.n	8000682 <main+0x66>
		  }

		  // get/view event
		  else if (commandCode == GET_CALENDAR_EVENT)
 8000768:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800076c:	2b04      	cmp	r3, #4
 800076e:	d088      	beq.n	8000682 <main+0x66>
		  {

		  }

		  // remove event
		  else if (commandCode == REMOVE_CALENDAR_EVENT)
 8000770:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000774:	2b05      	cmp	r3, #5
 8000776:	d084      	beq.n	8000682 <main+0x66>
		  {

		  }

		  // clear all events
		  else if (commandCode == CLEAR_CALENDAR_EVENTS)
 8000778:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800077c:	2b06      	cmp	r3, #6
 800077e:	d080      	beq.n	8000682 <main+0x66>
		  {

		  }

		  // start calendar
		  else if (commandCode == START_CALENDAR)
 8000780:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000784:	2b07      	cmp	r3, #7
 8000786:	f47f af7c 	bne.w	8000682 <main+0x66>
		  {
			  calendar_start();
 800078a:	f003 fd95 	bl	80042b8 <calendar_start>
	  calendar_update();
 800078e:	e778      	b.n	8000682 <main+0x66>
 8000790:	200000c4 	.word	0x200000c4
 8000794:	2000008c 	.word	0x2000008c
 8000798:	4f484345 	.word	0x4f484345
 800079c:	080005d5 	.word	0x080005d5
 80007a0:	080005f9 	.word	0x080005f9

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09a      	sub	sp, #104	; 0x68
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2248      	movs	r2, #72	; 0x48
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 f90c 	bl	80059d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ca:	f000 fe61 	bl	8001490 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff feb6 	bl	8000540 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <SystemClock_Config+0xb8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007dc:	4a1f      	ldr	r2, [pc, #124]	; (800085c <SystemClock_Config+0xb8>)
 80007de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <SystemClock_Config+0xb8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007f0:	232c      	movs	r3, #44	; 0x2c
 80007f2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f4:	2381      	movs	r3, #129	; 0x81
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f925 	bl	8001a64 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000820:	f000 f91f 	bl	8000a62 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000824:	236f      	movs	r3, #111	; 0x6f
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fc8f 	bl	8002168 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000850:	f000 f907 	bl	8000a62 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3768      	adds	r7, #104	; 0x68
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58000400 	.word	0x58000400

08000860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b092      	sub	sp, #72	; 0x48
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	222c      	movs	r2, #44	; 0x2c
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f005 f8a5 	bl	80059d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000886:	4b43      	ldr	r3, [pc, #268]	; (8000994 <MX_RTC_Init+0x134>)
 8000888:	4a43      	ldr	r2, [pc, #268]	; (8000998 <MX_RTC_Init+0x138>)
 800088a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800088c:	4b41      	ldr	r3, [pc, #260]	; (8000994 <MX_RTC_Init+0x134>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000892:	4b40      	ldr	r3, [pc, #256]	; (8000994 <MX_RTC_Init+0x134>)
 8000894:	227f      	movs	r2, #127	; 0x7f
 8000896:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000898:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <MX_RTC_Init+0x134>)
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <MX_RTC_Init+0x134>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008a4:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <MX_RTC_Init+0x134>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008aa:	4b3a      	ldr	r3, [pc, #232]	; (8000994 <MX_RTC_Init+0x134>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b0:	4b38      	ldr	r3, [pc, #224]	; (8000994 <MX_RTC_Init+0x134>)
 80008b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <MX_RTC_Init+0x134>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80008be:	4b35      	ldr	r3, [pc, #212]	; (8000994 <MX_RTC_Init+0x134>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c4:	4833      	ldr	r0, [pc, #204]	; (8000994 <MX_RTC_Init+0x134>)
 80008c6:	f002 f929 	bl	8002b1c <HAL_RTC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80008d0:	f000 f8c7 	bl	8000a62 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008f2:	2201      	movs	r2, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	4827      	ldr	r0, [pc, #156]	; (8000994 <MX_RTC_Init+0x134>)
 80008f8:	f002 f992 	bl	8002c20 <HAL_RTC_SetTime>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000902:	f000 f8ae 	bl	8000a62 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000906:	2301      	movs	r3, #1
 8000908:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800091e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	481b      	ldr	r0, [pc, #108]	; (8000994 <MX_RTC_Init+0x134>)
 8000928:	f002 fa78 	bl	8002e1c <HAL_RTC_SetDate>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000932:	f000 f896 	bl	8000a62 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000936:	2300      	movs	r3, #0
 8000938:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800093e:	2300      	movs	r3, #0
 8000940:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800095a:	2301      	movs	r3, #1
 800095c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2201      	movs	r2, #1
 800096a:	4619      	mov	r1, r3
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_RTC_Init+0x134>)
 800096e:	f002 fb29 	bl	8002fc4 <HAL_RTC_SetAlarm_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000978:	f000 f873 	bl	8000a62 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	202a      	movs	r0, #42	; 0x2a
 8000982:	f000 fb0a 	bl	8000f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000986:	202a      	movs	r0, #42	; 0x2a
 8000988:	f000 fb21 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3748      	adds	r7, #72	; 0x48
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000008c 	.word	0x2000008c
 8000998:	40002800 	.word	0x40002800

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009a2:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <MX_USART2_UART_Init+0xa8>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009c4:	220c      	movs	r2, #12
 80009c6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009e2:	2230      	movs	r2, #48	; 0x30
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 80009f8:	f002 fd72 	bl	80034e0 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a02:	f000 f82e 	bl	8000a62 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 8000a0a:	f003 fb66 	bl	80040da <HAL_UARTEx_SetTxFifoThreshold>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a14:	f000 f825 	bl	8000a62 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 8000a1c:	f003 fb9b 	bl	8004156 <HAL_UARTEx_SetRxFifoThreshold>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000a26:	f000 f81c 	bl	8000a62 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0xa4>)
 8000a2c:	f003 fb1d 	bl	800406a <HAL_UARTEx_DisableFifoMode>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000a36:	f000 f814 	bl	8000a62 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000c4 	.word	0x200000c4
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fd8c 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2004      	movs	r0, #4
 8000a54:	f7ff fd89 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f7ff fd86 	bl	800056a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a66:	b672      	cpsid	i
}
 8000a68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <Error_Handler+0x8>

08000a6c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <LL_AHB2_GRP1_EnableClock>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2238      	movs	r2, #56	; 0x38
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 ff61 	bl	80059d0 <memset>
  if(hrtc->Instance==RTC)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_RTC_MspInit+0x54>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d115      	bne.n	8000b44 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fedd 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b34:	f7ff ff95 	bl	8000a62 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b38:	f7ff ff98 	bl	8000a6c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b40:	f7ff ffbc 	bl	8000abc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3740      	adds	r7, #64	; 0x40
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40002800 	.word	0x40002800

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b096      	sub	sp, #88	; 0x58
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2238      	movs	r2, #56	; 0x38
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 ff2d 	bl	80059d0 <memset>
  if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d126      	bne.n	8000bce <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b84:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000b88:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 feaa 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b9a:	f7ff ff62 	bl	8000a62 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ba2:	f7ff ff8b 	bl	8000abc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff ff70 	bl	8000a8c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000bac:	230c      	movs	r3, #12
 8000bae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f000 fa1b 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3758      	adds	r7, #88	; 0x58
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f8c7 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <RTC_Alarm_IRQHandler+0x10>)
 8000c32:	f002 fb2f 	bl	8003294 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000008c 	.word	0x2000008c

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f004 fe76 	bl	8005960 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20008000 	.word	0x20008000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	20000158 	.word	0x20000158
 8000ca8:	200005e0 	.word	0x200005e0

08000cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f7ff fc40 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cda:	f004 fe47 	bl	800596c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cde:	f7ff fc9d 	bl	800061c <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf0:	08007084 	.word	0x08007084
  ldr r2, =_sbss
 8000cf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf8:	200005dc 	.word	0x200005dc

08000cfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 f93a 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000d10:	f001 fc0c 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <HAL_Init+0x3c>)
 8000d18:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f810 	bl	8000d40 <HAL_InitTick>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e001      	b.n	8000d30 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2c:	f7ff fede 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000000 	.word	0x20000000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d024      	beq.n	8000d9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d54:	f001 fbea 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x6c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f93c 	bl	8000fea <HAL_SYSTICK_Config>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10f      	bne.n	8000d98 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d809      	bhi.n	8000d92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d86:	f000 f908 	bl	8000f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <HAL_InitTick+0x70>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e004      	b.n	8000da2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e001      	b.n	8000da2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	2000015c 	.word	0x2000015c

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	2000015c 	.word	0x2000015c

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4906      	ldr	r1, [pc, #24]	; (8000e84 <__NVIC_EnableIRQ+0x34>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f64:	f7ff ff90 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff2d 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff44 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff92 	bl	8000edc <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff61 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff37 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa4 	bl	8000f40 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e140      	b.n	8001296 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8132 	beq.w	8001290 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0201 	and.w	r2, r3, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	6939      	ldr	r1, [r7, #16]
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0203 	and.w	r2, r3, #3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 808c 	beq.w	8001290 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001178:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_GPIO_Init+0x2b0>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	2207      	movs	r2, #7
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1bc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <HAL_GPIO_Init+0x2b4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1b8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a43      	ldr	r2, [pc, #268]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1b4>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e004      	b.n	80011c2 <HAL_GPIO_Init+0x1be>
 80011b8:	2307      	movs	r3, #7
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x1be>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <HAL_GPIO_Init+0x1be>
 80011c0:	2300      	movs	r3, #0
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	4093      	lsls	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d2:	4938      	ldr	r1, [pc, #224]	; (80012b4 <HAL_GPIO_Init+0x2b0>)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122e:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800125a:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 8001264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001268:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f aeb7 	bne.w	8001014 <HAL_GPIO_Init+0x10>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	371c      	adds	r7, #28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	58000800 	.word	0x58000800

080012c4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80012d2:	e0af      	b.n	8001434 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80012d4:	2201      	movs	r2, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a2 	beq.w	800142e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80012ea:	4a59      	ldr	r2, [pc, #356]	; (8001450 <HAL_GPIO_DeInit+0x18c>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	2207      	movs	r2, #7
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_DeInit+0x6c>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <HAL_GPIO_DeInit+0x190>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_DeInit+0x68>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <HAL_GPIO_DeInit+0x194>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_DeInit+0x64>
 8001324:	2302      	movs	r3, #2
 8001326:	e004      	b.n	8001332 <HAL_GPIO_DeInit+0x6e>
 8001328:	2307      	movs	r3, #7
 800132a:	e002      	b.n	8001332 <HAL_GPIO_DeInit+0x6e>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_DeInit+0x6e>
 8001330:	2300      	movs	r3, #0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	429a      	cmp	r2, r3
 8001340:	d136      	bne.n	80013b0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_GPIO_DeInit+0x198>)
 8001344:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	4943      	ldr	r1, [pc, #268]	; (800145c <HAL_GPIO_DeInit+0x198>)
 800134e:	4013      	ands	r3, r2
 8001350:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_GPIO_DeInit+0x198>)
 8001356:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	493f      	ldr	r1, [pc, #252]	; (800145c <HAL_GPIO_DeInit+0x198>)
 8001360:	4013      	ands	r3, r2
 8001362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_GPIO_DeInit+0x198>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	493b      	ldr	r1, [pc, #236]	; (800145c <HAL_GPIO_DeInit+0x198>)
 8001370:	4013      	ands	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_GPIO_DeInit+0x198>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	4937      	ldr	r1, [pc, #220]	; (800145c <HAL_GPIO_DeInit+0x198>)
 800137e:	4013      	ands	r3, r2
 8001380:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001392:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <HAL_GPIO_DeInit+0x18c>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43da      	mvns	r2, r3
 80013a2:	482b      	ldr	r0, [pc, #172]	; (8001450 <HAL_GPIO_DeInit+0x18c>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	400a      	ands	r2, r1
 80013aa:	3302      	adds	r3, #2
 80013ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2103      	movs	r1, #3
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	08d2      	lsrs	r2, r2, #3
 80013e4:	4019      	ands	r1, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2103      	movs	r1, #3
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	401a      	ands	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	2101      	movs	r1, #1
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2103      	movs	r1, #3
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f af49 	bne.w	80012d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40010000 	.word	0x40010000
 8001454:	48000400 	.word	0x48000400
 8001458:	48000800 	.word	0x48000800
 800145c:	58000800 	.word	0x58000800

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
	...

08001490 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	58000400 	.word	0x58000400

080014ac <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <LL_PWR_EnableBootC2+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <LL_PWR_EnableBootC2+0x18>)
 80014b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	58000400 	.word	0x58000400

080014c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_PWREx_GetVoltageRange+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	58000400 	.word	0x58000400

080014e0 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80014e8:	f7ff ffe0 	bl	80014ac <LL_PWR_EnableBootC2>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001504:	d101      	bne.n	800150a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	58000400 	.word	0x58000400

08001518 <LL_RCC_HSE_EnableTcxo>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <LL_RCC_HSE_DisableTcxo>:
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001562:	d101      	bne.n	8001568 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <LL_RCC_HSE_Enable>:
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <LL_RCC_HSE_Disable>:
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_HSE_IsReady>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015bc:	d101      	bne.n	80015c2 <LL_RCC_HSE_IsReady+0x18>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_RCC_HSE_IsReady+0x1a>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_HSI_Enable>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <LL_RCC_HSI_Disable>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <LL_RCC_HSI_IsReady>:
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001616:	d101      	bne.n	800161c <LL_RCC_HSI_IsReady+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_RCC_HSI_IsReady+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	061b      	lsls	r3, r3, #24
 800163c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <LL_RCC_LSE_IsReady>:
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b02      	cmp	r3, #2
 8001660:	d101      	bne.n	8001666 <LL_RCC_LSE_IsReady+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_RCC_LSE_IsReady+0x1a>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <LL_RCC_LSI_Enable>:
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <LL_RCC_LSI_Disable>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_LSI_IsReady>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d101      	bne.n	80016c8 <LL_RCC_LSI_IsReady+0x18>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <LL_RCC_LSI_IsReady+0x1a>
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <LL_RCC_MSI_Enable>:
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <LL_RCC_MSI_Disable>:
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LL_RCC_MSI_IsReady>:
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d101      	bne.n	8001720 <LL_RCC_MSI_IsReady+0x16>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_RCC_MSI_IsReady+0x18>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b08      	cmp	r3, #8
 800173a:	d101      	bne.n	8001740 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <LL_RCC_MSI_GetRange>:
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <LL_RCC_SetSysClkSource>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_GetSysClkSource>:
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <LL_RCC_SetAHBPrescaler>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001812:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <LL_RCC_SetAHB3Prescaler>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800183c:	f023 020f 	bic.w	r2, r3, #15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001848:	4313      	orrs	r3, r2
 800184a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <LL_RCC_SetAPB1Prescaler>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800186a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <LL_RCC_SetAPB2Prescaler>:
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <LL_RCC_GetAHBPrescaler>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_GetAHB3Prescaler>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_GetAPB1Prescaler>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <LL_RCC_GetAPB2Prescaler>:
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800192a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800194a:	d101      	bne.n	8001950 <LL_RCC_PLL_IsReady+0x18>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <LL_RCC_PLL_IsReady+0x1a>
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800198c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0303 	and.w	r3, r3, #3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d101      	bne.n	80019cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ea:	d101      	bne.n	80019f0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d101      	bne.n	8001a14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a30:	d101      	bne.n	8001a36 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a52:	d101      	bne.n	8001a58 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e36f      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	f7ff fea6 	bl	80017c6 <LL_RCC_GetSysClkSource>
 8001a7a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7c:	f7ff ff8f 	bl	800199e <LL_RCC_PLL_GetMainSource>
 8001a80:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80c4 	beq.w	8001c18 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3e>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b0c      	cmp	r3, #12
 8001a9a:	d176      	bne.n	8001b8a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d173      	bne.n	8001b8a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e353      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x68>
 8001ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aca:	e006      	b.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d222      	bcs.n	8001b24 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fd5a 	bl	800259c <RCC_SetFlashLatencyFromMSIRange>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e331      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe2b 	bl	8001778 <LL_RCC_MSI_SetCalibTrimming>
 8001b22:	e021      	b.n	8001b68 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fe12 	bl	8001778 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fd1f 	bl	800259c <RCC_SetFlashLatencyFromMSIRange>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e2f6      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b68:	f000 fce0 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4aa7      	ldr	r2, [pc, #668]	; (8001e0c <HAL_RCC_OscConfig+0x3a8>)
 8001b70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001b72:	4ba7      	ldr	r3, [pc, #668]	; (8001e10 <HAL_RCC_OscConfig+0x3ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8e2 	bl	8000d40 <HAL_InitTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001b80:	7cfb      	ldrb	r3, [r7, #19]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d047      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001b86:	7cfb      	ldrb	r3, [r7, #19]
 8001b88:	e2e5      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d02c      	beq.n	8001bec <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b92:	f7ff fd9e 	bl	80016d2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b96:	f7ff f91f 	bl	8000dd8 <HAL_GetTick>
 8001b9a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b9e:	f7ff f91b 	bl	8000dd8 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e2d2      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bb0:	f7ff fdab 	bl	800170a <LL_RCC_MSI_IsReady>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f1      	beq.n	8001b9e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fdc7 	bl	8001778 <LL_RCC_MSI_SetCalibTrimming>
 8001bea:	e015      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bec:	f7ff fd7f 	bl	80016ee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f8f2 	bl	8000dd8 <HAL_GetTick>
 8001bf4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f8ee 	bl	8000dd8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e2a5      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c0a:	f7ff fd7e 	bl	800170a <LL_RCC_MSI_IsReady>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f1      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x194>
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c16:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d058      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1d2>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2b0c      	cmp	r3, #12
 8001c2e:	d108      	bne.n	8001c42 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d105      	bne.n	8001c42 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d14b      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e289      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_OscConfig+0x204>
 8001c62:	f7ff fc86 	bl	8001572 <LL_RCC_HSE_Enable>
 8001c66:	e00d      	b.n	8001c84 <HAL_RCC_OscConfig+0x220>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001c70:	d104      	bne.n	8001c7c <HAL_RCC_OscConfig+0x218>
 8001c72:	f7ff fc51 	bl	8001518 <LL_RCC_HSE_EnableTcxo>
 8001c76:	f7ff fc7c 	bl	8001572 <LL_RCC_HSE_Enable>
 8001c7a:	e003      	b.n	8001c84 <HAL_RCC_OscConfig+0x220>
 8001c7c:	f7ff fc87 	bl	800158e <LL_RCC_HSE_Disable>
 8001c80:	f7ff fc58 	bl	8001534 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d012      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f8a4 	bl	8000dd8 <HAL_GetTick>
 8001c90:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff f8a0 	bl	8000dd8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e257      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ca6:	f7ff fc80 	bl	80015aa <LL_RCC_HSE_IsReady>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f1      	beq.n	8001c94 <HAL_RCC_OscConfig+0x230>
 8001cb0:	e011      	b.n	8001cd6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f891 	bl	8000dd8 <HAL_GetTick>
 8001cb6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cba:	f7ff f88d 	bl	8000dd8 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	; 0x64
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e244      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ccc:	f7ff fc6d 	bl	80015aa <LL_RCC_HSE_IsReady>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f1      	bne.n	8001cba <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d046      	beq.n	8001d70 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x290>
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d10e      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d10b      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e22a      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fc8e 	bl	8001626 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d0a:	e031      	b.n	8001d70 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d019      	beq.n	8001d48 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d14:	f7ff fc5a 	bl	80015cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f85e 	bl	8000dd8 <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff f85a 	bl	8000dd8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e211      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d32:	f7ff fc67 	bl	8001604 <LL_RCC_HSI_IsReady>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f1      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fc70 	bl	8001626 <LL_RCC_HSI_SetCalibTrimming>
 8001d46:	e013      	b.n	8001d70 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d48:	f7ff fc4e 	bl	80015e8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f844 	bl	8000dd8 <HAL_GetTick>
 8001d50:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d54:	f7ff f840 	bl	8000dd8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1f7      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d66:	f7ff fc4d 	bl	8001604 <LL_RCC_HSI_IsReady>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f1      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d06e      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d056      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d031      	beq.n	8001e00 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e1d0      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d013      	beq.n	8001de6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001dbe:	f7ff fc67 	bl	8001690 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dc2:	f7ff f809 	bl	8000dd8 <HAL_GetTick>
 8001dc6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff f805 	bl	8000dd8 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b11      	cmp	r3, #17
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1bc      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ddc:	f7ff fc68 	bl	80016b0 <LL_RCC_LSI_IsReady>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f1      	bne.n	8001dca <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	f023 0210 	bic.w	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e00:	f7ff fc36 	bl	8001670 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe ffe8 	bl	8000dd8 <HAL_GetTick>
 8001e08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e0a:	e00c      	b.n	8001e26 <HAL_RCC_OscConfig+0x3c2>
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7fe ffe0 	bl	8000dd8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b11      	cmp	r3, #17
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e197      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e26:	f7ff fc43 	bl	80016b0 <LL_RCC_LSI_IsReady>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_RCC_OscConfig+0x3b0>
 8001e30:	e013      	b.n	8001e5a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	f7ff fc2d 	bl	8001690 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe ffcf 	bl	8000dd8 <HAL_GetTick>
 8001e3a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7fe ffcb 	bl	8000dd8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b11      	cmp	r3, #17
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e182      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e50:	f7ff fc2e 	bl	80016b0 <LL_RCC_LSI_IsReady>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f1      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80d8 	beq.w	8002018 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e68:	f7ff fb44 	bl	80014f4 <LL_PWR_IsEnabledBkUpAccess>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e72:	f7ff fb0d 	bl	8001490 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7fe ffaf 	bl	8000dd8 <HAL_GetTick>
 8001e7a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7fe ffab 	bl	8000dd8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e162      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e90:	f7ff fb30 	bl	80014f4 <LL_PWR_IsEnabledBkUpAccess>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f1      	beq.n	8001e7e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d07b      	beq.n	8001f9a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b85      	cmp	r3, #133	; 0x85
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d109      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe ff87 	bl	8000dd8 <HAL_GetTick>
 8001eca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe ff79 	bl	8000dd8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e12e      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ef8:	f7ff fba9 	bl	800164e <LL_RCC_LSE_IsReady>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0ef      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b81      	cmp	r3, #129	; 0x81
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b85      	cmp	r3, #133	; 0x85
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe ff61 	bl	8000dd8 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7fe ff53 	bl	8000dd8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e108      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ec      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f54:	e060      	b.n	8002018 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ff3f 	bl	8000dd8 <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7fe ff31 	bl	8000dd8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0e6      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ec      	bne.n	8001f72 <HAL_RCC_OscConfig+0x50e>
 8001f98:	e03e      	b.n	8002018 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe ff1d 	bl	8000dd8 <HAL_GetTick>
 8001f9e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe ff0f 	bl	8000dd8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0c4      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ec      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe fefc 	bl	8000dd8 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7fe feee 	bl	8000dd8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0a3      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800200e:	f7ff fb1e 	bl	800164e <LL_RCC_LSE_IsReady>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ef      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8099 	beq.w	8002154 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	d06c      	beq.n	8002102 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	2b02      	cmp	r3, #2
 800202e:	d14b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	f7ff fc74 	bl	800191c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fed0 	bl	8000dd8 <HAL_GetTick>
 8002038:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe fecc 	bl	8000dd8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b0a      	cmp	r3, #10
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e083      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800204e:	f7ff fc73 	bl	8001938 <LL_RCC_PLL_IsReady>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f1      	bne.n	800203c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b40      	ldr	r3, [pc, #256]	; (8002160 <HAL_RCC_OscConfig+0x6fc>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002070:	0212      	lsls	r2, r2, #8
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002078:	4311      	orrs	r1, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002084:	430a      	orrs	r2, r1
 8002086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208a:	4313      	orrs	r3, r2
 800208c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208e:	f7ff fc37 	bl	8001900 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe fe99 	bl	8000dd8 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe fe95 	bl	8000dd8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b0a      	cmp	r3, #10
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e04c      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80020bc:	f7ff fc3c 	bl	8001938 <LL_RCC_PLL_IsReady>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f1      	beq.n	80020aa <HAL_RCC_OscConfig+0x646>
 80020c6:	e045      	b.n	8002154 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	f7ff fc28 	bl	800191c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fe84 	bl	8000dd8 <HAL_GetTick>
 80020d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe fe80 	bl	8000dd8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b0a      	cmp	r3, #10
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e037      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80020e6:	f7ff fc27 	bl	8001938 <LL_RCC_PLL_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f1      	bne.n	80020d4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_RCC_OscConfig+0x700>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
 8002100:	e028      	b.n	8002154 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e023      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	429a      	cmp	r2, r3
 8002122:	d115      	bne.n	8002150 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	429a      	cmp	r2, r3
 8002130:	d10e      	bne.n	8002150 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	429a      	cmp	r2, r3
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	11c1808c 	.word	0x11c1808c
 8002164:	eefefffc 	.word	0xeefefffc

08002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e12c      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b98      	ldr	r3, [pc, #608]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d91b      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b95      	ldr	r3, [pc, #596]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4993      	ldr	r1, [pc, #588]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219a:	f7fe fe1d 	bl	8000dd8 <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021a2:	f7fe fe19 	bl	8000dd8 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e110      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b4:	4b8a      	ldr	r3, [pc, #552]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fb02 	bl	80017dc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fdfe 	bl	8000dd8 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021e0:	f7fe fdfa 	bl	8000dd8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0f1      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021f2:	f7ff fbdf 	bl	80019b4 <LL_RCC_IsActiveFlag_HPRE>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f1      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d016      	beq.n	8002236 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff faf8 	bl	8001802 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002212:	f7fe fde1 	bl	8000dd8 <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800221a:	f7fe fddd 	bl	8000dd8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0d4      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800222c:	f7ff fbd3 	bl	80019d6 <LL_RCC_IsActiveFlag_C2HPRE>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f1      	beq.n	800221a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff faf0 	bl	800182c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800224c:	f7fe fdc4 	bl	8000dd8 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002254:	f7fe fdc0 	bl	8000dd8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0b7      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002266:	f7ff fbc8 	bl	80019fa <LL_RCC_IsActiveFlag_SHDHPRE>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f1      	beq.n	8002254 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d016      	beq.n	80022aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fae9 	bl	8001858 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002286:	f7fe fda7 	bl	8000dd8 <HAL_GetTick>
 800228a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800228e:	f7fe fda3 	bl	8000dd8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e09a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022a0:	f7ff fbbd 	bl	8001a1e <LL_RCC_IsActiveFlag_PPRE1>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f1      	beq.n	800228e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d017      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fade 	bl	800187e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fd89 	bl	8000dd8 <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022ca:	f7fe fd85 	bl	8000dd8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e07c      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022dc:	f7ff fbb0 	bl	8001a40 <LL_RCC_IsActiveFlag_PPRE2>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f1      	beq.n	80022ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d043      	beq.n	800237a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d106      	bne.n	8002308 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80022fa:	f7ff f956 	bl	80015aa <LL_RCC_HSE_IsReady>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d11e      	bne.n	8002342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e066      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d106      	bne.n	800231e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002310:	f7ff fb12 	bl	8001938 <LL_RCC_PLL_IsReady>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d113      	bne.n	8002342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e05b      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002326:	f7ff f9f0 	bl	800170a <LL_RCC_MSI_IsReady>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e050      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002334:	f7ff f966 	bl	8001604 <LL_RCC_HSI_IsReady>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e049      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fa2a 	bl	80017a0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7fe fd44 	bl	8000dd8 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7fe fd40 	bl	8000dd8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e035      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	f7ff fa2c 	bl	80017c6 <LL_RCC_GetSysClkSource>
 800236e:	4602      	mov	r2, r0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	429a      	cmp	r2, r3
 8002378:	d1ec      	bne.n	8002354 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d21b      	bcs.n	80023c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 0207 	bic.w	r2, r3, #7
 8002390:	4913      	ldr	r1, [pc, #76]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7fe fd1e 	bl	8000dd8 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023a0:	f7fe fd1a 	bl	8000dd8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e011      	b.n	80023d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x278>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1ef      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023c0:	f000 f8b4 	bl	800252c <HAL_RCC_GetHCLKFreq>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RCC_ClockConfig+0x27c>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RCC_ClockConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fcb6 	bl	8000d40 <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	58004000 	.word	0x58004000
 80023e4:	20000000 	.word	0x20000000
 80023e8:	20000004 	.word	0x20000004

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	f7ff f9e4 	bl	80017c6 <LL_RCC_GetSysClkSource>
 80023fe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002400:	f7ff facd 	bl	800199e <LL_RCC_PLL_GetMainSource>
 8002404:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x2c>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d139      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d136      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002418:	f7ff f987 	bl	800172a <LL_RCC_MSI_IsEnabledRangeSelect>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d115      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x62>
 8002422:	f7ff f982 	bl	800172a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x4e>
 800242c:	f7ff f98d 	bl	800174a <LL_RCC_MSI_GetRange>
 8002430:	4603      	mov	r3, r0
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	e005      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x5a>
 800243a:	f7ff f991 	bl	8001760 <LL_RCC_MSI_GetRangeAfterStandby>
 800243e:	4603      	mov	r3, r0
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	4a36      	ldr	r2, [pc, #216]	; (8002520 <HAL_RCC_GetSysClockFreq+0x134>)
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	e014      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x8c>
 800244e:	f7ff f96c 	bl	800172a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x7a>
 8002458:	f7ff f977 	bl	800174a <LL_RCC_MSI_GetRange>
 800245c:	4603      	mov	r3, r0
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	e005      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x86>
 8002466:	f7ff f97b 	bl	8001760 <LL_RCC_MSI_GetRangeAfterStandby>
 800246a:	4603      	mov	r3, r0
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	4a2b      	ldr	r2, [pc, #172]	; (8002520 <HAL_RCC_GetSysClockFreq+0x134>)
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d115      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002484:	e012      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d102      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_RCC_GetSysClockFreq+0x138>)
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e00c      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d109      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002498:	f7ff f85a 	bl	8001550 <LL_RCC_HSE_IsEnabledDiv2>
 800249c:	4603      	mov	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_RCC_GetSysClockFreq+0x138>)
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e001      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024aa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ac:	f7ff f98b 	bl	80017c6 <LL_RCC_GetSysClkSource>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d12f      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80024b6:	f7ff fa72 	bl	800199e <LL_RCC_PLL_GetMainSource>
 80024ba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0xde>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d003      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0xe4>
 80024c8:	e00d      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_RCC_GetSysClockFreq+0x138>)
 80024cc:	60fb      	str	r3, [r7, #12]
        break;
 80024ce:	e00d      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024d0:	f7ff f83e 	bl	8001550 <LL_RCC_HSE_IsEnabledDiv2>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_GetSysClockFreq+0x138>)
 80024dc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80024de:	e005      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024e2:	60fb      	str	r3, [r7, #12]
        break;
 80024e4:	e002      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	60fb      	str	r3, [r7, #12]
        break;
 80024ea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80024ec:	f7ff fa35 	bl	800195a <LL_RCC_PLL_GetN>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	fb03 f402 	mul.w	r4, r3, r2
 80024f8:	f7ff fa46 	bl	8001988 <LL_RCC_PLL_GetDivider>
 80024fc:	4603      	mov	r3, r0
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	3301      	adds	r3, #1
 8002502:	fbb4 f4f3 	udiv	r4, r4, r3
 8002506:	f7ff fa34 	bl	8001972 <LL_RCC_PLL_GetR>
 800250a:	4603      	mov	r3, r0
 800250c:	0f5b      	lsrs	r3, r3, #29
 800250e:	3301      	adds	r3, #1
 8002510:	fbb4 f3f3 	udiv	r3, r4, r3
 8002514:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002516:	697b      	ldr	r3, [r7, #20]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	08006e5c 	.word	0x08006e5c
 8002524:	00f42400 	.word	0x00f42400
 8002528:	01e84800 	.word	0x01e84800

0800252c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800252c:	b598      	push	{r3, r4, r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002530:	f7ff ff5c 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002534:	4604      	mov	r4, r0
 8002536:	f7ff f9b5 	bl	80018a4 <LL_RCC_GetAHBPrescaler>
 800253a:	4603      	mov	r3, r0
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	4a03      	ldr	r2, [pc, #12]	; (8002550 <HAL_RCC_GetHCLKFreq+0x24>)
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd98      	pop	{r3, r4, r7, pc}
 8002550:	08006dfc 	.word	0x08006dfc

08002554 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b598      	push	{r3, r4, r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002558:	f7ff ffe8 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800255c:	4604      	mov	r4, r0
 800255e:	f7ff f9b9 	bl	80018d4 <LL_RCC_GetAPB1Prescaler>
 8002562:	4603      	mov	r3, r0
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd98      	pop	{r3, r4, r7, pc}
 8002574:	08006e3c 	.word	0x08006e3c

08002578 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b598      	push	{r3, r4, r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800257c:	f7ff ffd6 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8002580:	4604      	mov	r4, r0
 8002582:	f7ff f9b2 	bl	80018ea <LL_RCC_GetAPB2Prescaler>
 8002586:	4603      	mov	r3, r0
 8002588:	0adb      	lsrs	r3, r3, #11
 800258a:	4a03      	ldr	r2, [pc, #12]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x20>)
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd98      	pop	{r3, r4, r7, pc}
 8002598:	08006e3c 	.word	0x08006e3c

0800259c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80025b4:	f7ff f981 	bl	80018ba <LL_RCC_GetAHB3Prescaler>
 80025b8:	4603      	mov	r3, r0
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9c      	lsrs	r4, r3, #18
 80025d8:	f7fe ff76 	bl	80014c8 <HAL_PWREx_GetVoltageRange>
 80025dc:	4603      	mov	r3, r0
 80025de:	4619      	mov	r1, r3
 80025e0:	4620      	mov	r0, r4
 80025e2:	f000 f80b 	bl	80025fc <RCC_SetFlashLatency>
 80025e6:	4603      	mov	r3, r0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	08006e5c 	.word	0x08006e5c
 80025f4:	08006dfc 	.word	0x08006dfc
 80025f8:	431bde83 	.word	0x431bde83

080025fc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002606:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <RCC_SetFlashLatency+0xf4>)
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002610:	6018      	str	r0, [r3, #0]
 8002612:	3304      	adds	r3, #4
 8002614:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002616:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <RCC_SetFlashLatency+0xf8>)
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002620:	6018      	str	r0, [r3, #0]
 8002622:	3304      	adds	r3, #4
 8002624:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002626:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <RCC_SetFlashLatency+0xfc>)
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	ca07      	ldmia	r2, {r0, r1, r2}
 800262e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263c:	d11b      	bne.n	8002676 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800263e:	2300      	movs	r3, #0
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	e014      	b.n	800266e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	3338      	adds	r3, #56	; 0x38
 800264a:	443b      	add	r3, r7
 800264c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002650:	461a      	mov	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4293      	cmp	r3, r2
 8002656:	d807      	bhi.n	8002668 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	3338      	adds	r3, #56	; 0x38
 800265e:	443b      	add	r3, r7
 8002660:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002666:	e021      	b.n	80026ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	3301      	adds	r3, #1
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	2b02      	cmp	r3, #2
 8002672:	d9e7      	bls.n	8002644 <RCC_SetFlashLatency+0x48>
 8002674:	e01a      	b.n	80026ac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267a:	e014      	b.n	80026a6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	3338      	adds	r3, #56	; 0x38
 8002682:	443b      	add	r3, r7
 8002684:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	3338      	adds	r3, #56	; 0x38
 8002696:	443b      	add	r3, r7
 8002698:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800269e:	e005      	b.n	80026ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	3301      	adds	r3, #1
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d9e7      	bls.n	800267c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <RCC_SetFlashLatency+0x100>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 0207 	bic.w	r2, r3, #7
 80026b4:	4911      	ldr	r1, [pc, #68]	; (80026fc <RCC_SetFlashLatency+0x100>)
 80026b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026bc:	f7fe fb8c 	bl	8000dd8 <HAL_GetTick>
 80026c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026c2:	e008      	b.n	80026d6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026c4:	f7fe fb88 	bl	8000dd8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e007      	b.n	80026e6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <RCC_SetFlashLatency+0x100>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1ef      	bne.n	80026c4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3738      	adds	r7, #56	; 0x38
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	08006cfc 	.word	0x08006cfc
 80026f4:	08006d04 	.word	0x08006d04
 80026f8:	08006d0c 	.word	0x08006d0c
 80026fc:	58004000 	.word	0x58004000

08002700 <LL_RCC_LSE_IsReady>:
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d101      	bne.n	8002718 <LL_RCC_LSE_IsReady+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_RCC_LSE_IsReady+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <LL_RCC_SetUSARTClockSource>:
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	43db      	mvns	r3, r3
 8002738:	401a      	ands	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <LL_RCC_SetI2SClockSource>:
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <LL_RCC_SetLPUARTClockSource>:
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <LL_RCC_SetI2CClockSource>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <LL_RCC_SetLPTIMClockSource>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	43db      	mvns	r3, r3
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <LL_RCC_SetRNGClockSource>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <LL_RCC_SetADCClockSource>:
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800284e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_RCC_SetRTCClockSource>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002878:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <LL_RCC_GetRTCClockSource>:
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <LL_RCC_ForceBackupDomainReset>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80028f4:	2300      	movs	r3, #0
 80028f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80028f8:	2300      	movs	r3, #0
 80028fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d058      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002908:	f7fe fdc2 	bl	8001490 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800290c:	f7fe fa64 	bl	8000dd8 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002912:	e009      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002914:	f7fe fa60 	bl	8000dd8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d902      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	74fb      	strb	r3, [r7, #19]
        break;
 8002926:	e006      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002928:	4b7b      	ldr	r3, [pc, #492]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002934:	d1ee      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13c      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800293c:	f7ff ffa7 	bl	800288e <LL_RCC_GetRTCClockSource>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	429a      	cmp	r2, r3
 8002948:	d00f      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800294a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002956:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002958:	f7ff ffa5 	bl	80028a6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800295c:	f7ff ffb3 	bl	80028c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d014      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fa30 	bl	8000dd8 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800297a:	e00b      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fa2c 	bl	8000dd8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d902      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	74fb      	strb	r3, [r7, #19]
            break;
 8002992:	e004      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002994:	f7ff feb4 	bl	8002700 <LL_RCC_LSE_IsReady>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d1ee      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5b 	bl	8002864 <LL_RCC_SetRTCClockSource>
 80029ae:	e004      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
 80029b4:	e001      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fea9 	bl	8002722 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fe9e 	bl	8002722 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fec0 	bl	800277c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fee6 	bl	80027de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fedb 	bl	80027de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fed0 	bl	80027de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fea9 	bl	80027a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fe9e 	bl	80027a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fe93 	bl	80027a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d011      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fe5e 	bl	8002752 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fea5 	bl	8002810 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d107      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002adc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d011      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fea3 	bl	800283a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afc:	d107      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002b0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	58000400 	.word	0x58000400

08002b1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d071      	beq.n	8002c12 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fd ffd8 	bl	8000af8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d051      	beq.n	8002c00 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002b5e:	22ca      	movs	r2, #202	; 0xca
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002b64:	2253      	movs	r2, #83	; 0x53
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fbe3 	bl	8003334 <RTC_EnterInitMode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d13f      	bne.n	8002bf8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002b78:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002b7e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b86:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4319      	orrs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	491f      	ldr	r1, [pc, #124]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	491b      	ldr	r1, [pc, #108]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	4915      	ldr	r1, [pc, #84]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fbe6 	bl	800339c <RTC_ExitInitMode>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a19      	ldr	r1, [r3, #32]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4319      	orrs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	490a      	ldr	r1, [pc, #40]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_RTC_Init+0x100>)
 8002bfa:	22ff      	movs	r2, #255	; 0xff
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
 8002bfe:	e001      	b.n	8002c04 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40002800 	.word	0x40002800

08002c20 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_RTC_SetTime+0x1a>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e088      	b.n	8002d4c <HAL_RTC_SetTime+0x12c>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c4a:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002c4c:	22ca      	movs	r2, #202	; 0xca
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c50:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002c52:	2253      	movs	r2, #83	; 0x53
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fb6c 	bl	8003334 <RTC_EnterInitMode>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15e      	bne.n	8002d24 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c72:	d057      	beq.n	8002d24 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d125      	bne.n	8002cc6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fbc1 	bl	8003418 <RTC_ByteToBcd2>
 8002c96:	4603      	mov	r3, r0
 8002c98:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fbba 	bl	8003418 <RTC_ByteToBcd2>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ca8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	789b      	ldrb	r3, [r3, #2]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fbb2 	bl	8003418 <RTC_ByteToBcd2>
 8002cb4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cb6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	78db      	ldrb	r3, [r3, #3]
 8002cbe:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	e017      	b.n	8002cf6 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ce4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cea:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	78db      	ldrb	r3, [r3, #3]
 8002cf0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8002cf6:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d02:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	490d      	ldr	r1, [pc, #52]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fb39 	bl	800339c <RTC_ExitInitMode>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RTC_SetTime+0x134>)
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}
 8002d54:	40002800 	.word	0x40002800

08002d58 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_RTC_GetTime+0xc0>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_RTC_GetTime+0xc0>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d78:	d049      	beq.n	8002e0e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8002d7a:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RTC_GetTime+0xc0>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RTC_GetTime+0xc0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d8e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d92:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	0c1b      	lsrs	r3, r3, #16
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	0d9b      	lsrs	r3, r3, #22
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11a      	bne.n	8002e0e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fb3a 	bl	8003456 <RTC_Bcd2ToByte>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fb31 	bl	8003456 <RTC_Bcd2ToByte>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	789b      	ldrb	r3, [r3, #2]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fb28 	bl	8003456 <RTC_Bcd2ToByte>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40002800 	.word	0x40002800

08002e1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_RTC_SetDate+0x1a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e071      	b.n	8002f1a <HAL_RTC_SetDate+0xfe>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10e      	bne.n	8002e6a <HAL_RTC_SetDate+0x4e>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	785b      	ldrb	r3, [r3, #1]
 8002e5c:	f023 0310 	bic.w	r3, r3, #16
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	330a      	adds	r3, #10
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11c      	bne.n	8002eaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	78db      	ldrb	r3, [r3, #3]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 facf 	bl	8003418 <RTC_ByteToBcd2>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fac8 	bl	8003418 <RTC_ByteToBcd2>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	789b      	ldrb	r3, [r3, #2]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fac0 	bl	8003418 <RTC_ByteToBcd2>
 8002e98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e00e      	b.n	8002ec8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	78db      	ldrb	r3, [r3, #3]
 8002eae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002eb6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ebc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_RTC_SetDate+0x108>)
 8002eca:	22ca      	movs	r2, #202	; 0xca
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RTC_SetDate+0x108>)
 8002ed0:	2253      	movs	r2, #83	; 0x53
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fa2d 	bl	8003334 <RTC_EnterInitMode>
 8002eda:	4603      	mov	r3, r0
 8002edc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <HAL_RTC_SetDate+0x108>)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002eec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ef0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fa52 	bl	800339c <RTC_ExitInitMode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RTC_SetDate+0x108>)
 8002efe:	22ff      	movs	r2, #255	; 0xff
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d103      	bne.n	8002f10 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40002800 	.word	0x40002800

08002f28 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_RTC_GetDate+0x98>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f40:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	0b5b      	lsrs	r3, r3, #13
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11a      	bne.n	8002fb6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	78db      	ldrb	r3, [r3, #3]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fa66 	bl	8003456 <RTC_Bcd2ToByte>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	785b      	ldrb	r3, [r3, #1]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fa5d 	bl	8003456 <RTC_Bcd2ToByte>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	789b      	ldrb	r3, [r3, #2]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa54 	bl	8003456 <RTC_Bcd2ToByte>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40002800 	.word	0x40002800

08002fc4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RTC_SetAlarm_IT+0x1e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0f3      	b.n	80031ca <HAL_RTC_SetAlarm_IT+0x206>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8002ff2:	4b78      	ldr	r3, [pc, #480]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003002:	d06a      	beq.n	80030da <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d13a      	bne.n	8003080 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800300a:	4b72      	ldr	r3, [pc, #456]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f9f5 	bl	8003418 <RTC_ByteToBcd2>
 800302e:	4603      	mov	r3, r0
 8003030:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f9ee 	bl	8003418 <RTC_ByteToBcd2>
 800303c:	4603      	mov	r3, r0
 800303e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003040:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	789b      	ldrb	r3, [r3, #2]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f9e6 	bl	8003418 <RTC_ByteToBcd2>
 800304c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800304e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	78db      	ldrb	r3, [r3, #3]
 8003056:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003058:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f9d8 	bl	8003418 <RTC_ByteToBcd2>
 8003068:	4603      	mov	r3, r0
 800306a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800306c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003074:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e02c      	b.n	80030da <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003088:	d00d      	beq.n	80030a6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003092:	d008      	beq.n	80030a6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003094:	4b4f      	ldr	r3, [pc, #316]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030b2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030b8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	78db      	ldrb	r3, [r3, #3]
 80030be:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80030c0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80030ca:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80030d0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80030dc:	22ca      	movs	r2, #202	; 0xca
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
 80030e0:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80030e2:	2253      	movs	r2, #83	; 0x53
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ee:	d12c      	bne.n	800314a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a37      	ldr	r2, [pc, #220]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80030f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030fa:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80030fe:	2201      	movs	r2, #1
 8003100:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003108:	d107      	bne.n	800311a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4930      	ldr	r1, [pc, #192]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003114:	4313      	orrs	r3, r2
 8003116:	644b      	str	r3, [r1, #68]	; 0x44
 8003118:	e006      	b.n	8003128 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800311a:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003120:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003142:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003146:	6193      	str	r3, [r2, #24]
 8003148:	e02b      	b.n	80031a2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003150:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003154:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003156:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003158:	2202      	movs	r2, #2
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003162:	d107      	bne.n	8003174 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	4919      	ldr	r1, [pc, #100]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800316e:	4313      	orrs	r3, r2
 8003170:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003172:	e006      	b.n	8003182 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003174:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f043 0202 	orr.w	r2, r3, #2
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 800319c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80031a0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_RTC_SetAlarm_IT+0x214>)
 80031a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a8:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <HAL_RTC_SetAlarm_IT+0x214>)
 80031aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_RTC_SetAlarm_IT+0x210>)
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40002800 	.word	0x40002800
 80031d8:	58000800 	.word	0x58000800

080031dc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_RTC_DeactivateAlarm+0x18>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e048      	b.n	8003286 <HAL_RTC_DeactivateAlarm+0xaa>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003206:	22ca      	movs	r2, #202	; 0xca
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 800320c:	2253      	movs	r2, #83	; 0x53
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003216:	d115      	bne.n	8003244 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 800321e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003222:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 800322a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800322e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f023 0201 	bic.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 800323e:	2201      	movs	r2, #1
 8003240:	65da      	str	r2, [r3, #92]	; 0x5c
 8003242:	e014      	b.n	800326e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 800324a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800324e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800325a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f023 0202 	bic.w	r2, r3, #2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 800326a:	2202      	movs	r2, #2
 800326c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003270:	22ff      	movs	r2, #255	; 0xff
 8003272:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	40002800 	.word	0x40002800

08003294 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800329e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd f981 	bl	80005c0 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80032ca:	2202      	movs	r2, #2
 80032cc:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8dc 	bl	800348c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40002800 	.word	0x40002800

080032e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RTC_WaitForSynchro+0x48>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_RTC_WaitForSynchro+0x48>)
 80032f6:	f023 0320 	bic.w	r3, r3, #32
 80032fa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80032fc:	f7fd fd6c 	bl	8000dd8 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003302:	e009      	b.n	8003318 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003304:	f7fd fd68 	bl	8000dd8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003312:	d901      	bls.n	8003318 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e006      	b.n	8003326 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RTC_WaitForSynchro+0x48>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40002800 	.word	0x40002800

08003334 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003340:	4b15      	ldr	r3, [pc, #84]	; (8003398 <RTC_EnterInitMode+0x64>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d120      	bne.n	800338e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <RTC_EnterInitMode+0x64>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <RTC_EnterInitMode+0x64>)
 8003352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003356:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003358:	f7fd fd3e 	bl	8000dd8 <HAL_GetTick>
 800335c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800335e:	e00d      	b.n	800337c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003360:	f7fd fd3a 	bl	8000dd8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800336e:	d905      	bls.n	800337c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2203      	movs	r2, #3
 8003378:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <RTC_EnterInitMode+0x64>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <RTC_EnterInitMode+0x5a>
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d1e8      	bne.n	8003360 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40002800 	.word	0x40002800

0800339c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80033a8:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <RTC_ExitInitMode+0x78>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <RTC_ExitInitMode+0x78>)
 80033ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <RTC_ExitInitMode+0x78>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10c      	bne.n	80033da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff91 	bl	80032e8 <HAL_RTC_WaitForSynchro>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2203      	movs	r2, #3
 80033d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e017      	b.n	800340a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <RTC_ExitInitMode+0x78>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <RTC_ExitInitMode+0x78>)
 80033e0:	f023 0320 	bic.w	r3, r3, #32
 80033e4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ff7e 	bl	80032e8 <HAL_RTC_WaitForSynchro>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <RTC_ExitInitMode+0x78>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <RTC_ExitInitMode+0x78>)
 8003404:	f043 0320 	orr.w	r3, r3, #32
 8003408:	6193      	str	r3, [r2, #24]
  }

  return status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40002800 	.word	0x40002800

08003418 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800342a:	e005      	b.n	8003438 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003432:	7afb      	ldrb	r3, [r7, #11]
 8003434:	3b0a      	subs	r3, #10
 8003436:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003438:	7afb      	ldrb	r3, [r7, #11]
 800343a:	2b09      	cmp	r3, #9
 800343c:	d8f6      	bhi.n	800342c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	b2da      	uxtb	r2, r3
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	4313      	orrs	r3, r2
 800344a:	b2db      	uxtb	r3, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	b2db      	uxtb	r3, r3
 800347e:	4413      	add	r3, r2
 8003480:	b2db      	uxtb	r3, r3
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <LL_RCC_GetUSARTClockSource>:
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	401a      	ands	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	4313      	orrs	r3, r2
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <LL_RCC_GetLPUARTClockSource>:
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4013      	ands	r3, r2
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e042      	b.n	8003578 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fb23 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2224      	movs	r2, #36	; 0x24
 800350e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f976 	bl	8003814 <UART_SetConfig>
 8003528:	4603      	mov	r3, r0
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e022      	b.n	8003578 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fbde 	bl	8003cfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800354e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800355e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fc64 	bl	8003e3e <UART_CheckIdleState>
 8003576:	4603      	mov	r3, r0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	2b20      	cmp	r3, #32
 8003598:	d173      	bne.n	8003682 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_UART_Transmit+0x26>
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e06c      	b.n	8003684 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2221      	movs	r2, #33	; 0x21
 80035b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ba:	f7fd fc0d 	bl	8000dd8 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d108      	bne.n	80035ec <HAL_UART_Transmit+0x6c>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e003      	b.n	80035f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035f4:	e02c      	b.n	8003650 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fc6a 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e039      	b.n	8003684 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	3302      	adds	r3, #2
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	e007      	b.n	800363e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1cc      	bne.n	80035f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2200      	movs	r2, #0
 8003664:	2140      	movs	r1, #64	; 0x40
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fc37 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e006      	b.n	8003684 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	f040 80b1 	bne.w	800380a <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Receive+0x28>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0a9      	b.n	800380c <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2222      	movs	r2, #34	; 0x22
 80036c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ce:	f7fd fb83 	bl	8000dd8 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ec:	d10e      	bne.n	800370c <HAL_UART_Receive+0x80>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_UART_Receive+0x76>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003700:	e02d      	b.n	800375e <HAL_UART_Receive+0xd2>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	22ff      	movs	r2, #255	; 0xff
 8003706:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800370a:	e028      	b.n	800375e <HAL_UART_Receive+0xd2>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_UART_Receive+0xa4>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <HAL_UART_Receive+0x9a>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	22ff      	movs	r2, #255	; 0xff
 8003720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003724:	e01b      	b.n	800375e <HAL_UART_Receive+0xd2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	227f      	movs	r2, #127	; 0x7f
 800372a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800372e:	e016      	b.n	800375e <HAL_UART_Receive+0xd2>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003738:	d10d      	bne.n	8003756 <HAL_UART_Receive+0xca>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <HAL_UART_Receive+0xc0>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	227f      	movs	r2, #127	; 0x7f
 8003746:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800374a:	e008      	b.n	800375e <HAL_UART_Receive+0xd2>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	223f      	movs	r2, #63	; 0x3f
 8003750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003754:	e003      	b.n	800375e <HAL_UART_Receive+0xd2>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003764:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376e:	d108      	bne.n	8003782 <HAL_UART_Receive+0xf6>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d104      	bne.n	8003782 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	e003      	b.n	800378a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800378a:	e032      	b.n	80037f2 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2200      	movs	r2, #0
 8003794:	2120      	movs	r1, #32
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fb9f 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e032      	b.n	800380c <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10c      	bne.n	80037c6 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	8a7b      	ldrh	r3, [r7, #18]
 80037b6:	4013      	ands	r3, r2
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	3302      	adds	r3, #2
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e00c      	b.n	80037e0 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8a7b      	ldrh	r3, [r7, #18]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4013      	ands	r3, r2
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3301      	adds	r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1c6      	bne.n	800378c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b08c      	sub	sp, #48	; 0x30
 800381a:	af00      	add	r7, sp, #0
 800381c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	431a      	orrs	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	431a      	orrs	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4313      	orrs	r3, r2
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b94      	ldr	r3, [pc, #592]	; (8003a94 <UART_SetConfig+0x280>)
 8003844:	4013      	ands	r3, r2
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800384c:	430b      	orrs	r3, r1
 800384e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a89      	ldr	r2, [pc, #548]	; (8003a98 <UART_SetConfig+0x284>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387c:	4313      	orrs	r3, r2
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800388a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003894:	430b      	orrs	r3, r1
 8003896:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f023 010f 	bic.w	r1, r3, #15
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7a      	ldr	r2, [pc, #488]	; (8003a9c <UART_SetConfig+0x288>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d127      	bne.n	8003908 <UART_SetConfig+0xf4>
 80038b8:	2003      	movs	r0, #3
 80038ba:	f7ff fdf0 	bl	800349e <LL_RCC_GetUSARTClockSource>
 80038be:	4603      	mov	r3, r0
 80038c0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d81b      	bhi.n	8003900 <UART_SetConfig+0xec>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <UART_SetConfig+0xbc>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038f1 	.word	0x080038f1
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e080      	b.n	80039ea <UART_SetConfig+0x1d6>
 80038e8:	2302      	movs	r3, #2
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e07c      	b.n	80039ea <UART_SetConfig+0x1d6>
 80038f0:	2304      	movs	r3, #4
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e078      	b.n	80039ea <UART_SetConfig+0x1d6>
 80038f8:	2308      	movs	r3, #8
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fe:	e074      	b.n	80039ea <UART_SetConfig+0x1d6>
 8003900:	2310      	movs	r3, #16
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003906:	e070      	b.n	80039ea <UART_SetConfig+0x1d6>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a64      	ldr	r2, [pc, #400]	; (8003aa0 <UART_SetConfig+0x28c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d138      	bne.n	8003984 <UART_SetConfig+0x170>
 8003912:	200c      	movs	r0, #12
 8003914:	f7ff fdc3 	bl	800349e <LL_RCC_GetUSARTClockSource>
 8003918:	4603      	mov	r3, r0
 800391a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d82c      	bhi.n	800397c <UART_SetConfig+0x168>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x114>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	0800395d 	.word	0x0800395d
 800392c:	0800397d 	.word	0x0800397d
 8003930:	0800397d 	.word	0x0800397d
 8003934:	0800397d 	.word	0x0800397d
 8003938:	0800396d 	.word	0x0800396d
 800393c:	0800397d 	.word	0x0800397d
 8003940:	0800397d 	.word	0x0800397d
 8003944:	0800397d 	.word	0x0800397d
 8003948:	08003965 	.word	0x08003965
 800394c:	0800397d 	.word	0x0800397d
 8003950:	0800397d 	.word	0x0800397d
 8003954:	0800397d 	.word	0x0800397d
 8003958:	08003975 	.word	0x08003975
 800395c:	2300      	movs	r3, #0
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e042      	b.n	80039ea <UART_SetConfig+0x1d6>
 8003964:	2302      	movs	r3, #2
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e03e      	b.n	80039ea <UART_SetConfig+0x1d6>
 800396c:	2304      	movs	r3, #4
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003972:	e03a      	b.n	80039ea <UART_SetConfig+0x1d6>
 8003974:	2308      	movs	r3, #8
 8003976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397a:	e036      	b.n	80039ea <UART_SetConfig+0x1d6>
 800397c:	2310      	movs	r3, #16
 800397e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003982:	e032      	b.n	80039ea <UART_SetConfig+0x1d6>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <UART_SetConfig+0x284>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12a      	bne.n	80039e4 <UART_SetConfig+0x1d0>
 800398e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003992:	f7ff fd96 	bl	80034c2 <LL_RCC_GetLPUARTClockSource>
 8003996:	4603      	mov	r3, r0
 8003998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800399c:	d01a      	beq.n	80039d4 <UART_SetConfig+0x1c0>
 800399e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a2:	d81b      	bhi.n	80039dc <UART_SetConfig+0x1c8>
 80039a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a8:	d00c      	beq.n	80039c4 <UART_SetConfig+0x1b0>
 80039aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ae:	d815      	bhi.n	80039dc <UART_SetConfig+0x1c8>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <UART_SetConfig+0x1a8>
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b8:	d008      	beq.n	80039cc <UART_SetConfig+0x1b8>
 80039ba:	e00f      	b.n	80039dc <UART_SetConfig+0x1c8>
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c2:	e012      	b.n	80039ea <UART_SetConfig+0x1d6>
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ca:	e00e      	b.n	80039ea <UART_SetConfig+0x1d6>
 80039cc:	2304      	movs	r3, #4
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d2:	e00a      	b.n	80039ea <UART_SetConfig+0x1d6>
 80039d4:	2308      	movs	r3, #8
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039da:	e006      	b.n	80039ea <UART_SetConfig+0x1d6>
 80039dc:	2310      	movs	r3, #16
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e2:	e002      	b.n	80039ea <UART_SetConfig+0x1d6>
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <UART_SetConfig+0x284>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	f040 80a4 	bne.w	8003b3e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d823      	bhi.n	8003a46 <UART_SetConfig+0x232>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x1f0>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a47 	.word	0x08003a47
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a47 	.word	0x08003a47
 8003a14:	08003a37 	.word	0x08003a37
 8003a18:	08003a47 	.word	0x08003a47
 8003a1c:	08003a47 	.word	0x08003a47
 8003a20:	08003a47 	.word	0x08003a47
 8003a24:	08003a3f 	.word	0x08003a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fd94 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a2e:	e010      	b.n	8003a52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a30:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <UART_SetConfig+0x290>)
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a34:	e00d      	b.n	8003a52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a36:	f7fe fcd9 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8003a3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a3c:	e009      	b.n	8003a52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a44:	e005      	b.n	8003a52 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8137 	beq.w	8003cc8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <UART_SetConfig+0x294>)
 8003a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d305      	bcc.n	8003a8a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d910      	bls.n	8003aac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a90:	e11a      	b.n	8003cc8 <UART_SetConfig+0x4b4>
 8003a92:	bf00      	nop
 8003a94:	cfff69f3 	.word	0xcfff69f3
 8003a98:	40008000 	.word	0x40008000
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	08006e9c 	.word	0x08006e9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	60fa      	str	r2, [r7, #12]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	4a8e      	ldr	r2, [pc, #568]	; (8003cf4 <UART_SetConfig+0x4e0>)
 8003aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ace:	f7fc fbaf 	bl	8000230 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	020b      	lsls	r3, r1, #8
 8003ae4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ae8:	0202      	lsls	r2, r0, #8
 8003aea:	6979      	ldr	r1, [r7, #20]
 8003aec:	6849      	ldr	r1, [r1, #4]
 8003aee:	0849      	lsrs	r1, r1, #1
 8003af0:	2000      	movs	r0, #0
 8003af2:	460c      	mov	r4, r1
 8003af4:	4605      	mov	r5, r0
 8003af6:	eb12 0804 	adds.w	r8, r2, r4
 8003afa:	eb43 0905 	adc.w	r9, r3, r5
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	469a      	mov	sl, r3
 8003b06:	4693      	mov	fp, r2
 8003b08:	4652      	mov	r2, sl
 8003b0a:	465b      	mov	r3, fp
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4649      	mov	r1, r9
 8003b10:	f7fc fb8e 	bl	8000230 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4613      	mov	r3, r2
 8003b1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b22:	d308      	bcc.n	8003b36 <UART_SetConfig+0x322>
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2a:	d204      	bcs.n	8003b36 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	e0c8      	b.n	8003cc8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b3c:	e0c4      	b.n	8003cc8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b46:	d167      	bne.n	8003c18 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003b48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d828      	bhi.n	8003ba2 <UART_SetConfig+0x38e>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <UART_SetConfig+0x344>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b8d 	.word	0x08003b8d
 8003b64:	08003ba3 	.word	0x08003ba3
 8003b68:	08003b93 	.word	0x08003b93
 8003b6c:	08003ba3 	.word	0x08003ba3
 8003b70:	08003ba3 	.word	0x08003ba3
 8003b74:	08003ba3 	.word	0x08003ba3
 8003b78:	08003b9b 	.word	0x08003b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7fe fcea 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003b80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b82:	e014      	b.n	8003bae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7fe fcf8 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8003b88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b8a:	e010      	b.n	8003bae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b8c:	4b5a      	ldr	r3, [pc, #360]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b90:	e00d      	b.n	8003bae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b92:	f7fe fc2b 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b98:	e009      	b.n	8003bae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ba0:	e005      	b.n	8003bae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8089 	beq.w	8003cc8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	4a4e      	ldr	r2, [pc, #312]	; (8003cf4 <UART_SetConfig+0x4e0>)
 8003bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc8:	005a      	lsls	r2, r3, #1
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	441a      	add	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d916      	bls.n	8003c10 <UART_SetConfig+0x3fc>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d212      	bcs.n	8003c10 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f023 030f 	bic.w	r3, r3, #15
 8003bf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	8bfb      	ldrh	r3, [r7, #30]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	8bfa      	ldrh	r2, [r7, #30]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	e05b      	b.n	8003cc8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c16:	e057      	b.n	8003cc8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d828      	bhi.n	8003c72 <UART_SetConfig+0x45e>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <UART_SetConfig+0x414>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c73 	.word	0x08003c73
 8003c38:	08003c63 	.word	0x08003c63
 8003c3c:	08003c73 	.word	0x08003c73
 8003c40:	08003c73 	.word	0x08003c73
 8003c44:	08003c73 	.word	0x08003c73
 8003c48:	08003c6b 	.word	0x08003c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe fc82 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c52:	e014      	b.n	8003c7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c54:	f7fe fc90 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8003c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c5a:	e010      	b.n	8003c7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c60:	e00d      	b.n	8003c7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c62:	f7fe fbc3 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8003c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c68:	e009      	b.n	8003c7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c70:	e005      	b.n	8003c7e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d021      	beq.n	8003cc8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <UART_SetConfig+0x4e0>)
 8003c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	441a      	add	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b0f      	cmp	r3, #15
 8003cac:	d909      	bls.n	8003cc2 <UART_SetConfig+0x4ae>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb4:	d205      	bcs.n	8003cc2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	e002      	b.n	8003cc8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003ce4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3730      	adds	r7, #48	; 0x30
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	08006e9c 	.word	0x08006e9c
 8003cf8:	00f42400 	.word	0x00f42400

08003cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfa:	d10a      	bne.n	8003e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e4e:	f7fc ffc3 	bl	8000dd8 <HAL_GetTick>
 8003e52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d10e      	bne.n	8003e80 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f832 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e028      	b.n	8003ed2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d10e      	bne.n	8003eac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f81c 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e012      	b.n	8003ed2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b09c      	sub	sp, #112	; 0x70
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	e0a9      	b.n	8004040 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef2:	f000 80a5 	beq.w	8004040 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fc ff6f 	bl	8000dd8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d140      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f20:	667b      	str	r3, [r7, #100]	; 0x64
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e6      	bne.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e069      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d051      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003faa:	d149      	bne.n	8004040 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004008:	623a      	str	r2, [r7, #32]
 800400a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	61bb      	str	r3, [r7, #24]
   return(result);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e010      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69da      	ldr	r2, [r3, #28]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	429a      	cmp	r2, r3
 800405c:	f43f af46 	beq.w	8003eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3770      	adds	r7, #112	; 0x70
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_UARTEx_DisableFifoMode+0x16>
 800407c:	2302      	movs	r3, #2
 800407e:	e027      	b.n	80040d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e02d      	b.n	800414e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2224      	movs	r2, #36	; 0x24
 80040fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f850 	bl	80041d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800416a:	2302      	movs	r3, #2
 800416c:	e02d      	b.n	80041ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	; 0x24
 800417a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f812 	bl	80041d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041f4:	e031      	b.n	800425a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041f6:	2308      	movs	r3, #8
 80041f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041fa:	2308      	movs	r3, #8
 80041fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	0e5b      	lsrs	r3, r3, #25
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	0f5b      	lsrs	r3, r3, #29
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	7b3a      	ldrb	r2, [r7, #12]
 8004222:	4910      	ldr	r1, [pc, #64]	; (8004264 <UARTEx_SetNbDataToProcess+0x90>)
 8004224:	5c8a      	ldrb	r2, [r1, r2]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800422a:	7b3a      	ldrb	r2, [r7, #12]
 800422c:	490e      	ldr	r1, [pc, #56]	; (8004268 <UARTEx_SetNbDataToProcess+0x94>)
 800422e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004230:	fb93 f3f2 	sdiv	r3, r3, r2
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	7b7a      	ldrb	r2, [r7, #13]
 8004240:	4908      	ldr	r1, [pc, #32]	; (8004264 <UARTEx_SetNbDataToProcess+0x90>)
 8004242:	5c8a      	ldrb	r2, [r1, r2]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004248:	7b7a      	ldrb	r2, [r7, #13]
 800424a:	4907      	ldr	r1, [pc, #28]	; (8004268 <UARTEx_SetNbDataToProcess+0x94>)
 800424c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800424e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004252:	b29a      	uxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	08006eb4 	.word	0x08006eb4
 8004268:	08006ebc 	.word	0x08006ebc

0800426c <calendar_init>:
 * this module.
 *
 * Note: will not reinitialize/reset if already initialized.
 */
CalendarStatus calendar_init(RTC_HandleTypeDef* hrtc)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	// check for pointer to initialized RTC handle
	if (hrtc != NULL && hrtc->Instance != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d015      	beq.n	80042a6 <calendar_init+0x3a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d011      	beq.n	80042a6 <calendar_init+0x3a>
	{
		// initialize only if not already initialized
		if (!_isInit)
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <calendar_init+0x44>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	f083 0301 	eor.w	r3, r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <calendar_init+0x36>
		{
			// pass pointer to alarm control
			rtcCalendarControl_init(hrtc);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fbbb 	bl	8004a0c <rtcCalendarControl_init>

			// initialize the calendar
			eventSLL_reset(&_eventQueue);
 8004296:	4807      	ldr	r0, [pc, #28]	; (80042b4 <calendar_init+0x48>)
 8004298:	f000 f93c 	bl	8004514 <eventSLL_reset>

			// set init flag
			_isInit = true;
 800429c:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <calendar_init+0x44>)
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
		}

		return CALENDAR_OKAY;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <calendar_init+0x3c>
	}

	// module already initialized
	else
	{
		return CALENDAR_ERROR;
 80042a6:	2301      	movs	r3, #1
	}
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000160 	.word	0x20000160
 80042b4:	20000164 	.word	0x20000164

080042b8 <calendar_start>:
 * and sets RTC Alarm A for the next event transition (start or end of event).
 * Executes start of event callback if starting within an event.  Ignores past
 * events.
 */
CalendarStatus calendar_start(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
	// if the module has been initialized
	if (_isInit)
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <calendar_start+0x34>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00f      	beq.n	80042e4 <calendar_start+0x2c>
	{
		// only start if the calendar has been paused
		if (!_isRunning)
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <calendar_start+0x38>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f083 0301 	eor.w	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <calendar_start+0x28>
		{
			_update();
 80042d2:	f000 f8ab 	bl	800442c <_update>

			// set is running flag
			_isRunning = true;
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <calendar_start+0x38>)
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]

			return CALENDAR_OKAY;
 80042dc:	2300      	movs	r3, #0
 80042de:	e002      	b.n	80042e6 <calendar_start+0x2e>
		}

		// report that the calendar is already running
		else
		{
			return CALENDAR_RUNNING;
 80042e0:	2306      	movs	r3, #6
 80042e2:	e000      	b.n	80042e6 <calendar_start+0x2e>
	}

	// module is not initialized
	else
	{
		return CALENDAR_NOT_INIT;
 80042e4:	2302      	movs	r3, #2
	}
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000160 	.word	0x20000160
 80042f0:	20000161 	.word	0x20000161

080042f4 <calendar_setDateTime>:
/* calendar_setDateTime
 *
 * Set the date/time within the RTC.
 */
CalendarStatus calendar_setDateTime(const DateTime dateTime)
{
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	463b      	mov	r3, r7
 80042fc:	e883 0003 	stmia.w	r3, {r0, r1}
	// if the module has been initialized
	if (_isInit)
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <calendar_setDateTime+0x3c>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <calendar_setDateTime+0x30>
	{
		// set the date and time in the RTC
		rtcCalendarControl_setDateTime(dateTime.year, dateTime.month, dateTime.day,
 8004308:	7838      	ldrb	r0, [r7, #0]
 800430a:	7879      	ldrb	r1, [r7, #1]
 800430c:	78bc      	ldrb	r4, [r7, #2]
 800430e:	78fd      	ldrb	r5, [r7, #3]
 8004310:	793b      	ldrb	r3, [r7, #4]
 8004312:	797a      	ldrb	r2, [r7, #5]
 8004314:	9201      	str	r2, [sp, #4]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	462b      	mov	r3, r5
 800431a:	4622      	mov	r2, r4
 800431c:	f000 fb90 	bl	8004a40 <rtcCalendarControl_setDateTime>
				dateTime.hour, dateTime.minute, dateTime.second);

		return CALENDAR_OKAY;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <calendar_setDateTime+0x32>
	}

	// if the module has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004324:	2302      	movs	r3, #2
	}
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bdb0      	pop	{r4, r5, r7, pc}
 800432e:	bf00      	nop
 8004330:	20000160 	.word	0x20000160

08004334 <calendar_getDateTime>:
/* calendar_getDateTime
 *
 * Get the date/time within the RTC.
 */
CalendarStatus calendar_getDateTime(DateTime* const dateTime)
{
 8004334:	b5b0      	push	{r4, r5, r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
	// if the module is initialized
	if (_isInit)
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <calendar_getDateTime+0x40>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d012      	beq.n	800436a <calendar_getDateTime+0x36>
	{
		// get the date and time in the RTC
		rtcCalendarControl_getDateTime(&(dateTime->year), &(dateTime->month),
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1c59      	adds	r1, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	1c9c      	adds	r4, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1cdd      	adds	r5, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	3205      	adds	r2, #5
 800435a:	9201      	str	r2, [sp, #4]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	462b      	mov	r3, r5
 8004360:	4622      	mov	r2, r4
 8004362:	f000 fc43 	bl	8004bec <rtcCalendarControl_getDateTime>
				&(dateTime->day), &(dateTime->hour), &(dateTime->minute),
				&(dateTime->second));

		return CALENDAR_OKAY;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <calendar_getDateTime+0x38>
	}

	// the module has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 800436a:	2302      	movs	r3, #2
	}
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bdb0      	pop	{r4, r5, r7, pc}
 8004374:	20000160 	.word	0x20000160

08004378 <calendar_addEvent>:
 *
 * Note: does not sort events in monotonic order, nor does it check for
 * 	overlapping events.
 */
CalendarStatus calendar_addEvent(const struct CalendarEvent event)
{
 8004378:	b084      	sub	sp, #16
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af02      	add	r7, sp, #8
 8004380:	f107 0c08 	add.w	ip, r7, #8
 8004384:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// add only if the calendar has been initialized
	if (_isInit)
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <calendar_addEvent+0x50>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <calendar_addEvent+0x40>
	{
		// attempt to add event and report success/failure
		if (eventSLL_insert(&_eventQueue, event))
 8004390:	466a      	mov	r2, sp
 8004392:	f107 0314 	add.w	r3, r7, #20
 8004396:	e893 0003 	ldmia.w	r3, {r0, r1}
 800439a:	e882 0003 	stmia.w	r2, {r0, r1}
 800439e:	f107 0308 	add.w	r3, r7, #8
 80043a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043a4:	4809      	ldr	r0, [pc, #36]	; (80043cc <calendar_addEvent+0x54>)
 80043a6:	f000 f901 	bl	80045ac <eventSLL_insert>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <calendar_addEvent+0x3c>
		{
			return CALENDAR_OKAY;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e002      	b.n	80043ba <calendar_addEvent+0x42>
		}
		else
		{
			return CALENDAR_FULL;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e000      	b.n	80043ba <calendar_addEvent+0x42>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 80043b8:	2302      	movs	r3, #2
	}
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c2:	b004      	add	sp, #16
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000160 	.word	0x20000160
 80043cc:	20000164 	.word	0x20000164

080043d0 <calendar_update>:
 * Note:
 * 	Will not run if the module has not been initialized and if the calendar
 * 	is not running.
 */
CalendarStatus calendar_update(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
	// if the calendar module has been initialized
	if (_isInit)
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <calendar_update+0x38>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d011      	beq.n	8004400 <calendar_update+0x30>
	{
		// only update if the calendar is running
		if (_isRunning)
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <calendar_update+0x3c>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <calendar_update+0x2c>
		{
			// only update if an alarm has fired
			if (_alarmAFired) {
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <calendar_update+0x40>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <calendar_update+0x28>
				// update the calendar's state
				_update();
 80043ee:	f000 f81d 	bl	800442c <_update>

				// reset alarm fired flag
				_alarmAFired = false;
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <calendar_update+0x40>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
			}

			return CALENDAR_OKAY;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e002      	b.n	8004402 <calendar_update+0x32>
		}

		// report that the calendar is paused
		else
		{
			return CALENDAR_PAUSED;
 80043fc:	2305      	movs	r3, #5
 80043fe:	e000      	b.n	8004402 <calendar_update+0x32>
	}

	// the module is not initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004400:	2302      	movs	r3, #2
	}
}
 8004402:	4618      	mov	r0, r3
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000160 	.word	0x20000160
 800440c:	20000161 	.word	0x20000161
 8004410:	20000162 	.word	0x20000162

08004414 <calendar_AlarmA_ISR>:
 *
 * RTC Alarm A interrupt service routine.  To only be called within the
 * RTC Alarm A ISR (HAL_RTC_AlarmAEventCallback()).
 */
void calendar_AlarmA_ISR(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <calendar_AlarmA_ISR+0x14>)
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000162 	.word	0x20000162

0800442c <_update>:
 * appropriately.
 *
 * Also handles reseting the alarm for events that occur in a following month/year.
 */
void _update(void)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af02      	add	r7, sp, #8
	DateTime nextAlarm;
	DateTime now;
	int prevInProgress;

	// get calendar alarm for next alarm in event list relative to now
	rtcCalendarControl_getDateTime(&(now.year), &(now.month), &(now.day),
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	1cdc      	adds	r4, r3, #3
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	1c9a      	adds	r2, r3, #2
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	1c59      	adds	r1, r3, #1
 800443e:	1d38      	adds	r0, r7, #4
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	3305      	adds	r3, #5
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	3304      	adds	r3, #4
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4623      	mov	r3, r4
 800444e:	f000 fbcd 	bl	8004bec <rtcCalendarControl_getDateTime>
			&(now.hour), &(now.minute), &(now.second));

	// store the currently running event to test index to check if an
	// event change has occurred
	prevInProgress = _eventQueue.inProgress;
 8004452:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <_update+0xe4>)
 8004454:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004458:	617b      	str	r3, [r7, #20]

	// if there is an alarm to set upon updating the events queue
	if (eventSLL_updateNow(&_eventQueue, now, &nextAlarm))
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	1d3a      	adds	r2, r7, #4
 8004460:	ca06      	ldmia	r2, {r1, r2}
 8004462:	482b      	ldr	r0, [pc, #172]	; (8004510 <_update+0xe4>)
 8004464:	f000 f9ad 	bl	80047c2 <eventSLL_updateNow>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <_update+0x50>
	{
		// set Alarm A
		rtcCalendarControl_setAlarm_A(nextAlarm.day, nextAlarm.hour,
 800446e:	7bb8      	ldrb	r0, [r7, #14]
 8004470:	7bf9      	ldrb	r1, [r7, #15]
 8004472:	7c3a      	ldrb	r2, [r7, #16]
 8004474:	7c7b      	ldrb	r3, [r7, #17]
 8004476:	f000 fc4d 	bl	8004d14 <rtcCalendarControl_setAlarm_A>
 800447a:	e001      	b.n	8004480 <_update+0x54>
	}

	// if there is no alarm to set, disable the alarm
	else
	{
		rtcCalendarControl_diableAlarm_A();
 800447c:	f000 fcec 	bl	8004e58 <rtcCalendarControl_diableAlarm_A>
	}

	// if exiting an event
	if (_eventQueue.inProgress != prevInProgress
 8004480:	4b23      	ldr	r3, [pc, #140]	; (8004510 <_update+0xe4>)
 8004482:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	429a      	cmp	r2, r3
 800448a:	d018      	beq.n	80044be <_update+0x92>
			&& prevInProgress != EVENTS_SLL_NO_EVENT)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004492:	d014      	beq.n	80044be <_update+0x92>
	{
		// call end event callback for exited event (if registered)
		if (_eventQueue.events[prevInProgress].event.end_callback != NULL)
 8004494:	491e      	ldr	r1, [pc, #120]	; (8004510 <_update+0xe4>)
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	3310      	adds	r3, #16
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <_update+0x92>
			(*_eventQueue.events[prevInProgress].event.end_callback)();
 80044aa:	4919      	ldr	r1, [pc, #100]	; (8004510 <_update+0xe4>)
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	3310      	adds	r3, #16
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4798      	blx	r3
	}

	// if entering an event
	if (_eventQueue.inProgress != EVENTS_SLL_NO_EVENT
 80044be:	4b14      	ldr	r3, [pc, #80]	; (8004510 <_update+0xe4>)
 80044c0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c8:	d01e      	beq.n	8004508 <_update+0xdc>
			&& _eventQueue.inProgress != prevInProgress)
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <_update+0xe4>)
 80044cc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d018      	beq.n	8004508 <_update+0xdc>
	{
		// call start event callback for entered event (if registered)
		if (_eventQueue.events[_eventQueue.inProgress].event.start_callback != NULL)
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <_update+0xe4>)
 80044d8:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 80044dc:	490c      	ldr	r1, [pc, #48]	; (8004510 <_update+0xe4>)
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	330c      	adds	r3, #12
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <_update+0xdc>
			(*_eventQueue.events[_eventQueue.inProgress].event.start_callback)();
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <_update+0xe4>)
 80044f2:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 80044f6:	4906      	ldr	r1, [pc, #24]	; (8004510 <_update+0xe4>)
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	330c      	adds	r3, #12
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4798      	blx	r3
	}
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}
 8004510:	20000164 	.word	0x20000164

08004514 <eventSLL_reset>:

/* eventSLL_reset
 *
 */
bool eventSLL_reset(Event_SLL* const sll)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	int idx;

	sll->inProgress = EVENTS_SLL_NO_EVENT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004522:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	sll->freeHead = 0;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
	sll->usedHead = EVENTS_SLL_NO_EVENT;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004534:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	sll->count = 0;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

	memset(sll->events, 0, sizeof(struct EventSLL_Node) * MAX_NUM_EVENTS);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f44f 7260 	mov.w	r2, #896	; 0x380
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f001 fa41 	bl	80059d0 <memset>
	for (idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e018      	b.n	8004586 <eventSLL_reset+0x72>
	{
		sll->events[idx].id = EVENTS_SLL_NO_EVENT;
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	3314      	adds	r3, #20
 8004564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004568:	601a      	str	r2, [r3, #0]
		sll->events[idx].next = idx + 1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1c59      	adds	r1, r3, #1
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4403      	add	r3, r0
 800457c:	3318      	adds	r3, #24
 800457e:	6019      	str	r1, [r3, #0]
	for (idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b1e      	cmp	r3, #30
 800458a:	dde3      	ble.n	8004554 <eventSLL_reset+0x40>
	}
	sll->events[idx].next = EVENTS_SLL_NO_EVENT;
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3318      	adds	r3, #24
 800459c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045a0:	601a      	str	r2, [r3, #0]

	return true;
 80045a2:	2301      	movs	r3, #1
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <eventSLL_insert>:

/* eventSLL_insert
 *
 */
bool eventSLL_insert(Event_SLL* const sll, const struct CalendarEvent event)
{
 80045ac:	b084      	sub	sp, #16
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int prevToInsertIdx;
	int toInsertIdx;
	int tempIdx;

	// if list is not full
	if (sll->count < MAX_NUM_EVENTS)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 80045c4:	2b1f      	cmp	r3, #31
 80045c6:	f200 80f4 	bhi.w	80047b2 <eventSLL_insert+0x206>
	{
		// if the list is empty, insert at beginning
		if (sll->usedHead == EVENTS_SLL_NO_EVENT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d4:	d123      	bne.n	800461e <eventSLL_insert+0x72>
		{
			// set used and free heads
			sll->usedHead = sll->freeHead;							// point head of used to head of free
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			sll->freeHead = sll->events[sll->freeHead].next;		// point head of free to next of free
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	3318      	adds	r3, #24
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
			toInsertIdx = sll->usedHead;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004604:	613b      	str	r3, [r7, #16]
			sll->events[toInsertIdx].next = EVENTS_SLL_NO_EVENT;	// point head of used to none
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	3318      	adds	r3, #24
 8004616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e0a9      	b.n	8004772 <eventSLL_insert+0x1c6>
		}

		// the list is not empty
		// iterate over list and insert where appropriate for monotonic ordering
		else if (sll->count < MAX_NUM_EVENTS)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 8004624:	2b1f      	cmp	r3, #31
 8004626:	f200 80a4 	bhi.w	8004772 <eventSLL_insert+0x1c6>
		{
			// if inserting at start
			if (_compareDateTime(event.start, sll->events[sll->usedHead].event.start) < 0)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	cb0c      	ldmia	r3, {r2, r3}
 800463e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004642:	c903      	ldmia	r1, {r0, r1}
 8004644:	f000 f990 	bl	8004968 <_compareDateTime>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	da2e      	bge.n	80046ac <eventSLL_insert+0x100>
			{
				// take from head of free nodes and move to start of used nodes
				tempIdx = sll->usedHead;							// store head of used in temp
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004654:	60fb      	str	r3, [r7, #12]
				sll->events[sll->usedHead].next = sll->freeHead;	// point head of used to head of free
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4403      	add	r3, r0
 800466e:	3318      	adds	r3, #24
 8004670:	6019      	str	r1, [r3, #0]
				sll->freeHead = sll->events[sll->freeHead].next;	// point head of free to next of free
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	3318      	adds	r3, #24
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
				toInsertIdx = sll->usedHead;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004694:	613b      	str	r3, [r7, #16]
				sll->events[toInsertIdx].next = tempIdx;			// point head of used to stored in temp
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	3318      	adds	r3, #24
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e062      	b.n	8004772 <eventSLL_insert+0x1c6>

			// if inserting not at the start
			else
			{
				// find node previous to where to insert
				prevToInsertIdx = sll->usedHead;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80046b2:	617b      	str	r3, [r7, #20]
				// while insert event's start time is less than each event's start time
				// already in the list, iterate list
				// if the start times are equal, then inserting after the current iteration
				// does not care about end times of events
				while (_compareDateTime(event.start, sll->events[prevToInsertIdx].event.start) >= 0
 80046b4:	e009      	b.n	80046ca <eventSLL_insert+0x11e>
						&& sll->events[prevToInsertIdx].next != EVENTS_SLL_NO_EVENT)
					prevToInsertIdx = sll->events[prevToInsertIdx].next;
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3318      	adds	r3, #24
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	617b      	str	r3, [r7, #20]
				while (_compareDateTime(event.start, sll->events[prevToInsertIdx].event.start) >= 0
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	cb0c      	ldmia	r3, {r2, r3}
 80046da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80046de:	c903      	ldmia	r1, {r0, r1}
 80046e0:	f000 f942 	bl	8004968 <_compareDateTime>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db0b      	blt.n	8004702 <eventSLL_insert+0x156>
						&& sll->events[prevToInsertIdx].next != EVENTS_SLL_NO_EVENT)
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	3318      	adds	r3, #24
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004700:	d1d9      	bne.n	80046b6 <eventSLL_insert+0x10a>

				// perform insert
				tempIdx = sll->events[prevToInsertIdx].next;		// store previous to insert in temp
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	3318      	adds	r3, #24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]
				sll->events[prevToInsertIdx].next = sll->freeHead;	// point next to insert to head of free
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4403      	add	r3, r0
 800472a:	3318      	adds	r3, #24
 800472c:	6019      	str	r1, [r3, #0]
				sll->freeHead = sll->events[sll->freeHead].next;	// point head of free to next of free
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3318      	adds	r3, #24
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
				toInsertIdx = sll->events[prevToInsertIdx].next;
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	3318      	adds	r3, #24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
				sll->events[toInsertIdx].next = tempIdx;			// point new node to stored in temp
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	3318      	adds	r3, #24
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]
			}
		}

		// copy event into new node
		_copyEvent(&(sll->events[toInsertIdx].event), &event);
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f88a 	bl	80048a0 <_copyEvent>

		// set ID
		sll->events[toInsertIdx].id = toInsertIdx;
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3314      	adds	r3, #20
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	601a      	str	r2, [r3, #0]

		// increment count
		(sll->count)++;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

		return true;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <eventSLL_insert+0x208>
	}

	// if the list is full
	else
	{
		return false;
 80047b2:	2300      	movs	r3, #0
	}
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047be:	b004      	add	sp, #16
 80047c0:	4770      	bx	lr

080047c2 <eventSLL_updateNow>:

/* eventSLL_updateNow
 *
 */
bool eventSLL_updateNow(Event_SLL* const sll, const DateTime now, DateTime* const alarm)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	1d38      	adds	r0, r7, #4
 80047cc:	e880 0006 	stmia.w	r0, {r1, r2}
 80047d0:	603b      	str	r3, [r7, #0]
	int idx;

	idx = sll->usedHead;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80047d8:	617b      	str	r3, [r7, #20]
	while (idx != EVENTS_SLL_NO_EVENT)
 80047da:	e053      	b.n	8004884 <eventSLL_updateNow+0xc2>
	{
		// if the current iteration's end time has past
		// mark as past
		if (_compareDateTime(now, sll->events[idx].event.end) >= 0)
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3306      	adds	r3, #6
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4611      	mov	r1, r2
 80047f0:	889a      	ldrh	r2, [r3, #4]
 80047f2:	2300      	movs	r3, #0
 80047f4:	f362 030f 	bfi	r3, r2, #0, #16
 80047f8:	460a      	mov	r2, r1
 80047fa:	1d39      	adds	r1, r7, #4
 80047fc:	c903      	ldmia	r1, {r0, r1}
 80047fe:	f000 f8b3 	bl	8004968 <_compareDateTime>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	db0a      	blt.n	800481e <eventSLL_updateNow+0x5c>
		{
			// go to next event
			idx = sll->events[idx].next;
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	3318      	adds	r3, #24
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e032      	b.n	8004884 <eventSLL_updateNow+0xc2>
		}

		// now is within event
		// return alarm for end of event
		else if (_compareDateTime(now, sll->events[idx].event.start) >= 0)
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	cb0c      	ldmia	r3, {r2, r3}
 800482e:	1d39      	adds	r1, r7, #4
 8004830:	c903      	ldmia	r1, {r0, r1}
 8004832:	f000 f899 	bl	8004968 <_compareDateTime>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	db11      	blt.n	8004860 <eventSLL_updateNow+0x9e>
		{
			// set sll inProgress pointer to this event and exit
			sll->inProgress = idx;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
			_copyDateTime(alarm, &(sll->events[idx].event.end));
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	3306      	adds	r3, #6
 8004854:	4619      	mov	r1, r3
 8004856:	6838      	ldr	r0, [r7, #0]
 8004858:	f000 f864 	bl	8004924 <_copyDateTime>
			return true;
 800485c:	2301      	movs	r3, #1
 800485e:	e01b      	b.n	8004898 <eventSLL_updateNow+0xd6>

		// event is in the future (next)
		// return alarm for start of event
		else
		{
			sll->inProgress = EVENTS_SLL_NO_EVENT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004866:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
			_copyDateTime(alarm, &(sll->events[idx].event.start));
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	4619      	mov	r1, r3
 800487a:	6838      	ldr	r0, [r7, #0]
 800487c:	f000 f852 	bl	8004924 <_copyDateTime>
			return true;
 8004880:	2301      	movs	r3, #1
 8004882:	e009      	b.n	8004898 <eventSLL_updateNow+0xd6>
	while (idx != EVENTS_SLL_NO_EVENT)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488a:	d1a7      	bne.n	80047dc <eventSLL_updateNow+0x1a>
		}
	}

	// no alarms to set
	sll->inProgress = EVENTS_SLL_NO_EVENT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004892:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	return false;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <_copyEvent>:
/* _copyEvent
 *
 * Copy the contents of one CalenderEvent into another.
 */
void _copyEvent(struct CalendarEvent* const to, const struct CalendarEvent* const from)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	785a      	ldrb	r2, [r3, #1]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	789a      	ldrb	r2, [r3, #2]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	78da      	ldrb	r2, [r3, #3]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	791a      	ldrb	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	795a      	ldrb	r2, [r3, #5]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60da      	str	r2, [r3, #12]
	to->end.year = from->end.year;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	799a      	ldrb	r2, [r3, #6]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	719a      	strb	r2, [r3, #6]
	to->end.month = from->end.month;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	79da      	ldrb	r2, [r3, #7]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	71da      	strb	r2, [r3, #7]
	to->end.day = from->end.day;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	7a1a      	ldrb	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	721a      	strb	r2, [r3, #8]
	to->end.hour = from->end.hour;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	7a5a      	ldrb	r2, [r3, #9]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	725a      	strb	r2, [r3, #9]
	to->end.minute = from->end.minute;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	7a9a      	ldrb	r2, [r3, #10]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	729a      	strb	r2, [r3, #10]
	to->end.second = from->end.second;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	7ada      	ldrb	r2, [r3, #11]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	72da      	strb	r2, [r3, #11]
	to->end_callback = from->end_callback;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	611a      	str	r2, [r3, #16]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <_copyDateTime>:

/* _copyDateTime
 *
 */
void _copyDateTime(DateTime* const to, DateTime* const from)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	to->year = from->year;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781a      	ldrb	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	701a      	strb	r2, [r3, #0]
	to->month = from->month;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	785a      	ldrb	r2, [r3, #1]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	705a      	strb	r2, [r3, #1]
	to->day = from->day;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	789a      	ldrb	r2, [r3, #2]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	709a      	strb	r2, [r3, #2]
	to->hour = from->hour;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	78da      	ldrb	r2, [r3, #3]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	70da      	strb	r2, [r3, #3]
	to->minute = from->minute;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	791a      	ldrb	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	711a      	strb	r2, [r3, #4]
	to->second = from->second;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	795a      	ldrb	r2, [r3, #5]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	715a      	strb	r2, [r3, #5]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <_compareDateTime>:
 * Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t _compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	f107 0408 	add.w	r4, r7, #8
 8004972:	e884 0003 	stmia.w	r4, {r0, r1}
 8004976:	4639      	mov	r1, r7
 8004978:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = _dateTimeToSeconds(dateTime_1);
 800497c:	f107 0308 	add.w	r3, r7, #8
 8004980:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004984:	f000 f80e 	bl	80049a4 <_dateTimeToSeconds>
 8004988:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = _dateTimeToSeconds(dateTime_2);
 800498a:	463b      	mov	r3, r7
 800498c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004990:	f000 f808 	bl	80049a4 <_dateTimeToSeconds>
 8004994:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}

080049a4 <_dateTimeToSeconds>:
 *
 * Note: assumes 30 days in a month and no leap years, it is not needed for the
 * calculation because they are used for relative comparisons, not absolute values.
 */
uint32_t _dateTimeToSeconds(DateTime dateTime)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	463b      	mov	r3, r7
 80049ac:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds
	return (dateTime.second
 80049b0:	797b      	ldrb	r3, [r7, #5]
 80049b2:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80049b4:	793b      	ldrb	r3, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	4613      	mov	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	4619      	mov	r1, r3
 80049c6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80049d0:	78bb      	ldrb	r3, [r7, #2]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	490a      	ldr	r1, [pc, #40]	; (8004a00 <_dateTimeToSeconds+0x5c>)
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 80049dc:	787b      	ldrb	r3, [r7, #1]
 80049de:	3b01      	subs	r3, #1
 80049e0:	4908      	ldr	r1, [pc, #32]	; (8004a04 <_dateTimeToSeconds+0x60>)
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 80049e8:	783b      	ldrb	r3, [r7, #0]
 80049ea:	4619      	mov	r1, r3
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <_dateTimeToSeconds+0x64>)
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	00015180 	.word	0x00015180
 8004a04:	00278d00 	.word	0x00278d00
 8004a08:	01da9c00 	.word	0x01da9c00

08004a0c <rtcCalendarControl_init>:
 * Initializes the module and stores a pointer to the HAL RTC handle.
 *
 * Note: will not reinitialize if already initialized.
 */
RtcUtilsStatus rtcCalendarControl_init(RTC_HandleTypeDef* const hrtc)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	// if an initialized RTC handle has been passed
	if (!IS_RTC_INIT(_rtc_handle))
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <rtcCalendarControl_init+0x30>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <rtcCalendarControl_init+0x1a>
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <rtcCalendarControl_init+0x30>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <rtcCalendarControl_init+0x24>
	{
		_rtc_handle = hrtc;		// store handle pointer
 8004a26:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <rtcCalendarControl_init+0x30>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6013      	str	r3, [r2, #0]
		return RTC_CALENDAR_CONTROL_OKAY;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e000      	b.n	8004a32 <rtcCalendarControl_init+0x26>
	}

	// an invalid handle or uninitialized handle passed
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004a30:	2301      	movs	r3, #1
	}
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	200004f4 	.word	0x200004f4

08004a40 <rtcCalendarControl_setDateTime>:
 * Note: does not check if parameters are within correct range.
 */
RtcUtilsStatus rtcCalendarControl_setDateTime(const uint8_t year, const uint8_t month,
		const uint8_t day, const uint8_t hour, const uint8_t minute,
		const uint8_t second)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b089      	sub	sp, #36	; 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4604      	mov	r4, r0
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	71fb      	strb	r3, [r7, #7]
 8004a52:	4603      	mov	r3, r0
 8004a54:	71bb      	strb	r3, [r7, #6]
 8004a56:	460b      	mov	r3, r1
 8004a58:	717b      	strb	r3, [r7, #5]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	// if module has been initialized
	if (IS_RTC_INIT(_rtc_handle))
 8004a5e:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <rtcCalendarControl_setDateTime+0x1a4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80b8 	beq.w	8004bd8 <rtcCalendarControl_setDateTime+0x198>
 8004a68:	4b5e      	ldr	r3, [pc, #376]	; (8004be4 <rtcCalendarControl_setDateTime+0x1a4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80b2 	beq.w	8004bd8 <rtcCalendarControl_setDateTime+0x198>
	{
		// convert from decimal to BCD
		date.Year = ((year/10) << 4) | (year % 10);
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	b258      	sxtb	r0, r3
 8004a84:	79fa      	ldrb	r2, [r7, #7]
 8004a86:	4b58      	ldr	r3, [pc, #352]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	08d9      	lsrs	r1, r3, #3
 8004a8e:	460b      	mov	r3, r1
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	4303      	orrs	r3, r0
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	77fb      	strb	r3, [r7, #31]
		date.Month = ((month/10) << 4) | (month % 10);
 8004aa4:	79bb      	ldrb	r3, [r7, #6]
 8004aa6:	4a50      	ldr	r2, [pc, #320]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	b258      	sxtb	r0, r3
 8004ab4:	79ba      	ldrb	r2, [r7, #6]
 8004ab6:	4b4c      	ldr	r3, [pc, #304]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8004abc:	08d9      	lsrs	r1, r3, #3
 8004abe:	460b      	mov	r3, r1
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	4303      	orrs	r3, r0
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	777b      	strb	r3, [r7, #29]
		date.Date = ((day/10) << 4) | (day % 10);
 8004ad4:	797b      	ldrb	r3, [r7, #5]
 8004ad6:	4a44      	ldr	r2, [pc, #272]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	08db      	lsrs	r3, r3, #3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	b258      	sxtb	r0, r3
 8004ae4:	797a      	ldrb	r2, [r7, #5]
 8004ae6:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aec:	08d9      	lsrs	r1, r3, #3
 8004aee:	460b      	mov	r3, r1
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	b25b      	sxtb	r3, r3
 8004afc:	4303      	orrs	r3, r0
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	77bb      	strb	r3, [r7, #30]
		date.WeekDay = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	773b      	strb	r3, [r7, #28]
		time.Hours = ((hour/10) << 4) | (hour % 10);
 8004b08:	793b      	ldrb	r3, [r7, #4]
 8004b0a:	4a37      	ldr	r2, [pc, #220]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	08db      	lsrs	r3, r3, #3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	b258      	sxtb	r0, r3
 8004b18:	793a      	ldrb	r2, [r7, #4]
 8004b1a:	4b33      	ldr	r3, [pc, #204]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b20:	08d9      	lsrs	r1, r3, #3
 8004b22:	460b      	mov	r3, r1
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	4303      	orrs	r3, r0
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	723b      	strb	r3, [r7, #8]
		time.Minutes = ((minute/10) << 4) | (minute % 10);
 8004b38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	08db      	lsrs	r3, r3, #3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	b258      	sxtb	r0, r3
 8004b4a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004b50:	fba3 1302 	umull	r1, r3, r3, r2
 8004b54:	08d9      	lsrs	r1, r3, #3
 8004b56:	460b      	mov	r3, r1
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	b25b      	sxtb	r3, r3
 8004b64:	4303      	orrs	r3, r0
 8004b66:	b25b      	sxtb	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	727b      	strb	r3, [r7, #9]
		time.Seconds = ((second/10) << 4) | (second % 10);
 8004b6c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b70:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	08db      	lsrs	r3, r3, #3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	b258      	sxtb	r0, r3
 8004b7e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004b82:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <rtcCalendarControl_setDateTime+0x1a8>)
 8004b84:	fba3 1302 	umull	r1, r3, r3, r2
 8004b88:	08d9      	lsrs	r1, r3, #3
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	4303      	orrs	r3, r0
 8004b9a:	b25b      	sxtb	r3, r3
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	72bb      	strb	r3, [r7, #10]

		// Set the date.
		if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT_BCD) != HAL_OK) {
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <rtcCalendarControl_setDateTime+0x1a4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f107 011c 	add.w	r1, r7, #28
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe f936 	bl	8002e1c <HAL_RTC_SetDate>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <rtcCalendarControl_setDateTime+0x17a>
			// HAL timeout
			return RTC_CALENDAR_CONTROL_TIMEOUT;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e00f      	b.n	8004bda <rtcCalendarControl_setDateTime+0x19a>
		}

		// Set the time.
		if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT_BCD) != HAL_OK) {
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <rtcCalendarControl_setDateTime+0x1a4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f107 0108 	add.w	r1, r7, #8
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe f82b 	bl	8002c20 <HAL_RTC_SetTime>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <rtcCalendarControl_setDateTime+0x194>
			// HAL timeout
			return RTC_CALENDAR_CONTROL_TIMEOUT;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e002      	b.n	8004bda <rtcCalendarControl_setDateTime+0x19a>
		}

		return RTC_CALENDAR_CONTROL_OKAY;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <rtcCalendarControl_setDateTime+0x19a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004bd8:	2301      	movs	r3, #1
	}
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3724      	adds	r7, #36	; 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd90      	pop	{r4, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200004f4 	.word	0x200004f4
 8004be8:	cccccccd 	.word	0xcccccccd

08004bec <rtcCalendarControl_getDateTime>:
 * Gets the date and time within the RTC.
 */
RtcUtilsStatus rtcCalendarControl_getDateTime(uint8_t* const year, uint8_t* const month,
		uint8_t* const day, uint8_t* const hour, uint8_t* const minute,
		uint8_t* const second)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
	RTC_TimeTypeDef time = {0};
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]

	// if the module has been initialized
	if (IS_RTC_INIT(_rtc_handle))
 8004c0e:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <rtcCalendarControl_getDateTime+0x124>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d076      	beq.n	8004d04 <rtcCalendarControl_getDateTime+0x118>
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <rtcCalendarControl_getDateTime+0x124>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d071      	beq.n	8004d04 <rtcCalendarControl_getDateTime+0x118>
	{
		// Get the time and the date.
		HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT_BCD);
 8004c20:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <rtcCalendarControl_getDateTime+0x124>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f107 0114 	add.w	r1, r7, #20
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe f894 	bl	8002d58 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT_BCD);
 8004c30:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <rtcCalendarControl_getDateTime+0x124>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f107 0110 	add.w	r1, r7, #16
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe f974 	bl	8002f28 <HAL_RTC_GetDate>

		// Return through parameters
		*year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	0092      	lsls	r2, r2, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	701a      	strb	r2, [r3, #0]
		*month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8004c60:	7c7b      	ldrb	r3, [r7, #17]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	0092      	lsls	r2, r2, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	7c7b      	ldrb	r3, [r7, #17]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	701a      	strb	r2, [r3, #0]
		*day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8004c80:	7cbb      	ldrb	r3, [r7, #18]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	0092      	lsls	r2, r2, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	7cbb      	ldrb	r3, [r7, #18]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	701a      	strb	r2, [r3, #0]
		*hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8004ca0:	7d3b      	ldrb	r3, [r7, #20]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	0092      	lsls	r2, r2, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	7d3b      	ldrb	r3, [r7, #20]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	701a      	strb	r2, [r3, #0]
		*minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8004cc0:	7d7b      	ldrb	r3, [r7, #21]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	0092      	lsls	r2, r2, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	7d7b      	ldrb	r3, [r7, #21]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	701a      	strb	r2, [r3, #0]
		*second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8004ce0:	7dbb      	ldrb	r3, [r7, #22]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	0092      	lsls	r2, r2, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	7dbb      	ldrb	r3, [r7, #22]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	701a      	strb	r2, [r3, #0]

		return RTC_CALENDAR_CONTROL_OKAY;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e000      	b.n	8004d06 <rtcCalendarControl_getDateTime+0x11a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004d04:	2301      	movs	r3, #1
	}
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3728      	adds	r7, #40	; 0x28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	200004f4 	.word	0x200004f4

08004d14 <rtcCalendarControl_setAlarm_A>:
 *
 * Note: does not validate that parameters are within valid range.
 */
RtcUtilsStatus rtcCalendarControl_setAlarm_A(const uint8_t day, const uint8_t hour,
		const uint8_t minute, const uint8_t second)
{
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b08f      	sub	sp, #60	; 0x3c
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	71fb      	strb	r3, [r7, #7]
 8004d26:	4603      	mov	r3, r0
 8004d28:	71bb      	strb	r3, [r7, #6]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	717b      	strb	r3, [r7, #5]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8004d32:	f107 030c 	add.w	r3, r7, #12
 8004d36:	222c      	movs	r2, #44	; 0x2c
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fe48 	bl	80059d0 <memset>

  // if the module has been initialized
  if (IS_RTC_INIT(_rtc_handle))
 8004d40:	4b43      	ldr	r3, [pc, #268]	; (8004e50 <rtcCalendarControl_setAlarm_A+0x13c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d07e      	beq.n	8004e46 <rtcCalendarControl_setAlarm_A+0x132>
 8004d48:	4b41      	ldr	r3, [pc, #260]	; (8004e50 <rtcCalendarControl_setAlarm_A+0x13c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d079      	beq.n	8004e46 <rtcCalendarControl_setAlarm_A+0x132>
  {
	  // settings for alarm
	  // convert decimal to BCD
	  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	4a3f      	ldr	r2, [pc, #252]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	08db      	lsrs	r3, r3, #3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	b258      	sxtb	r0, r3
 8004d62:	79fa      	ldrb	r2, [r7, #7]
 8004d64:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d66:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6a:	08d9      	lsrs	r1, r3, #3
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	b25b      	sxtb	r3, r3
 8004d7a:	4303      	orrs	r3, r0
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8004d84:	79bb      	ldrb	r3, [r7, #6]
 8004d86:	4a33      	ldr	r2, [pc, #204]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	08db      	lsrs	r3, r3, #3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	b258      	sxtb	r0, r3
 8004d94:	79ba      	ldrb	r2, [r7, #6]
 8004d96:	4b2f      	ldr	r3, [pc, #188]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d98:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9c:	08d9      	lsrs	r1, r3, #3
 8004d9e:	460b      	mov	r3, r1
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	b25b      	sxtb	r3, r3
 8004dac:	4303      	orrs	r3, r0
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	733b      	strb	r3, [r7, #12]
	  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8004db4:	797b      	ldrb	r3, [r7, #5]
 8004db6:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	b258      	sxtb	r0, r3
 8004dc4:	797a      	ldrb	r2, [r7, #5]
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	08d9      	lsrs	r1, r3, #3
 8004dce:	460b      	mov	r3, r1
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	4303      	orrs	r3, r0
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	737b      	strb	r3, [r7, #13]
	  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8004de4:	793b      	ldrb	r3, [r7, #4]
 8004de6:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	b258      	sxtb	r0, r3
 8004df4:	793a      	ldrb	r2, [r7, #4]
 8004df6:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <rtcCalendarControl_setAlarm_A+0x140>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	08d9      	lsrs	r1, r3, #3
 8004dfe:	460b      	mov	r3, r1
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	4303      	orrs	r3, r0
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	73bb      	strb	r3, [r7, #14]
	  // other settings for setting alarm
	  alarm.AlarmTime.SubSeconds = 0x0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
	  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61bb      	str	r3, [r7, #24]
	  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
	  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	623b      	str	r3, [r7, #32]
	  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
	  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  alarm.Alarm = RTC_ALARM_A;
 8004e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34

	  // set the alarm and enable an interrupt to fire
	  HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT_BCD);
 8004e32:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <rtcCalendarControl_setAlarm_A+0x13c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f107 010c 	add.w	r1, r7, #12
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe f8c1 	bl	8002fc4 <HAL_RTC_SetAlarm_IT>

	  return RTC_CALENDAR_CONTROL_OKAY;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e000      	b.n	8004e48 <rtcCalendarControl_setAlarm_A+0x134>
  }

  // the module has not been initialized
  else
  {
	  return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004e46:	2301      	movs	r3, #1
  }
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	373c      	adds	r7, #60	; 0x3c
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}
 8004e50:	200004f4 	.word	0x200004f4
 8004e54:	cccccccd 	.word	0xcccccccd

08004e58 <rtcCalendarControl_diableAlarm_A>:
/* rtcCalendarControl_diableAlarm_A
 *
 * Disables alarm A from firing.
 */
RtcUtilsStatus rtcCalendarControl_diableAlarm_A(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
	// if the module has been initlaized
	if (IS_RTC_INIT(_rtc_handle))
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <rtcCalendarControl_diableAlarm_A+0x30>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <rtcCalendarControl_diableAlarm_A+0x28>
 8004e64:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <rtcCalendarControl_diableAlarm_A+0x30>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <rtcCalendarControl_diableAlarm_A+0x28>
	{
		HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A);
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <rtcCalendarControl_diableAlarm_A+0x30>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe f9b0 	bl	80031dc <HAL_RTC_DeactivateAlarm>

		return RTC_CALENDAR_CONTROL_OKAY;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <rtcCalendarControl_diableAlarm_A+0x2a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004e80:	2301      	movs	r3, #1
	}
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200004f4 	.word	0x200004f4

08004e8c <LL_AHB2_GRP1_EnableClock>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4013      	ands	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <LL_AHB2_GRP1_IsEnabledClock>:
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d101      	bne.n	8004ed8 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <LL_AHB2_GRP1_DisableClock>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efa:	4013      	ands	r3, r2
 8004efc:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8004f12:	2002      	movs	r0, #2
 8004f14:	f7ff ffd2 	bl	8004ebc <LL_AHB2_GRP1_IsEnabledClock>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <activate_led+0x60>)
 8004f1c:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <activate_led+0x60>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f26:	2002      	movs	r0, #2
 8004f28:	f7ff ffb0 	bl	8004e8c <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8004f2c:	f107 030c 	add.w	r3, r7, #12
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	2301      	movs	r3, #1
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	2302      	movs	r3, #2
 8004f46:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 8004f48:	f107 030c 	add.w	r3, r7, #12
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4807      	ldr	r0, [pc, #28]	; (8004f6c <activate_led+0x64>)
 8004f50:	f7fc f858 	bl	8001004 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	2201      	movs	r2, #1
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4804      	ldr	r0, [pc, #16]	; (8004f6c <activate_led+0x64>)
 8004f5c:	f7fc fa80 	bl	8001460 <HAL_GPIO_WritePin>
}
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200004f8 	.word	0x200004f8
 8004f6c:	48000400 	.word	0x48000400

08004f70 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4809      	ldr	r0, [pc, #36]	; (8004fa8 <deactivate_led+0x38>)
 8004f82:	f7fc fa6d 	bl	8001460 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4807      	ldr	r0, [pc, #28]	; (8004fa8 <deactivate_led+0x38>)
 8004f8c:	f7fc f99a 	bl	80012c4 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8004f90:	4b06      	ldr	r3, [pc, #24]	; (8004fac <deactivate_led+0x3c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8004f98:	2002      	movs	r0, #2
 8004f9a:	f7ff ffa3 	bl	8004ee4 <LL_AHB2_GRP1_DisableClock>
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	48000400 	.word	0x48000400
 8004fac:	200004f8 	.word	0x200004f8

08004fb0 <code_to_appActions>:
 *
 * Map char array command code to numerical code.  If no match is found,
 * NO_ACTION is returned.
 */
AppActions code_to_appActions(const char* code)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 8004fb8:	2204      	movs	r2, #4
 8004fba:	4925      	ldr	r1, [pc, #148]	; (8005050 <code_to_appActions+0xa0>)
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fd6f 	bl	8005aa0 <strncmp>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e03c      	b.n	8005046 <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 8004fcc:	2204      	movs	r2, #4
 8004fce:	4921      	ldr	r1, [pc, #132]	; (8005054 <code_to_appActions+0xa4>)
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fd65 	bl	8005aa0 <strncmp>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e032      	b.n	8005046 <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	491d      	ldr	r1, [pc, #116]	; (8005058 <code_to_appActions+0xa8>)
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fd5b 	bl	8005aa0 <strncmp>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e028      	b.n	8005046 <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	4919      	ldr	r1, [pc, #100]	; (800505c <code_to_appActions+0xac>)
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fd51 	bl	8005aa0 <strncmp>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 8005004:	2304      	movs	r3, #4
 8005006:	e01e      	b.n	8005046 <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8005008:	2204      	movs	r2, #4
 800500a:	4915      	ldr	r1, [pc, #84]	; (8005060 <code_to_appActions+0xb0>)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fd47 	bl	8005aa0 <strncmp>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 8005018:	2305      	movs	r3, #5
 800501a:	e014      	b.n	8005046 <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_PACKET_HEADER_SIZE))
 800501c:	2204      	movs	r2, #4
 800501e:	4911      	ldr	r1, [pc, #68]	; (8005064 <code_to_appActions+0xb4>)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fd3d 	bl	8005aa0 <strncmp>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 800502c:	2306      	movs	r3, #6
 800502e:	e00a      	b.n	8005046 <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_PACKET_HEADER_SIZE))
 8005030:	2204      	movs	r2, #4
 8005032:	490d      	ldr	r1, [pc, #52]	; (8005068 <code_to_appActions+0xb8>)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fd33 	bl	8005aa0 <strncmp>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <code_to_appActions+0x94>
			return START_CALENDAR;
 8005040:	2307      	movs	r3, #7
 8005042:	e000      	b.n	8005046 <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	08006d18 	.word	0x08006d18
 8005054:	08006d20 	.word	0x08006d20
 8005058:	08006d28 	.word	0x08006d28
 800505c:	08006d30 	.word	0x08006d30
 8005060:	08006d38 	.word	0x08006d38
 8005064:	08006d40 	.word	0x08006d40
 8005068:	08006d48 	.word	0x08006d48

0800506c <parseDateTime>:
 *
 * Parse a DateTime from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseDateTime(DateTime* dateTime, char data[UART_PACKET_PAYLOAD_SIZE])
{
 800506c:	b5b0      	push	{r4, r5, r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af04      	add	r7, sp, #16
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
	int formatCount;

	// parse values from string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(dateTime->year),
 8005076:	687c      	ldr	r4, [r7, #4]
			(int*)&(dateTime->month),
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1c5d      	adds	r5, r3, #1
			(int*)&(dateTime->day),
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3302      	adds	r3, #2
			(int*)&(dateTime->hour),
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	3203      	adds	r2, #3
			(int*)&(dateTime->minute),
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	3104      	adds	r1, #4
			(int*)&(dateTime->second));
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	3005      	adds	r0, #5
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
 800508c:	9003      	str	r0, [sp, #12]
 800508e:	9102      	str	r1, [sp, #8]
 8005090:	9201      	str	r2, [sp, #4]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	462b      	mov	r3, r5
 8005096:	4622      	mov	r2, r4
 8005098:	4907      	ldr	r1, [pc, #28]	; (80050b8 <parseDateTime+0x4c>)
 800509a:	6838      	ldr	r0, [r7, #0]
 800509c:	f000 fcd4 	bl	8005a48 <siscanf>
 80050a0:	60f8      	str	r0, [r7, #12]

	// if the correct number of values were parsed, return true
	if (formatCount == 6)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	d101      	bne.n	80050ac <parseDateTime+0x40>
		return true;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <parseDateTime+0x42>

	// else, there was an error, return false
	else
		return false;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bdb0      	pop	{r4, r5, r7, pc}
 80050b6:	bf00      	nop
 80050b8:	08006d50 	.word	0x08006d50

080050bc <formatDateTime>:
 *
 * Format a string from a DateTime.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool formatDateTime(char data[UART_PACKET_PAYLOAD_SIZE], const DateTime* dateTime)
{
 80050bc:	b5b0      	push	{r4, r5, r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af06      	add	r7, sp, #24
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	int formatCount;

	// format values into string
	memset(data, 0, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80050c6:	223c      	movs	r2, #60	; 0x3c
 80050c8:	2100      	movs	r1, #0
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fc80 	bl	80059d0 <memset>
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int)(dateTime->year),
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050d4:	461d      	mov	r5, r3
			(int)(dateTime->month),
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	785b      	ldrb	r3, [r3, #1]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050da:	461a      	mov	r2, r3
			(int)(dateTime->day),
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	789b      	ldrb	r3, [r3, #2]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050e0:	4619      	mov	r1, r3
			(int)(dateTime->hour),
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	78db      	ldrb	r3, [r3, #3]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050e6:	4618      	mov	r0, r3
			(int)(dateTime->minute),
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	791b      	ldrb	r3, [r3, #4]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050ec:	461c      	mov	r4, r3
			(int)(dateTime->second));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	795b      	ldrb	r3, [r3, #5]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	9403      	str	r4, [sp, #12]
 80050f6:	9002      	str	r0, [sp, #8]
 80050f8:	9101      	str	r1, [sp, #4]
 80050fa:	9200      	str	r2, [sp, #0]
 80050fc:	462b      	mov	r3, r5
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <formatDateTime+0x68>)
 8005100:	213c      	movs	r1, #60	; 0x3c
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fc6c 	bl	80059e0 <sniprintf>
 8005108:	60f8      	str	r0, [r7, #12]

	// if the resulting string is not longer than the packet payload size and there was no
	// error formatting, return true
	if (formatCount >= 0 && formatCount <= UART_PACKET_PAYLOAD_SIZE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	db04      	blt.n	800511a <formatDateTime+0x5e>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b3c      	cmp	r3, #60	; 0x3c
 8005114:	dc01      	bgt.n	800511a <formatDateTime+0x5e>
		return true;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <formatDateTime+0x60>

	// else, return false
	else
		return false;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bdb0      	pop	{r4, r5, r7, pc}
 8005124:	08006d50 	.word	0x08006d50

08005128 <parseEvent>:
 *
 * Parse a CalendarEvent from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss;yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseEvent(CalendarEvent* event, char data[UART_PACKET_PAYLOAD_SIZE])
{
 8005128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800512a:	b093      	sub	sp, #76	; 0x4c
 800512c:	af0a      	add	r7, sp, #40	; 0x28
 800512e:	6178      	str	r0, [r7, #20]
 8005130:	6139      	str	r1, [r7, #16]
	int formatCount;

	// parse string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(event->start.year),
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	60fb      	str	r3, [r7, #12]
			(int*)&(event->start.month),
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f103 0c01 	add.w	ip, r3, #1
			(int*)&(event->start.day),
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3302      	adds	r3, #2
			(int*)&(event->start.hour),
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	3203      	adds	r2, #3
			(int*)&(event->start.minute),
 8005144:	6979      	ldr	r1, [r7, #20]
 8005146:	3104      	adds	r1, #4
			(int*)&(event->start.second),
 8005148:	6978      	ldr	r0, [r7, #20]
 800514a:	3005      	adds	r0, #5
			(int*)&(event->end.year),
 800514c:	697c      	ldr	r4, [r7, #20]
 800514e:	3406      	adds	r4, #6
			(int*)&(event->end.month),
 8005150:	697d      	ldr	r5, [r7, #20]
 8005152:	3507      	adds	r5, #7
			(int*)&(event->end.day),
 8005154:	697e      	ldr	r6, [r7, #20]
 8005156:	3608      	adds	r6, #8
			(int*)&(event->end.hour),
 8005158:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800515c:	f10e 0e09 	add.w	lr, lr, #9
 8005160:	f8c7 e008 	str.w	lr, [r7, #8]
			(int*)&(event->end.minute),
 8005164:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005168:	f10e 0e0a 	add.w	lr, lr, #10
 800516c:	f8c7 e004 	str.w	lr, [r7, #4]
			(int*)&(event->end.second));
 8005170:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005174:	f10e 0e0b 	add.w	lr, lr, #11
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
 8005178:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800517c:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8005180:	f8cd e020 	str.w	lr, [sp, #32]
 8005184:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8005188:	f8cd e01c 	str.w	lr, [sp, #28]
 800518c:	9606      	str	r6, [sp, #24]
 800518e:	9505      	str	r5, [sp, #20]
 8005190:	9404      	str	r4, [sp, #16]
 8005192:	9003      	str	r0, [sp, #12]
 8005194:	9102      	str	r1, [sp, #8]
 8005196:	9201      	str	r2, [sp, #4]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	4663      	mov	r3, ip
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4907      	ldr	r1, [pc, #28]	; (80051bc <parseEvent+0x94>)
 80051a0:	6938      	ldr	r0, [r7, #16]
 80051a2:	f000 fc51 	bl	8005a48 <siscanf>
 80051a6:	61f8      	str	r0, [r7, #28]

	// if the correct number of values were parsed, return true
	if (formatCount == 12)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b0c      	cmp	r3, #12
 80051ac:	d101      	bne.n	80051b2 <parseEvent+0x8a>
		return true;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <parseEvent+0x8c>

	// else, there was an error, return false
	else
		return false;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3724      	adds	r7, #36	; 0x24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051bc:	08006d70 	.word	0x08006d70

080051c0 <desktopAppSession_init>:
 *
 * Initializes the UART transport layer and resets operational variables for the manager.
 * Only will initialize if the manager has not been initialized already.
 */
bool desktopAppSession_init(UART_HandleTypeDef* huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (!_sessionInit && uartTransport_init(huart))
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <desktopAppSession_init+0x58>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f083 0301 	eor.w	r3, r3, #1
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01a      	beq.n	800520c <desktopAppSession_init+0x4c>
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fab4 	bl	8005744 <uartTransport_init>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d014      	beq.n	800520c <desktopAppSession_init+0x4c>
	{
		// reset operational variables
		_sessionOpen = false;
 80051e2:	4b0e      	ldr	r3, [pc, #56]	; (800521c <desktopAppSession_init+0x5c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <desktopAppSession_init+0x58>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
		_messageReady = false;
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <desktopAppSession_init+0x60>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
		memset(_messageCommand, 0, UART_PACKET_HEADER_SIZE * sizeof(char));
 80051f4:	2204      	movs	r2, #4
 80051f6:	2100      	movs	r1, #0
 80051f8:	480a      	ldr	r0, [pc, #40]	; (8005224 <desktopAppSession_init+0x64>)
 80051fa:	f000 fbe9 	bl	80059d0 <memset>
		memset(_messageData, 0, UART_PACKET_PAYLOAD_SIZE * sizeof(char));
 80051fe:	223c      	movs	r2, #60	; 0x3c
 8005200:	2100      	movs	r1, #0
 8005202:	4809      	ldr	r0, [pc, #36]	; (8005228 <desktopAppSession_init+0x68>)
 8005204:	f000 fbe4 	bl	80059d0 <memset>

		return true;
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <desktopAppSession_init+0x4e>
	}

	// an uninitialized uart handle was passed.
	else
	{
		return false;
 800520c:	2300      	movs	r3, #0
	}
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200004fd 	.word	0x200004fd
 800521c:	200004fc 	.word	0x200004fc
 8005220:	20000540 	.word	0x20000540
 8005224:	20000500 	.word	0x20000500
 8005228:	20000504 	.word	0x20000504

0800522c <desktopAppSession_start>:
 * Attempts to handshake with the desktop application.  Wrapper for the handshake function.
 * Will not attempt if the manager has not been initialized and will not attempt if a
 * session is already open.
 */
DesktopComSessionStatus desktopAppSession_start(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
	DesktopComSessionStatus handshakeStatus;

	// if the module has been initialized
	if (_sessionInit)
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <desktopAppSession_start+0x48>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d016      	beq.n	8005268 <desktopAppSession_start+0x3c>
	{
		// only attempt to handshake if a session is not already open
		if (!_sessionOpen)
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <desktopAppSession_start+0x4c>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f083 0301 	eor.w	r3, r3, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <desktopAppSession_start+0x38>
		{
			// perform handshake and return result
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8005248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800524c:	f000 f888 	bl	8005360 <_handshake>
 8005250:	4603      	mov	r3, r0
 8005252:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <desktopAppSession_start+0x34>
				_sessionOpen = true;
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <desktopAppSession_start+0x4c>)
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	e002      	b.n	800526a <desktopAppSession_start+0x3e>
		}

		// if session is closed
		else
		{
			return SESSION_NOT_OPEN;
 8005264:	2304      	movs	r3, #4
 8005266:	e000      	b.n	800526a <desktopAppSession_start+0x3e>
	}

	// module not initialized
	else
	{
		return SESSION_NOT_INIT;
 8005268:	2303      	movs	r3, #3
	}
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	200004fd 	.word	0x200004fd
 8005278:	200004fc 	.word	0x200004fc

0800527c <desktopAppSession_update>:
 *
 * Update the state of the session manager.  Wraps the _session_cycle() function,
 * which performs the actual update, with checks for a session to be opened.
 */
DesktopComSessionStatus desktopAppSession_update(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
	// if the module has been initialized
	if (_sessionInit)
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <desktopAppSession_update+0x28>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <desktopAppSession_update+0x20>
	{
		// only run _update() if a session is opened
		if (_sessionOpen)
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <desktopAppSession_update+0x2c>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <desktopAppSession_update+0x1c>
		{
			return _session_update();
 8005290:	f000 f94e 	bl	8005530 <_session_update>
 8005294:	4603      	mov	r3, r0
 8005296:	e002      	b.n	800529e <desktopAppSession_update+0x22>
		}

		// a session has not been opened
		else
		{
			return SESSION_NOT_OPEN;
 8005298:	2304      	movs	r3, #4
 800529a:	e000      	b.n	800529e <desktopAppSession_update+0x22>
	}

	// the module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 800529c:	2303      	movs	r3, #3
	}
}
 800529e:	4618      	mov	r0, r3
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200004fd 	.word	0x200004fd
 80052a8:	200004fc 	.word	0x200004fc

080052ac <desktopAppSession_enqueueMessage>:
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_enqueueMessage(char header[UART_PACKET_HEADER_SIZE],
		char body[UART_PACKET_PAYLOAD_SIZE])
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (_sessionInit)
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <desktopAppSession_enqueueMessage+0x34>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <desktopAppSession_enqueueMessage+0x28>
	{
		// try to enqueue message and return if successful
		if (uartTransport_bufferTx((uint8_t*)header, (uint8_t*)body) != TRANSPORT_OKAY)
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa61 	bl	8005788 <uartTransport_bufferTx>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <desktopAppSession_enqueueMessage+0x24>
		{
			return SESSION_ERROR;
 80052cc:	2302      	movs	r3, #2
 80052ce:	e002      	b.n	80052d6 <desktopAppSession_enqueueMessage+0x2a>
		}
		else
		{
			return SESSION_OKAY;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <desktopAppSession_enqueueMessage+0x2a>
	}

	// module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 80052d4:	2303      	movs	r3, #3
	}
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200004fd 	.word	0x200004fd

080052e4 <desktopAppSession_dequeueMessage>:
 * above.
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_dequeueMessage(char header[UART_PACKET_HEADER_SIZE], char body[UART_PACKET_PAYLOAD_SIZE])
{
 80052e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (_sessionInit)
 80052ee:	4b18      	ldr	r3, [pc, #96]	; (8005350 <desktopAppSession_dequeueMessage+0x6c>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d026      	beq.n	8005344 <desktopAppSession_dequeueMessage+0x60>
	{
		// if a message is present in the received queue, copy to output
		if (_messageReady)
 80052f6:	4b17      	ldr	r3, [pc, #92]	; (8005354 <desktopAppSession_dequeueMessage+0x70>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d020      	beq.n	8005340 <desktopAppSession_dequeueMessage+0x5c>
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <desktopAppSession_dequeueMessage+0x74>)
 8005300:	681a      	ldr	r2, [r3, #0]
		{
			memcpy(header, _messageCommand, UART_PACKET_HEADER_SIZE*sizeof(char));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
			memcpy(body, _messageData, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	4a14      	ldr	r2, [pc, #80]	; (800535c <desktopAppSession_dequeueMessage+0x78>)
 800530a:	4614      	mov	r4, r2
 800530c:	469c      	mov	ip, r3
 800530e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005312:	4665      	mov	r5, ip
 8005314:	4626      	mov	r6, r4
 8005316:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005318:	6028      	str	r0, [r5, #0]
 800531a:	6069      	str	r1, [r5, #4]
 800531c:	60aa      	str	r2, [r5, #8]
 800531e:	60eb      	str	r3, [r5, #12]
 8005320:	3410      	adds	r4, #16
 8005322:	f10c 0c10 	add.w	ip, ip, #16
 8005326:	4574      	cmp	r4, lr
 8005328:	d1f3      	bne.n	8005312 <desktopAppSession_dequeueMessage+0x2e>
 800532a:	4665      	mov	r5, ip
 800532c:	4623      	mov	r3, r4
 800532e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005330:	6028      	str	r0, [r5, #0]
 8005332:	6069      	str	r1, [r5, #4]
 8005334:	60aa      	str	r2, [r5, #8]
			_messageReady = false;
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <desktopAppSession_dequeueMessage+0x70>)
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]

			return SESSION_OKAY;
 800533c:	2300      	movs	r3, #0
 800533e:	e002      	b.n	8005346 <desktopAppSession_dequeueMessage+0x62>
		}

		// no message is ready
		else
		{
			return SESSION_ERROR;
 8005340:	2302      	movs	r3, #2
 8005342:	e000      	b.n	8005346 <desktopAppSession_dequeueMessage+0x62>
	}

	// the module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 8005344:	2303      	movs	r3, #3
	}
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800534e:	bf00      	nop
 8005350:	200004fd 	.word	0x200004fd
 8005354:	20000540 	.word	0x20000540
 8005358:	20000500 	.word	0x20000500
 800535c:	20000504 	.word	0x20000504

08005360 <_handshake>:
 * Note:  no software flow control is used for the first message.  Listening for the
 * first message from the desktop may timeout and cause synchronization issues while
 * attempting to handshake.
 */
DesktopComSessionStatus _handshake(unsigned int timeout_ms)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b094      	sub	sp, #80	; 0x50
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 800536c:	2300      	movs	r3, #0
 800536e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TransportStatus transportStatus;
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 8005378:	2300      	movs	r3, #0
 800537a:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	f107 030c 	add.w	r3, r7, #12
 8005384:	2238      	movs	r2, #56	; 0x38
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fb21 	bl	80059d0 <memset>

	// while the handshake follows proper steps and UART communication does not error
	while (!success && !error)
 800538e:	e0a2      	b.n	80054d6 <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 8005390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <_handshake+0x44>
		{
			transportStatus = uartTransport_rx_polled(timeout_ms); // handshake timeout until start of handshake
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa8a 	bl	80058b0 <uartTransport_rx_polled>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80053a2:	e063      	b.n	800546c <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10b      	bne.n	80053c2 <_handshake+0x62>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 80053aa:	f107 0208 	add.w	r2, r7, #8
 80053ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053b2:	4611      	mov	r1, r2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fa11 	bl	80057dc <uartTransport_debufferRx>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80053c0:	e054      	b.n	800546c <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d10d      	bne.n	80053e4 <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_PACKET_HEADER_SIZE))
 80053c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053cc:	2204      	movs	r2, #4
 80053ce:	4955      	ldr	r1, [pc, #340]	; (8005524 <_handshake+0x1c4>)
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fb65 	bl	8005aa0 <strncmp>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d047      	beq.n	800546c <_handshake+0x10c>
			{
				error = true;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80053e2:	e043      	b.n	800546c <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 80053e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d110      	bne.n	800540c <_handshake+0xac>
		{
			memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 80053ea:	f107 0308 	add.w	r3, r7, #8
 80053ee:	223c      	movs	r2, #60	; 0x3c
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 faec 	bl	80059d0 <memset>
			transportStatus = uartTransport_bufferTx((uint8_t*)HANDSHAKE_HEADER_ACKN, (uint8_t*)messageBody);
 80053f8:	f107 0308 	add.w	r3, r7, #8
 80053fc:	4619      	mov	r1, r3
 80053fe:	484a      	ldr	r0, [pc, #296]	; (8005528 <_handshake+0x1c8>)
 8005400:	f000 f9c2 	bl	8005788 <uartTransport_bufferTx>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800540a:	e02f      	b.n	800546c <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 800540c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540e:	2b04      	cmp	r3, #4
 8005410:	d106      	bne.n	8005420 <_handshake+0xc0>
		{
			transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 8005412:	2064      	movs	r0, #100	; 0x64
 8005414:	f000 fa0e 	bl	8005834 <uartTransport_tx_polled>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800541e:	e025      	b.n	800546c <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8005420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005422:	2b05      	cmp	r3, #5
 8005424:	d106      	bne.n	8005434 <_handshake+0xd4>
		{
			transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 8005426:	2064      	movs	r0, #100	; 0x64
 8005428:	f000 fa42 	bl	80058b0 <uartTransport_rx_polled>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005432:	e01b      	b.n	800546c <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 8005434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005436:	2b06      	cmp	r3, #6
 8005438:	d10b      	bne.n	8005452 <_handshake+0xf2>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 800543a:	f107 0208 	add.w	r2, r7, #8
 800543e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f9c9 	bl	80057dc <uartTransport_debufferRx>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005450:	e00c      	b.n	800546c <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_PACKET_HEADER_SIZE))
 8005452:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005456:	2204      	movs	r2, #4
 8005458:	4934      	ldr	r1, [pc, #208]	; (800552c <_handshake+0x1cc>)
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fb20 	bl	8005aa0 <strncmp>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <_handshake+0x10c>
			{
				error = true;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}

		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 800546c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005470:	2b00      	cmp	r3, #0
 8005472:	d12d      	bne.n	80054d0 <_handshake+0x170>
		{
			if (state == 0)
 8005474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <_handshake+0x120>
				state = 1;
 800547a:	2301      	movs	r3, #1
 800547c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800547e:	e02a      	b.n	80054d6 <_handshake+0x176>
			else if (state == 1)
 8005480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <_handshake+0x12c>
				state = 2;
 8005486:	2302      	movs	r3, #2
 8005488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548a:	e024      	b.n	80054d6 <_handshake+0x176>
			else if (state == 2)
 800548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548e:	2b02      	cmp	r3, #2
 8005490:	d102      	bne.n	8005498 <_handshake+0x138>
				state = 3;
 8005492:	2303      	movs	r3, #3
 8005494:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005496:	e01e      	b.n	80054d6 <_handshake+0x176>
			else if (state == 3)
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549a:	2b03      	cmp	r3, #3
 800549c:	d102      	bne.n	80054a4 <_handshake+0x144>
				state = 4;
 800549e:	2304      	movs	r3, #4
 80054a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a2:	e018      	b.n	80054d6 <_handshake+0x176>
			else if (state == 4)
 80054a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d102      	bne.n	80054b0 <_handshake+0x150>
				state = 5;
 80054aa:	2305      	movs	r3, #5
 80054ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ae:	e012      	b.n	80054d6 <_handshake+0x176>
			else if (state == 5)
 80054b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d102      	bne.n	80054bc <_handshake+0x15c>
				state = 6;
 80054b6:	2306      	movs	r3, #6
 80054b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ba:	e00c      	b.n	80054d6 <_handshake+0x176>
			else if (state == 6)
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d102      	bne.n	80054c8 <_handshake+0x168>
				state = 7;
 80054c2:	2307      	movs	r3, #7
 80054c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c6:	e006      	b.n	80054d6 <_handshake+0x176>
			else // if (state == 7)
				success = true;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80054ce:	e002      	b.n	80054d6 <_handshake+0x176>
		}
		else
		{
			error = true;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 80054d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80054da:	f083 0301 	eor.w	r3, r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <_handshake+0x194>
 80054e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054e8:	f083 0301 	eor.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f47f af4e 	bne.w	8005390 <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 80054f4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <_handshake+0x1ae>
 80054fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005500:	f083 0301 	eor.w	r3, r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 800550a:	2300      	movs	r3, #0
 800550c:	e006      	b.n	800551c <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 800550e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 800551a:	2302      	movs	r3, #2
		}
	}
}
 800551c:	4618      	mov	r0, r3
 800551e:	3750      	adds	r7, #80	; 0x50
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	08006dac 	.word	0x08006dac
 8005528:	08006db4 	.word	0x08006db4
 800552c:	08006dbc 	.word	0x08006dbc

08005530 <_session_update>:
 *
 * Note:  If a response to the desktop is necessary, this response won't be sent until
 * the next time the session is updated.
 */
DesktopComSessionStatus _session_update(void)
{
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b092      	sub	sp, #72	; 0x48
 8005534:	af00      	add	r7, sp, #0
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 8005536:	2300      	movs	r3, #0
 8005538:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	f107 0308 	add.w	r3, r7, #8
 8005542:	2238      	movs	r2, #56	; 0x38
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fa42 	bl	80059d0 <memset>
	DesktopComSessionStatus status;

	// Perform Tx message phase of session cycle.
	status = _tell();
 800554c:	f000 f8b6 	bl	80056bc <_tell>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Perform Rx message phase of session cycle.
	status = _listen();
 8005556:	f000 f85f 	bl	8005618 <_listen>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 8005560:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005564:	2b02      	cmp	r3, #2
 8005566:	d101      	bne.n	800556c <_session_update+0x3c>
	{
		return SESSION_ERROR;
 8005568:	2302      	movs	r3, #2
 800556a:	e042      	b.n	80055f2 <_session_update+0xc2>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 800556c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005570:	2b00      	cmp	r3, #0
 8005572:	d13d      	bne.n	80055f0 <_session_update+0xc0>
	{
		// dequeue received message
		uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 8005574:	1d3a      	adds	r2, r7, #4
 8005576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800557a:	4611      	mov	r1, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f92d 	bl	80057dc <uartTransport_debufferRx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_PACKET_HEADER_SIZE))
 8005582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005586:	2204      	movs	r2, #4
 8005588:	491c      	ldr	r1, [pc, #112]	; (80055fc <_session_update+0xcc>)
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fa88 	bl	8005aa0 <strncmp>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <_session_update+0x76>
		{
			desktopAppSession_enqueueMessage(HANDSHAKE_HEADER_DISC, "\0");
 8005596:	491a      	ldr	r1, [pc, #104]	; (8005600 <_session_update+0xd0>)
 8005598:	4818      	ldr	r0, [pc, #96]	; (80055fc <_session_update+0xcc>)
 800559a:	f7ff fe87 	bl	80052ac <desktopAppSession_enqueueMessage>
			_sessionOpen = false;
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <_session_update+0xd4>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	e024      	b.n	80055f0 <_session_update+0xc0>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_PACKET_HEADER_SIZE))
 80055a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055aa:	2204      	movs	r2, #4
 80055ac:	4916      	ldr	r1, [pc, #88]	; (8005608 <_session_update+0xd8>)
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fa76 	bl	8005aa0 <strncmp>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <_session_update+0x9a>
		{
			desktopAppSession_enqueueMessage(messageHeader, messageBody);
 80055ba:	1d3a      	adds	r2, r7, #4
 80055bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055c0:	4611      	mov	r1, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fe72 	bl	80052ac <desktopAppSession_enqueueMessage>
 80055c8:	e012      	b.n	80055f0 <_session_update+0xc0>
 80055ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_PACKET_HEADER_SIZE*sizeof(char));
 80055cc:	4a0f      	ldr	r2, [pc, #60]	; (800560c <_session_update+0xdc>)
 80055ce:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <_session_update+0xe0>)
 80055d2:	461d      	mov	r5, r3
 80055d4:	1d3c      	adds	r4, r7, #4
 80055d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80055e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <_session_update+0xe4>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
		}
	}

	return SESSION_OKAY;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3748      	adds	r7, #72	; 0x48
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bdb0      	pop	{r4, r5, r7, pc}
 80055fa:	bf00      	nop
 80055fc:	08006dc4 	.word	0x08006dc4
 8005600:	08006dcc 	.word	0x08006dcc
 8005604:	200004fc 	.word	0x200004fc
 8005608:	08006dd0 	.word	0x08006dd0
 800560c:	20000500 	.word	0x20000500
 8005610:	20000504 	.word	0x20000504
 8005614:	20000540 	.word	0x20000540

08005618 <_listen>:
 * message.  A CTS message is transmitted.  The Message window listens for a message
 * from the desktop application with the RECEIVE_TIMEOUT_MS value.  Error codes from
 * the transport layer are aliased to session error codes.
 */
DesktopComSessionStatus _listen(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b090      	sub	sp, #64	; 0x40
 800561c:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800561e:	2300      	movs	r3, #0
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	2238      	movs	r2, #56	; 0x38
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f9d1 	bl	80059d0 <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 800562e:	463b      	mov	r3, r7
 8005630:	223c      	movs	r2, #60	; 0x3c
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f000 f9cb 	bl	80059d0 <memset>
	snprintf(messageBody, UART_PACKET_PAYLOAD_SIZE, "Clear to send!\n");
 800563a:	463b      	mov	r3, r7
 800563c:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <_listen+0x9c>)
 800563e:	213c      	movs	r1, #60	; 0x3c
 8005640:	4618      	mov	r0, r3
 8005642:	f000 f9cd 	bl	80059e0 <sniprintf>
	transportStatus = uartTransport_bufferTx((uint8_t*)CTS_HEADER,(uint8_t*) messageBody);
 8005646:	463b      	mov	r3, r7
 8005648:	4619      	mov	r1, r3
 800564a:	481b      	ldr	r0, [pc, #108]	; (80056b8 <_listen+0xa0>)
 800564c:	f000 f89c 	bl	8005788 <uartTransport_bufferTx>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 8005656:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <_listen+0x4a>
	{
		return SESSION_ERROR;
 800565e:	2302      	movs	r3, #2
 8005660:	e024      	b.n	80056ac <_listen+0x94>
	}

	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 8005662:	2064      	movs	r0, #100	; 0x64
 8005664:	f000 f8e6 	bl	8005834 <uartTransport_tx_polled>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 800566e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 8005676:	2301      	movs	r3, #1
 8005678:	e018      	b.n	80056ac <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 800567a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <_listen+0x6e>
	{
		return SESSION_ERROR;
 8005682:	2302      	movs	r3, #2
 8005684:	e012      	b.n	80056ac <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 8005686:	2064      	movs	r0, #100	; 0x64
 8005688:	f000 f912 	bl	80058b0 <uartTransport_rx_polled>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8005692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 800569a:	2301      	movs	r3, #1
 800569c:	e006      	b.n	80056ac <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 800569e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <_listen+0x92>
	{
		return SESSION_ERROR;
 80056a6:	2302      	movs	r3, #2
 80056a8:	e000      	b.n	80056ac <_listen+0x94>
	}

	return SESSION_OKAY;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3740      	adds	r7, #64	; 0x40
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	08006dd8 	.word	0x08006dd8
 80056b8:	08006de8 	.word	0x08006de8

080056bc <_tell>:
 * Wraps UART transmission layer calls.
 * Transmits a buffered message to the desktop application.
 * Aliases transport layer error codes to session error codes.
 */
DesktopComSessionStatus _tell(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;

	// attempt to transmit packet
	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 80056c2:	2064      	movs	r0, #100	; 0x64
 80056c4:	f000 f8b6 	bl	8005834 <uartTransport_tx_polled>
 80056c8:	4603      	mov	r3, r0
 80056ca:	71fb      	strb	r3, [r7, #7]

	// report status of transmission
	if (transportStatus == TRANSPORT_OKAY)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <_tell+0x1a>
	{
		return SESSION_OKAY;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e005      	b.n	80056e2 <_tell+0x26>
	}
	else if (transportStatus == TRANSPORT_TIMEOUT)
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <_tell+0x24>
	{
		return SESSION_TIMEOUT;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <_tell+0x26>
	}
	else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
	{
		return SESSION_ERROR;
 80056e0:	2302      	movs	r3, #2
	}
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <composePacket>:
 * UART_PACKET_PAYLOAD_SIZE bytes to the packet buffer offset by UART_PACKET_HEADER_SIZE
 * number of bytes.
 */
void composePacket(uint8_t packet_buffer[UART_PACKET_SIZE], const uint8_t header[UART_PACKET_HEADER_SIZE],
		const uint8_t payload[UART_PACKET_PAYLOAD_SIZE])
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
	// Copy header into packet.
	memcpy(packet_buffer, header, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]
	// Copy payload into packet.
	memcpy(packet_buffer + UART_PACKET_HEADER_SIZE, payload, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3304      	adds	r3, #4
 8005704:	223c      	movs	r2, #60	; 0x3c
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f953 	bl	80059b4 <memcpy>
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <decomposePacket>:
 * Copies UART_PACKET_HEADER_SIZE number of bytes to the header_buffer and copies
 * UART_PACKET_PAYLOAD_SIZE number of bytes to the payload buffer.
 */
void decomposePacket(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t payload[UART_PACKET_PAYLOAD_SIZE],
		const uint8_t packet_buffer[UART_PACKET_SIZE])
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
	// Copy header from packet.
	memcpy(header, packet_buffer, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]
	// Copy payload from packet.
	memcpy(payload, packet_buffer + UART_PACKET_HEADER_SIZE, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	223c      	movs	r2, #60	; 0x3c
 8005732:	4619      	mov	r1, r3
 8005734:	68b8      	ldr	r0, [r7, #8]
 8005736:	f000 f93d 	bl	80059b4 <memcpy>
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <uartTransport_init>:
 * operational variables.
 *
 * Note:  will not re-initalize until the layer has been de-initalized.
 */
bool uartTransport_init(UART_HandleTypeDef* huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	// if module not already initialized and the uart handle passed is initialized
	if (!IS_UART_HANDLE_INIT(_uartHandle) && IS_UART_HANDLE_INIT(huart))
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <uartTransport_init+0x40>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <uartTransport_init+0x1a>
 8005754:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <uartTransport_init+0x40>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10d      	bne.n	800577a <uartTransport_init+0x36>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <uartTransport_init+0x36>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <uartTransport_init+0x36>
	{
		_uartHandle = huart;		// store handle pointer
 800576c:	4a05      	ldr	r2, [pc, #20]	; (8005784 <uartTransport_init+0x40>)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6013      	str	r3, [r2, #0]
		_transportLayer_reset();	// reset the module's operational variables
 8005772:	f000 f8d9 	bl	8005928 <_transportLayer_reset>
		return true;				// return success
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <uartTransport_init+0x38>
	}

	// module already initializes or handle passed is not initialized
	else
	{
		return false;
 800577a:	2300      	movs	r3, #0
	}
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000544 	.word	0x20000544

08005788 <uartTransport_bufferTx>:
 * Enqueues a packet for transmission.  Only successful if the layer has been
 * initialized.  Reports if queuing could or could not be performed due to the
 * tx buffer being full.
 */
TransportStatus uartTransport_bufferTx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
	// if module initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <uartTransport_bufferTx+0x48>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d014      	beq.n	80057c4 <uartTransport_bufferTx+0x3c>
 800579a:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <uartTransport_bufferTx+0x48>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00f      	beq.n	80057c4 <uartTransport_bufferTx+0x3c>
	{
		// if the transmit buffer is in use (program has queued a packet but
		// has not yet sent it)
		if (_txBuffer_full)
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <uartTransport_bufferTx+0x4c>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <uartTransport_bufferTx+0x28>
		{
			return TRANSPORT_TX_FULL;
 80057ac:	2304      	movs	r3, #4
 80057ae:	e00a      	b.n	80057c6 <uartTransport_bufferTx+0x3e>

		// the buffer is empty and ready to receive a new packet
		else
		{
			// Compose header and body into one message
			composePacket(_txBuffer, header, body);
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4808      	ldr	r0, [pc, #32]	; (80057d8 <uartTransport_bufferTx+0x50>)
 80057b6:	f7ff ff98 	bl	80056ea <composePacket>
			_txBuffer_full = true;
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <uartTransport_bufferTx+0x4c>)
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <uartTransport_bufferTx+0x3e>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 80057c4:	2308      	movs	r3, #8
	}
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000544 	.word	0x20000544
 80057d4:	200005c8 	.word	0x200005c8
 80057d8:	20000548 	.word	0x20000548

080057dc <uartTransport_debufferRx>:
 * Dequeues a packet from those that have been received.  Only successful if
 * the layer has been initialized.  Reportes of dequeuing could or could not be
 * performed due to the rx buffer being empty.
 */
TransportStatus uartTransport_debufferRx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <uartTransport_debufferRx+0x4c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d017      	beq.n	800581e <uartTransport_debufferRx+0x42>
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <uartTransport_debufferRx+0x4c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <uartTransport_debufferRx+0x42>
	{
		// if no packet has been received
		if (!_rxBuffer_full)
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <uartTransport_debufferRx+0x50>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f083 0301 	eor.w	r3, r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <uartTransport_debufferRx+0x2e>
		{
			return TRANSPORT_RX_EMPTY;
 8005806:	2306      	movs	r3, #6
 8005808:	e00a      	b.n	8005820 <uartTransport_debufferRx+0x44>
		// packet received and ready
		else
		{
			// retrieve message from buffer
			// decompose header and body from message
			decomposePacket(header, body, _rxBuffer);
 800580a:	4a09      	ldr	r2, [pc, #36]	; (8005830 <uartTransport_debufferRx+0x54>)
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff ff81 	bl	8005716 <decomposePacket>
			_rxBuffer_full = false;
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <uartTransport_debufferRx+0x50>)
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 800581a:	2300      	movs	r3, #0
 800581c:	e000      	b.n	8005820 <uartTransport_debufferRx+0x44>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 800581e:	2308      	movs	r3, #8
	}
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000544 	.word	0x20000544
 800582c:	200005c9 	.word	0x200005c9
 8005830:	20000588 	.word	0x20000588

08005834 <uartTransport_tx_polled>:
 * Transmits all packets in tx queue.  Reports if the tx queue is empty
 * (to start) or the state of the transmissions (success or failure).
 * Uses HAL calls.
 */
TransportStatus uartTransport_tx_polled(uint32_t timeout_ms)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	// if the module has been initalized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 800583c:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <uartTransport_tx_polled+0x70>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d02a      	beq.n	800589a <uartTransport_tx_polled+0x66>
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <uartTransport_tx_polled+0x70>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d025      	beq.n	800589a <uartTransport_tx_polled+0x66>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 800584e:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <uartTransport_tx_polled+0x74>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f083 0301 	eor.w	r3, r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <uartTransport_tx_polled+0x2c>
		{
			return TRANSPORT_TX_EMPTY;
 800585c:	2305      	movs	r3, #5
 800585e:	e01d      	b.n	800589c <uartTransport_tx_polled+0x68>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_PACKET_SIZE, timeout_ms);
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <uartTransport_tx_polled+0x70>)
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2240      	movs	r2, #64	; 0x40
 8005868:	4910      	ldr	r1, [pc, #64]	; (80058ac <uartTransport_tx_polled+0x78>)
 800586a:	f7fd fe89 	bl	8003580 <HAL_UART_Transmit>
 800586e:	4603      	mov	r3, r0
 8005870:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <uartTransport_tx_polled+0x48>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 8005878:	2302      	movs	r3, #2
 800587a:	e00f      	b.n	800589c <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_TIMEOUT)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b03      	cmp	r3, #3
 8005880:	d101      	bne.n	8005886 <uartTransport_tx_polled+0x52>
		{
			return TRANSPORT_TIMEOUT;
 8005882:	2301      	movs	r3, #1
 8005884:	e00a      	b.n	800589c <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_BUSY)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d101      	bne.n	8005890 <uartTransport_tx_polled+0x5c>
		{
			return TRANSPORT_BUSY;
 800588c:	2303      	movs	r3, #3
 800588e:	e005      	b.n	800589c <uartTransport_tx_polled+0x68>
		}
		else
		{
			// transmission successful
			_txBuffer_full = false;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <uartTransport_tx_polled+0x74>)
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <uartTransport_tx_polled+0x68>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 800589a:	2308      	movs	r3, #8
	}
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000544 	.word	0x20000544
 80058a8:	200005c8 	.word	0x200005c8
 80058ac:	20000548 	.word	0x20000548

080058b0 <uartTransport_rx_polled>:
 * Receives packets and enqueues them to the rx queue.  Reports of the
 * rx queue was full (to start) or the state of the receptions (success
 * or failure).  Uses HAL calls.
 */
TransportStatus uartTransport_rx_polled(uint32_t timeout_ms)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	// if the module has been initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 80058b8:	4b18      	ldr	r3, [pc, #96]	; (800591c <uartTransport_rx_polled+0x6c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d027      	beq.n	8005910 <uartTransport_rx_polled+0x60>
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <uartTransport_rx_polled+0x6c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d022      	beq.n	8005910 <uartTransport_rx_polled+0x60>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <uartTransport_rx_polled+0x70>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <uartTransport_rx_polled+0x26>
		{
			return TRANSPORT_RX_FULL;
 80058d2:	2307      	movs	r3, #7
 80058d4:	e01d      	b.n	8005912 <uartTransport_rx_polled+0x62>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_PACKET_SIZE, timeout_ms);
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <uartTransport_rx_polled+0x6c>)
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2240      	movs	r2, #64	; 0x40
 80058de:	4911      	ldr	r1, [pc, #68]	; (8005924 <uartTransport_rx_polled+0x74>)
 80058e0:	f7fd fed4 	bl	800368c <HAL_UART_Receive>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <uartTransport_rx_polled+0x42>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 80058ee:	2302      	movs	r3, #2
 80058f0:	e00f      	b.n	8005912 <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_TIMEOUT)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d101      	bne.n	80058fc <uartTransport_rx_polled+0x4c>
		{
			return TRANSPORT_TIMEOUT;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e00a      	b.n	8005912 <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_BUSY)
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d101      	bne.n	8005906 <uartTransport_rx_polled+0x56>
		{
			return TRANSPORT_BUSY;
 8005902:	2303      	movs	r3, #3
 8005904:	e005      	b.n	8005912 <uartTransport_rx_polled+0x62>
		}
		else
		{
			// reception was successful and a packet was received
			_rxBuffer_full = true;
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <uartTransport_rx_polled+0x70>)
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 800590c:	2300      	movs	r3, #0
 800590e:	e000      	b.n	8005912 <uartTransport_rx_polled+0x62>
	}

	// the module is not initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 8005910:	2308      	movs	r3, #8
	}
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000544 	.word	0x20000544
 8005920:	200005c9 	.word	0x200005c9
 8005924:	20000588 	.word	0x20000588

08005928 <_transportLayer_reset>:
/* _transportLayer_reset
 *
 * Resets operational variables other than the HAL UART handle pointer.
 */
void _transportLayer_reset(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
	// clear buffers and flags
	memset(_txBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	2100      	movs	r1, #0
 8005930:	4807      	ldr	r0, [pc, #28]	; (8005950 <_transportLayer_reset+0x28>)
 8005932:	f000 f84d 	bl	80059d0 <memset>
	memset(_rxBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 8005936:	2240      	movs	r2, #64	; 0x40
 8005938:	2100      	movs	r1, #0
 800593a:	4806      	ldr	r0, [pc, #24]	; (8005954 <_transportLayer_reset+0x2c>)
 800593c:	f000 f848 	bl	80059d0 <memset>
	_txBuffer_full = false;
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <_transportLayer_reset+0x30>)
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
	_rxBuffer_full = false;
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <_transportLayer_reset+0x34>)
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
}
 800594c:	bf00      	nop
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000548 	.word	0x20000548
 8005954:	20000588 	.word	0x20000588
 8005958:	200005c8 	.word	0x200005c8
 800595c:	200005c9 	.word	0x200005c9

08005960 <__errno>:
 8005960:	4b01      	ldr	r3, [pc, #4]	; (8005968 <__errno+0x8>)
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	2000000c 	.word	0x2000000c

0800596c <__libc_init_array>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	4d0d      	ldr	r5, [pc, #52]	; (80059a4 <__libc_init_array+0x38>)
 8005970:	4c0d      	ldr	r4, [pc, #52]	; (80059a8 <__libc_init_array+0x3c>)
 8005972:	1b64      	subs	r4, r4, r5
 8005974:	10a4      	asrs	r4, r4, #2
 8005976:	2600      	movs	r6, #0
 8005978:	42a6      	cmp	r6, r4
 800597a:	d109      	bne.n	8005990 <__libc_init_array+0x24>
 800597c:	4d0b      	ldr	r5, [pc, #44]	; (80059ac <__libc_init_array+0x40>)
 800597e:	4c0c      	ldr	r4, [pc, #48]	; (80059b0 <__libc_init_array+0x44>)
 8005980:	f001 f968 	bl	8006c54 <_init>
 8005984:	1b64      	subs	r4, r4, r5
 8005986:	10a4      	asrs	r4, r4, #2
 8005988:	2600      	movs	r6, #0
 800598a:	42a6      	cmp	r6, r4
 800598c:	d105      	bne.n	800599a <__libc_init_array+0x2e>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	f855 3b04 	ldr.w	r3, [r5], #4
 8005994:	4798      	blx	r3
 8005996:	3601      	adds	r6, #1
 8005998:	e7ee      	b.n	8005978 <__libc_init_array+0xc>
 800599a:	f855 3b04 	ldr.w	r3, [r5], #4
 800599e:	4798      	blx	r3
 80059a0:	3601      	adds	r6, #1
 80059a2:	e7f2      	b.n	800598a <__libc_init_array+0x1e>
 80059a4:	0800707c 	.word	0x0800707c
 80059a8:	0800707c 	.word	0x0800707c
 80059ac:	0800707c 	.word	0x0800707c
 80059b0:	08007080 	.word	0x08007080

080059b4 <memcpy>:
 80059b4:	440a      	add	r2, r1
 80059b6:	4291      	cmp	r1, r2
 80059b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059bc:	d100      	bne.n	80059c0 <memcpy+0xc>
 80059be:	4770      	bx	lr
 80059c0:	b510      	push	{r4, lr}
 80059c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ca:	4291      	cmp	r1, r2
 80059cc:	d1f9      	bne.n	80059c2 <memcpy+0xe>
 80059ce:	bd10      	pop	{r4, pc}

080059d0 <memset>:
 80059d0:	4402      	add	r2, r0
 80059d2:	4603      	mov	r3, r0
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d100      	bne.n	80059da <memset+0xa>
 80059d8:	4770      	bx	lr
 80059da:	f803 1b01 	strb.w	r1, [r3], #1
 80059de:	e7f9      	b.n	80059d4 <memset+0x4>

080059e0 <sniprintf>:
 80059e0:	b40c      	push	{r2, r3}
 80059e2:	b530      	push	{r4, r5, lr}
 80059e4:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <sniprintf+0x64>)
 80059e6:	1e0c      	subs	r4, r1, #0
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	b09d      	sub	sp, #116	; 0x74
 80059ec:	da08      	bge.n	8005a00 <sniprintf+0x20>
 80059ee:	238b      	movs	r3, #139	; 0x8b
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f6:	b01d      	add	sp, #116	; 0x74
 80059f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059fc:	b002      	add	sp, #8
 80059fe:	4770      	bx	lr
 8005a00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a08:	bf14      	ite	ne
 8005a0a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005a0e:	4623      	moveq	r3, r4
 8005a10:	9304      	str	r3, [sp, #16]
 8005a12:	9307      	str	r3, [sp, #28]
 8005a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a18:	9002      	str	r0, [sp, #8]
 8005a1a:	9006      	str	r0, [sp, #24]
 8005a1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a22:	ab21      	add	r3, sp, #132	; 0x84
 8005a24:	a902      	add	r1, sp, #8
 8005a26:	4628      	mov	r0, r5
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	f000 f8a9 	bl	8005b80 <_svfiprintf_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	bfbc      	itt	lt
 8005a32:	238b      	movlt	r3, #139	; 0x8b
 8005a34:	602b      	strlt	r3, [r5, #0]
 8005a36:	2c00      	cmp	r4, #0
 8005a38:	d0dd      	beq.n	80059f6 <sniprintf+0x16>
 8005a3a:	9b02      	ldr	r3, [sp, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e7d9      	b.n	80059f6 <sniprintf+0x16>
 8005a42:	bf00      	nop
 8005a44:	2000000c 	.word	0x2000000c

08005a48 <siscanf>:
 8005a48:	b40e      	push	{r1, r2, r3}
 8005a4a:	b530      	push	{r4, r5, lr}
 8005a4c:	b09c      	sub	sp, #112	; 0x70
 8005a4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005a50:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005a54:	f854 5b04 	ldr.w	r5, [r4], #4
 8005a58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005a5c:	9002      	str	r0, [sp, #8]
 8005a5e:	9006      	str	r0, [sp, #24]
 8005a60:	f7fa fb8e 	bl	8000180 <strlen>
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <siscanf+0x4c>)
 8005a66:	9003      	str	r0, [sp, #12]
 8005a68:	9007      	str	r0, [sp, #28]
 8005a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a6c:	480a      	ldr	r0, [pc, #40]	; (8005a98 <siscanf+0x50>)
 8005a6e:	9401      	str	r4, [sp, #4]
 8005a70:	2300      	movs	r3, #0
 8005a72:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a74:	9314      	str	r3, [sp, #80]	; 0x50
 8005a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a7e:	462a      	mov	r2, r5
 8005a80:	4623      	mov	r3, r4
 8005a82:	a902      	add	r1, sp, #8
 8005a84:	6800      	ldr	r0, [r0, #0]
 8005a86:	f000 f9d5 	bl	8005e34 <__ssvfiscanf_r>
 8005a8a:	b01c      	add	sp, #112	; 0x70
 8005a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a90:	b003      	add	sp, #12
 8005a92:	4770      	bx	lr
 8005a94:	08005a9d 	.word	0x08005a9d
 8005a98:	2000000c 	.word	0x2000000c

08005a9c <__seofread>:
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	4770      	bx	lr

08005aa0 <strncmp>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	b172      	cbz	r2, 8005ac4 <strncmp+0x24>
 8005aa6:	3901      	subs	r1, #1
 8005aa8:	1884      	adds	r4, r0, r2
 8005aaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005aae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ab2:	4290      	cmp	r0, r2
 8005ab4:	d101      	bne.n	8005aba <strncmp+0x1a>
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	d101      	bne.n	8005abe <strncmp+0x1e>
 8005aba:	1a80      	subs	r0, r0, r2
 8005abc:	bd10      	pop	{r4, pc}
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d1f3      	bne.n	8005aaa <strncmp+0xa>
 8005ac2:	e7fa      	b.n	8005aba <strncmp+0x1a>
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	e7f9      	b.n	8005abc <strncmp+0x1c>

08005ac8 <__ssputs_r>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	688e      	ldr	r6, [r1, #8]
 8005ace:	429e      	cmp	r6, r3
 8005ad0:	4682      	mov	sl, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	4690      	mov	r8, r2
 8005ad6:	461f      	mov	r7, r3
 8005ad8:	d838      	bhi.n	8005b4c <__ssputs_r+0x84>
 8005ada:	898a      	ldrh	r2, [r1, #12]
 8005adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ae0:	d032      	beq.n	8005b48 <__ssputs_r+0x80>
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	6909      	ldr	r1, [r1, #16]
 8005ae6:	eba5 0901 	sub.w	r9, r5, r1
 8005aea:	6965      	ldr	r5, [r4, #20]
 8005aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005af4:	3301      	adds	r3, #1
 8005af6:	444b      	add	r3, r9
 8005af8:	106d      	asrs	r5, r5, #1
 8005afa:	429d      	cmp	r5, r3
 8005afc:	bf38      	it	cc
 8005afe:	461d      	movcc	r5, r3
 8005b00:	0553      	lsls	r3, r2, #21
 8005b02:	d531      	bpl.n	8005b68 <__ssputs_r+0xa0>
 8005b04:	4629      	mov	r1, r5
 8005b06:	f000 ffdd 	bl	8006ac4 <_malloc_r>
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	b950      	cbnz	r0, 8005b24 <__ssputs_r+0x5c>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f8ca 3000 	str.w	r3, [sl]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	6921      	ldr	r1, [r4, #16]
 8005b26:	464a      	mov	r2, r9
 8005b28:	f7ff ff44 	bl	80059b4 <memcpy>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	6126      	str	r6, [r4, #16]
 8005b3a:	6165      	str	r5, [r4, #20]
 8005b3c:	444e      	add	r6, r9
 8005b3e:	eba5 0509 	sub.w	r5, r5, r9
 8005b42:	6026      	str	r6, [r4, #0]
 8005b44:	60a5      	str	r5, [r4, #8]
 8005b46:	463e      	mov	r6, r7
 8005b48:	42be      	cmp	r6, r7
 8005b4a:	d900      	bls.n	8005b4e <__ssputs_r+0x86>
 8005b4c:	463e      	mov	r6, r7
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	4632      	mov	r2, r6
 8005b52:	4641      	mov	r1, r8
 8005b54:	f000 ff32 	bl	80069bc <memmove>
 8005b58:	68a3      	ldr	r3, [r4, #8]
 8005b5a:	1b9b      	subs	r3, r3, r6
 8005b5c:	60a3      	str	r3, [r4, #8]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	4433      	add	r3, r6
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	2000      	movs	r0, #0
 8005b66:	e7db      	b.n	8005b20 <__ssputs_r+0x58>
 8005b68:	462a      	mov	r2, r5
 8005b6a:	f001 f81f 	bl	8006bac <_realloc_r>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d1e1      	bne.n	8005b38 <__ssputs_r+0x70>
 8005b74:	6921      	ldr	r1, [r4, #16]
 8005b76:	4650      	mov	r0, sl
 8005b78:	f000 ff3a 	bl	80069f0 <_free_r>
 8005b7c:	e7c7      	b.n	8005b0e <__ssputs_r+0x46>
	...

08005b80 <_svfiprintf_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	4698      	mov	r8, r3
 8005b86:	898b      	ldrh	r3, [r1, #12]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	b09d      	sub	sp, #116	; 0x74
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	460d      	mov	r5, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	d50e      	bpl.n	8005bb2 <_svfiprintf_r+0x32>
 8005b94:	690b      	ldr	r3, [r1, #16]
 8005b96:	b963      	cbnz	r3, 8005bb2 <_svfiprintf_r+0x32>
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	f000 ff93 	bl	8006ac4 <_malloc_r>
 8005b9e:	6028      	str	r0, [r5, #0]
 8005ba0:	6128      	str	r0, [r5, #16]
 8005ba2:	b920      	cbnz	r0, 8005bae <_svfiprintf_r+0x2e>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bac:	e0d1      	b.n	8005d52 <_svfiprintf_r+0x1d2>
 8005bae:	2340      	movs	r3, #64	; 0x40
 8005bb0:	616b      	str	r3, [r5, #20]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc0:	2330      	movs	r3, #48	; 0x30
 8005bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d6c <_svfiprintf_r+0x1ec>
 8005bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bca:	f04f 0901 	mov.w	r9, #1
 8005bce:	4623      	mov	r3, r4
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd6:	b10a      	cbz	r2, 8005bdc <_svfiprintf_r+0x5c>
 8005bd8:	2a25      	cmp	r2, #37	; 0x25
 8005bda:	d1f9      	bne.n	8005bd0 <_svfiprintf_r+0x50>
 8005bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8005be0:	d00b      	beq.n	8005bfa <_svfiprintf_r+0x7a>
 8005be2:	465b      	mov	r3, fp
 8005be4:	4622      	mov	r2, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff ff6d 	bl	8005ac8 <__ssputs_r>
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f000 80aa 	beq.w	8005d48 <_svfiprintf_r+0x1c8>
 8005bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf6:	445a      	add	r2, fp
 8005bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8005bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a2 	beq.w	8005d48 <_svfiprintf_r+0x1c8>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c0e:	f10a 0a01 	add.w	sl, sl, #1
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	9307      	str	r3, [sp, #28]
 8005c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c1c:	4654      	mov	r4, sl
 8005c1e:	2205      	movs	r2, #5
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	4851      	ldr	r0, [pc, #324]	; (8005d6c <_svfiprintf_r+0x1ec>)
 8005c26:	f7fa fab3 	bl	8000190 <memchr>
 8005c2a:	9a04      	ldr	r2, [sp, #16]
 8005c2c:	b9d8      	cbnz	r0, 8005c66 <_svfiprintf_r+0xe6>
 8005c2e:	06d0      	lsls	r0, r2, #27
 8005c30:	bf44      	itt	mi
 8005c32:	2320      	movmi	r3, #32
 8005c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c38:	0711      	lsls	r1, r2, #28
 8005c3a:	bf44      	itt	mi
 8005c3c:	232b      	movmi	r3, #43	; 0x2b
 8005c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c42:	f89a 3000 	ldrb.w	r3, [sl]
 8005c46:	2b2a      	cmp	r3, #42	; 0x2a
 8005c48:	d015      	beq.n	8005c76 <_svfiprintf_r+0xf6>
 8005c4a:	9a07      	ldr	r2, [sp, #28]
 8005c4c:	4654      	mov	r4, sl
 8005c4e:	2000      	movs	r0, #0
 8005c50:	f04f 0c0a 	mov.w	ip, #10
 8005c54:	4621      	mov	r1, r4
 8005c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c5a:	3b30      	subs	r3, #48	; 0x30
 8005c5c:	2b09      	cmp	r3, #9
 8005c5e:	d94e      	bls.n	8005cfe <_svfiprintf_r+0x17e>
 8005c60:	b1b0      	cbz	r0, 8005c90 <_svfiprintf_r+0x110>
 8005c62:	9207      	str	r2, [sp, #28]
 8005c64:	e014      	b.n	8005c90 <_svfiprintf_r+0x110>
 8005c66:	eba0 0308 	sub.w	r3, r0, r8
 8005c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	46a2      	mov	sl, r4
 8005c74:	e7d2      	b.n	8005c1c <_svfiprintf_r+0x9c>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	1d19      	adds	r1, r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	9103      	str	r1, [sp, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfbb      	ittet	lt
 8005c82:	425b      	neglt	r3, r3
 8005c84:	f042 0202 	orrlt.w	r2, r2, #2
 8005c88:	9307      	strge	r3, [sp, #28]
 8005c8a:	9307      	strlt	r3, [sp, #28]
 8005c8c:	bfb8      	it	lt
 8005c8e:	9204      	strlt	r2, [sp, #16]
 8005c90:	7823      	ldrb	r3, [r4, #0]
 8005c92:	2b2e      	cmp	r3, #46	; 0x2e
 8005c94:	d10c      	bne.n	8005cb0 <_svfiprintf_r+0x130>
 8005c96:	7863      	ldrb	r3, [r4, #1]
 8005c98:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9a:	d135      	bne.n	8005d08 <_svfiprintf_r+0x188>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	9203      	str	r2, [sp, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfb8      	it	lt
 8005ca8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cac:	3402      	adds	r4, #2
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005d70 <_svfiprintf_r+0x1f0>
 8005cb4:	7821      	ldrb	r1, [r4, #0]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	4650      	mov	r0, sl
 8005cba:	f7fa fa69 	bl	8000190 <memchr>
 8005cbe:	b140      	cbz	r0, 8005cd2 <_svfiprintf_r+0x152>
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	eba0 000a 	sub.w	r0, r0, sl
 8005cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	4303      	orrs	r3, r0
 8005cce:	3401      	adds	r4, #1
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd6:	4827      	ldr	r0, [pc, #156]	; (8005d74 <_svfiprintf_r+0x1f4>)
 8005cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cdc:	2206      	movs	r2, #6
 8005cde:	f7fa fa57 	bl	8000190 <memchr>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d038      	beq.n	8005d58 <_svfiprintf_r+0x1d8>
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <_svfiprintf_r+0x1f8>)
 8005ce8:	bb1b      	cbnz	r3, 8005d32 <_svfiprintf_r+0x1b2>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	3307      	adds	r3, #7
 8005cee:	f023 0307 	bic.w	r3, r3, #7
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf8:	4433      	add	r3, r6
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	e767      	b.n	8005bce <_svfiprintf_r+0x4e>
 8005cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d02:	460c      	mov	r4, r1
 8005d04:	2001      	movs	r0, #1
 8005d06:	e7a5      	b.n	8005c54 <_svfiprintf_r+0xd4>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	3401      	adds	r4, #1
 8005d0c:	9305      	str	r3, [sp, #20]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	f04f 0c0a 	mov.w	ip, #10
 8005d14:	4620      	mov	r0, r4
 8005d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d1a:	3a30      	subs	r2, #48	; 0x30
 8005d1c:	2a09      	cmp	r2, #9
 8005d1e:	d903      	bls.n	8005d28 <_svfiprintf_r+0x1a8>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0c5      	beq.n	8005cb0 <_svfiprintf_r+0x130>
 8005d24:	9105      	str	r1, [sp, #20]
 8005d26:	e7c3      	b.n	8005cb0 <_svfiprintf_r+0x130>
 8005d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e7f0      	b.n	8005d14 <_svfiprintf_r+0x194>
 8005d32:	ab03      	add	r3, sp, #12
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	462a      	mov	r2, r5
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <_svfiprintf_r+0x1fc>)
 8005d3a:	a904      	add	r1, sp, #16
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f3af 8000 	nop.w
 8005d42:	1c42      	adds	r2, r0, #1
 8005d44:	4606      	mov	r6, r0
 8005d46:	d1d6      	bne.n	8005cf6 <_svfiprintf_r+0x176>
 8005d48:	89ab      	ldrh	r3, [r5, #12]
 8005d4a:	065b      	lsls	r3, r3, #25
 8005d4c:	f53f af2c 	bmi.w	8005ba8 <_svfiprintf_r+0x28>
 8005d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d52:	b01d      	add	sp, #116	; 0x74
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	ab03      	add	r3, sp, #12
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <_svfiprintf_r+0x1fc>)
 8005d60:	a904      	add	r1, sp, #16
 8005d62:	4638      	mov	r0, r7
 8005d64:	f000 fa4c 	bl	8006200 <_printf_i>
 8005d68:	e7eb      	b.n	8005d42 <_svfiprintf_r+0x1c2>
 8005d6a:	bf00      	nop
 8005d6c:	08006ec4 	.word	0x08006ec4
 8005d70:	08006eca 	.word	0x08006eca
 8005d74:	08006ece 	.word	0x08006ece
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	08005ac9 	.word	0x08005ac9

08005d80 <_sungetc_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	1c4b      	adds	r3, r1, #1
 8005d84:	4614      	mov	r4, r2
 8005d86:	d103      	bne.n	8005d90 <_sungetc_r+0x10>
 8005d88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	8993      	ldrh	r3, [r2, #12]
 8005d92:	f023 0320 	bic.w	r3, r3, #32
 8005d96:	8193      	strh	r3, [r2, #12]
 8005d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d9a:	6852      	ldr	r2, [r2, #4]
 8005d9c:	b2cd      	uxtb	r5, r1
 8005d9e:	b18b      	cbz	r3, 8005dc4 <_sungetc_r+0x44>
 8005da0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005da2:	4293      	cmp	r3, r2
 8005da4:	dd08      	ble.n	8005db8 <_sungetc_r+0x38>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	1e5a      	subs	r2, r3, #1
 8005daa:	6022      	str	r2, [r4, #0]
 8005dac:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	3301      	adds	r3, #1
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	e7e9      	b.n	8005d8c <_sungetc_r+0xc>
 8005db8:	4621      	mov	r1, r4
 8005dba:	f000 fdc3 	bl	8006944 <__submore>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0f1      	beq.n	8005da6 <_sungetc_r+0x26>
 8005dc2:	e7e1      	b.n	8005d88 <_sungetc_r+0x8>
 8005dc4:	6921      	ldr	r1, [r4, #16]
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	b151      	cbz	r1, 8005de0 <_sungetc_r+0x60>
 8005dca:	4299      	cmp	r1, r3
 8005dcc:	d208      	bcs.n	8005de0 <_sungetc_r+0x60>
 8005dce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005dd2:	42a9      	cmp	r1, r5
 8005dd4:	d104      	bne.n	8005de0 <_sungetc_r+0x60>
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	3201      	adds	r2, #1
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	6062      	str	r2, [r4, #4]
 8005dde:	e7d5      	b.n	8005d8c <_sungetc_r+0xc>
 8005de0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005de8:	6363      	str	r3, [r4, #52]	; 0x34
 8005dea:	2303      	movs	r3, #3
 8005dec:	63a3      	str	r3, [r4, #56]	; 0x38
 8005dee:	4623      	mov	r3, r4
 8005df0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	2301      	movs	r3, #1
 8005df8:	e7dc      	b.n	8005db4 <_sungetc_r+0x34>

08005dfa <__ssrefill_r>:
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005e00:	b169      	cbz	r1, 8005e1e <__ssrefill_r+0x24>
 8005e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e06:	4299      	cmp	r1, r3
 8005e08:	d001      	beq.n	8005e0e <__ssrefill_r+0x14>
 8005e0a:	f000 fdf1 	bl	80069f0 <_free_r>
 8005e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e10:	6063      	str	r3, [r4, #4]
 8005e12:	2000      	movs	r0, #0
 8005e14:	6360      	str	r0, [r4, #52]	; 0x34
 8005e16:	b113      	cbz	r3, 8005e1e <__ssrefill_r+0x24>
 8005e18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	bd10      	pop	{r4, pc}
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	2300      	movs	r3, #0
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f043 0320 	orr.w	r3, r3, #32
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e32:	e7f3      	b.n	8005e1c <__ssrefill_r+0x22>

08005e34 <__ssvfiscanf_r>:
 8005e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e38:	460c      	mov	r4, r1
 8005e3a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005e3e:	2100      	movs	r1, #0
 8005e40:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005e44:	49a6      	ldr	r1, [pc, #664]	; (80060e0 <__ssvfiscanf_r+0x2ac>)
 8005e46:	91a0      	str	r1, [sp, #640]	; 0x280
 8005e48:	f10d 0804 	add.w	r8, sp, #4
 8005e4c:	49a5      	ldr	r1, [pc, #660]	; (80060e4 <__ssvfiscanf_r+0x2b0>)
 8005e4e:	4fa6      	ldr	r7, [pc, #664]	; (80060e8 <__ssvfiscanf_r+0x2b4>)
 8005e50:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80060ec <__ssvfiscanf_r+0x2b8>
 8005e54:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005e58:	4606      	mov	r6, r0
 8005e5a:	91a1      	str	r1, [sp, #644]	; 0x284
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	7813      	ldrb	r3, [r2, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 815a 	beq.w	800611a <__ssvfiscanf_r+0x2e6>
 8005e66:	5dd9      	ldrb	r1, [r3, r7]
 8005e68:	f011 0108 	ands.w	r1, r1, #8
 8005e6c:	f102 0501 	add.w	r5, r2, #1
 8005e70:	d019      	beq.n	8005ea6 <__ssvfiscanf_r+0x72>
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dd0f      	ble.n	8005e98 <__ssvfiscanf_r+0x64>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	5cba      	ldrb	r2, [r7, r2]
 8005e7e:	0712      	lsls	r2, r2, #28
 8005e80:	d401      	bmi.n	8005e86 <__ssvfiscanf_r+0x52>
 8005e82:	462a      	mov	r2, r5
 8005e84:	e7eb      	b.n	8005e5e <__ssvfiscanf_r+0x2a>
 8005e86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005e88:	3201      	adds	r2, #1
 8005e8a:	9245      	str	r2, [sp, #276]	; 0x114
 8005e8c:	6862      	ldr	r2, [r4, #4]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	3a01      	subs	r2, #1
 8005e92:	6062      	str	r2, [r4, #4]
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	e7ec      	b.n	8005e72 <__ssvfiscanf_r+0x3e>
 8005e98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4798      	blx	r3
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d0e9      	beq.n	8005e78 <__ssvfiscanf_r+0x44>
 8005ea4:	e7ed      	b.n	8005e82 <__ssvfiscanf_r+0x4e>
 8005ea6:	2b25      	cmp	r3, #37	; 0x25
 8005ea8:	d012      	beq.n	8005ed0 <__ssvfiscanf_r+0x9c>
 8005eaa:	469a      	mov	sl, r3
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f340 8091 	ble.w	8005fd6 <__ssvfiscanf_r+0x1a2>
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	7813      	ldrb	r3, [r2, #0]
 8005eb8:	4553      	cmp	r3, sl
 8005eba:	f040 812e 	bne.w	800611a <__ssvfiscanf_r+0x2e6>
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005ec6:	3201      	adds	r2, #1
 8005ec8:	3301      	adds	r3, #1
 8005eca:	6022      	str	r2, [r4, #0]
 8005ecc:	9345      	str	r3, [sp, #276]	; 0x114
 8005ece:	e7d8      	b.n	8005e82 <__ssvfiscanf_r+0x4e>
 8005ed0:	9141      	str	r1, [sp, #260]	; 0x104
 8005ed2:	9143      	str	r1, [sp, #268]	; 0x10c
 8005ed4:	7853      	ldrb	r3, [r2, #1]
 8005ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed8:	bf02      	ittt	eq
 8005eda:	2310      	moveq	r3, #16
 8005edc:	1c95      	addeq	r5, r2, #2
 8005ede:	9341      	streq	r3, [sp, #260]	; 0x104
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	46aa      	mov	sl, r5
 8005ee4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005ee8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005eec:	2b09      	cmp	r3, #9
 8005eee:	d91d      	bls.n	8005f2c <__ssvfiscanf_r+0xf8>
 8005ef0:	487e      	ldr	r0, [pc, #504]	; (80060ec <__ssvfiscanf_r+0x2b8>)
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	f7fa f94c 	bl	8000190 <memchr>
 8005ef8:	b140      	cbz	r0, 8005f0c <__ssvfiscanf_r+0xd8>
 8005efa:	2301      	movs	r3, #1
 8005efc:	eba0 0009 	sub.w	r0, r0, r9
 8005f00:	fa03 f000 	lsl.w	r0, r3, r0
 8005f04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f06:	4318      	orrs	r0, r3
 8005f08:	9041      	str	r0, [sp, #260]	; 0x104
 8005f0a:	4655      	mov	r5, sl
 8005f0c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f10:	2b78      	cmp	r3, #120	; 0x78
 8005f12:	d806      	bhi.n	8005f22 <__ssvfiscanf_r+0xee>
 8005f14:	2b57      	cmp	r3, #87	; 0x57
 8005f16:	d810      	bhi.n	8005f3a <__ssvfiscanf_r+0x106>
 8005f18:	2b25      	cmp	r3, #37	; 0x25
 8005f1a:	d0c6      	beq.n	8005eaa <__ssvfiscanf_r+0x76>
 8005f1c:	d856      	bhi.n	8005fcc <__ssvfiscanf_r+0x198>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d064      	beq.n	8005fec <__ssvfiscanf_r+0x1b8>
 8005f22:	2303      	movs	r3, #3
 8005f24:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f26:	230a      	movs	r3, #10
 8005f28:	9342      	str	r3, [sp, #264]	; 0x108
 8005f2a:	e071      	b.n	8006010 <__ssvfiscanf_r+0x1dc>
 8005f2c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005f2e:	fb02 1103 	mla	r1, r2, r3, r1
 8005f32:	3930      	subs	r1, #48	; 0x30
 8005f34:	9143      	str	r1, [sp, #268]	; 0x10c
 8005f36:	4655      	mov	r5, sl
 8005f38:	e7d3      	b.n	8005ee2 <__ssvfiscanf_r+0xae>
 8005f3a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005f3e:	2a20      	cmp	r2, #32
 8005f40:	d8ef      	bhi.n	8005f22 <__ssvfiscanf_r+0xee>
 8005f42:	a101      	add	r1, pc, #4	; (adr r1, 8005f48 <__ssvfiscanf_r+0x114>)
 8005f44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f48:	08005ffb 	.word	0x08005ffb
 8005f4c:	08005f23 	.word	0x08005f23
 8005f50:	08005f23 	.word	0x08005f23
 8005f54:	08006059 	.word	0x08006059
 8005f58:	08005f23 	.word	0x08005f23
 8005f5c:	08005f23 	.word	0x08005f23
 8005f60:	08005f23 	.word	0x08005f23
 8005f64:	08005f23 	.word	0x08005f23
 8005f68:	08005f23 	.word	0x08005f23
 8005f6c:	08005f23 	.word	0x08005f23
 8005f70:	08005f23 	.word	0x08005f23
 8005f74:	0800606f 	.word	0x0800606f
 8005f78:	08006045 	.word	0x08006045
 8005f7c:	08005fd3 	.word	0x08005fd3
 8005f80:	08005fd3 	.word	0x08005fd3
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005f23 	.word	0x08005f23
 8005f8c:	08006049 	.word	0x08006049
 8005f90:	08005f23 	.word	0x08005f23
 8005f94:	08005f23 	.word	0x08005f23
 8005f98:	08005f23 	.word	0x08005f23
 8005f9c:	08005f23 	.word	0x08005f23
 8005fa0:	0800607f 	.word	0x0800607f
 8005fa4:	08006051 	.word	0x08006051
 8005fa8:	08005ff3 	.word	0x08005ff3
 8005fac:	08005f23 	.word	0x08005f23
 8005fb0:	08005f23 	.word	0x08005f23
 8005fb4:	0800607b 	.word	0x0800607b
 8005fb8:	08005f23 	.word	0x08005f23
 8005fbc:	08006045 	.word	0x08006045
 8005fc0:	08005f23 	.word	0x08005f23
 8005fc4:	08005f23 	.word	0x08005f23
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	3b45      	subs	r3, #69	; 0x45
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d8a7      	bhi.n	8005f22 <__ssvfiscanf_r+0xee>
 8005fd2:	2305      	movs	r3, #5
 8005fd4:	e01b      	b.n	800600e <__ssvfiscanf_r+0x1da>
 8005fd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4798      	blx	r3
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f43f af68 	beq.w	8005eb4 <__ssvfiscanf_r+0x80>
 8005fe4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f040 808d 	bne.w	8006106 <__ssvfiscanf_r+0x2d2>
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ff0:	e08f      	b.n	8006112 <__ssvfiscanf_r+0x2de>
 8005ff2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ff4:	f042 0220 	orr.w	r2, r2, #32
 8005ff8:	9241      	str	r2, [sp, #260]	; 0x104
 8005ffa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006000:	9241      	str	r2, [sp, #260]	; 0x104
 8006002:	2210      	movs	r2, #16
 8006004:	2b6f      	cmp	r3, #111	; 0x6f
 8006006:	9242      	str	r2, [sp, #264]	; 0x108
 8006008:	bf34      	ite	cc
 800600a:	2303      	movcc	r3, #3
 800600c:	2304      	movcs	r3, #4
 800600e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	dd42      	ble.n	800609c <__ssvfiscanf_r+0x268>
 8006016:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006018:	0659      	lsls	r1, r3, #25
 800601a:	d404      	bmi.n	8006026 <__ssvfiscanf_r+0x1f2>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	5cba      	ldrb	r2, [r7, r2]
 8006022:	0712      	lsls	r2, r2, #28
 8006024:	d441      	bmi.n	80060aa <__ssvfiscanf_r+0x276>
 8006026:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006028:	2b02      	cmp	r3, #2
 800602a:	dc50      	bgt.n	80060ce <__ssvfiscanf_r+0x29a>
 800602c:	466b      	mov	r3, sp
 800602e:	4622      	mov	r2, r4
 8006030:	a941      	add	r1, sp, #260	; 0x104
 8006032:	4630      	mov	r0, r6
 8006034:	f000 fa0a 	bl	800644c <_scanf_chars>
 8006038:	2801      	cmp	r0, #1
 800603a:	d06e      	beq.n	800611a <__ssvfiscanf_r+0x2e6>
 800603c:	2802      	cmp	r0, #2
 800603e:	f47f af20 	bne.w	8005e82 <__ssvfiscanf_r+0x4e>
 8006042:	e7cf      	b.n	8005fe4 <__ssvfiscanf_r+0x1b0>
 8006044:	220a      	movs	r2, #10
 8006046:	e7dd      	b.n	8006004 <__ssvfiscanf_r+0x1d0>
 8006048:	2300      	movs	r3, #0
 800604a:	9342      	str	r3, [sp, #264]	; 0x108
 800604c:	2303      	movs	r3, #3
 800604e:	e7de      	b.n	800600e <__ssvfiscanf_r+0x1da>
 8006050:	2308      	movs	r3, #8
 8006052:	9342      	str	r3, [sp, #264]	; 0x108
 8006054:	2304      	movs	r3, #4
 8006056:	e7da      	b.n	800600e <__ssvfiscanf_r+0x1da>
 8006058:	4629      	mov	r1, r5
 800605a:	4640      	mov	r0, r8
 800605c:	f000 fb48 	bl	80066f0 <__sccl>
 8006060:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006066:	9341      	str	r3, [sp, #260]	; 0x104
 8006068:	4605      	mov	r5, r0
 800606a:	2301      	movs	r3, #1
 800606c:	e7cf      	b.n	800600e <__ssvfiscanf_r+0x1da>
 800606e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006074:	9341      	str	r3, [sp, #260]	; 0x104
 8006076:	2300      	movs	r3, #0
 8006078:	e7c9      	b.n	800600e <__ssvfiscanf_r+0x1da>
 800607a:	2302      	movs	r3, #2
 800607c:	e7c7      	b.n	800600e <__ssvfiscanf_r+0x1da>
 800607e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006080:	06c3      	lsls	r3, r0, #27
 8006082:	f53f aefe 	bmi.w	8005e82 <__ssvfiscanf_r+0x4e>
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800608a:	1d19      	adds	r1, r3, #4
 800608c:	9100      	str	r1, [sp, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f010 0f01 	tst.w	r0, #1
 8006094:	bf14      	ite	ne
 8006096:	801a      	strhne	r2, [r3, #0]
 8006098:	601a      	streq	r2, [r3, #0]
 800609a:	e6f2      	b.n	8005e82 <__ssvfiscanf_r+0x4e>
 800609c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800609e:	4621      	mov	r1, r4
 80060a0:	4630      	mov	r0, r6
 80060a2:	4798      	blx	r3
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d0b6      	beq.n	8006016 <__ssvfiscanf_r+0x1e2>
 80060a8:	e79c      	b.n	8005fe4 <__ssvfiscanf_r+0x1b0>
 80060aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80060ac:	3201      	adds	r2, #1
 80060ae:	9245      	str	r2, [sp, #276]	; 0x114
 80060b0:	6862      	ldr	r2, [r4, #4]
 80060b2:	3a01      	subs	r2, #1
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	6062      	str	r2, [r4, #4]
 80060b8:	dd02      	ble.n	80060c0 <__ssvfiscanf_r+0x28c>
 80060ba:	3301      	adds	r3, #1
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	e7ad      	b.n	800601c <__ssvfiscanf_r+0x1e8>
 80060c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80060c2:	4621      	mov	r1, r4
 80060c4:	4630      	mov	r0, r6
 80060c6:	4798      	blx	r3
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d0a7      	beq.n	800601c <__ssvfiscanf_r+0x1e8>
 80060cc:	e78a      	b.n	8005fe4 <__ssvfiscanf_r+0x1b0>
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	dc0e      	bgt.n	80060f0 <__ssvfiscanf_r+0x2bc>
 80060d2:	466b      	mov	r3, sp
 80060d4:	4622      	mov	r2, r4
 80060d6:	a941      	add	r1, sp, #260	; 0x104
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 fa11 	bl	8006500 <_scanf_i>
 80060de:	e7ab      	b.n	8006038 <__ssvfiscanf_r+0x204>
 80060e0:	08005d81 	.word	0x08005d81
 80060e4:	08005dfb 	.word	0x08005dfb
 80060e8:	08006f13 	.word	0x08006f13
 80060ec:	08006eca 	.word	0x08006eca
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <__ssvfiscanf_r+0x2ec>)
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f43f aec5 	beq.w	8005e82 <__ssvfiscanf_r+0x4e>
 80060f8:	466b      	mov	r3, sp
 80060fa:	4622      	mov	r2, r4
 80060fc:	a941      	add	r1, sp, #260	; 0x104
 80060fe:	4630      	mov	r0, r6
 8006100:	f3af 8000 	nop.w
 8006104:	e798      	b.n	8006038 <__ssvfiscanf_r+0x204>
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f013 0f40 	tst.w	r3, #64	; 0x40
 800610c:	bf18      	it	ne
 800610e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006112:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800611c:	e7f9      	b.n	8006112 <__ssvfiscanf_r+0x2de>
 800611e:	bf00      	nop
 8006120:	00000000 	.word	0x00000000

08006124 <_printf_common>:
 8006124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	4616      	mov	r6, r2
 800612a:	4699      	mov	r9, r3
 800612c:	688a      	ldr	r2, [r1, #8]
 800612e:	690b      	ldr	r3, [r1, #16]
 8006130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006134:	4293      	cmp	r3, r2
 8006136:	bfb8      	it	lt
 8006138:	4613      	movlt	r3, r2
 800613a:	6033      	str	r3, [r6, #0]
 800613c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006140:	4607      	mov	r7, r0
 8006142:	460c      	mov	r4, r1
 8006144:	b10a      	cbz	r2, 800614a <_printf_common+0x26>
 8006146:	3301      	adds	r3, #1
 8006148:	6033      	str	r3, [r6, #0]
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	0699      	lsls	r1, r3, #26
 800614e:	bf42      	ittt	mi
 8006150:	6833      	ldrmi	r3, [r6, #0]
 8006152:	3302      	addmi	r3, #2
 8006154:	6033      	strmi	r3, [r6, #0]
 8006156:	6825      	ldr	r5, [r4, #0]
 8006158:	f015 0506 	ands.w	r5, r5, #6
 800615c:	d106      	bne.n	800616c <_printf_common+0x48>
 800615e:	f104 0a19 	add.w	sl, r4, #25
 8006162:	68e3      	ldr	r3, [r4, #12]
 8006164:	6832      	ldr	r2, [r6, #0]
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	42ab      	cmp	r3, r5
 800616a:	dc26      	bgt.n	80061ba <_printf_common+0x96>
 800616c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006170:	1e13      	subs	r3, r2, #0
 8006172:	6822      	ldr	r2, [r4, #0]
 8006174:	bf18      	it	ne
 8006176:	2301      	movne	r3, #1
 8006178:	0692      	lsls	r2, r2, #26
 800617a:	d42b      	bmi.n	80061d4 <_printf_common+0xb0>
 800617c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006180:	4649      	mov	r1, r9
 8006182:	4638      	mov	r0, r7
 8006184:	47c0      	blx	r8
 8006186:	3001      	adds	r0, #1
 8006188:	d01e      	beq.n	80061c8 <_printf_common+0xa4>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	68e5      	ldr	r5, [r4, #12]
 800618e:	6832      	ldr	r2, [r6, #0]
 8006190:	f003 0306 	and.w	r3, r3, #6
 8006194:	2b04      	cmp	r3, #4
 8006196:	bf08      	it	eq
 8006198:	1aad      	subeq	r5, r5, r2
 800619a:	68a3      	ldr	r3, [r4, #8]
 800619c:	6922      	ldr	r2, [r4, #16]
 800619e:	bf0c      	ite	eq
 80061a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061a4:	2500      	movne	r5, #0
 80061a6:	4293      	cmp	r3, r2
 80061a8:	bfc4      	itt	gt
 80061aa:	1a9b      	subgt	r3, r3, r2
 80061ac:	18ed      	addgt	r5, r5, r3
 80061ae:	2600      	movs	r6, #0
 80061b0:	341a      	adds	r4, #26
 80061b2:	42b5      	cmp	r5, r6
 80061b4:	d11a      	bne.n	80061ec <_printf_common+0xc8>
 80061b6:	2000      	movs	r0, #0
 80061b8:	e008      	b.n	80061cc <_printf_common+0xa8>
 80061ba:	2301      	movs	r3, #1
 80061bc:	4652      	mov	r2, sl
 80061be:	4649      	mov	r1, r9
 80061c0:	4638      	mov	r0, r7
 80061c2:	47c0      	blx	r8
 80061c4:	3001      	adds	r0, #1
 80061c6:	d103      	bne.n	80061d0 <_printf_common+0xac>
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	3501      	adds	r5, #1
 80061d2:	e7c6      	b.n	8006162 <_printf_common+0x3e>
 80061d4:	18e1      	adds	r1, r4, r3
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	2030      	movs	r0, #48	; 0x30
 80061da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061de:	4422      	add	r2, r4
 80061e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061e8:	3302      	adds	r3, #2
 80061ea:	e7c7      	b.n	800617c <_printf_common+0x58>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4622      	mov	r2, r4
 80061f0:	4649      	mov	r1, r9
 80061f2:	4638      	mov	r0, r7
 80061f4:	47c0      	blx	r8
 80061f6:	3001      	adds	r0, #1
 80061f8:	d0e6      	beq.n	80061c8 <_printf_common+0xa4>
 80061fa:	3601      	adds	r6, #1
 80061fc:	e7d9      	b.n	80061b2 <_printf_common+0x8e>
	...

08006200 <_printf_i>:
 8006200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	7e0f      	ldrb	r7, [r1, #24]
 8006206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006208:	2f78      	cmp	r7, #120	; 0x78
 800620a:	4691      	mov	r9, r2
 800620c:	4680      	mov	r8, r0
 800620e:	460c      	mov	r4, r1
 8006210:	469a      	mov	sl, r3
 8006212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006216:	d807      	bhi.n	8006228 <_printf_i+0x28>
 8006218:	2f62      	cmp	r7, #98	; 0x62
 800621a:	d80a      	bhi.n	8006232 <_printf_i+0x32>
 800621c:	2f00      	cmp	r7, #0
 800621e:	f000 80d8 	beq.w	80063d2 <_printf_i+0x1d2>
 8006222:	2f58      	cmp	r7, #88	; 0x58
 8006224:	f000 80a3 	beq.w	800636e <_printf_i+0x16e>
 8006228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800622c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006230:	e03a      	b.n	80062a8 <_printf_i+0xa8>
 8006232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006236:	2b15      	cmp	r3, #21
 8006238:	d8f6      	bhi.n	8006228 <_printf_i+0x28>
 800623a:	a101      	add	r1, pc, #4	; (adr r1, 8006240 <_printf_i+0x40>)
 800623c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006240:	08006299 	.word	0x08006299
 8006244:	080062ad 	.word	0x080062ad
 8006248:	08006229 	.word	0x08006229
 800624c:	08006229 	.word	0x08006229
 8006250:	08006229 	.word	0x08006229
 8006254:	08006229 	.word	0x08006229
 8006258:	080062ad 	.word	0x080062ad
 800625c:	08006229 	.word	0x08006229
 8006260:	08006229 	.word	0x08006229
 8006264:	08006229 	.word	0x08006229
 8006268:	08006229 	.word	0x08006229
 800626c:	080063b9 	.word	0x080063b9
 8006270:	080062dd 	.word	0x080062dd
 8006274:	0800639b 	.word	0x0800639b
 8006278:	08006229 	.word	0x08006229
 800627c:	08006229 	.word	0x08006229
 8006280:	080063db 	.word	0x080063db
 8006284:	08006229 	.word	0x08006229
 8006288:	080062dd 	.word	0x080062dd
 800628c:	08006229 	.word	0x08006229
 8006290:	08006229 	.word	0x08006229
 8006294:	080063a3 	.word	0x080063a3
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	1d1a      	adds	r2, r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	602a      	str	r2, [r5, #0]
 80062a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0a3      	b.n	80063f4 <_printf_i+0x1f4>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	6829      	ldr	r1, [r5, #0]
 80062b0:	0606      	lsls	r6, r0, #24
 80062b2:	f101 0304 	add.w	r3, r1, #4
 80062b6:	d50a      	bpl.n	80062ce <_printf_i+0xce>
 80062b8:	680e      	ldr	r6, [r1, #0]
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	2e00      	cmp	r6, #0
 80062be:	da03      	bge.n	80062c8 <_printf_i+0xc8>
 80062c0:	232d      	movs	r3, #45	; 0x2d
 80062c2:	4276      	negs	r6, r6
 80062c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c8:	485e      	ldr	r0, [pc, #376]	; (8006444 <_printf_i+0x244>)
 80062ca:	230a      	movs	r3, #10
 80062cc:	e019      	b.n	8006302 <_printf_i+0x102>
 80062ce:	680e      	ldr	r6, [r1, #0]
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062d6:	bf18      	it	ne
 80062d8:	b236      	sxthne	r6, r6
 80062da:	e7ef      	b.n	80062bc <_printf_i+0xbc>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1d19      	adds	r1, r3, #4
 80062e2:	6029      	str	r1, [r5, #0]
 80062e4:	0601      	lsls	r1, r0, #24
 80062e6:	d501      	bpl.n	80062ec <_printf_i+0xec>
 80062e8:	681e      	ldr	r6, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <_printf_i+0xf2>
 80062ec:	0646      	lsls	r6, r0, #25
 80062ee:	d5fb      	bpl.n	80062e8 <_printf_i+0xe8>
 80062f0:	881e      	ldrh	r6, [r3, #0]
 80062f2:	4854      	ldr	r0, [pc, #336]	; (8006444 <_printf_i+0x244>)
 80062f4:	2f6f      	cmp	r7, #111	; 0x6f
 80062f6:	bf0c      	ite	eq
 80062f8:	2308      	moveq	r3, #8
 80062fa:	230a      	movne	r3, #10
 80062fc:	2100      	movs	r1, #0
 80062fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006302:	6865      	ldr	r5, [r4, #4]
 8006304:	60a5      	str	r5, [r4, #8]
 8006306:	2d00      	cmp	r5, #0
 8006308:	bfa2      	ittt	ge
 800630a:	6821      	ldrge	r1, [r4, #0]
 800630c:	f021 0104 	bicge.w	r1, r1, #4
 8006310:	6021      	strge	r1, [r4, #0]
 8006312:	b90e      	cbnz	r6, 8006318 <_printf_i+0x118>
 8006314:	2d00      	cmp	r5, #0
 8006316:	d04d      	beq.n	80063b4 <_printf_i+0x1b4>
 8006318:	4615      	mov	r5, r2
 800631a:	fbb6 f1f3 	udiv	r1, r6, r3
 800631e:	fb03 6711 	mls	r7, r3, r1, r6
 8006322:	5dc7      	ldrb	r7, [r0, r7]
 8006324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006328:	4637      	mov	r7, r6
 800632a:	42bb      	cmp	r3, r7
 800632c:	460e      	mov	r6, r1
 800632e:	d9f4      	bls.n	800631a <_printf_i+0x11a>
 8006330:	2b08      	cmp	r3, #8
 8006332:	d10b      	bne.n	800634c <_printf_i+0x14c>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	07de      	lsls	r6, r3, #31
 8006338:	d508      	bpl.n	800634c <_printf_i+0x14c>
 800633a:	6923      	ldr	r3, [r4, #16]
 800633c:	6861      	ldr	r1, [r4, #4]
 800633e:	4299      	cmp	r1, r3
 8006340:	bfde      	ittt	le
 8006342:	2330      	movle	r3, #48	; 0x30
 8006344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006348:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800634c:	1b52      	subs	r2, r2, r5
 800634e:	6122      	str	r2, [r4, #16]
 8006350:	f8cd a000 	str.w	sl, [sp]
 8006354:	464b      	mov	r3, r9
 8006356:	aa03      	add	r2, sp, #12
 8006358:	4621      	mov	r1, r4
 800635a:	4640      	mov	r0, r8
 800635c:	f7ff fee2 	bl	8006124 <_printf_common>
 8006360:	3001      	adds	r0, #1
 8006362:	d14c      	bne.n	80063fe <_printf_i+0x1fe>
 8006364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006368:	b004      	add	sp, #16
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	4835      	ldr	r0, [pc, #212]	; (8006444 <_printf_i+0x244>)
 8006370:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006374:	6829      	ldr	r1, [r5, #0]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	f851 6b04 	ldr.w	r6, [r1], #4
 800637c:	6029      	str	r1, [r5, #0]
 800637e:	061d      	lsls	r5, r3, #24
 8006380:	d514      	bpl.n	80063ac <_printf_i+0x1ac>
 8006382:	07df      	lsls	r7, r3, #31
 8006384:	bf44      	itt	mi
 8006386:	f043 0320 	orrmi.w	r3, r3, #32
 800638a:	6023      	strmi	r3, [r4, #0]
 800638c:	b91e      	cbnz	r6, 8006396 <_printf_i+0x196>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	f023 0320 	bic.w	r3, r3, #32
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	2310      	movs	r3, #16
 8006398:	e7b0      	b.n	80062fc <_printf_i+0xfc>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	f043 0320 	orr.w	r3, r3, #32
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	2378      	movs	r3, #120	; 0x78
 80063a4:	4828      	ldr	r0, [pc, #160]	; (8006448 <_printf_i+0x248>)
 80063a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063aa:	e7e3      	b.n	8006374 <_printf_i+0x174>
 80063ac:	0659      	lsls	r1, r3, #25
 80063ae:	bf48      	it	mi
 80063b0:	b2b6      	uxthmi	r6, r6
 80063b2:	e7e6      	b.n	8006382 <_printf_i+0x182>
 80063b4:	4615      	mov	r5, r2
 80063b6:	e7bb      	b.n	8006330 <_printf_i+0x130>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	6826      	ldr	r6, [r4, #0]
 80063bc:	6961      	ldr	r1, [r4, #20]
 80063be:	1d18      	adds	r0, r3, #4
 80063c0:	6028      	str	r0, [r5, #0]
 80063c2:	0635      	lsls	r5, r6, #24
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	d501      	bpl.n	80063cc <_printf_i+0x1cc>
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <_printf_i+0x1d2>
 80063cc:	0670      	lsls	r0, r6, #25
 80063ce:	d5fb      	bpl.n	80063c8 <_printf_i+0x1c8>
 80063d0:	8019      	strh	r1, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	4615      	mov	r5, r2
 80063d8:	e7ba      	b.n	8006350 <_printf_i+0x150>
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	1d1a      	adds	r2, r3, #4
 80063de:	602a      	str	r2, [r5, #0]
 80063e0:	681d      	ldr	r5, [r3, #0]
 80063e2:	6862      	ldr	r2, [r4, #4]
 80063e4:	2100      	movs	r1, #0
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7f9 fed2 	bl	8000190 <memchr>
 80063ec:	b108      	cbz	r0, 80063f2 <_printf_i+0x1f2>
 80063ee:	1b40      	subs	r0, r0, r5
 80063f0:	6060      	str	r0, [r4, #4]
 80063f2:	6863      	ldr	r3, [r4, #4]
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	2300      	movs	r3, #0
 80063f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fc:	e7a8      	b.n	8006350 <_printf_i+0x150>
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	462a      	mov	r2, r5
 8006402:	4649      	mov	r1, r9
 8006404:	4640      	mov	r0, r8
 8006406:	47d0      	blx	sl
 8006408:	3001      	adds	r0, #1
 800640a:	d0ab      	beq.n	8006364 <_printf_i+0x164>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	079b      	lsls	r3, r3, #30
 8006410:	d413      	bmi.n	800643a <_printf_i+0x23a>
 8006412:	68e0      	ldr	r0, [r4, #12]
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	4298      	cmp	r0, r3
 8006418:	bfb8      	it	lt
 800641a:	4618      	movlt	r0, r3
 800641c:	e7a4      	b.n	8006368 <_printf_i+0x168>
 800641e:	2301      	movs	r3, #1
 8006420:	4632      	mov	r2, r6
 8006422:	4649      	mov	r1, r9
 8006424:	4640      	mov	r0, r8
 8006426:	47d0      	blx	sl
 8006428:	3001      	adds	r0, #1
 800642a:	d09b      	beq.n	8006364 <_printf_i+0x164>
 800642c:	3501      	adds	r5, #1
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	9903      	ldr	r1, [sp, #12]
 8006432:	1a5b      	subs	r3, r3, r1
 8006434:	42ab      	cmp	r3, r5
 8006436:	dcf2      	bgt.n	800641e <_printf_i+0x21e>
 8006438:	e7eb      	b.n	8006412 <_printf_i+0x212>
 800643a:	2500      	movs	r5, #0
 800643c:	f104 0619 	add.w	r6, r4, #25
 8006440:	e7f5      	b.n	800642e <_printf_i+0x22e>
 8006442:	bf00      	nop
 8006444:	08006ed5 	.word	0x08006ed5
 8006448:	08006ee6 	.word	0x08006ee6

0800644c <_scanf_chars>:
 800644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006450:	4615      	mov	r5, r2
 8006452:	688a      	ldr	r2, [r1, #8]
 8006454:	4680      	mov	r8, r0
 8006456:	460c      	mov	r4, r1
 8006458:	b932      	cbnz	r2, 8006468 <_scanf_chars+0x1c>
 800645a:	698a      	ldr	r2, [r1, #24]
 800645c:	2a00      	cmp	r2, #0
 800645e:	bf0c      	ite	eq
 8006460:	2201      	moveq	r2, #1
 8006462:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006466:	608a      	str	r2, [r1, #8]
 8006468:	6822      	ldr	r2, [r4, #0]
 800646a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80064fc <_scanf_chars+0xb0>
 800646e:	06d1      	lsls	r1, r2, #27
 8006470:	bf5f      	itttt	pl
 8006472:	681a      	ldrpl	r2, [r3, #0]
 8006474:	1d11      	addpl	r1, r2, #4
 8006476:	6019      	strpl	r1, [r3, #0]
 8006478:	6816      	ldrpl	r6, [r2, #0]
 800647a:	2700      	movs	r7, #0
 800647c:	69a0      	ldr	r0, [r4, #24]
 800647e:	b188      	cbz	r0, 80064a4 <_scanf_chars+0x58>
 8006480:	2801      	cmp	r0, #1
 8006482:	d107      	bne.n	8006494 <_scanf_chars+0x48>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	6963      	ldr	r3, [r4, #20]
 800648a:	5c9b      	ldrb	r3, [r3, r2]
 800648c:	b953      	cbnz	r3, 80064a4 <_scanf_chars+0x58>
 800648e:	2f00      	cmp	r7, #0
 8006490:	d031      	beq.n	80064f6 <_scanf_chars+0xaa>
 8006492:	e022      	b.n	80064da <_scanf_chars+0x8e>
 8006494:	2802      	cmp	r0, #2
 8006496:	d120      	bne.n	80064da <_scanf_chars+0x8e>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80064a0:	071b      	lsls	r3, r3, #28
 80064a2:	d41a      	bmi.n	80064da <_scanf_chars+0x8e>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	06da      	lsls	r2, r3, #27
 80064a8:	bf5e      	ittt	pl
 80064aa:	682b      	ldrpl	r3, [r5, #0]
 80064ac:	781b      	ldrbpl	r3, [r3, #0]
 80064ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80064b2:	682a      	ldr	r2, [r5, #0]
 80064b4:	686b      	ldr	r3, [r5, #4]
 80064b6:	3201      	adds	r2, #1
 80064b8:	602a      	str	r2, [r5, #0]
 80064ba:	68a2      	ldr	r2, [r4, #8]
 80064bc:	3b01      	subs	r3, #1
 80064be:	3a01      	subs	r2, #1
 80064c0:	606b      	str	r3, [r5, #4]
 80064c2:	3701      	adds	r7, #1
 80064c4:	60a2      	str	r2, [r4, #8]
 80064c6:	b142      	cbz	r2, 80064da <_scanf_chars+0x8e>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	dcd7      	bgt.n	800647c <_scanf_chars+0x30>
 80064cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064d0:	4629      	mov	r1, r5
 80064d2:	4640      	mov	r0, r8
 80064d4:	4798      	blx	r3
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d0d0      	beq.n	800647c <_scanf_chars+0x30>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	f013 0310 	ands.w	r3, r3, #16
 80064e0:	d105      	bne.n	80064ee <_scanf_chars+0xa2>
 80064e2:	68e2      	ldr	r2, [r4, #12]
 80064e4:	3201      	adds	r2, #1
 80064e6:	60e2      	str	r2, [r4, #12]
 80064e8:	69a2      	ldr	r2, [r4, #24]
 80064ea:	b102      	cbz	r2, 80064ee <_scanf_chars+0xa2>
 80064ec:	7033      	strb	r3, [r6, #0]
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	443b      	add	r3, r7
 80064f2:	6123      	str	r3, [r4, #16]
 80064f4:	2000      	movs	r0, #0
 80064f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fa:	bf00      	nop
 80064fc:	08006f13 	.word	0x08006f13

08006500 <_scanf_i>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	4698      	mov	r8, r3
 8006506:	4b76      	ldr	r3, [pc, #472]	; (80066e0 <_scanf_i+0x1e0>)
 8006508:	460c      	mov	r4, r1
 800650a:	4682      	mov	sl, r0
 800650c:	4616      	mov	r6, r2
 800650e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006512:	b087      	sub	sp, #28
 8006514:	ab03      	add	r3, sp, #12
 8006516:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800651a:	4b72      	ldr	r3, [pc, #456]	; (80066e4 <_scanf_i+0x1e4>)
 800651c:	69a1      	ldr	r1, [r4, #24]
 800651e:	4a72      	ldr	r2, [pc, #456]	; (80066e8 <_scanf_i+0x1e8>)
 8006520:	2903      	cmp	r1, #3
 8006522:	bf18      	it	ne
 8006524:	461a      	movne	r2, r3
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	9201      	str	r2, [sp, #4]
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006530:	bf88      	it	hi
 8006532:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006536:	4627      	mov	r7, r4
 8006538:	bf82      	ittt	hi
 800653a:	eb03 0905 	addhi.w	r9, r3, r5
 800653e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006542:	60a3      	strhi	r3, [r4, #8]
 8006544:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006548:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800654c:	bf98      	it	ls
 800654e:	f04f 0900 	movls.w	r9, #0
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	463d      	mov	r5, r7
 8006556:	f04f 0b00 	mov.w	fp, #0
 800655a:	6831      	ldr	r1, [r6, #0]
 800655c:	ab03      	add	r3, sp, #12
 800655e:	7809      	ldrb	r1, [r1, #0]
 8006560:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006564:	2202      	movs	r2, #2
 8006566:	f7f9 fe13 	bl	8000190 <memchr>
 800656a:	b328      	cbz	r0, 80065b8 <_scanf_i+0xb8>
 800656c:	f1bb 0f01 	cmp.w	fp, #1
 8006570:	d159      	bne.n	8006626 <_scanf_i+0x126>
 8006572:	6862      	ldr	r2, [r4, #4]
 8006574:	b92a      	cbnz	r2, 8006582 <_scanf_i+0x82>
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	2308      	movs	r3, #8
 800657a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657e:	6063      	str	r3, [r4, #4]
 8006580:	6022      	str	r2, [r4, #0]
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006588:	6022      	str	r2, [r4, #0]
 800658a:	68a2      	ldr	r2, [r4, #8]
 800658c:	1e51      	subs	r1, r2, #1
 800658e:	60a1      	str	r1, [r4, #8]
 8006590:	b192      	cbz	r2, 80065b8 <_scanf_i+0xb8>
 8006592:	6832      	ldr	r2, [r6, #0]
 8006594:	1c51      	adds	r1, r2, #1
 8006596:	6031      	str	r1, [r6, #0]
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	f805 2b01 	strb.w	r2, [r5], #1
 800659e:	6872      	ldr	r2, [r6, #4]
 80065a0:	3a01      	subs	r2, #1
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	6072      	str	r2, [r6, #4]
 80065a6:	dc07      	bgt.n	80065b8 <_scanf_i+0xb8>
 80065a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80065ac:	4631      	mov	r1, r6
 80065ae:	4650      	mov	r0, sl
 80065b0:	4790      	blx	r2
 80065b2:	2800      	cmp	r0, #0
 80065b4:	f040 8085 	bne.w	80066c2 <_scanf_i+0x1c2>
 80065b8:	f10b 0b01 	add.w	fp, fp, #1
 80065bc:	f1bb 0f03 	cmp.w	fp, #3
 80065c0:	d1cb      	bne.n	800655a <_scanf_i+0x5a>
 80065c2:	6863      	ldr	r3, [r4, #4]
 80065c4:	b90b      	cbnz	r3, 80065ca <_scanf_i+0xca>
 80065c6:	230a      	movs	r3, #10
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	6863      	ldr	r3, [r4, #4]
 80065cc:	4947      	ldr	r1, [pc, #284]	; (80066ec <_scanf_i+0x1ec>)
 80065ce:	6960      	ldr	r0, [r4, #20]
 80065d0:	1ac9      	subs	r1, r1, r3
 80065d2:	f000 f88d 	bl	80066f0 <__sccl>
 80065d6:	f04f 0b00 	mov.w	fp, #0
 80065da:	68a3      	ldr	r3, [r4, #8]
 80065dc:	6822      	ldr	r2, [r4, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d03d      	beq.n	800665e <_scanf_i+0x15e>
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	6960      	ldr	r0, [r4, #20]
 80065e6:	f891 c000 	ldrb.w	ip, [r1]
 80065ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d035      	beq.n	800665e <_scanf_i+0x15e>
 80065f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80065f6:	d124      	bne.n	8006642 <_scanf_i+0x142>
 80065f8:	0510      	lsls	r0, r2, #20
 80065fa:	d522      	bpl.n	8006642 <_scanf_i+0x142>
 80065fc:	f10b 0b01 	add.w	fp, fp, #1
 8006600:	f1b9 0f00 	cmp.w	r9, #0
 8006604:	d003      	beq.n	800660e <_scanf_i+0x10e>
 8006606:	3301      	adds	r3, #1
 8006608:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	6873      	ldr	r3, [r6, #4]
 8006610:	3b01      	subs	r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	6073      	str	r3, [r6, #4]
 8006616:	dd1b      	ble.n	8006650 <_scanf_i+0x150>
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	68a3      	ldr	r3, [r4, #8]
 8006620:	3b01      	subs	r3, #1
 8006622:	60a3      	str	r3, [r4, #8]
 8006624:	e7d9      	b.n	80065da <_scanf_i+0xda>
 8006626:	f1bb 0f02 	cmp.w	fp, #2
 800662a:	d1ae      	bne.n	800658a <_scanf_i+0x8a>
 800662c:	6822      	ldr	r2, [r4, #0]
 800662e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006632:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006636:	d1bf      	bne.n	80065b8 <_scanf_i+0xb8>
 8006638:	2310      	movs	r3, #16
 800663a:	6063      	str	r3, [r4, #4]
 800663c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006640:	e7a2      	b.n	8006588 <_scanf_i+0x88>
 8006642:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	780b      	ldrb	r3, [r1, #0]
 800664a:	f805 3b01 	strb.w	r3, [r5], #1
 800664e:	e7de      	b.n	800660e <_scanf_i+0x10e>
 8006650:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006654:	4631      	mov	r1, r6
 8006656:	4650      	mov	r0, sl
 8006658:	4798      	blx	r3
 800665a:	2800      	cmp	r0, #0
 800665c:	d0df      	beq.n	800661e <_scanf_i+0x11e>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	05db      	lsls	r3, r3, #23
 8006662:	d50d      	bpl.n	8006680 <_scanf_i+0x180>
 8006664:	42bd      	cmp	r5, r7
 8006666:	d909      	bls.n	800667c <_scanf_i+0x17c>
 8006668:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800666c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006670:	4632      	mov	r2, r6
 8006672:	4650      	mov	r0, sl
 8006674:	4798      	blx	r3
 8006676:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800667a:	464d      	mov	r5, r9
 800667c:	42bd      	cmp	r5, r7
 800667e:	d02d      	beq.n	80066dc <_scanf_i+0x1dc>
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	f012 0210 	ands.w	r2, r2, #16
 8006686:	d113      	bne.n	80066b0 <_scanf_i+0x1b0>
 8006688:	702a      	strb	r2, [r5, #0]
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	9e01      	ldr	r6, [sp, #4]
 800668e:	4639      	mov	r1, r7
 8006690:	4650      	mov	r0, sl
 8006692:	47b0      	blx	r6
 8006694:	6821      	ldr	r1, [r4, #0]
 8006696:	f8d8 3000 	ldr.w	r3, [r8]
 800669a:	f011 0f20 	tst.w	r1, #32
 800669e:	d013      	beq.n	80066c8 <_scanf_i+0x1c8>
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	f8c8 2000 	str.w	r2, [r8]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60e3      	str	r3, [r4, #12]
 80066b0:	1bed      	subs	r5, r5, r7
 80066b2:	44ab      	add	fp, r5
 80066b4:	6925      	ldr	r5, [r4, #16]
 80066b6:	445d      	add	r5, fp
 80066b8:	6125      	str	r5, [r4, #16]
 80066ba:	2000      	movs	r0, #0
 80066bc:	b007      	add	sp, #28
 80066be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c2:	f04f 0b00 	mov.w	fp, #0
 80066c6:	e7ca      	b.n	800665e <_scanf_i+0x15e>
 80066c8:	1d1a      	adds	r2, r3, #4
 80066ca:	f8c8 2000 	str.w	r2, [r8]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f011 0f01 	tst.w	r1, #1
 80066d4:	bf14      	ite	ne
 80066d6:	8018      	strhne	r0, [r3, #0]
 80066d8:	6018      	streq	r0, [r3, #0]
 80066da:	e7e6      	b.n	80066aa <_scanf_i+0x1aa>
 80066dc:	2001      	movs	r0, #1
 80066de:	e7ed      	b.n	80066bc <_scanf_i+0x1bc>
 80066e0:	08006df0 	.word	0x08006df0
 80066e4:	08006941 	.word	0x08006941
 80066e8:	08006859 	.word	0x08006859
 80066ec:	08006f10 	.word	0x08006f10

080066f0 <__sccl>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	780b      	ldrb	r3, [r1, #0]
 80066f4:	4604      	mov	r4, r0
 80066f6:	2b5e      	cmp	r3, #94	; 0x5e
 80066f8:	bf0b      	itete	eq
 80066fa:	784b      	ldrbeq	r3, [r1, #1]
 80066fc:	1c48      	addne	r0, r1, #1
 80066fe:	1c88      	addeq	r0, r1, #2
 8006700:	2200      	movne	r2, #0
 8006702:	bf08      	it	eq
 8006704:	2201      	moveq	r2, #1
 8006706:	1e61      	subs	r1, r4, #1
 8006708:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800670c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006710:	42a9      	cmp	r1, r5
 8006712:	d1fb      	bne.n	800670c <__sccl+0x1c>
 8006714:	b90b      	cbnz	r3, 800671a <__sccl+0x2a>
 8006716:	3801      	subs	r0, #1
 8006718:	bd70      	pop	{r4, r5, r6, pc}
 800671a:	f082 0201 	eor.w	r2, r2, #1
 800671e:	54e2      	strb	r2, [r4, r3]
 8006720:	4605      	mov	r5, r0
 8006722:	4628      	mov	r0, r5
 8006724:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006728:	292d      	cmp	r1, #45	; 0x2d
 800672a:	d006      	beq.n	800673a <__sccl+0x4a>
 800672c:	295d      	cmp	r1, #93	; 0x5d
 800672e:	d0f3      	beq.n	8006718 <__sccl+0x28>
 8006730:	b909      	cbnz	r1, 8006736 <__sccl+0x46>
 8006732:	4628      	mov	r0, r5
 8006734:	e7f0      	b.n	8006718 <__sccl+0x28>
 8006736:	460b      	mov	r3, r1
 8006738:	e7f1      	b.n	800671e <__sccl+0x2e>
 800673a:	786e      	ldrb	r6, [r5, #1]
 800673c:	2e5d      	cmp	r6, #93	; 0x5d
 800673e:	d0fa      	beq.n	8006736 <__sccl+0x46>
 8006740:	42b3      	cmp	r3, r6
 8006742:	dcf8      	bgt.n	8006736 <__sccl+0x46>
 8006744:	3502      	adds	r5, #2
 8006746:	4619      	mov	r1, r3
 8006748:	3101      	adds	r1, #1
 800674a:	428e      	cmp	r6, r1
 800674c:	5462      	strb	r2, [r4, r1]
 800674e:	dcfb      	bgt.n	8006748 <__sccl+0x58>
 8006750:	1af1      	subs	r1, r6, r3
 8006752:	3901      	subs	r1, #1
 8006754:	1c58      	adds	r0, r3, #1
 8006756:	42b3      	cmp	r3, r6
 8006758:	bfa8      	it	ge
 800675a:	2100      	movge	r1, #0
 800675c:	1843      	adds	r3, r0, r1
 800675e:	e7e0      	b.n	8006722 <__sccl+0x32>

08006760 <_strtol_l.constprop.0>:
 8006760:	2b01      	cmp	r3, #1
 8006762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006766:	4680      	mov	r8, r0
 8006768:	d001      	beq.n	800676e <_strtol_l.constprop.0+0xe>
 800676a:	2b24      	cmp	r3, #36	; 0x24
 800676c:	d906      	bls.n	800677c <_strtol_l.constprop.0+0x1c>
 800676e:	f7ff f8f7 	bl	8005960 <__errno>
 8006772:	2316      	movs	r3, #22
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	2000      	movs	r0, #0
 8006778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677c:	4f35      	ldr	r7, [pc, #212]	; (8006854 <_strtol_l.constprop.0+0xf4>)
 800677e:	460d      	mov	r5, r1
 8006780:	4628      	mov	r0, r5
 8006782:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006786:	5de6      	ldrb	r6, [r4, r7]
 8006788:	f016 0608 	ands.w	r6, r6, #8
 800678c:	d1f8      	bne.n	8006780 <_strtol_l.constprop.0+0x20>
 800678e:	2c2d      	cmp	r4, #45	; 0x2d
 8006790:	d12f      	bne.n	80067f2 <_strtol_l.constprop.0+0x92>
 8006792:	782c      	ldrb	r4, [r5, #0]
 8006794:	2601      	movs	r6, #1
 8006796:	1c85      	adds	r5, r0, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d057      	beq.n	800684c <_strtol_l.constprop.0+0xec>
 800679c:	2b10      	cmp	r3, #16
 800679e:	d109      	bne.n	80067b4 <_strtol_l.constprop.0+0x54>
 80067a0:	2c30      	cmp	r4, #48	; 0x30
 80067a2:	d107      	bne.n	80067b4 <_strtol_l.constprop.0+0x54>
 80067a4:	7828      	ldrb	r0, [r5, #0]
 80067a6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80067aa:	2858      	cmp	r0, #88	; 0x58
 80067ac:	d149      	bne.n	8006842 <_strtol_l.constprop.0+0xe2>
 80067ae:	786c      	ldrb	r4, [r5, #1]
 80067b0:	2310      	movs	r3, #16
 80067b2:	3502      	adds	r5, #2
 80067b4:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80067b8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80067bc:	2700      	movs	r7, #0
 80067be:	fbbe f9f3 	udiv	r9, lr, r3
 80067c2:	4638      	mov	r0, r7
 80067c4:	fb03 ea19 	mls	sl, r3, r9, lr
 80067c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80067cc:	f1bc 0f09 	cmp.w	ip, #9
 80067d0:	d814      	bhi.n	80067fc <_strtol_l.constprop.0+0x9c>
 80067d2:	4664      	mov	r4, ip
 80067d4:	42a3      	cmp	r3, r4
 80067d6:	dd22      	ble.n	800681e <_strtol_l.constprop.0+0xbe>
 80067d8:	2f00      	cmp	r7, #0
 80067da:	db1d      	blt.n	8006818 <_strtol_l.constprop.0+0xb8>
 80067dc:	4581      	cmp	r9, r0
 80067de:	d31b      	bcc.n	8006818 <_strtol_l.constprop.0+0xb8>
 80067e0:	d101      	bne.n	80067e6 <_strtol_l.constprop.0+0x86>
 80067e2:	45a2      	cmp	sl, r4
 80067e4:	db18      	blt.n	8006818 <_strtol_l.constprop.0+0xb8>
 80067e6:	fb00 4003 	mla	r0, r0, r3, r4
 80067ea:	2701      	movs	r7, #1
 80067ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067f0:	e7ea      	b.n	80067c8 <_strtol_l.constprop.0+0x68>
 80067f2:	2c2b      	cmp	r4, #43	; 0x2b
 80067f4:	bf04      	itt	eq
 80067f6:	782c      	ldrbeq	r4, [r5, #0]
 80067f8:	1c85      	addeq	r5, r0, #2
 80067fa:	e7cd      	b.n	8006798 <_strtol_l.constprop.0+0x38>
 80067fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006800:	f1bc 0f19 	cmp.w	ip, #25
 8006804:	d801      	bhi.n	800680a <_strtol_l.constprop.0+0xaa>
 8006806:	3c37      	subs	r4, #55	; 0x37
 8006808:	e7e4      	b.n	80067d4 <_strtol_l.constprop.0+0x74>
 800680a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800680e:	f1bc 0f19 	cmp.w	ip, #25
 8006812:	d804      	bhi.n	800681e <_strtol_l.constprop.0+0xbe>
 8006814:	3c57      	subs	r4, #87	; 0x57
 8006816:	e7dd      	b.n	80067d4 <_strtol_l.constprop.0+0x74>
 8006818:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800681c:	e7e6      	b.n	80067ec <_strtol_l.constprop.0+0x8c>
 800681e:	2f00      	cmp	r7, #0
 8006820:	da07      	bge.n	8006832 <_strtol_l.constprop.0+0xd2>
 8006822:	2322      	movs	r3, #34	; 0x22
 8006824:	f8c8 3000 	str.w	r3, [r8]
 8006828:	4670      	mov	r0, lr
 800682a:	2a00      	cmp	r2, #0
 800682c:	d0a4      	beq.n	8006778 <_strtol_l.constprop.0+0x18>
 800682e:	1e69      	subs	r1, r5, #1
 8006830:	e005      	b.n	800683e <_strtol_l.constprop.0+0xde>
 8006832:	b106      	cbz	r6, 8006836 <_strtol_l.constprop.0+0xd6>
 8006834:	4240      	negs	r0, r0
 8006836:	2a00      	cmp	r2, #0
 8006838:	d09e      	beq.n	8006778 <_strtol_l.constprop.0+0x18>
 800683a:	2f00      	cmp	r7, #0
 800683c:	d1f7      	bne.n	800682e <_strtol_l.constprop.0+0xce>
 800683e:	6011      	str	r1, [r2, #0]
 8006840:	e79a      	b.n	8006778 <_strtol_l.constprop.0+0x18>
 8006842:	2430      	movs	r4, #48	; 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1b5      	bne.n	80067b4 <_strtol_l.constprop.0+0x54>
 8006848:	2308      	movs	r3, #8
 800684a:	e7b3      	b.n	80067b4 <_strtol_l.constprop.0+0x54>
 800684c:	2c30      	cmp	r4, #48	; 0x30
 800684e:	d0a9      	beq.n	80067a4 <_strtol_l.constprop.0+0x44>
 8006850:	230a      	movs	r3, #10
 8006852:	e7af      	b.n	80067b4 <_strtol_l.constprop.0+0x54>
 8006854:	08006f13 	.word	0x08006f13

08006858 <_strtol_r>:
 8006858:	f7ff bf82 	b.w	8006760 <_strtol_l.constprop.0>

0800685c <_strtoul_l.constprop.0>:
 800685c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006860:	4f36      	ldr	r7, [pc, #216]	; (800693c <_strtoul_l.constprop.0+0xe0>)
 8006862:	4686      	mov	lr, r0
 8006864:	460d      	mov	r5, r1
 8006866:	4628      	mov	r0, r5
 8006868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800686c:	5de6      	ldrb	r6, [r4, r7]
 800686e:	f016 0608 	ands.w	r6, r6, #8
 8006872:	d1f8      	bne.n	8006866 <_strtoul_l.constprop.0+0xa>
 8006874:	2c2d      	cmp	r4, #45	; 0x2d
 8006876:	d12f      	bne.n	80068d8 <_strtoul_l.constprop.0+0x7c>
 8006878:	782c      	ldrb	r4, [r5, #0]
 800687a:	2601      	movs	r6, #1
 800687c:	1c85      	adds	r5, r0, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d057      	beq.n	8006932 <_strtoul_l.constprop.0+0xd6>
 8006882:	2b10      	cmp	r3, #16
 8006884:	d109      	bne.n	800689a <_strtoul_l.constprop.0+0x3e>
 8006886:	2c30      	cmp	r4, #48	; 0x30
 8006888:	d107      	bne.n	800689a <_strtoul_l.constprop.0+0x3e>
 800688a:	7828      	ldrb	r0, [r5, #0]
 800688c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006890:	2858      	cmp	r0, #88	; 0x58
 8006892:	d149      	bne.n	8006928 <_strtoul_l.constprop.0+0xcc>
 8006894:	786c      	ldrb	r4, [r5, #1]
 8006896:	2310      	movs	r3, #16
 8006898:	3502      	adds	r5, #2
 800689a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800689e:	2700      	movs	r7, #0
 80068a0:	fbb8 f8f3 	udiv	r8, r8, r3
 80068a4:	fb03 f908 	mul.w	r9, r3, r8
 80068a8:	ea6f 0909 	mvn.w	r9, r9
 80068ac:	4638      	mov	r0, r7
 80068ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80068b2:	f1bc 0f09 	cmp.w	ip, #9
 80068b6:	d814      	bhi.n	80068e2 <_strtoul_l.constprop.0+0x86>
 80068b8:	4664      	mov	r4, ip
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	dd22      	ble.n	8006904 <_strtoul_l.constprop.0+0xa8>
 80068be:	2f00      	cmp	r7, #0
 80068c0:	db1d      	blt.n	80068fe <_strtoul_l.constprop.0+0xa2>
 80068c2:	4580      	cmp	r8, r0
 80068c4:	d31b      	bcc.n	80068fe <_strtoul_l.constprop.0+0xa2>
 80068c6:	d101      	bne.n	80068cc <_strtoul_l.constprop.0+0x70>
 80068c8:	45a1      	cmp	r9, r4
 80068ca:	db18      	blt.n	80068fe <_strtoul_l.constprop.0+0xa2>
 80068cc:	fb00 4003 	mla	r0, r0, r3, r4
 80068d0:	2701      	movs	r7, #1
 80068d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068d6:	e7ea      	b.n	80068ae <_strtoul_l.constprop.0+0x52>
 80068d8:	2c2b      	cmp	r4, #43	; 0x2b
 80068da:	bf04      	itt	eq
 80068dc:	782c      	ldrbeq	r4, [r5, #0]
 80068de:	1c85      	addeq	r5, r0, #2
 80068e0:	e7cd      	b.n	800687e <_strtoul_l.constprop.0+0x22>
 80068e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80068e6:	f1bc 0f19 	cmp.w	ip, #25
 80068ea:	d801      	bhi.n	80068f0 <_strtoul_l.constprop.0+0x94>
 80068ec:	3c37      	subs	r4, #55	; 0x37
 80068ee:	e7e4      	b.n	80068ba <_strtoul_l.constprop.0+0x5e>
 80068f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80068f4:	f1bc 0f19 	cmp.w	ip, #25
 80068f8:	d804      	bhi.n	8006904 <_strtoul_l.constprop.0+0xa8>
 80068fa:	3c57      	subs	r4, #87	; 0x57
 80068fc:	e7dd      	b.n	80068ba <_strtoul_l.constprop.0+0x5e>
 80068fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006902:	e7e6      	b.n	80068d2 <_strtoul_l.constprop.0+0x76>
 8006904:	2f00      	cmp	r7, #0
 8006906:	da07      	bge.n	8006918 <_strtoul_l.constprop.0+0xbc>
 8006908:	2322      	movs	r3, #34	; 0x22
 800690a:	f8ce 3000 	str.w	r3, [lr]
 800690e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006912:	b932      	cbnz	r2, 8006922 <_strtoul_l.constprop.0+0xc6>
 8006914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006918:	b106      	cbz	r6, 800691c <_strtoul_l.constprop.0+0xc0>
 800691a:	4240      	negs	r0, r0
 800691c:	2a00      	cmp	r2, #0
 800691e:	d0f9      	beq.n	8006914 <_strtoul_l.constprop.0+0xb8>
 8006920:	b107      	cbz	r7, 8006924 <_strtoul_l.constprop.0+0xc8>
 8006922:	1e69      	subs	r1, r5, #1
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	e7f5      	b.n	8006914 <_strtoul_l.constprop.0+0xb8>
 8006928:	2430      	movs	r4, #48	; 0x30
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1b5      	bne.n	800689a <_strtoul_l.constprop.0+0x3e>
 800692e:	2308      	movs	r3, #8
 8006930:	e7b3      	b.n	800689a <_strtoul_l.constprop.0+0x3e>
 8006932:	2c30      	cmp	r4, #48	; 0x30
 8006934:	d0a9      	beq.n	800688a <_strtoul_l.constprop.0+0x2e>
 8006936:	230a      	movs	r3, #10
 8006938:	e7af      	b.n	800689a <_strtoul_l.constprop.0+0x3e>
 800693a:	bf00      	nop
 800693c:	08006f13 	.word	0x08006f13

08006940 <_strtoul_r>:
 8006940:	f7ff bf8c 	b.w	800685c <_strtoul_l.constprop.0>

08006944 <__submore>:
 8006944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006948:	460c      	mov	r4, r1
 800694a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800694c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006950:	4299      	cmp	r1, r3
 8006952:	d11d      	bne.n	8006990 <__submore+0x4c>
 8006954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006958:	f000 f8b4 	bl	8006ac4 <_malloc_r>
 800695c:	b918      	cbnz	r0, 8006966 <__submore+0x22>
 800695e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800696a:	63a3      	str	r3, [r4, #56]	; 0x38
 800696c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006970:	6360      	str	r0, [r4, #52]	; 0x34
 8006972:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006976:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800697a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800697e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006982:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006986:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800698a:	6020      	str	r0, [r4, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	e7e8      	b.n	8006962 <__submore+0x1e>
 8006990:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006992:	0077      	lsls	r7, r6, #1
 8006994:	463a      	mov	r2, r7
 8006996:	f000 f909 	bl	8006bac <_realloc_r>
 800699a:	4605      	mov	r5, r0
 800699c:	2800      	cmp	r0, #0
 800699e:	d0de      	beq.n	800695e <__submore+0x1a>
 80069a0:	eb00 0806 	add.w	r8, r0, r6
 80069a4:	4601      	mov	r1, r0
 80069a6:	4632      	mov	r2, r6
 80069a8:	4640      	mov	r0, r8
 80069aa:	f7ff f803 	bl	80059b4 <memcpy>
 80069ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80069b2:	f8c4 8000 	str.w	r8, [r4]
 80069b6:	e7e9      	b.n	800698c <__submore+0x48>

080069b8 <__retarget_lock_acquire_recursive>:
 80069b8:	4770      	bx	lr

080069ba <__retarget_lock_release_recursive>:
 80069ba:	4770      	bx	lr

080069bc <memmove>:
 80069bc:	4288      	cmp	r0, r1
 80069be:	b510      	push	{r4, lr}
 80069c0:	eb01 0402 	add.w	r4, r1, r2
 80069c4:	d902      	bls.n	80069cc <memmove+0x10>
 80069c6:	4284      	cmp	r4, r0
 80069c8:	4623      	mov	r3, r4
 80069ca:	d807      	bhi.n	80069dc <memmove+0x20>
 80069cc:	1e43      	subs	r3, r0, #1
 80069ce:	42a1      	cmp	r1, r4
 80069d0:	d008      	beq.n	80069e4 <memmove+0x28>
 80069d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069da:	e7f8      	b.n	80069ce <memmove+0x12>
 80069dc:	4402      	add	r2, r0
 80069de:	4601      	mov	r1, r0
 80069e0:	428a      	cmp	r2, r1
 80069e2:	d100      	bne.n	80069e6 <memmove+0x2a>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069ee:	e7f7      	b.n	80069e0 <memmove+0x24>

080069f0 <_free_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4605      	mov	r5, r0
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d041      	beq.n	8006a7c <_free_r+0x8c>
 80069f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fc:	1f0c      	subs	r4, r1, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfb8      	it	lt
 8006a02:	18e4      	addlt	r4, r4, r3
 8006a04:	f000 f912 	bl	8006c2c <__malloc_lock>
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <_free_r+0x90>)
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	b933      	cbnz	r3, 8006a1c <_free_r+0x2c>
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6014      	str	r4, [r2, #0]
 8006a12:	4628      	mov	r0, r5
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a18:	f000 b90e 	b.w	8006c38 <__malloc_unlock>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d908      	bls.n	8006a32 <_free_r+0x42>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	1821      	adds	r1, r4, r0
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1809      	addeq	r1, r1, r0
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	e7ed      	b.n	8006a0e <_free_r+0x1e>
 8006a32:	461a      	mov	r2, r3
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b10b      	cbz	r3, 8006a3c <_free_r+0x4c>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d9fa      	bls.n	8006a32 <_free_r+0x42>
 8006a3c:	6811      	ldr	r1, [r2, #0]
 8006a3e:	1850      	adds	r0, r2, r1
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d10b      	bne.n	8006a5c <_free_r+0x6c>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	4401      	add	r1, r0
 8006a48:	1850      	adds	r0, r2, r1
 8006a4a:	4283      	cmp	r3, r0
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	d1e0      	bne.n	8006a12 <_free_r+0x22>
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	4401      	add	r1, r0
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0x22>
 8006a5c:	d902      	bls.n	8006a64 <_free_r+0x74>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	e7d6      	b.n	8006a12 <_free_r+0x22>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	1821      	adds	r1, r4, r0
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf04      	itt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	bf04      	itt	eq
 8006a74:	1809      	addeq	r1, r1, r0
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	6054      	str	r4, [r2, #4]
 8006a7a:	e7ca      	b.n	8006a12 <_free_r+0x22>
 8006a7c:	bd38      	pop	{r3, r4, r5, pc}
 8006a7e:	bf00      	nop
 8006a80:	200005d4 	.word	0x200005d4

08006a84 <sbrk_aligned>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4e0e      	ldr	r6, [pc, #56]	; (8006ac0 <sbrk_aligned+0x3c>)
 8006a88:	460c      	mov	r4, r1
 8006a8a:	6831      	ldr	r1, [r6, #0]
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	b911      	cbnz	r1, 8006a96 <sbrk_aligned+0x12>
 8006a90:	f000 f8bc 	bl	8006c0c <_sbrk_r>
 8006a94:	6030      	str	r0, [r6, #0]
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 f8b7 	bl	8006c0c <_sbrk_r>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d00a      	beq.n	8006ab8 <sbrk_aligned+0x34>
 8006aa2:	1cc4      	adds	r4, r0, #3
 8006aa4:	f024 0403 	bic.w	r4, r4, #3
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d007      	beq.n	8006abc <sbrk_aligned+0x38>
 8006aac:	1a21      	subs	r1, r4, r0
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f8ac 	bl	8006c0c <_sbrk_r>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d101      	bne.n	8006abc <sbrk_aligned+0x38>
 8006ab8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006abc:	4620      	mov	r0, r4
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
 8006ac0:	200005d8 	.word	0x200005d8

08006ac4 <_malloc_r>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	1ccd      	adds	r5, r1, #3
 8006aca:	f025 0503 	bic.w	r5, r5, #3
 8006ace:	3508      	adds	r5, #8
 8006ad0:	2d0c      	cmp	r5, #12
 8006ad2:	bf38      	it	cc
 8006ad4:	250c      	movcc	r5, #12
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	4607      	mov	r7, r0
 8006ada:	db01      	blt.n	8006ae0 <_malloc_r+0x1c>
 8006adc:	42a9      	cmp	r1, r5
 8006ade:	d905      	bls.n	8006aec <_malloc_r+0x28>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aec:	4e2e      	ldr	r6, [pc, #184]	; (8006ba8 <_malloc_r+0xe4>)
 8006aee:	f000 f89d 	bl	8006c2c <__malloc_lock>
 8006af2:	6833      	ldr	r3, [r6, #0]
 8006af4:	461c      	mov	r4, r3
 8006af6:	bb34      	cbnz	r4, 8006b46 <_malloc_r+0x82>
 8006af8:	4629      	mov	r1, r5
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff ffc2 	bl	8006a84 <sbrk_aligned>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	4604      	mov	r4, r0
 8006b04:	d14d      	bne.n	8006ba2 <_malloc_r+0xde>
 8006b06:	6834      	ldr	r4, [r6, #0]
 8006b08:	4626      	mov	r6, r4
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d140      	bne.n	8006b90 <_malloc_r+0xcc>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	4631      	mov	r1, r6
 8006b12:	4638      	mov	r0, r7
 8006b14:	eb04 0803 	add.w	r8, r4, r3
 8006b18:	f000 f878 	bl	8006c0c <_sbrk_r>
 8006b1c:	4580      	cmp	r8, r0
 8006b1e:	d13a      	bne.n	8006b96 <_malloc_r+0xd2>
 8006b20:	6821      	ldr	r1, [r4, #0]
 8006b22:	3503      	adds	r5, #3
 8006b24:	1a6d      	subs	r5, r5, r1
 8006b26:	f025 0503 	bic.w	r5, r5, #3
 8006b2a:	3508      	adds	r5, #8
 8006b2c:	2d0c      	cmp	r5, #12
 8006b2e:	bf38      	it	cc
 8006b30:	250c      	movcc	r5, #12
 8006b32:	4629      	mov	r1, r5
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ffa5 	bl	8006a84 <sbrk_aligned>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d02b      	beq.n	8006b96 <_malloc_r+0xd2>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	442b      	add	r3, r5
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	e00e      	b.n	8006b64 <_malloc_r+0xa0>
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	1b52      	subs	r2, r2, r5
 8006b4a:	d41e      	bmi.n	8006b8a <_malloc_r+0xc6>
 8006b4c:	2a0b      	cmp	r2, #11
 8006b4e:	d916      	bls.n	8006b7e <_malloc_r+0xba>
 8006b50:	1961      	adds	r1, r4, r5
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	6025      	str	r5, [r4, #0]
 8006b56:	bf18      	it	ne
 8006b58:	6059      	strne	r1, [r3, #4]
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	bf08      	it	eq
 8006b5e:	6031      	streq	r1, [r6, #0]
 8006b60:	5162      	str	r2, [r4, r5]
 8006b62:	604b      	str	r3, [r1, #4]
 8006b64:	4638      	mov	r0, r7
 8006b66:	f104 060b 	add.w	r6, r4, #11
 8006b6a:	f000 f865 	bl	8006c38 <__malloc_unlock>
 8006b6e:	f026 0607 	bic.w	r6, r6, #7
 8006b72:	1d23      	adds	r3, r4, #4
 8006b74:	1af2      	subs	r2, r6, r3
 8006b76:	d0b6      	beq.n	8006ae6 <_malloc_r+0x22>
 8006b78:	1b9b      	subs	r3, r3, r6
 8006b7a:	50a3      	str	r3, [r4, r2]
 8006b7c:	e7b3      	b.n	8006ae6 <_malloc_r+0x22>
 8006b7e:	6862      	ldr	r2, [r4, #4]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	bf0c      	ite	eq
 8006b84:	6032      	streq	r2, [r6, #0]
 8006b86:	605a      	strne	r2, [r3, #4]
 8006b88:	e7ec      	b.n	8006b64 <_malloc_r+0xa0>
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	6864      	ldr	r4, [r4, #4]
 8006b8e:	e7b2      	b.n	8006af6 <_malloc_r+0x32>
 8006b90:	4634      	mov	r4, r6
 8006b92:	6876      	ldr	r6, [r6, #4]
 8006b94:	e7b9      	b.n	8006b0a <_malloc_r+0x46>
 8006b96:	230c      	movs	r3, #12
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f000 f84c 	bl	8006c38 <__malloc_unlock>
 8006ba0:	e7a1      	b.n	8006ae6 <_malloc_r+0x22>
 8006ba2:	6025      	str	r5, [r4, #0]
 8006ba4:	e7de      	b.n	8006b64 <_malloc_r+0xa0>
 8006ba6:	bf00      	nop
 8006ba8:	200005d4 	.word	0x200005d4

08006bac <_realloc_r>:
 8006bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb0:	4680      	mov	r8, r0
 8006bb2:	4614      	mov	r4, r2
 8006bb4:	460e      	mov	r6, r1
 8006bb6:	b921      	cbnz	r1, 8006bc2 <_realloc_r+0x16>
 8006bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	f7ff bf81 	b.w	8006ac4 <_malloc_r>
 8006bc2:	b92a      	cbnz	r2, 8006bd0 <_realloc_r+0x24>
 8006bc4:	f7ff ff14 	bl	80069f0 <_free_r>
 8006bc8:	4625      	mov	r5, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd0:	f000 f838 	bl	8006c44 <_malloc_usable_size_r>
 8006bd4:	4284      	cmp	r4, r0
 8006bd6:	4607      	mov	r7, r0
 8006bd8:	d802      	bhi.n	8006be0 <_realloc_r+0x34>
 8006bda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bde:	d812      	bhi.n	8006c06 <_realloc_r+0x5a>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4640      	mov	r0, r8
 8006be4:	f7ff ff6e 	bl	8006ac4 <_malloc_r>
 8006be8:	4605      	mov	r5, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d0ed      	beq.n	8006bca <_realloc_r+0x1e>
 8006bee:	42bc      	cmp	r4, r7
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	bf28      	it	cs
 8006bf6:	463a      	movcs	r2, r7
 8006bf8:	f7fe fedc 	bl	80059b4 <memcpy>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4640      	mov	r0, r8
 8006c00:	f7ff fef6 	bl	80069f0 <_free_r>
 8006c04:	e7e1      	b.n	8006bca <_realloc_r+0x1e>
 8006c06:	4635      	mov	r5, r6
 8006c08:	e7df      	b.n	8006bca <_realloc_r+0x1e>
	...

08006c0c <_sbrk_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d06      	ldr	r5, [pc, #24]	; (8006c28 <_sbrk_r+0x1c>)
 8006c10:	2300      	movs	r3, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fa f812 	bl	8000c40 <_sbrk>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_sbrk_r+0x1a>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_sbrk_r+0x1a>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	200005cc 	.word	0x200005cc

08006c2c <__malloc_lock>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__malloc_lock+0x8>)
 8006c2e:	f7ff bec3 	b.w	80069b8 <__retarget_lock_acquire_recursive>
 8006c32:	bf00      	nop
 8006c34:	200005d0 	.word	0x200005d0

08006c38 <__malloc_unlock>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__malloc_unlock+0x8>)
 8006c3a:	f7ff bebe 	b.w	80069ba <__retarget_lock_release_recursive>
 8006c3e:	bf00      	nop
 8006c40:	200005d0 	.word	0x200005d0

08006c44 <_malloc_usable_size_r>:
 8006c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c48:	1f18      	subs	r0, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bfbc      	itt	lt
 8006c4e:	580b      	ldrlt	r3, [r1, r0]
 8006c50:	18c0      	addlt	r0, r0, r3
 8006c52:	4770      	bx	lr

08006c54 <_init>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr

08006c60 <_fini>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	bf00      	nop
 8006c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c66:	bc08      	pop	{r3}
 8006c68:	469e      	mov	lr, r3
 8006c6a:	4770      	bx	lr

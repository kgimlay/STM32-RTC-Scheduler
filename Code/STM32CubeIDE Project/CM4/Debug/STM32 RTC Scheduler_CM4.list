
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d5c  08006d5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d64  08006d64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000074  08006de0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08006de0  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dc3  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003362  00000000  00000000  00035e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  000391c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f224  00000000  00000000  0003b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001589c  00000000  00000000  0005ab84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9c8c  00000000  00000000  00070420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a0ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000600c  00000000  00000000  0012a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080069b0 	.word	0x080069b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080069b0 	.word	0x080069b0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 f950 	bl	80017e4 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000188 	.word	0x20000188

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f001 f946 	bl	8001800 <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f001 f9f7 	bl	8001994 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f956 	bl	8000870 <getNextAlarm>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d024      	beq.n	8000614 <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005ca:	7ab8      	ldrb	r0, [r7, #10]
 80005cc:	7af9      	ldrb	r1, [r7, #11]
 80005ce:	7b3a      	ldrb	r2, [r7, #12]
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	f001 fa73 	bl	8001abc <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d017      	beq.n	800060c <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4910      	ldr	r1, [pc, #64]	; (8000620 <calendar_start+0x70>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	440b      	add	r3, r1
 80005ea:	3308      	adds	r3, #8
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d009      	beq.n	8000606 <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].start_callback)();
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	490a      	ldr	r1, [pc, #40]	; (8000620 <calendar_start+0x70>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	440b      	add	r3, r1
 8000600:	3308      	adds	r3, #8
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <calendar_start+0x74>)
 800060a:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <calendar_start+0x78>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 8000612:	e001      	b.n	8000618 <calendar_start+0x68>
		diableAlarm_A();
 8000614:	f001 faee 	bl	8001bf4 <diableAlarm_A>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000090 	.word	0x20000090
 8000624:	20000004 	.word	0x20000004
 8000628:	20000184 	.word	0x20000184

0800062c <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 8000632:	4b5d      	ldr	r3, [pc, #372]	; (80007a8 <calendar_handleAlarm+0x17c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 80b1 	beq.w	80007a0 <calendar_handleAlarm+0x174>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 800063e:	1cfa      	adds	r2, r7, #3
 8000640:	1d39      	adds	r1, r7, #4
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f912 	bl	8000870 <getNextAlarm>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	f000 8085 	beq.w	800075e <calendar_handleAlarm+0x132>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000654:	7ab8      	ldrb	r0, [r7, #10]
 8000656:	7af9      	ldrb	r1, [r7, #11]
 8000658:	7b3a      	ldrb	r2, [r7, #12]
 800065a:	7b7b      	ldrb	r3, [r7, #13]
 800065c:	f001 fa2e 	bl	8001abc <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d01d      	beq.n	80006a2 <calendar_handleAlarm+0x76>
 8000666:	4b51      	ldr	r3, [pc, #324]	; (80007ac <calendar_handleAlarm+0x180>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800066e:	d118      	bne.n	80006a2 <calendar_handleAlarm+0x76>

				// call start event callback
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	494f      	ldr	r1, [pc, #316]	; (80007b0 <calendar_handleAlarm+0x184>)
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	440b      	add	r3, r1
 800067e:	3308      	adds	r3, #8
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d009      	beq.n	800069a <calendar_handleAlarm+0x6e>
					(*_calendarEvents[currentEventIdx].start_callback)();
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4949      	ldr	r1, [pc, #292]	; (80007b0 <calendar_handleAlarm+0x184>)
 800068a:	4613      	mov	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	440b      	add	r3, r1
 8000694:	3308      	adds	r3, #8
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a43      	ldr	r2, [pc, #268]	; (80007ac <calendar_handleAlarm+0x180>)
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	e07b      	b.n	800079a <calendar_handleAlarm+0x16e>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d034      	beq.n	8000712 <calendar_handleAlarm+0xe6>
 80006a8:	4b40      	ldr	r3, [pc, #256]	; (80007ac <calendar_handleAlarm+0x180>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b0:	d02f      	beq.n	8000712 <calendar_handleAlarm+0xe6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 80006b2:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <calendar_handleAlarm+0x180>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	493e      	ldr	r1, [pc, #248]	; (80007b0 <calendar_handleAlarm+0x184>)
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	440b      	add	r3, r1
 80006c2:	3314      	adds	r3, #20
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00a      	beq.n	80006e0 <calendar_handleAlarm+0xb4>
					(*_calendarEvents[_currentEvent].end_callback)();
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <calendar_handleAlarm+0x180>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4938      	ldr	r1, [pc, #224]	; (80007b0 <calendar_handleAlarm+0x184>)
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	440b      	add	r3, r1
 80006da:	3314      	adds	r3, #20
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4933      	ldr	r1, [pc, #204]	; (80007b0 <calendar_handleAlarm+0x184>)
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	440b      	add	r3, r1
 80006ee:	3308      	adds	r3, #8
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d009      	beq.n	800070a <calendar_handleAlarm+0xde>
					(*_calendarEvents[currentEventIdx].start_callback)();
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	492d      	ldr	r1, [pc, #180]	; (80007b0 <calendar_handleAlarm+0x184>)
 80006fa:	4613      	mov	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	440b      	add	r3, r1
 8000704:	3308      	adds	r3, #8
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <calendar_handleAlarm+0x180>)
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	e043      	b.n	800079a <calendar_handleAlarm+0x16e>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	f083 0301 	eor.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d03d      	beq.n	800079a <calendar_handleAlarm+0x16e>
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <calendar_handleAlarm+0x180>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000726:	d038      	beq.n	800079a <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <calendar_handleAlarm+0x180>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4920      	ldr	r1, [pc, #128]	; (80007b0 <calendar_handleAlarm+0x184>)
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3314      	adds	r3, #20
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00a      	beq.n	8000756 <calendar_handleAlarm+0x12a>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <calendar_handleAlarm+0x180>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	491a      	ldr	r1, [pc, #104]	; (80007b0 <calendar_handleAlarm+0x184>)
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	440b      	add	r3, r1
 8000750:	3314      	adds	r3, #20
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <calendar_handleAlarm+0x180>)
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	e01d      	b.n	800079a <calendar_handleAlarm+0x16e>

		}

		// if there is no alarm to set, disable the alarm and exit any events
		else {
			diableAlarm_A();
 800075e:	f001 fa49 	bl	8001bf4 <diableAlarm_A>

			if (CURRENTLY_IN_EVENT) {
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <calendar_handleAlarm+0x180>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800076a:	d016      	beq.n	800079a <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <calendar_handleAlarm+0x180>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	490f      	ldr	r1, [pc, #60]	; (80007b0 <calendar_handleAlarm+0x184>)
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	440b      	add	r3, r1
 800077c:	3314      	adds	r3, #20
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00a      	beq.n	800079a <calendar_handleAlarm+0x16e>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <calendar_handleAlarm+0x180>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4909      	ldr	r1, [pc, #36]	; (80007b0 <calendar_handleAlarm+0x184>)
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	440b      	add	r3, r1
 8000794:	3314      	adds	r3, #20
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <calendar_handleAlarm+0x17c>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	}

	else {

	}
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000184 	.word	0x20000184
 80007ac:	20000004 	.word	0x20000004
 80007b0:	20000090 	.word	0x20000090

080007b4 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <calendar_AlarmA_ISR+0x14>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000184 	.word	0x20000184

080007cc <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b087      	sub	sp, #28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	f107 0408 	add.w	r4, r7, #8
 80007d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80007da:	4639      	mov	r1, r7
 80007dc:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007e8:	f000 f80e 	bl	8000808 <dateTimeToSeconds>
 80007ec:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 80007ee:	463b      	mov	r3, r7
 80007f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007f4:	f000 f808 	bl	8000808 <dateTimeToSeconds>
 80007f8:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	1ad3      	subs	r3, r2, r3
}
 8000800:	4618      	mov	r0, r3
 8000802:	371c      	adds	r7, #28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd90      	pop	{r4, r7, pc}

08000808 <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	463b      	mov	r3, r7
 8000810:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 8000814:	797b      	ldrb	r3, [r7, #5]
 8000816:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 8000818:	793b      	ldrb	r3, [r7, #4]
 800081a:	461a      	mov	r2, r3
 800081c:	4613      	mov	r3, r2
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800082e:	fb01 f303 	mul.w	r3, r1, r3
 8000832:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000834:	78bb      	ldrb	r3, [r7, #2]
 8000836:	3b01      	subs	r3, #1
 8000838:	490a      	ldr	r1, [pc, #40]	; (8000864 <dateTimeToSeconds+0x5c>)
 800083a:	fb01 f303 	mul.w	r3, r1, r3
 800083e:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000840:	787b      	ldrb	r3, [r7, #1]
 8000842:	3b01      	subs	r3, #1
 8000844:	4908      	ldr	r1, [pc, #32]	; (8000868 <dateTimeToSeconds+0x60>)
 8000846:	fb01 f303 	mul.w	r3, r1, r3
 800084a:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 800084c:	783b      	ldrb	r3, [r7, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <dateTimeToSeconds+0x64>)
 8000852:	fb01 f303 	mul.w	r3, r1, r3
 8000856:	4413      	add	r3, r2
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	00015180 	.word	0x00015180
 8000868:	00278d00 	.word	0x00278d00
 800086c:	01da9c00 	.word	0x01da9c00

08000870 <getNextAlarm>:


/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent) {
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b08d      	sub	sp, #52	; 0x34
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
	int currentIdx = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
	bool nextAlarmFound = false;
 8000884:	2300      	movs	r3, #0
 8000886:	77fb      	strb	r3, [r7, #31]
	DateTime now = {0};
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	1cdc      	adds	r4, r3, #3
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	1c9a      	adds	r2, r3, #2
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	1c59      	adds	r1, r3, #1
 80008ae:	f107 0018 	add.w	r0, r7, #24
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	3305      	adds	r3, #5
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	3304      	adds	r3, #4
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	4623      	mov	r3, r4
 80008c4:	f001 f866 	bl	8001994 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
	currentIdx = eventIdx - 1;
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	3b01      	subs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
	nextAlarmFound = false;
 80008d2:	2300      	movs	r3, #0
 80008d4:	77fb      	strb	r3, [r7, #31]
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 80008d6:	e0bc      	b.n	8000a52 <getNextAlarm+0x1e2>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 80008d8:	4973      	ldr	r1, [pc, #460]	; (8000aa8 <getNextAlarm+0x238>)
 80008da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	440b      	add	r3, r1
 80008e6:	cb0c      	ldmia	r3, {r2, r3}
 80008e8:	f107 0118 	add.w	r1, r7, #24
 80008ec:	c903      	ldmia	r1, {r0, r1}
 80008ee:	f7ff ff6d 	bl	80007cc <compareDateTime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da43      	bge.n	8000980 <getNextAlarm+0x110>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 80008f8:	496b      	ldr	r1, [pc, #428]	; (8000aa8 <getNextAlarm+0x238>)
 80008fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 800090a:	4967      	ldr	r1, [pc, #412]	; (8000aa8 <getNextAlarm+0x238>)
 800090c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	3301      	adds	r3, #1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 800091e:	4962      	ldr	r1, [pc, #392]	; (8000aa8 <getNextAlarm+0x238>)
 8000920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	3302      	adds	r3, #2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 8000932:	495d      	ldr	r1, [pc, #372]	; (8000aa8 <getNextAlarm+0x238>)
 8000934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	3303      	adds	r3, #3
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 8000946:	4958      	ldr	r1, [pc, #352]	; (8000aa8 <getNextAlarm+0x238>)
 8000948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	440b      	add	r3, r1
 8000954:	3304      	adds	r3, #4
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 800095a:	4953      	ldr	r1, [pc, #332]	; (8000aa8 <getNextAlarm+0x238>)
 800095c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	440b      	add	r3, r1
 8000968:	3305      	adds	r3, #5
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 800096e:	2301      	movs	r3, #1
 8000970:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx - 1;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	3b01      	subs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
			*inEvent = false;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e068      	b.n	8000a52 <getNextAlarm+0x1e2>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 8000980:	4949      	ldr	r1, [pc, #292]	; (8000aa8 <getNextAlarm+0x238>)
 8000982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	cb0c      	ldmia	r3, {r2, r3}
 8000990:	f107 0118 	add.w	r1, r7, #24
 8000994:	c903      	ldmia	r1, {r0, r1}
 8000996:	f7ff ff19 	bl	80007cc <compareDateTime>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	db55      	blt.n	8000a4c <getNextAlarm+0x1dc>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 80009a0:	4941      	ldr	r1, [pc, #260]	; (8000aa8 <getNextAlarm+0x238>)
 80009a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3308      	adds	r3, #8
 80009b0:	3304      	adds	r3, #4
 80009b2:	cb0c      	ldmia	r3, {r2, r3}
 80009b4:	f107 0118 	add.w	r1, r7, #24
 80009b8:	c903      	ldmia	r1, {r0, r1}
 80009ba:	f7ff ff07 	bl	80007cc <compareDateTime>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da43      	bge.n	8000a4c <getNextAlarm+0x1dc>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 80009c4:	4938      	ldr	r1, [pc, #224]	; (8000aa8 <getNextAlarm+0x238>)
 80009c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	440b      	add	r3, r1
 80009d2:	330c      	adds	r3, #12
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 80009d8:	4933      	ldr	r1, [pc, #204]	; (8000aa8 <getNextAlarm+0x238>)
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	330d      	adds	r3, #13
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 80009ec:	492e      	ldr	r1, [pc, #184]	; (8000aa8 <getNextAlarm+0x238>)
 80009ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	440b      	add	r3, r1
 80009fa:	330e      	adds	r3, #14
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 8000a00:	4929      	ldr	r1, [pc, #164]	; (8000aa8 <getNextAlarm+0x238>)
 8000a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	330f      	adds	r3, #15
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 8000a14:	4924      	ldr	r1, [pc, #144]	; (8000aa8 <getNextAlarm+0x238>)
 8000a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	440b      	add	r3, r1
 8000a22:	3310      	adds	r3, #16
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 8000a28:	491f      	ldr	r1, [pc, #124]	; (8000aa8 <getNextAlarm+0x238>)
 8000a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	440b      	add	r3, r1
 8000a36:	3311      	adds	r3, #17
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx;
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	623b      	str	r3, [r7, #32]
			*inEvent = true;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	e002      	b.n	8000a52 <getNextAlarm+0x1e2>
		}

		// traverse to next event
		else {
			eventIdx++;
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	3301      	adds	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <getNextAlarm+0x23c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	da06      	bge.n	8000a6a <getNextAlarm+0x1fa>
 8000a5c:	7ffb      	ldrb	r3, [r7, #31]
 8000a5e:	f083 0301 	eor.w	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f47f af37 	bne.w	80008d8 <getNextAlarm+0x68>
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000a6a:	7ffb      	ldrb	r3, [r7, #31]
 8000a6c:	f083 0301 	eor.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d007      	beq.n	8000a86 <getNextAlarm+0x216>
		dateTime = NULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a80:	601a      	str	r2, [r3, #0]
		return false;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e00b      	b.n	8000a9e <getNextAlarm+0x22e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	6010      	str	r0, [r2, #0]
 8000a92:	889b      	ldrh	r3, [r3, #4]
 8000a94:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = currentIdx;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	601a      	str	r2, [r3, #0]
		return true;
 8000a9c:	2301      	movs	r3, #1
	}
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	372c      	adds	r7, #44	; 0x2c
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000090 	.word	0x20000090
 8000aac:	20000180 	.word	0x20000180

08000ab0 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	221c      	movs	r2, #28
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 fc8e 	bl	80053f0 <memcpy>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3304      	adds	r3, #4
 8000af6:	221c      	movs	r2, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	68b8      	ldr	r0, [r7, #8]
 8000afc:	f004 fc78 	bl	80053f0 <memcpy>
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <code_to_appActions>:

/*
 *
 */
AppActions code_to_appActions(char* code)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000b10:	2204      	movs	r2, #4
 8000b12:	490c      	ldr	r1, [pc, #48]	; (8000b44 <code_to_appActions+0x3c>)
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f004 fcb5 	bl	8005484 <strncmp>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e00a      	b.n	8000b3a <code_to_appActions+0x32>

	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000b24:	2204      	movs	r2, #4
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <code_to_appActions+0x40>)
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f004 fcab 	bl	8005484 <strncmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8000b34:	2302      	movs	r3, #2
 8000b36:	e000      	b.n	8000b3a <code_to_appActions+0x32>

	else
		return NO_ACTION;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	080069c8 	.word	0x080069c8
 8000b48:	080069d0 	.word	0x080069d0

08000b4c <parseDateTime>:

/*
 *
 */
void parseDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	// parse year
	dateTime->year = atoi(strtok(data, ";"));
 8000b56:	4926      	ldr	r1, [pc, #152]	; (8000bf0 <parseDateTime+0xa4>)
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f004 fca7 	bl	80054ac <strtok>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fc17 	bl	8005394 <atoi>
 8000b66:	4603      	mov	r3, r0
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	701a      	strb	r2, [r3, #0]

	// parse month
	dateTime->month = atoi(strtok(NULL, ";"));
 8000b6e:	4920      	ldr	r1, [pc, #128]	; (8000bf0 <parseDateTime+0xa4>)
 8000b70:	2000      	movs	r0, #0
 8000b72:	f004 fc9b 	bl	80054ac <strtok>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fc0b 	bl	8005394 <atoi>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	705a      	strb	r2, [r3, #1]

	// parse date
	dateTime->day = atoi(strtok(NULL, ";"));
 8000b86:	491a      	ldr	r1, [pc, #104]	; (8000bf0 <parseDateTime+0xa4>)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f004 fc8f 	bl	80054ac <strtok>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fbff 	bl	8005394 <atoi>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	709a      	strb	r2, [r3, #2]

	// parse hour
	dateTime->hour = atoi(strtok(NULL, ";"));
 8000b9e:	4914      	ldr	r1, [pc, #80]	; (8000bf0 <parseDateTime+0xa4>)
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f004 fc83 	bl	80054ac <strtok>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 fbf3 	bl	8005394 <atoi>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	70da      	strb	r2, [r3, #3]

	// parse minute
	dateTime->minute = atoi(strtok(NULL, ";"));
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <parseDateTime+0xa4>)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f004 fc77 	bl	80054ac <strtok>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 fbe7 	bl	8005394 <atoi>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	711a      	strb	r2, [r3, #4]

	// parse second
	dateTime->second = atoi(strtok(NULL, ";"));
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <parseDateTime+0xa4>)
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f004 fc6b 	bl	80054ac <strtok>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fbdb 	bl	8005394 <atoi>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	715a      	strb	r2, [r3, #5]
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	080069d8 	.word	0x080069d8

08000bf4 <formatDateTime>:

/*
 *
 */
void formatDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af06      	add	r7, sp, #24
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	memset(data, 0, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000bfe:	221c      	movs	r2, #28
 8000c00:	2100      	movs	r1, #0
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f004 fc02 	bl	800540c <memset>
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	785b      	ldrb	r3, [r3, #1]
 8000c12:	461a      	mov	r2, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	4619      	mov	r1, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	78db      	ldrb	r3, [r3, #3]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000c1e:	4618      	mov	r0, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	791b      	ldrb	r3, [r3, #4]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000c24:	461c      	mov	r4, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	795b      	ldrb	r3, [r3, #5]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000c2a:	9304      	str	r3, [sp, #16]
 8000c2c:	9403      	str	r4, [sp, #12]
 8000c2e:	9002      	str	r0, [sp, #8]
 8000c30:	9101      	str	r1, [sp, #4]
 8000c32:	9200      	str	r2, [sp, #0]
 8000c34:	462b      	mov	r3, r5
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <formatDateTime+0x54>)
 8000c38:	211c      	movs	r1, #28
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f004 fbee 	bl	800541c <sniprintf>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bdb0      	pop	{r4, r5, r7, pc}
 8000c48:	080069dc 	.word	0x080069dc

08000c4c <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 fa4f 	bl	80010f8 <com_transport_init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d007      	beq.n	8000c70 <com_session_init+0x24>
	{
		_sessionOpen = false;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <com_session_init+0x30>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <com_session_init+0x34>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
		return true;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <com_session_init+0x26>
	}

	else
	{
		return false;
 8000c70:	2300      	movs	r3, #0
	}
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000018c 	.word	0x2000018c
 8000c80:	2000018d 	.word	0x2000018d

08000c84 <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <start_session+0x48>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d016      	beq.n	8000cc0 <start_session+0x3c>
	{
		if (!_sessionOpen)
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <start_session+0x4c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f083 0301 	eor.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00d      	beq.n	8000cbc <start_session+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f000 f860 	bl	8000d68 <_handshake>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <start_session+0x34>
				_sessionOpen = true;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <start_session+0x4c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	e002      	b.n	8000cc2 <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e000      	b.n	8000cc2 <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000cc0:	2303      	movs	r3, #3
	}
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000018d 	.word	0x2000018d
 8000cd0:	2000018c 	.word	0x2000018c

08000cd4 <session_cycle>:

/*
 *
 */
SESSION_STATUS session_cycle(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	if (_sessionInit)
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <session_cycle+0x28>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <session_cycle+0x20>
	{
		if (_sessionOpen)
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <session_cycle+0x2c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <session_cycle+0x1c>
		{
			return _session_cycle();
 8000ce8:	f000 f928 	bl	8000f3c <_session_cycle>
 8000cec:	4603      	mov	r3, r0
 8000cee:	e002      	b.n	8000cf6 <session_cycle+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e000      	b.n	8000cf6 <session_cycle+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000cf4:	2303      	movs	r3, #3
	}
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000018d 	.word	0x2000018d
 8000d00:	2000018c 	.word	0x2000018c

08000d04 <tell>:

/*
 *
 */
SESSION_STATUS tell(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	TRANSPORT_STATUS transportStatus;

	if (_sessionInit)
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <tell+0x5c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d01f      	beq.n	8000d56 <tell+0x52>
	{
		if (_sessionOpen)
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <tell+0x60>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d019      	beq.n	8000d52 <tell+0x4e>
		{
			// enqueue message
			if (queue_tx(header, body) != TRANSPORT_OKAY)
 8000d1e:	6839      	ldr	r1, [r7, #0]
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 fa07 	bl	8001134 <queue_tx>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <tell+0x2c>
			{
				return SESSION_BUSY;
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	e013      	b.n	8000d58 <tell+0x54>
			}

			// send message
			transportStatus = tx(TX_TIMEOUT_MS);
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f000 fa59 	bl	80011e8 <tx>
 8000d36:	4603      	mov	r3, r0
 8000d38:	73fb      	strb	r3, [r7, #15]

			if (transportStatus == TRANSPORT_OKAY)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <tell+0x40>
			{
				return SESSION_OKAY;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e009      	b.n	8000d58 <tell+0x54>
			}
			else if (transportStatus == TRANSPORT_TIMEOUT)
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <tell+0x4a>
			{
				return SESSION_TIMEOUT;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e004      	b.n	8000d58 <tell+0x54>
			}
			else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
			{
				return SESSION_ERROR;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <tell+0x54>
			}
		}

		else
		{
			return SESSION_NOT_OPEN;
 8000d52:	2304      	movs	r3, #4
 8000d54:	e000      	b.n	8000d58 <tell+0x54>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000d56:	2303      	movs	r3, #3
	}
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000018d 	.word	0x2000018d
 8000d64:	2000018c 	.word	0x2000018c

08000d68 <_handshake>:

/*
 *
 */
SESSION_STATUS _handshake(unsigned int timeout_ms)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool error = false;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	bool success = false;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]

	while (!success && !error)
 8000d9a:	e0a2      	b.n	8000ee2 <_handshake+0x17a>
	{
		// state 0:  receive message
		if (state == 0)
 8000d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d106      	bne.n	8000db0 <_handshake+0x48>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 fa5a 	bl	800125c <rx>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000dae:	e063      	b.n	8000e78 <_handshake+0x110>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 8000db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10b      	bne.n	8000dce <_handshake+0x66>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000db6:	f107 0208 	add.w	r2, r7, #8
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f9dd 	bl	8001180 <dequeue_rx>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000dcc:	e054      	b.n	8000e78 <_handshake+0x110>
		}
		// state 2: check if sync
		else if (state == 2)
 8000dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d10d      	bne.n	8000df0 <_handshake+0x88>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	2204      	movs	r2, #4
 8000dda:	4955      	ldr	r1, [pc, #340]	; (8000f30 <_handshake+0x1c8>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fb51 	bl	8005484 <strncmp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d047      	beq.n	8000e78 <_handshake+0x110>
			{
				error = true;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000dee:	e043      	b.n	8000e78 <_handshake+0x110>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d110      	bne.n	8000e18 <_handshake+0xb0>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	221c      	movs	r2, #28
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fb04 	bl	800540c <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	484a      	ldr	r0, [pc, #296]	; (8000f34 <_handshake+0x1cc>)
 8000e0c:	f000 f992 	bl	8001134 <queue_tx>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e16:	e02f      	b.n	8000e78 <_handshake+0x110>
		}
		// state 4: send ack
		else if (state == 4)
 8000e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d106      	bne.n	8000e2c <_handshake+0xc4>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 8000e1e:	2064      	movs	r0, #100	; 0x64
 8000e20:	f000 f9e2 	bl	80011e8 <tx>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e2a:	e025      	b.n	8000e78 <_handshake+0x110>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8000e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d106      	bne.n	8000e40 <_handshake+0xd8>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 8000e32:	20fa      	movs	r0, #250	; 0xfa
 8000e34:	f000 fa12 	bl	800125c <rx>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e3e:	e01b      	b.n	8000e78 <_handshake+0x110>
		}
		// state 6: dequeue message
		else if (state == 6)
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d10b      	bne.n	8000e5e <_handshake+0xf6>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000e46:	f107 0208 	add.w	r2, r7, #8
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f995 	bl	8001180 <dequeue_rx>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e5c:	e00c      	b.n	8000e78 <_handshake+0x110>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2204      	movs	r2, #4
 8000e64:	4934      	ldr	r1, [pc, #208]	; (8000f38 <_handshake+0x1d0>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fb0c 	bl	8005484 <strncmp>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <_handshake+0x110>
			{
				error = true;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8000e78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d12d      	bne.n	8000edc <_handshake+0x174>
		{
			if (state == 0)
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <_handshake+0x124>
				state = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e8a:	e02a      	b.n	8000ee2 <_handshake+0x17a>
			else if (state == 1)
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d102      	bne.n	8000e98 <_handshake+0x130>
				state = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e96:	e024      	b.n	8000ee2 <_handshake+0x17a>
			else if (state == 2)
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d102      	bne.n	8000ea4 <_handshake+0x13c>
				state = 3;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea2:	e01e      	b.n	8000ee2 <_handshake+0x17a>
			else if (state == 3)
 8000ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d102      	bne.n	8000eb0 <_handshake+0x148>
				state = 4;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eae:	e018      	b.n	8000ee2 <_handshake+0x17a>
			else if (state == 4)
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d102      	bne.n	8000ebc <_handshake+0x154>
				state = 5;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eba:	e012      	b.n	8000ee2 <_handshake+0x17a>
			else if (state == 5)
 8000ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	d102      	bne.n	8000ec8 <_handshake+0x160>
				state = 6;
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ec6:	e00c      	b.n	8000ee2 <_handshake+0x17a>
			else if (state == 6)
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d102      	bne.n	8000ed4 <_handshake+0x16c>
				state = 7;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed2:	e006      	b.n	8000ee2 <_handshake+0x17a>
			else // if (state == 7)
				success = true;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000eda:	e002      	b.n	8000ee2 <_handshake+0x17a>
		}
		else
		{
			error = true;
 8000edc:	2301      	movs	r3, #1
 8000ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (!success && !error)
 8000ee2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ee6:	f083 0301 	eor.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <_handshake+0x198>
 8000ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ef4:	f083 0301 	eor.w	r3, r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f47f af4e 	bne.w	8000d9c <_handshake+0x34>
		}
	}


	// report status of handshake
	if (success && !error)
 8000f00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <_handshake+0x1b2>
 8000f08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <_handshake+0x1b2>
	{
		return SESSION_OKAY;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e006      	b.n	8000f28 <_handshake+0x1c0>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 8000f1a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <_handshake+0x1be>
		{
			return SESSION_TIMEOUT;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <_handshake+0x1c0>
		}
		else
		{
			return SESSION_ERROR;
 8000f26:	2302      	movs	r3, #2
		}
	}
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3730      	adds	r7, #48	; 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	080069f0 	.word	0x080069f0
 8000f34:	080069f8 	.word	0x080069f8
 8000f38:	08006a00 	.word	0x08006a00

08000f3c <_session_cycle>:

/*
 *
 */
SESSION_STATUS _session_cycle(void)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]
	SESSION_STATUS status;

	// Perform Rx message phase of session cycle.
	status = _listen();
 8000f5c:	f000 f854 	bl	8001008 <_listen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status == SESSION_ERROR)
 8000f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d101      	bne.n	8000f72 <_session_cycle+0x36>
	{
		return SESSION_ERROR;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e03a      	b.n	8000fe8 <_session_cycle+0xac>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 8000f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d135      	bne.n	8000fe6 <_session_cycle+0xaa>
	{
		// dequeue received message
		dequeue_rx(messageHeader, messageBody);
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8fc 	bl	8001180 <dequeue_rx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_MESSAGE_HEADER_SIZE))
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4918      	ldr	r1, [pc, #96]	; (8000ff0 <_session_cycle+0xb4>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 fa77 	bl	8005484 <strncmp>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d103      	bne.n	8000fa4 <_session_cycle+0x68>
		{
			_sessionOpen = false;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_session_cycle+0xb8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e020      	b.n	8000fe6 <_session_cycle+0xaa>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_MESSAGE_HEADER_SIZE))
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	2204      	movs	r2, #4
 8000faa:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <_session_cycle+0xbc>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fa69 	bl	8005484 <strncmp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d107      	bne.n	8000fc8 <_session_cycle+0x8c>
		{
			tell(messageHeader, messageBody);
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe9f 	bl	8000d04 <tell>
 8000fc6:	e00e      	b.n	8000fe6 <_session_cycle+0xaa>
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <_session_cycle+0xc0>)
 8000fcc:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <_session_cycle+0xc4>)
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	1d3c      	adds	r4, r7, #4
 8000fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000fdc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_session_cycle+0xc8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
		}
	}

	return SESSION_OKAY;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff0:	08006a08 	.word	0x08006a08
 8000ff4:	2000018c 	.word	0x2000018c
 8000ff8:	08006a10 	.word	0x08006a10
 8000ffc:	20000190 	.word	0x20000190
 8001000:	20000194 	.word	0x20000194
 8001004:	200001b0 	.word	0x200001b0

08001008 <_listen>:

/*
 *
 */
SESSION_STATUS _listen(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8001022:	463b      	mov	r3, r7
 8001024:	221c      	movs	r2, #28
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 f9ef 	bl	800540c <memset>
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "Clear to send!\n");
 800102e:	463b      	mov	r3, r7
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <_listen+0x90>)
 8001032:	211c      	movs	r1, #28
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f9f1 	bl	800541c <sniprintf>
	transportStatus = queue_tx(CTS_HEADER, messageBody);
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4817      	ldr	r0, [pc, #92]	; (800109c <_listen+0x94>)
 8001040:	f000 f878 	bl	8001134 <queue_tx>
 8001044:	4603      	mov	r3, r0
 8001046:	77fb      	strb	r3, [r7, #31]

	if (transportStatus != TRANSPORT_OKAY)
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <_listen+0x4a>
	{
		return SESSION_ERROR;
 800104e:	2302      	movs	r3, #2
 8001050:	e01e      	b.n	8001090 <_listen+0x88>
	}

	transportStatus = tx(TX_TIMEOUT_MS);
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f000 f8c8 	bl	80011e8 <tx>
 8001058:	4603      	mov	r3, r0
 800105a:	77fb      	strb	r3, [r7, #31]

	if (transportStatus == TRANSPORT_TIMEOUT)
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <_listen+0x5e>
	{
		return SESSION_TIMEOUT;
 8001062:	2301      	movs	r3, #1
 8001064:	e014      	b.n	8001090 <_listen+0x88>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8001066:	7ffb      	ldrb	r3, [r7, #31]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <_listen+0x68>
	{
		return SESSION_ERROR;
 800106c:	2302      	movs	r3, #2
 800106e:	e00f      	b.n	8001090 <_listen+0x88>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = rx(RX_TIMEOUT_MS);
 8001070:	20fa      	movs	r0, #250	; 0xfa
 8001072:	f000 f8f3 	bl	800125c <rx>
 8001076:	4603      	mov	r3, r0
 8001078:	77fb      	strb	r3, [r7, #31]

	if (transportStatus == TRANSPORT_TIMEOUT)
 800107a:	7ffb      	ldrb	r3, [r7, #31]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <_listen+0x7c>
	{
		return SESSION_TIMEOUT;
 8001080:	2301      	movs	r3, #1
 8001082:	e005      	b.n	8001090 <_listen+0x88>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8001084:	7ffb      	ldrb	r3, [r7, #31]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <_listen+0x86>
	{
		return SESSION_ERROR;
 800108a:	2302      	movs	r3, #2
 800108c:	e000      	b.n	8001090 <_listen+0x88>
	}

	return SESSION_OKAY;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08006a18 	.word	0x08006a18
 800109c:	08006a28 	.word	0x08006a28

080010a0 <getCommand>:

/*
 *
 */
SESSION_STATUS getCommand(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80010a0:	b4b0      	push	{r4, r5, r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	if (_messageReady)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <getCommand+0x4c>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d015      	beq.n	80010de <getCommand+0x3e>
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <getCommand+0x50>)
 80010b4:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(header, _messageCommand, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
		memcpy(body, _messageData, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <getCommand+0x54>)
 80010be:	461d      	mov	r5, r3
 80010c0:	4614      	mov	r4, r2
 80010c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c4:	6028      	str	r0, [r5, #0]
 80010c6:	6069      	str	r1, [r5, #4]
 80010c8:	60aa      	str	r2, [r5, #8]
 80010ca:	60eb      	str	r3, [r5, #12]
 80010cc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010ce:	6128      	str	r0, [r5, #16]
 80010d0:	6169      	str	r1, [r5, #20]
 80010d2:	61aa      	str	r2, [r5, #24]
		_messageReady = false;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <getCommand+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]

		return SESSION_OKAY;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <getCommand+0x40>
	}

	else
	{
		return SESSION_ERROR;
 80010de:	2302      	movs	r3, #2
	}
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bcb0      	pop	{r4, r5, r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200001b0 	.word	0x200001b0
 80010f0:	20000190 	.word	0x20000190
 80010f4:	20000194 	.word	0x20000194

080010f8 <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00a      	beq.n	800111c <com_transport_init+0x24>
	{
		_uartHandle = huart;
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <com_transport_init+0x30>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <com_transport_init+0x34>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <com_transport_init+0x38>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
		return true;
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <com_transport_init+0x26>
	}

	else
	{
		return false;
 800111c:	2300      	movs	r3, #0
	}
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200001b4 	.word	0x200001b4
 800112c:	200001f8 	.word	0x200001f8
 8001130:	200001f9 	.word	0x200001f9

08001134 <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <queue_tx+0x40>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d010      	beq.n	8001168 <queue_tx+0x34>
	{
		if (_txBuffer_full)
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <queue_tx+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 8001150:	2304      	movs	r3, #4
 8001152:	e00a      	b.n	800116a <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 8001154:	4a09      	ldr	r2, [pc, #36]	; (800117c <queue_tx+0x48>)
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fca9 	bl	8000ab0 <composeMessage>
			_txBuffer_full = true;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <queue_tx+0x44>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8001164:	2300      	movs	r3, #0
 8001166:	e000      	b.n	800116a <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001168:	2308      	movs	r3, #8
	}
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001b4 	.word	0x200001b4
 8001178:	200001f8 	.word	0x200001f8
 800117c:	200001b8 	.word	0x200001b8

08001180 <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <dequeue_rx+0x5c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01f      	beq.n	80011d2 <dequeue_rx+0x52>
	{
		if (!_rxBuffer_full)
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <dequeue_rx+0x60>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f083 0301 	eor.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 80011a2:	2306      	movs	r3, #6
 80011a4:	e016      	b.n	80011d4 <dequeue_rx+0x54>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <dequeue_rx+0x64>)
 80011a8:	f107 0408 	add.w	r4, r7, #8
 80011ac:	461d      	mov	r5, r3
 80011ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <dequeue_rx+0x60>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	461a      	mov	r2, r3
 80011c6:	6839      	ldr	r1, [r7, #0]
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fc87 	bl	8000adc <decomposeMessage>

			return TRANSPORT_OKAY;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <dequeue_rx+0x54>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80011d2:	2308      	movs	r3, #8
	}
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	200001b4 	.word	0x200001b4
 80011e0:	200001f9 	.word	0x200001f9
 80011e4:	200001d8 	.word	0x200001d8

080011e8 <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <tx+0x68>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d026      	beq.n	8001246 <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <tx+0x6c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 8001208:	2305      	movs	r3, #5
 800120a:	e01d      	b.n	8001248 <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <tx+0x68>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2220      	movs	r2, #32
 8001214:	4910      	ldr	r1, [pc, #64]	; (8001258 <tx+0x70>)
 8001216:	f003 fa47 	bl	80046a8 <HAL_UART_Transmit>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <tx+0x40>
		{
			return TRANSPORT_ERROR;
 8001224:	2302      	movs	r3, #2
 8001226:	e00f      	b.n	8001248 <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d101      	bne.n	8001232 <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 800122e:	2301      	movs	r3, #1
 8001230:	e00a      	b.n	8001248 <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d101      	bne.n	800123c <tx+0x54>
		{
			return TRANSPORT_BUSY;
 8001238:	2303      	movs	r3, #3
 800123a:	e005      	b.n	8001248 <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <tx+0x6c>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001246:	2308      	movs	r3, #8
	}
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001b4 	.word	0x200001b4
 8001254:	200001f8 	.word	0x200001f8
 8001258:	200001b8 	.word	0x200001b8

0800125c <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <rx+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d023      	beq.n	80012b4 <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <rx+0x68>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 8001276:	2307      	movs	r3, #7
 8001278:	e01d      	b.n	80012b6 <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <rx+0x64>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	4911      	ldr	r1, [pc, #68]	; (80012c8 <rx+0x6c>)
 8001284:	f003 fa96 	bl	80047b4 <HAL_UART_Receive>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 8001292:	2302      	movs	r3, #2
 8001294:	e00f      	b.n	80012b6 <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d101      	bne.n	80012a0 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 800129c:	2301      	movs	r3, #1
 800129e:	e00a      	b.n	80012b6 <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d101      	bne.n	80012aa <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e005      	b.n	80012b6 <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <rx+0x68>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e000      	b.n	80012b6 <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80012b4:	2308      	movs	r3, #8
	}
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001b4 	.word	0x200001b4
 80012c4:	200001f9 	.word	0x200001f9
 80012c8:	200001d8 	.word	0x200001d8

080012cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f0:	68fb      	ldr	r3, [r7, #12]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4013      	ands	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	d101      	bne.n	8001318 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff ffe4 	bl	80012fc <LL_AHB2_GRP1_IsEnabledClock>
 8001334:	4603      	mov	r3, r0
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <activate_led+0x60>)
 8001338:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <activate_led+0x60>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2002      	movs	r0, #2
 8001344:	f7ff ffc2 	bl	80012cc <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <activate_led+0x64>)
 800136c:	f000 ffac 	bl	80022c8 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2201      	movs	r2, #1
 8001374:	4619      	mov	r1, r3
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <activate_led+0x64>)
 8001378:	f001 f906 	bl	8002588 <HAL_GPIO_WritePin>
}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001fc 	.word	0x200001fc
 8001388:	48000400 	.word	0x48000400

0800138c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139c:	f023 0218 	bic.w	r2, r3, #24
 80013a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <LL_AHB2_GRP1_EnableClock>:
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80013ee:	f7ff f9e1 	bl	80007b4 <calendar_AlarmA_ISR>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f000 fddf 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001406:	f000 f889 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140a:	f000 f9d9 	bl	80017c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800140e:	f000 f981 	bl	8001714 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001412:	f000 f8e1 	bl	80015d8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8001416:	2001      	movs	r0, #1
 8001418:	f001 f8f6 	bl	8002608 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 800141c:	483c      	ldr	r0, [pc, #240]	; (8001510 <main+0x114>)
 800141e:	f7ff fc15 	bl	8000c4c <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 8001422:	483c      	ldr	r0, [pc, #240]	; (8001514 <main+0x118>)
 8001424:	f7ff f884 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8001428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 8001432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001436:	e893 0003 	ldmia.w	r3, {r0, r1}
 800143a:	f7ff f889 	bl	8000550 <calendar_setDateTime>

  // start calendar
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	202a      	movs	r0, #42	; 0x2a
 8001444:	f000 ff0b 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001448:	202a      	movs	r0, #42	; 0x2a
 800144a:	f000 ff22 	bl	8002292 <HAL_NVIC_EnableIRQ>
  calendar_start();
 800144e:	f7ff f8af 	bl	80005b0 <calendar_start>

  // begin listening for messages from desktop
  if (start_session() == SESSION_OKAY)
 8001452:	f7ff fc17 	bl	8000c84 <start_session>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <main+0x68>
  {
	  activate_led(GREEN_LED);
 800145c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001460:	f7ff ff60 	bl	8001324 <activate_led>
  }

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  AppActions commandCode;
  DateTime newDateTime = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	809a      	strh	r2, [r3, #4]
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 800146c:	f7ff f8de 	bl	800062c <calendar_handleAlarm>

	  // try connection if not present
	  if (start_session() == SESSION_OKAY)
 8001470:	f7ff fc08 	bl	8000c84 <start_session>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <main+0x86>
	  {
		  activate_led(GREEN_LED);
 800147a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800147e:	f7ff ff51 	bl	8001324 <activate_led>
	  }

	  // if message present, handle message
	  if (session_cycle() != SESSION_OKAY)
 8001482:	f7ff fc27 	bl	8000cd4 <session_cycle>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <main+0x98>
	  {
		  activate_led(RED_LED);
 800148c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001490:	f7ff ff48 	bl	8001324 <activate_led>
	  }

	  // get command if present
	  if (getCommand(messageHeader, messageBody) == SESSION_OKAY)
 8001494:	f107 0208 	add.w	r2, r7, #8
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fdfe 	bl	80010a0 <getCommand>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1e0      	bne.n	800146c <main+0x70>
	  {
		  // execute command
		  commandCode = code_to_appActions(messageHeader);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fb2a 	bl	8000b08 <code_to_appActions>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		  if (commandCode == SET_CALENDAR_DATETIME)
 80014ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d10c      	bne.n	80014dc <main+0xe0>
		  {
			  parseDateTime(messageBody, &newDateTime);
 80014c2:	463a      	mov	r2, r7
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fb3e 	bl	8000b4c <parseDateTime>
			  calendar_setDateTime(newDateTime);
 80014d0:	463b      	mov	r3, r7
 80014d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d6:	f7ff f83b 	bl	8000550 <calendar_setDateTime>
 80014da:	e7c7      	b.n	800146c <main+0x70>
		  }

		  else if (commandCode == GET_CALENDAR_DATETIME)
 80014dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d1c3      	bne.n	800146c <main+0x70>
		  {
			  calendar_getDateTime(&newDateTime);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f848 	bl	800057c <calendar_getDateTime>
			  formatDateTime(messageBody, &newDateTime);
 80014ec:	463a      	mov	r2, r7
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fb7d 	bl	8000bf4 <formatDateTime>
			  memcpy(messageHeader, "ECHO", UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <main+0x11c>)
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
			  tell(messageHeader, messageBody);
 80014fe:	f107 0208 	add.w	r2, r7, #8
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fbfb 	bl	8000d04 <tell>
	  calendar_handleAlarm();
 800150e:	e7ad      	b.n	800146c <main+0x70>
 8001510:	20000238 	.word	0x20000238
 8001514:	20000200 	.word	0x20000200
 8001518:	4f484345 	.word	0x4f484345

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b09a      	sub	sp, #104	; 0x68
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	2248      	movs	r2, #72	; 0x48
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f003 ff6e 	bl	800540c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001542:	f001 f839 	bl	80025b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ff20 	bl	800138c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <SystemClock_Config+0xb8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001554:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <SystemClock_Config+0xb8>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <SystemClock_Config+0xb8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001568:	232c      	movs	r3, #44	; 0x2c
 800156a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800156c:	2381      	movs	r3, #129	; 0x81
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001570:	2301      	movs	r3, #1
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001574:	2300      	movs	r3, #0
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001580:	2301      	movs	r3, #1
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fafd 	bl	8002b8c <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001598:	f000 f91f 	bl	80017da <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 800159c:	236f      	movs	r3, #111	; 0x6f
 800159e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fe67 	bl	8003290 <HAL_RCC_ClockConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015c8:	f000 f907 	bl	80017da <Error_Handler>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3768      	adds	r7, #104	; 0x68
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58000400 	.word	0x58000400

080015d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b092      	sub	sp, #72	; 0x48
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	222c      	movs	r2, #44	; 0x2c
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 ff07 	bl	800540c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <MX_RTC_Init+0x134>)
 8001600:	4a43      	ldr	r2, [pc, #268]	; (8001710 <MX_RTC_Init+0x138>)
 8001602:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <MX_RTC_Init+0x134>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800160a:	4b40      	ldr	r3, [pc, #256]	; (800170c <MX_RTC_Init+0x134>)
 800160c:	227f      	movs	r2, #127	; 0x7f
 800160e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001610:	4b3e      	ldr	r3, [pc, #248]	; (800170c <MX_RTC_Init+0x134>)
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <MX_RTC_Init+0x134>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <MX_RTC_Init+0x134>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <MX_RTC_Init+0x134>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <MX_RTC_Init+0x134>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <MX_RTC_Init+0x134>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <MX_RTC_Init+0x134>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163c:	4833      	ldr	r0, [pc, #204]	; (800170c <MX_RTC_Init+0x134>)
 800163e:	f002 fb01 	bl	8003c44 <HAL_RTC_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001648:	f000 f8c7 	bl	80017da <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001666:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800166a:	2201      	movs	r2, #1
 800166c:	4619      	mov	r1, r3
 800166e:	4827      	ldr	r0, [pc, #156]	; (800170c <MX_RTC_Init+0x134>)
 8001670:	f002 fb6a 	bl	8003d48 <HAL_RTC_SetTime>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800167a:	f000 f8ae 	bl	80017da <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <MX_RTC_Init+0x134>)
 80016a0:	f002 fc50 	bl	8003f44 <HAL_RTC_SetDate>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 80016aa:	f000 f896 	bl	80017da <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80016d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <MX_RTC_Init+0x134>)
 80016e6:	f002 fd01 	bl	80040ec <HAL_RTC_SetAlarm_IT>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80016f0:	f000 f873 	bl	80017da <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	202a      	movs	r0, #42	; 0x2a
 80016fa:	f000 fdb0 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016fe:	202a      	movs	r0, #42	; 0x2a
 8001700:	f000 fdc7 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3748      	adds	r7, #72	; 0x48
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000200 	.word	0x20000200
 8001710:	40002800 	.word	0x40002800

08001714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 800171a:	4a28      	ldr	r2, [pc, #160]	; (80017bc <MX_USART2_UART_Init+0xa8>)
 800171c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 800172e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001732:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001734:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001736:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800173a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 800175c:	2230      	movs	r2, #48	; 0x30
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 800176a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001770:	4811      	ldr	r0, [pc, #68]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001772:	f002 ff49 	bl	8004608 <HAL_UART_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800177c:	f000 f82d 	bl	80017da <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001784:	f003 fd3d 	bl	8005202 <HAL_UARTEx_SetTxFifoThreshold>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800178e:	f000 f824 	bl	80017da <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 8001796:	f003 fd72 	bl	800527e <HAL_UARTEx_SetRxFifoThreshold>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80017a0:	f000 f81b 	bl	80017da <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_USART2_UART_Init+0xa4>)
 80017a6:	f003 fcf4 	bl	8005192 <HAL_UARTEx_DisableFifoMode>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 80017b0:	f000 f813 	bl	80017da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000238 	.word	0x20000238
 80017bc:	40004400 	.word	0x40004400

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff fdf6 	bl	80013b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2004      	movs	r0, #4
 80017cc:	f7ff fdf3 	bl	80013b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7ff fdf0 	bl	80013b6 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}

080017da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017de:	b672      	cpsid	i
}
 80017e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <Error_Handler+0x8>

080017e4 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <rtcAlarmControl_init+0x18>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	200002cc 	.word	0x200002cc

08001800 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	4603      	mov	r3, r0
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	460b      	mov	r3, r1
 8001818:	717b      	strb	r3, [r7, #5]
 800181a:	4613      	mov	r3, r2
 800181c:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4a5a      	ldr	r2, [pc, #360]	; (800198c <setDateTime+0x18c>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	b258      	sxtb	r0, r3
 800182e:	79fa      	ldrb	r2, [r7, #7]
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <setDateTime+0x18c>)
 8001832:	fba3 1302 	umull	r1, r3, r3, r2
 8001836:	08d9      	lsrs	r1, r3, #3
 8001838:	460b      	mov	r3, r1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	b25b      	sxtb	r3, r3
 8001846:	4303      	orrs	r3, r0
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	4a4e      	ldr	r2, [pc, #312]	; (800198c <setDateTime+0x18c>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	08db      	lsrs	r3, r3, #3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	b258      	sxtb	r0, r3
 800185e:	79ba      	ldrb	r2, [r7, #6]
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <setDateTime+0x18c>)
 8001862:	fba3 1302 	umull	r1, r3, r3, r2
 8001866:	08d9      	lsrs	r1, r3, #3
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	b25b      	sxtb	r3, r3
 8001876:	4303      	orrs	r3, r0
 8001878:	b25b      	sxtb	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 800187e:	797b      	ldrb	r3, [r7, #5]
 8001880:	4a42      	ldr	r2, [pc, #264]	; (800198c <setDateTime+0x18c>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	08db      	lsrs	r3, r3, #3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	b258      	sxtb	r0, r3
 800188e:	797a      	ldrb	r2, [r7, #5]
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <setDateTime+0x18c>)
 8001892:	fba3 1302 	umull	r1, r3, r3, r2
 8001896:	08d9      	lsrs	r1, r3, #3
 8001898:	460b      	mov	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	4303      	orrs	r3, r0
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 80018b2:	793b      	ldrb	r3, [r7, #4]
 80018b4:	4a35      	ldr	r2, [pc, #212]	; (800198c <setDateTime+0x18c>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	b258      	sxtb	r0, r3
 80018c2:	793a      	ldrb	r2, [r7, #4]
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <setDateTime+0x18c>)
 80018c6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ca:	08d9      	lsrs	r1, r3, #3
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	4303      	orrs	r3, r0
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 80018e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018e6:	4a29      	ldr	r2, [pc, #164]	; (800198c <setDateTime+0x18c>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	b258      	sxtb	r0, r3
 80018f4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <setDateTime+0x18c>)
 80018fa:	fba3 1302 	umull	r1, r3, r3, r2
 80018fe:	08d9      	lsrs	r1, r3, #3
 8001900:	460b      	mov	r3, r1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	b25b      	sxtb	r3, r3
 800190e:	4303      	orrs	r3, r0
 8001910:	b25b      	sxtb	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001916:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <setDateTime+0x18c>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	b258      	sxtb	r0, r3
 8001928:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <setDateTime+0x18c>)
 800192e:	fba3 1302 	umull	r1, r3, r3, r2
 8001932:	08d9      	lsrs	r1, r3, #3
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	b25b      	sxtb	r3, r3
 8001942:	4303      	orrs	r3, r0
 8001944:	b25b      	sxtb	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <setDateTime+0x190>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f107 011c 	add.w	r1, r7, #28
 8001952:	2201      	movs	r2, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f002 faf5 	bl	8003f44 <HAL_RTC_SetDate>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001964:	e7fe      	b.n	8001964 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <setDateTime+0x190>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f107 0108 	add.w	r1, r7, #8
 800196e:	2201      	movs	r2, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f002 f9e9 	bl	8003d48 <HAL_RTC_SetTime>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 800197c:	b672      	cpsid	i
}
 800197e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001980:	e7fe      	b.n	8001980 <setDateTime+0x180>
  }
}
 8001982:	bf00      	nop
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	cccccccd 	.word	0xcccccccd
 8001990:	200002cc 	.word	0x200002cc

08001994 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <getDateTime+0x124>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f107 0114 	add.w	r1, r7, #20
 80019be:	2201      	movs	r2, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fa5d 	bl	8003e80 <HAL_RTC_GetTime>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80019d0:	e7fe      	b.n	80019d0 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <getDateTime+0x124>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f107 0110 	add.w	r1, r7, #16
 80019da:	2201      	movs	r2, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fb37 	bl	8004050 <HAL_RTC_GetDate>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80019ec:	e7fe      	b.n	80019ec <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 80019ee:	7cfb      	ldrb	r3, [r7, #19]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	7cfb      	ldrb	r3, [r7, #19]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001a0e:	7c7b      	ldrb	r3, [r7, #17]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	7c7b      	ldrb	r3, [r7, #17]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001a2e:	7cbb      	ldrb	r3, [r7, #18]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	7cbb      	ldrb	r3, [r7, #18]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8001a4e:	7d3b      	ldrb	r3, [r7, #20]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	7d3b      	ldrb	r3, [r7, #20]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	7d7b      	ldrb	r3, [r7, #21]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8c:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8001a8e:	7dbb      	ldrb	r3, [r7, #22]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	7dbb      	ldrb	r3, [r7, #22]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aac:	701a      	strb	r2, [r3, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002cc 	.word	0x200002cc

08001abc <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b08f      	sub	sp, #60	; 0x3c
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71bb      	strb	r3, [r7, #6]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	717b      	strb	r3, [r7, #5]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	222c      	movs	r2, #44	; 0x2c
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fc92 	bl	800540c <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a40      	ldr	r2, [pc, #256]	; (8001bec <setAlarm_A+0x130>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	b258      	sxtb	r0, r3
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <setAlarm_A+0x130>)
 8001afc:	fba3 1302 	umull	r1, r3, r3, r2
 8001b00:	08d9      	lsrs	r1, r3, #3
 8001b02:	460b      	mov	r3, r1
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	4303      	orrs	r3, r0
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	4a33      	ldr	r2, [pc, #204]	; (8001bec <setAlarm_A+0x130>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	b258      	sxtb	r0, r3
 8001b2a:	79ba      	ldrb	r2, [r7, #6]
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <setAlarm_A+0x130>)
 8001b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b32:	08d9      	lsrs	r1, r3, #3
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	4303      	orrs	r3, r0
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8001b4a:	797b      	ldrb	r3, [r7, #5]
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <setAlarm_A+0x130>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	b258      	sxtb	r0, r3
 8001b5a:	797a      	ldrb	r2, [r7, #5]
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <setAlarm_A+0x130>)
 8001b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b62:	08d9      	lsrs	r1, r3, #3
 8001b64:	460b      	mov	r3, r1
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	4303      	orrs	r3, r0
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8001b7a:	793b      	ldrb	r3, [r7, #4]
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <setAlarm_A+0x130>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	08db      	lsrs	r3, r3, #3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	b258      	sxtb	r0, r3
 8001b8a:	793a      	ldrb	r2, [r7, #4]
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <setAlarm_A+0x130>)
 8001b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b92:	08d9      	lsrs	r1, r3, #3
 8001b94:	460b      	mov	r3, r1
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	4303      	orrs	r3, r0
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <setAlarm_A+0x134>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f107 010c 	add.w	r1, r7, #12
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fa8a 	bl	80040ec <HAL_RTC_SetAlarm_IT>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bde:	b672      	cpsid	i
}
 8001be0:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 8001be2:	e7fe      	b.n	8001be2 <setAlarm_A+0x126>
  }
}
 8001be4:	bf00      	nop
 8001be6:	373c      	adds	r7, #60	; 0x3c
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	cccccccd 	.word	0xcccccccd
 8001bf0:	200002cc 	.word	0x200002cc

08001bf4 <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <diableAlarm_A+0x24>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 fb7f 	bl	8004304 <HAL_RTC_DeactivateAlarm>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 8001c10:	e7fe      	b.n	8001c10 <diableAlarm_A+0x1c>
	}
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200002cc 	.word	0x200002cc

08001c1c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <LL_AHB2_GRP1_EnableClock>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b090      	sub	sp, #64	; 0x40
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	2238      	movs	r2, #56	; 0x38
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fba7 	bl	800540c <memset>
  if(hrtc->Instance==RTC)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_RTC_MspInit+0x54>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d115      	bne.n	8001cf4 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ccc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 fe99 	bl	8003a10 <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ce4:	f7ff fd79 	bl	80017da <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ce8:	f7ff ff98 	bl	8001c1c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cf0:	f7ff ffbc 	bl	8001c6c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3740      	adds	r7, #64	; 0x40
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40002800 	.word	0x40002800

08001d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b096      	sub	sp, #88	; 0x58
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2238      	movs	r2, #56	; 0x38
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fb73 	bl	800540c <memset>
  if(huart->Instance==USART2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_UART_MspInit+0x88>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d126      	bne.n	8001d7e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d34:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001d38:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 fe66 	bl	8003a10 <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d4a:	f7ff fd46 	bl	80017da <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d52:	f7ff ff8b 	bl	8001c6c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff ff70 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7a:	f000 faa5 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3758      	adds	r7, #88	; 0x58
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40004400 	.word	0x40004400

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <NMI_Handler+0x4>

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <MemManage_Handler+0x4>

08001d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler+0x4>

08001daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd2:	f000 f951 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <RTC_Alarm_IRQHandler+0x10>)
 8001de2:	f002 faeb 	bl	80043bc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000200 	.word	0x20000200

08001df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <_kill>:

int _kill(int pid, int sig)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e08:	f003 fac8 	bl	800539c <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2216      	movs	r2, #22
 8001e10:	601a      	str	r2, [r3, #0]
  return -1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_exit>:

void _exit (int status)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffe7 	bl	8001dfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e30:	e7fe      	b.n	8001e30 <_exit+0x12>

08001e32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e00a      	b.n	8001e5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e44:	f3af 8000 	nop.w
 8001e48:	4601      	mov	r1, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	60ba      	str	r2, [r7, #8]
 8001e50:	b2ca      	uxtb	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dbf0      	blt.n	8001e44 <_read+0x12>
  }

  return len;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e009      	b.n	8001e92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	60ba      	str	r2, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbf1      	blt.n	8001e7e <_write+0x12>
  }
  return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_close>:

int _close(int file)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <_isatty>:

int _isatty(int file)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f003 fa32 	bl	800539c <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20008000 	.word	0x20008000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	200002d0 	.word	0x200002d0
 8001f6c:	200002e8 	.word	0x200002e8

08001f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f74:	f7fe fad6 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <LoopForever+0xe>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	; (8001fbc <LoopForever+0x16>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f9e:	f003 fa03 	bl	80053a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fa2:	f7ff fa2b 	bl	80013fc <main>

08001fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa6:	e7fe      	b.n	8001fa6 <LoopForever>
  ldr   r0, =_estack
 8001fa8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fb4:	08006d6c 	.word	0x08006d6c
  ldr r2, =_sbss
 8001fb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fbc:	200002e8 	.word	0x200002e8

08001fc0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f000 f93a 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fd4:	f001 fb3e 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_Init+0x3c>)
 8001fdc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 f810 	bl	8002004 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	e001      	b.n	8001ff4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff0:	f7ff fe54 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_InitTick+0x6c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d024      	beq.n	8002062 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002018:	f001 fb1c 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_InitTick+0x6c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002028:	fbb3 f3f1 	udiv	r3, r3, r1
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f93c 	bl	80022ae <HAL_SYSTICK_Config>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	d809      	bhi.n	8002056 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002042:	2200      	movs	r2, #0
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204a:	f000 f908 	bl	800225e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_InitTick+0x70>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e007      	b.n	8002066 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e004      	b.n	8002066 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e001      	b.n	8002066 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x1c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x20>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_IncTick+0x20>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	2000000c 	.word	0x2000000c
 8002098:	200002d4 	.word	0x200002d4

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <HAL_GetTick+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	200002d4 	.word	0x200002d4

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4906      	ldr	r1, [pc, #24]	; (8002148 <__NVIC_EnableIRQ+0x34>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f7ff ff90 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff2d 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff44 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff92 	bl	80021a0 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff61 	bl	800214c <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff37 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa4 	bl	8002204 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	e140      	b.n	800255a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8132 	beq.w	8002554 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d005      	beq.n	8002308 <HAL_GPIO_Init+0x40>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d130      	bne.n	800236a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800233e:	2201      	movs	r2, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 0201 	and.w	r2, r3, #1
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b03      	cmp	r3, #3
 8002374:	d017      	beq.n	80023a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d123      	bne.n	80023fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	6939      	ldr	r1, [r7, #16]
 80023f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0203 	and.w	r2, r3, #3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 808c 	beq.w	8002554 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800243c:	4a4e      	ldr	r2, [pc, #312]	; (8002578 <HAL_GPIO_Init+0x2b0>)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002466:	d00d      	beq.n	8002484 <HAL_GPIO_Init+0x1bc>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a44      	ldr	r2, [pc, #272]	; (800257c <HAL_GPIO_Init+0x2b4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <HAL_GPIO_Init+0x1b8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_GPIO_Init+0x2b8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_GPIO_Init+0x1b4>
 8002478:	2302      	movs	r3, #2
 800247a:	e004      	b.n	8002486 <HAL_GPIO_Init+0x1be>
 800247c:	2307      	movs	r3, #7
 800247e:	e002      	b.n	8002486 <HAL_GPIO_Init+0x1be>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_GPIO_Init+0x1be>
 8002484:	2300      	movs	r3, #0
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	f002 0203 	and.w	r2, r2, #3
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	4093      	lsls	r3, r2
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002496:	4938      	ldr	r1, [pc, #224]	; (8002578 <HAL_GPIO_Init+0x2b0>)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c8:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024f2:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 80024fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024fe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800251e:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 8002528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_GPIO_Init+0x2bc>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f aeb7 	bne.w	80022d8 <HAL_GPIO_Init+0x10>
  }
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40010000 	.word	0x40010000
 800257c:	48000400 	.word	0x48000400
 8002580:	48000800 	.word	0x48000800
 8002584:	58000800 	.word	0x58000800

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	58000400 	.word	0x58000400

080025d4 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <LL_PWR_EnableBootC2+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a03      	ldr	r2, [pc, #12]	; (80025ec <LL_PWR_EnableBootC2+0x18>)
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	58000400 	.word	0x58000400

080025f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_PWREx_GetVoltageRange+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	58000400 	.word	0x58000400

08002608 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002610:	f7ff ffe0 	bl	80025d4 <LL_PWR_EnableBootC2>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <LL_PWR_IsEnabledBkUpAccess>:
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262c:	d101      	bne.n	8002632 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	58000400 	.word	0x58000400

08002640 <LL_RCC_HSE_EnableTcxo>:
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <LL_RCC_HSE_DisableTcxo>:
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800268a:	d101      	bne.n	8002690 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <LL_RCC_HSE_Enable>:
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <LL_RCC_HSE_Disable>:
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <LL_RCC_HSE_IsReady>:
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e4:	d101      	bne.n	80026ea <LL_RCC_HSE_IsReady+0x18>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <LL_RCC_HSE_IsReady+0x1a>
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <LL_RCC_HSI_Enable>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <LL_RCC_HSI_Disable>:
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <LL_RCC_HSI_IsReady>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	d101      	bne.n	8002744 <LL_RCC_HSI_IsReady+0x18>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <LL_RCC_HSI_IsReady+0x1a>
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <LL_RCC_HSI_SetCalibTrimming>:
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	061b      	lsls	r3, r3, #24
 8002764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <LL_RCC_LSE_IsReady>:
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d101      	bne.n	800278e <LL_RCC_LSE_IsReady+0x18>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_RCC_LSE_IsReady+0x1a>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <LL_RCC_LSI_Enable>:
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_LSI_Disable>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <LL_RCC_LSI_IsReady>:
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d101      	bne.n	80027f0 <LL_RCC_LSI_IsReady+0x18>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_RCC_LSI_IsReady+0x1a>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_MSI_Enable>:
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <LL_RCC_MSI_Disable>:
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <LL_RCC_MSI_IsReady>:
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b02      	cmp	r3, #2
 8002842:	d101      	bne.n	8002848 <LL_RCC_MSI_IsReady+0x16>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_RCC_MSI_IsReady+0x18>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b08      	cmp	r3, #8
 8002862:	d101      	bne.n	8002868 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <LL_RCC_MSI_GetRange>:
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002894:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_SetSysClkSource>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_GetSysClkSource>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <LL_RCC_SetAHBPrescaler>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <LL_C2_RCC_SetAHBPrescaler>:
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800293a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <LL_RCC_SetAHB3Prescaler>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002960:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002964:	f023 020f 	bic.w	r2, r3, #15
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <LL_RCC_SetAPB1Prescaler>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_SetAPB2Prescaler>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <LL_RCC_GetAHBPrescaler>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_GetAHB3Prescaler>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_GetAPB1Prescaler>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_GetAPB2Prescaler>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a72:	d101      	bne.n	8002a78 <LL_RCC_PLL_IsReady+0x18>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_RCC_PLL_IsReady+0x1a>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aee:	d101      	bne.n	8002af4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b12:	d101      	bne.n	8002b18 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d101      	bne.n	8002b3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b58:	d101      	bne.n	8002b5e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b7a:	d101      	bne.n	8002b80 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e36f      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	f7ff fea6 	bl	80028ee <LL_RCC_GetSysClkSource>
 8002ba2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba4:	f7ff ff8f 	bl	8002ac6 <LL_RCC_PLL_GetMainSource>
 8002ba8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80c4 	beq.w	8002d40 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_RCC_OscConfig+0x3e>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d176      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d173      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e353      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x68>
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf2:	e006      	b.n	8002c02 <HAL_RCC_OscConfig+0x76>
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d222      	bcs.n	8002c4c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fd5a 	bl	80036c4 <RCC_SetFlashLatencyFromMSIRange>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e331      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c24:	f043 0308 	orr.w	r3, r3, #8
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fe2b 	bl	80028a0 <LL_RCC_MSI_SetCalibTrimming>
 8002c4a:	e021      	b.n	8002c90 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fe12 	bl	80028a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fd1f 	bl	80036c4 <RCC_SetFlashLatencyFromMSIRange>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e2f6      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c90:	f000 fce0 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4aa7      	ldr	r2, [pc, #668]	; (8002f34 <HAL_RCC_OscConfig+0x3a8>)
 8002c98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002c9a:	4ba7      	ldr	r3, [pc, #668]	; (8002f38 <HAL_RCC_OscConfig+0x3ac>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f9b0 	bl	8002004 <HAL_InitTick>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d047      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	e2e5      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d02c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cba:	f7ff fd9e 	bl	80027fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cbe:	f7ff f9ed 	bl	800209c <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc6:	f7ff f9e9 	bl	800209c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e2d2      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cd8:	f7ff fdab 	bl	8002832 <LL_RCC_MSI_IsReady>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f1      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fdc7 	bl	80028a0 <LL_RCC_MSI_SetCalibTrimming>
 8002d12:	e015      	b.n	8002d40 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d14:	f7ff fd7f 	bl	8002816 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d18:	f7ff f9c0 	bl	800209c <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d20:	f7ff f9bc 	bl	800209c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e2a5      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d32:	f7ff fd7e 	bl	8002832 <LL_RCC_MSI_IsReady>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f1      	bne.n	8002d20 <HAL_RCC_OscConfig+0x194>
 8002d3c:	e000      	b.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d3e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d058      	beq.n	8002dfe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d108      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d105      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d14b      	bne.n	8002dfe <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e289      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x204>
 8002d8a:	f7ff fc86 	bl	800269a <LL_RCC_HSE_Enable>
 8002d8e:	e00d      	b.n	8002dac <HAL_RCC_OscConfig+0x220>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002d98:	d104      	bne.n	8002da4 <HAL_RCC_OscConfig+0x218>
 8002d9a:	f7ff fc51 	bl	8002640 <LL_RCC_HSE_EnableTcxo>
 8002d9e:	f7ff fc7c 	bl	800269a <LL_RCC_HSE_Enable>
 8002da2:	e003      	b.n	8002dac <HAL_RCC_OscConfig+0x220>
 8002da4:	f7ff fc87 	bl	80026b6 <LL_RCC_HSE_Disable>
 8002da8:	f7ff fc58 	bl	800265c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7ff f972 	bl	800209c <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7ff f96e 	bl	800209c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e257      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dce:	f7ff fc80 	bl	80026d2 <LL_RCC_HSE_IsReady>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f1      	beq.n	8002dbc <HAL_RCC_OscConfig+0x230>
 8002dd8:	e011      	b.n	8002dfe <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7ff f95f 	bl	800209c <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de2:	f7ff f95b 	bl	800209c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e244      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002df4:	f7ff fc6d 	bl	80026d2 <LL_RCC_HSE_IsReady>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f1      	bne.n	8002de2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d046      	beq.n	8002e98 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x290>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d10e      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e22a      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fc8e 	bl	800274e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e32:	e031      	b.n	8002e98 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d019      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	f7ff fc5a 	bl	80026f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff f92c 	bl	800209c <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e48:	f7ff f928 	bl	800209c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e211      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e5a:	f7ff fc67 	bl	800272c <LL_RCC_HSI_IsReady>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f1      	beq.n	8002e48 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fc70 	bl	800274e <LL_RCC_HSI_SetCalibTrimming>
 8002e6e:	e013      	b.n	8002e98 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e70:	f7ff fc4e 	bl	8002710 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff f912 	bl	800209c <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7ff f90e 	bl	800209c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1f7      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e8e:	f7ff fc4d 	bl	800272c <LL_RCC_HSI_IsReady>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f1      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d06e      	beq.n	8002f82 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d056      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d031      	beq.n	8002f28 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e1d0      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d013      	beq.n	8002f0e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ee6:	f7ff fc67 	bl	80027b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eea:	f7ff f8d7 	bl	800209c <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7ff f8d3 	bl	800209c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b11      	cmp	r3, #17
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1bc      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f04:	f7ff fc68 	bl	80027d8 <LL_RCC_LSI_IsReady>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f1      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f28:	f7ff fc36 	bl	8002798 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7ff f8b6 	bl	800209c <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f32:	e00c      	b.n	8002f4e <HAL_RCC_OscConfig+0x3c2>
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7ff f8ae 	bl	800209c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b11      	cmp	r3, #17
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e197      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f4e:	f7ff fc43 	bl	80027d8 <LL_RCC_LSI_IsReady>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f1      	beq.n	8002f3c <HAL_RCC_OscConfig+0x3b0>
 8002f58:	e013      	b.n	8002f82 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5a:	f7ff fc2d 	bl	80027b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f89d 	bl	800209c <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f66:	f7ff f899 	bl	800209c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b11      	cmp	r3, #17
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e182      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f78:	f7ff fc2e 	bl	80027d8 <LL_RCC_LSI_IsReady>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f1      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80d8 	beq.w	8003140 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f90:	f7ff fb44 	bl	800261c <LL_PWR_IsEnabledBkUpAccess>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d113      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f9a:	f7ff fb0d 	bl	80025b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff f87d 	bl	800209c <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7ff f879 	bl	800209c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e162      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fb8:	f7ff fb30 	bl	800261c <LL_PWR_IsEnabledBkUpAccess>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f1      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d07b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b85      	cmp	r3, #133	; 0x85
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7ff f855 	bl	800209c <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7ff f847 	bl	800209c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e12e      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003020:	f7ff fba9 	bl	8002776 <LL_RCC_LSE_IsReady>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ef      	beq.n	800300a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b81      	cmp	r3, #129	; 0x81
 8003030:	d003      	beq.n	800303a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b85      	cmp	r3, #133	; 0x85
 8003038:	d121      	bne.n	800307e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7ff f82f 	bl	800209c <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800304c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7ff f821 	bl	800209c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e108      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ec      	beq.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800307c:	e060      	b.n	8003140 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7ff f80d 	bl	800209c <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fe ffff 	bl	800209c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0e6      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ec      	bne.n	800309a <HAL_RCC_OscConfig+0x50e>
 80030c0:	e03e      	b.n	8003140 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe ffeb 	bl	800209c <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe ffdd 	bl	800209c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0c4      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ec      	bne.n	80030de <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fe ffca 	bl	800209c <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe ffbc 	bl	800209c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0a3      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003136:	f7ff fb1e 	bl	8002776 <LL_RCC_LSE_IsReady>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ef      	bne.n	8003120 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8099 	beq.w	800327c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d06c      	beq.n	800322a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2b02      	cmp	r3, #2
 8003156:	d14b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	f7ff fc74 	bl	8002a44 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe ff9e 	bl	800209c <HAL_GetTick>
 8003160:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe ff9a 	bl	800209c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b0a      	cmp	r3, #10
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e083      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003176:	f7ff fc73 	bl	8002a60 <LL_RCC_PLL_IsReady>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f1      	bne.n	8003164 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	4b40      	ldr	r3, [pc, #256]	; (8003288 <HAL_RCC_OscConfig+0x6fc>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003192:	4311      	orrs	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003198:	0212      	lsls	r2, r2, #8
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031a0:	4311      	orrs	r1, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031ac:	430a      	orrs	r2, r1
 80031ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b6:	f7ff fc37 	bl	8002a28 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe ff67 	bl	800209c <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe ff63 	bl	800209c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b0a      	cmp	r3, #10
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e04c      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80031e4:	f7ff fc3c 	bl	8002a60 <LL_RCC_PLL_IsReady>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f1      	beq.n	80031d2 <HAL_RCC_OscConfig+0x646>
 80031ee:	e045      	b.n	800327c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	f7ff fc28 	bl	8002a44 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe ff52 	bl	800209c <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe ff4e 	bl	800209c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b0a      	cmp	r3, #10
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e037      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800320e:	f7ff fc27 	bl	8002a60 <LL_RCC_PLL_IsReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f1      	bne.n	80031fc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_OscConfig+0x700>)
 8003224:	4013      	ands	r3, r2
 8003226:	60cb      	str	r3, [r1, #12]
 8003228:	e028      	b.n	800327c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e023      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	429a      	cmp	r2, r3
 800324a:	d115      	bne.n	8003278 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	429a      	cmp	r2, r3
 8003258:	d10e      	bne.n	8003278 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	429a      	cmp	r2, r3
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	11c1808c 	.word	0x11c1808c
 800328c:	eefefffc 	.word	0xeefefffc

08003290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e12c      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b98      	ldr	r3, [pc, #608]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d91b      	bls.n	80032ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b95      	ldr	r3, [pc, #596]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4993      	ldr	r1, [pc, #588]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c2:	f7fe feeb 	bl	800209c <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032ca:	f7fe fee7 	bl	800209c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e110      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032dc:	4b8a      	ldr	r3, [pc, #552]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1ef      	bne.n	80032ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fb02 	bl	8002904 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003300:	f7fe fecc 	bl	800209c <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003308:	f7fe fec8 	bl	800209c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0f1      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800331a:	f7ff fbdf 	bl	8002adc <LL_RCC_IsActiveFlag_HPRE>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f1      	beq.n	8003308 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d016      	beq.n	800335e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff faf8 	bl	800292a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800333a:	f7fe feaf 	bl	800209c <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003342:	f7fe feab 	bl	800209c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0d4      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003354:	f7ff fbd3 	bl	8002afe <LL_RCC_IsActiveFlag_C2HPRE>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f1      	beq.n	8003342 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff faf0 	bl	8002954 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003374:	f7fe fe92 	bl	800209c <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800337c:	f7fe fe8e 	bl	800209c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0b7      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800338e:	f7ff fbc8 	bl	8002b22 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f1      	beq.n	800337c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d016      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fae9 	bl	8002980 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033ae:	f7fe fe75 	bl	800209c <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033b6:	f7fe fe71 	bl	800209c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e09a      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033c8:	f7ff fbbd 	bl	8002b46 <LL_RCC_IsActiveFlag_PPRE1>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f1      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d017      	beq.n	800340e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fade 	bl	80029a6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033ea:	f7fe fe57 	bl	800209c <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033f2:	f7fe fe53 	bl	800209c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e07c      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003404:	f7ff fbb0 	bl	8002b68 <LL_RCC_IsActiveFlag_PPRE2>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f1      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d043      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d106      	bne.n	8003430 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003422:	f7ff f956 	bl	80026d2 <LL_RCC_HSE_IsReady>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11e      	bne.n	800346a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e066      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d106      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003438:	f7ff fb12 	bl	8002a60 <LL_RCC_PLL_IsReady>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d113      	bne.n	800346a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e05b      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800344e:	f7ff f9f0 	bl	8002832 <LL_RCC_MSI_IsReady>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d108      	bne.n	800346a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e050      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800345c:	f7ff f966 	bl	800272c <LL_RCC_HSI_IsReady>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e049      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fa2a 	bl	80028c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fe fe12 	bl	800209c <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fe fe0e 	bl	800209c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e035      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	f7ff fa2c 	bl	80028ee <LL_RCC_GetSysClkSource>
 8003496:	4602      	mov	r2, r0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	429a      	cmp	r2, r3
 80034a0:	d1ec      	bne.n	800347c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d21b      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b0:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 0207 	bic.w	r2, r3, #7
 80034b8:	4913      	ldr	r1, [pc, #76]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c0:	f7fe fdec 	bl	800209c <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	e008      	b.n	80034da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034c8:	f7fe fde8 	bl	800209c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e011      	b.n	80034fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_ClockConfig+0x278>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1ef      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034e8:	f000 f8b4 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_RCC_ClockConfig+0x27c>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_RCC_ClockConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fd84 	bl	8002004 <HAL_InitTick>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	58004000 	.word	0x58004000
 800350c:	20000000 	.word	0x20000000
 8003510:	20000008 	.word	0x20000008

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	f7ff f9e4 	bl	80028ee <LL_RCC_GetSysClkSource>
 8003526:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003528:	f7ff facd 	bl	8002ac6 <LL_RCC_PLL_GetMainSource>
 800352c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x2c>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d139      	bne.n	80035ae <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d136      	bne.n	80035ae <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003540:	f7ff f987 	bl	8002852 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d115      	bne.n	8003576 <HAL_RCC_GetSysClockFreq+0x62>
 800354a:	f7ff f982 	bl	8002852 <LL_RCC_MSI_IsEnabledRangeSelect>
 800354e:	4603      	mov	r3, r0
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <HAL_RCC_GetSysClockFreq+0x4e>
 8003554:	f7ff f98d 	bl	8002872 <LL_RCC_MSI_GetRange>
 8003558:	4603      	mov	r3, r0
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	e005      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x5a>
 8003562:	f7ff f991 	bl	8002888 <LL_RCC_MSI_GetRangeAfterStandby>
 8003566:	4603      	mov	r3, r0
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	4a36      	ldr	r2, [pc, #216]	; (8003648 <HAL_RCC_GetSysClockFreq+0x134>)
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	e014      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x8c>
 8003576:	f7ff f96c 	bl	8002852 <LL_RCC_MSI_IsEnabledRangeSelect>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x7a>
 8003580:	f7ff f977 	bl	8002872 <LL_RCC_MSI_GetRange>
 8003584:	4603      	mov	r3, r0
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	e005      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x86>
 800358e:	f7ff f97b 	bl	8002888 <LL_RCC_MSI_GetRangeAfterStandby>
 8003592:	4603      	mov	r3, r0
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	4a2b      	ldr	r2, [pc, #172]	; (8003648 <HAL_RCC_GetSysClockFreq+0x134>)
 800359c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d115      	bne.n	80035d4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035ac:	e012      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d102      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_GetSysClockFreq+0x138>)
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e00c      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d109      	bne.n	80035d4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035c0:	f7ff f85a 	bl	8002678 <LL_RCC_HSE_IsEnabledDiv2>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d102      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_RCC_GetSysClockFreq+0x138>)
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e001      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <HAL_RCC_GetSysClockFreq+0x13c>)
 80035d2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d4:	f7ff f98b 	bl	80028ee <LL_RCC_GetSysClkSource>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d12f      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80035de:	f7ff fa72 	bl	8002ac6 <LL_RCC_PLL_GetMainSource>
 80035e2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d003      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0xde>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d003      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80035f0:	e00d      	b.n	800360e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_RCC_GetSysClockFreq+0x138>)
 80035f4:	60fb      	str	r3, [r7, #12]
        break;
 80035f6:	e00d      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035f8:	f7ff f83e 	bl	8002678 <LL_RCC_HSE_IsEnabledDiv2>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_GetSysClockFreq+0x138>)
 8003604:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003606:	e005      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_RCC_GetSysClockFreq+0x13c>)
 800360a:	60fb      	str	r3, [r7, #12]
        break;
 800360c:	e002      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	60fb      	str	r3, [r7, #12]
        break;
 8003612:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003614:	f7ff fa35 	bl	8002a82 <LL_RCC_PLL_GetN>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	fb03 f402 	mul.w	r4, r3, r2
 8003620:	f7ff fa46 	bl	8002ab0 <LL_RCC_PLL_GetDivider>
 8003624:	4603      	mov	r3, r0
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	3301      	adds	r3, #1
 800362a:	fbb4 f4f3 	udiv	r4, r4, r3
 800362e:	f7ff fa34 	bl	8002a9a <LL_RCC_PLL_GetR>
 8003632:	4603      	mov	r3, r0
 8003634:	0f5b      	lsrs	r3, r3, #29
 8003636:	3301      	adds	r3, #1
 8003638:	fbb4 f3f3 	udiv	r3, r4, r3
 800363c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800363e:	697b      	ldr	r3, [r7, #20]
}
 8003640:	4618      	mov	r0, r3
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd90      	pop	{r4, r7, pc}
 8003648:	08006aac 	.word	0x08006aac
 800364c:	00f42400 	.word	0x00f42400
 8003650:	01e84800 	.word	0x01e84800

08003654 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b598      	push	{r3, r4, r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003658:	f7ff ff5c 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 800365c:	4604      	mov	r4, r0
 800365e:	f7ff f9b5 	bl	80029cc <LL_RCC_GetAHBPrescaler>
 8003662:	4603      	mov	r3, r0
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4a03      	ldr	r2, [pc, #12]	; (8003678 <HAL_RCC_GetHCLKFreq+0x24>)
 800366c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003670:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd98      	pop	{r3, r4, r7, pc}
 8003678:	08006a4c 	.word	0x08006a4c

0800367c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b598      	push	{r3, r4, r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003680:	f7ff ffe8 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003684:	4604      	mov	r4, r0
 8003686:	f7ff f9b9 	bl	80029fc <LL_RCC_GetAPB1Prescaler>
 800368a:	4603      	mov	r3, r0
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	4a03      	ldr	r2, [pc, #12]	; (800369c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd98      	pop	{r3, r4, r7, pc}
 800369c:	08006a8c 	.word	0x08006a8c

080036a0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a0:	b598      	push	{r3, r4, r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80036a4:	f7ff ffd6 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 80036a8:	4604      	mov	r4, r0
 80036aa:	f7ff f9b2 	bl	8002a12 <LL_RCC_GetAPB2Prescaler>
 80036ae:	4603      	mov	r3, r0
 80036b0:	0adb      	lsrs	r3, r3, #11
 80036b2:	4a03      	ldr	r2, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd98      	pop	{r3, r4, r7, pc}
 80036c0:	08006a8c 	.word	0x08006a8c

080036c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	4a10      	ldr	r2, [pc, #64]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80036dc:	f7ff f981 	bl	80029e2 <LL_RCC_GetAHB3Prescaler>
 80036e0:	4603      	mov	r3, r0
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	4a0c      	ldr	r2, [pc, #48]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4a09      	ldr	r2, [pc, #36]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9c      	lsrs	r4, r3, #18
 8003700:	f7fe ff76 	bl	80025f0 <HAL_PWREx_GetVoltageRange>
 8003704:	4603      	mov	r3, r0
 8003706:	4619      	mov	r1, r3
 8003708:	4620      	mov	r0, r4
 800370a:	f000 f80b 	bl	8003724 <RCC_SetFlashLatency>
 800370e:	4603      	mov	r3, r0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	08006aac 	.word	0x08006aac
 800371c:	08006a4c 	.word	0x08006a4c
 8003720:	431bde83 	.word	0x431bde83

08003724 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	; 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800372e:	4a3a      	ldr	r2, [pc, #232]	; (8003818 <RCC_SetFlashLatency+0xf4>)
 8003730:	f107 0320 	add.w	r3, r7, #32
 8003734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003738:	6018      	str	r0, [r3, #0]
 800373a:	3304      	adds	r3, #4
 800373c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800373e:	4a37      	ldr	r2, [pc, #220]	; (800381c <RCC_SetFlashLatency+0xf8>)
 8003740:	f107 0318 	add.w	r3, r7, #24
 8003744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003748:	6018      	str	r0, [r3, #0]
 800374a:	3304      	adds	r3, #4
 800374c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800374e:	4a34      	ldr	r2, [pc, #208]	; (8003820 <RCC_SetFlashLatency+0xfc>)
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	ca07      	ldmia	r2, {r0, r1, r2}
 8003756:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800375a:	2300      	movs	r3, #0
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003764:	d11b      	bne.n	800379e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003766:	2300      	movs	r3, #0
 8003768:	633b      	str	r3, [r7, #48]	; 0x30
 800376a:	e014      	b.n	8003796 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	3338      	adds	r3, #56	; 0x38
 8003772:	443b      	add	r3, r7
 8003774:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4293      	cmp	r3, r2
 800377e:	d807      	bhi.n	8003790 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	3338      	adds	r3, #56	; 0x38
 8003786:	443b      	add	r3, r7
 8003788:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800378e:	e021      	b.n	80037d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	3301      	adds	r3, #1
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2b02      	cmp	r3, #2
 800379a:	d9e7      	bls.n	800376c <RCC_SetFlashLatency+0x48>
 800379c:	e01a      	b.n	80037d4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800379e:	2300      	movs	r3, #0
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a2:	e014      	b.n	80037ce <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	3338      	adds	r3, #56	; 0x38
 80037aa:	443b      	add	r3, r7
 80037ac:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3338      	adds	r3, #56	; 0x38
 80037be:	443b      	add	r3, r7
 80037c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037c6:	e005      	b.n	80037d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	3301      	adds	r3, #1
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d9e7      	bls.n	80037a4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <RCC_SetFlashLatency+0x100>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 0207 	bic.w	r2, r3, #7
 80037dc:	4911      	ldr	r1, [pc, #68]	; (8003824 <RCC_SetFlashLatency+0x100>)
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037e4:	f7fe fc5a 	bl	800209c <HAL_GetTick>
 80037e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037ea:	e008      	b.n	80037fe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037ec:	f7fe fc56 	bl	800209c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e007      	b.n	800380e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <RCC_SetFlashLatency+0x100>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003808:	429a      	cmp	r2, r3
 800380a:	d1ef      	bne.n	80037ec <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3738      	adds	r7, #56	; 0x38
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	08006a30 	.word	0x08006a30
 800381c:	08006a38 	.word	0x08006a38
 8003820:	08006a40 	.word	0x08006a40
 8003824:	58004000 	.word	0x58004000

08003828 <LL_RCC_LSE_IsReady>:
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b02      	cmp	r3, #2
 800383a:	d101      	bne.n	8003840 <LL_RCC_LSE_IsReady+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_RCC_LSE_IsReady+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <LL_RCC_SetUSARTClockSource>:
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	43db      	mvns	r3, r3
 8003860:	401a      	ands	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <LL_RCC_SetI2SClockSource>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <LL_RCC_SetLPUARTClockSource>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80038ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <LL_RCC_SetI2CClockSource>:
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80038e6:	43db      	mvns	r3, r3
 80038e8:	401a      	ands	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80038f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <LL_RCC_SetLPTIMClockSource>:
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <LL_RCC_SetRNGClockSource>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800394c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <LL_RCC_SetADCClockSource>:
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <LL_RCC_SetRTCClockSource>:
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_GetRTCClockSource>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <LL_RCC_ForceBackupDomainReset>:
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a20:	2300      	movs	r3, #0
 8003a22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d058      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003a30:	f7fe fdc2 	bl	80025b8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a34:	f7fe fb32 	bl	800209c <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a3a:	e009      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fe fb2e 	bl	800209c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a4e:	e006      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a50:	4b7b      	ldr	r3, [pc, #492]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d13c      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003a64:	f7ff ffa7 	bl	80039b6 <LL_RCC_GetRTCClockSource>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d00f      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a80:	f7ff ffa5 	bl	80039ce <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a84:	f7ff ffb3 	bl	80039ee <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d014      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fafe 	bl	800209c <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003aa2:	e00b      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fafa 	bl	800209c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d902      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	74fb      	strb	r3, [r7, #19]
            break;
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003abc:	f7ff feb4 	bl	8003828 <LL_RCC_LSE_IsReady>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d1ee      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff5b 	bl	800398c <LL_RCC_SetRTCClockSource>
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	74bb      	strb	r3, [r7, #18]
 8003adc:	e001      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	7cfb      	ldrb	r3, [r7, #19]
 8003ae0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fea9 	bl	800384a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fe9e 	bl	800384a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fec0 	bl	80038a4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fee6 	bl	8003906 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff fedb 	bl	8003906 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fed0 	bl	8003906 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fea9 	bl	80038ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fe9e 	bl	80038ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fe93 	bl	80038ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d011      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe5e 	bl	800387a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d010      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fea5 	bl	8003938 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c04:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d011      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fea3 	bl	8003962 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c24:	d107      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003c36:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	58000400 	.word	0x58000400

08003c44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d071      	beq.n	8003d3a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fe f81c 	bl	8001ca8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c78:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d051      	beq.n	8003d28 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c84:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003c86:	22ca      	movs	r2, #202	; 0xca
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003c8c:	2253      	movs	r2, #83	; 0x53
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fbe3 	bl	800445c <RTC_EnterInitMode>
 8003c96:	4603      	mov	r3, r0
 8003c98:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13f      	bne.n	8003d20 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003ca0:	4b28      	ldr	r3, [pc, #160]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003ca6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cae:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003cb2:	699a      	ldr	r2, [r3, #24]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4319      	orrs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	491f      	ldr	r1, [pc, #124]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	041b      	lsls	r3, r3, #16
 8003cd4:	491b      	ldr	r1, [pc, #108]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	430b      	orrs	r3, r1
 8003cec:	4915      	ldr	r1, [pc, #84]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fbe6 	bl	80044c4 <RTC_ExitInitMode>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a19      	ldr	r1, [r3, #32]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	4319      	orrs	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_RTC_Init+0x100>)
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24
 8003d26:	e001      	b.n	8003d2c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40002800 	.word	0x40002800

08003d48 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_RTC_SetTime+0x1a>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e088      	b.n	8003e74 <HAL_RTC_SetTime+0x12c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d72:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003d74:	22ca      	movs	r2, #202	; 0xca
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
 8003d78:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003d7a:	2253      	movs	r2, #83	; 0x53
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fb6c 	bl	800445c <RTC_EnterInitMode>
 8003d84:	4603      	mov	r3, r0
 8003d86:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d15e      	bne.n	8003e4c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9a:	d057      	beq.n	8003e4c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d125      	bne.n	8003dee <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2200      	movs	r2, #0
 8003db2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fbc1 	bl	8004540 <RTC_ByteToBcd2>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fbba 	bl	8004540 <RTC_ByteToBcd2>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003dd0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	789b      	ldrb	r3, [r3, #2]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fbb2 	bl	8004540 <RTC_ByteToBcd2>
 8003ddc:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003dde:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	78db      	ldrb	r3, [r3, #3]
 8003de6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e017      	b.n	8003e1e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e0c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e12:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	78db      	ldrb	r3, [r3, #3]
 8003e18:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003e26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e2a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e36:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003e38:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	68d9      	ldr	r1, [r3, #12]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	490d      	ldr	r1, [pc, #52]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fb39 	bl	80044c4 <RTC_ExitInitMode>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RTC_SetTime+0x134>)
 8003e58:	22ff      	movs	r2, #255	; 0xff
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd90      	pop	{r4, r7, pc}
 8003e7c:	40002800 	.word	0x40002800

08003e80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003e8c:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <HAL_RTC_GetTime+0xc0>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003e94:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <HAL_RTC_GetTime+0xc0>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea0:	d049      	beq.n	8003f36 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003ea2:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RTC_GetTime+0xc0>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003eae:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RTC_GetTime+0xc0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003eb6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003eba:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	0d9b      	lsrs	r3, r3, #22
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11a      	bne.n	8003f36 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fb3a 	bl	800457e <RTC_Bcd2ToByte>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb31 	bl	800457e <RTC_Bcd2ToByte>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	789b      	ldrb	r3, [r3, #2]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb28 	bl	800457e <RTC_Bcd2ToByte>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40002800 	.word	0x40002800

08003f44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_RTC_SetDate+0x1a>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e071      	b.n	8004042 <HAL_RTC_SetDate+0xfe>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10e      	bne.n	8003f92 <HAL_RTC_SetDate+0x4e>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	785b      	ldrb	r3, [r3, #1]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	330a      	adds	r3, #10
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11c      	bne.n	8003fd2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	78db      	ldrb	r3, [r3, #3]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 facf 	bl	8004540 <RTC_ByteToBcd2>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	785b      	ldrb	r3, [r3, #1]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fac8 	bl	8004540 <RTC_ByteToBcd2>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003fb4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	789b      	ldrb	r3, [r3, #2]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fac0 	bl	8004540 <RTC_ByteToBcd2>
 8003fc0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003fc2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e00e      	b.n	8003ff0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	78db      	ldrb	r3, [r3, #3]
 8003fd6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003fde:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003fe4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <HAL_RTC_SetDate+0x108>)
 8003ff2:	22ca      	movs	r2, #202	; 0xca
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_RTC_SetDate+0x108>)
 8003ff8:	2253      	movs	r2, #83	; 0x53
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa2d 	bl	800445c <RTC_EnterInitMode>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800400c:	4a0f      	ldr	r2, [pc, #60]	; (800404c <HAL_RTC_SetDate+0x108>)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004014:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004018:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa52 	bl	80044c4 <RTC_ExitInitMode>
 8004020:	4603      	mov	r3, r0
 8004022:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RTC_SetDate+0x108>)
 8004026:	22ff      	movs	r2, #255	; 0xff
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
}
 8004042:	4618      	mov	r0, r3
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd90      	pop	{r4, r7, pc}
 800404a:	bf00      	nop
 800404c:	40002800 	.word	0x40002800

08004050 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800405c:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <HAL_RTC_GetDate+0x98>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004064:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004068:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	0b5b      	lsrs	r3, r3, #13
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11a      	bne.n	80040de <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	78db      	ldrb	r3, [r3, #3]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa66 	bl	800457e <RTC_Bcd2ToByte>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fa5d 	bl	800457e <RTC_Bcd2ToByte>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	789b      	ldrb	r3, [r3, #2]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fa54 	bl	800457e <RTC_Bcd2ToByte>
 80040d6:	4603      	mov	r3, r0
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40002800 	.word	0x40002800

080040ec <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_RTC_SetAlarm_IT+0x1e>
 8004106:	2302      	movs	r3, #2
 8004108:	e0f3      	b.n	80042f2 <HAL_RTC_SetAlarm_IT+0x206>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800411a:	4b78      	ldr	r3, [pc, #480]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004122:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412a:	d06a      	beq.n	8004202 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d13a      	bne.n	80041a8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004132:	4b72      	ldr	r3, [pc, #456]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2200      	movs	r2, #0
 8004142:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f9f5 	bl	8004540 <RTC_ByteToBcd2>
 8004156:	4603      	mov	r3, r0
 8004158:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f9ee 	bl	8004540 <RTC_ByteToBcd2>
 8004164:	4603      	mov	r3, r0
 8004166:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004168:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	789b      	ldrb	r3, [r3, #2]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f9e6 	bl	8004540 <RTC_ByteToBcd2>
 8004174:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004176:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	78db      	ldrb	r3, [r3, #3]
 800417e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004180:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f9d8 	bl	8004540 <RTC_ByteToBcd2>
 8004190:	4603      	mov	r3, r0
 8004192:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004194:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800419c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e02c      	b.n	8004202 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80041b0:	d00d      	beq.n	80041ce <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041ba:	d008      	beq.n	80041ce <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80041bc:	4b4f      	ldr	r3, [pc, #316]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041da:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041e0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	78db      	ldrb	r3, [r3, #3]
 80041e6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80041e8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041f0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80041f2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80041f8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004202:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004204:	22ca      	movs	r2, #202	; 0xca
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
 8004208:	4b3c      	ldr	r3, [pc, #240]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800420a:	2253      	movs	r2, #83	; 0x53
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d12c      	bne.n	8004272 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004218:	4b38      	ldr	r3, [pc, #224]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	4a37      	ldr	r2, [pc, #220]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800421e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004222:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004224:	4b35      	ldr	r3, [pc, #212]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004226:	2201      	movs	r2, #1
 8004228:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004230:	d107      	bne.n	8004242 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4930      	ldr	r1, [pc, #192]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800423c:	4313      	orrs	r3, r2
 800423e:	644b      	str	r3, [r1, #68]	; 0x44
 8004240:	e006      	b.n	8004250 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004242:	4a2e      	ldr	r2, [pc, #184]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004248:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004250:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	f043 0201 	orr.w	r2, r3, #1
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4a24      	ldr	r2, [pc, #144]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800426a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800426e:	6193      	str	r3, [r2, #24]
 8004270:	e02b      	b.n	80042ca <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	4a21      	ldr	r2, [pc, #132]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004278:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800427c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800427e:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004280:	2202      	movs	r2, #2
 8004282:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d107      	bne.n	800429c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	4919      	ldr	r1, [pc, #100]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 8004296:	4313      	orrs	r3, r2
 8004298:	64cb      	str	r3, [r1, #76]	; 0x4c
 800429a:	e006      	b.n	80042aa <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800429c:	4a17      	ldr	r2, [pc, #92]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80042a2:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80042aa:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f043 0202 	orr.w	r2, r3, #2
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 80042c4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80042c8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <HAL_RTC_SetAlarm_IT+0x214>)
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d0:	4a0b      	ldr	r2, [pc, #44]	; (8004300 <HAL_RTC_SetAlarm_IT+0x214>)
 80042d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <HAL_RTC_SetAlarm_IT+0x210>)
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40002800 	.word	0x40002800
 8004300:	58000800 	.word	0x58000800

08004304 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_RTC_DeactivateAlarm+0x18>
 8004318:	2302      	movs	r3, #2
 800431a:	e048      	b.n	80043ae <HAL_RTC_DeactivateAlarm+0xaa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800432c:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800432e:	22ca      	movs	r2, #202	; 0xca
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004334:	2253      	movs	r2, #83	; 0x53
 8004336:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433e:	d115      	bne.n	800436c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004346:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800434a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004356:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	f023 0201 	bic.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004366:	2201      	movs	r2, #1
 8004368:	65da      	str	r2, [r3, #92]	; 0x5c
 800436a:	e014      	b.n	8004396 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004372:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004376:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800437e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004382:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	f023 0202 	bic.w	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004392:	2202      	movs	r2, #2
 8004394:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004398:	22ff      	movs	r2, #255	; 0xff
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	40002800 	.word	0x40002800

080043bc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_RTC_AlarmIRQHandler+0x50>)
 80043c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	4013      	ands	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <HAL_RTC_AlarmIRQHandler+0x50>)
 80043dc:	2201      	movs	r2, #1
 80043de:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fd f800 	bl	80013e6 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RTC_AlarmIRQHandler+0x50>)
 80043f2:	2202      	movs	r2, #2
 80043f4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8dc 	bl	80045b4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40002800 	.word	0x40002800

08004410 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RTC_WaitForSynchro+0x48>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_RTC_WaitForSynchro+0x48>)
 800441e:	f023 0320 	bic.w	r3, r3, #32
 8004422:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004424:	f7fd fe3a 	bl	800209c <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800442a:	e009      	b.n	8004440 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800442c:	f7fd fe36 	bl	800209c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443a:	d901      	bls.n	8004440 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RTC_WaitForSynchro+0x48>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ef      	beq.n	800442c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40002800 	.word	0x40002800

0800445c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <RTC_EnterInitMode+0x64>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d120      	bne.n	80044b6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <RTC_EnterInitMode+0x64>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <RTC_EnterInitMode+0x64>)
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004480:	f7fd fe0c 	bl	800209c <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004486:	e00d      	b.n	80044a4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004488:	f7fd fe08 	bl	800209c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004496:	d905      	bls.n	80044a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2203      	movs	r2, #3
 80044a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <RTC_EnterInitMode+0x64>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <RTC_EnterInitMode+0x5a>
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d1e8      	bne.n	8004488 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40002800 	.word	0x40002800

080044c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <RTC_ExitInitMode+0x78>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <RTC_ExitInitMode+0x78>)
 80044d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044da:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <RTC_ExitInitMode+0x78>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10c      	bne.n	8004502 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ff91 	bl	8004410 <HAL_RTC_WaitForSynchro>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01e      	beq.n	8004532 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2203      	movs	r2, #3
 80044f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	e017      	b.n	8004532 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <RTC_ExitInitMode+0x78>)
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	4a0d      	ldr	r2, [pc, #52]	; (800453c <RTC_ExitInitMode+0x78>)
 8004508:	f023 0320 	bic.w	r3, r3, #32
 800450c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff ff7e 	bl	8004410 <HAL_RTC_WaitForSynchro>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <RTC_ExitInitMode+0x78>)
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <RTC_ExitInitMode+0x78>)
 800452c:	f043 0320 	orr.w	r3, r3, #32
 8004530:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40002800 	.word	0x40002800

08004540 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004552:	e005      	b.n	8004560 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	3b0a      	subs	r3, #10
 800455e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	2b09      	cmp	r3, #9
 8004564:	d8f6      	bhi.n	8004554 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	b2da      	uxtb	r2, r3
 800456e:	7afb      	ldrb	r3, [r7, #11]
 8004570:	4313      	orrs	r3, r2
 8004572:	b2db      	uxtb	r3, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	4603      	mov	r3, r0
 8004586:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	b2db      	uxtb	r3, r3
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <LL_RCC_GetUSARTClockSource>:
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	401a      	ands	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	4313      	orrs	r3, r2
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <LL_RCC_GetLPUARTClockSource>:
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4013      	ands	r3, r2
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e042      	b.n	80046a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fd fb67 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2224      	movs	r2, #36	; 0x24
 8004636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f976 	bl	800493c <UART_SetConfig>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e022      	b.n	80046a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fbde 	bl	8004e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fc64 	bl	8004f66 <UART_CheckIdleState>
 800469e:	4603      	mov	r3, r0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d173      	bne.n	80047aa <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_UART_Transmit+0x26>
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06c      	b.n	80047ac <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e2:	f7fd fcdb 	bl	800209c <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d108      	bne.n	8004714 <HAL_UART_Transmit+0x6c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e003      	b.n	800471c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800471c:	e02c      	b.n	8004778 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fc6a 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e039      	b.n	80047ac <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	3302      	adds	r3, #2
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e007      	b.n	8004766 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1cc      	bne.n	800471e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2200      	movs	r2, #0
 800478c:	2140      	movs	r1, #64	; 0x40
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fc37 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e006      	b.n	80047ac <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	f040 80b1 	bne.w	8004932 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_UART_Receive+0x28>
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0a9      	b.n	8004934 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2222      	movs	r2, #34	; 0x22
 80047ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f6:	f7fd fc51 	bl	800209c <HAL_GetTick>
 80047fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d10e      	bne.n	8004834 <HAL_UART_Receive+0x80>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d105      	bne.n	800482a <HAL_UART_Receive+0x76>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004828:	e02d      	b.n	8004886 <HAL_UART_Receive+0xd2>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	22ff      	movs	r2, #255	; 0xff
 800482e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004832:	e028      	b.n	8004886 <HAL_UART_Receive+0xd2>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_UART_Receive+0xa4>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <HAL_UART_Receive+0x9a>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	22ff      	movs	r2, #255	; 0xff
 8004848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800484c:	e01b      	b.n	8004886 <HAL_UART_Receive+0xd2>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	227f      	movs	r2, #127	; 0x7f
 8004852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004856:	e016      	b.n	8004886 <HAL_UART_Receive+0xd2>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004860:	d10d      	bne.n	800487e <HAL_UART_Receive+0xca>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <HAL_UART_Receive+0xc0>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	227f      	movs	r2, #127	; 0x7f
 800486e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004872:	e008      	b.n	8004886 <HAL_UART_Receive+0xd2>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	223f      	movs	r2, #63	; 0x3f
 8004878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800487c:	e003      	b.n	8004886 <HAL_UART_Receive+0xd2>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800488c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d108      	bne.n	80048aa <HAL_UART_Receive+0xf6>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e003      	b.n	80048b2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80048b2:	e032      	b.n	800491a <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2120      	movs	r1, #32
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fb9f 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e032      	b.n	8004934 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10c      	bne.n	80048ee <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b29a      	uxth	r2, r3
 80048dc:	8a7b      	ldrh	r3, [r7, #18]
 80048de:	4013      	ands	r3, r2
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	3302      	adds	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e00c      	b.n	8004908 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	8a7b      	ldrh	r3, [r7, #18]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4013      	ands	r3, r2
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1c6      	bne.n	80048b4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004940:	b08c      	sub	sp, #48	; 0x30
 8004942:	af00      	add	r7, sp, #0
 8004944:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b94      	ldr	r3, [pc, #592]	; (8004bbc <UART_SetConfig+0x280>)
 800496c:	4013      	ands	r3, r2
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a89      	ldr	r2, [pc, #548]	; (8004bc0 <UART_SetConfig+0x284>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a4:	4313      	orrs	r3, r2
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80049b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049bc:	430b      	orrs	r3, r1
 80049be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f023 010f 	bic.w	r1, r3, #15
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7a      	ldr	r2, [pc, #488]	; (8004bc4 <UART_SetConfig+0x288>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d127      	bne.n	8004a30 <UART_SetConfig+0xf4>
 80049e0:	2003      	movs	r0, #3
 80049e2:	f7ff fdf0 	bl	80045c6 <LL_RCC_GetUSARTClockSource>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d81b      	bhi.n	8004a28 <UART_SetConfig+0xec>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <UART_SetConfig+0xbc>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a19 	.word	0x08004a19
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0e:	e080      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a10:	2302      	movs	r3, #2
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a16:	e07c      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1e:	e078      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a20:	2308      	movs	r3, #8
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a26:	e074      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2e:	e070      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a64      	ldr	r2, [pc, #400]	; (8004bc8 <UART_SetConfig+0x28c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d138      	bne.n	8004aac <UART_SetConfig+0x170>
 8004a3a:	200c      	movs	r0, #12
 8004a3c:	f7ff fdc3 	bl	80045c6 <LL_RCC_GetUSARTClockSource>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d82c      	bhi.n	8004aa4 <UART_SetConfig+0x168>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x114>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	08004aa5 	.word	0x08004aa5
 8004a5c:	08004aa5 	.word	0x08004aa5
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004aa5 	.word	0x08004aa5
 8004a68:	08004aa5 	.word	0x08004aa5
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	08004aa5 	.word	0x08004aa5
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004a9d 	.word	0x08004a9d
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8a:	e042      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a92:	e03e      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9a:	e03a      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa2:	e036      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aaa:	e032      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a43      	ldr	r2, [pc, #268]	; (8004bc0 <UART_SetConfig+0x284>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d12a      	bne.n	8004b0c <UART_SetConfig+0x1d0>
 8004ab6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004aba:	f7ff fd96 	bl	80045ea <LL_RCC_GetLPUARTClockSource>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ac4:	d01a      	beq.n	8004afc <UART_SetConfig+0x1c0>
 8004ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aca:	d81b      	bhi.n	8004b04 <UART_SetConfig+0x1c8>
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad0:	d00c      	beq.n	8004aec <UART_SetConfig+0x1b0>
 8004ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad6:	d815      	bhi.n	8004b04 <UART_SetConfig+0x1c8>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <UART_SetConfig+0x1a8>
 8004adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae0:	d008      	beq.n	8004af4 <UART_SetConfig+0x1b8>
 8004ae2:	e00f      	b.n	8004b04 <UART_SetConfig+0x1c8>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aea:	e012      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af2:	e00e      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afa:	e00a      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b02:	e006      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b0a:	e002      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <UART_SetConfig+0x284>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	f040 80a4 	bne.w	8004c66 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d823      	bhi.n	8004b6e <UART_SetConfig+0x232>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0x1f0>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b5f 	.word	0x08004b5f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b6f 	.word	0x08004b6f
 8004b4c:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7fe fd94 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004b54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <UART_SetConfig+0x290>)
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe fcd9 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8004b62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8137 	beq.w	8004df0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <UART_SetConfig+0x294>)
 8004b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4413      	add	r3, r2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d305      	bcc.n	8004bb2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d910      	bls.n	8004bd4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bb8:	e11a      	b.n	8004df0 <UART_SetConfig+0x4b4>
 8004bba:	bf00      	nop
 8004bbc:	cfff69f3 	.word	0xcfff69f3
 8004bc0:	40008000 	.word	0x40008000
 8004bc4:	40013800 	.word	0x40013800
 8004bc8:	40004400 	.word	0x40004400
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	08006aec 	.word	0x08006aec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	60fa      	str	r2, [r7, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	4a8e      	ldr	r2, [pc, #568]	; (8004e1c <UART_SetConfig+0x4e0>)
 8004be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2200      	movs	r2, #0
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bf6:	f7fb fb13 	bl	8000220 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	020b      	lsls	r3, r1, #8
 8004c0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c10:	0202      	lsls	r2, r0, #8
 8004c12:	6979      	ldr	r1, [r7, #20]
 8004c14:	6849      	ldr	r1, [r1, #4]
 8004c16:	0849      	lsrs	r1, r1, #1
 8004c18:	2000      	movs	r0, #0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	eb12 0804 	adds.w	r8, r2, r4
 8004c22:	eb43 0905 	adc.w	r9, r3, r5
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	469a      	mov	sl, r3
 8004c2e:	4693      	mov	fp, r2
 8004c30:	4652      	mov	r2, sl
 8004c32:	465b      	mov	r3, fp
 8004c34:	4640      	mov	r0, r8
 8004c36:	4649      	mov	r1, r9
 8004c38:	f7fb faf2 	bl	8000220 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4a:	d308      	bcc.n	8004c5e <UART_SetConfig+0x322>
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c52:	d204      	bcs.n	8004c5e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e0c8      	b.n	8004df0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c64:	e0c4      	b.n	8004df0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6e:	d167      	bne.n	8004d40 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004c70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d828      	bhi.n	8004cca <UART_SetConfig+0x38e>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0x344>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004ccb 	.word	0x08004ccb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004cc3 	.word	0x08004cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca4:	f7fe fcea 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004caa:	e014      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cac:	f7fe fcf8 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cb2:	e010      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb4:	4b5a      	ldr	r3, [pc, #360]	; (8004e20 <UART_SetConfig+0x4e4>)
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cb8:	e00d      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cba:	f7fe fc2b 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8004cbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cc0:	e009      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cc8:	e005      	b.n	8004cd6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8089 	beq.w	8004df0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	4a4e      	ldr	r2, [pc, #312]	; (8004e1c <UART_SetConfig+0x4e0>)
 8004ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf0:	005a      	lsls	r2, r3, #1
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	441a      	add	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d916      	bls.n	8004d38 <UART_SetConfig+0x3fc>
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d10:	d212      	bcs.n	8004d38 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f023 030f 	bic.w	r3, r3, #15
 8004d1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	8bfb      	ldrh	r3, [r7, #30]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	8bfa      	ldrh	r2, [r7, #30]
 8004d34:	60da      	str	r2, [r3, #12]
 8004d36:	e05b      	b.n	8004df0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d3e:	e057      	b.n	8004df0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d828      	bhi.n	8004d9a <UART_SetConfig+0x45e>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0x414>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	08004d9b 	.word	0x08004d9b
 8004d60:	08004d8b 	.word	0x08004d8b
 8004d64:	08004d9b 	.word	0x08004d9b
 8004d68:	08004d9b 	.word	0x08004d9b
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004d93 	.word	0x08004d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7fe fc82 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d7a:	e014      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7fe fc90 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 8004d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d82:	e010      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <UART_SetConfig+0x4e4>)
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d88:	e00d      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fe fbc3 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8004d8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d90:	e009      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d98:	e005      	b.n	8004da6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004da4:	bf00      	nop
    }

    if (pclk != 0U)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d021      	beq.n	8004df0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <UART_SetConfig+0x4e0>)
 8004db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	441a      	add	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b0f      	cmp	r3, #15
 8004dd4:	d909      	bls.n	8004dea <UART_SetConfig+0x4ae>
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ddc:	d205      	bcs.n	8004dea <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	e002      	b.n	8004df0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e0c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3730      	adds	r7, #48	; 0x30
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08006aec 	.word	0x08006aec
 8004e20:	00f42400 	.word	0x00f42400

08004e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f22:	d10a      	bne.n	8004f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af02      	add	r7, sp, #8
 8004f6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f76:	f7fd f891 	bl	800209c <HAL_GetTick>
 8004f7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d10e      	bne.n	8004fa8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f832 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e028      	b.n	8004ffa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d10e      	bne.n	8004fd4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f81c 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e012      	b.n	8004ffa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b09c      	sub	sp, #112	; 0x70
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005012:	e0a9      	b.n	8005168 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501a:	f000 80a5 	beq.w	8005168 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501e:	f7fd f83d 	bl	800209c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800502a:	429a      	cmp	r2, r3
 800502c:	d302      	bcc.n	8005034 <UART_WaitOnFlagUntilTimeout+0x32>
 800502e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005030:	2b00      	cmp	r3, #0
 8005032:	d140      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005048:	667b      	str	r3, [r7, #100]	; 0x64
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005054:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e6      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	663b      	str	r3, [r7, #96]	; 0x60
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005086:	64ba      	str	r2, [r7, #72]	; 0x48
 8005088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800508c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e069      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d051      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d2:	d149      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fc:	637b      	str	r3, [r7, #52]	; 0x34
 80050fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3308      	adds	r3, #8
 8005116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	613b      	str	r3, [r7, #16]
   return(result);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	66bb      	str	r3, [r7, #104]	; 0x68
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3308      	adds	r3, #8
 800512e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005130:	623a      	str	r2, [r7, #32]
 8005132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	69f9      	ldr	r1, [r7, #28]
 8005136:	6a3a      	ldr	r2, [r7, #32]
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	61bb      	str	r3, [r7, #24]
   return(result);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e5      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e010      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69da      	ldr	r2, [r3, #28]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	f43f af46 	beq.w	8005014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3770      	adds	r7, #112	; 0x70
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e027      	b.n	80051f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005216:	2302      	movs	r3, #2
 8005218:	e02d      	b.n	8005276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2224      	movs	r2, #36	; 0x24
 8005226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f850 	bl	80052fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005292:	2302      	movs	r3, #2
 8005294:	e02d      	b.n	80052f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2224      	movs	r2, #36	; 0x24
 80052a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f812 	bl	80052fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800531c:	e031      	b.n	8005382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800531e:	2308      	movs	r3, #8
 8005320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005322:	2308      	movs	r3, #8
 8005324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	0e5b      	lsrs	r3, r3, #25
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	0f5b      	lsrs	r3, r3, #29
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005346:	7bbb      	ldrb	r3, [r7, #14]
 8005348:	7b3a      	ldrb	r2, [r7, #12]
 800534a:	4910      	ldr	r1, [pc, #64]	; (800538c <UARTEx_SetNbDataToProcess+0x90>)
 800534c:	5c8a      	ldrb	r2, [r1, r2]
 800534e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005352:	7b3a      	ldrb	r2, [r7, #12]
 8005354:	490e      	ldr	r1, [pc, #56]	; (8005390 <UARTEx_SetNbDataToProcess+0x94>)
 8005356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005358:	fb93 f3f2 	sdiv	r3, r3, r2
 800535c:	b29a      	uxth	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	7b7a      	ldrb	r2, [r7, #13]
 8005368:	4908      	ldr	r1, [pc, #32]	; (800538c <UARTEx_SetNbDataToProcess+0x90>)
 800536a:	5c8a      	ldrb	r2, [r1, r2]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005370:	7b7a      	ldrb	r2, [r7, #13]
 8005372:	4907      	ldr	r1, [pc, #28]	; (8005390 <UARTEx_SetNbDataToProcess+0x94>)
 8005374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005376:	fb93 f3f2 	sdiv	r3, r3, r2
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr
 800538c:	08006b04 	.word	0x08006b04
 8005390:	08006b0c 	.word	0x08006b0c

08005394 <atoi>:
 8005394:	220a      	movs	r2, #10
 8005396:	2100      	movs	r1, #0
 8005398:	f000 b960 	b.w	800565c <strtol>

0800539c <__errno>:
 800539c:	4b01      	ldr	r3, [pc, #4]	; (80053a4 <__errno+0x8>)
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000010 	.word	0x20000010

080053a8 <__libc_init_array>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4d0d      	ldr	r5, [pc, #52]	; (80053e0 <__libc_init_array+0x38>)
 80053ac:	4c0d      	ldr	r4, [pc, #52]	; (80053e4 <__libc_init_array+0x3c>)
 80053ae:	1b64      	subs	r4, r4, r5
 80053b0:	10a4      	asrs	r4, r4, #2
 80053b2:	2600      	movs	r6, #0
 80053b4:	42a6      	cmp	r6, r4
 80053b6:	d109      	bne.n	80053cc <__libc_init_array+0x24>
 80053b8:	4d0b      	ldr	r5, [pc, #44]	; (80053e8 <__libc_init_array+0x40>)
 80053ba:	4c0c      	ldr	r4, [pc, #48]	; (80053ec <__libc_init_array+0x44>)
 80053bc:	f001 faf8 	bl	80069b0 <_init>
 80053c0:	1b64      	subs	r4, r4, r5
 80053c2:	10a4      	asrs	r4, r4, #2
 80053c4:	2600      	movs	r6, #0
 80053c6:	42a6      	cmp	r6, r4
 80053c8:	d105      	bne.n	80053d6 <__libc_init_array+0x2e>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d0:	4798      	blx	r3
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7ee      	b.n	80053b4 <__libc_init_array+0xc>
 80053d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053da:	4798      	blx	r3
 80053dc:	3601      	adds	r6, #1
 80053de:	e7f2      	b.n	80053c6 <__libc_init_array+0x1e>
 80053e0:	08006d64 	.word	0x08006d64
 80053e4:	08006d64 	.word	0x08006d64
 80053e8:	08006d64 	.word	0x08006d64
 80053ec:	08006d68 	.word	0x08006d68

080053f0 <memcpy>:
 80053f0:	440a      	add	r2, r1
 80053f2:	4291      	cmp	r1, r2
 80053f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80053f8:	d100      	bne.n	80053fc <memcpy+0xc>
 80053fa:	4770      	bx	lr
 80053fc:	b510      	push	{r4, lr}
 80053fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005406:	4291      	cmp	r1, r2
 8005408:	d1f9      	bne.n	80053fe <memcpy+0xe>
 800540a:	bd10      	pop	{r4, pc}

0800540c <memset>:
 800540c:	4402      	add	r2, r0
 800540e:	4603      	mov	r3, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	d100      	bne.n	8005416 <memset+0xa>
 8005414:	4770      	bx	lr
 8005416:	f803 1b01 	strb.w	r1, [r3], #1
 800541a:	e7f9      	b.n	8005410 <memset+0x4>

0800541c <sniprintf>:
 800541c:	b40c      	push	{r2, r3}
 800541e:	b530      	push	{r4, r5, lr}
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <sniprintf+0x64>)
 8005422:	1e0c      	subs	r4, r1, #0
 8005424:	681d      	ldr	r5, [r3, #0]
 8005426:	b09d      	sub	sp, #116	; 0x74
 8005428:	da08      	bge.n	800543c <sniprintf+0x20>
 800542a:	238b      	movs	r3, #139	; 0x8b
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005432:	b01d      	add	sp, #116	; 0x74
 8005434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005438:	b002      	add	sp, #8
 800543a:	4770      	bx	lr
 800543c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005444:	bf14      	ite	ne
 8005446:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800544a:	4623      	moveq	r3, r4
 800544c:	9304      	str	r3, [sp, #16]
 800544e:	9307      	str	r3, [sp, #28]
 8005450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005454:	9002      	str	r0, [sp, #8]
 8005456:	9006      	str	r0, [sp, #24]
 8005458:	f8ad 3016 	strh.w	r3, [sp, #22]
 800545c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800545e:	ab21      	add	r3, sp, #132	; 0x84
 8005460:	a902      	add	r1, sp, #8
 8005462:	4628      	mov	r0, r5
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	f000 fa75 	bl	8005954 <_svfiprintf_r>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	bfbc      	itt	lt
 800546e:	238b      	movlt	r3, #139	; 0x8b
 8005470:	602b      	strlt	r3, [r5, #0]
 8005472:	2c00      	cmp	r4, #0
 8005474:	d0dd      	beq.n	8005432 <sniprintf+0x16>
 8005476:	9b02      	ldr	r3, [sp, #8]
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e7d9      	b.n	8005432 <sniprintf+0x16>
 800547e:	bf00      	nop
 8005480:	20000010 	.word	0x20000010

08005484 <strncmp>:
 8005484:	b510      	push	{r4, lr}
 8005486:	4603      	mov	r3, r0
 8005488:	b172      	cbz	r2, 80054a8 <strncmp+0x24>
 800548a:	3901      	subs	r1, #1
 800548c:	1884      	adds	r4, r0, r2
 800548e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005492:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005496:	4290      	cmp	r0, r2
 8005498:	d101      	bne.n	800549e <strncmp+0x1a>
 800549a:	42a3      	cmp	r3, r4
 800549c:	d101      	bne.n	80054a2 <strncmp+0x1e>
 800549e:	1a80      	subs	r0, r0, r2
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d1f3      	bne.n	800548e <strncmp+0xa>
 80054a6:	e7fa      	b.n	800549e <strncmp+0x1a>
 80054a8:	4610      	mov	r0, r2
 80054aa:	e7f9      	b.n	80054a0 <strncmp+0x1c>

080054ac <strtok>:
 80054ac:	4b16      	ldr	r3, [pc, #88]	; (8005508 <strtok+0x5c>)
 80054ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b2:	681f      	ldr	r7, [r3, #0]
 80054b4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80054b6:	4605      	mov	r5, r0
 80054b8:	460e      	mov	r6, r1
 80054ba:	b9ec      	cbnz	r4, 80054f8 <strtok+0x4c>
 80054bc:	2050      	movs	r0, #80	; 0x50
 80054be:	f000 f907 	bl	80056d0 <malloc>
 80054c2:	4602      	mov	r2, r0
 80054c4:	65b8      	str	r0, [r7, #88]	; 0x58
 80054c6:	b920      	cbnz	r0, 80054d2 <strtok+0x26>
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <strtok+0x60>)
 80054ca:	4811      	ldr	r0, [pc, #68]	; (8005510 <strtok+0x64>)
 80054cc:	2157      	movs	r1, #87	; 0x57
 80054ce:	f000 f8cf 	bl	8005670 <__assert_func>
 80054d2:	e9c0 4400 	strd	r4, r4, [r0]
 80054d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80054da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80054de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80054e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80054e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80054ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80054ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80054f2:	6184      	str	r4, [r0, #24]
 80054f4:	7704      	strb	r4, [r0, #28]
 80054f6:	6244      	str	r4, [r0, #36]	; 0x24
 80054f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	2301      	movs	r3, #1
 8005500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005504:	f000 b806 	b.w	8005514 <__strtok_r>
 8005508:	20000010 	.word	0x20000010
 800550c:	08006b18 	.word	0x08006b18
 8005510:	08006b2f 	.word	0x08006b2f

08005514 <__strtok_r>:
 8005514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005516:	b908      	cbnz	r0, 800551c <__strtok_r+0x8>
 8005518:	6810      	ldr	r0, [r2, #0]
 800551a:	b188      	cbz	r0, 8005540 <__strtok_r+0x2c>
 800551c:	4604      	mov	r4, r0
 800551e:	4620      	mov	r0, r4
 8005520:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005524:	460f      	mov	r7, r1
 8005526:	f817 6b01 	ldrb.w	r6, [r7], #1
 800552a:	b91e      	cbnz	r6, 8005534 <__strtok_r+0x20>
 800552c:	b965      	cbnz	r5, 8005548 <__strtok_r+0x34>
 800552e:	6015      	str	r5, [r2, #0]
 8005530:	4628      	mov	r0, r5
 8005532:	e005      	b.n	8005540 <__strtok_r+0x2c>
 8005534:	42b5      	cmp	r5, r6
 8005536:	d1f6      	bne.n	8005526 <__strtok_r+0x12>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <__strtok_r+0xa>
 800553c:	6014      	str	r4, [r2, #0]
 800553e:	7003      	strb	r3, [r0, #0]
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005542:	461c      	mov	r4, r3
 8005544:	e00c      	b.n	8005560 <__strtok_r+0x4c>
 8005546:	b915      	cbnz	r5, 800554e <__strtok_r+0x3a>
 8005548:	f814 3b01 	ldrb.w	r3, [r4], #1
 800554c:	460e      	mov	r6, r1
 800554e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005552:	42ab      	cmp	r3, r5
 8005554:	d1f7      	bne.n	8005546 <__strtok_r+0x32>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f3      	beq.n	8005542 <__strtok_r+0x2e>
 800555a:	2300      	movs	r3, #0
 800555c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005560:	6014      	str	r4, [r2, #0]
 8005562:	e7ed      	b.n	8005540 <__strtok_r+0x2c>

08005564 <_strtol_l.constprop.0>:
 8005564:	2b01      	cmp	r3, #1
 8005566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556a:	4680      	mov	r8, r0
 800556c:	d001      	beq.n	8005572 <_strtol_l.constprop.0+0xe>
 800556e:	2b24      	cmp	r3, #36	; 0x24
 8005570:	d906      	bls.n	8005580 <_strtol_l.constprop.0+0x1c>
 8005572:	f7ff ff13 	bl	800539c <__errno>
 8005576:	2316      	movs	r3, #22
 8005578:	6003      	str	r3, [r0, #0]
 800557a:	2000      	movs	r0, #0
 800557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005580:	4f35      	ldr	r7, [pc, #212]	; (8005658 <_strtol_l.constprop.0+0xf4>)
 8005582:	460d      	mov	r5, r1
 8005584:	4628      	mov	r0, r5
 8005586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800558a:	5de6      	ldrb	r6, [r4, r7]
 800558c:	f016 0608 	ands.w	r6, r6, #8
 8005590:	d1f8      	bne.n	8005584 <_strtol_l.constprop.0+0x20>
 8005592:	2c2d      	cmp	r4, #45	; 0x2d
 8005594:	d12f      	bne.n	80055f6 <_strtol_l.constprop.0+0x92>
 8005596:	782c      	ldrb	r4, [r5, #0]
 8005598:	2601      	movs	r6, #1
 800559a:	1c85      	adds	r5, r0, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d057      	beq.n	8005650 <_strtol_l.constprop.0+0xec>
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d109      	bne.n	80055b8 <_strtol_l.constprop.0+0x54>
 80055a4:	2c30      	cmp	r4, #48	; 0x30
 80055a6:	d107      	bne.n	80055b8 <_strtol_l.constprop.0+0x54>
 80055a8:	7828      	ldrb	r0, [r5, #0]
 80055aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80055ae:	2858      	cmp	r0, #88	; 0x58
 80055b0:	d149      	bne.n	8005646 <_strtol_l.constprop.0+0xe2>
 80055b2:	786c      	ldrb	r4, [r5, #1]
 80055b4:	2310      	movs	r3, #16
 80055b6:	3502      	adds	r5, #2
 80055b8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80055bc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80055c0:	2700      	movs	r7, #0
 80055c2:	fbbe f9f3 	udiv	r9, lr, r3
 80055c6:	4638      	mov	r0, r7
 80055c8:	fb03 ea19 	mls	sl, r3, r9, lr
 80055cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80055d0:	f1bc 0f09 	cmp.w	ip, #9
 80055d4:	d814      	bhi.n	8005600 <_strtol_l.constprop.0+0x9c>
 80055d6:	4664      	mov	r4, ip
 80055d8:	42a3      	cmp	r3, r4
 80055da:	dd22      	ble.n	8005622 <_strtol_l.constprop.0+0xbe>
 80055dc:	2f00      	cmp	r7, #0
 80055de:	db1d      	blt.n	800561c <_strtol_l.constprop.0+0xb8>
 80055e0:	4581      	cmp	r9, r0
 80055e2:	d31b      	bcc.n	800561c <_strtol_l.constprop.0+0xb8>
 80055e4:	d101      	bne.n	80055ea <_strtol_l.constprop.0+0x86>
 80055e6:	45a2      	cmp	sl, r4
 80055e8:	db18      	blt.n	800561c <_strtol_l.constprop.0+0xb8>
 80055ea:	fb00 4003 	mla	r0, r0, r3, r4
 80055ee:	2701      	movs	r7, #1
 80055f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055f4:	e7ea      	b.n	80055cc <_strtol_l.constprop.0+0x68>
 80055f6:	2c2b      	cmp	r4, #43	; 0x2b
 80055f8:	bf04      	itt	eq
 80055fa:	782c      	ldrbeq	r4, [r5, #0]
 80055fc:	1c85      	addeq	r5, r0, #2
 80055fe:	e7cd      	b.n	800559c <_strtol_l.constprop.0+0x38>
 8005600:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005604:	f1bc 0f19 	cmp.w	ip, #25
 8005608:	d801      	bhi.n	800560e <_strtol_l.constprop.0+0xaa>
 800560a:	3c37      	subs	r4, #55	; 0x37
 800560c:	e7e4      	b.n	80055d8 <_strtol_l.constprop.0+0x74>
 800560e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005612:	f1bc 0f19 	cmp.w	ip, #25
 8005616:	d804      	bhi.n	8005622 <_strtol_l.constprop.0+0xbe>
 8005618:	3c57      	subs	r4, #87	; 0x57
 800561a:	e7dd      	b.n	80055d8 <_strtol_l.constprop.0+0x74>
 800561c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005620:	e7e6      	b.n	80055f0 <_strtol_l.constprop.0+0x8c>
 8005622:	2f00      	cmp	r7, #0
 8005624:	da07      	bge.n	8005636 <_strtol_l.constprop.0+0xd2>
 8005626:	2322      	movs	r3, #34	; 0x22
 8005628:	f8c8 3000 	str.w	r3, [r8]
 800562c:	4670      	mov	r0, lr
 800562e:	2a00      	cmp	r2, #0
 8005630:	d0a4      	beq.n	800557c <_strtol_l.constprop.0+0x18>
 8005632:	1e69      	subs	r1, r5, #1
 8005634:	e005      	b.n	8005642 <_strtol_l.constprop.0+0xde>
 8005636:	b106      	cbz	r6, 800563a <_strtol_l.constprop.0+0xd6>
 8005638:	4240      	negs	r0, r0
 800563a:	2a00      	cmp	r2, #0
 800563c:	d09e      	beq.n	800557c <_strtol_l.constprop.0+0x18>
 800563e:	2f00      	cmp	r7, #0
 8005640:	d1f7      	bne.n	8005632 <_strtol_l.constprop.0+0xce>
 8005642:	6011      	str	r1, [r2, #0]
 8005644:	e79a      	b.n	800557c <_strtol_l.constprop.0+0x18>
 8005646:	2430      	movs	r4, #48	; 0x30
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1b5      	bne.n	80055b8 <_strtol_l.constprop.0+0x54>
 800564c:	2308      	movs	r3, #8
 800564e:	e7b3      	b.n	80055b8 <_strtol_l.constprop.0+0x54>
 8005650:	2c30      	cmp	r4, #48	; 0x30
 8005652:	d0a9      	beq.n	80055a8 <_strtol_l.constprop.0+0x44>
 8005654:	230a      	movs	r3, #10
 8005656:	e7af      	b.n	80055b8 <_strtol_l.constprop.0+0x54>
 8005658:	08006bc9 	.word	0x08006bc9

0800565c <strtol>:
 800565c:	4613      	mov	r3, r2
 800565e:	460a      	mov	r2, r1
 8005660:	4601      	mov	r1, r0
 8005662:	4802      	ldr	r0, [pc, #8]	; (800566c <strtol+0x10>)
 8005664:	6800      	ldr	r0, [r0, #0]
 8005666:	f7ff bf7d 	b.w	8005564 <_strtol_l.constprop.0>
 800566a:	bf00      	nop
 800566c:	20000010 	.word	0x20000010

08005670 <__assert_func>:
 8005670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005672:	4614      	mov	r4, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <__assert_func+0x2c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4605      	mov	r5, r0
 800567c:	68d8      	ldr	r0, [r3, #12]
 800567e:	b14c      	cbz	r4, 8005694 <__assert_func+0x24>
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <__assert_func+0x30>)
 8005682:	9100      	str	r1, [sp, #0]
 8005684:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005688:	4906      	ldr	r1, [pc, #24]	; (80056a4 <__assert_func+0x34>)
 800568a:	462b      	mov	r3, r5
 800568c:	f000 f80e 	bl	80056ac <fiprintf>
 8005690:	f000 fe1c 	bl	80062cc <abort>
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <__assert_func+0x38>)
 8005696:	461c      	mov	r4, r3
 8005698:	e7f3      	b.n	8005682 <__assert_func+0x12>
 800569a:	bf00      	nop
 800569c:	20000010 	.word	0x20000010
 80056a0:	08006b8c 	.word	0x08006b8c
 80056a4:	08006b99 	.word	0x08006b99
 80056a8:	08006bc7 	.word	0x08006bc7

080056ac <fiprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b503      	push	{r0, r1, lr}
 80056b0:	4601      	mov	r1, r0
 80056b2:	ab03      	add	r3, sp, #12
 80056b4:	4805      	ldr	r0, [pc, #20]	; (80056cc <fiprintf+0x20>)
 80056b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f000 fa71 	bl	8005ba4 <_vfiprintf_r>
 80056c2:	b002      	add	sp, #8
 80056c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c8:	b003      	add	sp, #12
 80056ca:	4770      	bx	lr
 80056cc:	20000010 	.word	0x20000010

080056d0 <malloc>:
 80056d0:	4b02      	ldr	r3, [pc, #8]	; (80056dc <malloc+0xc>)
 80056d2:	4601      	mov	r1, r0
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f000 b86d 	b.w	80057b4 <_malloc_r>
 80056da:	bf00      	nop
 80056dc:	20000010 	.word	0x20000010

080056e0 <_free_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4605      	mov	r5, r0
 80056e4:	2900      	cmp	r1, #0
 80056e6:	d041      	beq.n	800576c <_free_r+0x8c>
 80056e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ec:	1f0c      	subs	r4, r1, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfb8      	it	lt
 80056f2:	18e4      	addlt	r4, r4, r3
 80056f4:	f001 f828 	bl	8006748 <__malloc_lock>
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <_free_r+0x90>)
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	b933      	cbnz	r3, 800570c <_free_r+0x2c>
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	6014      	str	r4, [r2, #0]
 8005702:	4628      	mov	r0, r5
 8005704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005708:	f001 b824 	b.w	8006754 <__malloc_unlock>
 800570c:	42a3      	cmp	r3, r4
 800570e:	d908      	bls.n	8005722 <_free_r+0x42>
 8005710:	6820      	ldr	r0, [r4, #0]
 8005712:	1821      	adds	r1, r4, r0
 8005714:	428b      	cmp	r3, r1
 8005716:	bf01      	itttt	eq
 8005718:	6819      	ldreq	r1, [r3, #0]
 800571a:	685b      	ldreq	r3, [r3, #4]
 800571c:	1809      	addeq	r1, r1, r0
 800571e:	6021      	streq	r1, [r4, #0]
 8005720:	e7ed      	b.n	80056fe <_free_r+0x1e>
 8005722:	461a      	mov	r2, r3
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	b10b      	cbz	r3, 800572c <_free_r+0x4c>
 8005728:	42a3      	cmp	r3, r4
 800572a:	d9fa      	bls.n	8005722 <_free_r+0x42>
 800572c:	6811      	ldr	r1, [r2, #0]
 800572e:	1850      	adds	r0, r2, r1
 8005730:	42a0      	cmp	r0, r4
 8005732:	d10b      	bne.n	800574c <_free_r+0x6c>
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	4401      	add	r1, r0
 8005738:	1850      	adds	r0, r2, r1
 800573a:	4283      	cmp	r3, r0
 800573c:	6011      	str	r1, [r2, #0]
 800573e:	d1e0      	bne.n	8005702 <_free_r+0x22>
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	6053      	str	r3, [r2, #4]
 8005746:	4401      	add	r1, r0
 8005748:	6011      	str	r1, [r2, #0]
 800574a:	e7da      	b.n	8005702 <_free_r+0x22>
 800574c:	d902      	bls.n	8005754 <_free_r+0x74>
 800574e:	230c      	movs	r3, #12
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	e7d6      	b.n	8005702 <_free_r+0x22>
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	1821      	adds	r1, r4, r0
 8005758:	428b      	cmp	r3, r1
 800575a:	bf04      	itt	eq
 800575c:	6819      	ldreq	r1, [r3, #0]
 800575e:	685b      	ldreq	r3, [r3, #4]
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	bf04      	itt	eq
 8005764:	1809      	addeq	r1, r1, r0
 8005766:	6021      	streq	r1, [r4, #0]
 8005768:	6054      	str	r4, [r2, #4]
 800576a:	e7ca      	b.n	8005702 <_free_r+0x22>
 800576c:	bd38      	pop	{r3, r4, r5, pc}
 800576e:	bf00      	nop
 8005770:	200002d8 	.word	0x200002d8

08005774 <sbrk_aligned>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4e0e      	ldr	r6, [pc, #56]	; (80057b0 <sbrk_aligned+0x3c>)
 8005778:	460c      	mov	r4, r1
 800577a:	6831      	ldr	r1, [r6, #0]
 800577c:	4605      	mov	r5, r0
 800577e:	b911      	cbnz	r1, 8005786 <sbrk_aligned+0x12>
 8005780:	f000 fcd4 	bl	800612c <_sbrk_r>
 8005784:	6030      	str	r0, [r6, #0]
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 fccf 	bl	800612c <_sbrk_r>
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d00a      	beq.n	80057a8 <sbrk_aligned+0x34>
 8005792:	1cc4      	adds	r4, r0, #3
 8005794:	f024 0403 	bic.w	r4, r4, #3
 8005798:	42a0      	cmp	r0, r4
 800579a:	d007      	beq.n	80057ac <sbrk_aligned+0x38>
 800579c:	1a21      	subs	r1, r4, r0
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fcc4 	bl	800612c <_sbrk_r>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d101      	bne.n	80057ac <sbrk_aligned+0x38>
 80057a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80057ac:	4620      	mov	r0, r4
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	200002dc 	.word	0x200002dc

080057b4 <_malloc_r>:
 80057b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b8:	1ccd      	adds	r5, r1, #3
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	4607      	mov	r7, r0
 80057ca:	db01      	blt.n	80057d0 <_malloc_r+0x1c>
 80057cc:	42a9      	cmp	r1, r5
 80057ce:	d905      	bls.n	80057dc <_malloc_r+0x28>
 80057d0:	230c      	movs	r3, #12
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	2600      	movs	r6, #0
 80057d6:	4630      	mov	r0, r6
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	4e2e      	ldr	r6, [pc, #184]	; (8005898 <_malloc_r+0xe4>)
 80057de:	f000 ffb3 	bl	8006748 <__malloc_lock>
 80057e2:	6833      	ldr	r3, [r6, #0]
 80057e4:	461c      	mov	r4, r3
 80057e6:	bb34      	cbnz	r4, 8005836 <_malloc_r+0x82>
 80057e8:	4629      	mov	r1, r5
 80057ea:	4638      	mov	r0, r7
 80057ec:	f7ff ffc2 	bl	8005774 <sbrk_aligned>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	4604      	mov	r4, r0
 80057f4:	d14d      	bne.n	8005892 <_malloc_r+0xde>
 80057f6:	6834      	ldr	r4, [r6, #0]
 80057f8:	4626      	mov	r6, r4
 80057fa:	2e00      	cmp	r6, #0
 80057fc:	d140      	bne.n	8005880 <_malloc_r+0xcc>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	4631      	mov	r1, r6
 8005802:	4638      	mov	r0, r7
 8005804:	eb04 0803 	add.w	r8, r4, r3
 8005808:	f000 fc90 	bl	800612c <_sbrk_r>
 800580c:	4580      	cmp	r8, r0
 800580e:	d13a      	bne.n	8005886 <_malloc_r+0xd2>
 8005810:	6821      	ldr	r1, [r4, #0]
 8005812:	3503      	adds	r5, #3
 8005814:	1a6d      	subs	r5, r5, r1
 8005816:	f025 0503 	bic.w	r5, r5, #3
 800581a:	3508      	adds	r5, #8
 800581c:	2d0c      	cmp	r5, #12
 800581e:	bf38      	it	cc
 8005820:	250c      	movcc	r5, #12
 8005822:	4629      	mov	r1, r5
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ffa5 	bl	8005774 <sbrk_aligned>
 800582a:	3001      	adds	r0, #1
 800582c:	d02b      	beq.n	8005886 <_malloc_r+0xd2>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	442b      	add	r3, r5
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	e00e      	b.n	8005854 <_malloc_r+0xa0>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	1b52      	subs	r2, r2, r5
 800583a:	d41e      	bmi.n	800587a <_malloc_r+0xc6>
 800583c:	2a0b      	cmp	r2, #11
 800583e:	d916      	bls.n	800586e <_malloc_r+0xba>
 8005840:	1961      	adds	r1, r4, r5
 8005842:	42a3      	cmp	r3, r4
 8005844:	6025      	str	r5, [r4, #0]
 8005846:	bf18      	it	ne
 8005848:	6059      	strne	r1, [r3, #4]
 800584a:	6863      	ldr	r3, [r4, #4]
 800584c:	bf08      	it	eq
 800584e:	6031      	streq	r1, [r6, #0]
 8005850:	5162      	str	r2, [r4, r5]
 8005852:	604b      	str	r3, [r1, #4]
 8005854:	4638      	mov	r0, r7
 8005856:	f104 060b 	add.w	r6, r4, #11
 800585a:	f000 ff7b 	bl	8006754 <__malloc_unlock>
 800585e:	f026 0607 	bic.w	r6, r6, #7
 8005862:	1d23      	adds	r3, r4, #4
 8005864:	1af2      	subs	r2, r6, r3
 8005866:	d0b6      	beq.n	80057d6 <_malloc_r+0x22>
 8005868:	1b9b      	subs	r3, r3, r6
 800586a:	50a3      	str	r3, [r4, r2]
 800586c:	e7b3      	b.n	80057d6 <_malloc_r+0x22>
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	42a3      	cmp	r3, r4
 8005872:	bf0c      	ite	eq
 8005874:	6032      	streq	r2, [r6, #0]
 8005876:	605a      	strne	r2, [r3, #4]
 8005878:	e7ec      	b.n	8005854 <_malloc_r+0xa0>
 800587a:	4623      	mov	r3, r4
 800587c:	6864      	ldr	r4, [r4, #4]
 800587e:	e7b2      	b.n	80057e6 <_malloc_r+0x32>
 8005880:	4634      	mov	r4, r6
 8005882:	6876      	ldr	r6, [r6, #4]
 8005884:	e7b9      	b.n	80057fa <_malloc_r+0x46>
 8005886:	230c      	movs	r3, #12
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	4638      	mov	r0, r7
 800588c:	f000 ff62 	bl	8006754 <__malloc_unlock>
 8005890:	e7a1      	b.n	80057d6 <_malloc_r+0x22>
 8005892:	6025      	str	r5, [r4, #0]
 8005894:	e7de      	b.n	8005854 <_malloc_r+0xa0>
 8005896:	bf00      	nop
 8005898:	200002d8 	.word	0x200002d8

0800589c <__ssputs_r>:
 800589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	688e      	ldr	r6, [r1, #8]
 80058a2:	429e      	cmp	r6, r3
 80058a4:	4682      	mov	sl, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	4690      	mov	r8, r2
 80058aa:	461f      	mov	r7, r3
 80058ac:	d838      	bhi.n	8005920 <__ssputs_r+0x84>
 80058ae:	898a      	ldrh	r2, [r1, #12]
 80058b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058b4:	d032      	beq.n	800591c <__ssputs_r+0x80>
 80058b6:	6825      	ldr	r5, [r4, #0]
 80058b8:	6909      	ldr	r1, [r1, #16]
 80058ba:	eba5 0901 	sub.w	r9, r5, r1
 80058be:	6965      	ldr	r5, [r4, #20]
 80058c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058c8:	3301      	adds	r3, #1
 80058ca:	444b      	add	r3, r9
 80058cc:	106d      	asrs	r5, r5, #1
 80058ce:	429d      	cmp	r5, r3
 80058d0:	bf38      	it	cc
 80058d2:	461d      	movcc	r5, r3
 80058d4:	0553      	lsls	r3, r2, #21
 80058d6:	d531      	bpl.n	800593c <__ssputs_r+0xa0>
 80058d8:	4629      	mov	r1, r5
 80058da:	f7ff ff6b 	bl	80057b4 <_malloc_r>
 80058de:	4606      	mov	r6, r0
 80058e0:	b950      	cbnz	r0, 80058f8 <__ssputs_r+0x5c>
 80058e2:	230c      	movs	r3, #12
 80058e4:	f8ca 3000 	str.w	r3, [sl]
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	6921      	ldr	r1, [r4, #16]
 80058fa:	464a      	mov	r2, r9
 80058fc:	f7ff fd78 	bl	80053f0 <memcpy>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	6126      	str	r6, [r4, #16]
 800590e:	6165      	str	r5, [r4, #20]
 8005910:	444e      	add	r6, r9
 8005912:	eba5 0509 	sub.w	r5, r5, r9
 8005916:	6026      	str	r6, [r4, #0]
 8005918:	60a5      	str	r5, [r4, #8]
 800591a:	463e      	mov	r6, r7
 800591c:	42be      	cmp	r6, r7
 800591e:	d900      	bls.n	8005922 <__ssputs_r+0x86>
 8005920:	463e      	mov	r6, r7
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	4632      	mov	r2, r6
 8005926:	4641      	mov	r1, r8
 8005928:	f000 fef4 	bl	8006714 <memmove>
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	1b9b      	subs	r3, r3, r6
 8005930:	60a3      	str	r3, [r4, #8]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	4433      	add	r3, r6
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	2000      	movs	r0, #0
 800593a:	e7db      	b.n	80058f4 <__ssputs_r+0x58>
 800593c:	462a      	mov	r2, r5
 800593e:	f000 ff0f 	bl	8006760 <_realloc_r>
 8005942:	4606      	mov	r6, r0
 8005944:	2800      	cmp	r0, #0
 8005946:	d1e1      	bne.n	800590c <__ssputs_r+0x70>
 8005948:	6921      	ldr	r1, [r4, #16]
 800594a:	4650      	mov	r0, sl
 800594c:	f7ff fec8 	bl	80056e0 <_free_r>
 8005950:	e7c7      	b.n	80058e2 <__ssputs_r+0x46>
	...

08005954 <_svfiprintf_r>:
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	4698      	mov	r8, r3
 800595a:	898b      	ldrh	r3, [r1, #12]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	b09d      	sub	sp, #116	; 0x74
 8005960:	4607      	mov	r7, r0
 8005962:	460d      	mov	r5, r1
 8005964:	4614      	mov	r4, r2
 8005966:	d50e      	bpl.n	8005986 <_svfiprintf_r+0x32>
 8005968:	690b      	ldr	r3, [r1, #16]
 800596a:	b963      	cbnz	r3, 8005986 <_svfiprintf_r+0x32>
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	f7ff ff21 	bl	80057b4 <_malloc_r>
 8005972:	6028      	str	r0, [r5, #0]
 8005974:	6128      	str	r0, [r5, #16]
 8005976:	b920      	cbnz	r0, 8005982 <_svfiprintf_r+0x2e>
 8005978:	230c      	movs	r3, #12
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005980:	e0d1      	b.n	8005b26 <_svfiprintf_r+0x1d2>
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	616b      	str	r3, [r5, #20]
 8005986:	2300      	movs	r3, #0
 8005988:	9309      	str	r3, [sp, #36]	; 0x24
 800598a:	2320      	movs	r3, #32
 800598c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005990:	f8cd 800c 	str.w	r8, [sp, #12]
 8005994:	2330      	movs	r3, #48	; 0x30
 8005996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b40 <_svfiprintf_r+0x1ec>
 800599a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800599e:	f04f 0901 	mov.w	r9, #1
 80059a2:	4623      	mov	r3, r4
 80059a4:	469a      	mov	sl, r3
 80059a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059aa:	b10a      	cbz	r2, 80059b0 <_svfiprintf_r+0x5c>
 80059ac:	2a25      	cmp	r2, #37	; 0x25
 80059ae:	d1f9      	bne.n	80059a4 <_svfiprintf_r+0x50>
 80059b0:	ebba 0b04 	subs.w	fp, sl, r4
 80059b4:	d00b      	beq.n	80059ce <_svfiprintf_r+0x7a>
 80059b6:	465b      	mov	r3, fp
 80059b8:	4622      	mov	r2, r4
 80059ba:	4629      	mov	r1, r5
 80059bc:	4638      	mov	r0, r7
 80059be:	f7ff ff6d 	bl	800589c <__ssputs_r>
 80059c2:	3001      	adds	r0, #1
 80059c4:	f000 80aa 	beq.w	8005b1c <_svfiprintf_r+0x1c8>
 80059c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ca:	445a      	add	r2, fp
 80059cc:	9209      	str	r2, [sp, #36]	; 0x24
 80059ce:	f89a 3000 	ldrb.w	r3, [sl]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80a2 	beq.w	8005b1c <_svfiprintf_r+0x1c8>
 80059d8:	2300      	movs	r3, #0
 80059da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059e2:	f10a 0a01 	add.w	sl, sl, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	9307      	str	r3, [sp, #28]
 80059ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ee:	931a      	str	r3, [sp, #104]	; 0x68
 80059f0:	4654      	mov	r4, sl
 80059f2:	2205      	movs	r2, #5
 80059f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f8:	4851      	ldr	r0, [pc, #324]	; (8005b40 <_svfiprintf_r+0x1ec>)
 80059fa:	f7fa fbc1 	bl	8000180 <memchr>
 80059fe:	9a04      	ldr	r2, [sp, #16]
 8005a00:	b9d8      	cbnz	r0, 8005a3a <_svfiprintf_r+0xe6>
 8005a02:	06d0      	lsls	r0, r2, #27
 8005a04:	bf44      	itt	mi
 8005a06:	2320      	movmi	r3, #32
 8005a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a0c:	0711      	lsls	r1, r2, #28
 8005a0e:	bf44      	itt	mi
 8005a10:	232b      	movmi	r3, #43	; 0x2b
 8005a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a16:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1c:	d015      	beq.n	8005a4a <_svfiprintf_r+0xf6>
 8005a1e:	9a07      	ldr	r2, [sp, #28]
 8005a20:	4654      	mov	r4, sl
 8005a22:	2000      	movs	r0, #0
 8005a24:	f04f 0c0a 	mov.w	ip, #10
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a2e:	3b30      	subs	r3, #48	; 0x30
 8005a30:	2b09      	cmp	r3, #9
 8005a32:	d94e      	bls.n	8005ad2 <_svfiprintf_r+0x17e>
 8005a34:	b1b0      	cbz	r0, 8005a64 <_svfiprintf_r+0x110>
 8005a36:	9207      	str	r2, [sp, #28]
 8005a38:	e014      	b.n	8005a64 <_svfiprintf_r+0x110>
 8005a3a:	eba0 0308 	sub.w	r3, r0, r8
 8005a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	46a2      	mov	sl, r4
 8005a48:	e7d2      	b.n	80059f0 <_svfiprintf_r+0x9c>
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	9103      	str	r1, [sp, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bfbb      	ittet	lt
 8005a56:	425b      	neglt	r3, r3
 8005a58:	f042 0202 	orrlt.w	r2, r2, #2
 8005a5c:	9307      	strge	r3, [sp, #28]
 8005a5e:	9307      	strlt	r3, [sp, #28]
 8005a60:	bfb8      	it	lt
 8005a62:	9204      	strlt	r2, [sp, #16]
 8005a64:	7823      	ldrb	r3, [r4, #0]
 8005a66:	2b2e      	cmp	r3, #46	; 0x2e
 8005a68:	d10c      	bne.n	8005a84 <_svfiprintf_r+0x130>
 8005a6a:	7863      	ldrb	r3, [r4, #1]
 8005a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6e:	d135      	bne.n	8005adc <_svfiprintf_r+0x188>
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	9203      	str	r2, [sp, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfb8      	it	lt
 8005a7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a80:	3402      	adds	r4, #2
 8005a82:	9305      	str	r3, [sp, #20]
 8005a84:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005b44 <_svfiprintf_r+0x1f0>
 8005a88:	7821      	ldrb	r1, [r4, #0]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	f7fa fb77 	bl	8000180 <memchr>
 8005a92:	b140      	cbz	r0, 8005aa6 <_svfiprintf_r+0x152>
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	eba0 000a 	sub.w	r0, r0, sl
 8005a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a9e:	9b04      	ldr	r3, [sp, #16]
 8005aa0:	4303      	orrs	r3, r0
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	9304      	str	r3, [sp, #16]
 8005aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aaa:	4827      	ldr	r0, [pc, #156]	; (8005b48 <_svfiprintf_r+0x1f4>)
 8005aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ab0:	2206      	movs	r2, #6
 8005ab2:	f7fa fb65 	bl	8000180 <memchr>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d038      	beq.n	8005b2c <_svfiprintf_r+0x1d8>
 8005aba:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <_svfiprintf_r+0x1f8>)
 8005abc:	bb1b      	cbnz	r3, 8005b06 <_svfiprintf_r+0x1b2>
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	3307      	adds	r3, #7
 8005ac2:	f023 0307 	bic.w	r3, r3, #7
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	9303      	str	r3, [sp, #12]
 8005aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005acc:	4433      	add	r3, r6
 8005ace:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad0:	e767      	b.n	80059a2 <_svfiprintf_r+0x4e>
 8005ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	2001      	movs	r0, #1
 8005ada:	e7a5      	b.n	8005a28 <_svfiprintf_r+0xd4>
 8005adc:	2300      	movs	r3, #0
 8005ade:	3401      	adds	r4, #1
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f04f 0c0a 	mov.w	ip, #10
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aee:	3a30      	subs	r2, #48	; 0x30
 8005af0:	2a09      	cmp	r2, #9
 8005af2:	d903      	bls.n	8005afc <_svfiprintf_r+0x1a8>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0c5      	beq.n	8005a84 <_svfiprintf_r+0x130>
 8005af8:	9105      	str	r1, [sp, #20]
 8005afa:	e7c3      	b.n	8005a84 <_svfiprintf_r+0x130>
 8005afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b00:	4604      	mov	r4, r0
 8005b02:	2301      	movs	r3, #1
 8005b04:	e7f0      	b.n	8005ae8 <_svfiprintf_r+0x194>
 8005b06:	ab03      	add	r3, sp, #12
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	462a      	mov	r2, r5
 8005b0c:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <_svfiprintf_r+0x1fc>)
 8005b0e:	a904      	add	r1, sp, #16
 8005b10:	4638      	mov	r0, r7
 8005b12:	f3af 8000 	nop.w
 8005b16:	1c42      	adds	r2, r0, #1
 8005b18:	4606      	mov	r6, r0
 8005b1a:	d1d6      	bne.n	8005aca <_svfiprintf_r+0x176>
 8005b1c:	89ab      	ldrh	r3, [r5, #12]
 8005b1e:	065b      	lsls	r3, r3, #25
 8005b20:	f53f af2c 	bmi.w	800597c <_svfiprintf_r+0x28>
 8005b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b26:	b01d      	add	sp, #116	; 0x74
 8005b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2c:	ab03      	add	r3, sp, #12
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	462a      	mov	r2, r5
 8005b32:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <_svfiprintf_r+0x1fc>)
 8005b34:	a904      	add	r1, sp, #16
 8005b36:	4638      	mov	r0, r7
 8005b38:	f000 f9d2 	bl	8005ee0 <_printf_i>
 8005b3c:	e7eb      	b.n	8005b16 <_svfiprintf_r+0x1c2>
 8005b3e:	bf00      	nop
 8005b40:	08006cc9 	.word	0x08006cc9
 8005b44:	08006ccf 	.word	0x08006ccf
 8005b48:	08006cd3 	.word	0x08006cd3
 8005b4c:	00000000 	.word	0x00000000
 8005b50:	0800589d 	.word	0x0800589d

08005b54 <__sfputc_r>:
 8005b54:	6893      	ldr	r3, [r2, #8]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	b410      	push	{r4}
 8005b5c:	6093      	str	r3, [r2, #8]
 8005b5e:	da07      	bge.n	8005b70 <__sfputc_r+0x1c>
 8005b60:	6994      	ldr	r4, [r2, #24]
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	db01      	blt.n	8005b6a <__sfputc_r+0x16>
 8005b66:	290a      	cmp	r1, #10
 8005b68:	d102      	bne.n	8005b70 <__sfputc_r+0x1c>
 8005b6a:	bc10      	pop	{r4}
 8005b6c:	f000 baee 	b.w	800614c <__swbuf_r>
 8005b70:	6813      	ldr	r3, [r2, #0]
 8005b72:	1c58      	adds	r0, r3, #1
 8005b74:	6010      	str	r0, [r2, #0]
 8005b76:	7019      	strb	r1, [r3, #0]
 8005b78:	4608      	mov	r0, r1
 8005b7a:	bc10      	pop	{r4}
 8005b7c:	4770      	bx	lr

08005b7e <__sfputs_r>:
 8005b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b80:	4606      	mov	r6, r0
 8005b82:	460f      	mov	r7, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	18d5      	adds	r5, r2, r3
 8005b88:	42ac      	cmp	r4, r5
 8005b8a:	d101      	bne.n	8005b90 <__sfputs_r+0x12>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e007      	b.n	8005ba0 <__sfputs_r+0x22>
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	463a      	mov	r2, r7
 8005b96:	4630      	mov	r0, r6
 8005b98:	f7ff ffdc 	bl	8005b54 <__sfputc_r>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d1f3      	bne.n	8005b88 <__sfputs_r+0xa>
 8005ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ba4 <_vfiprintf_r>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	460d      	mov	r5, r1
 8005baa:	b09d      	sub	sp, #116	; 0x74
 8005bac:	4614      	mov	r4, r2
 8005bae:	4698      	mov	r8, r3
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	b118      	cbz	r0, 8005bbc <_vfiprintf_r+0x18>
 8005bb4:	6983      	ldr	r3, [r0, #24]
 8005bb6:	b90b      	cbnz	r3, 8005bbc <_vfiprintf_r+0x18>
 8005bb8:	f000 fca6 	bl	8006508 <__sinit>
 8005bbc:	4b89      	ldr	r3, [pc, #548]	; (8005de4 <_vfiprintf_r+0x240>)
 8005bbe:	429d      	cmp	r5, r3
 8005bc0:	d11b      	bne.n	8005bfa <_vfiprintf_r+0x56>
 8005bc2:	6875      	ldr	r5, [r6, #4]
 8005bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	d405      	bmi.n	8005bd6 <_vfiprintf_r+0x32>
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	059a      	lsls	r2, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_vfiprintf_r+0x32>
 8005bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bd2:	f000 fd37 	bl	8006644 <__retarget_lock_acquire_recursive>
 8005bd6:	89ab      	ldrh	r3, [r5, #12]
 8005bd8:	071b      	lsls	r3, r3, #28
 8005bda:	d501      	bpl.n	8005be0 <_vfiprintf_r+0x3c>
 8005bdc:	692b      	ldr	r3, [r5, #16]
 8005bde:	b9eb      	cbnz	r3, 8005c1c <_vfiprintf_r+0x78>
 8005be0:	4629      	mov	r1, r5
 8005be2:	4630      	mov	r0, r6
 8005be4:	f000 fb04 	bl	80061f0 <__swsetup_r>
 8005be8:	b1c0      	cbz	r0, 8005c1c <_vfiprintf_r+0x78>
 8005bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bec:	07dc      	lsls	r4, r3, #31
 8005bee:	d50e      	bpl.n	8005c0e <_vfiprintf_r+0x6a>
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf4:	b01d      	add	sp, #116	; 0x74
 8005bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfa:	4b7b      	ldr	r3, [pc, #492]	; (8005de8 <_vfiprintf_r+0x244>)
 8005bfc:	429d      	cmp	r5, r3
 8005bfe:	d101      	bne.n	8005c04 <_vfiprintf_r+0x60>
 8005c00:	68b5      	ldr	r5, [r6, #8]
 8005c02:	e7df      	b.n	8005bc4 <_vfiprintf_r+0x20>
 8005c04:	4b79      	ldr	r3, [pc, #484]	; (8005dec <_vfiprintf_r+0x248>)
 8005c06:	429d      	cmp	r5, r3
 8005c08:	bf08      	it	eq
 8005c0a:	68f5      	ldreq	r5, [r6, #12]
 8005c0c:	e7da      	b.n	8005bc4 <_vfiprintf_r+0x20>
 8005c0e:	89ab      	ldrh	r3, [r5, #12]
 8005c10:	0598      	lsls	r0, r3, #22
 8005c12:	d4ed      	bmi.n	8005bf0 <_vfiprintf_r+0x4c>
 8005c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c16:	f000 fd16 	bl	8006646 <__retarget_lock_release_recursive>
 8005c1a:	e7e9      	b.n	8005bf0 <_vfiprintf_r+0x4c>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c20:	2320      	movs	r3, #32
 8005c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c2a:	2330      	movs	r3, #48	; 0x30
 8005c2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005df0 <_vfiprintf_r+0x24c>
 8005c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c34:	f04f 0901 	mov.w	r9, #1
 8005c38:	4623      	mov	r3, r4
 8005c3a:	469a      	mov	sl, r3
 8005c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c40:	b10a      	cbz	r2, 8005c46 <_vfiprintf_r+0xa2>
 8005c42:	2a25      	cmp	r2, #37	; 0x25
 8005c44:	d1f9      	bne.n	8005c3a <_vfiprintf_r+0x96>
 8005c46:	ebba 0b04 	subs.w	fp, sl, r4
 8005c4a:	d00b      	beq.n	8005c64 <_vfiprintf_r+0xc0>
 8005c4c:	465b      	mov	r3, fp
 8005c4e:	4622      	mov	r2, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff ff93 	bl	8005b7e <__sfputs_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f000 80aa 	beq.w	8005db2 <_vfiprintf_r+0x20e>
 8005c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c60:	445a      	add	r2, fp
 8005c62:	9209      	str	r2, [sp, #36]	; 0x24
 8005c64:	f89a 3000 	ldrb.w	r3, [sl]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80a2 	beq.w	8005db2 <_vfiprintf_r+0x20e>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c78:	f10a 0a01 	add.w	sl, sl, #1
 8005c7c:	9304      	str	r3, [sp, #16]
 8005c7e:	9307      	str	r3, [sp, #28]
 8005c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c84:	931a      	str	r3, [sp, #104]	; 0x68
 8005c86:	4654      	mov	r4, sl
 8005c88:	2205      	movs	r2, #5
 8005c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8e:	4858      	ldr	r0, [pc, #352]	; (8005df0 <_vfiprintf_r+0x24c>)
 8005c90:	f7fa fa76 	bl	8000180 <memchr>
 8005c94:	9a04      	ldr	r2, [sp, #16]
 8005c96:	b9d8      	cbnz	r0, 8005cd0 <_vfiprintf_r+0x12c>
 8005c98:	06d1      	lsls	r1, r2, #27
 8005c9a:	bf44      	itt	mi
 8005c9c:	2320      	movmi	r3, #32
 8005c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca2:	0713      	lsls	r3, r2, #28
 8005ca4:	bf44      	itt	mi
 8005ca6:	232b      	movmi	r3, #43	; 0x2b
 8005ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cac:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cb2:	d015      	beq.n	8005ce0 <_vfiprintf_r+0x13c>
 8005cb4:	9a07      	ldr	r2, [sp, #28]
 8005cb6:	4654      	mov	r4, sl
 8005cb8:	2000      	movs	r0, #0
 8005cba:	f04f 0c0a 	mov.w	ip, #10
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cc4:	3b30      	subs	r3, #48	; 0x30
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	d94e      	bls.n	8005d68 <_vfiprintf_r+0x1c4>
 8005cca:	b1b0      	cbz	r0, 8005cfa <_vfiprintf_r+0x156>
 8005ccc:	9207      	str	r2, [sp, #28]
 8005cce:	e014      	b.n	8005cfa <_vfiprintf_r+0x156>
 8005cd0:	eba0 0308 	sub.w	r3, r0, r8
 8005cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	46a2      	mov	sl, r4
 8005cde:	e7d2      	b.n	8005c86 <_vfiprintf_r+0xe2>
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	1d19      	adds	r1, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	9103      	str	r1, [sp, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bfbb      	ittet	lt
 8005cec:	425b      	neglt	r3, r3
 8005cee:	f042 0202 	orrlt.w	r2, r2, #2
 8005cf2:	9307      	strge	r3, [sp, #28]
 8005cf4:	9307      	strlt	r3, [sp, #28]
 8005cf6:	bfb8      	it	lt
 8005cf8:	9204      	strlt	r2, [sp, #16]
 8005cfa:	7823      	ldrb	r3, [r4, #0]
 8005cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8005cfe:	d10c      	bne.n	8005d1a <_vfiprintf_r+0x176>
 8005d00:	7863      	ldrb	r3, [r4, #1]
 8005d02:	2b2a      	cmp	r3, #42	; 0x2a
 8005d04:	d135      	bne.n	8005d72 <_vfiprintf_r+0x1ce>
 8005d06:	9b03      	ldr	r3, [sp, #12]
 8005d08:	1d1a      	adds	r2, r3, #4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	9203      	str	r2, [sp, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bfb8      	it	lt
 8005d12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d16:	3402      	adds	r4, #2
 8005d18:	9305      	str	r3, [sp, #20]
 8005d1a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005df4 <_vfiprintf_r+0x250>
 8005d1e:	7821      	ldrb	r1, [r4, #0]
 8005d20:	2203      	movs	r2, #3
 8005d22:	4650      	mov	r0, sl
 8005d24:	f7fa fa2c 	bl	8000180 <memchr>
 8005d28:	b140      	cbz	r0, 8005d3c <_vfiprintf_r+0x198>
 8005d2a:	2340      	movs	r3, #64	; 0x40
 8005d2c:	eba0 000a 	sub.w	r0, r0, sl
 8005d30:	fa03 f000 	lsl.w	r0, r3, r0
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	4303      	orrs	r3, r0
 8005d38:	3401      	adds	r4, #1
 8005d3a:	9304      	str	r3, [sp, #16]
 8005d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d40:	482d      	ldr	r0, [pc, #180]	; (8005df8 <_vfiprintf_r+0x254>)
 8005d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d46:	2206      	movs	r2, #6
 8005d48:	f7fa fa1a 	bl	8000180 <memchr>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d03f      	beq.n	8005dd0 <_vfiprintf_r+0x22c>
 8005d50:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <_vfiprintf_r+0x258>)
 8005d52:	bb1b      	cbnz	r3, 8005d9c <_vfiprintf_r+0x1f8>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	3307      	adds	r3, #7
 8005d58:	f023 0307 	bic.w	r3, r3, #7
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	9303      	str	r3, [sp, #12]
 8005d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d62:	443b      	add	r3, r7
 8005d64:	9309      	str	r3, [sp, #36]	; 0x24
 8005d66:	e767      	b.n	8005c38 <_vfiprintf_r+0x94>
 8005d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	2001      	movs	r0, #1
 8005d70:	e7a5      	b.n	8005cbe <_vfiprintf_r+0x11a>
 8005d72:	2300      	movs	r3, #0
 8005d74:	3401      	adds	r4, #1
 8005d76:	9305      	str	r3, [sp, #20]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	f04f 0c0a 	mov.w	ip, #10
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d84:	3a30      	subs	r2, #48	; 0x30
 8005d86:	2a09      	cmp	r2, #9
 8005d88:	d903      	bls.n	8005d92 <_vfiprintf_r+0x1ee>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0c5      	beq.n	8005d1a <_vfiprintf_r+0x176>
 8005d8e:	9105      	str	r1, [sp, #20]
 8005d90:	e7c3      	b.n	8005d1a <_vfiprintf_r+0x176>
 8005d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d96:	4604      	mov	r4, r0
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e7f0      	b.n	8005d7e <_vfiprintf_r+0x1da>
 8005d9c:	ab03      	add	r3, sp, #12
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	462a      	mov	r2, r5
 8005da2:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <_vfiprintf_r+0x25c>)
 8005da4:	a904      	add	r1, sp, #16
 8005da6:	4630      	mov	r0, r6
 8005da8:	f3af 8000 	nop.w
 8005dac:	4607      	mov	r7, r0
 8005dae:	1c78      	adds	r0, r7, #1
 8005db0:	d1d6      	bne.n	8005d60 <_vfiprintf_r+0x1bc>
 8005db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005db4:	07d9      	lsls	r1, r3, #31
 8005db6:	d405      	bmi.n	8005dc4 <_vfiprintf_r+0x220>
 8005db8:	89ab      	ldrh	r3, [r5, #12]
 8005dba:	059a      	lsls	r2, r3, #22
 8005dbc:	d402      	bmi.n	8005dc4 <_vfiprintf_r+0x220>
 8005dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dc0:	f000 fc41 	bl	8006646 <__retarget_lock_release_recursive>
 8005dc4:	89ab      	ldrh	r3, [r5, #12]
 8005dc6:	065b      	lsls	r3, r3, #25
 8005dc8:	f53f af12 	bmi.w	8005bf0 <_vfiprintf_r+0x4c>
 8005dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dce:	e711      	b.n	8005bf4 <_vfiprintf_r+0x50>
 8005dd0:	ab03      	add	r3, sp, #12
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <_vfiprintf_r+0x25c>)
 8005dd8:	a904      	add	r1, sp, #16
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f000 f880 	bl	8005ee0 <_printf_i>
 8005de0:	e7e4      	b.n	8005dac <_vfiprintf_r+0x208>
 8005de2:	bf00      	nop
 8005de4:	08006d1c 	.word	0x08006d1c
 8005de8:	08006d3c 	.word	0x08006d3c
 8005dec:	08006cfc 	.word	0x08006cfc
 8005df0:	08006cc9 	.word	0x08006cc9
 8005df4:	08006ccf 	.word	0x08006ccf
 8005df8:	08006cd3 	.word	0x08006cd3
 8005dfc:	00000000 	.word	0x00000000
 8005e00:	08005b7f 	.word	0x08005b7f

08005e04 <_printf_common>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4616      	mov	r6, r2
 8005e0a:	4699      	mov	r9, r3
 8005e0c:	688a      	ldr	r2, [r1, #8]
 8005e0e:	690b      	ldr	r3, [r1, #16]
 8005e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	bfb8      	it	lt
 8005e18:	4613      	movlt	r3, r2
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e20:	4607      	mov	r7, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b10a      	cbz	r2, 8005e2a <_printf_common+0x26>
 8005e26:	3301      	adds	r3, #1
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	0699      	lsls	r1, r3, #26
 8005e2e:	bf42      	ittt	mi
 8005e30:	6833      	ldrmi	r3, [r6, #0]
 8005e32:	3302      	addmi	r3, #2
 8005e34:	6033      	strmi	r3, [r6, #0]
 8005e36:	6825      	ldr	r5, [r4, #0]
 8005e38:	f015 0506 	ands.w	r5, r5, #6
 8005e3c:	d106      	bne.n	8005e4c <_printf_common+0x48>
 8005e3e:	f104 0a19 	add.w	sl, r4, #25
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	6832      	ldr	r2, [r6, #0]
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dc26      	bgt.n	8005e9a <_printf_common+0x96>
 8005e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e50:	1e13      	subs	r3, r2, #0
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	bf18      	it	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	0692      	lsls	r2, r2, #26
 8005e5a:	d42b      	bmi.n	8005eb4 <_printf_common+0xb0>
 8005e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e60:	4649      	mov	r1, r9
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d01e      	beq.n	8005ea8 <_printf_common+0xa4>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	68e5      	ldr	r5, [r4, #12]
 8005e6e:	6832      	ldr	r2, [r6, #0]
 8005e70:	f003 0306 	and.w	r3, r3, #6
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	bf08      	it	eq
 8005e78:	1aad      	subeq	r5, r5, r2
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	6922      	ldr	r2, [r4, #16]
 8005e7e:	bf0c      	ite	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	2500      	movne	r5, #0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	bfc4      	itt	gt
 8005e8a:	1a9b      	subgt	r3, r3, r2
 8005e8c:	18ed      	addgt	r5, r5, r3
 8005e8e:	2600      	movs	r6, #0
 8005e90:	341a      	adds	r4, #26
 8005e92:	42b5      	cmp	r5, r6
 8005e94:	d11a      	bne.n	8005ecc <_printf_common+0xc8>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e008      	b.n	8005eac <_printf_common+0xa8>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d103      	bne.n	8005eb0 <_printf_common+0xac>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7c6      	b.n	8005e42 <_printf_common+0x3e>
 8005eb4:	18e1      	adds	r1, r4, r3
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	2030      	movs	r0, #48	; 0x30
 8005eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ebe:	4422      	add	r2, r4
 8005ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec8:	3302      	adds	r3, #2
 8005eca:	e7c7      	b.n	8005e5c <_printf_common+0x58>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c0      	blx	r8
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d0e6      	beq.n	8005ea8 <_printf_common+0xa4>
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7d9      	b.n	8005e92 <_printf_common+0x8e>
	...

08005ee0 <_printf_i>:
 8005ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	7e0f      	ldrb	r7, [r1, #24]
 8005ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ee8:	2f78      	cmp	r7, #120	; 0x78
 8005eea:	4691      	mov	r9, r2
 8005eec:	4680      	mov	r8, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ef6:	d807      	bhi.n	8005f08 <_printf_i+0x28>
 8005ef8:	2f62      	cmp	r7, #98	; 0x62
 8005efa:	d80a      	bhi.n	8005f12 <_printf_i+0x32>
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	f000 80d8 	beq.w	80060b2 <_printf_i+0x1d2>
 8005f02:	2f58      	cmp	r7, #88	; 0x58
 8005f04:	f000 80a3 	beq.w	800604e <_printf_i+0x16e>
 8005f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f10:	e03a      	b.n	8005f88 <_printf_i+0xa8>
 8005f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f16:	2b15      	cmp	r3, #21
 8005f18:	d8f6      	bhi.n	8005f08 <_printf_i+0x28>
 8005f1a:	a101      	add	r1, pc, #4	; (adr r1, 8005f20 <_printf_i+0x40>)
 8005f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	08005f8d 	.word	0x08005f8d
 8005f28:	08005f09 	.word	0x08005f09
 8005f2c:	08005f09 	.word	0x08005f09
 8005f30:	08005f09 	.word	0x08005f09
 8005f34:	08005f09 	.word	0x08005f09
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08005f09 	.word	0x08005f09
 8005f40:	08005f09 	.word	0x08005f09
 8005f44:	08005f09 	.word	0x08005f09
 8005f48:	08005f09 	.word	0x08005f09
 8005f4c:	08006099 	.word	0x08006099
 8005f50:	08005fbd 	.word	0x08005fbd
 8005f54:	0800607b 	.word	0x0800607b
 8005f58:	08005f09 	.word	0x08005f09
 8005f5c:	08005f09 	.word	0x08005f09
 8005f60:	080060bb 	.word	0x080060bb
 8005f64:	08005f09 	.word	0x08005f09
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005f09 	.word	0x08005f09
 8005f70:	08005f09 	.word	0x08005f09
 8005f74:	08006083 	.word	0x08006083
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	602a      	str	r2, [r5, #0]
 8005f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0a3      	b.n	80060d4 <_printf_i+0x1f4>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	6829      	ldr	r1, [r5, #0]
 8005f90:	0606      	lsls	r6, r0, #24
 8005f92:	f101 0304 	add.w	r3, r1, #4
 8005f96:	d50a      	bpl.n	8005fae <_printf_i+0xce>
 8005f98:	680e      	ldr	r6, [r1, #0]
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	da03      	bge.n	8005fa8 <_printf_i+0xc8>
 8005fa0:	232d      	movs	r3, #45	; 0x2d
 8005fa2:	4276      	negs	r6, r6
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa8:	485e      	ldr	r0, [pc, #376]	; (8006124 <_printf_i+0x244>)
 8005faa:	230a      	movs	r3, #10
 8005fac:	e019      	b.n	8005fe2 <_printf_i+0x102>
 8005fae:	680e      	ldr	r6, [r1, #0]
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fb6:	bf18      	it	ne
 8005fb8:	b236      	sxthne	r6, r6
 8005fba:	e7ef      	b.n	8005f9c <_printf_i+0xbc>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	6820      	ldr	r0, [r4, #0]
 8005fc0:	1d19      	adds	r1, r3, #4
 8005fc2:	6029      	str	r1, [r5, #0]
 8005fc4:	0601      	lsls	r1, r0, #24
 8005fc6:	d501      	bpl.n	8005fcc <_printf_i+0xec>
 8005fc8:	681e      	ldr	r6, [r3, #0]
 8005fca:	e002      	b.n	8005fd2 <_printf_i+0xf2>
 8005fcc:	0646      	lsls	r6, r0, #25
 8005fce:	d5fb      	bpl.n	8005fc8 <_printf_i+0xe8>
 8005fd0:	881e      	ldrh	r6, [r3, #0]
 8005fd2:	4854      	ldr	r0, [pc, #336]	; (8006124 <_printf_i+0x244>)
 8005fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2308      	moveq	r3, #8
 8005fda:	230a      	movne	r3, #10
 8005fdc:	2100      	movs	r1, #0
 8005fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe2:	6865      	ldr	r5, [r4, #4]
 8005fe4:	60a5      	str	r5, [r4, #8]
 8005fe6:	2d00      	cmp	r5, #0
 8005fe8:	bfa2      	ittt	ge
 8005fea:	6821      	ldrge	r1, [r4, #0]
 8005fec:	f021 0104 	bicge.w	r1, r1, #4
 8005ff0:	6021      	strge	r1, [r4, #0]
 8005ff2:	b90e      	cbnz	r6, 8005ff8 <_printf_i+0x118>
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	d04d      	beq.n	8006094 <_printf_i+0x1b4>
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8006002:	5dc7      	ldrb	r7, [r0, r7]
 8006004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006008:	4637      	mov	r7, r6
 800600a:	42bb      	cmp	r3, r7
 800600c:	460e      	mov	r6, r1
 800600e:	d9f4      	bls.n	8005ffa <_printf_i+0x11a>
 8006010:	2b08      	cmp	r3, #8
 8006012:	d10b      	bne.n	800602c <_printf_i+0x14c>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	07de      	lsls	r6, r3, #31
 8006018:	d508      	bpl.n	800602c <_printf_i+0x14c>
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	6861      	ldr	r1, [r4, #4]
 800601e:	4299      	cmp	r1, r3
 8006020:	bfde      	ittt	le
 8006022:	2330      	movle	r3, #48	; 0x30
 8006024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006028:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800602c:	1b52      	subs	r2, r2, r5
 800602e:	6122      	str	r2, [r4, #16]
 8006030:	f8cd a000 	str.w	sl, [sp]
 8006034:	464b      	mov	r3, r9
 8006036:	aa03      	add	r2, sp, #12
 8006038:	4621      	mov	r1, r4
 800603a:	4640      	mov	r0, r8
 800603c:	f7ff fee2 	bl	8005e04 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	d14c      	bne.n	80060de <_printf_i+0x1fe>
 8006044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006048:	b004      	add	sp, #16
 800604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604e:	4835      	ldr	r0, [pc, #212]	; (8006124 <_printf_i+0x244>)
 8006050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006054:	6829      	ldr	r1, [r5, #0]
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f851 6b04 	ldr.w	r6, [r1], #4
 800605c:	6029      	str	r1, [r5, #0]
 800605e:	061d      	lsls	r5, r3, #24
 8006060:	d514      	bpl.n	800608c <_printf_i+0x1ac>
 8006062:	07df      	lsls	r7, r3, #31
 8006064:	bf44      	itt	mi
 8006066:	f043 0320 	orrmi.w	r3, r3, #32
 800606a:	6023      	strmi	r3, [r4, #0]
 800606c:	b91e      	cbnz	r6, 8006076 <_printf_i+0x196>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f023 0320 	bic.w	r3, r3, #32
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	2310      	movs	r3, #16
 8006078:	e7b0      	b.n	8005fdc <_printf_i+0xfc>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f043 0320 	orr.w	r3, r3, #32
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	2378      	movs	r3, #120	; 0x78
 8006084:	4828      	ldr	r0, [pc, #160]	; (8006128 <_printf_i+0x248>)
 8006086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800608a:	e7e3      	b.n	8006054 <_printf_i+0x174>
 800608c:	0659      	lsls	r1, r3, #25
 800608e:	bf48      	it	mi
 8006090:	b2b6      	uxthmi	r6, r6
 8006092:	e7e6      	b.n	8006062 <_printf_i+0x182>
 8006094:	4615      	mov	r5, r2
 8006096:	e7bb      	b.n	8006010 <_printf_i+0x130>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	6826      	ldr	r6, [r4, #0]
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6028      	str	r0, [r5, #0]
 80060a2:	0635      	lsls	r5, r6, #24
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0x1cc>
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0x1d2>
 80060ac:	0670      	lsls	r0, r6, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0x1c8>
 80060b0:	8019      	strh	r1, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	4615      	mov	r5, r2
 80060b8:	e7ba      	b.n	8006030 <_printf_i+0x150>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	681d      	ldr	r5, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	2100      	movs	r1, #0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f7fa f85a 	bl	8000180 <memchr>
 80060cc:	b108      	cbz	r0, 80060d2 <_printf_i+0x1f2>
 80060ce:	1b40      	subs	r0, r0, r5
 80060d0:	6060      	str	r0, [r4, #4]
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	2300      	movs	r3, #0
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060dc:	e7a8      	b.n	8006030 <_printf_i+0x150>
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	462a      	mov	r2, r5
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0ab      	beq.n	8006044 <_printf_i+0x164>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	d413      	bmi.n	800611a <_printf_i+0x23a>
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bfb8      	it	lt
 80060fa:	4618      	movlt	r0, r3
 80060fc:	e7a4      	b.n	8006048 <_printf_i+0x168>
 80060fe:	2301      	movs	r3, #1
 8006100:	4632      	mov	r2, r6
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d09b      	beq.n	8006044 <_printf_i+0x164>
 800610c:	3501      	adds	r5, #1
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	9903      	ldr	r1, [sp, #12]
 8006112:	1a5b      	subs	r3, r3, r1
 8006114:	42ab      	cmp	r3, r5
 8006116:	dcf2      	bgt.n	80060fe <_printf_i+0x21e>
 8006118:	e7eb      	b.n	80060f2 <_printf_i+0x212>
 800611a:	2500      	movs	r5, #0
 800611c:	f104 0619 	add.w	r6, r4, #25
 8006120:	e7f5      	b.n	800610e <_printf_i+0x22e>
 8006122:	bf00      	nop
 8006124:	08006cda 	.word	0x08006cda
 8006128:	08006ceb 	.word	0x08006ceb

0800612c <_sbrk_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	; (8006148 <_sbrk_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fb fee4 	bl	8001f04 <_sbrk>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_sbrk_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_sbrk_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	200002e4 	.word	0x200002e4

0800614c <__swbuf_r>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	460e      	mov	r6, r1
 8006150:	4614      	mov	r4, r2
 8006152:	4605      	mov	r5, r0
 8006154:	b118      	cbz	r0, 800615e <__swbuf_r+0x12>
 8006156:	6983      	ldr	r3, [r0, #24]
 8006158:	b90b      	cbnz	r3, 800615e <__swbuf_r+0x12>
 800615a:	f000 f9d5 	bl	8006508 <__sinit>
 800615e:	4b21      	ldr	r3, [pc, #132]	; (80061e4 <__swbuf_r+0x98>)
 8006160:	429c      	cmp	r4, r3
 8006162:	d12b      	bne.n	80061bc <__swbuf_r+0x70>
 8006164:	686c      	ldr	r4, [r5, #4]
 8006166:	69a3      	ldr	r3, [r4, #24]
 8006168:	60a3      	str	r3, [r4, #8]
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	071a      	lsls	r2, r3, #28
 800616e:	d52f      	bpl.n	80061d0 <__swbuf_r+0x84>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	b36b      	cbz	r3, 80061d0 <__swbuf_r+0x84>
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	1ac0      	subs	r0, r0, r3
 800617a:	6963      	ldr	r3, [r4, #20]
 800617c:	b2f6      	uxtb	r6, r6
 800617e:	4283      	cmp	r3, r0
 8006180:	4637      	mov	r7, r6
 8006182:	dc04      	bgt.n	800618e <__swbuf_r+0x42>
 8006184:	4621      	mov	r1, r4
 8006186:	4628      	mov	r0, r5
 8006188:	f000 f92a 	bl	80063e0 <_fflush_r>
 800618c:	bb30      	cbnz	r0, 80061dc <__swbuf_r+0x90>
 800618e:	68a3      	ldr	r3, [r4, #8]
 8006190:	3b01      	subs	r3, #1
 8006192:	60a3      	str	r3, [r4, #8]
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	701e      	strb	r6, [r3, #0]
 800619c:	6963      	ldr	r3, [r4, #20]
 800619e:	3001      	adds	r0, #1
 80061a0:	4283      	cmp	r3, r0
 80061a2:	d004      	beq.n	80061ae <__swbuf_r+0x62>
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	07db      	lsls	r3, r3, #31
 80061a8:	d506      	bpl.n	80061b8 <__swbuf_r+0x6c>
 80061aa:	2e0a      	cmp	r6, #10
 80061ac:	d104      	bne.n	80061b8 <__swbuf_r+0x6c>
 80061ae:	4621      	mov	r1, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 f915 	bl	80063e0 <_fflush_r>
 80061b6:	b988      	cbnz	r0, 80061dc <__swbuf_r+0x90>
 80061b8:	4638      	mov	r0, r7
 80061ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <__swbuf_r+0x9c>)
 80061be:	429c      	cmp	r4, r3
 80061c0:	d101      	bne.n	80061c6 <__swbuf_r+0x7a>
 80061c2:	68ac      	ldr	r4, [r5, #8]
 80061c4:	e7cf      	b.n	8006166 <__swbuf_r+0x1a>
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <__swbuf_r+0xa0>)
 80061c8:	429c      	cmp	r4, r3
 80061ca:	bf08      	it	eq
 80061cc:	68ec      	ldreq	r4, [r5, #12]
 80061ce:	e7ca      	b.n	8006166 <__swbuf_r+0x1a>
 80061d0:	4621      	mov	r1, r4
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 f80c 	bl	80061f0 <__swsetup_r>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d0cb      	beq.n	8006174 <__swbuf_r+0x28>
 80061dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80061e0:	e7ea      	b.n	80061b8 <__swbuf_r+0x6c>
 80061e2:	bf00      	nop
 80061e4:	08006d1c 	.word	0x08006d1c
 80061e8:	08006d3c 	.word	0x08006d3c
 80061ec:	08006cfc 	.word	0x08006cfc

080061f0 <__swsetup_r>:
 80061f0:	4b32      	ldr	r3, [pc, #200]	; (80062bc <__swsetup_r+0xcc>)
 80061f2:	b570      	push	{r4, r5, r6, lr}
 80061f4:	681d      	ldr	r5, [r3, #0]
 80061f6:	4606      	mov	r6, r0
 80061f8:	460c      	mov	r4, r1
 80061fa:	b125      	cbz	r5, 8006206 <__swsetup_r+0x16>
 80061fc:	69ab      	ldr	r3, [r5, #24]
 80061fe:	b913      	cbnz	r3, 8006206 <__swsetup_r+0x16>
 8006200:	4628      	mov	r0, r5
 8006202:	f000 f981 	bl	8006508 <__sinit>
 8006206:	4b2e      	ldr	r3, [pc, #184]	; (80062c0 <__swsetup_r+0xd0>)
 8006208:	429c      	cmp	r4, r3
 800620a:	d10f      	bne.n	800622c <__swsetup_r+0x3c>
 800620c:	686c      	ldr	r4, [r5, #4]
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006214:	0719      	lsls	r1, r3, #28
 8006216:	d42c      	bmi.n	8006272 <__swsetup_r+0x82>
 8006218:	06dd      	lsls	r5, r3, #27
 800621a:	d411      	bmi.n	8006240 <__swsetup_r+0x50>
 800621c:	2309      	movs	r3, #9
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800622a:	e03e      	b.n	80062aa <__swsetup_r+0xba>
 800622c:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <__swsetup_r+0xd4>)
 800622e:	429c      	cmp	r4, r3
 8006230:	d101      	bne.n	8006236 <__swsetup_r+0x46>
 8006232:	68ac      	ldr	r4, [r5, #8]
 8006234:	e7eb      	b.n	800620e <__swsetup_r+0x1e>
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <__swsetup_r+0xd8>)
 8006238:	429c      	cmp	r4, r3
 800623a:	bf08      	it	eq
 800623c:	68ec      	ldreq	r4, [r5, #12]
 800623e:	e7e6      	b.n	800620e <__swsetup_r+0x1e>
 8006240:	0758      	lsls	r0, r3, #29
 8006242:	d512      	bpl.n	800626a <__swsetup_r+0x7a>
 8006244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006246:	b141      	cbz	r1, 800625a <__swsetup_r+0x6a>
 8006248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800624c:	4299      	cmp	r1, r3
 800624e:	d002      	beq.n	8006256 <__swsetup_r+0x66>
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff fa45 	bl	80056e0 <_free_r>
 8006256:	2300      	movs	r3, #0
 8006258:	6363      	str	r3, [r4, #52]	; 0x34
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	2300      	movs	r3, #0
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	f043 0308 	orr.w	r3, r3, #8
 8006270:	81a3      	strh	r3, [r4, #12]
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	b94b      	cbnz	r3, 800628a <__swsetup_r+0x9a>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800627c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006280:	d003      	beq.n	800628a <__swsetup_r+0x9a>
 8006282:	4621      	mov	r1, r4
 8006284:	4630      	mov	r0, r6
 8006286:	f000 fa05 	bl	8006694 <__smakebuf_r>
 800628a:	89a0      	ldrh	r0, [r4, #12]
 800628c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006290:	f010 0301 	ands.w	r3, r0, #1
 8006294:	d00a      	beq.n	80062ac <__swsetup_r+0xbc>
 8006296:	2300      	movs	r3, #0
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6963      	ldr	r3, [r4, #20]
 800629c:	425b      	negs	r3, r3
 800629e:	61a3      	str	r3, [r4, #24]
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	b943      	cbnz	r3, 80062b6 <__swsetup_r+0xc6>
 80062a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062a8:	d1ba      	bne.n	8006220 <__swsetup_r+0x30>
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	0781      	lsls	r1, r0, #30
 80062ae:	bf58      	it	pl
 80062b0:	6963      	ldrpl	r3, [r4, #20]
 80062b2:	60a3      	str	r3, [r4, #8]
 80062b4:	e7f4      	b.n	80062a0 <__swsetup_r+0xb0>
 80062b6:	2000      	movs	r0, #0
 80062b8:	e7f7      	b.n	80062aa <__swsetup_r+0xba>
 80062ba:	bf00      	nop
 80062bc:	20000010 	.word	0x20000010
 80062c0:	08006d1c 	.word	0x08006d1c
 80062c4:	08006d3c 	.word	0x08006d3c
 80062c8:	08006cfc 	.word	0x08006cfc

080062cc <abort>:
 80062cc:	b508      	push	{r3, lr}
 80062ce:	2006      	movs	r0, #6
 80062d0:	f000 fa9e 	bl	8006810 <raise>
 80062d4:	2001      	movs	r0, #1
 80062d6:	f7fb fda2 	bl	8001e1e <_exit>
	...

080062dc <__sflush_r>:
 80062dc:	898a      	ldrh	r2, [r1, #12]
 80062de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e0:	4605      	mov	r5, r0
 80062e2:	0710      	lsls	r0, r2, #28
 80062e4:	460c      	mov	r4, r1
 80062e6:	d457      	bmi.n	8006398 <__sflush_r+0xbc>
 80062e8:	684b      	ldr	r3, [r1, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	dc04      	bgt.n	80062f8 <__sflush_r+0x1c>
 80062ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dc01      	bgt.n	80062f8 <__sflush_r+0x1c>
 80062f4:	2000      	movs	r0, #0
 80062f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	d0fa      	beq.n	80062f4 <__sflush_r+0x18>
 80062fe:	2300      	movs	r3, #0
 8006300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006304:	682f      	ldr	r7, [r5, #0]
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	d032      	beq.n	8006370 <__sflush_r+0x94>
 800630a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	075a      	lsls	r2, r3, #29
 8006310:	d505      	bpl.n	800631e <__sflush_r+0x42>
 8006312:	6863      	ldr	r3, [r4, #4]
 8006314:	1ac0      	subs	r0, r0, r3
 8006316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006318:	b10b      	cbz	r3, 800631e <__sflush_r+0x42>
 800631a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800631c:	1ac0      	subs	r0, r0, r3
 800631e:	2300      	movs	r3, #0
 8006320:	4602      	mov	r2, r0
 8006322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006324:	6a21      	ldr	r1, [r4, #32]
 8006326:	4628      	mov	r0, r5
 8006328:	47b0      	blx	r6
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	d106      	bne.n	800633e <__sflush_r+0x62>
 8006330:	6829      	ldr	r1, [r5, #0]
 8006332:	291d      	cmp	r1, #29
 8006334:	d82c      	bhi.n	8006390 <__sflush_r+0xb4>
 8006336:	4a29      	ldr	r2, [pc, #164]	; (80063dc <__sflush_r+0x100>)
 8006338:	40ca      	lsrs	r2, r1
 800633a:	07d6      	lsls	r6, r2, #31
 800633c:	d528      	bpl.n	8006390 <__sflush_r+0xb4>
 800633e:	2200      	movs	r2, #0
 8006340:	6062      	str	r2, [r4, #4]
 8006342:	04d9      	lsls	r1, r3, #19
 8006344:	6922      	ldr	r2, [r4, #16]
 8006346:	6022      	str	r2, [r4, #0]
 8006348:	d504      	bpl.n	8006354 <__sflush_r+0x78>
 800634a:	1c42      	adds	r2, r0, #1
 800634c:	d101      	bne.n	8006352 <__sflush_r+0x76>
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	b903      	cbnz	r3, 8006354 <__sflush_r+0x78>
 8006352:	6560      	str	r0, [r4, #84]	; 0x54
 8006354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006356:	602f      	str	r7, [r5, #0]
 8006358:	2900      	cmp	r1, #0
 800635a:	d0cb      	beq.n	80062f4 <__sflush_r+0x18>
 800635c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006360:	4299      	cmp	r1, r3
 8006362:	d002      	beq.n	800636a <__sflush_r+0x8e>
 8006364:	4628      	mov	r0, r5
 8006366:	f7ff f9bb 	bl	80056e0 <_free_r>
 800636a:	2000      	movs	r0, #0
 800636c:	6360      	str	r0, [r4, #52]	; 0x34
 800636e:	e7c2      	b.n	80062f6 <__sflush_r+0x1a>
 8006370:	6a21      	ldr	r1, [r4, #32]
 8006372:	2301      	movs	r3, #1
 8006374:	4628      	mov	r0, r5
 8006376:	47b0      	blx	r6
 8006378:	1c41      	adds	r1, r0, #1
 800637a:	d1c7      	bne.n	800630c <__sflush_r+0x30>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0c4      	beq.n	800630c <__sflush_r+0x30>
 8006382:	2b1d      	cmp	r3, #29
 8006384:	d001      	beq.n	800638a <__sflush_r+0xae>
 8006386:	2b16      	cmp	r3, #22
 8006388:	d101      	bne.n	800638e <__sflush_r+0xb2>
 800638a:	602f      	str	r7, [r5, #0]
 800638c:	e7b2      	b.n	80062f4 <__sflush_r+0x18>
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	e7ae      	b.n	80062f6 <__sflush_r+0x1a>
 8006398:	690f      	ldr	r7, [r1, #16]
 800639a:	2f00      	cmp	r7, #0
 800639c:	d0aa      	beq.n	80062f4 <__sflush_r+0x18>
 800639e:	0793      	lsls	r3, r2, #30
 80063a0:	680e      	ldr	r6, [r1, #0]
 80063a2:	bf08      	it	eq
 80063a4:	694b      	ldreq	r3, [r1, #20]
 80063a6:	600f      	str	r7, [r1, #0]
 80063a8:	bf18      	it	ne
 80063aa:	2300      	movne	r3, #0
 80063ac:	1bf6      	subs	r6, r6, r7
 80063ae:	608b      	str	r3, [r1, #8]
 80063b0:	2e00      	cmp	r6, #0
 80063b2:	dd9f      	ble.n	80062f4 <__sflush_r+0x18>
 80063b4:	6a21      	ldr	r1, [r4, #32]
 80063b6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80063ba:	4633      	mov	r3, r6
 80063bc:	463a      	mov	r2, r7
 80063be:	4628      	mov	r0, r5
 80063c0:	47e0      	blx	ip
 80063c2:	2800      	cmp	r0, #0
 80063c4:	dc06      	bgt.n	80063d4 <__sflush_r+0xf8>
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063d2:	e790      	b.n	80062f6 <__sflush_r+0x1a>
 80063d4:	4407      	add	r7, r0
 80063d6:	1a36      	subs	r6, r6, r0
 80063d8:	e7ea      	b.n	80063b0 <__sflush_r+0xd4>
 80063da:	bf00      	nop
 80063dc:	20400001 	.word	0x20400001

080063e0 <_fflush_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	690b      	ldr	r3, [r1, #16]
 80063e4:	4605      	mov	r5, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b913      	cbnz	r3, 80063f0 <_fflush_r+0x10>
 80063ea:	2500      	movs	r5, #0
 80063ec:	4628      	mov	r0, r5
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	b118      	cbz	r0, 80063fa <_fflush_r+0x1a>
 80063f2:	6983      	ldr	r3, [r0, #24]
 80063f4:	b90b      	cbnz	r3, 80063fa <_fflush_r+0x1a>
 80063f6:	f000 f887 	bl	8006508 <__sinit>
 80063fa:	4b14      	ldr	r3, [pc, #80]	; (800644c <_fflush_r+0x6c>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	d11b      	bne.n	8006438 <_fflush_r+0x58>
 8006400:	686c      	ldr	r4, [r5, #4]
 8006402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0ef      	beq.n	80063ea <_fflush_r+0xa>
 800640a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800640c:	07d0      	lsls	r0, r2, #31
 800640e:	d404      	bmi.n	800641a <_fflush_r+0x3a>
 8006410:	0599      	lsls	r1, r3, #22
 8006412:	d402      	bmi.n	800641a <_fflush_r+0x3a>
 8006414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006416:	f000 f915 	bl	8006644 <__retarget_lock_acquire_recursive>
 800641a:	4628      	mov	r0, r5
 800641c:	4621      	mov	r1, r4
 800641e:	f7ff ff5d 	bl	80062dc <__sflush_r>
 8006422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006424:	07da      	lsls	r2, r3, #31
 8006426:	4605      	mov	r5, r0
 8006428:	d4e0      	bmi.n	80063ec <_fflush_r+0xc>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	059b      	lsls	r3, r3, #22
 800642e:	d4dd      	bmi.n	80063ec <_fflush_r+0xc>
 8006430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006432:	f000 f908 	bl	8006646 <__retarget_lock_release_recursive>
 8006436:	e7d9      	b.n	80063ec <_fflush_r+0xc>
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <_fflush_r+0x70>)
 800643a:	429c      	cmp	r4, r3
 800643c:	d101      	bne.n	8006442 <_fflush_r+0x62>
 800643e:	68ac      	ldr	r4, [r5, #8]
 8006440:	e7df      	b.n	8006402 <_fflush_r+0x22>
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <_fflush_r+0x74>)
 8006444:	429c      	cmp	r4, r3
 8006446:	bf08      	it	eq
 8006448:	68ec      	ldreq	r4, [r5, #12]
 800644a:	e7da      	b.n	8006402 <_fflush_r+0x22>
 800644c:	08006d1c 	.word	0x08006d1c
 8006450:	08006d3c 	.word	0x08006d3c
 8006454:	08006cfc 	.word	0x08006cfc

08006458 <std>:
 8006458:	2300      	movs	r3, #0
 800645a:	b510      	push	{r4, lr}
 800645c:	4604      	mov	r4, r0
 800645e:	e9c0 3300 	strd	r3, r3, [r0]
 8006462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006466:	6083      	str	r3, [r0, #8]
 8006468:	8181      	strh	r1, [r0, #12]
 800646a:	6643      	str	r3, [r0, #100]	; 0x64
 800646c:	81c2      	strh	r2, [r0, #14]
 800646e:	6183      	str	r3, [r0, #24]
 8006470:	4619      	mov	r1, r3
 8006472:	2208      	movs	r2, #8
 8006474:	305c      	adds	r0, #92	; 0x5c
 8006476:	f7fe ffc9 	bl	800540c <memset>
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <std+0x38>)
 800647c:	6263      	str	r3, [r4, #36]	; 0x24
 800647e:	4b05      	ldr	r3, [pc, #20]	; (8006494 <std+0x3c>)
 8006480:	62a3      	str	r3, [r4, #40]	; 0x28
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <std+0x40>)
 8006484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006486:	4b05      	ldr	r3, [pc, #20]	; (800649c <std+0x44>)
 8006488:	6224      	str	r4, [r4, #32]
 800648a:	6323      	str	r3, [r4, #48]	; 0x30
 800648c:	bd10      	pop	{r4, pc}
 800648e:	bf00      	nop
 8006490:	08006849 	.word	0x08006849
 8006494:	0800686b 	.word	0x0800686b
 8006498:	080068a3 	.word	0x080068a3
 800649c:	080068c7 	.word	0x080068c7

080064a0 <_cleanup_r>:
 80064a0:	4901      	ldr	r1, [pc, #4]	; (80064a8 <_cleanup_r+0x8>)
 80064a2:	f000 b8af 	b.w	8006604 <_fwalk_reent>
 80064a6:	bf00      	nop
 80064a8:	080063e1 	.word	0x080063e1

080064ac <__sfmoreglue>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	2268      	movs	r2, #104	; 0x68
 80064b0:	1e4d      	subs	r5, r1, #1
 80064b2:	4355      	muls	r5, r2
 80064b4:	460e      	mov	r6, r1
 80064b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064ba:	f7ff f97b 	bl	80057b4 <_malloc_r>
 80064be:	4604      	mov	r4, r0
 80064c0:	b140      	cbz	r0, 80064d4 <__sfmoreglue+0x28>
 80064c2:	2100      	movs	r1, #0
 80064c4:	e9c0 1600 	strd	r1, r6, [r0]
 80064c8:	300c      	adds	r0, #12
 80064ca:	60a0      	str	r0, [r4, #8]
 80064cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064d0:	f7fe ff9c 	bl	800540c <memset>
 80064d4:	4620      	mov	r0, r4
 80064d6:	bd70      	pop	{r4, r5, r6, pc}

080064d8 <__sfp_lock_acquire>:
 80064d8:	4801      	ldr	r0, [pc, #4]	; (80064e0 <__sfp_lock_acquire+0x8>)
 80064da:	f000 b8b3 	b.w	8006644 <__retarget_lock_acquire_recursive>
 80064de:	bf00      	nop
 80064e0:	200002e1 	.word	0x200002e1

080064e4 <__sfp_lock_release>:
 80064e4:	4801      	ldr	r0, [pc, #4]	; (80064ec <__sfp_lock_release+0x8>)
 80064e6:	f000 b8ae 	b.w	8006646 <__retarget_lock_release_recursive>
 80064ea:	bf00      	nop
 80064ec:	200002e1 	.word	0x200002e1

080064f0 <__sinit_lock_acquire>:
 80064f0:	4801      	ldr	r0, [pc, #4]	; (80064f8 <__sinit_lock_acquire+0x8>)
 80064f2:	f000 b8a7 	b.w	8006644 <__retarget_lock_acquire_recursive>
 80064f6:	bf00      	nop
 80064f8:	200002e2 	.word	0x200002e2

080064fc <__sinit_lock_release>:
 80064fc:	4801      	ldr	r0, [pc, #4]	; (8006504 <__sinit_lock_release+0x8>)
 80064fe:	f000 b8a2 	b.w	8006646 <__retarget_lock_release_recursive>
 8006502:	bf00      	nop
 8006504:	200002e2 	.word	0x200002e2

08006508 <__sinit>:
 8006508:	b510      	push	{r4, lr}
 800650a:	4604      	mov	r4, r0
 800650c:	f7ff fff0 	bl	80064f0 <__sinit_lock_acquire>
 8006510:	69a3      	ldr	r3, [r4, #24]
 8006512:	b11b      	cbz	r3, 800651c <__sinit+0x14>
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006518:	f7ff bff0 	b.w	80064fc <__sinit_lock_release>
 800651c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006520:	6523      	str	r3, [r4, #80]	; 0x50
 8006522:	4b13      	ldr	r3, [pc, #76]	; (8006570 <__sinit+0x68>)
 8006524:	4a13      	ldr	r2, [pc, #76]	; (8006574 <__sinit+0x6c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	62a2      	str	r2, [r4, #40]	; 0x28
 800652a:	42a3      	cmp	r3, r4
 800652c:	bf04      	itt	eq
 800652e:	2301      	moveq	r3, #1
 8006530:	61a3      	streq	r3, [r4, #24]
 8006532:	4620      	mov	r0, r4
 8006534:	f000 f820 	bl	8006578 <__sfp>
 8006538:	6060      	str	r0, [r4, #4]
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f81c 	bl	8006578 <__sfp>
 8006540:	60a0      	str	r0, [r4, #8]
 8006542:	4620      	mov	r0, r4
 8006544:	f000 f818 	bl	8006578 <__sfp>
 8006548:	2200      	movs	r2, #0
 800654a:	60e0      	str	r0, [r4, #12]
 800654c:	2104      	movs	r1, #4
 800654e:	6860      	ldr	r0, [r4, #4]
 8006550:	f7ff ff82 	bl	8006458 <std>
 8006554:	68a0      	ldr	r0, [r4, #8]
 8006556:	2201      	movs	r2, #1
 8006558:	2109      	movs	r1, #9
 800655a:	f7ff ff7d 	bl	8006458 <std>
 800655e:	68e0      	ldr	r0, [r4, #12]
 8006560:	2202      	movs	r2, #2
 8006562:	2112      	movs	r1, #18
 8006564:	f7ff ff78 	bl	8006458 <std>
 8006568:	2301      	movs	r3, #1
 800656a:	61a3      	str	r3, [r4, #24]
 800656c:	e7d2      	b.n	8006514 <__sinit+0xc>
 800656e:	bf00      	nop
 8006570:	08006b14 	.word	0x08006b14
 8006574:	080064a1 	.word	0x080064a1

08006578 <__sfp>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	4607      	mov	r7, r0
 800657c:	f7ff ffac 	bl	80064d8 <__sfp_lock_acquire>
 8006580:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <__sfp+0x84>)
 8006582:	681e      	ldr	r6, [r3, #0]
 8006584:	69b3      	ldr	r3, [r6, #24]
 8006586:	b913      	cbnz	r3, 800658e <__sfp+0x16>
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff ffbd 	bl	8006508 <__sinit>
 800658e:	3648      	adds	r6, #72	; 0x48
 8006590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006594:	3b01      	subs	r3, #1
 8006596:	d503      	bpl.n	80065a0 <__sfp+0x28>
 8006598:	6833      	ldr	r3, [r6, #0]
 800659a:	b30b      	cbz	r3, 80065e0 <__sfp+0x68>
 800659c:	6836      	ldr	r6, [r6, #0]
 800659e:	e7f7      	b.n	8006590 <__sfp+0x18>
 80065a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065a4:	b9d5      	cbnz	r5, 80065dc <__sfp+0x64>
 80065a6:	4b16      	ldr	r3, [pc, #88]	; (8006600 <__sfp+0x88>)
 80065a8:	60e3      	str	r3, [r4, #12]
 80065aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065ae:	6665      	str	r5, [r4, #100]	; 0x64
 80065b0:	f000 f847 	bl	8006642 <__retarget_lock_init_recursive>
 80065b4:	f7ff ff96 	bl	80064e4 <__sfp_lock_release>
 80065b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065c0:	6025      	str	r5, [r4, #0]
 80065c2:	61a5      	str	r5, [r4, #24]
 80065c4:	2208      	movs	r2, #8
 80065c6:	4629      	mov	r1, r5
 80065c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065cc:	f7fe ff1e 	bl	800540c <memset>
 80065d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065d8:	4620      	mov	r0, r4
 80065da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065dc:	3468      	adds	r4, #104	; 0x68
 80065de:	e7d9      	b.n	8006594 <__sfp+0x1c>
 80065e0:	2104      	movs	r1, #4
 80065e2:	4638      	mov	r0, r7
 80065e4:	f7ff ff62 	bl	80064ac <__sfmoreglue>
 80065e8:	4604      	mov	r4, r0
 80065ea:	6030      	str	r0, [r6, #0]
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d1d5      	bne.n	800659c <__sfp+0x24>
 80065f0:	f7ff ff78 	bl	80064e4 <__sfp_lock_release>
 80065f4:	230c      	movs	r3, #12
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	e7ee      	b.n	80065d8 <__sfp+0x60>
 80065fa:	bf00      	nop
 80065fc:	08006b14 	.word	0x08006b14
 8006600:	ffff0001 	.word	0xffff0001

08006604 <_fwalk_reent>:
 8006604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006608:	4606      	mov	r6, r0
 800660a:	4688      	mov	r8, r1
 800660c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006610:	2700      	movs	r7, #0
 8006612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006616:	f1b9 0901 	subs.w	r9, r9, #1
 800661a:	d505      	bpl.n	8006628 <_fwalk_reent+0x24>
 800661c:	6824      	ldr	r4, [r4, #0]
 800661e:	2c00      	cmp	r4, #0
 8006620:	d1f7      	bne.n	8006612 <_fwalk_reent+0xe>
 8006622:	4638      	mov	r0, r7
 8006624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006628:	89ab      	ldrh	r3, [r5, #12]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d907      	bls.n	800663e <_fwalk_reent+0x3a>
 800662e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006632:	3301      	adds	r3, #1
 8006634:	d003      	beq.n	800663e <_fwalk_reent+0x3a>
 8006636:	4629      	mov	r1, r5
 8006638:	4630      	mov	r0, r6
 800663a:	47c0      	blx	r8
 800663c:	4307      	orrs	r7, r0
 800663e:	3568      	adds	r5, #104	; 0x68
 8006640:	e7e9      	b.n	8006616 <_fwalk_reent+0x12>

08006642 <__retarget_lock_init_recursive>:
 8006642:	4770      	bx	lr

08006644 <__retarget_lock_acquire_recursive>:
 8006644:	4770      	bx	lr

08006646 <__retarget_lock_release_recursive>:
 8006646:	4770      	bx	lr

08006648 <__swhatbuf_r>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	460e      	mov	r6, r1
 800664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006650:	2900      	cmp	r1, #0
 8006652:	b096      	sub	sp, #88	; 0x58
 8006654:	4614      	mov	r4, r2
 8006656:	461d      	mov	r5, r3
 8006658:	da08      	bge.n	800666c <__swhatbuf_r+0x24>
 800665a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	602a      	str	r2, [r5, #0]
 8006662:	061a      	lsls	r2, r3, #24
 8006664:	d410      	bmi.n	8006688 <__swhatbuf_r+0x40>
 8006666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800666a:	e00e      	b.n	800668a <__swhatbuf_r+0x42>
 800666c:	466a      	mov	r2, sp
 800666e:	f000 f951 	bl	8006914 <_fstat_r>
 8006672:	2800      	cmp	r0, #0
 8006674:	dbf1      	blt.n	800665a <__swhatbuf_r+0x12>
 8006676:	9a01      	ldr	r2, [sp, #4]
 8006678:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800667c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006680:	425a      	negs	r2, r3
 8006682:	415a      	adcs	r2, r3
 8006684:	602a      	str	r2, [r5, #0]
 8006686:	e7ee      	b.n	8006666 <__swhatbuf_r+0x1e>
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	2000      	movs	r0, #0
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	b016      	add	sp, #88	; 0x58
 8006690:	bd70      	pop	{r4, r5, r6, pc}
	...

08006694 <__smakebuf_r>:
 8006694:	898b      	ldrh	r3, [r1, #12]
 8006696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006698:	079d      	lsls	r5, r3, #30
 800669a:	4606      	mov	r6, r0
 800669c:	460c      	mov	r4, r1
 800669e:	d507      	bpl.n	80066b0 <__smakebuf_r+0x1c>
 80066a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	6123      	str	r3, [r4, #16]
 80066a8:	2301      	movs	r3, #1
 80066aa:	6163      	str	r3, [r4, #20]
 80066ac:	b002      	add	sp, #8
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	ab01      	add	r3, sp, #4
 80066b2:	466a      	mov	r2, sp
 80066b4:	f7ff ffc8 	bl	8006648 <__swhatbuf_r>
 80066b8:	9900      	ldr	r1, [sp, #0]
 80066ba:	4605      	mov	r5, r0
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff f879 	bl	80057b4 <_malloc_r>
 80066c2:	b948      	cbnz	r0, 80066d8 <__smakebuf_r+0x44>
 80066c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c8:	059a      	lsls	r2, r3, #22
 80066ca:	d4ef      	bmi.n	80066ac <__smakebuf_r+0x18>
 80066cc:	f023 0303 	bic.w	r3, r3, #3
 80066d0:	f043 0302 	orr.w	r3, r3, #2
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	e7e3      	b.n	80066a0 <__smakebuf_r+0xc>
 80066d8:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <__smakebuf_r+0x7c>)
 80066da:	62b3      	str	r3, [r6, #40]	; 0x28
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	6020      	str	r0, [r4, #0]
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	6163      	str	r3, [r4, #20]
 80066ea:	9b01      	ldr	r3, [sp, #4]
 80066ec:	6120      	str	r0, [r4, #16]
 80066ee:	b15b      	cbz	r3, 8006708 <__smakebuf_r+0x74>
 80066f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f4:	4630      	mov	r0, r6
 80066f6:	f000 f91f 	bl	8006938 <_isatty_r>
 80066fa:	b128      	cbz	r0, 8006708 <__smakebuf_r+0x74>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	89a0      	ldrh	r0, [r4, #12]
 800670a:	4305      	orrs	r5, r0
 800670c:	81a5      	strh	r5, [r4, #12]
 800670e:	e7cd      	b.n	80066ac <__smakebuf_r+0x18>
 8006710:	080064a1 	.word	0x080064a1

08006714 <memmove>:
 8006714:	4288      	cmp	r0, r1
 8006716:	b510      	push	{r4, lr}
 8006718:	eb01 0402 	add.w	r4, r1, r2
 800671c:	d902      	bls.n	8006724 <memmove+0x10>
 800671e:	4284      	cmp	r4, r0
 8006720:	4623      	mov	r3, r4
 8006722:	d807      	bhi.n	8006734 <memmove+0x20>
 8006724:	1e43      	subs	r3, r0, #1
 8006726:	42a1      	cmp	r1, r4
 8006728:	d008      	beq.n	800673c <memmove+0x28>
 800672a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800672e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006732:	e7f8      	b.n	8006726 <memmove+0x12>
 8006734:	4402      	add	r2, r0
 8006736:	4601      	mov	r1, r0
 8006738:	428a      	cmp	r2, r1
 800673a:	d100      	bne.n	800673e <memmove+0x2a>
 800673c:	bd10      	pop	{r4, pc}
 800673e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006746:	e7f7      	b.n	8006738 <memmove+0x24>

08006748 <__malloc_lock>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__malloc_lock+0x8>)
 800674a:	f7ff bf7b 	b.w	8006644 <__retarget_lock_acquire_recursive>
 800674e:	bf00      	nop
 8006750:	200002e0 	.word	0x200002e0

08006754 <__malloc_unlock>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__malloc_unlock+0x8>)
 8006756:	f7ff bf76 	b.w	8006646 <__retarget_lock_release_recursive>
 800675a:	bf00      	nop
 800675c:	200002e0 	.word	0x200002e0

08006760 <_realloc_r>:
 8006760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006764:	4680      	mov	r8, r0
 8006766:	4614      	mov	r4, r2
 8006768:	460e      	mov	r6, r1
 800676a:	b921      	cbnz	r1, 8006776 <_realloc_r+0x16>
 800676c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006770:	4611      	mov	r1, r2
 8006772:	f7ff b81f 	b.w	80057b4 <_malloc_r>
 8006776:	b92a      	cbnz	r2, 8006784 <_realloc_r+0x24>
 8006778:	f7fe ffb2 	bl	80056e0 <_free_r>
 800677c:	4625      	mov	r5, r4
 800677e:	4628      	mov	r0, r5
 8006780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006784:	f000 f8fa 	bl	800697c <_malloc_usable_size_r>
 8006788:	4284      	cmp	r4, r0
 800678a:	4607      	mov	r7, r0
 800678c:	d802      	bhi.n	8006794 <_realloc_r+0x34>
 800678e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006792:	d812      	bhi.n	80067ba <_realloc_r+0x5a>
 8006794:	4621      	mov	r1, r4
 8006796:	4640      	mov	r0, r8
 8006798:	f7ff f80c 	bl	80057b4 <_malloc_r>
 800679c:	4605      	mov	r5, r0
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0ed      	beq.n	800677e <_realloc_r+0x1e>
 80067a2:	42bc      	cmp	r4, r7
 80067a4:	4622      	mov	r2, r4
 80067a6:	4631      	mov	r1, r6
 80067a8:	bf28      	it	cs
 80067aa:	463a      	movcs	r2, r7
 80067ac:	f7fe fe20 	bl	80053f0 <memcpy>
 80067b0:	4631      	mov	r1, r6
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7fe ff94 	bl	80056e0 <_free_r>
 80067b8:	e7e1      	b.n	800677e <_realloc_r+0x1e>
 80067ba:	4635      	mov	r5, r6
 80067bc:	e7df      	b.n	800677e <_realloc_r+0x1e>

080067be <_raise_r>:
 80067be:	291f      	cmp	r1, #31
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4604      	mov	r4, r0
 80067c4:	460d      	mov	r5, r1
 80067c6:	d904      	bls.n	80067d2 <_raise_r+0x14>
 80067c8:	2316      	movs	r3, #22
 80067ca:	6003      	str	r3, [r0, #0]
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067d0:	bd38      	pop	{r3, r4, r5, pc}
 80067d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067d4:	b112      	cbz	r2, 80067dc <_raise_r+0x1e>
 80067d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067da:	b94b      	cbnz	r3, 80067f0 <_raise_r+0x32>
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 f831 	bl	8006844 <_getpid_r>
 80067e2:	462a      	mov	r2, r5
 80067e4:	4601      	mov	r1, r0
 80067e6:	4620      	mov	r0, r4
 80067e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ec:	f000 b818 	b.w	8006820 <_kill_r>
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d00a      	beq.n	800680a <_raise_r+0x4c>
 80067f4:	1c59      	adds	r1, r3, #1
 80067f6:	d103      	bne.n	8006800 <_raise_r+0x42>
 80067f8:	2316      	movs	r3, #22
 80067fa:	6003      	str	r3, [r0, #0]
 80067fc:	2001      	movs	r0, #1
 80067fe:	e7e7      	b.n	80067d0 <_raise_r+0x12>
 8006800:	2400      	movs	r4, #0
 8006802:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006806:	4628      	mov	r0, r5
 8006808:	4798      	blx	r3
 800680a:	2000      	movs	r0, #0
 800680c:	e7e0      	b.n	80067d0 <_raise_r+0x12>
	...

08006810 <raise>:
 8006810:	4b02      	ldr	r3, [pc, #8]	; (800681c <raise+0xc>)
 8006812:	4601      	mov	r1, r0
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	f7ff bfd2 	b.w	80067be <_raise_r>
 800681a:	bf00      	nop
 800681c:	20000010 	.word	0x20000010

08006820 <_kill_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d07      	ldr	r5, [pc, #28]	; (8006840 <_kill_r+0x20>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	f7fb fae6 	bl	8001dfe <_kill>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	d102      	bne.n	800683c <_kill_r+0x1c>
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	b103      	cbz	r3, 800683c <_kill_r+0x1c>
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	bd38      	pop	{r3, r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	200002e4 	.word	0x200002e4

08006844 <_getpid_r>:
 8006844:	f7fb bad4 	b.w	8001df0 <_getpid>

08006848 <__sread>:
 8006848:	b510      	push	{r4, lr}
 800684a:	460c      	mov	r4, r1
 800684c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006850:	f000 f89c 	bl	800698c <_read_r>
 8006854:	2800      	cmp	r0, #0
 8006856:	bfab      	itete	ge
 8006858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800685a:	89a3      	ldrhlt	r3, [r4, #12]
 800685c:	181b      	addge	r3, r3, r0
 800685e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006862:	bfac      	ite	ge
 8006864:	6563      	strge	r3, [r4, #84]	; 0x54
 8006866:	81a3      	strhlt	r3, [r4, #12]
 8006868:	bd10      	pop	{r4, pc}

0800686a <__swrite>:
 800686a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686e:	461f      	mov	r7, r3
 8006870:	898b      	ldrh	r3, [r1, #12]
 8006872:	05db      	lsls	r3, r3, #23
 8006874:	4605      	mov	r5, r0
 8006876:	460c      	mov	r4, r1
 8006878:	4616      	mov	r6, r2
 800687a:	d505      	bpl.n	8006888 <__swrite+0x1e>
 800687c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006880:	2302      	movs	r3, #2
 8006882:	2200      	movs	r2, #0
 8006884:	f000 f868 	bl	8006958 <_lseek_r>
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800688e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	4632      	mov	r2, r6
 8006896:	463b      	mov	r3, r7
 8006898:	4628      	mov	r0, r5
 800689a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	f000 b817 	b.w	80068d0 <_write_r>

080068a2 <__sseek>:
 80068a2:	b510      	push	{r4, lr}
 80068a4:	460c      	mov	r4, r1
 80068a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068aa:	f000 f855 	bl	8006958 <_lseek_r>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	bf15      	itete	ne
 80068b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80068b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068be:	81a3      	strheq	r3, [r4, #12]
 80068c0:	bf18      	it	ne
 80068c2:	81a3      	strhne	r3, [r4, #12]
 80068c4:	bd10      	pop	{r4, pc}

080068c6 <__sclose>:
 80068c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ca:	f000 b813 	b.w	80068f4 <_close_r>
	...

080068d0 <_write_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4d07      	ldr	r5, [pc, #28]	; (80068f0 <_write_r+0x20>)
 80068d4:	4604      	mov	r4, r0
 80068d6:	4608      	mov	r0, r1
 80068d8:	4611      	mov	r1, r2
 80068da:	2200      	movs	r2, #0
 80068dc:	602a      	str	r2, [r5, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	f7fb fac4 	bl	8001e6c <_write>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d102      	bne.n	80068ee <_write_r+0x1e>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b103      	cbz	r3, 80068ee <_write_r+0x1e>
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	200002e4 	.word	0x200002e4

080068f4 <_close_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_close_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fb fad0 	bl	8001ea4 <_close>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_close_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_close_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	200002e4 	.word	0x200002e4

08006914 <_fstat_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d07      	ldr	r5, [pc, #28]	; (8006934 <_fstat_r+0x20>)
 8006918:	2300      	movs	r3, #0
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	f7fb faca 	bl	8001eba <_fstat>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	d102      	bne.n	8006930 <_fstat_r+0x1c>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	b103      	cbz	r3, 8006930 <_fstat_r+0x1c>
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	bd38      	pop	{r3, r4, r5, pc}
 8006932:	bf00      	nop
 8006934:	200002e4 	.word	0x200002e4

08006938 <_isatty_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d06      	ldr	r5, [pc, #24]	; (8006954 <_isatty_r+0x1c>)
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f7fb fac8 	bl	8001ed8 <_isatty>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_isatty_r+0x1a>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_isatty_r+0x1a>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	200002e4 	.word	0x200002e4

08006958 <_lseek_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4d07      	ldr	r5, [pc, #28]	; (8006978 <_lseek_r+0x20>)
 800695c:	4604      	mov	r4, r0
 800695e:	4608      	mov	r0, r1
 8006960:	4611      	mov	r1, r2
 8006962:	2200      	movs	r2, #0
 8006964:	602a      	str	r2, [r5, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	f7fb fac0 	bl	8001eec <_lseek>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_lseek_r+0x1e>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_lseek_r+0x1e>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	200002e4 	.word	0x200002e4

0800697c <_malloc_usable_size_r>:
 800697c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006980:	1f18      	subs	r0, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	bfbc      	itt	lt
 8006986:	580b      	ldrlt	r3, [r1, r0]
 8006988:	18c0      	addlt	r0, r0, r3
 800698a:	4770      	bx	lr

0800698c <_read_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_read_r+0x20>)
 8006990:	4604      	mov	r4, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fb fa49 	bl	8001e32 <_read>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_read_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_read_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	200002e4 	.word	0x200002e4

080069b0 <_init>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	bf00      	nop
 80069b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b6:	bc08      	pop	{r3}
 80069b8:	469e      	mov	lr, r3
 80069ba:	4770      	bx	lr

080069bc <_fini>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr


STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c10  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800717c  0800717c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007184  08007184  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800718c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de8  20000078  08007204  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e60  08007204  00021e60  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c22  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333a  00000000  00000000  00035cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00039000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003a438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8b7  00000000  00000000  0003b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001572b  00000000  00000000  00059fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8f44  00000000  00000000  0006f70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012864e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b90  00000000  00000000  001286a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08006d38 	.word	0x08006d38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08006d38 	.word	0x08006d38

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000550:	f023 0218 	bic.w	r2, r3, #24
 8000554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80005a2:	f004 f869 	bl	8004678 <calendar_AlarmA_ISR>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <event_start>:

void event_start(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	activate_led(GPIO_PIN_15);
 80005b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005b8:	f004 fd18 	bl	8004fec <activate_led>
	// note: it is not recommended to send over serial while in ISR!!
	desktopAppSession_enqueueMessage("MESG", "EVENT START\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 80005bc:	4903      	ldr	r1, [pc, #12]	; (80005cc <event_start+0x1c>)
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <event_start+0x20>)
 80005c0:	f004 fee6 	bl	8005390 <desktopAppSession_enqueueMessage>
	desktopAppSession_update();
 80005c4:	f004 fecc 	bl	8005360 <desktopAppSession_update>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	08006d50 	.word	0x08006d50
 80005d0:	08006d94 	.word	0x08006d94

080005d4 <event_end>:

void event_end(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	deactivate_led(GPIO_PIN_15);
 80005d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005dc:	f004 fd3a 	bl	8005054 <deactivate_led>
	// note: it is not recommended to send over serial while in ISR!!
	desktopAppSession_enqueueMessage("MESG", "EVENT END\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
 80005e0:	4903      	ldr	r1, [pc, #12]	; (80005f0 <event_end+0x1c>)
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <event_end+0x20>)
 80005e4:	f004 fed4 	bl	8005390 <desktopAppSession_enqueueMessage>
	desktopAppSession_update();
 80005e8:	f004 feba 	bl	8005360 <desktopAppSession_update>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08006d9c 	.word	0x08006d9c
 80005f4:	08006d94 	.word	0x08006d94

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09a      	sub	sp, #104	; 0x68
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fb69 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f8b9 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 fa09 	bl	8000a1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f9b1 	bl	8000970 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800060e:	f000 f911 	bl	8000834 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 ff4e 	bl	80014b4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  desktopAppSession_init(&huart2);
 8000618:	4852      	ldr	r0, [pc, #328]	; (8000764 <main+0x16c>)
 800061a:	f004 fe43 	bl	80052a4 <desktopAppSession_init>

  // initialize calendar
  calendar_init(&hrtc);
 800061e:	4852      	ldr	r0, [pc, #328]	; (8000768 <main+0x170>)
 8000620:	f003 fe0e 	bl	8004240 <calendar_init>

  // set calendar time
  DateTime now = {
 8000624:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 800062e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000632:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000636:	f003 feb5 	bl	80043a4 <calendar_setDateTime>

  // start calendar
//  calendar_start();

  // begin listening for messages from desktop
  if (desktopAppSession_start() == SESSION_OKAY)
 800063a:	f004 fe69 	bl	8005310 <desktopAppSession_start>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <main+0x54>
  {
	  activate_led(GREEN_LED);
 8000644:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000648:	f004 fcd0 	bl	8004fec <activate_led>
  }

  char messageHeader[UART_PACKET_HEADER_SIZE];
  char messageBody[UART_PACKET_PAYLOAD_SIZE];
  enum AppActions commandCode;
  DateTime newDateTime = {0};
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	809a      	strh	r2, [r3, #4]
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_update();
 8000656:	f003 fefb 	bl	8004450 <calendar_update>

	  // try to open connection if not present
	  if (desktopAppSession_start() == SESSION_OKAY)
 800065a:	f004 fe59 	bl	8005310 <desktopAppSession_start>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <main+0x74>
	  {
		  activate_led(GREEN_LED);
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f004 fcc0 	bl	8004fec <activate_led>
	  }

	  // if message present, handle message
	  if (desktopAppSession_update() != SESSION_OKAY)
 800066c:	f004 fe78 	bl	8005360 <desktopAppSession_update>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <main+0x86>
	  {
		  activate_led(RED_LED);
 8000676:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800067a:	f004 fcb7 	bl	8004fec <activate_led>
	  }

	  // get command if present
	  if (desktopAppSession_dequeueMessage(messageHeader, messageBody) == SESSION_OKAY)
 800067e:	f107 0220 	add.w	r2, r7, #32
 8000682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fe9d 	bl	80053c8 <desktopAppSession_dequeueMessage>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1e0      	bne.n	8000656 <main+0x5e>
	  {
		  // execute command
		  commandCode = code_to_appActions(messageHeader);
 8000694:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fcfb 	bl	8005094 <code_to_appActions>
 800069e:	4603      	mov	r3, r0
 80006a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  // set date/time
		  if (commandCode == SET_CALENDAR_DATETIME)
 80006a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10e      	bne.n	80006ca <main+0xd2>
		  {
			  parseDateTime(&newDateTime, messageBody);
 80006ac:	f107 0220 	add.w	r2, r7, #32
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fd4a 	bl	8005150 <parseDateTime>
			  calendar_setDateTime(newDateTime);
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006c4:	f003 fe6e 	bl	80043a4 <calendar_setDateTime>
 80006c8:	e7c5      	b.n	8000656 <main+0x5e>
		  }

		  // get date/time
		  else if (commandCode == GET_CALENDAR_DATETIME)
 80006ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d117      	bne.n	8000702 <main+0x10a>
		  {
			  calendar_getDateTime(&newDateTime);
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fe80 	bl	80043dc <calendar_getDateTime>
			  formatDateTime(messageBody, &newDateTime);
 80006dc:	f107 0218 	add.w	r2, r7, #24
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fd5a 	bl	80051a0 <formatDateTime>
			  memcpy(messageHeader, "ECHO", UART_PACKET_HEADER_SIZE*sizeof(char));
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <main+0x174>)
 80006ee:	65fb      	str	r3, [r7, #92]	; 0x5c
			  desktopAppSession_enqueueMessage(messageHeader, messageBody);
 80006f0:	f107 0220 	add.w	r2, r7, #32
 80006f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fe48 	bl	8005390 <desktopAppSession_enqueueMessage>
 8000700:	e7a9      	b.n	8000656 <main+0x5e>
		  }

		  // add event
		  else if (commandCode == ADD_CALENDAR_EVENT)
 8000702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000706:	2b03      	cmp	r3, #3
 8000708:	d117      	bne.n	800073a <main+0x142>
		  {
			  CalendarEvent tempEvent = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]
			  parseEvent(&tempEvent, messageBody);
 800071a:	f107 0220 	add.w	r2, r7, #32
 800071e:	463b      	mov	r3, r7
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fd72 	bl	800520c <parseEvent>
			  tempEvent.start_callback = &(event_start);
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <main+0x178>)
 800072a:	60bb      	str	r3, [r7, #8]
			  tempEvent.end_callback = &(event_end);
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0x17c>)
 800072e:	617b      	str	r3, [r7, #20]
			  calendar_addEvent(&tempEvent);
 8000730:	463b      	mov	r3, r7
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fe72 	bl	800441c <calendar_addEvent>
 8000738:	e78d      	b.n	8000656 <main+0x5e>
		  }

		  // get/view event
		  else if (commandCode == GET_CALENDAR_EVENT)
 800073a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800073e:	2b04      	cmp	r3, #4
 8000740:	d089      	beq.n	8000656 <main+0x5e>
		  {

		  }

		  // remove event
		  else if (commandCode == REMOVE_CALENDAR_EVENT)
 8000742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000746:	2b05      	cmp	r3, #5
 8000748:	d085      	beq.n	8000656 <main+0x5e>
		  {

		  }

		  // clear all events
		  else if (commandCode == CLEAR_CALENDAR_EVENTS)
 800074a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800074e:	2b06      	cmp	r3, #6
 8000750:	d081      	beq.n	8000656 <main+0x5e>
		  {

		  }

		  // start calendar
		  else if (commandCode == START_CALENDAR)
 8000752:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000756:	2b07      	cmp	r3, #7
 8000758:	f47f af7d 	bne.w	8000656 <main+0x5e>
		  {
			  calendar_start();
 800075c:	f003 fdc6 	bl	80042ec <calendar_start>
	  calendar_update();
 8000760:	e779      	b.n	8000656 <main+0x5e>
 8000762:	bf00      	nop
 8000764:	200000cc 	.word	0x200000cc
 8000768:	20000094 	.word	0x20000094
 800076c:	4f484345 	.word	0x4f484345
 8000770:	080005b1 	.word	0x080005b1
 8000774:	080005d5 	.word	0x080005d5

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09a      	sub	sp, #104	; 0x68
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2248      	movs	r2, #72	; 0x48
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 f994 	bl	8005ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079e:	f000 fe61 	bl	8001464 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fecc 	bl	8000540 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <SystemClock_Config+0xb8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007b0:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <SystemClock_Config+0xb8>)
 80007b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <SystemClock_Config+0xb8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007c4:	232c      	movs	r3, #44	; 0x2c
 80007c6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c8:	2381      	movs	r3, #129	; 0x81
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 f925 	bl	8001a38 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f4:	f000 f91f 	bl	8000a36 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80007f8:	236f      	movs	r3, #111	; 0x6f
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fc8f 	bl	800213c <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000824:	f000 f907 	bl	8000a36 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3768      	adds	r7, #104	; 0x68
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58000400 	.word	0x58000400

08000834 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b092      	sub	sp, #72	; 0x48
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800083a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800084a:	2300      	movs	r3, #0
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	222c      	movs	r2, #44	; 0x2c
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 f92d 	bl	8005ab4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800085a:	4b43      	ldr	r3, [pc, #268]	; (8000968 <MX_RTC_Init+0x134>)
 800085c:	4a43      	ldr	r2, [pc, #268]	; (800096c <MX_RTC_Init+0x138>)
 800085e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000860:	4b41      	ldr	r3, [pc, #260]	; (8000968 <MX_RTC_Init+0x134>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_RTC_Init+0x134>)
 8000868:	227f      	movs	r2, #127	; 0x7f
 800086a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800086c:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <MX_RTC_Init+0x134>)
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <MX_RTC_Init+0x134>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000878:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <MX_RTC_Init+0x134>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <MX_RTC_Init+0x134>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_RTC_Init+0x134>)
 8000886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_RTC_Init+0x134>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <MX_RTC_Init+0x134>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000898:	4833      	ldr	r0, [pc, #204]	; (8000968 <MX_RTC_Init+0x134>)
 800089a:	f002 f929 	bl	8002af0 <HAL_RTC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80008a4:	f000 f8c7 	bl	8000a36 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	4827      	ldr	r0, [pc, #156]	; (8000968 <MX_RTC_Init+0x134>)
 80008cc:	f002 f992 	bl	8002bf4 <HAL_RTC_SetTime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80008d6:	f000 f8ae 	bl	8000a36 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008da:	2301      	movs	r3, #1
 80008dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80008e0:	2301      	movs	r3, #1
 80008e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	481b      	ldr	r0, [pc, #108]	; (8000968 <MX_RTC_Init+0x134>)
 80008fc:	f002 fa78 	bl	8002df0 <HAL_RTC_SetDate>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000906:	f000 f896 	bl	8000a36 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800090a:	2300      	movs	r3, #0
 800090c:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800090e:	2300      	movs	r3, #0
 8000910:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000912:	2300      	movs	r3, #0
 8000914:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2201      	movs	r2, #1
 800093e:	4619      	mov	r1, r3
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_RTC_Init+0x134>)
 8000942:	f002 fb29 	bl	8002f98 <HAL_RTC_SetAlarm_IT>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 800094c:	f000 f873 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	202a      	movs	r0, #42	; 0x2a
 8000956:	f000 fb0a 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800095a:	202a      	movs	r0, #42	; 0x2a
 800095c:	f000 fb21 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3748      	adds	r7, #72	; 0x48
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000094 	.word	0x20000094
 800096c:	40002800 	.word	0x40002800

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000976:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <MX_USART2_UART_Init+0xa8>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 800097c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 800098a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000998:	220c      	movs	r2, #12
 800099a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009b6:	2230      	movs	r2, #48	; 0x30
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009cc:	f002 fd72 	bl	80034b4 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009d6:	f000 f82e 	bl	8000a36 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009de:	f003 fb66 	bl	80040ae <HAL_UARTEx_SetTxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f000 f825 	bl	8000a36 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009f0:	f003 fb9b 	bl	800412a <HAL_UARTEx_SetRxFifoThreshold>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80009fa:	f000 f81c 	bl	8000a36 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000a00:	f003 fb1d 	bl	800403e <HAL_UARTEx_DisableFifoMode>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 f814 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000cc 	.word	0x200000cc
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fda2 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2004      	movs	r0, #4
 8000a28:	f7ff fd9f 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fd9c 	bl	800056a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3a:	b672      	cpsid	i
}
 8000a3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <Error_Handler+0x8>

08000a40 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <LL_AHB2_GRP1_EnableClock>:
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a84:	68fb      	ldr	r3, [r7, #12]
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2238      	movs	r2, #56	; 0x38
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 ffe9 	bl	8005ab4 <memset>
  if(hrtc->Instance==RTC)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_RTC_MspInit+0x54>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d115      	bne.n	8000b18 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fedd 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b08:	f7ff ff95 	bl	8000a36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b0c:	f7ff ff98 	bl	8000a40 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b14:	f7ff ffbc 	bl	8000a90 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3740      	adds	r7, #64	; 0x40
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40002800 	.word	0x40002800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2238      	movs	r2, #56	; 0x38
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 ffb5 	bl	8005ab4 <memset>
  if(huart->Instance==USART2)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d126      	bne.n	8000ba2 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b58:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000b5c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 feaa 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b6e:	f7ff ff62 	bl	8000a36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b76:	f7ff ff8b 	bl	8000a90 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff ff70 	bl	8000a60 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b80:	230c      	movs	r3, #12
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b90:	2307      	movs	r3, #7
 8000b92:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f000 fa1b 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3758      	adds	r7, #88	; 0x58
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004400 	.word	0x40004400

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f8c7 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <RTC_Alarm_IRQHandler+0x10>)
 8000c06:	f002 fb2f 	bl	8003268 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000094 	.word	0x20000094

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f004 fefe 	bl	8005a44 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20008000 	.word	0x20008000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000160 	.word	0x20000160
 8000c7c:	20001e60 	.word	0x20001e60

08000c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f7ff fc56 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	; (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cae:	f004 fecf 	bl	8005a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff fca1 	bl	80005f8 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cc4:	0800718c 	.word	0x0800718c
  ldr r2, =_sbss
 8000cc8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ccc:	20001e60 	.word	0x20001e60

08000cd0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f93a 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ce4:	f001 fc0c 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <HAL_Init+0x3c>)
 8000cec:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f810 	bl	8000d14 <HAL_InitTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e001      	b.n	8000d04 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d00:	f7ff fede 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000000 	.word	0x20000000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_InitTick+0x6c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d024      	beq.n	8000d72 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d28:	f001 fbea 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_InitTick+0x6c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d38:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f93c 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10f      	bne.n	8000d6c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b0f      	cmp	r3, #15
 8000d50:	d809      	bhi.n	8000d66 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d52:	2200      	movs	r2, #0
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5a:	f000 f908 	bl	8000f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_InitTick+0x70>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e007      	b.n	8000d76 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	e004      	b.n	8000d76 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e001      	b.n	8000d76 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x20>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <HAL_IncTick+0x20>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000164 	.word	0x20000164

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000164 	.word	0x20000164

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4906      	ldr	r1, [pc, #24]	; (8000e58 <__NVIC_EnableIRQ+0x34>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f38:	f7ff ff90 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff2d 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7c:	f7ff ff44 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff ff92 	bl	8000eb0 <NVIC_EncodePriority>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff61 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff37 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffa4 	bl	8000f14 <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe6:	e140      	b.n	800126a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8132 	beq.w	8001264 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d005      	beq.n	8001018 <HAL_GPIO_Init+0x40>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d130      	bne.n	800107a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800104e:	2201      	movs	r2, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	f003 0201 	and.w	r2, r3, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b03      	cmp	r3, #3
 8001084:	d017      	beq.n	80010b6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d123      	bne.n	800110a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0203 	and.w	r2, r3, #3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 808c 	beq.w	8001264 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x2b0>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	2207      	movs	r2, #7
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001176:	d00d      	beq.n	8001194 <HAL_GPIO_Init+0x1bc>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a44      	ldr	r2, [pc, #272]	; (800128c <HAL_GPIO_Init+0x2b4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d007      	beq.n	8001190 <HAL_GPIO_Init+0x1b8>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a43      	ldr	r2, [pc, #268]	; (8001290 <HAL_GPIO_Init+0x2b8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_GPIO_Init+0x1b4>
 8001188:	2302      	movs	r3, #2
 800118a:	e004      	b.n	8001196 <HAL_GPIO_Init+0x1be>
 800118c:	2307      	movs	r3, #7
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x1be>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_GPIO_Init+0x1be>
 8001194:	2300      	movs	r3, #0
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4093      	lsls	r3, r2
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a6:	4938      	ldr	r1, [pc, #224]	; (8001288 <HAL_GPIO_Init+0x2b0>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d8:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001202:	4a24      	ldr	r2, [pc, #144]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 800120a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800120e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 8001238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800123c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	f47f aeb7 	bne.w	8000fe8 <HAL_GPIO_Init+0x10>
  }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40010000 	.word	0x40010000
 800128c:	48000400 	.word	0x48000400
 8001290:	48000800 	.word	0x48000800
 8001294:	58000800 	.word	0x58000800

08001298 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80012a6:	e0af      	b.n	8001408 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80012a8:	2201      	movs	r2, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a2 	beq.w	8001402 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80012be:	4a59      	ldr	r2, [pc, #356]	; (8001424 <HAL_GPIO_DeInit+0x18c>)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	2207      	movs	r2, #7
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e6:	d00d      	beq.n	8001304 <HAL_GPIO_DeInit+0x6c>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4f      	ldr	r2, [pc, #316]	; (8001428 <HAL_GPIO_DeInit+0x190>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_DeInit+0x68>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4e      	ldr	r2, [pc, #312]	; (800142c <HAL_GPIO_DeInit+0x194>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d101      	bne.n	80012fc <HAL_GPIO_DeInit+0x64>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e004      	b.n	8001306 <HAL_GPIO_DeInit+0x6e>
 80012fc:	2307      	movs	r3, #7
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_DeInit+0x6e>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <HAL_GPIO_DeInit+0x6e>
 8001304:	2300      	movs	r3, #0
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	f002 0203 	and.w	r2, r2, #3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4093      	lsls	r3, r2
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	429a      	cmp	r2, r3
 8001314:	d136      	bne.n	8001384 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8001316:	4b46      	ldr	r3, [pc, #280]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 8001318:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	4943      	ldr	r1, [pc, #268]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 8001322:	4013      	ands	r3, r2
 8001324:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 800132a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	493f      	ldr	r1, [pc, #252]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 8001334:	4013      	ands	r3, r2
 8001336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	493b      	ldr	r1, [pc, #236]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 8001344:	4013      	ands	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <HAL_GPIO_DeInit+0x198>)
 8001352:	4013      	ands	r3, r2
 8001354:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	2207      	movs	r2, #7
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_GPIO_DeInit+0x18c>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43da      	mvns	r2, r3
 8001376:	482b      	ldr	r0, [pc, #172]	; (8001424 <HAL_GPIO_DeInit+0x18c>)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	400a      	ands	r2, r1
 800137e:	3302      	adds	r3, #2
 8001380:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2103      	movs	r1, #3
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	08d2      	lsrs	r2, r2, #3
 80013b8:	4019      	ands	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2103      	movs	r1, #3
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	2101      	movs	r1, #1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	401a      	ands	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2103      	movs	r1, #3
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	401a      	ands	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f af49 	bne.w	80012a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	58000800 	.word	0x58000800

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e002      	b.n	8001458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_PWR_EnableBkUpAccess+0x18>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <HAL_PWR_EnableBkUpAccess+0x18>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	58000400 	.word	0x58000400

08001480 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <LL_PWR_EnableBootC2+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <LL_PWR_EnableBootC2+0x18>)
 800148a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	58000400 	.word	0x58000400

0800149c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_PWREx_GetVoltageRange+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	58000400 	.word	0x58000400

080014b4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80014bc:	f7ff ffe0 	bl	8001480 <LL_PWR_EnableBootC2>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d8:	d101      	bne.n	80014de <LL_PWR_IsEnabledBkUpAccess+0x16>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	58000400 	.word	0x58000400

080014ec <LL_RCC_HSE_EnableTcxo>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <LL_RCC_HSE_DisableTcxo>:
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001536:	d101      	bne.n	800153c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <LL_RCC_HSE_Enable>:
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <LL_RCC_HSE_Disable>:
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <LL_RCC_HSE_IsReady>:
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001590:	d101      	bne.n	8001596 <LL_RCC_HSE_IsReady+0x18>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_RCC_HSE_IsReady+0x1a>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <LL_RCC_HSI_Enable>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <LL_RCC_HSI_Disable>:
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_HSI_IsReady>:
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ea:	d101      	bne.n	80015f0 <LL_RCC_HSI_IsReady+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_RCC_HSI_IsReady+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <LL_RCC_HSI_SetCalibTrimming>:
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <LL_RCC_LSE_IsReady>:
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b02      	cmp	r3, #2
 8001634:	d101      	bne.n	800163a <LL_RCC_LSE_IsReady+0x18>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_RCC_LSE_IsReady+0x1a>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <LL_RCC_LSI_Enable>:
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <LL_RCC_LSI_Disable>:
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <LL_RCC_LSI_IsReady>:
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b02      	cmp	r3, #2
 8001696:	d101      	bne.n	800169c <LL_RCC_LSI_IsReady+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_RCC_LSI_IsReady+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <LL_RCC_MSI_Enable>:
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_MSI_Disable>:
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <LL_RCC_MSI_IsReady>:
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d101      	bne.n	80016f4 <LL_RCC_MSI_IsReady+0x16>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_RCC_MSI_IsReady+0x18>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b08      	cmp	r3, #8
 800170e:	d101      	bne.n	8001714 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <LL_RCC_MSI_GetRange>:
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001740:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_RCC_MSI_SetCalibTrimming>:
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <LL_RCC_SetSysClkSource>:
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f023 0203 	bic.w	r2, r3, #3
 8001786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <LL_RCC_GetSysClkSource>:
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800179e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 030c 	and.w	r3, r3, #12
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <LL_RCC_SetAHBPrescaler>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <LL_RCC_SetAHB3Prescaler>:
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001810:	f023 020f 	bic.w	r2, r3, #15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181c:	4313      	orrs	r3, r2
 800181e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <LL_RCC_SetAPB1Prescaler>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800183e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <LL_RCC_SetAPB2Prescaler>:
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <LL_RCC_GetAHBPrescaler>:
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <LL_RCC_GetAHB3Prescaler>:
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001896:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <LL_RCC_GetAPB1Prescaler>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <LL_RCC_GetAPB2Prescaler>:
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800191e:	d101      	bne.n	8001924 <LL_RCC_PLL_IsReady+0x18>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <LL_RCC_PLL_IsReady+0x1a>
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800198c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199a:	d101      	bne.n	80019a0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019be:	d101      	bne.n	80019c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80019d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d101      	bne.n	80019e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80019f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a04:	d101      	bne.n	8001a0a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a26:	d101      	bne.n	8001a2c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e36f      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4a:	f7ff fea6 	bl	800179a <LL_RCC_GetSysClkSource>
 8001a4e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	f7ff ff8f 	bl	8001972 <LL_RCC_PLL_GetMainSource>
 8001a54:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80c4 	beq.w	8001bec <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x3e>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d176      	bne.n	8001b5e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d173      	bne.n	8001b5e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e353      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x68>
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9e:	e006      	b.n	8001aae <HAL_RCC_OscConfig+0x76>
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d222      	bcs.n	8001af8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fd5a 	bl	8002570 <RCC_SetFlashLatencyFromMSIRange>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e331      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fe2b 	bl	800174c <LL_RCC_MSI_SetCalibTrimming>
 8001af6:	e021      	b.n	8001b3c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fe12 	bl	800174c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fd1f 	bl	8002570 <RCC_SetFlashLatencyFromMSIRange>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e2f6      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b3c:	f000 fce0 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4aa7      	ldr	r2, [pc, #668]	; (8001de0 <HAL_RCC_OscConfig+0x3a8>)
 8001b44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001b46:	4ba7      	ldr	r3, [pc, #668]	; (8001de4 <HAL_RCC_OscConfig+0x3ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f8e2 	bl	8000d14 <HAL_InitTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001b54:	7cfb      	ldrb	r3, [r7, #19]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d047      	beq.n	8001bea <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001b5a:	7cfb      	ldrb	r3, [r7, #19]
 8001b5c:	e2e5      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d02c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b66:	f7ff fd9e 	bl	80016a6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f91f 	bl	8000dac <HAL_GetTick>
 8001b6e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b72:	f7ff f91b 	bl	8000dac <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e2d2      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b84:	f7ff fdab 	bl	80016de <LL_RCC_MSI_IsReady>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f1      	beq.n	8001b72 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fdc7 	bl	800174c <LL_RCC_MSI_SetCalibTrimming>
 8001bbe:	e015      	b.n	8001bec <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc0:	f7ff fd7f 	bl	80016c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8f2 	bl	8000dac <HAL_GetTick>
 8001bc8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f8ee 	bl	8000dac <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e2a5      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001bde:	f7ff fd7e 	bl	80016de <LL_RCC_MSI_IsReady>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f1      	bne.n	8001bcc <HAL_RCC_OscConfig+0x194>
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bea:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d058      	beq.n	8001caa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	d108      	bne.n	8001c16 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d105      	bne.n	8001c16 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d14b      	bne.n	8001caa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e289      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0x204>
 8001c36:	f7ff fc86 	bl	8001546 <LL_RCC_HSE_Enable>
 8001c3a:	e00d      	b.n	8001c58 <HAL_RCC_OscConfig+0x220>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001c44:	d104      	bne.n	8001c50 <HAL_RCC_OscConfig+0x218>
 8001c46:	f7ff fc51 	bl	80014ec <LL_RCC_HSE_EnableTcxo>
 8001c4a:	f7ff fc7c 	bl	8001546 <LL_RCC_HSE_Enable>
 8001c4e:	e003      	b.n	8001c58 <HAL_RCC_OscConfig+0x220>
 8001c50:	f7ff fc87 	bl	8001562 <LL_RCC_HSE_Disable>
 8001c54:	f7ff fc58 	bl	8001508 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff f8a4 	bl	8000dac <HAL_GetTick>
 8001c64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff f8a0 	bl	8000dac <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e257      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c7a:	f7ff fc80 	bl	800157e <LL_RCC_HSE_IsReady>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f1      	beq.n	8001c68 <HAL_RCC_OscConfig+0x230>
 8001c84:	e011      	b.n	8001caa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff f891 	bl	8000dac <HAL_GetTick>
 8001c8a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8e:	f7ff f88d 	bl	8000dac <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e244      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ca0:	f7ff fc6d 	bl	800157e <LL_RCC_HSE_IsReady>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f1      	bne.n	8001c8e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d046      	beq.n	8001d44 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x290>
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e22a      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fc8e 	bl	80015fa <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001cde:	e031      	b.n	8001d44 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d019      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	f7ff fc5a 	bl	80015a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff f85e 	bl	8000dac <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f85a 	bl	8000dac <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e211      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d06:	f7ff fc67 	bl	80015d8 <LL_RCC_HSI_IsReady>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f1      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fc70 	bl	80015fa <LL_RCC_HSI_SetCalibTrimming>
 8001d1a:	e013      	b.n	8001d44 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1c:	f7ff fc4e 	bl	80015bc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f844 	bl	8000dac <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff f840 	bl	8000dac <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1f7      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d3a:	f7ff fc4d 	bl	80015d8 <LL_RCC_HSI_IsReady>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f1      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d06e      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d056      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d031      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e1d0      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d013      	beq.n	8001dba <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d92:	f7ff fc67 	bl	8001664 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d96:	f7ff f809 	bl	8000dac <HAL_GetTick>
 8001d9a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff f805 	bl	8000dac <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b11      	cmp	r3, #17
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1bc      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001db0:	f7ff fc68 	bl	8001684 <LL_RCC_LSI_IsReady>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f1      	bne.n	8001d9e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc2:	f023 0210 	bic.w	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd4:	f7ff fc36 	bl	8001644 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe ffe8 	bl	8000dac <HAL_GetTick>
 8001ddc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001dde:	e00c      	b.n	8001dfa <HAL_RCC_OscConfig+0x3c2>
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7fe ffe0 	bl	8000dac <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b11      	cmp	r3, #17
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e197      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001dfa:	f7ff fc43 	bl	8001684 <LL_RCC_LSI_IsReady>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f1      	beq.n	8001de8 <HAL_RCC_OscConfig+0x3b0>
 8001e04:	e013      	b.n	8001e2e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	f7ff fc2d 	bl	8001664 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe ffcf 	bl	8000dac <HAL_GetTick>
 8001e0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e12:	f7fe ffcb 	bl	8000dac <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b11      	cmp	r3, #17
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e182      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e24:	f7ff fc2e 	bl	8001684 <LL_RCC_LSI_IsReady>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f1      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80d8 	beq.w	8001fec <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e3c:	f7ff fb44 	bl	80014c8 <LL_PWR_IsEnabledBkUpAccess>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d113      	bne.n	8001e6e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e46:	f7ff fb0d 	bl	8001464 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe ffaf 	bl	8000dac <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7fe ffab 	bl	8000dac <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e162      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e64:	f7ff fb30 	bl	80014c8 <LL_PWR_IsEnabledBkUpAccess>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f1      	beq.n	8001e52 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d07b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b85      	cmp	r3, #133	; 0x85
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d109      	bne.n	8001e9a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe ff87 	bl	8000dac <HAL_GetTick>
 8001e9e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe ff79 	bl	8000dac <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e12e      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ecc:	f7ff fba9 	bl	8001622 <LL_RCC_LSE_IsReady>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0ef      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b81      	cmp	r3, #129	; 0x81
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b85      	cmp	r3, #133	; 0x85
 8001ee4:	d121      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe ff61 	bl	8000dac <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe ff53 	bl	8000dac <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e108      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ec      	beq.n	8001f02 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f28:	e060      	b.n	8001fec <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe ff3f 	bl	8000dac <HAL_GetTick>
 8001f2e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe ff31 	bl	8000dac <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0e6      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ec      	bne.n	8001f46 <HAL_RCC_OscConfig+0x50e>
 8001f6c:	e03e      	b.n	8001fec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7fe ff1d 	bl	8000dac <HAL_GetTick>
 8001f72:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe ff0f 	bl	8000dac <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0c4      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ec      	bne.n	8001f8a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fefc 	bl	8000dac <HAL_GetTick>
 8001fb4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7fe feee 	bl	8000dac <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0a3      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fe2:	f7ff fb1e 	bl	8001622 <LL_RCC_LSE_IsReady>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ef      	bne.n	8001fcc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8099 	beq.w	8002128 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d06c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	2b02      	cmp	r3, #2
 8002002:	d14b      	bne.n	800209c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	f7ff fc74 	bl	80018f0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe fed0 	bl	8000dac <HAL_GetTick>
 800200c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe fecc 	bl	8000dac <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e083      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002022:	f7ff fc73 	bl	800190c <LL_RCC_PLL_IsReady>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f1      	bne.n	8002010 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_RCC_OscConfig+0x6fc>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002044:	0212      	lsls	r2, r2, #8
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800204c:	4311      	orrs	r1, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002058:	430a      	orrs	r2, r1
 800205a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205e:	4313      	orrs	r3, r2
 8002060:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002062:	f7ff fc37 	bl	80018d4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe fe99 	bl	8000dac <HAL_GetTick>
 800207a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7fe fe95 	bl	8000dac <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b0a      	cmp	r3, #10
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e04c      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002090:	f7ff fc3c 	bl	800190c <LL_RCC_PLL_IsReady>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f1      	beq.n	800207e <HAL_RCC_OscConfig+0x646>
 800209a:	e045      	b.n	8002128 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	f7ff fc28 	bl	80018f0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe84 	bl	8000dac <HAL_GetTick>
 80020a4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe fe80 	bl	8000dac <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b0a      	cmp	r3, #10
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e037      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80020ba:	f7ff fc27 	bl	800190c <LL_RCC_PLL_IsReady>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f1      	bne.n	80020a8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RCC_OscConfig+0x700>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
 80020d4:	e028      	b.n	8002128 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e023      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d115      	bne.n	8002124 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	429a      	cmp	r2, r3
 8002104:	d10e      	bne.n	8002124 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	429a      	cmp	r2, r3
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	11c1808c 	.word	0x11c1808c
 8002138:	eefefffc 	.word	0xeefefffc

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e12c      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b98      	ldr	r3, [pc, #608]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d91b      	bls.n	8002196 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b95      	ldr	r3, [pc, #596]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4993      	ldr	r1, [pc, #588]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216e:	f7fe fe1d 	bl	8000dac <HAL_GetTick>
 8002172:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002174:	e008      	b.n	8002188 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002176:	f7fe fe19 	bl	8000dac <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e110      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002188:	4b8a      	ldr	r3, [pc, #552]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fb02 	bl	80017b0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fdfe 	bl	8000dac <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021b4:	f7fe fdfa 	bl	8000dac <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0f1      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021c6:	f7ff fbdf 	bl	8001988 <LL_RCC_IsActiveFlag_HPRE>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f1      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d016      	beq.n	800220a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff faf8 	bl	80017d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021e6:	f7fe fde1 	bl	8000dac <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021ee:	f7fe fddd 	bl	8000dac <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0d4      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002200:	f7ff fbd3 	bl	80019aa <LL_RCC_IsActiveFlag_C2HPRE>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f1      	beq.n	80021ee <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d016      	beq.n	8002244 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff faf0 	bl	8001800 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002220:	f7fe fdc4 	bl	8000dac <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002228:	f7fe fdc0 	bl	8000dac <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0b7      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800223a:	f7ff fbc8 	bl	80019ce <LL_RCC_IsActiveFlag_SHDHPRE>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f1      	beq.n	8002228 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d016      	beq.n	800227e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fae9 	bl	800182c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800225a:	f7fe fda7 	bl	8000dac <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002262:	f7fe fda3 	bl	8000dac <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e09a      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002274:	f7ff fbbd 	bl	80019f2 <LL_RCC_IsActiveFlag_PPRE1>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f1      	beq.n	8002262 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d017      	beq.n	80022ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fade 	bl	8001852 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002296:	f7fe fd89 	bl	8000dac <HAL_GetTick>
 800229a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800229e:	f7fe fd85 	bl	8000dac <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e07c      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022b0:	f7ff fbb0 	bl	8001a14 <LL_RCC_IsActiveFlag_PPRE2>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f1      	beq.n	800229e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d043      	beq.n	800234e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80022ce:	f7ff f956 	bl	800157e <LL_RCC_HSE_IsReady>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11e      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e066      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80022e4:	f7ff fb12 	bl	800190c <LL_RCC_PLL_IsReady>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d113      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e05b      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80022fa:	f7ff f9f0 	bl	80016de <LL_RCC_MSI_IsReady>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d108      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e050      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002308:	f7ff f966 	bl	80015d8 <LL_RCC_HSI_IsReady>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e049      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fa2a 	bl	8001774 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7fe fd44 	bl	8000dac <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7fe fd40 	bl	8000dac <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e035      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	f7ff fa2c 	bl	800179a <LL_RCC_GetSysClkSource>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	429a      	cmp	r2, r3
 800234c:	d1ec      	bne.n	8002328 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d21b      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 0207 	bic.w	r2, r3, #7
 8002364:	4913      	ldr	r1, [pc, #76]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7fe fd1e 	bl	8000dac <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	e008      	b.n	8002386 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002374:	f7fe fd1a 	bl	8000dac <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e011      	b.n	80023aa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_ClockConfig+0x278>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d1ef      	bne.n	8002374 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002394:	f000 f8b4 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002398:	4603      	mov	r3, r0
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_RCC_ClockConfig+0x27c>)
 800239c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <HAL_RCC_ClockConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fcb6 	bl	8000d14 <HAL_InitTick>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	58004000 	.word	0x58004000
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ce:	f7ff f9e4 	bl	800179a <LL_RCC_GetSysClkSource>
 80023d2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d4:	f7ff facd 	bl	8001972 <LL_RCC_PLL_GetMainSource>
 80023d8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x2c>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d139      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d136      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80023ec:	f7ff f987 	bl	80016fe <LL_RCC_MSI_IsEnabledRangeSelect>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x62>
 80023f6:	f7ff f982 	bl	80016fe <LL_RCC_MSI_IsEnabledRangeSelect>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x4e>
 8002400:	f7ff f98d 	bl	800171e <LL_RCC_MSI_GetRange>
 8002404:	4603      	mov	r3, r0
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	e005      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x5a>
 800240e:	f7ff f991 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 8002412:	4603      	mov	r3, r0
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	4a36      	ldr	r2, [pc, #216]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x134>)
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	e014      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x8c>
 8002422:	f7ff f96c 	bl	80016fe <LL_RCC_MSI_IsEnabledRangeSelect>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x7a>
 800242c:	f7ff f977 	bl	800171e <LL_RCC_MSI_GetRange>
 8002430:	4603      	mov	r3, r0
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	e005      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x86>
 800243a:	f7ff f97b 	bl	8001734 <LL_RCC_MSI_GetRangeAfterStandby>
 800243e:	4603      	mov	r3, r0
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d115      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002458:	e012      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d102      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e00c      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d109      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800246c:	f7ff f85a 	bl	8001524 <LL_RCC_HSE_IsEnabledDiv2>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e001      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800247e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002480:	f7ff f98b 	bl	800179a <LL_RCC_GetSysClkSource>
 8002484:	4603      	mov	r3, r0
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d12f      	bne.n	80024ea <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800248a:	f7ff fa72 	bl	8001972 <LL_RCC_PLL_GetMainSource>
 800248e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0xde>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d003      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800249c:	e00d      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80024a0:	60fb      	str	r3, [r7, #12]
        break;
 80024a2:	e00d      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024a4:	f7ff f83e 	bl	8001524 <LL_RCC_HSE_IsEnabledDiv2>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d102      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80024b0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80024b2:	e005      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80024b6:	60fb      	str	r3, [r7, #12]
        break;
 80024b8:	e002      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	60fb      	str	r3, [r7, #12]
        break;
 80024be:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80024c0:	f7ff fa35 	bl	800192e <LL_RCC_PLL_GetN>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	fb03 f402 	mul.w	r4, r3, r2
 80024cc:	f7ff fa46 	bl	800195c <LL_RCC_PLL_GetDivider>
 80024d0:	4603      	mov	r3, r0
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	3301      	adds	r3, #1
 80024d6:	fbb4 f4f3 	udiv	r4, r4, r3
 80024da:	f7ff fa34 	bl	8001946 <LL_RCC_PLL_GetR>
 80024de:	4603      	mov	r3, r0
 80024e0:	0f5b      	lsrs	r3, r3, #29
 80024e2:	3301      	adds	r3, #1
 80024e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80024e8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80024ea:	697b      	ldr	r3, [r7, #20]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd90      	pop	{r4, r7, pc}
 80024f4:	08006f64 	.word	0x08006f64
 80024f8:	00f42400 	.word	0x00f42400
 80024fc:	01e84800 	.word	0x01e84800

08002500 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002500:	b598      	push	{r3, r4, r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002504:	f7ff ff5c 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8002508:	4604      	mov	r4, r0
 800250a:	f7ff f9b5 	bl	8001878 <LL_RCC_GetAHBPrescaler>
 800250e:	4603      	mov	r3, r0
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	4a03      	ldr	r2, [pc, #12]	; (8002524 <HAL_RCC_GetHCLKFreq+0x24>)
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd98      	pop	{r3, r4, r7, pc}
 8002524:	08006f04 	.word	0x08006f04

08002528 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b598      	push	{r3, r4, r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800252c:	f7ff ffe8 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002530:	4604      	mov	r4, r0
 8002532:	f7ff f9b9 	bl	80018a8 <LL_RCC_GetAPB1Prescaler>
 8002536:	4603      	mov	r3, r0
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	4a03      	ldr	r2, [pc, #12]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd98      	pop	{r3, r4, r7, pc}
 8002548:	08006f44 	.word	0x08006f44

0800254c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b598      	push	{r3, r4, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002550:	f7ff ffd6 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002554:	4604      	mov	r4, r0
 8002556:	f7ff f9b2 	bl	80018be <LL_RCC_GetAPB2Prescaler>
 800255a:	4603      	mov	r3, r0
 800255c:	0adb      	lsrs	r3, r3, #11
 800255e:	4a03      	ldr	r2, [pc, #12]	; (800256c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd98      	pop	{r3, r4, r7, pc}
 800256c:	08006f44 	.word	0x08006f44

08002570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002588:	f7ff f981 	bl	800188e <LL_RCC_GetAHB3Prescaler>
 800258c:	4603      	mov	r3, r0
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4a09      	ldr	r2, [pc, #36]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0c9c      	lsrs	r4, r3, #18
 80025ac:	f7fe ff76 	bl	800149c <HAL_PWREx_GetVoltageRange>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4620      	mov	r0, r4
 80025b6:	f000 f80b 	bl	80025d0 <RCC_SetFlashLatency>
 80025ba:	4603      	mov	r3, r0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}
 80025c4:	08006f64 	.word	0x08006f64
 80025c8:	08006f04 	.word	0x08006f04
 80025cc:	431bde83 	.word	0x431bde83

080025d0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08e      	sub	sp, #56	; 0x38
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80025da:	4a3a      	ldr	r2, [pc, #232]	; (80026c4 <RCC_SetFlashLatency+0xf4>)
 80025dc:	f107 0320 	add.w	r3, r7, #32
 80025e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025e4:	6018      	str	r0, [r3, #0]
 80025e6:	3304      	adds	r3, #4
 80025e8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80025ea:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <RCC_SetFlashLatency+0xf8>)
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025f4:	6018      	str	r0, [r3, #0]
 80025f6:	3304      	adds	r3, #4
 80025f8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80025fa:	4a34      	ldr	r2, [pc, #208]	; (80026cc <RCC_SetFlashLatency+0xfc>)
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	ca07      	ldmia	r2, {r0, r1, r2}
 8002602:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002610:	d11b      	bne.n	800264a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002612:	2300      	movs	r3, #0
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
 8002616:	e014      	b.n	8002642 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	3338      	adds	r3, #56	; 0x38
 800261e:	443b      	add	r3, r7
 8002620:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4293      	cmp	r3, r2
 800262a:	d807      	bhi.n	800263c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	3338      	adds	r3, #56	; 0x38
 8002632:	443b      	add	r3, r7
 8002634:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800263a:	e021      	b.n	8002680 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	3301      	adds	r3, #1
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	2b02      	cmp	r3, #2
 8002646:	d9e7      	bls.n	8002618 <RCC_SetFlashLatency+0x48>
 8002648:	e01a      	b.n	8002680 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	e014      	b.n	800267a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	3338      	adds	r3, #56	; 0x38
 8002656:	443b      	add	r3, r7
 8002658:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4293      	cmp	r3, r2
 8002662:	d807      	bhi.n	8002674 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	3338      	adds	r3, #56	; 0x38
 800266a:	443b      	add	r3, r7
 800266c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002672:	e005      	b.n	8002680 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	3301      	adds	r3, #1
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	2b02      	cmp	r3, #2
 800267e:	d9e7      	bls.n	8002650 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <RCC_SetFlashLatency+0x100>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 0207 	bic.w	r2, r3, #7
 8002688:	4911      	ldr	r1, [pc, #68]	; (80026d0 <RCC_SetFlashLatency+0x100>)
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002690:	f7fe fb8c 	bl	8000dac <HAL_GetTick>
 8002694:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002696:	e008      	b.n	80026aa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002698:	f7fe fb88 	bl	8000dac <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e007      	b.n	80026ba <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <RCC_SetFlashLatency+0x100>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1ef      	bne.n	8002698 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3738      	adds	r7, #56	; 0x38
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	08006de0 	.word	0x08006de0
 80026c8:	08006de8 	.word	0x08006de8
 80026cc:	08006df0 	.word	0x08006df0
 80026d0:	58004000 	.word	0x58004000

080026d4 <LL_RCC_LSE_IsReady>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d101      	bne.n	80026ec <LL_RCC_LSE_IsReady+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_RCC_LSE_IsReady+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <LL_RCC_SetUSARTClockSource>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	43db      	mvns	r3, r3
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <LL_RCC_SetI2SClockSource>:
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800273a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <LL_RCC_SetLPUARTClockSource>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <LL_RCC_SetI2CClockSource>:
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002792:	43db      	mvns	r3, r3
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800279e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_SetLPTIMClockSource>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_SetRNGClockSource>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <LL_RCC_SetADCClockSource>:
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <LL_RCC_SetRTCClockSource>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800284c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <LL_RCC_GetRTCClockSource>:
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <LL_RCC_ForceBackupDomainReset>:
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_RCC_ReleaseBackupDomainReset>:
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80028c8:	2300      	movs	r3, #0
 80028ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80028cc:	2300      	movs	r3, #0
 80028ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d058      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80028dc:	f7fe fdc2 	bl	8001464 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e0:	f7fe fa64 	bl	8000dac <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80028e6:	e009      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe fa60 	bl	8000dac <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d902      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	74fb      	strb	r3, [r7, #19]
        break;
 80028fa:	e006      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80028fc:	4b7b      	ldr	r3, [pc, #492]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002908:	d1ee      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13c      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002910:	f7ff ffa7 	bl	8002862 <LL_RCC_GetRTCClockSource>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	429a      	cmp	r2, r3
 800291c:	d00f      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800292c:	f7ff ffa5 	bl	800287a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002930:	f7ff ffb3 	bl	800289a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d014      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fa30 	bl	8000dac <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800294e:	e00b      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fa2c 	bl	8000dac <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d902      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	74fb      	strb	r3, [r7, #19]
            break;
 8002966:	e004      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002968:	f7ff feb4 	bl	80026d4 <LL_RCC_LSE_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d1ee      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5b 	bl	8002838 <LL_RCC_SetRTCClockSource>
 8002982:	e004      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
 8002988:	e001      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298a:	7cfb      	ldrb	r3, [r7, #19]
 800298c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fea9 	bl	80026f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fe9e 	bl	80026f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fec0 	bl	8002750 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fee6 	bl	80027b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fedb 	bl	80027b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fed0 	bl	80027b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fea9 	bl	800277a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fe9e 	bl	800277a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fe93 	bl	800277a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d011      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fe5e 	bl	8002726 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a72:	d107      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fea5 	bl	80027e4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d011      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fea3 	bl	800280e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002ae2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58000400 	.word	0x58000400

08002af0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d071      	beq.n	8002be6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd ffd8 	bl	8000acc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d051      	beq.n	8002bd4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b30:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b32:	22ca      	movs	r2, #202	; 0xca
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
 8002b36:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b38:	2253      	movs	r2, #83	; 0x53
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fbe3 	bl	8003308 <RTC_EnterInitMode>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13f      	bne.n	8002bcc <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002b4c:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b52:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	4319      	orrs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	491f      	ldr	r1, [pc, #124]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	491b      	ldr	r1, [pc, #108]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	430b      	orrs	r3, r1
 8002b98:	4915      	ldr	r1, [pc, #84]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fbe6 	bl	8003370 <RTC_ExitInitMode>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10e      	bne.n	8002bcc <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a19      	ldr	r1, [r3, #32]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4319      	orrs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_RTC_Init+0x100>)
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
 8002bd2:	e001      	b.n	8002bd8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40002800 	.word	0x40002800

08002bf4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_RTC_SetTime+0x1a>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e088      	b.n	8002d20 <HAL_RTC_SetTime+0x12c>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c1e:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002c20:	22ca      	movs	r2, #202	; 0xca
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002c26:	2253      	movs	r2, #83	; 0x53
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fb6c 	bl	8003308 <RTC_EnterInitMode>
 8002c30:	4603      	mov	r3, r0
 8002c32:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d15e      	bne.n	8002cf8 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c46:	d057      	beq.n	8002cf8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d125      	bne.n	8002c9a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fbc1 	bl	80033ec <RTC_ByteToBcd2>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fbba 	bl	80033ec <RTC_ByteToBcd2>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c7c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	789b      	ldrb	r3, [r3, #2]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fbb2 	bl	80033ec <RTC_ByteToBcd2>
 8002c88:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c8a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	78db      	ldrb	r3, [r3, #3]
 8002c92:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e017      	b.n	8002cca <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cb8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cbe:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	78db      	ldrb	r3, [r3, #3]
 8002cc4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8002cca:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cd6:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	68d9      	ldr	r1, [r3, #12]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	490d      	ldr	r1, [pc, #52]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fb39 	bl	8003370 <RTC_ExitInitMode>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RTC_SetTime+0x134>)
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	40002800 	.word	0x40002800

08002d2c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8002d38:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <HAL_RTC_GetTime+0xc0>)
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_RTC_GetTime+0xc0>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4c:	d049      	beq.n	8002de2 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8002d4e:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_RTC_GetTime+0xc0>)
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RTC_GetTime+0xc0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d66:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	0d9b      	lsrs	r3, r3, #22
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11a      	bne.n	8002de2 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fb3a 	bl	800342a <RTC_Bcd2ToByte>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fb31 	bl	800342a <RTC_Bcd2ToByte>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	789b      	ldrb	r3, [r3, #2]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fb28 	bl	800342a <RTC_Bcd2ToByte>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40002800 	.word	0x40002800

08002df0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_RTC_SetDate+0x1a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e071      	b.n	8002eee <HAL_RTC_SetDate+0xfe>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10e      	bne.n	8002e3e <HAL_RTC_SetDate+0x4e>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	785b      	ldrb	r3, [r3, #1]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	f023 0310 	bic.w	r3, r3, #16
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	330a      	adds	r3, #10
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11c      	bne.n	8002e7e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 facf 	bl	80033ec <RTC_ByteToBcd2>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fac8 	bl	80033ec <RTC_ByteToBcd2>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e60:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	789b      	ldrb	r3, [r3, #2]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fac0 	bl	80033ec <RTC_ByteToBcd2>
 8002e6c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e6e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e00e      	b.n	8002e9c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	78db      	ldrb	r3, [r3, #3]
 8002e82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e8a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_RTC_SetDate+0x108>)
 8002e9e:	22ca      	movs	r2, #202	; 0xca
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RTC_SetDate+0x108>)
 8002ea4:	2253      	movs	r2, #83	; 0x53
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fa2d 	bl	8003308 <RTC_EnterInitMode>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8002eb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <HAL_RTC_SetDate+0x108>)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ec0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ec4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fa52 	bl	8003370 <RTC_ExitInitMode>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RTC_SetDate+0x108>)
 8002ed2:	22ff      	movs	r2, #255	; 0xff
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d103      	bne.n	8002ee4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40002800 	.word	0x40002800

08002efc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RTC_GetDate+0x98>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f14:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	0b5b      	lsrs	r3, r3, #13
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11a      	bne.n	8002f8a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	78db      	ldrb	r3, [r3, #3]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fa66 	bl	800342a <RTC_Bcd2ToByte>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa5d 	bl	800342a <RTC_Bcd2ToByte>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	789b      	ldrb	r3, [r3, #2]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa54 	bl	800342a <RTC_Bcd2ToByte>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40002800 	.word	0x40002800

08002f98 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RTC_SetAlarm_IT+0x1e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0f3      	b.n	800319e <HAL_RTC_SetAlarm_IT+0x206>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8002fc6:	4b78      	ldr	r3, [pc, #480]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd6:	d06a      	beq.n	80030ae <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d13a      	bne.n	8003054 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002fde:	4b72      	ldr	r3, [pc, #456]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f9f5 	bl	80033ec <RTC_ByteToBcd2>
 8003002:	4603      	mov	r3, r0
 8003004:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f9ee 	bl	80033ec <RTC_ByteToBcd2>
 8003010:	4603      	mov	r3, r0
 8003012:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003014:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	789b      	ldrb	r3, [r3, #2]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f9e6 	bl	80033ec <RTC_ByteToBcd2>
 8003020:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003022:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	78db      	ldrb	r3, [r3, #3]
 800302a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800302c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f9d8 	bl	80033ec <RTC_ByteToBcd2>
 800303c:	4603      	mov	r3, r0
 800303e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003040:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003048:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e02c      	b.n	80030ae <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800305c:	d00d      	beq.n	800307a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003066:	d008      	beq.n	800307a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003068:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003086:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800308c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	78db      	ldrb	r3, [r3, #3]
 8003092:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003094:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800309c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800309e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80030a4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ae:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030b0:	22ca      	movs	r2, #202	; 0xca
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
 80030b4:	4b3c      	ldr	r3, [pc, #240]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030b6:	2253      	movs	r2, #83	; 0x53
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	d12c      	bne.n	800311e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030ce:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030dc:	d107      	bne.n	80030ee <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	4930      	ldr	r1, [pc, #192]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	644b      	str	r3, [r1, #68]	; 0x44
 80030ec:	e006      	b.n	80030fc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80030ee:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80030f4:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80030fc:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003110:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003116:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800311a:	6193      	str	r3, [r2, #24]
 800311c:	e02b      	b.n	8003176 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003124:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003128:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800312a:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 800312c:	2202      	movs	r2, #2
 800312e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003136:	d107      	bne.n	8003148 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4919      	ldr	r1, [pc, #100]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003142:	4313      	orrs	r3, r2
 8003144:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003146:	e006      	b.n	8003156 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800314e:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003170:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003174:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_RTC_SetAlarm_IT+0x214>)
 8003178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <HAL_RTC_SetAlarm_IT+0x214>)
 800317e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003182:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40002800 	.word	0x40002800
 80031ac:	58000800 	.word	0x58000800

080031b0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_RTC_DeactivateAlarm+0x18>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e048      	b.n	800325a <HAL_RTC_DeactivateAlarm+0xaa>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031da:	22ca      	movs	r2, #202	; 0xca
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
 80031de:	4b21      	ldr	r3, [pc, #132]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031e0:	2253      	movs	r2, #83	; 0x53
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ea:	d115      	bne.n	8003218 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031f6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003202:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f023 0201 	bic.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003210:	4b14      	ldr	r3, [pc, #80]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003212:	2201      	movs	r2, #1
 8003214:	65da      	str	r2, [r3, #92]	; 0x5c
 8003216:	e014      	b.n	8003242 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 800321e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003222:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 800322a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800322e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f023 0202 	bic.w	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 800323e:	2202      	movs	r2, #2
 8003240:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40002800 	.word	0x40002800

08003268 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003272:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003288:	2201      	movs	r2, #1
 800328a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd f984 	bl	800059a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RTC_AlarmIRQHandler+0x50>)
 800329e:	2202      	movs	r2, #2
 80032a0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8dc 	bl	8003460 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40002800 	.word	0x40002800

080032bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_RTC_WaitForSynchro+0x48>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <HAL_RTC_WaitForSynchro+0x48>)
 80032ca:	f023 0320 	bic.w	r3, r3, #32
 80032ce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80032d0:	f7fd fd6c 	bl	8000dac <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80032d6:	e009      	b.n	80032ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032d8:	f7fd fd68 	bl	8000dac <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e6:	d901      	bls.n	80032ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e006      	b.n	80032fa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RTC_WaitForSynchro+0x48>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ef      	beq.n	80032d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40002800 	.word	0x40002800

08003308 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <RTC_EnterInitMode+0x64>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d120      	bne.n	8003362 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <RTC_EnterInitMode+0x64>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a11      	ldr	r2, [pc, #68]	; (800336c <RTC_EnterInitMode+0x64>)
 8003326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800332c:	f7fd fd3e 	bl	8000dac <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003332:	e00d      	b.n	8003350 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003334:	f7fd fd3a 	bl	8000dac <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003342:	d905      	bls.n	8003350 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2203      	movs	r2, #3
 800334c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <RTC_EnterInitMode+0x64>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <RTC_EnterInitMode+0x5a>
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d1e8      	bne.n	8003334 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40002800 	.word	0x40002800

08003370 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <RTC_ExitInitMode+0x78>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <RTC_ExitInitMode+0x78>)
 8003382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003386:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <RTC_ExitInitMode+0x78>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10c      	bne.n	80033ae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff91 	bl	80032bc <HAL_RTC_WaitForSynchro>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01e      	beq.n	80033de <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2203      	movs	r2, #3
 80033a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e017      	b.n	80033de <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <RTC_ExitInitMode+0x78>)
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <RTC_ExitInitMode+0x78>)
 80033b4:	f023 0320 	bic.w	r3, r3, #32
 80033b8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff7e 	bl	80032bc <HAL_RTC_WaitForSynchro>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2203      	movs	r2, #3
 80033ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <RTC_ExitInitMode+0x78>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <RTC_ExitInitMode+0x78>)
 80033d8:	f043 0320 	orr.w	r3, r3, #32
 80033dc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40002800 	.word	0x40002800

080033ec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80033fe:	e005      	b.n	800340c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	3b0a      	subs	r3, #10
 800340a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	2b09      	cmp	r3, #9
 8003410:	d8f6      	bhi.n	8003400 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	b2da      	uxtb	r2, r3
 800341a:	7afb      	ldrb	r3, [r7, #11]
 800341c:	4313      	orrs	r3, r2
 800341e:	b2db      	uxtb	r3, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2db      	uxtb	r3, r3
 8003452:	4413      	add	r3, r2
 8003454:	b2db      	uxtb	r3, r3
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <LL_RCC_GetUSARTClockSource>:
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	4313      	orrs	r3, r2
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <LL_RCC_GetLPUARTClockSource>:
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4013      	ands	r3, r2
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e042      	b.n	800354c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fd fb23 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2224      	movs	r2, #36	; 0x24
 80034e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f976 	bl	80037e8 <UART_SetConfig>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e022      	b.n	800354c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fbde 	bl	8003cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fc64 	bl	8003e12 <UART_CheckIdleState>
 800354a:	4603      	mov	r3, r0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	2b20      	cmp	r3, #32
 800356c:	d173      	bne.n	8003656 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_UART_Transmit+0x26>
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06c      	b.n	8003658 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	; 0x21
 800358a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358e:	f7fd fc0d 	bl	8000dac <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d108      	bne.n	80035c0 <HAL_UART_Transmit+0x6c>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e003      	b.n	80035c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c8:	e02c      	b.n	8003624 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fc6a 	bl	8003eae <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e039      	b.n	8003658 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3302      	adds	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e007      	b.n	8003612 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1cc      	bne.n	80035ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fc37 	bl	8003eae <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e006      	b.n	8003658 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003676:	2b20      	cmp	r3, #32
 8003678:	f040 80b1 	bne.w	80037de <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_UART_Receive+0x28>
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0a9      	b.n	80037e0 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2222      	movs	r2, #34	; 0x22
 8003698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a2:	f7fd fb83 	bl	8000dac <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c0:	d10e      	bne.n	80036e0 <HAL_UART_Receive+0x80>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <HAL_UART_Receive+0x76>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036d4:	e02d      	b.n	8003732 <HAL_UART_Receive+0xd2>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036de:	e028      	b.n	8003732 <HAL_UART_Receive+0xd2>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_UART_Receive+0xa4>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_UART_Receive+0x9a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036f8:	e01b      	b.n	8003732 <HAL_UART_Receive+0xd2>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	227f      	movs	r2, #127	; 0x7f
 80036fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003702:	e016      	b.n	8003732 <HAL_UART_Receive+0xd2>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370c:	d10d      	bne.n	800372a <HAL_UART_Receive+0xca>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_Receive+0xc0>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	227f      	movs	r2, #127	; 0x7f
 800371a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800371e:	e008      	b.n	8003732 <HAL_UART_Receive+0xd2>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	223f      	movs	r2, #63	; 0x3f
 8003724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003728:	e003      	b.n	8003732 <HAL_UART_Receive+0xd2>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003738:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d108      	bne.n	8003756 <HAL_UART_Receive+0xf6>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d104      	bne.n	8003756 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	e003      	b.n	800375e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800375e:	e032      	b.n	80037c6 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	2120      	movs	r1, #32
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fb9f 	bl	8003eae <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e032      	b.n	80037e0 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10c      	bne.n	800379a <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	b29a      	uxth	r2, r3
 8003788:	8a7b      	ldrh	r3, [r7, #18]
 800378a:	4013      	ands	r3, r2
 800378c:	b29a      	uxth	r2, r3
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3302      	adds	r3, #2
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	e00c      	b.n	80037b4 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	8a7b      	ldrh	r3, [r7, #18]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4013      	ands	r3, r2
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1c6      	bne.n	8003760 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ec:	b08c      	sub	sp, #48	; 0x30
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	431a      	orrs	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	431a      	orrs	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	4313      	orrs	r3, r2
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b94      	ldr	r3, [pc, #592]	; (8003a68 <UART_SetConfig+0x280>)
 8003818:	4013      	ands	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003820:	430b      	orrs	r3, r1
 8003822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a89      	ldr	r2, [pc, #548]	; (8003a6c <UART_SetConfig+0x284>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003850:	4313      	orrs	r3, r2
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800385e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003868:	430b      	orrs	r3, r1
 800386a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f023 010f 	bic.w	r1, r3, #15
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7a      	ldr	r2, [pc, #488]	; (8003a70 <UART_SetConfig+0x288>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d127      	bne.n	80038dc <UART_SetConfig+0xf4>
 800388c:	2003      	movs	r0, #3
 800388e:	f7ff fdf0 	bl	8003472 <LL_RCC_GetUSARTClockSource>
 8003892:	4603      	mov	r3, r0
 8003894:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003898:	2b03      	cmp	r3, #3
 800389a:	d81b      	bhi.n	80038d4 <UART_SetConfig+0xec>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <UART_SetConfig+0xbc>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038b5 	.word	0x080038b5
 80038a8:	080038c5 	.word	0x080038c5
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038cd 	.word	0x080038cd
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ba:	e080      	b.n	80039be <UART_SetConfig+0x1d6>
 80038bc:	2302      	movs	r3, #2
 80038be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c2:	e07c      	b.n	80039be <UART_SetConfig+0x1d6>
 80038c4:	2304      	movs	r3, #4
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ca:	e078      	b.n	80039be <UART_SetConfig+0x1d6>
 80038cc:	2308      	movs	r3, #8
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d2:	e074      	b.n	80039be <UART_SetConfig+0x1d6>
 80038d4:	2310      	movs	r3, #16
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038da:	e070      	b.n	80039be <UART_SetConfig+0x1d6>
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a64      	ldr	r2, [pc, #400]	; (8003a74 <UART_SetConfig+0x28c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d138      	bne.n	8003958 <UART_SetConfig+0x170>
 80038e6:	200c      	movs	r0, #12
 80038e8:	f7ff fdc3 	bl	8003472 <LL_RCC_GetUSARTClockSource>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d82c      	bhi.n	8003950 <UART_SetConfig+0x168>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <UART_SetConfig+0x114>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003951 	.word	0x08003951
 8003904:	08003951 	.word	0x08003951
 8003908:	08003951 	.word	0x08003951
 800390c:	08003941 	.word	0x08003941
 8003910:	08003951 	.word	0x08003951
 8003914:	08003951 	.word	0x08003951
 8003918:	08003951 	.word	0x08003951
 800391c:	08003939 	.word	0x08003939
 8003920:	08003951 	.word	0x08003951
 8003924:	08003951 	.word	0x08003951
 8003928:	08003951 	.word	0x08003951
 800392c:	08003949 	.word	0x08003949
 8003930:	2300      	movs	r3, #0
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003936:	e042      	b.n	80039be <UART_SetConfig+0x1d6>
 8003938:	2302      	movs	r3, #2
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393e:	e03e      	b.n	80039be <UART_SetConfig+0x1d6>
 8003940:	2304      	movs	r3, #4
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003946:	e03a      	b.n	80039be <UART_SetConfig+0x1d6>
 8003948:	2308      	movs	r3, #8
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394e:	e036      	b.n	80039be <UART_SetConfig+0x1d6>
 8003950:	2310      	movs	r3, #16
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003956:	e032      	b.n	80039be <UART_SetConfig+0x1d6>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a43      	ldr	r2, [pc, #268]	; (8003a6c <UART_SetConfig+0x284>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d12a      	bne.n	80039b8 <UART_SetConfig+0x1d0>
 8003962:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003966:	f7ff fd96 	bl	8003496 <LL_RCC_GetLPUARTClockSource>
 800396a:	4603      	mov	r3, r0
 800396c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003970:	d01a      	beq.n	80039a8 <UART_SetConfig+0x1c0>
 8003972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003976:	d81b      	bhi.n	80039b0 <UART_SetConfig+0x1c8>
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d00c      	beq.n	8003998 <UART_SetConfig+0x1b0>
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003982:	d815      	bhi.n	80039b0 <UART_SetConfig+0x1c8>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <UART_SetConfig+0x1a8>
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398c:	d008      	beq.n	80039a0 <UART_SetConfig+0x1b8>
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x1c8>
 8003990:	2300      	movs	r3, #0
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003996:	e012      	b.n	80039be <UART_SetConfig+0x1d6>
 8003998:	2302      	movs	r3, #2
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399e:	e00e      	b.n	80039be <UART_SetConfig+0x1d6>
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a6:	e00a      	b.n	80039be <UART_SetConfig+0x1d6>
 80039a8:	2308      	movs	r3, #8
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ae:	e006      	b.n	80039be <UART_SetConfig+0x1d6>
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b6:	e002      	b.n	80039be <UART_SetConfig+0x1d6>
 80039b8:	2310      	movs	r3, #16
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <UART_SetConfig+0x284>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	f040 80a4 	bne.w	8003b12 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d823      	bhi.n	8003a1a <UART_SetConfig+0x232>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0x1f0>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	08003a1b 	.word	0x08003a1b
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a0b 	.word	0x08003a0b
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003a1b 	.word	0x08003a1b
 80039f8:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039fc:	f7fe fd94 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a02:	e010      	b.n	8003a26 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <UART_SetConfig+0x290>)
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a08:	e00d      	b.n	8003a26 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fcd9 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003a0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a10:	e009      	b.n	8003a26 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a18:	e005      	b.n	8003a26 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8137 	beq.w	8003c9c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <UART_SetConfig+0x294>)
 8003a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d305      	bcc.n	8003a5e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d910      	bls.n	8003a80 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a64:	e11a      	b.n	8003c9c <UART_SetConfig+0x4b4>
 8003a66:	bf00      	nop
 8003a68:	cfff69f3 	.word	0xcfff69f3
 8003a6c:	40008000 	.word	0x40008000
 8003a70:	40013800 	.word	0x40013800
 8003a74:	40004400 	.word	0x40004400
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	08006fa4 	.word	0x08006fa4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	2200      	movs	r2, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	60fa      	str	r2, [r7, #12]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	4a8e      	ldr	r2, [pc, #568]	; (8003cc8 <UART_SetConfig+0x4e0>)
 8003a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2200      	movs	r2, #0
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa2:	f7fc fbc5 	bl	8000230 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	020b      	lsls	r3, r1, #8
 8003ab8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003abc:	0202      	lsls	r2, r0, #8
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	6849      	ldr	r1, [r1, #4]
 8003ac2:	0849      	lsrs	r1, r1, #1
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	4605      	mov	r5, r0
 8003aca:	eb12 0804 	adds.w	r8, r2, r4
 8003ace:	eb43 0905 	adc.w	r9, r3, r5
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	469a      	mov	sl, r3
 8003ada:	4693      	mov	fp, r2
 8003adc:	4652      	mov	r2, sl
 8003ade:	465b      	mov	r3, fp
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	f7fc fba4 	bl	8000230 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af6:	d308      	bcc.n	8003b0a <UART_SetConfig+0x322>
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afe:	d204      	bcs.n	8003b0a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	e0c8      	b.n	8003c9c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b10:	e0c4      	b.n	8003c9c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1a:	d167      	bne.n	8003bec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003b1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d828      	bhi.n	8003b76 <UART_SetConfig+0x38e>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <UART_SetConfig+0x344>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003b77 	.word	0x08003b77
 8003b3c:	08003b67 	.word	0x08003b67
 8003b40:	08003b77 	.word	0x08003b77
 8003b44:	08003b77 	.word	0x08003b77
 8003b48:	08003b77 	.word	0x08003b77
 8003b4c:	08003b6f 	.word	0x08003b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7fe fcea 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b56:	e014      	b.n	8003b82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7fe fcf8 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003b5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b5e:	e010      	b.n	8003b82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b60:	4b5a      	ldr	r3, [pc, #360]	; (8003ccc <UART_SetConfig+0x4e4>)
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b64:	e00d      	b.n	8003b82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b66:	f7fe fc2b 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003b6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b6c:	e009      	b.n	8003b82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b74:	e005      	b.n	8003b82 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8089 	beq.w	8003c9c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	4a4e      	ldr	r2, [pc, #312]	; (8003cc8 <UART_SetConfig+0x4e0>)
 8003b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b94:	461a      	mov	r2, r3
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b9c:	005a      	lsls	r2, r3, #1
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	441a      	add	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d916      	bls.n	8003be4 <UART_SetConfig+0x3fc>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d212      	bcs.n	8003be4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f023 030f 	bic.w	r3, r3, #15
 8003bc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	8bfb      	ldrh	r3, [r7, #30]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	8bfa      	ldrh	r2, [r7, #30]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	e05b      	b.n	8003c9c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bea:	e057      	b.n	8003c9c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d828      	bhi.n	8003c46 <UART_SetConfig+0x45e>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <UART_SetConfig+0x414>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003c29 	.word	0x08003c29
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	08003c47 	.word	0x08003c47
 8003c0c:	08003c37 	.word	0x08003c37
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c47 	.word	0x08003c47
 8003c18:	08003c47 	.word	0x08003c47
 8003c1c:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7fe fc82 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c26:	e014      	b.n	8003c52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c28:	f7fe fc90 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c2e:	e010      	b.n	8003c52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <UART_SetConfig+0x4e4>)
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c34:	e00d      	b.n	8003c52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7fe fbc3 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c3c:	e009      	b.n	8003c52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c44:	e005      	b.n	8003c52 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c50:	bf00      	nop
    }

    if (pclk != 0U)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d021      	beq.n	8003c9c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <UART_SetConfig+0x4e0>)
 8003c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c62:	461a      	mov	r2, r3
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	441a      	add	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	d909      	bls.n	8003c96 <UART_SetConfig+0x4ae>
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d205      	bcs.n	8003c96 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	e002      	b.n	8003c9c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003cb8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3730      	adds	r7, #48	; 0x30
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc6:	bf00      	nop
 8003cc8:	08006fa4 	.word	0x08006fa4
 8003ccc:	00f42400 	.word	0x00f42400

08003cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dce:	d10a      	bne.n	8003de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e22:	f7fc ffc3 	bl	8000dac <HAL_GetTick>
 8003e26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d10e      	bne.n	8003e54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f832 	bl	8003eae <UART_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e028      	b.n	8003ea6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d10e      	bne.n	8003e80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f81c 	bl	8003eae <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e012      	b.n	8003ea6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b09c      	sub	sp, #112	; 0x70
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ebe:	e0a9      	b.n	8004014 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec6:	f000 80a5 	beq.w	8004014 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eca:	f7fc ff6f 	bl	8000dac <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d140      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e6      	bne.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	663b      	str	r3, [r7, #96]	; 0x60
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f32:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e5      	bne.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e069      	b.n	8004036 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d051      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7e:	d149      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003faa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e6      	bne.n	8003f8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	613b      	str	r3, [r7, #16]
   return(result);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fdc:	623a      	str	r2, [r7, #32]
 8003fde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	69f9      	ldr	r1, [r7, #28]
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e010      	b.n	8004036 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4013      	ands	r3, r2
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	429a      	cmp	r2, r3
 8004030:	f43f af46 	beq.w	8003ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3770      	adds	r7, #112	; 0x70
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_UARTEx_DisableFifoMode+0x16>
 8004050:	2302      	movs	r3, #2
 8004052:	e027      	b.n	80040a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	; 0x24
 8004060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004082:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e02d      	b.n	8004122 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2224      	movs	r2, #36	; 0x24
 80040d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f850 	bl	80041a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800413e:	2302      	movs	r3, #2
 8004140:	e02d      	b.n	800419e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2224      	movs	r2, #36	; 0x24
 800414e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f812 	bl	80041a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041c8:	e031      	b.n	800422e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041ca:	2308      	movs	r3, #8
 80041cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041ce:	2308      	movs	r3, #8
 80041d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	0e5b      	lsrs	r3, r3, #25
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	0f5b      	lsrs	r3, r3, #29
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041f2:	7bbb      	ldrb	r3, [r7, #14]
 80041f4:	7b3a      	ldrb	r2, [r7, #12]
 80041f6:	4910      	ldr	r1, [pc, #64]	; (8004238 <UARTEx_SetNbDataToProcess+0x90>)
 80041f8:	5c8a      	ldrb	r2, [r1, r2]
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041fe:	7b3a      	ldrb	r2, [r7, #12]
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <UARTEx_SetNbDataToProcess+0x94>)
 8004202:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004204:	fb93 f3f2 	sdiv	r3, r3, r2
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	7b7a      	ldrb	r2, [r7, #13]
 8004214:	4908      	ldr	r1, [pc, #32]	; (8004238 <UARTEx_SetNbDataToProcess+0x90>)
 8004216:	5c8a      	ldrb	r2, [r1, r2]
 8004218:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800421c:	7b7a      	ldrb	r2, [r7, #13]
 800421e:	4907      	ldr	r1, [pc, #28]	; (800423c <UARTEx_SetNbDataToProcess+0x94>)
 8004220:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004222:	fb93 f3f2 	sdiv	r3, r3, r2
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	08006fbc 	.word	0x08006fbc
 800423c:	08006fc4 	.word	0x08006fc4

08004240 <calendar_init>:

/*
 *
 */
bool calendar_init(RTC_HandleTypeDef* hrtc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	if (!_isInit)
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <calendar_init+0x8c>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f083 0301 	eor.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d035      	beq.n	80042c2 <calendar_init+0x82>
	{
		// store pointer to rtc structure
		_hrtc = hrtc;
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <calendar_init+0x90>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6013      	str	r3, [r2, #0]

		// pass pointer to alarm control
		rtcCalendarControl_init(hrtc);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fc63 	bl	8004b28 <rtcCalendarControl_init>

		// initialize the calendar
		_calendarHead = -1;
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <calendar_init+0x94>)
 8004264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004268:	601a      	str	r2, [r3, #0]
		_calendarFree = 0;
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <calendar_init+0x98>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
		_currentEvent = -1;
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <calendar_init+0x9c>)
 8004272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004276:	601a      	str	r2, [r3, #0]
		_isInEvent = false;
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <calendar_init+0xa0>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e00d      	b.n	80042a0 <calendar_init+0x60>
		{
			_calendarEvents[idx].next = idx + 1;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	4816      	ldr	r0, [pc, #88]	; (80042e4 <calendar_init+0xa4>)
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4403      	add	r3, r0
 8004296:	3318      	adds	r3, #24
 8004298:	6019      	str	r1, [r3, #0]
		for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2bfe      	cmp	r3, #254	; 0xfe
 80042a4:	ddee      	ble.n	8004284 <calendar_init+0x44>
		}
		_calendarEvents[MAX_NUM_EVENTS - 1].next = -1;
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <calendar_init+0xa4>)
 80042a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ac:	461a      	mov	r2, r3
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b2:	f8c2 3bfc 	str.w	r3, [r2, #3068]	; 0xbfc

		// set init flag
		_isInit = true;
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <calendar_init+0x8c>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
		_isRunning = false;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <calendar_init+0xa8>)
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
	}
}
 80042c2:	bf00      	nop
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000168 	.word	0x20000168
 80042d0:	2000016c 	.word	0x2000016c
 80042d4:	2000000c 	.word	0x2000000c
 80042d8:	20001d70 	.word	0x20001d70
 80042dc:	20000010 	.word	0x20000010
 80042e0:	20001d74 	.word	0x20001d74
 80042e4:	20000170 	.word	0x20000170
 80042e8:	20000169 	.word	0x20000169

080042ec <calendar_start>:

/*
 *
 */
bool calendar_start(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_isInit && !_isRunning)
 80042f2:	4b26      	ldr	r3, [pc, #152]	; (800438c <calendar_start+0xa0>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d043      	beq.n	8004382 <calendar_start+0x96>
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <calendar_start+0xa4>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f083 0301 	eor.w	r3, r3, #1
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d03c      	beq.n	8004382 <calendar_start+0x96>
	{
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 8004308:	1cfa      	adds	r2, r7, #3
 800430a:	1d39      	adds	r1, r7, #4
 800430c:	f107 0308 	add.w	r3, r7, #8
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fa0f 	bl	8004734 <getNextAlarm>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02b      	beq.n	8004374 <calendar_start+0x88>
			// set alarm for next event transition (start or end of event)
			rtcCalendarControl_setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 800431c:	7ab8      	ldrb	r0, [r7, #10]
 800431e:	7af9      	ldrb	r1, [r7, #11]
 8004320:	7b3a      	ldrb	r2, [r7, #12]
 8004322:	7b7b      	ldrb	r3, [r7, #13]
 8004324:	f000 fd74 	bl	8004e10 <rtcCalendarControl_setAlarm_A>

			// if starting within an event, run the start callback
			if (withinEvent) {
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01b      	beq.n	8004366 <calendar_start+0x7a>
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4918      	ldr	r1, [pc, #96]	; (8004394 <calendar_start+0xa8>)
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3308      	adds	r3, #8
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <calendar_start+0x6c>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	4913      	ldr	r1, [pc, #76]	; (8004394 <calendar_start+0xa8>)
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3308      	adds	r3, #8
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4798      	blx	r3
				_currentEvent = currentEventIdx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a0f      	ldr	r2, [pc, #60]	; (8004398 <calendar_start+0xac>)
 800435c:	6013      	str	r3, [r2, #0]
				_isInEvent = true;
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <calendar_start+0xb0>)
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e002      	b.n	800436c <calendar_start+0x80>
			}
			else
			{
				_isInEvent = false;
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <calendar_start+0xb0>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
			}

			// make sure that alarm fired is cleared/reset
			_alarmAFired = false;
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <calendar_start+0xb4>)
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e001      	b.n	8004378 <calendar_start+0x8c>
		}

		// if there is no alarm to set, disable the alarm
		else {
			rtcCalendarControl_diableAlarm_A();
 8004374:	f000 fde8 	bl	8004f48 <rtcCalendarControl_diableAlarm_A>
		}

		// set is running flag
		_isRunning = true;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <calendar_start+0xa4>)
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]

		return true;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <calendar_start+0x98>
	}

	else
	{
		return false;
 8004382:	2300      	movs	r3, #0
	}
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000168 	.word	0x20000168
 8004390:	20000169 	.word	0x20000169
 8004394:	20000170 	.word	0x20000170
 8004398:	20000010 	.word	0x20000010
 800439c:	20001d74 	.word	0x20001d74
 80043a0:	20001d75 	.word	0x20001d75

080043a4 <calendar_setDateTime>:

/*
 *
 */
void calendar_setDateTime(DateTime dateTime)
{
 80043a4:	b5b0      	push	{r4, r5, r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	463b      	mov	r3, r7
 80043ac:	e883 0003 	stmia.w	r3, {r0, r1}
	if (_isInit)
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <calendar_setDateTime+0x34>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <calendar_setDateTime+0x2c>
		rtcCalendarControl_setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 80043b8:	7838      	ldrb	r0, [r7, #0]
 80043ba:	7879      	ldrb	r1, [r7, #1]
 80043bc:	78bc      	ldrb	r4, [r7, #2]
 80043be:	78fd      	ldrb	r5, [r7, #3]
 80043c0:	793b      	ldrb	r3, [r7, #4]
 80043c2:	797a      	ldrb	r2, [r7, #5]
 80043c4:	9201      	str	r2, [sp, #4]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	462b      	mov	r3, r5
 80043ca:	4622      	mov	r2, r4
 80043cc:	f000 fbc2 	bl	8004b54 <rtcCalendarControl_setDateTime>
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bdb0      	pop	{r4, r5, r7, pc}
 80043d8:	20000168 	.word	0x20000168

080043dc <calendar_getDateTime>:

/*
 *
 */
void calendar_getDateTime(DateTime* dateTime)
{
 80043dc:	b5b0      	push	{r4, r5, r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	6078      	str	r0, [r7, #4]
	if (_isInit)
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <calendar_getDateTime+0x3c>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d010      	beq.n	800440e <calendar_getDateTime+0x32>
		rtcCalendarControl_getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1c9c      	adds	r4, r3, #2
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	1cdd      	adds	r5, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	3205      	adds	r2, #5
 8004402:	9201      	str	r2, [sp, #4]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	462b      	mov	r3, r5
 8004408:	4622      	mov	r2, r4
 800440a:	f000 fc6d 	bl	8004ce8 <rtcCalendarControl_getDateTime>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bdb0      	pop	{r4, r5, r7, pc}
 8004416:	bf00      	nop
 8004418:	20000168 	.word	0x20000168

0800441c <calendar_addEvent>:

/*
 *
 */
CalendarStatus calendar_addEvent(CalendarEvent *event)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	// add only if the calendar has been initialized
	if (_isInit)
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <calendar_addEvent+0x30>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <calendar_addEvent+0x24>
	{
		if (_addEvent(event))
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 faa9 	bl	8004984 <_addEvent>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <calendar_addEvent+0x20>
		{
			return CALENDAR_OKAY;
 8004438:	2300      	movs	r3, #0
 800443a:	e002      	b.n	8004442 <calendar_addEvent+0x26>
		}

		else
		{
			return CALENDAR_FULL;
 800443c:	2302      	movs	r3, #2
 800443e:	e000      	b.n	8004442 <calendar_addEvent+0x26>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDER_NOT_INIT;
 8004440:	2301      	movs	r3, #1
	}
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000168 	.word	0x20000168

08004450 <calendar_update>:

/*
 *
 */
void calendar_update(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b094      	sub	sp, #80	; 0x50
 8004454:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_isInit && _isRunning && _alarmAFired) {
 8004456:	4b7f      	ldr	r3, [pc, #508]	; (8004654 <calendar_update+0x204>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80f5 	beq.w	800464a <calendar_update+0x1fa>
 8004460:	4b7d      	ldr	r3, [pc, #500]	; (8004658 <calendar_update+0x208>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80f0 	beq.w	800464a <calendar_update+0x1fa>
 800446a:	4b7c      	ldr	r3, [pc, #496]	; (800465c <calendar_update+0x20c>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80ea 	beq.w	800464a <calendar_update+0x1fa>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 8004476:	f107 0243 	add.w	r2, r7, #67	; 0x43
 800447a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800447e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f956 	bl	8004734 <getNextAlarm>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80bf 	beq.w	800460e <calendar_update+0x1be>
			// set alarm for next event transition (start or end of event)
			rtcCalendarControl_setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8004490:	f897 004a 	ldrb.w	r0, [r7, #74]	; 0x4a
 8004494:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 8004498:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800449c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044a0:	f000 fcb6 	bl	8004e10 <rtcCalendarControl_setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 80044a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01c      	beq.n	80044e6 <calendar_update+0x96>
 80044ac:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <calendar_update+0x210>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f083 0301 	eor.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d015      	beq.n	80044e6 <calendar_update+0x96>

				// call start event callback
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80044ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044bc:	4969      	ldr	r1, [pc, #420]	; (8004664 <calendar_update+0x214>)
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3308      	adds	r3, #8
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d061      	beq.n	8004594 <calendar_update+0x144>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 80044d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d2:	4964      	ldr	r1, [pc, #400]	; (8004664 <calendar_update+0x214>)
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3308      	adds	r3, #8
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80044e4:	e056      	b.n	8004594 <calendar_update+0x144>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 80044e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d030      	beq.n	8004550 <calendar_update+0x100>
 80044ee:	4b5c      	ldr	r3, [pc, #368]	; (8004660 <calendar_update+0x210>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02c      	beq.n	8004550 <calendar_update+0x100>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 80044f6:	4b5c      	ldr	r3, [pc, #368]	; (8004668 <calendar_update+0x218>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	495a      	ldr	r1, [pc, #360]	; (8004664 <calendar_update+0x214>)
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	3314      	adds	r3, #20
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <calendar_update+0xd4>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800450e:	4b56      	ldr	r3, [pc, #344]	; (8004668 <calendar_update+0x218>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4954      	ldr	r1, [pc, #336]	; (8004664 <calendar_update+0x214>)
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	3314      	adds	r3, #20
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8004524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004526:	494f      	ldr	r1, [pc, #316]	; (8004664 <calendar_update+0x214>)
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	3308      	adds	r3, #8
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d02c      	beq.n	8004594 <calendar_update+0x144>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 800453a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800453c:	4949      	ldr	r1, [pc, #292]	; (8004664 <calendar_update+0x214>)
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	3308      	adds	r3, #8
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4798      	blx	r3
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 800454e:	e021      	b.n	8004594 <calendar_update+0x144>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 8004550:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01a      	beq.n	8004594 <calendar_update+0x144>
 800455e:	4b40      	ldr	r3, [pc, #256]	; (8004660 <calendar_update+0x210>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <calendar_update+0x144>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 8004566:	4b40      	ldr	r3, [pc, #256]	; (8004668 <calendar_update+0x218>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	493e      	ldr	r1, [pc, #248]	; (8004664 <calendar_update+0x214>)
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3314      	adds	r3, #20
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <calendar_update+0x144>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <calendar_update+0x218>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4938      	ldr	r1, [pc, #224]	; (8004664 <calendar_update+0x214>)
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3314      	adds	r3, #20
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4798      	blx	r3

			// else, alarm is just being reset for next month/year


			// update current event
			_currentEvent = currentEventIdx;
 8004594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004596:	4a34      	ldr	r2, [pc, #208]	; (8004668 <calendar_update+0x218>)
 8004598:	6013      	str	r3, [r2, #0]
			if (withinEvent)
 800459a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01b      	beq.n	80045da <calendar_update+0x18a>
			{
				_isInEvent = true;
 80045a2:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <calendar_update+0x210>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
				// for testing purposes
				char body[UART_PACKET_PAYLOAD_SIZE] = {0};
 80045a8:	2300      	movs	r3, #0
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	2238      	movs	r2, #56	; 0x38
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 fa7d 	bl	8005ab4 <memset>
				snprintf(body, UART_PACKET_SIZE, "IN EVENT %d", _currentEvent+1);
 80045ba:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <calendar_update+0x218>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	1d38      	adds	r0, r7, #4
 80045c2:	4a2a      	ldr	r2, [pc, #168]	; (800466c <calendar_update+0x21c>)
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	f001 fa7d 	bl	8005ac4 <sniprintf>
				desktopAppSession_enqueueMessage("MESG", body);
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4828      	ldr	r0, [pc, #160]	; (8004670 <calendar_update+0x220>)
 80045d0:	f000 fede 	bl	8005390 <desktopAppSession_enqueueMessage>
				desktopAppSession_update();
 80045d4:	f000 fec4 	bl	8005360 <desktopAppSession_update>
 80045d8:	e034      	b.n	8004644 <calendar_update+0x1f4>
			}
			else
			{
				_isInEvent = false;
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <calendar_update+0x210>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
				// for testing purposes
				char body[UART_PACKET_PAYLOAD_SIZE] = {0};
 80045e0:	2300      	movs	r3, #0
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	2238      	movs	r2, #56	; 0x38
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fa61 	bl	8005ab4 <memset>
				snprintf(body, UART_PACKET_SIZE, "NOT IN EVENT");
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <calendar_update+0x224>)
 80045f6:	2140      	movs	r1, #64	; 0x40
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 fa63 	bl	8005ac4 <sniprintf>
				desktopAppSession_enqueueMessage("MESG", body);
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	4619      	mov	r1, r3
 8004602:	481b      	ldr	r0, [pc, #108]	; (8004670 <calendar_update+0x220>)
 8004604:	f000 fec4 	bl	8005390 <desktopAppSession_enqueueMessage>
				desktopAppSession_update();
 8004608:	f000 feaa 	bl	8005360 <desktopAppSession_update>
 800460c:	e01a      	b.n	8004644 <calendar_update+0x1f4>

		// if there is no alarm to set, disable the alarm and exit any events
		else {
//			diableAlarm_A();

			if (CURRENTLY_IN_EVENT) {
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <calendar_update+0x210>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d016      	beq.n	8004644 <calendar_update+0x1f4>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <calendar_update+0x218>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4912      	ldr	r1, [pc, #72]	; (8004664 <calendar_update+0x214>)
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	3314      	adds	r3, #20
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <calendar_update+0x1f4>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <calendar_update+0x218>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	490c      	ldr	r1, [pc, #48]	; (8004664 <calendar_update+0x214>)
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3314      	adds	r3, #20
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <calendar_update+0x20c>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
	}
}
 800464a:	bf00      	nop
 800464c:	3750      	adds	r7, #80	; 0x50
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000168 	.word	0x20000168
 8004658:	20000169 	.word	0x20000169
 800465c:	20001d75 	.word	0x20001d75
 8004660:	20001d74 	.word	0x20001d74
 8004664:	20000170 	.word	0x20000170
 8004668:	20000010 	.word	0x20000010
 800466c:	08006dfc 	.word	0x08006dfc
 8004670:	08006e08 	.word	0x08006e08
 8004674:	08006e10 	.word	0x08006e10

08004678 <calendar_AlarmA_ISR>:

/*
 *
 */
void calendar_AlarmA_ISR(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <calendar_AlarmA_ISR+0x14>)
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20001d75 	.word	0x20001d75

08004690 <compareDateTime>:
/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	f107 0408 	add.w	r4, r7, #8
 800469a:	e884 0003 	stmia.w	r4, {r0, r1}
 800469e:	4639      	mov	r1, r7
 80046a0:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046ac:	f000 f80e 	bl	80046cc <dateTimeToSeconds>
 80046b0:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 80046b2:	463b      	mov	r3, r7
 80046b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046b8:	f000 f808 	bl	80046cc <dateTimeToSeconds>
 80046bc:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd90      	pop	{r4, r7, pc}

080046cc <dateTimeToSeconds>:

/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	463b      	mov	r3, r7
 80046d4:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80046d8:	797b      	ldrb	r3, [r7, #5]
 80046da:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80046dc:	793b      	ldrb	r3, [r7, #4]
 80046de:	461a      	mov	r2, r3
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80046f8:	78bb      	ldrb	r3, [r7, #2]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	490a      	ldr	r1, [pc, #40]	; (8004728 <dateTimeToSeconds+0x5c>)
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8004704:	787b      	ldrb	r3, [r7, #1]
 8004706:	3b01      	subs	r3, #1
 8004708:	4908      	ldr	r1, [pc, #32]	; (800472c <dateTimeToSeconds+0x60>)
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 8004710:	783b      	ldrb	r3, [r7, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <dateTimeToSeconds+0x64>)
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	00015180 	.word	0x00015180
 800472c:	00278d00 	.word	0x00278d00
 8004730:	01da9c00 	.word	0x01da9c00

08004734 <getNextAlarm>:

/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b08d      	sub	sp, #52	; 0x34
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
	bool nextAlarmFound = false;
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	DateTime now = {0};
 800474a:	f107 031c 	add.w	r3, r7, #28
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	rtcCalendarControl_getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 800475e:	f107 031c 	add.w	r3, r7, #28
 8004762:	1cdc      	adds	r4, r3, #3
 8004764:	f107 031c 	add.w	r3, r7, #28
 8004768:	1c9a      	adds	r2, r3, #2
 800476a:	f107 031c 	add.w	r3, r7, #28
 800476e:	1c59      	adds	r1, r3, #1
 8004770:	f107 001c 	add.w	r0, r7, #28
 8004774:	f107 031c 	add.w	r3, r7, #28
 8004778:	3305      	adds	r3, #5
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	f107 031c 	add.w	r3, r7, #28
 8004780:	3304      	adds	r3, #4
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	4623      	mov	r3, r4
 8004786:	f000 faaf 	bl	8004ce8 <rtcCalendarControl_getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = _calendarHead;
 800478a:	4b7c      	ldr	r3, [pc, #496]	; (800497c <getNextAlarm+0x248>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
	nextAlarmFound = false;
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (eventIdx != -1)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479c:	f000 80ce 	beq.w	800493c <getNextAlarm+0x208>
	{
		while (eventIdx != -1 && !nextAlarmFound) {
 80047a0:	e0c0      	b.n	8004924 <getNextAlarm+0x1f0>
			// test if before event
			if (compareDateTime(now, _calendarEvents[eventIdx].event.start) < 0)
 80047a2:	4977      	ldr	r1, [pc, #476]	; (8004980 <getNextAlarm+0x24c>)
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	cb0c      	ldmia	r3, {r2, r3}
 80047b2:	f107 011c 	add.w	r1, r7, #28
 80047b6:	c903      	ldmia	r1, {r0, r1}
 80047b8:	f7ff ff6a 	bl	8004690 <compareDateTime>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da41      	bge.n	8004846 <getNextAlarm+0x112>
			{
				// then the next alarm is the beginning of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.start.year;
 80047c2:	496f      	ldr	r1, [pc, #444]	; (8004980 <getNextAlarm+0x24c>)
 80047c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.start.month;
 80047d4:	496a      	ldr	r1, [pc, #424]	; (8004980 <getNextAlarm+0x24c>)
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	3301      	adds	r3, #1
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.start.day;
 80047e8:	4965      	ldr	r1, [pc, #404]	; (8004980 <getNextAlarm+0x24c>)
 80047ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3302      	adds	r3, #2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.start.hour;
 80047fc:	4960      	ldr	r1, [pc, #384]	; (8004980 <getNextAlarm+0x24c>)
 80047fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	3303      	adds	r3, #3
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.start.minute;
 8004810:	495b      	ldr	r1, [pc, #364]	; (8004980 <getNextAlarm+0x24c>)
 8004812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3304      	adds	r3, #4
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.start.second;
 8004824:	4956      	ldr	r1, [pc, #344]	; (8004980 <getNextAlarm+0x24c>)
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	3305      	adds	r3, #5
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = false;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e06e      	b.n	8004924 <getNextAlarm+0x1f0>
			}

			// test if within event
			else if(compareDateTime(now, _calendarEvents[eventIdx].event.start) >= 0
 8004846:	494e      	ldr	r1, [pc, #312]	; (8004980 <getNextAlarm+0x24c>)
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	cb0c      	ldmia	r3, {r2, r3}
 8004856:	f107 011c 	add.w	r1, r7, #28
 800485a:	c903      	ldmia	r1, {r0, r1}
 800485c:	f7ff ff18 	bl	8004690 <compareDateTime>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	db54      	blt.n	8004910 <getNextAlarm+0x1dc>
					&& compareDateTime(now, _calendarEvents[eventIdx].event.end) < 0)
 8004866:	4946      	ldr	r1, [pc, #280]	; (8004980 <getNextAlarm+0x24c>)
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	3308      	adds	r3, #8
 8004876:	3304      	adds	r3, #4
 8004878:	cb0c      	ldmia	r3, {r2, r3}
 800487a:	f107 011c 	add.w	r1, r7, #28
 800487e:	c903      	ldmia	r1, {r0, r1}
 8004880:	f7ff ff06 	bl	8004690 <compareDateTime>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	da42      	bge.n	8004910 <getNextAlarm+0x1dc>
			{
				// then the next alarm is the end of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.end.year;
 800488a:	493d      	ldr	r1, [pc, #244]	; (8004980 <getNextAlarm+0x24c>)
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	330c      	adds	r3, #12
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.end.month;
 800489e:	4938      	ldr	r1, [pc, #224]	; (8004980 <getNextAlarm+0x24c>)
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	330d      	adds	r3, #13
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.end.day;
 80048b2:	4933      	ldr	r1, [pc, #204]	; (8004980 <getNextAlarm+0x24c>)
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	330e      	adds	r3, #14
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.end.hour;
 80048c6:	492e      	ldr	r1, [pc, #184]	; (8004980 <getNextAlarm+0x24c>)
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	330f      	adds	r3, #15
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.end.minute;
 80048da:	4929      	ldr	r1, [pc, #164]	; (8004980 <getNextAlarm+0x24c>)
 80048dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	3310      	adds	r3, #16
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.end.second;
 80048ee:	4924      	ldr	r1, [pc, #144]	; (8004980 <getNextAlarm+0x24c>)
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3311      	adds	r3, #17
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = true;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e009      	b.n	8004924 <getNextAlarm+0x1f0>
			}

			// traverse to next event
			else {
				eventIdx = _calendarEvents[eventIdx].next;
 8004910:	491b      	ldr	r1, [pc, #108]	; (8004980 <getNextAlarm+0x24c>)
 8004912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	3318      	adds	r3, #24
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
		while (eventIdx != -1 && !nextAlarmFound) {
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492a:	d007      	beq.n	800493c <getNextAlarm+0x208>
 800492c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004930:	f083 0301 	eor.w	r3, r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	f47f af33 	bne.w	80047a2 <getNextAlarm+0x6e>
			}
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 800493c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004940:	f083 0301 	eor.w	r3, r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <getNextAlarm+0x226>
		dateTime = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004954:	601a      	str	r2, [r3, #0]
		return false;
 8004956:	2300      	movs	r3, #0
 8004958:	e00b      	b.n	8004972 <getNextAlarm+0x23e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	461a      	mov	r2, r3
 800495e:	f107 0314 	add.w	r3, r7, #20
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	6010      	str	r0, [r2, #0]
 8004966:	889b      	ldrh	r3, [r3, #4]
 8004968:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = eventIdx;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	601a      	str	r2, [r3, #0]
		return true;
 8004970:	2301      	movs	r3, #1
	}
}
 8004972:	4618      	mov	r0, r3
 8004974:	372c      	adds	r7, #44	; 0x2c
 8004976:	46bd      	mov	sp, r7
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	bf00      	nop
 800497c:	2000000c 	.word	0x2000000c
 8004980:	20000170 	.word	0x20000170

08004984 <_addEvent>:

/*
 *
 */
bool _addEvent(CalendarEvent* event)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	int tempEndOfHead;

	// if the calendar is full, return early
	if (_calendarFree == -1)
 800498c:	4b42      	ldr	r3, [pc, #264]	; (8004a98 <_addEvent+0x114>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004994:	d101      	bne.n	800499a <_addEvent+0x16>
	{
		return false;
 8004996:	2300      	movs	r3, #0
 8004998:	e079      	b.n	8004a8e <_addEvent+0x10a>
	}

	// if the calendar is empty, insert at front
	if (_calendarHead == -1)
 800499a:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <_addEvent+0x118>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a2:	d128      	bne.n	80049f6 <_addEvent+0x72>
	{
		// copy event into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 80049a4:	4b3c      	ldr	r3, [pc, #240]	; (8004a98 <_addEvent+0x114>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4a3b      	ldr	r2, [pc, #236]	; (8004aa0 <_addEvent+0x11c>)
 80049b2:	4413      	add	r3, r2
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f874 	bl	8004aa4 <_copyEvent>

		// set the head
		_calendarHead = _calendarFree;
 80049bc:	4b36      	ldr	r3, [pc, #216]	; (8004a98 <_addEvent+0x114>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a36      	ldr	r2, [pc, #216]	; (8004a9c <_addEvent+0x118>)
 80049c2:	6013      	str	r3, [r2, #0]

		// set free to next free
		_calendarFree = _calendarEvents[_calendarFree].next;
 80049c4:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <_addEvent+0x114>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4935      	ldr	r1, [pc, #212]	; (8004aa0 <_addEvent+0x11c>)
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3318      	adds	r3, #24
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2f      	ldr	r2, [pc, #188]	; (8004a98 <_addEvent+0x114>)
 80049da:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[_calendarHead].next = -1;
 80049dc:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <_addEvent+0x118>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	492f      	ldr	r1, [pc, #188]	; (8004aa0 <_addEvent+0x11c>)
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3318      	adds	r3, #24
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e04a      	b.n	8004a8c <_addEvent+0x108>

	// if the calendar is not empty (or full), insert at end of list
	else
	{
		// find end of head
		tempEndOfHead = _calendarHead;
 80049f6:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <_addEvent+0x118>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 80049fc:	e009      	b.n	8004a12 <_addEvent+0x8e>
			tempEndOfHead = _calendarEvents[tempEndOfHead].next;
 80049fe:	4928      	ldr	r1, [pc, #160]	; (8004aa0 <_addEvent+0x11c>)
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3318      	adds	r3, #24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8004a12:	4923      	ldr	r1, [pc, #140]	; (8004aa0 <_addEvent+0x11c>)
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	3318      	adds	r3, #24
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a28:	d1e9      	bne.n	80049fe <_addEvent+0x7a>

		// copy events into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <_addEvent+0x114>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <_addEvent+0x11c>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f831 	bl	8004aa4 <_copyEvent>

		// link into head list
		_calendarEvents[tempEndOfHead].next = _calendarFree;
 8004a42:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <_addEvent+0x114>)
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	4816      	ldr	r0, [pc, #88]	; (8004aa0 <_addEvent+0x11c>)
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4403      	add	r3, r0
 8004a54:	3318      	adds	r3, #24
 8004a56:	6019      	str	r1, [r3, #0]
		tempEndOfHead = _calendarFree;
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <_addEvent+0x114>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]

		// set free to next free
			_calendarFree = _calendarEvents[_calendarFree].next;
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <_addEvent+0x114>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	490f      	ldr	r1, [pc, #60]	; (8004aa0 <_addEvent+0x11c>)
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3318      	adds	r3, #24
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <_addEvent+0x114>)
 8004a74:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[tempEndOfHead].next = -1;
 8004a76:	490a      	ldr	r1, [pc, #40]	; (8004aa0 <_addEvent+0x11c>)
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3318      	adds	r3, #24
 8004a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a8a:	601a      	str	r2, [r3, #0]
	}

	// return okay
	return true;
 8004a8c:	2301      	movs	r3, #1
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20001d70 	.word	0x20001d70
 8004a9c:	2000000c 	.word	0x2000000c
 8004aa0:	20000170 	.word	0x20000170

08004aa4 <_copyEvent>:

/*
 *
 */
void _copyEvent(CalendarEvent* to, CalendarEvent* from)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	785a      	ldrb	r2, [r3, #1]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	789a      	ldrb	r2, [r3, #2]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	78da      	ldrb	r2, [r3, #3]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	791a      	ldrb	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	795a      	ldrb	r2, [r3, #5]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	609a      	str	r2, [r3, #8]
	to->end.year = from->end.year;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	7b1a      	ldrb	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	731a      	strb	r2, [r3, #12]
	to->end.month = from->end.month;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	7b5a      	ldrb	r2, [r3, #13]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	735a      	strb	r2, [r3, #13]
	to->end.day = from->end.day;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	7b9a      	ldrb	r2, [r3, #14]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	739a      	strb	r2, [r3, #14]
	to->end.hour = from->end.hour;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	7bda      	ldrb	r2, [r3, #15]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	73da      	strb	r2, [r3, #15]
	to->end.minute = from->end.minute;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	7c1a      	ldrb	r2, [r3, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	741a      	strb	r2, [r3, #16]
	to->end.second = from->end.second;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	7c5a      	ldrb	r2, [r3, #17]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	745a      	strb	r2, [r3, #17]
	to->end_callback = from->end_callback;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	615a      	str	r2, [r3, #20]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <rtcCalendarControl_init>:


/*
 *
 */
void rtcCalendarControl_init(RTC_HandleTypeDef* hrtc) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	if (hrtc != NULL && hrtc->Instance != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <rtcCalendarControl_init+0x1e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <rtcCalendarControl_init+0x1e>
	{
		_rtc_handle = hrtc;
 8004b3e:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <rtcCalendarControl_init+0x28>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6013      	str	r3, [r2, #0]
		return true;
 8004b44:	e000      	b.n	8004b48 <rtcCalendarControl_init+0x20>
	}

	else
	{
		return false;
 8004b46:	bf00      	nop
	}
}
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	20001d78 	.word	0x20001d78

08004b54 <rtcCalendarControl_setDateTime>:


/*
 *
 */
void rtcCalendarControl_setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	461a      	mov	r2, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	71fb      	strb	r3, [r7, #7]
 8004b66:	4603      	mov	r3, r0
 8004b68:	71bb      	strb	r3, [r7, #6]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	717b      	strb	r3, [r7, #5]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	4a5a      	ldr	r2, [pc, #360]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	08db      	lsrs	r3, r3, #3
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	b258      	sxtb	r0, r3
 8004b82:	79fa      	ldrb	r2, [r7, #7]
 8004b84:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004b86:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8a:	08d9      	lsrs	r1, r3, #3
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	b25b      	sxtb	r3, r3
 8004b9a:	4303      	orrs	r3, r0
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8004ba2:	79bb      	ldrb	r3, [r7, #6]
 8004ba4:	4a4e      	ldr	r2, [pc, #312]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	b258      	sxtb	r0, r3
 8004bb2:	79ba      	ldrb	r2, [r7, #6]
 8004bb4:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bba:	08d9      	lsrs	r1, r3, #3
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	4303      	orrs	r3, r0
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8004bd2:	797b      	ldrb	r3, [r7, #5]
 8004bd4:	4a42      	ldr	r2, [pc, #264]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	b258      	sxtb	r0, r3
 8004be2:	797a      	ldrb	r2, [r7, #5]
 8004be4:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004be6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bea:	08d9      	lsrs	r1, r3, #3
 8004bec:	460b      	mov	r3, r1
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	b25b      	sxtb	r3, r3
 8004bfa:	4303      	orrs	r3, r0
 8004bfc:	b25b      	sxtb	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8004c06:	793b      	ldrb	r3, [r7, #4]
 8004c08:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	b258      	sxtb	r0, r3
 8004c16:	793a      	ldrb	r2, [r7, #4]
 8004c18:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c1e:	08d9      	lsrs	r1, r3, #3
 8004c20:	460b      	mov	r3, r1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	4303      	orrs	r3, r0
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8004c36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c3a:	4a29      	ldr	r2, [pc, #164]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	b258      	sxtb	r0, r3
 8004c48:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004c4c:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c52:	08d9      	lsrs	r1, r3, #3
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	4303      	orrs	r3, r0
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8004c6a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	b258      	sxtb	r0, r3
 8004c7c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004c80:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <rtcCalendarControl_setDateTime+0x18c>)
 8004c82:	fba3 1302 	umull	r1, r3, r3, r2
 8004c86:	08d9      	lsrs	r1, r3, #3
 8004c88:	460b      	mov	r3, r1
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	4303      	orrs	r3, r0
 8004c98:	b25b      	sxtb	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <rtcCalendarControl_setDateTime+0x190>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f107 011c 	add.w	r1, r7, #28
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe f8a1 	bl	8002df0 <HAL_RTC_SetDate>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <rtcCalendarControl_setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8004cb4:	b672      	cpsid	i
}
 8004cb6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8004cb8:	e7fe      	b.n	8004cb8 <rtcCalendarControl_setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <rtcCalendarControl_setDateTime+0x190>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f107 0108 	add.w	r1, r7, #8
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fd ff95 	bl	8002bf4 <HAL_RTC_SetTime>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <rtcCalendarControl_setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd0:	b672      	cpsid	i
}
 8004cd2:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8004cd4:	e7fe      	b.n	8004cd4 <rtcCalendarControl_setDateTime+0x180>
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	3724      	adds	r7, #36	; 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	cccccccd 	.word	0xcccccccd
 8004ce4:	20001d78 	.word	0x20001d78

08004ce8 <rtcCalendarControl_getDateTime>:


/*
 *
 */
void rtcCalendarControl_getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8004cf6:	f107 0314 	add.w	r3, r7, #20
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	60da      	str	r2, [r3, #12]
 8004d04:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8004d0a:	4b40      	ldr	r3, [pc, #256]	; (8004e0c <rtcCalendarControl_getDateTime+0x124>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f107 0114 	add.w	r1, r7, #20
 8004d12:	2201      	movs	r2, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe f809 	bl	8002d2c <HAL_RTC_GetTime>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <rtcCalendarControl_getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d20:	b672      	cpsid	i
}
 8004d22:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8004d24:	e7fe      	b.n	8004d24 <rtcCalendarControl_getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <rtcCalendarControl_getDateTime+0x124>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f107 0110 	add.w	r1, r7, #16
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe f8e3 	bl	8002efc <HAL_RTC_GetDate>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <rtcCalendarControl_getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3c:	b672      	cpsid	i
}
 8004d3e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8004d40:	e7fe      	b.n	8004d40 <rtcCalendarControl_getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	0092      	lsls	r2, r2, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8004d62:	7c7b      	ldrb	r3, [r7, #17]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	0092      	lsls	r2, r2, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	7c7b      	ldrb	r3, [r7, #17]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8004d82:	7cbb      	ldrb	r3, [r7, #18]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	0092      	lsls	r2, r2, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	7cbb      	ldrb	r3, [r7, #18]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8004da2:	7d3b      	ldrb	r3, [r7, #20]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	7d3b      	ldrb	r3, [r7, #20]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8004dc2:	7d7b      	ldrb	r3, [r7, #21]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	0092      	lsls	r2, r2, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	7d7b      	ldrb	r3, [r7, #21]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8004de2:	7dbb      	ldrb	r3, [r7, #22]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	0092      	lsls	r2, r2, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	7dbb      	ldrb	r3, [r7, #22]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	701a      	strb	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3728      	adds	r7, #40	; 0x28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20001d78 	.word	0x20001d78

08004e10 <rtcCalendarControl_setAlarm_A>:


/*
 *
 */
void rtcCalendarControl_setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b08f      	sub	sp, #60	; 0x3c
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	71fb      	strb	r3, [r7, #7]
 8004e22:	4603      	mov	r3, r0
 8004e24:	71bb      	strb	r3, [r7, #6]
 8004e26:	460b      	mov	r3, r1
 8004e28:	717b      	strb	r3, [r7, #5]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8004e2e:	f107 030c 	add.w	r3, r7, #12
 8004e32:	222c      	movs	r2, #44	; 0x2c
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fe3c 	bl	8005ab4 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	b258      	sxtb	r0, r3
 8004e4c:	79fa      	ldrb	r2, [r7, #7]
 8004e4e:	4b3c      	ldr	r3, [pc, #240]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	08d9      	lsrs	r1, r3, #3
 8004e56:	460b      	mov	r3, r1
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	4303      	orrs	r3, r0
 8004e66:	b25b      	sxtb	r3, r3
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8004e6e:	79bb      	ldrb	r3, [r7, #6]
 8004e70:	4a33      	ldr	r2, [pc, #204]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	08db      	lsrs	r3, r3, #3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	b258      	sxtb	r0, r3
 8004e7e:	79ba      	ldrb	r2, [r7, #6]
 8004e80:	4b2f      	ldr	r3, [pc, #188]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004e82:	fba3 1302 	umull	r1, r3, r3, r2
 8004e86:	08d9      	lsrs	r1, r3, #3
 8004e88:	460b      	mov	r3, r1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	4303      	orrs	r3, r0
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8004e9e:	797b      	ldrb	r3, [r7, #5]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	08db      	lsrs	r3, r3, #3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	b258      	sxtb	r0, r3
 8004eae:	797a      	ldrb	r2, [r7, #5]
 8004eb0:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb6:	08d9      	lsrs	r1, r3, #3
 8004eb8:	460b      	mov	r3, r1
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	b25b      	sxtb	r3, r3
 8004ec6:	4303      	orrs	r3, r0
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8004ece:	793b      	ldrb	r3, [r7, #4]
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	08db      	lsrs	r3, r3, #3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	b258      	sxtb	r0, r3
 8004ede:	793a      	ldrb	r2, [r7, #4]
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <rtcCalendarControl_setAlarm_A+0x130>)
 8004ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee6:	08d9      	lsrs	r1, r3, #3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	b25b      	sxtb	r3, r3
 8004ef6:	4303      	orrs	r3, r0
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 8004f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <rtcCalendarControl_setAlarm_A+0x134>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f107 010c 	add.w	r1, r7, #12
 8004f24:	2201      	movs	r2, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe f836 	bl	8002f98 <HAL_RTC_SetAlarm_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <rtcCalendarControl_setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8004f32:	b672      	cpsid	i
}
 8004f34:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 8004f36:	e7fe      	b.n	8004f36 <rtcCalendarControl_setAlarm_A+0x126>
  }
}
 8004f38:	bf00      	nop
 8004f3a:	373c      	adds	r7, #60	; 0x3c
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd90      	pop	{r4, r7, pc}
 8004f40:	cccccccd 	.word	0xcccccccd
 8004f44:	20001d78 	.word	0x20001d78

08004f48 <rtcCalendarControl_diableAlarm_A>:


/*
 *
 */
void rtcCalendarControl_diableAlarm_A(void) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <rtcCalendarControl_diableAlarm_A+0x24>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe f92b 	bl	80031b0 <HAL_RTC_DeactivateAlarm>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <rtcCalendarControl_diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8004f60:	b672      	cpsid	i
}
 8004f62:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 8004f64:	e7fe      	b.n	8004f64 <rtcCalendarControl_diableAlarm_A+0x1c>
	}
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20001d78 	.word	0x20001d78

08004f70 <LL_AHB2_GRP1_EnableClock>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <LL_AHB2_GRP1_IsEnabledClock>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d101      	bne.n	8004fbc <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <LL_AHB2_GRP1_DisableClock>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fde:	4013      	ands	r3, r2
 8004fe0:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8004ff6:	2002      	movs	r0, #2
 8004ff8:	f7ff ffd2 	bl	8004fa0 <LL_AHB2_GRP1_IsEnabledClock>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4a13      	ldr	r2, [pc, #76]	; (800504c <activate_led+0x60>)
 8005000:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <activate_led+0x60>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d102      	bne.n	8005010 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500a:	2002      	movs	r0, #2
 800500c:	f7ff ffb0 	bl	8004f70 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	611a      	str	r2, [r3, #16]
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	2301      	movs	r3, #1
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	2302      	movs	r3, #2
 800502a:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	4619      	mov	r1, r3
 8005032:	4807      	ldr	r0, [pc, #28]	; (8005050 <activate_led+0x64>)
 8005034:	f7fb ffd0 	bl	8000fd8 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	2201      	movs	r2, #1
 800503c:	4619      	mov	r1, r3
 800503e:	4804      	ldr	r0, [pc, #16]	; (8005050 <activate_led+0x64>)
 8005040:	f7fc f9f8 	bl	8001434 <HAL_GPIO_WritePin>
}
 8005044:	bf00      	nop
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20001d7c 	.word	0x20001d7c
 8005050:	48000400 	.word	0x48000400

08005054 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	2200      	movs	r2, #0
 8005062:	4619      	mov	r1, r3
 8005064:	4809      	ldr	r0, [pc, #36]	; (800508c <deactivate_led+0x38>)
 8005066:	f7fc f9e5 	bl	8001434 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	4619      	mov	r1, r3
 800506e:	4807      	ldr	r0, [pc, #28]	; (800508c <deactivate_led+0x38>)
 8005070:	f7fc f912 	bl	8001298 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <deactivate_led+0x3c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 800507c:	2002      	movs	r0, #2
 800507e:	f7ff ffa3 	bl	8004fc8 <LL_AHB2_GRP1_DisableClock>
  }
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	48000400 	.word	0x48000400
 8005090:	20001d7c 	.word	0x20001d7c

08005094 <code_to_appActions>:
 *
 * Map char array command code to numerical code.  If no match is found,
 * NO_ACTION is returned.
 */
AppActions code_to_appActions(const char* code)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 800509c:	2204      	movs	r2, #4
 800509e:	4925      	ldr	r1, [pc, #148]	; (8005134 <code_to_appActions+0xa0>)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fd6f 	bl	8005b84 <strncmp>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e03c      	b.n	800512a <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 80050b0:	2204      	movs	r2, #4
 80050b2:	4921      	ldr	r1, [pc, #132]	; (8005138 <code_to_appActions+0xa4>)
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fd65 	bl	8005b84 <strncmp>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 80050c0:	2302      	movs	r3, #2
 80050c2:	e032      	b.n	800512a <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 80050c4:	2204      	movs	r2, #4
 80050c6:	491d      	ldr	r1, [pc, #116]	; (800513c <code_to_appActions+0xa8>)
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fd5b 	bl	8005b84 <strncmp>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e028      	b.n	800512a <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 80050d8:	2204      	movs	r2, #4
 80050da:	4919      	ldr	r1, [pc, #100]	; (8005140 <code_to_appActions+0xac>)
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fd51 	bl	8005b84 <strncmp>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 80050e8:	2304      	movs	r3, #4
 80050ea:	e01e      	b.n	800512a <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 80050ec:	2204      	movs	r2, #4
 80050ee:	4915      	ldr	r1, [pc, #84]	; (8005144 <code_to_appActions+0xb0>)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fd47 	bl	8005b84 <strncmp>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 80050fc:	2305      	movs	r3, #5
 80050fe:	e014      	b.n	800512a <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_PACKET_HEADER_SIZE))
 8005100:	2204      	movs	r2, #4
 8005102:	4911      	ldr	r1, [pc, #68]	; (8005148 <code_to_appActions+0xb4>)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fd3d 	bl	8005b84 <strncmp>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 8005110:	2306      	movs	r3, #6
 8005112:	e00a      	b.n	800512a <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_PACKET_HEADER_SIZE))
 8005114:	2204      	movs	r2, #4
 8005116:	490d      	ldr	r1, [pc, #52]	; (800514c <code_to_appActions+0xb8>)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fd33 	bl	8005b84 <strncmp>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <code_to_appActions+0x94>
			return START_CALENDAR;
 8005124:	2307      	movs	r3, #7
 8005126:	e000      	b.n	800512a <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	08006e20 	.word	0x08006e20
 8005138:	08006e28 	.word	0x08006e28
 800513c:	08006e30 	.word	0x08006e30
 8005140:	08006e38 	.word	0x08006e38
 8005144:	08006e40 	.word	0x08006e40
 8005148:	08006e48 	.word	0x08006e48
 800514c:	08006e50 	.word	0x08006e50

08005150 <parseDateTime>:
 *
 * Parse a DateTime from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseDateTime(DateTime* dateTime, char data[UART_PACKET_PAYLOAD_SIZE])
{
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af04      	add	r7, sp, #16
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	int formatCount;

	// parse values from string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(dateTime->year),
 800515a:	687c      	ldr	r4, [r7, #4]
			(int*)&(dateTime->month),
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	1c5d      	adds	r5, r3, #1
			(int*)&(dateTime->day),
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3302      	adds	r3, #2
			(int*)&(dateTime->hour),
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	3203      	adds	r2, #3
			(int*)&(dateTime->minute),
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	3104      	adds	r1, #4
			(int*)&(dateTime->second));
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	3005      	adds	r0, #5
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005170:	9003      	str	r0, [sp, #12]
 8005172:	9102      	str	r1, [sp, #8]
 8005174:	9201      	str	r2, [sp, #4]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	462b      	mov	r3, r5
 800517a:	4622      	mov	r2, r4
 800517c:	4907      	ldr	r1, [pc, #28]	; (800519c <parseDateTime+0x4c>)
 800517e:	6838      	ldr	r0, [r7, #0]
 8005180:	f000 fcd4 	bl	8005b2c <siscanf>
 8005184:	60f8      	str	r0, [r7, #12]

	// if the correct number of values were parsed, return true
	if (formatCount == 6)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b06      	cmp	r3, #6
 800518a:	d101      	bne.n	8005190 <parseDateTime+0x40>
		return true;
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <parseDateTime+0x42>

	// else, there was an error, return false
	else
		return false;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bdb0      	pop	{r4, r5, r7, pc}
 800519a:	bf00      	nop
 800519c:	08006e58 	.word	0x08006e58

080051a0 <formatDateTime>:
 *
 * Format a string from a DateTime.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool formatDateTime(char data[UART_PACKET_PAYLOAD_SIZE], const DateTime* dateTime)
{
 80051a0:	b5b0      	push	{r4, r5, r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af06      	add	r7, sp, #24
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	int formatCount;

	// format values into string
	memset(data, 0, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80051aa:	223c      	movs	r2, #60	; 0x3c
 80051ac:	2100      	movs	r1, #0
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fc80 	bl	8005ab4 <memset>
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int)(dateTime->year),
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80051b8:	461d      	mov	r5, r3
			(int)(dateTime->month),
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	785b      	ldrb	r3, [r3, #1]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80051be:	461a      	mov	r2, r3
			(int)(dateTime->day),
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	789b      	ldrb	r3, [r3, #2]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80051c4:	4619      	mov	r1, r3
			(int)(dateTime->hour),
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	78db      	ldrb	r3, [r3, #3]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80051ca:	4618      	mov	r0, r3
			(int)(dateTime->minute),
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	791b      	ldrb	r3, [r3, #4]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80051d0:	461c      	mov	r4, r3
			(int)(dateTime->second));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	795b      	ldrb	r3, [r3, #5]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80051d6:	9304      	str	r3, [sp, #16]
 80051d8:	9403      	str	r4, [sp, #12]
 80051da:	9002      	str	r0, [sp, #8]
 80051dc:	9101      	str	r1, [sp, #4]
 80051de:	9200      	str	r2, [sp, #0]
 80051e0:	462b      	mov	r3, r5
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <formatDateTime+0x68>)
 80051e4:	213c      	movs	r1, #60	; 0x3c
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fc6c 	bl	8005ac4 <sniprintf>
 80051ec:	60f8      	str	r0, [r7, #12]

	// if the resulting string is not longer than the packet payload size and there was no
	// error formatting, return true
	if (formatCount >= 0 && formatCount <= UART_PACKET_PAYLOAD_SIZE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	db04      	blt.n	80051fe <formatDateTime+0x5e>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b3c      	cmp	r3, #60	; 0x3c
 80051f8:	dc01      	bgt.n	80051fe <formatDateTime+0x5e>
		return true;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <formatDateTime+0x60>

	// else, return false
	else
		return false;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bdb0      	pop	{r4, r5, r7, pc}
 8005208:	08006e58 	.word	0x08006e58

0800520c <parseEvent>:
 *
 * Parse a CalendarEvent from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss;yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseEvent(CalendarEvent* event, char data[UART_PACKET_PAYLOAD_SIZE])
{
 800520c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520e:	b093      	sub	sp, #76	; 0x4c
 8005210:	af0a      	add	r7, sp, #40	; 0x28
 8005212:	6178      	str	r0, [r7, #20]
 8005214:	6139      	str	r1, [r7, #16]
	int formatCount;

	// parse string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(event->start.year),
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	60fb      	str	r3, [r7, #12]
			(int*)&(event->start.month),
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f103 0c01 	add.w	ip, r3, #1
			(int*)&(event->start.day),
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3302      	adds	r3, #2
			(int*)&(event->start.hour),
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	3203      	adds	r2, #3
			(int*)&(event->start.minute),
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	3104      	adds	r1, #4
			(int*)&(event->start.second),
 800522c:	6978      	ldr	r0, [r7, #20]
 800522e:	3005      	adds	r0, #5
			(int*)&(event->end.year),
 8005230:	697c      	ldr	r4, [r7, #20]
 8005232:	340c      	adds	r4, #12
			(int*)&(event->end.month),
 8005234:	697d      	ldr	r5, [r7, #20]
 8005236:	350d      	adds	r5, #13
			(int*)&(event->end.day),
 8005238:	697e      	ldr	r6, [r7, #20]
 800523a:	360e      	adds	r6, #14
			(int*)&(event->end.hour),
 800523c:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005240:	f10e 0e0f 	add.w	lr, lr, #15
 8005244:	f8c7 e008 	str.w	lr, [r7, #8]
			(int*)&(event->end.minute),
 8005248:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800524c:	f10e 0e10 	add.w	lr, lr, #16
 8005250:	f8c7 e004 	str.w	lr, [r7, #4]
			(int*)&(event->end.second));
 8005254:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005258:	f10e 0e11 	add.w	lr, lr, #17
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
 800525c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8005260:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8005264:	f8cd e020 	str.w	lr, [sp, #32]
 8005268:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800526c:	f8cd e01c 	str.w	lr, [sp, #28]
 8005270:	9606      	str	r6, [sp, #24]
 8005272:	9505      	str	r5, [sp, #20]
 8005274:	9404      	str	r4, [sp, #16]
 8005276:	9003      	str	r0, [sp, #12]
 8005278:	9102      	str	r1, [sp, #8]
 800527a:	9201      	str	r2, [sp, #4]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	4663      	mov	r3, ip
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4907      	ldr	r1, [pc, #28]	; (80052a0 <parseEvent+0x94>)
 8005284:	6938      	ldr	r0, [r7, #16]
 8005286:	f000 fc51 	bl	8005b2c <siscanf>
 800528a:	61f8      	str	r0, [r7, #28]

	// if the correct number of values were parsed, return true
	if (formatCount == 12)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d101      	bne.n	8005296 <parseEvent+0x8a>
		return true;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <parseEvent+0x8c>

	// else, there was an error, return false
	else
		return false;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3724      	adds	r7, #36	; 0x24
 800529c:	46bd      	mov	sp, r7
 800529e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a0:	08006e78 	.word	0x08006e78

080052a4 <desktopAppSession_init>:
 *
 * Initializes the UART transport layer and resets operational variables for the manager.
 * Only will initialize if the manager has not been initialized already.
 */
bool desktopAppSession_init(UART_HandleTypeDef* huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (!_sessionInit && uartTransport_init(huart))
 80052ac:	4b13      	ldr	r3, [pc, #76]	; (80052fc <desktopAppSession_init+0x58>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f083 0301 	eor.w	r3, r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01a      	beq.n	80052f0 <desktopAppSession_init+0x4c>
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fab4 	bl	8005828 <uartTransport_init>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d014      	beq.n	80052f0 <desktopAppSession_init+0x4c>
	{
		_sessionOpen = false;
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <desktopAppSession_init+0x5c>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <desktopAppSession_init+0x58>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
		_messageReady = false;
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <desktopAppSession_init+0x60>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
		memset(_messageCommand, 0, UART_PACKET_HEADER_SIZE * sizeof(char));
 80052d8:	2204      	movs	r2, #4
 80052da:	2100      	movs	r1, #0
 80052dc:	480a      	ldr	r0, [pc, #40]	; (8005308 <desktopAppSession_init+0x64>)
 80052de:	f000 fbe9 	bl	8005ab4 <memset>
		memset(_messageData, 0, UART_PACKET_PAYLOAD_SIZE * sizeof(char));
 80052e2:	223c      	movs	r2, #60	; 0x3c
 80052e4:	2100      	movs	r1, #0
 80052e6:	4809      	ldr	r0, [pc, #36]	; (800530c <desktopAppSession_init+0x68>)
 80052e8:	f000 fbe4 	bl	8005ab4 <memset>

		return true;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <desktopAppSession_init+0x4e>
	}

	else
	{
		return false;
 80052f0:	2300      	movs	r3, #0
	}
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20001d81 	.word	0x20001d81
 8005300:	20001d80 	.word	0x20001d80
 8005304:	20001dc4 	.word	0x20001dc4
 8005308:	20001d84 	.word	0x20001d84
 800530c:	20001d88 	.word	0x20001d88

08005310 <desktopAppSession_start>:
 * Attempts to handshake with the desktop application.  Wrapper for the handshake function.
 * Will not attempt if the manager has not been initialized and will not attempt if a
 * session is already open.
 */
DesktopComSessionStatus desktopAppSession_start(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
	DesktopComSessionStatus handshakeStatus;

	if (_sessionInit)
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <desktopAppSession_start+0x48>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <desktopAppSession_start+0x3c>
	{
		if (!_sessionOpen)
 800531e:	4b0f      	ldr	r3, [pc, #60]	; (800535c <desktopAppSession_start+0x4c>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	f083 0301 	eor.w	r3, r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <desktopAppSession_start+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 800532c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005330:	f000 f888 	bl	8005444 <_handshake>
 8005334:	4603      	mov	r3, r0
 8005336:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <desktopAppSession_start+0x34>
				_sessionOpen = true;
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <desktopAppSession_start+0x4c>)
 8005340:	2201      	movs	r2, #1
 8005342:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	e002      	b.n	800534e <desktopAppSession_start+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <desktopAppSession_start+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 800534c:	2303      	movs	r3, #3
	}
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20001d81 	.word	0x20001d81
 800535c:	20001d80 	.word	0x20001d80

08005360 <desktopAppSession_update>:
 *
 * Update the state of the session manager.  Wraps the _session_cycle() function,
 * which performs the actual update, with checks for a session to be opened.
 */
DesktopComSessionStatus desktopAppSession_update(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
	if (_sessionInit)
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <desktopAppSession_update+0x28>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <desktopAppSession_update+0x20>
	{
		if (_sessionOpen)
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <desktopAppSession_update+0x2c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <desktopAppSession_update+0x1c>
		{
			return _session_update();
 8005374:	f000 f94e 	bl	8005614 <_session_update>
 8005378:	4603      	mov	r3, r0
 800537a:	e002      	b.n	8005382 <desktopAppSession_update+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 800537c:	2304      	movs	r3, #4
 800537e:	e000      	b.n	8005382 <desktopAppSession_update+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8005380:	2303      	movs	r3, #3
	}
}
 8005382:	4618      	mov	r0, r3
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20001d81 	.word	0x20001d81
 800538c:	20001d80 	.word	0x20001d80

08005390 <desktopAppSession_enqueueMessage>:
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_enqueueMessage(char header[UART_PACKET_HEADER_SIZE],
		char body[UART_PACKET_PAYLOAD_SIZE])
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	if (_sessionInit)
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <desktopAppSession_enqueueMessage+0x34>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <desktopAppSession_enqueueMessage+0x28>
	{
		// enqueue message
		if (uartTransport_bufferTx((uint8_t*)header, (uint8_t*)body) != TRANSPORT_OKAY)
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fa61 	bl	800586c <uartTransport_bufferTx>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <desktopAppSession_enqueueMessage+0x24>
		{
			return SESSION_ERROR;
 80053b0:	2302      	movs	r3, #2
 80053b2:	e002      	b.n	80053ba <desktopAppSession_enqueueMessage+0x2a>
		}
		else
		{
			return SESSION_OKAY;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e000      	b.n	80053ba <desktopAppSession_enqueueMessage+0x2a>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80053b8:	2303      	movs	r3, #3
	}
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20001d81 	.word	0x20001d81

080053c8 <desktopAppSession_dequeueMessage>:
 * above.
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_dequeueMessage(char header[UART_PACKET_HEADER_SIZE], char body[UART_PACKET_PAYLOAD_SIZE])
{
 80053c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
	if (_sessionInit)
 80053d2:	4b18      	ldr	r3, [pc, #96]	; (8005434 <desktopAppSession_dequeueMessage+0x6c>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d026      	beq.n	8005428 <desktopAppSession_dequeueMessage+0x60>
	{
		if (_messageReady)
 80053da:	4b17      	ldr	r3, [pc, #92]	; (8005438 <desktopAppSession_dequeueMessage+0x70>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d020      	beq.n	8005424 <desktopAppSession_dequeueMessage+0x5c>
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <desktopAppSession_dequeueMessage+0x74>)
 80053e4:	681a      	ldr	r2, [r3, #0]
		{
			memcpy(header, _messageCommand, UART_PACKET_HEADER_SIZE*sizeof(char));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
			memcpy(body, _messageData, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <desktopAppSession_dequeueMessage+0x78>)
 80053ee:	4614      	mov	r4, r2
 80053f0:	469c      	mov	ip, r3
 80053f2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80053f6:	4665      	mov	r5, ip
 80053f8:	4626      	mov	r6, r4
 80053fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053fc:	6028      	str	r0, [r5, #0]
 80053fe:	6069      	str	r1, [r5, #4]
 8005400:	60aa      	str	r2, [r5, #8]
 8005402:	60eb      	str	r3, [r5, #12]
 8005404:	3410      	adds	r4, #16
 8005406:	f10c 0c10 	add.w	ip, ip, #16
 800540a:	4574      	cmp	r4, lr
 800540c:	d1f3      	bne.n	80053f6 <desktopAppSession_dequeueMessage+0x2e>
 800540e:	4665      	mov	r5, ip
 8005410:	4623      	mov	r3, r4
 8005412:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005414:	6028      	str	r0, [r5, #0]
 8005416:	6069      	str	r1, [r5, #4]
 8005418:	60aa      	str	r2, [r5, #8]
			_messageReady = false;
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <desktopAppSession_dequeueMessage+0x70>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]

			return SESSION_OKAY;
 8005420:	2300      	movs	r3, #0
 8005422:	e002      	b.n	800542a <desktopAppSession_dequeueMessage+0x62>
		}

		else
		{
			return SESSION_ERROR;
 8005424:	2302      	movs	r3, #2
 8005426:	e000      	b.n	800542a <desktopAppSession_dequeueMessage+0x62>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8005428:	2303      	movs	r3, #3
	}
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005432:	bf00      	nop
 8005434:	20001d81 	.word	0x20001d81
 8005438:	20001dc4 	.word	0x20001dc4
 800543c:	20001d84 	.word	0x20001d84
 8005440:	20001d88 	.word	0x20001d88

08005444 <_handshake>:
 * Note:  no software flow control is used for the first message.  Listening for the
 * first message from the desktop may timeout and cause synchronization issues while
 * attempting to handshake.
 */
DesktopComSessionStatus _handshake(unsigned int timeout_ms)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b094      	sub	sp, #80	; 0x50
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 8005450:	2300      	movs	r3, #0
 8005452:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TransportStatus transportStatus;
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 800545c:	2300      	movs	r3, #0
 800545e:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 8005460:	2300      	movs	r3, #0
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	f107 030c 	add.w	r3, r7, #12
 8005468:	2238      	movs	r2, #56	; 0x38
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb21 	bl	8005ab4 <memset>

	while (!success && !error)
 8005472:	e0a2      	b.n	80055ba <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 8005474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <_handshake+0x44>
		{
			transportStatus = uartTransport_rx_polled(timeout_ms); // handshake timeout until start of handshake
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa8a 	bl	8005994 <uartTransport_rx_polled>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005486:	e063      	b.n	8005550 <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d10b      	bne.n	80054a6 <_handshake+0x62>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 800548e:	f107 0208 	add.w	r2, r7, #8
 8005492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fa11 	bl	80058c0 <uartTransport_debufferRx>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80054a4:	e054      	b.n	8005550 <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 80054a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d10d      	bne.n	80054c8 <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_PACKET_HEADER_SIZE))
 80054ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80054b0:	2204      	movs	r2, #4
 80054b2:	4955      	ldr	r1, [pc, #340]	; (8005608 <_handshake+0x1c4>)
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fb65 	bl	8005b84 <strncmp>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d047      	beq.n	8005550 <_handshake+0x10c>
			{
				error = true;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80054c6:	e043      	b.n	8005550 <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 80054c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d110      	bne.n	80054f0 <_handshake+0xac>
		{
			memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	223c      	movs	r2, #60	; 0x3c
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 faec 	bl	8005ab4 <memset>
			transportStatus = uartTransport_bufferTx((uint8_t*)HANDSHAKE_HEADER_ACKN, (uint8_t*)messageBody);
 80054dc:	f107 0308 	add.w	r3, r7, #8
 80054e0:	4619      	mov	r1, r3
 80054e2:	484a      	ldr	r0, [pc, #296]	; (800560c <_handshake+0x1c8>)
 80054e4:	f000 f9c2 	bl	800586c <uartTransport_bufferTx>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80054ee:	e02f      	b.n	8005550 <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 80054f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d106      	bne.n	8005504 <_handshake+0xc0>
		{
			transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 80054f6:	2064      	movs	r0, #100	; 0x64
 80054f8:	f000 fa0e 	bl	8005918 <uartTransport_tx_polled>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005502:	e025      	b.n	8005550 <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	2b05      	cmp	r3, #5
 8005508:	d106      	bne.n	8005518 <_handshake+0xd4>
		{
			transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 800550a:	20fa      	movs	r0, #250	; 0xfa
 800550c:	f000 fa42 	bl	8005994 <uartTransport_rx_polled>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005516:	e01b      	b.n	8005550 <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 8005518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551a:	2b06      	cmp	r3, #6
 800551c:	d10b      	bne.n	8005536 <_handshake+0xf2>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 800551e:	f107 0208 	add.w	r2, r7, #8
 8005522:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f9c9 	bl	80058c0 <uartTransport_debufferRx>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005534:	e00c      	b.n	8005550 <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_PACKET_HEADER_SIZE))
 8005536:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800553a:	2204      	movs	r2, #4
 800553c:	4934      	ldr	r1, [pc, #208]	; (8005610 <_handshake+0x1cc>)
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fb20 	bl	8005b84 <strncmp>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <_handshake+0x10c>
			{
				error = true;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8005550:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005554:	2b00      	cmp	r3, #0
 8005556:	d12d      	bne.n	80055b4 <_handshake+0x170>
		{
			if (state == 0)
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <_handshake+0x120>
				state = 1;
 800555e:	2301      	movs	r3, #1
 8005560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005562:	e02a      	b.n	80055ba <_handshake+0x176>
			else if (state == 1)
 8005564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d102      	bne.n	8005570 <_handshake+0x12c>
				state = 2;
 800556a:	2302      	movs	r3, #2
 800556c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800556e:	e024      	b.n	80055ba <_handshake+0x176>
			else if (state == 2)
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	2b02      	cmp	r3, #2
 8005574:	d102      	bne.n	800557c <_handshake+0x138>
				state = 3;
 8005576:	2303      	movs	r3, #3
 8005578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800557a:	e01e      	b.n	80055ba <_handshake+0x176>
			else if (state == 3)
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	2b03      	cmp	r3, #3
 8005580:	d102      	bne.n	8005588 <_handshake+0x144>
				state = 4;
 8005582:	2304      	movs	r3, #4
 8005584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005586:	e018      	b.n	80055ba <_handshake+0x176>
			else if (state == 4)
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	2b04      	cmp	r3, #4
 800558c:	d102      	bne.n	8005594 <_handshake+0x150>
				state = 5;
 800558e:	2305      	movs	r3, #5
 8005590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005592:	e012      	b.n	80055ba <_handshake+0x176>
			else if (state == 5)
 8005594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005596:	2b05      	cmp	r3, #5
 8005598:	d102      	bne.n	80055a0 <_handshake+0x15c>
				state = 6;
 800559a:	2306      	movs	r3, #6
 800559c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800559e:	e00c      	b.n	80055ba <_handshake+0x176>
			else if (state == 6)
 80055a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a2:	2b06      	cmp	r3, #6
 80055a4:	d102      	bne.n	80055ac <_handshake+0x168>
				state = 7;
 80055a6:	2307      	movs	r3, #7
 80055a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055aa:	e006      	b.n	80055ba <_handshake+0x176>
			else // if (state == 7)
				success = true;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80055b2:	e002      	b.n	80055ba <_handshake+0x176>
		}
		else
		{
			error = true;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 80055ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80055be:	f083 0301 	eor.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <_handshake+0x194>
 80055c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80055cc:	f083 0301 	eor.w	r3, r3, #1
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f47f af4e 	bne.w	8005474 <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 80055d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <_handshake+0x1ae>
 80055e0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80055e4:	f083 0301 	eor.w	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e006      	b.n	8005600 <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 80055f2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 80055fe:	2302      	movs	r3, #2
		}
	}
}
 8005600:	4618      	mov	r0, r3
 8005602:	3750      	adds	r7, #80	; 0x50
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	08006eb4 	.word	0x08006eb4
 800560c:	08006ebc 	.word	0x08006ebc
 8005610:	08006ec4 	.word	0x08006ec4

08005614 <_session_update>:
 *
 * Note:  If a response to the desktop is necessary, this response won't be sent until
 * the next time the session is updated.
 */
DesktopComSessionStatus _session_update(void)
{
 8005614:	b5b0      	push	{r4, r5, r7, lr}
 8005616:	b092      	sub	sp, #72	; 0x48
 8005618:	af00      	add	r7, sp, #0
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 800561a:	2300      	movs	r3, #0
 800561c:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800561e:	2300      	movs	r3, #0
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	f107 0308 	add.w	r3, r7, #8
 8005626:	2238      	movs	r2, #56	; 0x38
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fa42 	bl	8005ab4 <memset>
	DesktopComSessionStatus status;

	// Perform Tx message phase of session cycle.
	status = _tell();
 8005630:	f000 f8b6 	bl	80057a0 <_tell>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Perform Rx message phase of session cycle.
	status = _listen();
 800563a:	f000 f85f 	bl	80056fc <_listen>
 800563e:	4603      	mov	r3, r0
 8005640:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 8005644:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005648:	2b02      	cmp	r3, #2
 800564a:	d101      	bne.n	8005650 <_session_update+0x3c>
	{
		return SESSION_ERROR;
 800564c:	2302      	movs	r3, #2
 800564e:	e042      	b.n	80056d6 <_session_update+0xc2>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 8005650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005654:	2b00      	cmp	r3, #0
 8005656:	d13d      	bne.n	80056d4 <_session_update+0xc0>
	{
		// dequeue received message
		uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 8005658:	1d3a      	adds	r2, r7, #4
 800565a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f92d 	bl	80058c0 <uartTransport_debufferRx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_PACKET_HEADER_SIZE))
 8005666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800566a:	2204      	movs	r2, #4
 800566c:	491c      	ldr	r1, [pc, #112]	; (80056e0 <_session_update+0xcc>)
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa88 	bl	8005b84 <strncmp>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d107      	bne.n	800568a <_session_update+0x76>
		{
			desktopAppSession_enqueueMessage(HANDSHAKE_HEADER_DISC, "\0");
 800567a:	491a      	ldr	r1, [pc, #104]	; (80056e4 <_session_update+0xd0>)
 800567c:	4818      	ldr	r0, [pc, #96]	; (80056e0 <_session_update+0xcc>)
 800567e:	f7ff fe87 	bl	8005390 <desktopAppSession_enqueueMessage>
			_sessionOpen = false;
 8005682:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <_session_update+0xd4>)
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e024      	b.n	80056d4 <_session_update+0xc0>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_PACKET_HEADER_SIZE))
 800568a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800568e:	2204      	movs	r2, #4
 8005690:	4916      	ldr	r1, [pc, #88]	; (80056ec <_session_update+0xd8>)
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fa76 	bl	8005b84 <strncmp>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <_session_update+0x9a>
		{
			desktopAppSession_enqueueMessage(messageHeader, messageBody);
 800569e:	1d3a      	adds	r2, r7, #4
 80056a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fe72 	bl	8005390 <desktopAppSession_enqueueMessage>
 80056ac:	e012      	b.n	80056d4 <_session_update+0xc0>
 80056ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_PACKET_HEADER_SIZE*sizeof(char));
 80056b0:	4a0f      	ldr	r2, [pc, #60]	; (80056f0 <_session_update+0xdc>)
 80056b2:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80056b4:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <_session_update+0xe0>)
 80056b6:	461d      	mov	r5, r3
 80056b8:	1d3c      	adds	r4, r7, #4
 80056ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80056ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <_session_update+0xe4>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
		}
	}

	return SESSION_OKAY;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3748      	adds	r7, #72	; 0x48
 80056da:	46bd      	mov	sp, r7
 80056dc:	bdb0      	pop	{r4, r5, r7, pc}
 80056de:	bf00      	nop
 80056e0:	08006ecc 	.word	0x08006ecc
 80056e4:	08006ed4 	.word	0x08006ed4
 80056e8:	20001d80 	.word	0x20001d80
 80056ec:	08006ed8 	.word	0x08006ed8
 80056f0:	20001d84 	.word	0x20001d84
 80056f4:	20001d88 	.word	0x20001d88
 80056f8:	20001dc4 	.word	0x20001dc4

080056fc <_listen>:
 * message.  A CTS message is transmitted.  The Message window listens for a message
 * from the desktop application with the RECEIVE_TIMEOUT_MS value.  Error codes from
 * the transport layer are aliased to session error codes.
 */
DesktopComSessionStatus _listen(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b090      	sub	sp, #64	; 0x40
 8005700:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 8005702:	2300      	movs	r3, #0
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	1d3b      	adds	r3, r7, #4
 8005708:	2238      	movs	r2, #56	; 0x38
 800570a:	2100      	movs	r1, #0
 800570c:	4618      	mov	r0, r3
 800570e:	f000 f9d1 	bl	8005ab4 <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 8005712:	463b      	mov	r3, r7
 8005714:	223c      	movs	r2, #60	; 0x3c
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f000 f9cb 	bl	8005ab4 <memset>
	snprintf(messageBody, UART_PACKET_PAYLOAD_SIZE, "Clear to send!\n");
 800571e:	463b      	mov	r3, r7
 8005720:	4a1d      	ldr	r2, [pc, #116]	; (8005798 <_listen+0x9c>)
 8005722:	213c      	movs	r1, #60	; 0x3c
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f9cd 	bl	8005ac4 <sniprintf>
	transportStatus = uartTransport_bufferTx((uint8_t*)CTS_HEADER,(uint8_t*) messageBody);
 800572a:	463b      	mov	r3, r7
 800572c:	4619      	mov	r1, r3
 800572e:	481b      	ldr	r0, [pc, #108]	; (800579c <_listen+0xa0>)
 8005730:	f000 f89c 	bl	800586c <uartTransport_bufferTx>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 800573a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <_listen+0x4a>
	{
		return SESSION_ERROR;
 8005742:	2302      	movs	r3, #2
 8005744:	e024      	b.n	8005790 <_listen+0x94>
	}

	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 8005746:	2064      	movs	r0, #100	; 0x64
 8005748:	f000 f8e6 	bl	8005918 <uartTransport_tx_polled>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8005752:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 800575a:	2301      	movs	r3, #1
 800575c:	e018      	b.n	8005790 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 800575e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <_listen+0x6e>
	{
		return SESSION_ERROR;
 8005766:	2302      	movs	r3, #2
 8005768:	e012      	b.n	8005790 <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 800576a:	20fa      	movs	r0, #250	; 0xfa
 800576c:	f000 f912 	bl	8005994 <uartTransport_rx_polled>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8005776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 800577e:	2301      	movs	r3, #1
 8005780:	e006      	b.n	8005790 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8005782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <_listen+0x92>
	{
		return SESSION_ERROR;
 800578a:	2302      	movs	r3, #2
 800578c:	e000      	b.n	8005790 <_listen+0x94>
	}

	return SESSION_OKAY;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3740      	adds	r7, #64	; 0x40
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	08006ee0 	.word	0x08006ee0
 800579c:	08006ef0 	.word	0x08006ef0

080057a0 <_tell>:
 * Wraps UART transmission layer calls.
 * Transmits a buffered message to the desktop application.
 * Aliases transport layer error codes to session error codes.
 */
DesktopComSessionStatus _tell(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;

	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 80057a6:	2064      	movs	r0, #100	; 0x64
 80057a8:	f000 f8b6 	bl	8005918 <uartTransport_tx_polled>
 80057ac:	4603      	mov	r3, r0
 80057ae:	71fb      	strb	r3, [r7, #7]

	if (transportStatus == TRANSPORT_OKAY)
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <_tell+0x1a>
	{
		return SESSION_OKAY;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e005      	b.n	80057c6 <_tell+0x26>
	}
	else if (transportStatus == TRANSPORT_TIMEOUT)
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <_tell+0x24>
	{
		return SESSION_TIMEOUT;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <_tell+0x26>
	}
	else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
	{
		return SESSION_ERROR;
 80057c4:	2302      	movs	r3, #2
	}
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <composePacket>:
 * UART_PACKET_PAYLOAD_SIZE bytes to the packet buffer offset by UART_PACKET_HEADER_SIZE
 * number of bytes.
 */
void composePacket(uint8_t packet_buffer[UART_PACKET_SIZE], const uint8_t header[UART_PACKET_HEADER_SIZE],
		const uint8_t payload[UART_PACKET_PAYLOAD_SIZE])
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
	// Copy header into packet.
	memcpy(packet_buffer, header, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	601a      	str	r2, [r3, #0]
	// Copy payload into packet.
	memcpy(packet_buffer + UART_PACKET_HEADER_SIZE, payload, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3304      	adds	r3, #4
 80057e8:	223c      	movs	r2, #60	; 0x3c
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f953 	bl	8005a98 <memcpy>
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <decomposePacket>:
 * Copies UART_PACKET_HEADER_SIZE number of bytes to the header_buffer and copies
 * UART_PACKET_PAYLOAD_SIZE number of bytes to the payload buffer.
 */
void decomposePacket(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t payload[UART_PACKET_PAYLOAD_SIZE],
		const uint8_t packet_buffer[UART_PACKET_SIZE])
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
	// Copy header from packet.
	memcpy(header, packet_buffer, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	601a      	str	r2, [r3, #0]
	// Copy payload from packet.
	memcpy(payload, packet_buffer + UART_PACKET_HEADER_SIZE, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	223c      	movs	r2, #60	; 0x3c
 8005816:	4619      	mov	r1, r3
 8005818:	68b8      	ldr	r0, [r7, #8]
 800581a:	f000 f93d 	bl	8005a98 <memcpy>
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <uartTransport_init>:
 * operational variables.
 *
 * Note:  will not re-initalize until the layer has been de-initalized.
 */
bool uartTransport_init(UART_HandleTypeDef* huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	if (!IS_UART_HANDLE_INIT(_uartHandle) && IS_UART_HANDLE_INIT(huart))
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <uartTransport_init+0x40>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <uartTransport_init+0x1a>
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <uartTransport_init+0x40>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10d      	bne.n	800585e <uartTransport_init+0x36>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <uartTransport_init+0x36>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d006      	beq.n	800585e <uartTransport_init+0x36>
	{
		_uartHandle = huart;
 8005850:	4a05      	ldr	r2, [pc, #20]	; (8005868 <uartTransport_init+0x40>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6013      	str	r3, [r2, #0]
		_transportLayer_reset();
 8005856:	f000 f8d9 	bl	8005a0c <_transportLayer_reset>
		return true;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <uartTransport_init+0x38>
	}

	else
	{
		return false;
 800585e:	2300      	movs	r3, #0
	}
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20001dc8 	.word	0x20001dc8

0800586c <uartTransport_bufferTx>:
 * Enqueues a packet for transmission.  Only successful if the layer has been
 * initialized.  Reports if queuing could or could not be performed due to the
 * tx buffer being full.
 */
TransportStatus uartTransport_bufferTx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	if (IS_UART_HANDLE_INIT(_uartHandle))
 8005876:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <uartTransport_bufferTx+0x48>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d014      	beq.n	80058a8 <uartTransport_bufferTx+0x3c>
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <uartTransport_bufferTx+0x48>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00f      	beq.n	80058a8 <uartTransport_bufferTx+0x3c>
	{
		if (_txBuffer_full)
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <uartTransport_bufferTx+0x4c>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <uartTransport_bufferTx+0x28>
		{
			return TRANSPORT_TX_FULL;
 8005890:	2304      	movs	r3, #4
 8005892:	e00a      	b.n	80058aa <uartTransport_bufferTx+0x3e>
		}

		else
		{
			// Compose header and body into one message
			composePacket(_txBuffer, header, body);
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4808      	ldr	r0, [pc, #32]	; (80058bc <uartTransport_bufferTx+0x50>)
 800589a:	f7ff ff98 	bl	80057ce <composePacket>
			_txBuffer_full = true;
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <uartTransport_bufferTx+0x4c>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <uartTransport_bufferTx+0x3e>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80058a8:	2308      	movs	r3, #8
	}
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20001dc8 	.word	0x20001dc8
 80058b8:	20001e4c 	.word	0x20001e4c
 80058bc:	20001dcc 	.word	0x20001dcc

080058c0 <uartTransport_debufferRx>:
 * Dequeues a packet from those that have been received.  Only successful if
 * the layer has been initialized.  Reportes of dequeuing could or could not be
 * performed due to the rx buffer being empty.
 */
TransportStatus uartTransport_debufferRx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
	if (IS_UART_HANDLE_INIT(_uartHandle))
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <uartTransport_debufferRx+0x4c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <uartTransport_debufferRx+0x42>
 80058d2:	4b0e      	ldr	r3, [pc, #56]	; (800590c <uartTransport_debufferRx+0x4c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <uartTransport_debufferRx+0x42>
	{
		if (!_rxBuffer_full)
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <uartTransport_debufferRx+0x50>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f083 0301 	eor.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <uartTransport_debufferRx+0x2e>
		{
			return TRANSPORT_RX_EMPTY;
 80058ea:	2306      	movs	r3, #6
 80058ec:	e00a      	b.n	8005904 <uartTransport_debufferRx+0x44>

		else
		{
			// retrieve message from buffer
			// decompose header and body from message
			decomposePacket(header, body, _rxBuffer);
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <uartTransport_debufferRx+0x54>)
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff ff81 	bl	80057fa <decomposePacket>
			_rxBuffer_full = false;
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <uartTransport_debufferRx+0x50>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 80058fe:	2300      	movs	r3, #0
 8005900:	e000      	b.n	8005904 <uartTransport_debufferRx+0x44>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8005902:	2308      	movs	r3, #8
	}
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20001dc8 	.word	0x20001dc8
 8005910:	20001e4d 	.word	0x20001e4d
 8005914:	20001e0c 	.word	0x20001e0c

08005918 <uartTransport_tx_polled>:
 * Transmits all packets in tx queue.  Reports if the tx queue is empty
 * (to start) or the state of the transmissions (success or failure).
 * Uses HAL calls.
 */
TransportStatus uartTransport_tx_polled(uint32_t timeout_ms)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_UART_HANDLE_INIT(_uartHandle))
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <uartTransport_tx_polled+0x70>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02a      	beq.n	800597e <uartTransport_tx_polled+0x66>
 8005928:	4b17      	ldr	r3, [pc, #92]	; (8005988 <uartTransport_tx_polled+0x70>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d025      	beq.n	800597e <uartTransport_tx_polled+0x66>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 8005932:	4b16      	ldr	r3, [pc, #88]	; (800598c <uartTransport_tx_polled+0x74>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f083 0301 	eor.w	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <uartTransport_tx_polled+0x2c>
		{
			return TRANSPORT_TX_EMPTY;
 8005940:	2305      	movs	r3, #5
 8005942:	e01d      	b.n	8005980 <uartTransport_tx_polled+0x68>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_PACKET_SIZE, timeout_ms);
 8005944:	4b10      	ldr	r3, [pc, #64]	; (8005988 <uartTransport_tx_polled+0x70>)
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	4910      	ldr	r1, [pc, #64]	; (8005990 <uartTransport_tx_polled+0x78>)
 800594e:	f7fd fe01 	bl	8003554 <HAL_UART_Transmit>
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <uartTransport_tx_polled+0x48>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 800595c:	2302      	movs	r3, #2
 800595e:	e00f      	b.n	8005980 <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_TIMEOUT)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b03      	cmp	r3, #3
 8005964:	d101      	bne.n	800596a <uartTransport_tx_polled+0x52>
		{
			return TRANSPORT_TIMEOUT;
 8005966:	2301      	movs	r3, #1
 8005968:	e00a      	b.n	8005980 <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_BUSY)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d101      	bne.n	8005974 <uartTransport_tx_polled+0x5c>
		{
			return TRANSPORT_BUSY;
 8005970:	2303      	movs	r3, #3
 8005972:	e005      	b.n	8005980 <uartTransport_tx_polled+0x68>
		}
		else
		{
			_txBuffer_full = false;
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <uartTransport_tx_polled+0x74>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <uartTransport_tx_polled+0x68>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 800597e:	2308      	movs	r3, #8
	}
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20001dc8 	.word	0x20001dc8
 800598c:	20001e4c 	.word	0x20001e4c
 8005990:	20001dcc 	.word	0x20001dcc

08005994 <uartTransport_rx_polled>:
 * Receives packets and enqueues them to the rx queue.  Reports of the
 * rx queue was full (to start) or the state of the receptions (success
 * or failure).  Uses HAL calls.
 */
TransportStatus uartTransport_rx_polled(uint32_t timeout_ms)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_UART_HANDLE_INIT(_uartHandle))
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <uartTransport_rx_polled+0x6c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d027      	beq.n	80059f4 <uartTransport_rx_polled+0x60>
 80059a4:	4b16      	ldr	r3, [pc, #88]	; (8005a00 <uartTransport_rx_polled+0x6c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d022      	beq.n	80059f4 <uartTransport_rx_polled+0x60>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <uartTransport_rx_polled+0x70>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <uartTransport_rx_polled+0x26>
		{
			return TRANSPORT_RX_FULL;
 80059b6:	2307      	movs	r3, #7
 80059b8:	e01d      	b.n	80059f6 <uartTransport_rx_polled+0x62>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_PACKET_SIZE, timeout_ms);
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <uartTransport_rx_polled+0x6c>)
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2240      	movs	r2, #64	; 0x40
 80059c2:	4911      	ldr	r1, [pc, #68]	; (8005a08 <uartTransport_rx_polled+0x74>)
 80059c4:	f7fd fe4c 	bl	8003660 <HAL_UART_Receive>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <uartTransport_rx_polled+0x42>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 80059d2:	2302      	movs	r3, #2
 80059d4:	e00f      	b.n	80059f6 <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_TIMEOUT)
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d101      	bne.n	80059e0 <uartTransport_rx_polled+0x4c>
		{
			return TRANSPORT_TIMEOUT;
 80059dc:	2301      	movs	r3, #1
 80059de:	e00a      	b.n	80059f6 <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_BUSY)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d101      	bne.n	80059ea <uartTransport_rx_polled+0x56>
		{
			return TRANSPORT_BUSY;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e005      	b.n	80059f6 <uartTransport_rx_polled+0x62>
		}
		else
		{
			_rxBuffer_full = true;
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <uartTransport_rx_polled+0x70>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <uartTransport_rx_polled+0x62>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80059f4:	2308      	movs	r3, #8
	}
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20001dc8 	.word	0x20001dc8
 8005a04:	20001e4d 	.word	0x20001e4d
 8005a08:	20001e0c 	.word	0x20001e0c

08005a0c <_transportLayer_reset>:
/* _transportLayer_reset
 *
 * Resets operational variables other than the HAL UART handle pointer.
 */
void _transportLayer_reset(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
	memset(_txBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 8005a10:	2240      	movs	r2, #64	; 0x40
 8005a12:	2100      	movs	r1, #0
 8005a14:	4807      	ldr	r0, [pc, #28]	; (8005a34 <_transportLayer_reset+0x28>)
 8005a16:	f000 f84d 	bl	8005ab4 <memset>
	memset(_rxBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 8005a1a:	2240      	movs	r2, #64	; 0x40
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4806      	ldr	r0, [pc, #24]	; (8005a38 <_transportLayer_reset+0x2c>)
 8005a20:	f000 f848 	bl	8005ab4 <memset>
	_txBuffer_full = false;
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <_transportLayer_reset+0x30>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
	_rxBuffer_full = false;
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <_transportLayer_reset+0x34>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
}
 8005a30:	bf00      	nop
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20001dcc 	.word	0x20001dcc
 8005a38:	20001e0c 	.word	0x20001e0c
 8005a3c:	20001e4c 	.word	0x20001e4c
 8005a40:	20001e4d 	.word	0x20001e4d

08005a44 <__errno>:
 8005a44:	4b01      	ldr	r3, [pc, #4]	; (8005a4c <__errno+0x8>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000014 	.word	0x20000014

08005a50 <__libc_init_array>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4d0d      	ldr	r5, [pc, #52]	; (8005a88 <__libc_init_array+0x38>)
 8005a54:	4c0d      	ldr	r4, [pc, #52]	; (8005a8c <__libc_init_array+0x3c>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	42a6      	cmp	r6, r4
 8005a5e:	d109      	bne.n	8005a74 <__libc_init_array+0x24>
 8005a60:	4d0b      	ldr	r5, [pc, #44]	; (8005a90 <__libc_init_array+0x40>)
 8005a62:	4c0c      	ldr	r4, [pc, #48]	; (8005a94 <__libc_init_array+0x44>)
 8005a64:	f001 f968 	bl	8006d38 <_init>
 8005a68:	1b64      	subs	r4, r4, r5
 8005a6a:	10a4      	asrs	r4, r4, #2
 8005a6c:	2600      	movs	r6, #0
 8005a6e:	42a6      	cmp	r6, r4
 8005a70:	d105      	bne.n	8005a7e <__libc_init_array+0x2e>
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a78:	4798      	blx	r3
 8005a7a:	3601      	adds	r6, #1
 8005a7c:	e7ee      	b.n	8005a5c <__libc_init_array+0xc>
 8005a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a82:	4798      	blx	r3
 8005a84:	3601      	adds	r6, #1
 8005a86:	e7f2      	b.n	8005a6e <__libc_init_array+0x1e>
 8005a88:	08007184 	.word	0x08007184
 8005a8c:	08007184 	.word	0x08007184
 8005a90:	08007184 	.word	0x08007184
 8005a94:	08007188 	.word	0x08007188

08005a98 <memcpy>:
 8005a98:	440a      	add	r2, r1
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005aa0:	d100      	bne.n	8005aa4 <memcpy+0xc>
 8005aa2:	4770      	bx	lr
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aae:	4291      	cmp	r1, r2
 8005ab0:	d1f9      	bne.n	8005aa6 <memcpy+0xe>
 8005ab2:	bd10      	pop	{r4, pc}

08005ab4 <memset>:
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d100      	bne.n	8005abe <memset+0xa>
 8005abc:	4770      	bx	lr
 8005abe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac2:	e7f9      	b.n	8005ab8 <memset+0x4>

08005ac4 <sniprintf>:
 8005ac4:	b40c      	push	{r2, r3}
 8005ac6:	b530      	push	{r4, r5, lr}
 8005ac8:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <sniprintf+0x64>)
 8005aca:	1e0c      	subs	r4, r1, #0
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	b09d      	sub	sp, #116	; 0x74
 8005ad0:	da08      	bge.n	8005ae4 <sniprintf+0x20>
 8005ad2:	238b      	movs	r3, #139	; 0x8b
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ada:	b01d      	add	sp, #116	; 0x74
 8005adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ae0:	b002      	add	sp, #8
 8005ae2:	4770      	bx	lr
 8005ae4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005aec:	bf14      	ite	ne
 8005aee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005af2:	4623      	moveq	r3, r4
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005afc:	9002      	str	r0, [sp, #8]
 8005afe:	9006      	str	r0, [sp, #24]
 8005b00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b06:	ab21      	add	r3, sp, #132	; 0x84
 8005b08:	a902      	add	r1, sp, #8
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	f000 f8a9 	bl	8005c64 <_svfiprintf_r>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	bfbc      	itt	lt
 8005b16:	238b      	movlt	r3, #139	; 0x8b
 8005b18:	602b      	strlt	r3, [r5, #0]
 8005b1a:	2c00      	cmp	r4, #0
 8005b1c:	d0dd      	beq.n	8005ada <sniprintf+0x16>
 8005b1e:	9b02      	ldr	r3, [sp, #8]
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e7d9      	b.n	8005ada <sniprintf+0x16>
 8005b26:	bf00      	nop
 8005b28:	20000014 	.word	0x20000014

08005b2c <siscanf>:
 8005b2c:	b40e      	push	{r1, r2, r3}
 8005b2e:	b530      	push	{r4, r5, lr}
 8005b30:	b09c      	sub	sp, #112	; 0x70
 8005b32:	ac1f      	add	r4, sp, #124	; 0x7c
 8005b34:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005b38:	f854 5b04 	ldr.w	r5, [r4], #4
 8005b3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005b40:	9002      	str	r0, [sp, #8]
 8005b42:	9006      	str	r0, [sp, #24]
 8005b44:	f7fa fb1c 	bl	8000180 <strlen>
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <siscanf+0x4c>)
 8005b4a:	9003      	str	r0, [sp, #12]
 8005b4c:	9007      	str	r0, [sp, #28]
 8005b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b50:	480a      	ldr	r0, [pc, #40]	; (8005b7c <siscanf+0x50>)
 8005b52:	9401      	str	r4, [sp, #4]
 8005b54:	2300      	movs	r3, #0
 8005b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b58:	9314      	str	r3, [sp, #80]	; 0x50
 8005b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b62:	462a      	mov	r2, r5
 8005b64:	4623      	mov	r3, r4
 8005b66:	a902      	add	r1, sp, #8
 8005b68:	6800      	ldr	r0, [r0, #0]
 8005b6a:	f000 f9d5 	bl	8005f18 <__ssvfiscanf_r>
 8005b6e:	b01c      	add	sp, #112	; 0x70
 8005b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b74:	b003      	add	sp, #12
 8005b76:	4770      	bx	lr
 8005b78:	08005b81 	.word	0x08005b81
 8005b7c:	20000014 	.word	0x20000014

08005b80 <__seofread>:
 8005b80:	2000      	movs	r0, #0
 8005b82:	4770      	bx	lr

08005b84 <strncmp>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4603      	mov	r3, r0
 8005b88:	b172      	cbz	r2, 8005ba8 <strncmp+0x24>
 8005b8a:	3901      	subs	r1, #1
 8005b8c:	1884      	adds	r4, r0, r2
 8005b8e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005b96:	4290      	cmp	r0, r2
 8005b98:	d101      	bne.n	8005b9e <strncmp+0x1a>
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	d101      	bne.n	8005ba2 <strncmp+0x1e>
 8005b9e:	1a80      	subs	r0, r0, r2
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d1f3      	bne.n	8005b8e <strncmp+0xa>
 8005ba6:	e7fa      	b.n	8005b9e <strncmp+0x1a>
 8005ba8:	4610      	mov	r0, r2
 8005baa:	e7f9      	b.n	8005ba0 <strncmp+0x1c>

08005bac <__ssputs_r>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	688e      	ldr	r6, [r1, #8]
 8005bb2:	429e      	cmp	r6, r3
 8005bb4:	4682      	mov	sl, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4690      	mov	r8, r2
 8005bba:	461f      	mov	r7, r3
 8005bbc:	d838      	bhi.n	8005c30 <__ssputs_r+0x84>
 8005bbe:	898a      	ldrh	r2, [r1, #12]
 8005bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bc4:	d032      	beq.n	8005c2c <__ssputs_r+0x80>
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	6909      	ldr	r1, [r1, #16]
 8005bca:	eba5 0901 	sub.w	r9, r5, r1
 8005bce:	6965      	ldr	r5, [r4, #20]
 8005bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bd8:	3301      	adds	r3, #1
 8005bda:	444b      	add	r3, r9
 8005bdc:	106d      	asrs	r5, r5, #1
 8005bde:	429d      	cmp	r5, r3
 8005be0:	bf38      	it	cc
 8005be2:	461d      	movcc	r5, r3
 8005be4:	0553      	lsls	r3, r2, #21
 8005be6:	d531      	bpl.n	8005c4c <__ssputs_r+0xa0>
 8005be8:	4629      	mov	r1, r5
 8005bea:	f000 ffdd 	bl	8006ba8 <_malloc_r>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	b950      	cbnz	r0, 8005c08 <__ssputs_r+0x5c>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	f8ca 3000 	str.w	r3, [sl]
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	6921      	ldr	r1, [r4, #16]
 8005c0a:	464a      	mov	r2, r9
 8005c0c:	f7ff ff44 	bl	8005a98 <memcpy>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	6126      	str	r6, [r4, #16]
 8005c1e:	6165      	str	r5, [r4, #20]
 8005c20:	444e      	add	r6, r9
 8005c22:	eba5 0509 	sub.w	r5, r5, r9
 8005c26:	6026      	str	r6, [r4, #0]
 8005c28:	60a5      	str	r5, [r4, #8]
 8005c2a:	463e      	mov	r6, r7
 8005c2c:	42be      	cmp	r6, r7
 8005c2e:	d900      	bls.n	8005c32 <__ssputs_r+0x86>
 8005c30:	463e      	mov	r6, r7
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	4632      	mov	r2, r6
 8005c36:	4641      	mov	r1, r8
 8005c38:	f000 ff32 	bl	8006aa0 <memmove>
 8005c3c:	68a3      	ldr	r3, [r4, #8]
 8005c3e:	1b9b      	subs	r3, r3, r6
 8005c40:	60a3      	str	r3, [r4, #8]
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	4433      	add	r3, r6
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e7db      	b.n	8005c04 <__ssputs_r+0x58>
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	f001 f81f 	bl	8006c90 <_realloc_r>
 8005c52:	4606      	mov	r6, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1e1      	bne.n	8005c1c <__ssputs_r+0x70>
 8005c58:	6921      	ldr	r1, [r4, #16]
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	f000 ff3a 	bl	8006ad4 <_free_r>
 8005c60:	e7c7      	b.n	8005bf2 <__ssputs_r+0x46>
	...

08005c64 <_svfiprintf_r>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	4698      	mov	r8, r3
 8005c6a:	898b      	ldrh	r3, [r1, #12]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	b09d      	sub	sp, #116	; 0x74
 8005c70:	4607      	mov	r7, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	d50e      	bpl.n	8005c96 <_svfiprintf_r+0x32>
 8005c78:	690b      	ldr	r3, [r1, #16]
 8005c7a:	b963      	cbnz	r3, 8005c96 <_svfiprintf_r+0x32>
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	f000 ff93 	bl	8006ba8 <_malloc_r>
 8005c82:	6028      	str	r0, [r5, #0]
 8005c84:	6128      	str	r0, [r5, #16]
 8005c86:	b920      	cbnz	r0, 8005c92 <_svfiprintf_r+0x2e>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c90:	e0d1      	b.n	8005e36 <_svfiprintf_r+0x1d2>
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	616b      	str	r3, [r5, #20]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9309      	str	r3, [sp, #36]	; 0x24
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ca4:	2330      	movs	r3, #48	; 0x30
 8005ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e50 <_svfiprintf_r+0x1ec>
 8005caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cae:	f04f 0901 	mov.w	r9, #1
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	469a      	mov	sl, r3
 8005cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cba:	b10a      	cbz	r2, 8005cc0 <_svfiprintf_r+0x5c>
 8005cbc:	2a25      	cmp	r2, #37	; 0x25
 8005cbe:	d1f9      	bne.n	8005cb4 <_svfiprintf_r+0x50>
 8005cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc4:	d00b      	beq.n	8005cde <_svfiprintf_r+0x7a>
 8005cc6:	465b      	mov	r3, fp
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ff6d 	bl	8005bac <__ssputs_r>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f000 80aa 	beq.w	8005e2c <_svfiprintf_r+0x1c8>
 8005cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cda:	445a      	add	r2, fp
 8005cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cde:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80a2 	beq.w	8005e2c <_svfiprintf_r+0x1c8>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf2:	f10a 0a01 	add.w	sl, sl, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	9307      	str	r3, [sp, #28]
 8005cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8005d00:	4654      	mov	r4, sl
 8005d02:	2205      	movs	r2, #5
 8005d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d08:	4851      	ldr	r0, [pc, #324]	; (8005e50 <_svfiprintf_r+0x1ec>)
 8005d0a:	f7fa fa41 	bl	8000190 <memchr>
 8005d0e:	9a04      	ldr	r2, [sp, #16]
 8005d10:	b9d8      	cbnz	r0, 8005d4a <_svfiprintf_r+0xe6>
 8005d12:	06d0      	lsls	r0, r2, #27
 8005d14:	bf44      	itt	mi
 8005d16:	2320      	movmi	r3, #32
 8005d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d1c:	0711      	lsls	r1, r2, #28
 8005d1e:	bf44      	itt	mi
 8005d20:	232b      	movmi	r3, #43	; 0x2b
 8005d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d26:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d015      	beq.n	8005d5a <_svfiprintf_r+0xf6>
 8005d2e:	9a07      	ldr	r2, [sp, #28]
 8005d30:	4654      	mov	r4, sl
 8005d32:	2000      	movs	r0, #0
 8005d34:	f04f 0c0a 	mov.w	ip, #10
 8005d38:	4621      	mov	r1, r4
 8005d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d3e:	3b30      	subs	r3, #48	; 0x30
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d94e      	bls.n	8005de2 <_svfiprintf_r+0x17e>
 8005d44:	b1b0      	cbz	r0, 8005d74 <_svfiprintf_r+0x110>
 8005d46:	9207      	str	r2, [sp, #28]
 8005d48:	e014      	b.n	8005d74 <_svfiprintf_r+0x110>
 8005d4a:	eba0 0308 	sub.w	r3, r0, r8
 8005d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	46a2      	mov	sl, r4
 8005d58:	e7d2      	b.n	8005d00 <_svfiprintf_r+0x9c>
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	1d19      	adds	r1, r3, #4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	9103      	str	r1, [sp, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bfbb      	ittet	lt
 8005d66:	425b      	neglt	r3, r3
 8005d68:	f042 0202 	orrlt.w	r2, r2, #2
 8005d6c:	9307      	strge	r3, [sp, #28]
 8005d6e:	9307      	strlt	r3, [sp, #28]
 8005d70:	bfb8      	it	lt
 8005d72:	9204      	strlt	r2, [sp, #16]
 8005d74:	7823      	ldrb	r3, [r4, #0]
 8005d76:	2b2e      	cmp	r3, #46	; 0x2e
 8005d78:	d10c      	bne.n	8005d94 <_svfiprintf_r+0x130>
 8005d7a:	7863      	ldrb	r3, [r4, #1]
 8005d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d7e:	d135      	bne.n	8005dec <_svfiprintf_r+0x188>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	1d1a      	adds	r2, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	9203      	str	r2, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfb8      	it	lt
 8005d8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d90:	3402      	adds	r4, #2
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005e54 <_svfiprintf_r+0x1f0>
 8005d98:	7821      	ldrb	r1, [r4, #0]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	f7fa f9f7 	bl	8000190 <memchr>
 8005da2:	b140      	cbz	r0, 8005db6 <_svfiprintf_r+0x152>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	eba0 000a 	sub.w	r0, r0, sl
 8005daa:	fa03 f000 	lsl.w	r0, r3, r0
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	4303      	orrs	r3, r0
 8005db2:	3401      	adds	r4, #1
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dba:	4827      	ldr	r0, [pc, #156]	; (8005e58 <_svfiprintf_r+0x1f4>)
 8005dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dc0:	2206      	movs	r2, #6
 8005dc2:	f7fa f9e5 	bl	8000190 <memchr>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d038      	beq.n	8005e3c <_svfiprintf_r+0x1d8>
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <_svfiprintf_r+0x1f8>)
 8005dcc:	bb1b      	cbnz	r3, 8005e16 <_svfiprintf_r+0x1b2>
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	f023 0307 	bic.w	r3, r3, #7
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ddc:	4433      	add	r3, r6
 8005dde:	9309      	str	r3, [sp, #36]	; 0x24
 8005de0:	e767      	b.n	8005cb2 <_svfiprintf_r+0x4e>
 8005de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de6:	460c      	mov	r4, r1
 8005de8:	2001      	movs	r0, #1
 8005dea:	e7a5      	b.n	8005d38 <_svfiprintf_r+0xd4>
 8005dec:	2300      	movs	r3, #0
 8005dee:	3401      	adds	r4, #1
 8005df0:	9305      	str	r3, [sp, #20]
 8005df2:	4619      	mov	r1, r3
 8005df4:	f04f 0c0a 	mov.w	ip, #10
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dfe:	3a30      	subs	r2, #48	; 0x30
 8005e00:	2a09      	cmp	r2, #9
 8005e02:	d903      	bls.n	8005e0c <_svfiprintf_r+0x1a8>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0c5      	beq.n	8005d94 <_svfiprintf_r+0x130>
 8005e08:	9105      	str	r1, [sp, #20]
 8005e0a:	e7c3      	b.n	8005d94 <_svfiprintf_r+0x130>
 8005e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e10:	4604      	mov	r4, r0
 8005e12:	2301      	movs	r3, #1
 8005e14:	e7f0      	b.n	8005df8 <_svfiprintf_r+0x194>
 8005e16:	ab03      	add	r3, sp, #12
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <_svfiprintf_r+0x1fc>)
 8005e1e:	a904      	add	r1, sp, #16
 8005e20:	4638      	mov	r0, r7
 8005e22:	f3af 8000 	nop.w
 8005e26:	1c42      	adds	r2, r0, #1
 8005e28:	4606      	mov	r6, r0
 8005e2a:	d1d6      	bne.n	8005dda <_svfiprintf_r+0x176>
 8005e2c:	89ab      	ldrh	r3, [r5, #12]
 8005e2e:	065b      	lsls	r3, r3, #25
 8005e30:	f53f af2c 	bmi.w	8005c8c <_svfiprintf_r+0x28>
 8005e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e36:	b01d      	add	sp, #116	; 0x74
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	ab03      	add	r3, sp, #12
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	462a      	mov	r2, r5
 8005e42:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <_svfiprintf_r+0x1fc>)
 8005e44:	a904      	add	r1, sp, #16
 8005e46:	4638      	mov	r0, r7
 8005e48:	f000 fa4c 	bl	80062e4 <_printf_i>
 8005e4c:	e7eb      	b.n	8005e26 <_svfiprintf_r+0x1c2>
 8005e4e:	bf00      	nop
 8005e50:	08006fcc 	.word	0x08006fcc
 8005e54:	08006fd2 	.word	0x08006fd2
 8005e58:	08006fd6 	.word	0x08006fd6
 8005e5c:	00000000 	.word	0x00000000
 8005e60:	08005bad 	.word	0x08005bad

08005e64 <_sungetc_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	1c4b      	adds	r3, r1, #1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	d103      	bne.n	8005e74 <_sungetc_r+0x10>
 8005e6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e70:	4628      	mov	r0, r5
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	8993      	ldrh	r3, [r2, #12]
 8005e76:	f023 0320 	bic.w	r3, r3, #32
 8005e7a:	8193      	strh	r3, [r2, #12]
 8005e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e7e:	6852      	ldr	r2, [r2, #4]
 8005e80:	b2cd      	uxtb	r5, r1
 8005e82:	b18b      	cbz	r3, 8005ea8 <_sungetc_r+0x44>
 8005e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e86:	4293      	cmp	r3, r2
 8005e88:	dd08      	ble.n	8005e9c <_sungetc_r+0x38>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	1e5a      	subs	r2, r3, #1
 8005e8e:	6022      	str	r2, [r4, #0]
 8005e90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	3301      	adds	r3, #1
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	e7e9      	b.n	8005e70 <_sungetc_r+0xc>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f000 fdc3 	bl	8006a28 <__submore>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0f1      	beq.n	8005e8a <_sungetc_r+0x26>
 8005ea6:	e7e1      	b.n	8005e6c <_sungetc_r+0x8>
 8005ea8:	6921      	ldr	r1, [r4, #16]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	b151      	cbz	r1, 8005ec4 <_sungetc_r+0x60>
 8005eae:	4299      	cmp	r1, r3
 8005eb0:	d208      	bcs.n	8005ec4 <_sungetc_r+0x60>
 8005eb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005eb6:	42a9      	cmp	r1, r5
 8005eb8:	d104      	bne.n	8005ec4 <_sungetc_r+0x60>
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	3201      	adds	r2, #1
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	6062      	str	r2, [r4, #4]
 8005ec2:	e7d5      	b.n	8005e70 <_sungetc_r+0xc>
 8005ec4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8005ece:	2303      	movs	r3, #3
 8005ed0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7dc      	b.n	8005e98 <_sungetc_r+0x34>

08005ede <__ssrefill_r>:
 8005ede:	b510      	push	{r4, lr}
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ee4:	b169      	cbz	r1, 8005f02 <__ssrefill_r+0x24>
 8005ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eea:	4299      	cmp	r1, r3
 8005eec:	d001      	beq.n	8005ef2 <__ssrefill_r+0x14>
 8005eee:	f000 fdf1 	bl	8006ad4 <_free_r>
 8005ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8005efa:	b113      	cbz	r3, 8005f02 <__ssrefill_r+0x24>
 8005efc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	f043 0320 	orr.w	r3, r3, #32
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f16:	e7f3      	b.n	8005f00 <__ssrefill_r+0x22>

08005f18 <__ssvfiscanf_r>:
 8005f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005f22:	2100      	movs	r1, #0
 8005f24:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005f28:	49a6      	ldr	r1, [pc, #664]	; (80061c4 <__ssvfiscanf_r+0x2ac>)
 8005f2a:	91a0      	str	r1, [sp, #640]	; 0x280
 8005f2c:	f10d 0804 	add.w	r8, sp, #4
 8005f30:	49a5      	ldr	r1, [pc, #660]	; (80061c8 <__ssvfiscanf_r+0x2b0>)
 8005f32:	4fa6      	ldr	r7, [pc, #664]	; (80061cc <__ssvfiscanf_r+0x2b4>)
 8005f34:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80061d0 <__ssvfiscanf_r+0x2b8>
 8005f38:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	7813      	ldrb	r3, [r2, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 815a 	beq.w	80061fe <__ssvfiscanf_r+0x2e6>
 8005f4a:	5dd9      	ldrb	r1, [r3, r7]
 8005f4c:	f011 0108 	ands.w	r1, r1, #8
 8005f50:	f102 0501 	add.w	r5, r2, #1
 8005f54:	d019      	beq.n	8005f8a <__ssvfiscanf_r+0x72>
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dd0f      	ble.n	8005f7c <__ssvfiscanf_r+0x64>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	781a      	ldrb	r2, [r3, #0]
 8005f60:	5cba      	ldrb	r2, [r7, r2]
 8005f62:	0712      	lsls	r2, r2, #28
 8005f64:	d401      	bmi.n	8005f6a <__ssvfiscanf_r+0x52>
 8005f66:	462a      	mov	r2, r5
 8005f68:	e7eb      	b.n	8005f42 <__ssvfiscanf_r+0x2a>
 8005f6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005f6c:	3201      	adds	r2, #1
 8005f6e:	9245      	str	r2, [sp, #276]	; 0x114
 8005f70:	6862      	ldr	r2, [r4, #4]
 8005f72:	3301      	adds	r3, #1
 8005f74:	3a01      	subs	r2, #1
 8005f76:	6062      	str	r2, [r4, #4]
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	e7ec      	b.n	8005f56 <__ssvfiscanf_r+0x3e>
 8005f7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4630      	mov	r0, r6
 8005f82:	4798      	blx	r3
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d0e9      	beq.n	8005f5c <__ssvfiscanf_r+0x44>
 8005f88:	e7ed      	b.n	8005f66 <__ssvfiscanf_r+0x4e>
 8005f8a:	2b25      	cmp	r3, #37	; 0x25
 8005f8c:	d012      	beq.n	8005fb4 <__ssvfiscanf_r+0x9c>
 8005f8e:	469a      	mov	sl, r3
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f340 8091 	ble.w	80060ba <__ssvfiscanf_r+0x1a2>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	7813      	ldrb	r3, [r2, #0]
 8005f9c:	4553      	cmp	r3, sl
 8005f9e:	f040 812e 	bne.w	80061fe <__ssvfiscanf_r+0x2e6>
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	6063      	str	r3, [r4, #4]
 8005fa8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005faa:	3201      	adds	r2, #1
 8005fac:	3301      	adds	r3, #1
 8005fae:	6022      	str	r2, [r4, #0]
 8005fb0:	9345      	str	r3, [sp, #276]	; 0x114
 8005fb2:	e7d8      	b.n	8005f66 <__ssvfiscanf_r+0x4e>
 8005fb4:	9141      	str	r1, [sp, #260]	; 0x104
 8005fb6:	9143      	str	r1, [sp, #268]	; 0x10c
 8005fb8:	7853      	ldrb	r3, [r2, #1]
 8005fba:	2b2a      	cmp	r3, #42	; 0x2a
 8005fbc:	bf02      	ittt	eq
 8005fbe:	2310      	moveq	r3, #16
 8005fc0:	1c95      	addeq	r5, r2, #2
 8005fc2:	9341      	streq	r3, [sp, #260]	; 0x104
 8005fc4:	220a      	movs	r2, #10
 8005fc6:	46aa      	mov	sl, r5
 8005fc8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005fcc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d91d      	bls.n	8006010 <__ssvfiscanf_r+0xf8>
 8005fd4:	487e      	ldr	r0, [pc, #504]	; (80061d0 <__ssvfiscanf_r+0x2b8>)
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	f7fa f8da 	bl	8000190 <memchr>
 8005fdc:	b140      	cbz	r0, 8005ff0 <__ssvfiscanf_r+0xd8>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	eba0 0009 	sub.w	r0, r0, r9
 8005fe4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fe8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005fea:	4318      	orrs	r0, r3
 8005fec:	9041      	str	r0, [sp, #260]	; 0x104
 8005fee:	4655      	mov	r5, sl
 8005ff0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ff4:	2b78      	cmp	r3, #120	; 0x78
 8005ff6:	d806      	bhi.n	8006006 <__ssvfiscanf_r+0xee>
 8005ff8:	2b57      	cmp	r3, #87	; 0x57
 8005ffa:	d810      	bhi.n	800601e <__ssvfiscanf_r+0x106>
 8005ffc:	2b25      	cmp	r3, #37	; 0x25
 8005ffe:	d0c6      	beq.n	8005f8e <__ssvfiscanf_r+0x76>
 8006000:	d856      	bhi.n	80060b0 <__ssvfiscanf_r+0x198>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d064      	beq.n	80060d0 <__ssvfiscanf_r+0x1b8>
 8006006:	2303      	movs	r3, #3
 8006008:	9347      	str	r3, [sp, #284]	; 0x11c
 800600a:	230a      	movs	r3, #10
 800600c:	9342      	str	r3, [sp, #264]	; 0x108
 800600e:	e071      	b.n	80060f4 <__ssvfiscanf_r+0x1dc>
 8006010:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006012:	fb02 1103 	mla	r1, r2, r3, r1
 8006016:	3930      	subs	r1, #48	; 0x30
 8006018:	9143      	str	r1, [sp, #268]	; 0x10c
 800601a:	4655      	mov	r5, sl
 800601c:	e7d3      	b.n	8005fc6 <__ssvfiscanf_r+0xae>
 800601e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006022:	2a20      	cmp	r2, #32
 8006024:	d8ef      	bhi.n	8006006 <__ssvfiscanf_r+0xee>
 8006026:	a101      	add	r1, pc, #4	; (adr r1, 800602c <__ssvfiscanf_r+0x114>)
 8006028:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800602c:	080060df 	.word	0x080060df
 8006030:	08006007 	.word	0x08006007
 8006034:	08006007 	.word	0x08006007
 8006038:	0800613d 	.word	0x0800613d
 800603c:	08006007 	.word	0x08006007
 8006040:	08006007 	.word	0x08006007
 8006044:	08006007 	.word	0x08006007
 8006048:	08006007 	.word	0x08006007
 800604c:	08006007 	.word	0x08006007
 8006050:	08006007 	.word	0x08006007
 8006054:	08006007 	.word	0x08006007
 8006058:	08006153 	.word	0x08006153
 800605c:	08006129 	.word	0x08006129
 8006060:	080060b7 	.word	0x080060b7
 8006064:	080060b7 	.word	0x080060b7
 8006068:	080060b7 	.word	0x080060b7
 800606c:	08006007 	.word	0x08006007
 8006070:	0800612d 	.word	0x0800612d
 8006074:	08006007 	.word	0x08006007
 8006078:	08006007 	.word	0x08006007
 800607c:	08006007 	.word	0x08006007
 8006080:	08006007 	.word	0x08006007
 8006084:	08006163 	.word	0x08006163
 8006088:	08006135 	.word	0x08006135
 800608c:	080060d7 	.word	0x080060d7
 8006090:	08006007 	.word	0x08006007
 8006094:	08006007 	.word	0x08006007
 8006098:	0800615f 	.word	0x0800615f
 800609c:	08006007 	.word	0x08006007
 80060a0:	08006129 	.word	0x08006129
 80060a4:	08006007 	.word	0x08006007
 80060a8:	08006007 	.word	0x08006007
 80060ac:	080060df 	.word	0x080060df
 80060b0:	3b45      	subs	r3, #69	; 0x45
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d8a7      	bhi.n	8006006 <__ssvfiscanf_r+0xee>
 80060b6:	2305      	movs	r3, #5
 80060b8:	e01b      	b.n	80060f2 <__ssvfiscanf_r+0x1da>
 80060ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80060bc:	4621      	mov	r1, r4
 80060be:	4630      	mov	r0, r6
 80060c0:	4798      	blx	r3
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f43f af68 	beq.w	8005f98 <__ssvfiscanf_r+0x80>
 80060c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80060ca:	2800      	cmp	r0, #0
 80060cc:	f040 808d 	bne.w	80061ea <__ssvfiscanf_r+0x2d2>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d4:	e08f      	b.n	80061f6 <__ssvfiscanf_r+0x2de>
 80060d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80060d8:	f042 0220 	orr.w	r2, r2, #32
 80060dc:	9241      	str	r2, [sp, #260]	; 0x104
 80060de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80060e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e4:	9241      	str	r2, [sp, #260]	; 0x104
 80060e6:	2210      	movs	r2, #16
 80060e8:	2b6f      	cmp	r3, #111	; 0x6f
 80060ea:	9242      	str	r2, [sp, #264]	; 0x108
 80060ec:	bf34      	ite	cc
 80060ee:	2303      	movcc	r3, #3
 80060f0:	2304      	movcs	r3, #4
 80060f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dd42      	ble.n	8006180 <__ssvfiscanf_r+0x268>
 80060fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060fc:	0659      	lsls	r1, r3, #25
 80060fe:	d404      	bmi.n	800610a <__ssvfiscanf_r+0x1f2>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	5cba      	ldrb	r2, [r7, r2]
 8006106:	0712      	lsls	r2, r2, #28
 8006108:	d441      	bmi.n	800618e <__ssvfiscanf_r+0x276>
 800610a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800610c:	2b02      	cmp	r3, #2
 800610e:	dc50      	bgt.n	80061b2 <__ssvfiscanf_r+0x29a>
 8006110:	466b      	mov	r3, sp
 8006112:	4622      	mov	r2, r4
 8006114:	a941      	add	r1, sp, #260	; 0x104
 8006116:	4630      	mov	r0, r6
 8006118:	f000 fa0a 	bl	8006530 <_scanf_chars>
 800611c:	2801      	cmp	r0, #1
 800611e:	d06e      	beq.n	80061fe <__ssvfiscanf_r+0x2e6>
 8006120:	2802      	cmp	r0, #2
 8006122:	f47f af20 	bne.w	8005f66 <__ssvfiscanf_r+0x4e>
 8006126:	e7cf      	b.n	80060c8 <__ssvfiscanf_r+0x1b0>
 8006128:	220a      	movs	r2, #10
 800612a:	e7dd      	b.n	80060e8 <__ssvfiscanf_r+0x1d0>
 800612c:	2300      	movs	r3, #0
 800612e:	9342      	str	r3, [sp, #264]	; 0x108
 8006130:	2303      	movs	r3, #3
 8006132:	e7de      	b.n	80060f2 <__ssvfiscanf_r+0x1da>
 8006134:	2308      	movs	r3, #8
 8006136:	9342      	str	r3, [sp, #264]	; 0x108
 8006138:	2304      	movs	r3, #4
 800613a:	e7da      	b.n	80060f2 <__ssvfiscanf_r+0x1da>
 800613c:	4629      	mov	r1, r5
 800613e:	4640      	mov	r0, r8
 8006140:	f000 fb48 	bl	80067d4 <__sccl>
 8006144:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800614a:	9341      	str	r3, [sp, #260]	; 0x104
 800614c:	4605      	mov	r5, r0
 800614e:	2301      	movs	r3, #1
 8006150:	e7cf      	b.n	80060f2 <__ssvfiscanf_r+0x1da>
 8006152:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006158:	9341      	str	r3, [sp, #260]	; 0x104
 800615a:	2300      	movs	r3, #0
 800615c:	e7c9      	b.n	80060f2 <__ssvfiscanf_r+0x1da>
 800615e:	2302      	movs	r3, #2
 8006160:	e7c7      	b.n	80060f2 <__ssvfiscanf_r+0x1da>
 8006162:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006164:	06c3      	lsls	r3, r0, #27
 8006166:	f53f aefe 	bmi.w	8005f66 <__ssvfiscanf_r+0x4e>
 800616a:	9b00      	ldr	r3, [sp, #0]
 800616c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800616e:	1d19      	adds	r1, r3, #4
 8006170:	9100      	str	r1, [sp, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f010 0f01 	tst.w	r0, #1
 8006178:	bf14      	ite	ne
 800617a:	801a      	strhne	r2, [r3, #0]
 800617c:	601a      	streq	r2, [r3, #0]
 800617e:	e6f2      	b.n	8005f66 <__ssvfiscanf_r+0x4e>
 8006180:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006182:	4621      	mov	r1, r4
 8006184:	4630      	mov	r0, r6
 8006186:	4798      	blx	r3
 8006188:	2800      	cmp	r0, #0
 800618a:	d0b6      	beq.n	80060fa <__ssvfiscanf_r+0x1e2>
 800618c:	e79c      	b.n	80060c8 <__ssvfiscanf_r+0x1b0>
 800618e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006190:	3201      	adds	r2, #1
 8006192:	9245      	str	r2, [sp, #276]	; 0x114
 8006194:	6862      	ldr	r2, [r4, #4]
 8006196:	3a01      	subs	r2, #1
 8006198:	2a00      	cmp	r2, #0
 800619a:	6062      	str	r2, [r4, #4]
 800619c:	dd02      	ble.n	80061a4 <__ssvfiscanf_r+0x28c>
 800619e:	3301      	adds	r3, #1
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	e7ad      	b.n	8006100 <__ssvfiscanf_r+0x1e8>
 80061a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80061a6:	4621      	mov	r1, r4
 80061a8:	4630      	mov	r0, r6
 80061aa:	4798      	blx	r3
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d0a7      	beq.n	8006100 <__ssvfiscanf_r+0x1e8>
 80061b0:	e78a      	b.n	80060c8 <__ssvfiscanf_r+0x1b0>
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	dc0e      	bgt.n	80061d4 <__ssvfiscanf_r+0x2bc>
 80061b6:	466b      	mov	r3, sp
 80061b8:	4622      	mov	r2, r4
 80061ba:	a941      	add	r1, sp, #260	; 0x104
 80061bc:	4630      	mov	r0, r6
 80061be:	f000 fa11 	bl	80065e4 <_scanf_i>
 80061c2:	e7ab      	b.n	800611c <__ssvfiscanf_r+0x204>
 80061c4:	08005e65 	.word	0x08005e65
 80061c8:	08005edf 	.word	0x08005edf
 80061cc:	0800701b 	.word	0x0800701b
 80061d0:	08006fd2 	.word	0x08006fd2
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <__ssvfiscanf_r+0x2ec>)
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f43f aec5 	beq.w	8005f66 <__ssvfiscanf_r+0x4e>
 80061dc:	466b      	mov	r3, sp
 80061de:	4622      	mov	r2, r4
 80061e0:	a941      	add	r1, sp, #260	; 0x104
 80061e2:	4630      	mov	r0, r6
 80061e4:	f3af 8000 	nop.w
 80061e8:	e798      	b.n	800611c <__ssvfiscanf_r+0x204>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061f0:	bf18      	it	ne
 80061f2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80061f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006200:	e7f9      	b.n	80061f6 <__ssvfiscanf_r+0x2de>
 8006202:	bf00      	nop
 8006204:	00000000 	.word	0x00000000

08006208 <_printf_common>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	4616      	mov	r6, r2
 800620e:	4699      	mov	r9, r3
 8006210:	688a      	ldr	r2, [r1, #8]
 8006212:	690b      	ldr	r3, [r1, #16]
 8006214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006218:	4293      	cmp	r3, r2
 800621a:	bfb8      	it	lt
 800621c:	4613      	movlt	r3, r2
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006224:	4607      	mov	r7, r0
 8006226:	460c      	mov	r4, r1
 8006228:	b10a      	cbz	r2, 800622e <_printf_common+0x26>
 800622a:	3301      	adds	r3, #1
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	0699      	lsls	r1, r3, #26
 8006232:	bf42      	ittt	mi
 8006234:	6833      	ldrmi	r3, [r6, #0]
 8006236:	3302      	addmi	r3, #2
 8006238:	6033      	strmi	r3, [r6, #0]
 800623a:	6825      	ldr	r5, [r4, #0]
 800623c:	f015 0506 	ands.w	r5, r5, #6
 8006240:	d106      	bne.n	8006250 <_printf_common+0x48>
 8006242:	f104 0a19 	add.w	sl, r4, #25
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	6832      	ldr	r2, [r6, #0]
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	42ab      	cmp	r3, r5
 800624e:	dc26      	bgt.n	800629e <_printf_common+0x96>
 8006250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006254:	1e13      	subs	r3, r2, #0
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	bf18      	it	ne
 800625a:	2301      	movne	r3, #1
 800625c:	0692      	lsls	r2, r2, #26
 800625e:	d42b      	bmi.n	80062b8 <_printf_common+0xb0>
 8006260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006264:	4649      	mov	r1, r9
 8006266:	4638      	mov	r0, r7
 8006268:	47c0      	blx	r8
 800626a:	3001      	adds	r0, #1
 800626c:	d01e      	beq.n	80062ac <_printf_common+0xa4>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	68e5      	ldr	r5, [r4, #12]
 8006272:	6832      	ldr	r2, [r6, #0]
 8006274:	f003 0306 	and.w	r3, r3, #6
 8006278:	2b04      	cmp	r3, #4
 800627a:	bf08      	it	eq
 800627c:	1aad      	subeq	r5, r5, r2
 800627e:	68a3      	ldr	r3, [r4, #8]
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	bf0c      	ite	eq
 8006284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006288:	2500      	movne	r5, #0
 800628a:	4293      	cmp	r3, r2
 800628c:	bfc4      	itt	gt
 800628e:	1a9b      	subgt	r3, r3, r2
 8006290:	18ed      	addgt	r5, r5, r3
 8006292:	2600      	movs	r6, #0
 8006294:	341a      	adds	r4, #26
 8006296:	42b5      	cmp	r5, r6
 8006298:	d11a      	bne.n	80062d0 <_printf_common+0xc8>
 800629a:	2000      	movs	r0, #0
 800629c:	e008      	b.n	80062b0 <_printf_common+0xa8>
 800629e:	2301      	movs	r3, #1
 80062a0:	4652      	mov	r2, sl
 80062a2:	4649      	mov	r1, r9
 80062a4:	4638      	mov	r0, r7
 80062a6:	47c0      	blx	r8
 80062a8:	3001      	adds	r0, #1
 80062aa:	d103      	bne.n	80062b4 <_printf_common+0xac>
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b4:	3501      	adds	r5, #1
 80062b6:	e7c6      	b.n	8006246 <_printf_common+0x3e>
 80062b8:	18e1      	adds	r1, r4, r3
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	2030      	movs	r0, #48	; 0x30
 80062be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062c2:	4422      	add	r2, r4
 80062c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062cc:	3302      	adds	r3, #2
 80062ce:	e7c7      	b.n	8006260 <_printf_common+0x58>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4622      	mov	r2, r4
 80062d4:	4649      	mov	r1, r9
 80062d6:	4638      	mov	r0, r7
 80062d8:	47c0      	blx	r8
 80062da:	3001      	adds	r0, #1
 80062dc:	d0e6      	beq.n	80062ac <_printf_common+0xa4>
 80062de:	3601      	adds	r6, #1
 80062e0:	e7d9      	b.n	8006296 <_printf_common+0x8e>
	...

080062e4 <_printf_i>:
 80062e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e8:	7e0f      	ldrb	r7, [r1, #24]
 80062ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062ec:	2f78      	cmp	r7, #120	; 0x78
 80062ee:	4691      	mov	r9, r2
 80062f0:	4680      	mov	r8, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	469a      	mov	sl, r3
 80062f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062fa:	d807      	bhi.n	800630c <_printf_i+0x28>
 80062fc:	2f62      	cmp	r7, #98	; 0x62
 80062fe:	d80a      	bhi.n	8006316 <_printf_i+0x32>
 8006300:	2f00      	cmp	r7, #0
 8006302:	f000 80d8 	beq.w	80064b6 <_printf_i+0x1d2>
 8006306:	2f58      	cmp	r7, #88	; 0x58
 8006308:	f000 80a3 	beq.w	8006452 <_printf_i+0x16e>
 800630c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006314:	e03a      	b.n	800638c <_printf_i+0xa8>
 8006316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800631a:	2b15      	cmp	r3, #21
 800631c:	d8f6      	bhi.n	800630c <_printf_i+0x28>
 800631e:	a101      	add	r1, pc, #4	; (adr r1, 8006324 <_printf_i+0x40>)
 8006320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006324:	0800637d 	.word	0x0800637d
 8006328:	08006391 	.word	0x08006391
 800632c:	0800630d 	.word	0x0800630d
 8006330:	0800630d 	.word	0x0800630d
 8006334:	0800630d 	.word	0x0800630d
 8006338:	0800630d 	.word	0x0800630d
 800633c:	08006391 	.word	0x08006391
 8006340:	0800630d 	.word	0x0800630d
 8006344:	0800630d 	.word	0x0800630d
 8006348:	0800630d 	.word	0x0800630d
 800634c:	0800630d 	.word	0x0800630d
 8006350:	0800649d 	.word	0x0800649d
 8006354:	080063c1 	.word	0x080063c1
 8006358:	0800647f 	.word	0x0800647f
 800635c:	0800630d 	.word	0x0800630d
 8006360:	0800630d 	.word	0x0800630d
 8006364:	080064bf 	.word	0x080064bf
 8006368:	0800630d 	.word	0x0800630d
 800636c:	080063c1 	.word	0x080063c1
 8006370:	0800630d 	.word	0x0800630d
 8006374:	0800630d 	.word	0x0800630d
 8006378:	08006487 	.word	0x08006487
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	1d1a      	adds	r2, r3, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	602a      	str	r2, [r5, #0]
 8006384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800638c:	2301      	movs	r3, #1
 800638e:	e0a3      	b.n	80064d8 <_printf_i+0x1f4>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	6829      	ldr	r1, [r5, #0]
 8006394:	0606      	lsls	r6, r0, #24
 8006396:	f101 0304 	add.w	r3, r1, #4
 800639a:	d50a      	bpl.n	80063b2 <_printf_i+0xce>
 800639c:	680e      	ldr	r6, [r1, #0]
 800639e:	602b      	str	r3, [r5, #0]
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	da03      	bge.n	80063ac <_printf_i+0xc8>
 80063a4:	232d      	movs	r3, #45	; 0x2d
 80063a6:	4276      	negs	r6, r6
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ac:	485e      	ldr	r0, [pc, #376]	; (8006528 <_printf_i+0x244>)
 80063ae:	230a      	movs	r3, #10
 80063b0:	e019      	b.n	80063e6 <_printf_i+0x102>
 80063b2:	680e      	ldr	r6, [r1, #0]
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063ba:	bf18      	it	ne
 80063bc:	b236      	sxthne	r6, r6
 80063be:	e7ef      	b.n	80063a0 <_printf_i+0xbc>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	6029      	str	r1, [r5, #0]
 80063c8:	0601      	lsls	r1, r0, #24
 80063ca:	d501      	bpl.n	80063d0 <_printf_i+0xec>
 80063cc:	681e      	ldr	r6, [r3, #0]
 80063ce:	e002      	b.n	80063d6 <_printf_i+0xf2>
 80063d0:	0646      	lsls	r6, r0, #25
 80063d2:	d5fb      	bpl.n	80063cc <_printf_i+0xe8>
 80063d4:	881e      	ldrh	r6, [r3, #0]
 80063d6:	4854      	ldr	r0, [pc, #336]	; (8006528 <_printf_i+0x244>)
 80063d8:	2f6f      	cmp	r7, #111	; 0x6f
 80063da:	bf0c      	ite	eq
 80063dc:	2308      	moveq	r3, #8
 80063de:	230a      	movne	r3, #10
 80063e0:	2100      	movs	r1, #0
 80063e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063e6:	6865      	ldr	r5, [r4, #4]
 80063e8:	60a5      	str	r5, [r4, #8]
 80063ea:	2d00      	cmp	r5, #0
 80063ec:	bfa2      	ittt	ge
 80063ee:	6821      	ldrge	r1, [r4, #0]
 80063f0:	f021 0104 	bicge.w	r1, r1, #4
 80063f4:	6021      	strge	r1, [r4, #0]
 80063f6:	b90e      	cbnz	r6, 80063fc <_printf_i+0x118>
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	d04d      	beq.n	8006498 <_printf_i+0x1b4>
 80063fc:	4615      	mov	r5, r2
 80063fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006402:	fb03 6711 	mls	r7, r3, r1, r6
 8006406:	5dc7      	ldrb	r7, [r0, r7]
 8006408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800640c:	4637      	mov	r7, r6
 800640e:	42bb      	cmp	r3, r7
 8006410:	460e      	mov	r6, r1
 8006412:	d9f4      	bls.n	80063fe <_printf_i+0x11a>
 8006414:	2b08      	cmp	r3, #8
 8006416:	d10b      	bne.n	8006430 <_printf_i+0x14c>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	07de      	lsls	r6, r3, #31
 800641c:	d508      	bpl.n	8006430 <_printf_i+0x14c>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	6861      	ldr	r1, [r4, #4]
 8006422:	4299      	cmp	r1, r3
 8006424:	bfde      	ittt	le
 8006426:	2330      	movle	r3, #48	; 0x30
 8006428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800642c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006430:	1b52      	subs	r2, r2, r5
 8006432:	6122      	str	r2, [r4, #16]
 8006434:	f8cd a000 	str.w	sl, [sp]
 8006438:	464b      	mov	r3, r9
 800643a:	aa03      	add	r2, sp, #12
 800643c:	4621      	mov	r1, r4
 800643e:	4640      	mov	r0, r8
 8006440:	f7ff fee2 	bl	8006208 <_printf_common>
 8006444:	3001      	adds	r0, #1
 8006446:	d14c      	bne.n	80064e2 <_printf_i+0x1fe>
 8006448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800644c:	b004      	add	sp, #16
 800644e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006452:	4835      	ldr	r0, [pc, #212]	; (8006528 <_printf_i+0x244>)
 8006454:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006458:	6829      	ldr	r1, [r5, #0]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006460:	6029      	str	r1, [r5, #0]
 8006462:	061d      	lsls	r5, r3, #24
 8006464:	d514      	bpl.n	8006490 <_printf_i+0x1ac>
 8006466:	07df      	lsls	r7, r3, #31
 8006468:	bf44      	itt	mi
 800646a:	f043 0320 	orrmi.w	r3, r3, #32
 800646e:	6023      	strmi	r3, [r4, #0]
 8006470:	b91e      	cbnz	r6, 800647a <_printf_i+0x196>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f023 0320 	bic.w	r3, r3, #32
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	2310      	movs	r3, #16
 800647c:	e7b0      	b.n	80063e0 <_printf_i+0xfc>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	f043 0320 	orr.w	r3, r3, #32
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	2378      	movs	r3, #120	; 0x78
 8006488:	4828      	ldr	r0, [pc, #160]	; (800652c <_printf_i+0x248>)
 800648a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800648e:	e7e3      	b.n	8006458 <_printf_i+0x174>
 8006490:	0659      	lsls	r1, r3, #25
 8006492:	bf48      	it	mi
 8006494:	b2b6      	uxthmi	r6, r6
 8006496:	e7e6      	b.n	8006466 <_printf_i+0x182>
 8006498:	4615      	mov	r5, r2
 800649a:	e7bb      	b.n	8006414 <_printf_i+0x130>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	6826      	ldr	r6, [r4, #0]
 80064a0:	6961      	ldr	r1, [r4, #20]
 80064a2:	1d18      	adds	r0, r3, #4
 80064a4:	6028      	str	r0, [r5, #0]
 80064a6:	0635      	lsls	r5, r6, #24
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	d501      	bpl.n	80064b0 <_printf_i+0x1cc>
 80064ac:	6019      	str	r1, [r3, #0]
 80064ae:	e002      	b.n	80064b6 <_printf_i+0x1d2>
 80064b0:	0670      	lsls	r0, r6, #25
 80064b2:	d5fb      	bpl.n	80064ac <_printf_i+0x1c8>
 80064b4:	8019      	strh	r1, [r3, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	4615      	mov	r5, r2
 80064bc:	e7ba      	b.n	8006434 <_printf_i+0x150>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	1d1a      	adds	r2, r3, #4
 80064c2:	602a      	str	r2, [r5, #0]
 80064c4:	681d      	ldr	r5, [r3, #0]
 80064c6:	6862      	ldr	r2, [r4, #4]
 80064c8:	2100      	movs	r1, #0
 80064ca:	4628      	mov	r0, r5
 80064cc:	f7f9 fe60 	bl	8000190 <memchr>
 80064d0:	b108      	cbz	r0, 80064d6 <_printf_i+0x1f2>
 80064d2:	1b40      	subs	r0, r0, r5
 80064d4:	6060      	str	r0, [r4, #4]
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	2300      	movs	r3, #0
 80064dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e0:	e7a8      	b.n	8006434 <_printf_i+0x150>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	462a      	mov	r2, r5
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	47d0      	blx	sl
 80064ec:	3001      	adds	r0, #1
 80064ee:	d0ab      	beq.n	8006448 <_printf_i+0x164>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	079b      	lsls	r3, r3, #30
 80064f4:	d413      	bmi.n	800651e <_printf_i+0x23a>
 80064f6:	68e0      	ldr	r0, [r4, #12]
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	4298      	cmp	r0, r3
 80064fc:	bfb8      	it	lt
 80064fe:	4618      	movlt	r0, r3
 8006500:	e7a4      	b.n	800644c <_printf_i+0x168>
 8006502:	2301      	movs	r3, #1
 8006504:	4632      	mov	r2, r6
 8006506:	4649      	mov	r1, r9
 8006508:	4640      	mov	r0, r8
 800650a:	47d0      	blx	sl
 800650c:	3001      	adds	r0, #1
 800650e:	d09b      	beq.n	8006448 <_printf_i+0x164>
 8006510:	3501      	adds	r5, #1
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	9903      	ldr	r1, [sp, #12]
 8006516:	1a5b      	subs	r3, r3, r1
 8006518:	42ab      	cmp	r3, r5
 800651a:	dcf2      	bgt.n	8006502 <_printf_i+0x21e>
 800651c:	e7eb      	b.n	80064f6 <_printf_i+0x212>
 800651e:	2500      	movs	r5, #0
 8006520:	f104 0619 	add.w	r6, r4, #25
 8006524:	e7f5      	b.n	8006512 <_printf_i+0x22e>
 8006526:	bf00      	nop
 8006528:	08006fdd 	.word	0x08006fdd
 800652c:	08006fee 	.word	0x08006fee

08006530 <_scanf_chars>:
 8006530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006534:	4615      	mov	r5, r2
 8006536:	688a      	ldr	r2, [r1, #8]
 8006538:	4680      	mov	r8, r0
 800653a:	460c      	mov	r4, r1
 800653c:	b932      	cbnz	r2, 800654c <_scanf_chars+0x1c>
 800653e:	698a      	ldr	r2, [r1, #24]
 8006540:	2a00      	cmp	r2, #0
 8006542:	bf0c      	ite	eq
 8006544:	2201      	moveq	r2, #1
 8006546:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800654a:	608a      	str	r2, [r1, #8]
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80065e0 <_scanf_chars+0xb0>
 8006552:	06d1      	lsls	r1, r2, #27
 8006554:	bf5f      	itttt	pl
 8006556:	681a      	ldrpl	r2, [r3, #0]
 8006558:	1d11      	addpl	r1, r2, #4
 800655a:	6019      	strpl	r1, [r3, #0]
 800655c:	6816      	ldrpl	r6, [r2, #0]
 800655e:	2700      	movs	r7, #0
 8006560:	69a0      	ldr	r0, [r4, #24]
 8006562:	b188      	cbz	r0, 8006588 <_scanf_chars+0x58>
 8006564:	2801      	cmp	r0, #1
 8006566:	d107      	bne.n	8006578 <_scanf_chars+0x48>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	781a      	ldrb	r2, [r3, #0]
 800656c:	6963      	ldr	r3, [r4, #20]
 800656e:	5c9b      	ldrb	r3, [r3, r2]
 8006570:	b953      	cbnz	r3, 8006588 <_scanf_chars+0x58>
 8006572:	2f00      	cmp	r7, #0
 8006574:	d031      	beq.n	80065da <_scanf_chars+0xaa>
 8006576:	e022      	b.n	80065be <_scanf_chars+0x8e>
 8006578:	2802      	cmp	r0, #2
 800657a:	d120      	bne.n	80065be <_scanf_chars+0x8e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006584:	071b      	lsls	r3, r3, #28
 8006586:	d41a      	bmi.n	80065be <_scanf_chars+0x8e>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	06da      	lsls	r2, r3, #27
 800658c:	bf5e      	ittt	pl
 800658e:	682b      	ldrpl	r3, [r5, #0]
 8006590:	781b      	ldrbpl	r3, [r3, #0]
 8006592:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006596:	682a      	ldr	r2, [r5, #0]
 8006598:	686b      	ldr	r3, [r5, #4]
 800659a:	3201      	adds	r2, #1
 800659c:	602a      	str	r2, [r5, #0]
 800659e:	68a2      	ldr	r2, [r4, #8]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	3a01      	subs	r2, #1
 80065a4:	606b      	str	r3, [r5, #4]
 80065a6:	3701      	adds	r7, #1
 80065a8:	60a2      	str	r2, [r4, #8]
 80065aa:	b142      	cbz	r2, 80065be <_scanf_chars+0x8e>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dcd7      	bgt.n	8006560 <_scanf_chars+0x30>
 80065b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065b4:	4629      	mov	r1, r5
 80065b6:	4640      	mov	r0, r8
 80065b8:	4798      	blx	r3
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d0d0      	beq.n	8006560 <_scanf_chars+0x30>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	f013 0310 	ands.w	r3, r3, #16
 80065c4:	d105      	bne.n	80065d2 <_scanf_chars+0xa2>
 80065c6:	68e2      	ldr	r2, [r4, #12]
 80065c8:	3201      	adds	r2, #1
 80065ca:	60e2      	str	r2, [r4, #12]
 80065cc:	69a2      	ldr	r2, [r4, #24]
 80065ce:	b102      	cbz	r2, 80065d2 <_scanf_chars+0xa2>
 80065d0:	7033      	strb	r3, [r6, #0]
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	443b      	add	r3, r7
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2000      	movs	r0, #0
 80065da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065de:	bf00      	nop
 80065e0:	0800701b 	.word	0x0800701b

080065e4 <_scanf_i>:
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	4698      	mov	r8, r3
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <_scanf_i+0x1e0>)
 80065ec:	460c      	mov	r4, r1
 80065ee:	4682      	mov	sl, r0
 80065f0:	4616      	mov	r6, r2
 80065f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065f6:	b087      	sub	sp, #28
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80065fe:	4b72      	ldr	r3, [pc, #456]	; (80067c8 <_scanf_i+0x1e4>)
 8006600:	69a1      	ldr	r1, [r4, #24]
 8006602:	4a72      	ldr	r2, [pc, #456]	; (80067cc <_scanf_i+0x1e8>)
 8006604:	2903      	cmp	r1, #3
 8006606:	bf18      	it	ne
 8006608:	461a      	movne	r2, r3
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006614:	bf88      	it	hi
 8006616:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800661a:	4627      	mov	r7, r4
 800661c:	bf82      	ittt	hi
 800661e:	eb03 0905 	addhi.w	r9, r3, r5
 8006622:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006626:	60a3      	strhi	r3, [r4, #8]
 8006628:	f857 3b1c 	ldr.w	r3, [r7], #28
 800662c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006630:	bf98      	it	ls
 8006632:	f04f 0900 	movls.w	r9, #0
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	463d      	mov	r5, r7
 800663a:	f04f 0b00 	mov.w	fp, #0
 800663e:	6831      	ldr	r1, [r6, #0]
 8006640:	ab03      	add	r3, sp, #12
 8006642:	7809      	ldrb	r1, [r1, #0]
 8006644:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006648:	2202      	movs	r2, #2
 800664a:	f7f9 fda1 	bl	8000190 <memchr>
 800664e:	b328      	cbz	r0, 800669c <_scanf_i+0xb8>
 8006650:	f1bb 0f01 	cmp.w	fp, #1
 8006654:	d159      	bne.n	800670a <_scanf_i+0x126>
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	b92a      	cbnz	r2, 8006666 <_scanf_i+0x82>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	2308      	movs	r3, #8
 800665e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	6022      	str	r2, [r4, #0]
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800666c:	6022      	str	r2, [r4, #0]
 800666e:	68a2      	ldr	r2, [r4, #8]
 8006670:	1e51      	subs	r1, r2, #1
 8006672:	60a1      	str	r1, [r4, #8]
 8006674:	b192      	cbz	r2, 800669c <_scanf_i+0xb8>
 8006676:	6832      	ldr	r2, [r6, #0]
 8006678:	1c51      	adds	r1, r2, #1
 800667a:	6031      	str	r1, [r6, #0]
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	f805 2b01 	strb.w	r2, [r5], #1
 8006682:	6872      	ldr	r2, [r6, #4]
 8006684:	3a01      	subs	r2, #1
 8006686:	2a00      	cmp	r2, #0
 8006688:	6072      	str	r2, [r6, #4]
 800668a:	dc07      	bgt.n	800669c <_scanf_i+0xb8>
 800668c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006690:	4631      	mov	r1, r6
 8006692:	4650      	mov	r0, sl
 8006694:	4790      	blx	r2
 8006696:	2800      	cmp	r0, #0
 8006698:	f040 8085 	bne.w	80067a6 <_scanf_i+0x1c2>
 800669c:	f10b 0b01 	add.w	fp, fp, #1
 80066a0:	f1bb 0f03 	cmp.w	fp, #3
 80066a4:	d1cb      	bne.n	800663e <_scanf_i+0x5a>
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	b90b      	cbnz	r3, 80066ae <_scanf_i+0xca>
 80066aa:	230a      	movs	r3, #10
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	4947      	ldr	r1, [pc, #284]	; (80067d0 <_scanf_i+0x1ec>)
 80066b2:	6960      	ldr	r0, [r4, #20]
 80066b4:	1ac9      	subs	r1, r1, r3
 80066b6:	f000 f88d 	bl	80067d4 <__sccl>
 80066ba:	f04f 0b00 	mov.w	fp, #0
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d03d      	beq.n	8006742 <_scanf_i+0x15e>
 80066c6:	6831      	ldr	r1, [r6, #0]
 80066c8:	6960      	ldr	r0, [r4, #20]
 80066ca:	f891 c000 	ldrb.w	ip, [r1]
 80066ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d035      	beq.n	8006742 <_scanf_i+0x15e>
 80066d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80066da:	d124      	bne.n	8006726 <_scanf_i+0x142>
 80066dc:	0510      	lsls	r0, r2, #20
 80066de:	d522      	bpl.n	8006726 <_scanf_i+0x142>
 80066e0:	f10b 0b01 	add.w	fp, fp, #1
 80066e4:	f1b9 0f00 	cmp.w	r9, #0
 80066e8:	d003      	beq.n	80066f2 <_scanf_i+0x10e>
 80066ea:	3301      	adds	r3, #1
 80066ec:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	6873      	ldr	r3, [r6, #4]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	6073      	str	r3, [r6, #4]
 80066fa:	dd1b      	ble.n	8006734 <_scanf_i+0x150>
 80066fc:	6833      	ldr	r3, [r6, #0]
 80066fe:	3301      	adds	r3, #1
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	3b01      	subs	r3, #1
 8006706:	60a3      	str	r3, [r4, #8]
 8006708:	e7d9      	b.n	80066be <_scanf_i+0xda>
 800670a:	f1bb 0f02 	cmp.w	fp, #2
 800670e:	d1ae      	bne.n	800666e <_scanf_i+0x8a>
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006716:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800671a:	d1bf      	bne.n	800669c <_scanf_i+0xb8>
 800671c:	2310      	movs	r3, #16
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006724:	e7a2      	b.n	800666c <_scanf_i+0x88>
 8006726:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800672a:	6022      	str	r2, [r4, #0]
 800672c:	780b      	ldrb	r3, [r1, #0]
 800672e:	f805 3b01 	strb.w	r3, [r5], #1
 8006732:	e7de      	b.n	80066f2 <_scanf_i+0x10e>
 8006734:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006738:	4631      	mov	r1, r6
 800673a:	4650      	mov	r0, sl
 800673c:	4798      	blx	r3
 800673e:	2800      	cmp	r0, #0
 8006740:	d0df      	beq.n	8006702 <_scanf_i+0x11e>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	05db      	lsls	r3, r3, #23
 8006746:	d50d      	bpl.n	8006764 <_scanf_i+0x180>
 8006748:	42bd      	cmp	r5, r7
 800674a:	d909      	bls.n	8006760 <_scanf_i+0x17c>
 800674c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006754:	4632      	mov	r2, r6
 8006756:	4650      	mov	r0, sl
 8006758:	4798      	blx	r3
 800675a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800675e:	464d      	mov	r5, r9
 8006760:	42bd      	cmp	r5, r7
 8006762:	d02d      	beq.n	80067c0 <_scanf_i+0x1dc>
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	f012 0210 	ands.w	r2, r2, #16
 800676a:	d113      	bne.n	8006794 <_scanf_i+0x1b0>
 800676c:	702a      	strb	r2, [r5, #0]
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	9e01      	ldr	r6, [sp, #4]
 8006772:	4639      	mov	r1, r7
 8006774:	4650      	mov	r0, sl
 8006776:	47b0      	blx	r6
 8006778:	6821      	ldr	r1, [r4, #0]
 800677a:	f8d8 3000 	ldr.w	r3, [r8]
 800677e:	f011 0f20 	tst.w	r1, #32
 8006782:	d013      	beq.n	80067ac <_scanf_i+0x1c8>
 8006784:	1d1a      	adds	r2, r3, #4
 8006786:	f8c8 2000 	str.w	r2, [r8]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6018      	str	r0, [r3, #0]
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60e3      	str	r3, [r4, #12]
 8006794:	1bed      	subs	r5, r5, r7
 8006796:	44ab      	add	fp, r5
 8006798:	6925      	ldr	r5, [r4, #16]
 800679a:	445d      	add	r5, fp
 800679c:	6125      	str	r5, [r4, #16]
 800679e:	2000      	movs	r0, #0
 80067a0:	b007      	add	sp, #28
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	f04f 0b00 	mov.w	fp, #0
 80067aa:	e7ca      	b.n	8006742 <_scanf_i+0x15e>
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	f8c8 2000 	str.w	r2, [r8]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f011 0f01 	tst.w	r1, #1
 80067b8:	bf14      	ite	ne
 80067ba:	8018      	strhne	r0, [r3, #0]
 80067bc:	6018      	streq	r0, [r3, #0]
 80067be:	e7e6      	b.n	800678e <_scanf_i+0x1aa>
 80067c0:	2001      	movs	r0, #1
 80067c2:	e7ed      	b.n	80067a0 <_scanf_i+0x1bc>
 80067c4:	08006ef8 	.word	0x08006ef8
 80067c8:	08006a25 	.word	0x08006a25
 80067cc:	0800693d 	.word	0x0800693d
 80067d0:	08007018 	.word	0x08007018

080067d4 <__sccl>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	780b      	ldrb	r3, [r1, #0]
 80067d8:	4604      	mov	r4, r0
 80067da:	2b5e      	cmp	r3, #94	; 0x5e
 80067dc:	bf0b      	itete	eq
 80067de:	784b      	ldrbeq	r3, [r1, #1]
 80067e0:	1c48      	addne	r0, r1, #1
 80067e2:	1c88      	addeq	r0, r1, #2
 80067e4:	2200      	movne	r2, #0
 80067e6:	bf08      	it	eq
 80067e8:	2201      	moveq	r2, #1
 80067ea:	1e61      	subs	r1, r4, #1
 80067ec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80067f0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80067f4:	42a9      	cmp	r1, r5
 80067f6:	d1fb      	bne.n	80067f0 <__sccl+0x1c>
 80067f8:	b90b      	cbnz	r3, 80067fe <__sccl+0x2a>
 80067fa:	3801      	subs	r0, #1
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
 80067fe:	f082 0201 	eor.w	r2, r2, #1
 8006802:	54e2      	strb	r2, [r4, r3]
 8006804:	4605      	mov	r5, r0
 8006806:	4628      	mov	r0, r5
 8006808:	f810 1b01 	ldrb.w	r1, [r0], #1
 800680c:	292d      	cmp	r1, #45	; 0x2d
 800680e:	d006      	beq.n	800681e <__sccl+0x4a>
 8006810:	295d      	cmp	r1, #93	; 0x5d
 8006812:	d0f3      	beq.n	80067fc <__sccl+0x28>
 8006814:	b909      	cbnz	r1, 800681a <__sccl+0x46>
 8006816:	4628      	mov	r0, r5
 8006818:	e7f0      	b.n	80067fc <__sccl+0x28>
 800681a:	460b      	mov	r3, r1
 800681c:	e7f1      	b.n	8006802 <__sccl+0x2e>
 800681e:	786e      	ldrb	r6, [r5, #1]
 8006820:	2e5d      	cmp	r6, #93	; 0x5d
 8006822:	d0fa      	beq.n	800681a <__sccl+0x46>
 8006824:	42b3      	cmp	r3, r6
 8006826:	dcf8      	bgt.n	800681a <__sccl+0x46>
 8006828:	3502      	adds	r5, #2
 800682a:	4619      	mov	r1, r3
 800682c:	3101      	adds	r1, #1
 800682e:	428e      	cmp	r6, r1
 8006830:	5462      	strb	r2, [r4, r1]
 8006832:	dcfb      	bgt.n	800682c <__sccl+0x58>
 8006834:	1af1      	subs	r1, r6, r3
 8006836:	3901      	subs	r1, #1
 8006838:	1c58      	adds	r0, r3, #1
 800683a:	42b3      	cmp	r3, r6
 800683c:	bfa8      	it	ge
 800683e:	2100      	movge	r1, #0
 8006840:	1843      	adds	r3, r0, r1
 8006842:	e7e0      	b.n	8006806 <__sccl+0x32>

08006844 <_strtol_l.constprop.0>:
 8006844:	2b01      	cmp	r3, #1
 8006846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684a:	4680      	mov	r8, r0
 800684c:	d001      	beq.n	8006852 <_strtol_l.constprop.0+0xe>
 800684e:	2b24      	cmp	r3, #36	; 0x24
 8006850:	d906      	bls.n	8006860 <_strtol_l.constprop.0+0x1c>
 8006852:	f7ff f8f7 	bl	8005a44 <__errno>
 8006856:	2316      	movs	r3, #22
 8006858:	6003      	str	r3, [r0, #0]
 800685a:	2000      	movs	r0, #0
 800685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006860:	4f35      	ldr	r7, [pc, #212]	; (8006938 <_strtol_l.constprop.0+0xf4>)
 8006862:	460d      	mov	r5, r1
 8006864:	4628      	mov	r0, r5
 8006866:	f815 4b01 	ldrb.w	r4, [r5], #1
 800686a:	5de6      	ldrb	r6, [r4, r7]
 800686c:	f016 0608 	ands.w	r6, r6, #8
 8006870:	d1f8      	bne.n	8006864 <_strtol_l.constprop.0+0x20>
 8006872:	2c2d      	cmp	r4, #45	; 0x2d
 8006874:	d12f      	bne.n	80068d6 <_strtol_l.constprop.0+0x92>
 8006876:	782c      	ldrb	r4, [r5, #0]
 8006878:	2601      	movs	r6, #1
 800687a:	1c85      	adds	r5, r0, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d057      	beq.n	8006930 <_strtol_l.constprop.0+0xec>
 8006880:	2b10      	cmp	r3, #16
 8006882:	d109      	bne.n	8006898 <_strtol_l.constprop.0+0x54>
 8006884:	2c30      	cmp	r4, #48	; 0x30
 8006886:	d107      	bne.n	8006898 <_strtol_l.constprop.0+0x54>
 8006888:	7828      	ldrb	r0, [r5, #0]
 800688a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800688e:	2858      	cmp	r0, #88	; 0x58
 8006890:	d149      	bne.n	8006926 <_strtol_l.constprop.0+0xe2>
 8006892:	786c      	ldrb	r4, [r5, #1]
 8006894:	2310      	movs	r3, #16
 8006896:	3502      	adds	r5, #2
 8006898:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800689c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80068a0:	2700      	movs	r7, #0
 80068a2:	fbbe f9f3 	udiv	r9, lr, r3
 80068a6:	4638      	mov	r0, r7
 80068a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80068ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80068b0:	f1bc 0f09 	cmp.w	ip, #9
 80068b4:	d814      	bhi.n	80068e0 <_strtol_l.constprop.0+0x9c>
 80068b6:	4664      	mov	r4, ip
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	dd22      	ble.n	8006902 <_strtol_l.constprop.0+0xbe>
 80068bc:	2f00      	cmp	r7, #0
 80068be:	db1d      	blt.n	80068fc <_strtol_l.constprop.0+0xb8>
 80068c0:	4581      	cmp	r9, r0
 80068c2:	d31b      	bcc.n	80068fc <_strtol_l.constprop.0+0xb8>
 80068c4:	d101      	bne.n	80068ca <_strtol_l.constprop.0+0x86>
 80068c6:	45a2      	cmp	sl, r4
 80068c8:	db18      	blt.n	80068fc <_strtol_l.constprop.0+0xb8>
 80068ca:	fb00 4003 	mla	r0, r0, r3, r4
 80068ce:	2701      	movs	r7, #1
 80068d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068d4:	e7ea      	b.n	80068ac <_strtol_l.constprop.0+0x68>
 80068d6:	2c2b      	cmp	r4, #43	; 0x2b
 80068d8:	bf04      	itt	eq
 80068da:	782c      	ldrbeq	r4, [r5, #0]
 80068dc:	1c85      	addeq	r5, r0, #2
 80068de:	e7cd      	b.n	800687c <_strtol_l.constprop.0+0x38>
 80068e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80068e4:	f1bc 0f19 	cmp.w	ip, #25
 80068e8:	d801      	bhi.n	80068ee <_strtol_l.constprop.0+0xaa>
 80068ea:	3c37      	subs	r4, #55	; 0x37
 80068ec:	e7e4      	b.n	80068b8 <_strtol_l.constprop.0+0x74>
 80068ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80068f2:	f1bc 0f19 	cmp.w	ip, #25
 80068f6:	d804      	bhi.n	8006902 <_strtol_l.constprop.0+0xbe>
 80068f8:	3c57      	subs	r4, #87	; 0x57
 80068fa:	e7dd      	b.n	80068b8 <_strtol_l.constprop.0+0x74>
 80068fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006900:	e7e6      	b.n	80068d0 <_strtol_l.constprop.0+0x8c>
 8006902:	2f00      	cmp	r7, #0
 8006904:	da07      	bge.n	8006916 <_strtol_l.constprop.0+0xd2>
 8006906:	2322      	movs	r3, #34	; 0x22
 8006908:	f8c8 3000 	str.w	r3, [r8]
 800690c:	4670      	mov	r0, lr
 800690e:	2a00      	cmp	r2, #0
 8006910:	d0a4      	beq.n	800685c <_strtol_l.constprop.0+0x18>
 8006912:	1e69      	subs	r1, r5, #1
 8006914:	e005      	b.n	8006922 <_strtol_l.constprop.0+0xde>
 8006916:	b106      	cbz	r6, 800691a <_strtol_l.constprop.0+0xd6>
 8006918:	4240      	negs	r0, r0
 800691a:	2a00      	cmp	r2, #0
 800691c:	d09e      	beq.n	800685c <_strtol_l.constprop.0+0x18>
 800691e:	2f00      	cmp	r7, #0
 8006920:	d1f7      	bne.n	8006912 <_strtol_l.constprop.0+0xce>
 8006922:	6011      	str	r1, [r2, #0]
 8006924:	e79a      	b.n	800685c <_strtol_l.constprop.0+0x18>
 8006926:	2430      	movs	r4, #48	; 0x30
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1b5      	bne.n	8006898 <_strtol_l.constprop.0+0x54>
 800692c:	2308      	movs	r3, #8
 800692e:	e7b3      	b.n	8006898 <_strtol_l.constprop.0+0x54>
 8006930:	2c30      	cmp	r4, #48	; 0x30
 8006932:	d0a9      	beq.n	8006888 <_strtol_l.constprop.0+0x44>
 8006934:	230a      	movs	r3, #10
 8006936:	e7af      	b.n	8006898 <_strtol_l.constprop.0+0x54>
 8006938:	0800701b 	.word	0x0800701b

0800693c <_strtol_r>:
 800693c:	f7ff bf82 	b.w	8006844 <_strtol_l.constprop.0>

08006940 <_strtoul_l.constprop.0>:
 8006940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006944:	4f36      	ldr	r7, [pc, #216]	; (8006a20 <_strtoul_l.constprop.0+0xe0>)
 8006946:	4686      	mov	lr, r0
 8006948:	460d      	mov	r5, r1
 800694a:	4628      	mov	r0, r5
 800694c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006950:	5de6      	ldrb	r6, [r4, r7]
 8006952:	f016 0608 	ands.w	r6, r6, #8
 8006956:	d1f8      	bne.n	800694a <_strtoul_l.constprop.0+0xa>
 8006958:	2c2d      	cmp	r4, #45	; 0x2d
 800695a:	d12f      	bne.n	80069bc <_strtoul_l.constprop.0+0x7c>
 800695c:	782c      	ldrb	r4, [r5, #0]
 800695e:	2601      	movs	r6, #1
 8006960:	1c85      	adds	r5, r0, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d057      	beq.n	8006a16 <_strtoul_l.constprop.0+0xd6>
 8006966:	2b10      	cmp	r3, #16
 8006968:	d109      	bne.n	800697e <_strtoul_l.constprop.0+0x3e>
 800696a:	2c30      	cmp	r4, #48	; 0x30
 800696c:	d107      	bne.n	800697e <_strtoul_l.constprop.0+0x3e>
 800696e:	7828      	ldrb	r0, [r5, #0]
 8006970:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006974:	2858      	cmp	r0, #88	; 0x58
 8006976:	d149      	bne.n	8006a0c <_strtoul_l.constprop.0+0xcc>
 8006978:	786c      	ldrb	r4, [r5, #1]
 800697a:	2310      	movs	r3, #16
 800697c:	3502      	adds	r5, #2
 800697e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006982:	2700      	movs	r7, #0
 8006984:	fbb8 f8f3 	udiv	r8, r8, r3
 8006988:	fb03 f908 	mul.w	r9, r3, r8
 800698c:	ea6f 0909 	mvn.w	r9, r9
 8006990:	4638      	mov	r0, r7
 8006992:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006996:	f1bc 0f09 	cmp.w	ip, #9
 800699a:	d814      	bhi.n	80069c6 <_strtoul_l.constprop.0+0x86>
 800699c:	4664      	mov	r4, ip
 800699e:	42a3      	cmp	r3, r4
 80069a0:	dd22      	ble.n	80069e8 <_strtoul_l.constprop.0+0xa8>
 80069a2:	2f00      	cmp	r7, #0
 80069a4:	db1d      	blt.n	80069e2 <_strtoul_l.constprop.0+0xa2>
 80069a6:	4580      	cmp	r8, r0
 80069a8:	d31b      	bcc.n	80069e2 <_strtoul_l.constprop.0+0xa2>
 80069aa:	d101      	bne.n	80069b0 <_strtoul_l.constprop.0+0x70>
 80069ac:	45a1      	cmp	r9, r4
 80069ae:	db18      	blt.n	80069e2 <_strtoul_l.constprop.0+0xa2>
 80069b0:	fb00 4003 	mla	r0, r0, r3, r4
 80069b4:	2701      	movs	r7, #1
 80069b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069ba:	e7ea      	b.n	8006992 <_strtoul_l.constprop.0+0x52>
 80069bc:	2c2b      	cmp	r4, #43	; 0x2b
 80069be:	bf04      	itt	eq
 80069c0:	782c      	ldrbeq	r4, [r5, #0]
 80069c2:	1c85      	addeq	r5, r0, #2
 80069c4:	e7cd      	b.n	8006962 <_strtoul_l.constprop.0+0x22>
 80069c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80069ca:	f1bc 0f19 	cmp.w	ip, #25
 80069ce:	d801      	bhi.n	80069d4 <_strtoul_l.constprop.0+0x94>
 80069d0:	3c37      	subs	r4, #55	; 0x37
 80069d2:	e7e4      	b.n	800699e <_strtoul_l.constprop.0+0x5e>
 80069d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80069d8:	f1bc 0f19 	cmp.w	ip, #25
 80069dc:	d804      	bhi.n	80069e8 <_strtoul_l.constprop.0+0xa8>
 80069de:	3c57      	subs	r4, #87	; 0x57
 80069e0:	e7dd      	b.n	800699e <_strtoul_l.constprop.0+0x5e>
 80069e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069e6:	e7e6      	b.n	80069b6 <_strtoul_l.constprop.0+0x76>
 80069e8:	2f00      	cmp	r7, #0
 80069ea:	da07      	bge.n	80069fc <_strtoul_l.constprop.0+0xbc>
 80069ec:	2322      	movs	r3, #34	; 0x22
 80069ee:	f8ce 3000 	str.w	r3, [lr]
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069f6:	b932      	cbnz	r2, 8006a06 <_strtoul_l.constprop.0+0xc6>
 80069f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069fc:	b106      	cbz	r6, 8006a00 <_strtoul_l.constprop.0+0xc0>
 80069fe:	4240      	negs	r0, r0
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d0f9      	beq.n	80069f8 <_strtoul_l.constprop.0+0xb8>
 8006a04:	b107      	cbz	r7, 8006a08 <_strtoul_l.constprop.0+0xc8>
 8006a06:	1e69      	subs	r1, r5, #1
 8006a08:	6011      	str	r1, [r2, #0]
 8006a0a:	e7f5      	b.n	80069f8 <_strtoul_l.constprop.0+0xb8>
 8006a0c:	2430      	movs	r4, #48	; 0x30
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1b5      	bne.n	800697e <_strtoul_l.constprop.0+0x3e>
 8006a12:	2308      	movs	r3, #8
 8006a14:	e7b3      	b.n	800697e <_strtoul_l.constprop.0+0x3e>
 8006a16:	2c30      	cmp	r4, #48	; 0x30
 8006a18:	d0a9      	beq.n	800696e <_strtoul_l.constprop.0+0x2e>
 8006a1a:	230a      	movs	r3, #10
 8006a1c:	e7af      	b.n	800697e <_strtoul_l.constprop.0+0x3e>
 8006a1e:	bf00      	nop
 8006a20:	0800701b 	.word	0x0800701b

08006a24 <_strtoul_r>:
 8006a24:	f7ff bf8c 	b.w	8006940 <_strtoul_l.constprop.0>

08006a28 <__submore>:
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d11d      	bne.n	8006a74 <__submore+0x4c>
 8006a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a3c:	f000 f8b4 	bl	8006ba8 <_malloc_r>
 8006a40:	b918      	cbnz	r0, 8006a4a <__submore+0x22>
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006a54:	6360      	str	r0, [r4, #52]	; 0x34
 8006a56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006a5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006a5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006a62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006a66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006a6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006a6e:	6020      	str	r0, [r4, #0]
 8006a70:	2000      	movs	r0, #0
 8006a72:	e7e8      	b.n	8006a46 <__submore+0x1e>
 8006a74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006a76:	0077      	lsls	r7, r6, #1
 8006a78:	463a      	mov	r2, r7
 8006a7a:	f000 f909 	bl	8006c90 <_realloc_r>
 8006a7e:	4605      	mov	r5, r0
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d0de      	beq.n	8006a42 <__submore+0x1a>
 8006a84:	eb00 0806 	add.w	r8, r0, r6
 8006a88:	4601      	mov	r1, r0
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	f7ff f803 	bl	8005a98 <memcpy>
 8006a92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006a96:	f8c4 8000 	str.w	r8, [r4]
 8006a9a:	e7e9      	b.n	8006a70 <__submore+0x48>

08006a9c <__retarget_lock_acquire_recursive>:
 8006a9c:	4770      	bx	lr

08006a9e <__retarget_lock_release_recursive>:
 8006a9e:	4770      	bx	lr

08006aa0 <memmove>:
 8006aa0:	4288      	cmp	r0, r1
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	eb01 0402 	add.w	r4, r1, r2
 8006aa8:	d902      	bls.n	8006ab0 <memmove+0x10>
 8006aaa:	4284      	cmp	r4, r0
 8006aac:	4623      	mov	r3, r4
 8006aae:	d807      	bhi.n	8006ac0 <memmove+0x20>
 8006ab0:	1e43      	subs	r3, r0, #1
 8006ab2:	42a1      	cmp	r1, r4
 8006ab4:	d008      	beq.n	8006ac8 <memmove+0x28>
 8006ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006abe:	e7f8      	b.n	8006ab2 <memmove+0x12>
 8006ac0:	4402      	add	r2, r0
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	428a      	cmp	r2, r1
 8006ac6:	d100      	bne.n	8006aca <memmove+0x2a>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ad2:	e7f7      	b.n	8006ac4 <memmove+0x24>

08006ad4 <_free_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d041      	beq.n	8006b60 <_free_r+0x8c>
 8006adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae0:	1f0c      	subs	r4, r1, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bfb8      	it	lt
 8006ae6:	18e4      	addlt	r4, r4, r3
 8006ae8:	f000 f912 	bl	8006d10 <__malloc_lock>
 8006aec:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <_free_r+0x90>)
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	b933      	cbnz	r3, 8006b00 <_free_r+0x2c>
 8006af2:	6063      	str	r3, [r4, #4]
 8006af4:	6014      	str	r4, [r2, #0]
 8006af6:	4628      	mov	r0, r5
 8006af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006afc:	f000 b90e 	b.w	8006d1c <__malloc_unlock>
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d908      	bls.n	8006b16 <_free_r+0x42>
 8006b04:	6820      	ldr	r0, [r4, #0]
 8006b06:	1821      	adds	r1, r4, r0
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	bf01      	itttt	eq
 8006b0c:	6819      	ldreq	r1, [r3, #0]
 8006b0e:	685b      	ldreq	r3, [r3, #4]
 8006b10:	1809      	addeq	r1, r1, r0
 8006b12:	6021      	streq	r1, [r4, #0]
 8006b14:	e7ed      	b.n	8006af2 <_free_r+0x1e>
 8006b16:	461a      	mov	r2, r3
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	b10b      	cbz	r3, 8006b20 <_free_r+0x4c>
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d9fa      	bls.n	8006b16 <_free_r+0x42>
 8006b20:	6811      	ldr	r1, [r2, #0]
 8006b22:	1850      	adds	r0, r2, r1
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d10b      	bne.n	8006b40 <_free_r+0x6c>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	4401      	add	r1, r0
 8006b2c:	1850      	adds	r0, r2, r1
 8006b2e:	4283      	cmp	r3, r0
 8006b30:	6011      	str	r1, [r2, #0]
 8006b32:	d1e0      	bne.n	8006af6 <_free_r+0x22>
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	6053      	str	r3, [r2, #4]
 8006b3a:	4401      	add	r1, r0
 8006b3c:	6011      	str	r1, [r2, #0]
 8006b3e:	e7da      	b.n	8006af6 <_free_r+0x22>
 8006b40:	d902      	bls.n	8006b48 <_free_r+0x74>
 8006b42:	230c      	movs	r3, #12
 8006b44:	602b      	str	r3, [r5, #0]
 8006b46:	e7d6      	b.n	8006af6 <_free_r+0x22>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	1821      	adds	r1, r4, r0
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	bf04      	itt	eq
 8006b50:	6819      	ldreq	r1, [r3, #0]
 8006b52:	685b      	ldreq	r3, [r3, #4]
 8006b54:	6063      	str	r3, [r4, #4]
 8006b56:	bf04      	itt	eq
 8006b58:	1809      	addeq	r1, r1, r0
 8006b5a:	6021      	streq	r1, [r4, #0]
 8006b5c:	6054      	str	r4, [r2, #4]
 8006b5e:	e7ca      	b.n	8006af6 <_free_r+0x22>
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	20001e58 	.word	0x20001e58

08006b68 <sbrk_aligned>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ba4 <sbrk_aligned+0x3c>)
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	6831      	ldr	r1, [r6, #0]
 8006b70:	4605      	mov	r5, r0
 8006b72:	b911      	cbnz	r1, 8006b7a <sbrk_aligned+0x12>
 8006b74:	f000 f8bc 	bl	8006cf0 <_sbrk_r>
 8006b78:	6030      	str	r0, [r6, #0]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f8b7 	bl	8006cf0 <_sbrk_r>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d00a      	beq.n	8006b9c <sbrk_aligned+0x34>
 8006b86:	1cc4      	adds	r4, r0, #3
 8006b88:	f024 0403 	bic.w	r4, r4, #3
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d007      	beq.n	8006ba0 <sbrk_aligned+0x38>
 8006b90:	1a21      	subs	r1, r4, r0
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f8ac 	bl	8006cf0 <_sbrk_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d101      	bne.n	8006ba0 <sbrk_aligned+0x38>
 8006b9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	20001e5c 	.word	0x20001e5c

08006ba8 <_malloc_r>:
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	1ccd      	adds	r5, r1, #3
 8006bae:	f025 0503 	bic.w	r5, r5, #3
 8006bb2:	3508      	adds	r5, #8
 8006bb4:	2d0c      	cmp	r5, #12
 8006bb6:	bf38      	it	cc
 8006bb8:	250c      	movcc	r5, #12
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	db01      	blt.n	8006bc4 <_malloc_r+0x1c>
 8006bc0:	42a9      	cmp	r1, r5
 8006bc2:	d905      	bls.n	8006bd0 <_malloc_r+0x28>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	2600      	movs	r6, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd0:	4e2e      	ldr	r6, [pc, #184]	; (8006c8c <_malloc_r+0xe4>)
 8006bd2:	f000 f89d 	bl	8006d10 <__malloc_lock>
 8006bd6:	6833      	ldr	r3, [r6, #0]
 8006bd8:	461c      	mov	r4, r3
 8006bda:	bb34      	cbnz	r4, 8006c2a <_malloc_r+0x82>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4638      	mov	r0, r7
 8006be0:	f7ff ffc2 	bl	8006b68 <sbrk_aligned>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	4604      	mov	r4, r0
 8006be8:	d14d      	bne.n	8006c86 <_malloc_r+0xde>
 8006bea:	6834      	ldr	r4, [r6, #0]
 8006bec:	4626      	mov	r6, r4
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d140      	bne.n	8006c74 <_malloc_r+0xcc>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	eb04 0803 	add.w	r8, r4, r3
 8006bfc:	f000 f878 	bl	8006cf0 <_sbrk_r>
 8006c00:	4580      	cmp	r8, r0
 8006c02:	d13a      	bne.n	8006c7a <_malloc_r+0xd2>
 8006c04:	6821      	ldr	r1, [r4, #0]
 8006c06:	3503      	adds	r5, #3
 8006c08:	1a6d      	subs	r5, r5, r1
 8006c0a:	f025 0503 	bic.w	r5, r5, #3
 8006c0e:	3508      	adds	r5, #8
 8006c10:	2d0c      	cmp	r5, #12
 8006c12:	bf38      	it	cc
 8006c14:	250c      	movcc	r5, #12
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ffa5 	bl	8006b68 <sbrk_aligned>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d02b      	beq.n	8006c7a <_malloc_r+0xd2>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	442b      	add	r3, r5
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	e00e      	b.n	8006c48 <_malloc_r+0xa0>
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	1b52      	subs	r2, r2, r5
 8006c2e:	d41e      	bmi.n	8006c6e <_malloc_r+0xc6>
 8006c30:	2a0b      	cmp	r2, #11
 8006c32:	d916      	bls.n	8006c62 <_malloc_r+0xba>
 8006c34:	1961      	adds	r1, r4, r5
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	6025      	str	r5, [r4, #0]
 8006c3a:	bf18      	it	ne
 8006c3c:	6059      	strne	r1, [r3, #4]
 8006c3e:	6863      	ldr	r3, [r4, #4]
 8006c40:	bf08      	it	eq
 8006c42:	6031      	streq	r1, [r6, #0]
 8006c44:	5162      	str	r2, [r4, r5]
 8006c46:	604b      	str	r3, [r1, #4]
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f104 060b 	add.w	r6, r4, #11
 8006c4e:	f000 f865 	bl	8006d1c <__malloc_unlock>
 8006c52:	f026 0607 	bic.w	r6, r6, #7
 8006c56:	1d23      	adds	r3, r4, #4
 8006c58:	1af2      	subs	r2, r6, r3
 8006c5a:	d0b6      	beq.n	8006bca <_malloc_r+0x22>
 8006c5c:	1b9b      	subs	r3, r3, r6
 8006c5e:	50a3      	str	r3, [r4, r2]
 8006c60:	e7b3      	b.n	8006bca <_malloc_r+0x22>
 8006c62:	6862      	ldr	r2, [r4, #4]
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	bf0c      	ite	eq
 8006c68:	6032      	streq	r2, [r6, #0]
 8006c6a:	605a      	strne	r2, [r3, #4]
 8006c6c:	e7ec      	b.n	8006c48 <_malloc_r+0xa0>
 8006c6e:	4623      	mov	r3, r4
 8006c70:	6864      	ldr	r4, [r4, #4]
 8006c72:	e7b2      	b.n	8006bda <_malloc_r+0x32>
 8006c74:	4634      	mov	r4, r6
 8006c76:	6876      	ldr	r6, [r6, #4]
 8006c78:	e7b9      	b.n	8006bee <_malloc_r+0x46>
 8006c7a:	230c      	movs	r3, #12
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f000 f84c 	bl	8006d1c <__malloc_unlock>
 8006c84:	e7a1      	b.n	8006bca <_malloc_r+0x22>
 8006c86:	6025      	str	r5, [r4, #0]
 8006c88:	e7de      	b.n	8006c48 <_malloc_r+0xa0>
 8006c8a:	bf00      	nop
 8006c8c:	20001e58 	.word	0x20001e58

08006c90 <_realloc_r>:
 8006c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c94:	4680      	mov	r8, r0
 8006c96:	4614      	mov	r4, r2
 8006c98:	460e      	mov	r6, r1
 8006c9a:	b921      	cbnz	r1, 8006ca6 <_realloc_r+0x16>
 8006c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	f7ff bf81 	b.w	8006ba8 <_malloc_r>
 8006ca6:	b92a      	cbnz	r2, 8006cb4 <_realloc_r+0x24>
 8006ca8:	f7ff ff14 	bl	8006ad4 <_free_r>
 8006cac:	4625      	mov	r5, r4
 8006cae:	4628      	mov	r0, r5
 8006cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb4:	f000 f838 	bl	8006d28 <_malloc_usable_size_r>
 8006cb8:	4284      	cmp	r4, r0
 8006cba:	4607      	mov	r7, r0
 8006cbc:	d802      	bhi.n	8006cc4 <_realloc_r+0x34>
 8006cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cc2:	d812      	bhi.n	8006cea <_realloc_r+0x5a>
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	f7ff ff6e 	bl	8006ba8 <_malloc_r>
 8006ccc:	4605      	mov	r5, r0
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d0ed      	beq.n	8006cae <_realloc_r+0x1e>
 8006cd2:	42bc      	cmp	r4, r7
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	bf28      	it	cs
 8006cda:	463a      	movcs	r2, r7
 8006cdc:	f7fe fedc 	bl	8005a98 <memcpy>
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	f7ff fef6 	bl	8006ad4 <_free_r>
 8006ce8:	e7e1      	b.n	8006cae <_realloc_r+0x1e>
 8006cea:	4635      	mov	r5, r6
 8006cec:	e7df      	b.n	8006cae <_realloc_r+0x1e>
	...

08006cf0 <_sbrk_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	; (8006d0c <_sbrk_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7f9 ff8a 	bl	8000c14 <_sbrk>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_sbrk_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_sbrk_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20001e50 	.word	0x20001e50

08006d10 <__malloc_lock>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__malloc_lock+0x8>)
 8006d12:	f7ff bec3 	b.w	8006a9c <__retarget_lock_acquire_recursive>
 8006d16:	bf00      	nop
 8006d18:	20001e54 	.word	0x20001e54

08006d1c <__malloc_unlock>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__malloc_unlock+0x8>)
 8006d1e:	f7ff bebe 	b.w	8006a9e <__retarget_lock_release_recursive>
 8006d22:	bf00      	nop
 8006d24:	20001e54 	.word	0x20001e54

08006d28 <_malloc_usable_size_r>:
 8006d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d2c:	1f18      	subs	r0, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfbc      	itt	lt
 8006d32:	580b      	ldrlt	r3, [r1, r0]
 8006d34:	18c0      	addlt	r0, r0, r3
 8006d36:	4770      	bx	lr

08006d38 <_init>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	bf00      	nop
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr

08006d44 <_fini>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

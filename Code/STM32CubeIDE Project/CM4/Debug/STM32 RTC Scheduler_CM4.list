
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f40  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e8  080071e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f0  080071f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080071f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000074  0800726c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800726c  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b17  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e7  00000000  00000000  00035bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00038ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e160  00000000  00000000  0003b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b26  00000000  00000000  00059598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89d6  00000000  00000000  0006e0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  00126ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08007068 	.word	0x08007068

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08007068 	.word	0x08007068

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 ff56 	bl	80013f0 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000188 	.word	0x20000188

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 ff4c 	bl	800140c <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f000 fffd 	bl	80015a0 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS], unsigned int numEvents) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005ba:	22f0      	movs	r2, #240	; 0xf0
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <calendar_setEvents+0x24>)
 80005c0:	f006 f8ca 	bl	8006758 <memcpy>
	_numberEvents = numEvents;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <calendar_setEvents+0x28>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000090 	.word	0x20000090
 80005d8:	20000180 	.word	0x20000180

080005dc <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005e2:	1cfa      	adds	r2, r7, #3
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f976 	bl	80008dc <getNextAlarm>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d024      	beq.n	8000640 <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005f6:	7ab8      	ldrb	r0, [r7, #10]
 80005f8:	7af9      	ldrb	r1, [r7, #11]
 80005fa:	7b3a      	ldrb	r2, [r7, #12]
 80005fc:	7b7b      	ldrb	r3, [r7, #13]
 80005fe:	f001 f863 	bl	80016c8 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d017      	beq.n	8000638 <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].start_callback != NULL)
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4910      	ldr	r1, [pc, #64]	; (800064c <calendar_start+0x70>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	440b      	add	r3, r1
 8000616:	3308      	adds	r3, #8
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d009      	beq.n	8000632 <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].start_callback)();
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	490a      	ldr	r1, [pc, #40]	; (800064c <calendar_start+0x70>)
 8000622:	4613      	mov	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4413      	add	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	440b      	add	r3, r1
 800062c:	3308      	adds	r3, #8
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <calendar_start+0x74>)
 8000636:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <calendar_start+0x78>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 800063e:	e001      	b.n	8000644 <calendar_start+0x68>
		diableAlarm_A();
 8000640:	f001 f8de 	bl	8001800 <diableAlarm_A>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000090 	.word	0x20000090
 8000650:	20000004 	.word	0x20000004
 8000654:	20000184 	.word	0x20000184

08000658 <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 800065e:	4b6b      	ldr	r3, [pc, #428]	; (800080c <calendar_handleAlarm+0x1b4>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	f000 80cd 	beq.w	8000804 <calendar_handleAlarm+0x1ac>
		// send message for debugging
		char messageBody[UART_MESSAGE_BODY_SIZE] = "\nALARM EVENT!\n\n\0";
 800066a:	4b69      	ldr	r3, [pc, #420]	; (8000810 <calendar_handleAlarm+0x1b8>)
 800066c:	1d3c      	adds	r4, r7, #4
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	7023      	strb	r3, [r4, #0]
 8000678:	f107 0315 	add.w	r3, r7, #21
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	f8c3 2007 	str.w	r2, [r3, #7]
		uartBasic_TX_Poll("\0\0\0\0", messageBody);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4862      	ldr	r0, [pc, #392]	; (8000814 <calendar_handleAlarm+0x1bc>)
 800068c:	f001 fa20 	bl	8001ad0 <uartBasic_TX_Poll>

		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 8000690:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000694:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f91d 	bl	80008dc <getNextAlarm>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 808c 	beq.w	80007c2 <calendar_handleAlarm+0x16a>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80006aa:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 80006ae:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80006b2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80006b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80006ba:	f001 f805 	bl	80016c8 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 80006be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d01d      	beq.n	8000702 <calendar_handleAlarm+0xaa>
 80006c6:	4b54      	ldr	r3, [pc, #336]	; (8000818 <calendar_handleAlarm+0x1c0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006ce:	d118      	bne.n	8000702 <calendar_handleAlarm+0xaa>

				// call start event callback
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80006d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d2:	4952      	ldr	r1, [pc, #328]	; (800081c <calendar_handleAlarm+0x1c4>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	440b      	add	r3, r1
 80006de:	3308      	adds	r3, #8
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d009      	beq.n	80006fa <calendar_handleAlarm+0xa2>
					(*_calendarEvents[currentEventIdx].start_callback)();
 80006e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e8:	494c      	ldr	r1, [pc, #304]	; (800081c <calendar_handleAlarm+0x1c4>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	440b      	add	r3, r1
 80006f4:	3308      	adds	r3, #8
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	4a46      	ldr	r2, [pc, #280]	; (8000818 <calendar_handleAlarm+0x1c0>)
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	e07d      	b.n	80007fe <calendar_handleAlarm+0x1a6>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 8000702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000706:	2b00      	cmp	r3, #0
 8000708:	d034      	beq.n	8000774 <calendar_handleAlarm+0x11c>
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <calendar_handleAlarm+0x1c0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000712:	d02f      	beq.n	8000774 <calendar_handleAlarm+0x11c>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 8000714:	4b40      	ldr	r3, [pc, #256]	; (8000818 <calendar_handleAlarm+0x1c0>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4940      	ldr	r1, [pc, #256]	; (800081c <calendar_handleAlarm+0x1c4>)
 800071a:	4613      	mov	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4413      	add	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	440b      	add	r3, r1
 8000724:	3314      	adds	r3, #20
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00a      	beq.n	8000742 <calendar_handleAlarm+0xea>
					(*_calendarEvents[_currentEvent].end_callback)();
 800072c:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <calendar_handleAlarm+0x1c0>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	493a      	ldr	r1, [pc, #232]	; (800081c <calendar_handleAlarm+0x1c4>)
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	440b      	add	r3, r1
 800073c:	3314      	adds	r3, #20
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 8000742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000744:	4935      	ldr	r1, [pc, #212]	; (800081c <calendar_handleAlarm+0x1c4>)
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	440b      	add	r3, r1
 8000750:	3308      	adds	r3, #8
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d009      	beq.n	800076c <calendar_handleAlarm+0x114>
					(*_calendarEvents[currentEventIdx].start_callback)();
 8000758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075a:	4930      	ldr	r1, [pc, #192]	; (800081c <calendar_handleAlarm+0x1c4>)
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	440b      	add	r3, r1
 8000766:	3308      	adds	r3, #8
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <calendar_handleAlarm+0x1c0>)
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	e044      	b.n	80007fe <calendar_handleAlarm+0x1a6>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 8000774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d03d      	beq.n	80007fe <calendar_handleAlarm+0x1a6>
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <calendar_handleAlarm+0x1c0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800078a:	d038      	beq.n	80007fe <calendar_handleAlarm+0x1a6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <calendar_handleAlarm+0x1c0>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4922      	ldr	r1, [pc, #136]	; (800081c <calendar_handleAlarm+0x1c4>)
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	440b      	add	r3, r1
 800079c:	3314      	adds	r3, #20
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00a      	beq.n	80007ba <calendar_handleAlarm+0x162>
					(*_calendarEvents[_currentEvent].end_callback)();
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <calendar_handleAlarm+0x1c0>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	491c      	ldr	r1, [pc, #112]	; (800081c <calendar_handleAlarm+0x1c4>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	4a16      	ldr	r2, [pc, #88]	; (8000818 <calendar_handleAlarm+0x1c0>)
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e01d      	b.n	80007fe <calendar_handleAlarm+0x1a6>

		}

		// if there is no alarm to set, disable the alarm and exit any events
		else {
			diableAlarm_A();
 80007c2:	f001 f81d 	bl	8001800 <diableAlarm_A>

			if (CURRENTLY_IN_EVENT) {
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <calendar_handleAlarm+0x1c0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007ce:	d016      	beq.n	80007fe <calendar_handleAlarm+0x1a6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <calendar_handleAlarm+0x1c0>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4911      	ldr	r1, [pc, #68]	; (800081c <calendar_handleAlarm+0x1c4>)
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	440b      	add	r3, r1
 80007e0:	3314      	adds	r3, #20
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00a      	beq.n	80007fe <calendar_handleAlarm+0x1a6>
					(*_calendarEvents[_currentEvent].end_callback)();
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <calendar_handleAlarm+0x1c0>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	490b      	ldr	r1, [pc, #44]	; (800081c <calendar_handleAlarm+0x1c4>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	440b      	add	r3, r1
 80007f8:	3314      	adds	r3, #20
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 80007fe:	4b03      	ldr	r3, [pc, #12]	; (800080c <calendar_handleAlarm+0x1b4>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	}

	else {

	}
}
 8000804:	bf00      	nop
 8000806:	3730      	adds	r7, #48	; 0x30
 8000808:	46bd      	mov	sp, r7
 800080a:	bdb0      	pop	{r4, r5, r7, pc}
 800080c:	20000184 	.word	0x20000184
 8000810:	08007088 	.word	0x08007088
 8000814:	08007080 	.word	0x08007080
 8000818:	20000004 	.word	0x20000004
 800081c:	20000090 	.word	0x20000090

08000820 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <calendar_AlarmA_ISR+0x14>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000184 	.word	0x20000184

08000838 <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	f107 0408 	add.w	r4, r7, #8
 8000842:	e884 0003 	stmia.w	r4, {r0, r1}
 8000846:	4639      	mov	r1, r7
 8000848:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000854:	f000 f80e 	bl	8000874 <dateTimeToSeconds>
 8000858:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 800085a:	463b      	mov	r3, r7
 800085c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000860:	f000 f808 	bl	8000874 <dateTimeToSeconds>
 8000864:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	1ad3      	subs	r3, r2, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	463b      	mov	r3, r7
 800087c:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 8000880:	797b      	ldrb	r3, [r7, #5]
 8000882:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 8000884:	793b      	ldrb	r3, [r7, #4]
 8000886:	461a      	mov	r2, r3
 8000888:	4613      	mov	r3, r2
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80008a0:	78bb      	ldrb	r3, [r7, #2]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	490a      	ldr	r1, [pc, #40]	; (80008d0 <dateTimeToSeconds+0x5c>)
 80008a6:	fb01 f303 	mul.w	r3, r1, r3
 80008aa:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 80008ac:	787b      	ldrb	r3, [r7, #1]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4908      	ldr	r1, [pc, #32]	; (80008d4 <dateTimeToSeconds+0x60>)
 80008b2:	fb01 f303 	mul.w	r3, r1, r3
 80008b6:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 80008b8:	783b      	ldrb	r3, [r7, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <dateTimeToSeconds+0x64>)
 80008be:	fb01 f303 	mul.w	r3, r1, r3
 80008c2:	4413      	add	r3, r2
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	00015180 	.word	0x00015180
 80008d4:	00278d00 	.word	0x00278d00
 80008d8:	01da9c00 	.word	0x01da9c00

080008dc <getNextAlarm>:


/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent) {
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08d      	sub	sp, #52	; 0x34
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
	int currentIdx = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
	bool nextAlarmFound = false;
 80008f0:	2300      	movs	r3, #0
 80008f2:	77fb      	strb	r3, [r7, #31]
	DateTime now = {0};
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	1cdc      	adds	r4, r3, #3
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	1c9a      	adds	r2, r3, #2
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	1c59      	adds	r1, r3, #1
 800091a:	f107 0018 	add.w	r0, r7, #24
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	3305      	adds	r3, #5
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	3304      	adds	r3, #4
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4623      	mov	r3, r4
 8000930:	f000 fe36 	bl	80015a0 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
	currentIdx = eventIdx - 1;
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	3b01      	subs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
	nextAlarmFound = false;
 800093e:	2300      	movs	r3, #0
 8000940:	77fb      	strb	r3, [r7, #31]
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000942:	e0bc      	b.n	8000abe <getNextAlarm+0x1e2>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 8000944:	4973      	ldr	r1, [pc, #460]	; (8000b14 <getNextAlarm+0x238>)
 8000946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	cb0c      	ldmia	r3, {r2, r3}
 8000954:	f107 0118 	add.w	r1, r7, #24
 8000958:	c903      	ldmia	r1, {r0, r1}
 800095a:	f7ff ff6d 	bl	8000838 <compareDateTime>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	da43      	bge.n	80009ec <getNextAlarm+0x110>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 8000964:	496b      	ldr	r1, [pc, #428]	; (8000b14 <getNextAlarm+0x238>)
 8000966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 8000976:	4967      	ldr	r1, [pc, #412]	; (8000b14 <getNextAlarm+0x238>)
 8000978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	440b      	add	r3, r1
 8000984:	3301      	adds	r3, #1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 800098a:	4962      	ldr	r1, [pc, #392]	; (8000b14 <getNextAlarm+0x238>)
 800098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3302      	adds	r3, #2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 800099e:	495d      	ldr	r1, [pc, #372]	; (8000b14 <getNextAlarm+0x238>)
 80009a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	440b      	add	r3, r1
 80009ac:	3303      	adds	r3, #3
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 80009b2:	4958      	ldr	r1, [pc, #352]	; (8000b14 <getNextAlarm+0x238>)
 80009b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3304      	adds	r3, #4
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 80009c6:	4953      	ldr	r1, [pc, #332]	; (8000b14 <getNextAlarm+0x238>)
 80009c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	3305      	adds	r3, #5
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 80009da:	2301      	movs	r3, #1
 80009dc:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx - 1;
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	3b01      	subs	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
			*inEvent = false;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	e068      	b.n	8000abe <getNextAlarm+0x1e2>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 80009ec:	4949      	ldr	r1, [pc, #292]	; (8000b14 <getNextAlarm+0x238>)
 80009ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	440b      	add	r3, r1
 80009fa:	cb0c      	ldmia	r3, {r2, r3}
 80009fc:	f107 0118 	add.w	r1, r7, #24
 8000a00:	c903      	ldmia	r1, {r0, r1}
 8000a02:	f7ff ff19 	bl	8000838 <compareDateTime>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db55      	blt.n	8000ab8 <getNextAlarm+0x1dc>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 8000a0c:	4941      	ldr	r1, [pc, #260]	; (8000b14 <getNextAlarm+0x238>)
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	cb0c      	ldmia	r3, {r2, r3}
 8000a20:	f107 0118 	add.w	r1, r7, #24
 8000a24:	c903      	ldmia	r1, {r0, r1}
 8000a26:	f7ff ff07 	bl	8000838 <compareDateTime>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	da43      	bge.n	8000ab8 <getNextAlarm+0x1dc>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 8000a30:	4938      	ldr	r1, [pc, #224]	; (8000b14 <getNextAlarm+0x238>)
 8000a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	440b      	add	r3, r1
 8000a3e:	330c      	adds	r3, #12
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 8000a44:	4933      	ldr	r1, [pc, #204]	; (8000b14 <getNextAlarm+0x238>)
 8000a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	440b      	add	r3, r1
 8000a52:	330d      	adds	r3, #13
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 8000a58:	492e      	ldr	r1, [pc, #184]	; (8000b14 <getNextAlarm+0x238>)
 8000a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	330e      	adds	r3, #14
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 8000a6c:	4929      	ldr	r1, [pc, #164]	; (8000b14 <getNextAlarm+0x238>)
 8000a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	440b      	add	r3, r1
 8000a7a:	330f      	adds	r3, #15
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 8000a80:	4924      	ldr	r1, [pc, #144]	; (8000b14 <getNextAlarm+0x238>)
 8000a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	440b      	add	r3, r1
 8000a8e:	3310      	adds	r3, #16
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 8000a94:	491f      	ldr	r1, [pc, #124]	; (8000b14 <getNextAlarm+0x238>)
 8000a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	440b      	add	r3, r1
 8000aa2:	3311      	adds	r3, #17
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx;
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	623b      	str	r3, [r7, #32]
			*inEvent = true;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e002      	b.n	8000abe <getNextAlarm+0x1e2>
		}

		// traverse to next event
		else {
			eventIdx++;
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	3301      	adds	r3, #1
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <getNextAlarm+0x23c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	da06      	bge.n	8000ad6 <getNextAlarm+0x1fa>
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
 8000aca:	f083 0301 	eor.w	r3, r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f47f af37 	bne.w	8000944 <getNextAlarm+0x68>
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000ad6:	7ffb      	ldrb	r3, [r7, #31]
 8000ad8:	f083 0301 	eor.w	r3, r3, #1
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <getNextAlarm+0x216>
		dateTime = NULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aec:	601a      	str	r2, [r3, #0]
		return false;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e00b      	b.n	8000b0a <getNextAlarm+0x22e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	461a      	mov	r2, r3
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	6010      	str	r0, [r2, #0]
 8000afe:	889b      	ldrh	r3, [r3, #4]
 8000b00:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = currentIdx;
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	6a3a      	ldr	r2, [r7, #32]
 8000b06:	601a      	str	r2, [r3, #0]
		return true;
 8000b08:	2301      	movs	r3, #1
	}
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	372c      	adds	r7, #44	; 0x2c
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000090 	.word	0x20000090
 8000b18:	20000180 	.word	0x20000180

08000b1c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b40:	68fb      	ldr	r3, [r7, #12]
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8000b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d101      	bne.n	8000b68 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff ffd2 	bl	8000b4c <LL_AHB2_GRP1_IsEnabledClock>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <activate_led+0x60>)
 8000bac:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <activate_led+0x60>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f7ff ffb0 	bl	8000b1c <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <activate_led+0x64>)
 8000be0:	f001 faa6 	bl	8002130 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	2201      	movs	r2, #1
 8000be8:	4619      	mov	r1, r3
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <activate_led+0x64>)
 8000bec:	f001 fcce 	bl	800258c <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000018c 	.word	0x2000018c
 8000bfc:	48000400 	.word	0x48000400

08000c00 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <deactivate_led+0x38>)
 8000c12:	f001 fcbb 	bl	800258c <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <deactivate_led+0x38>)
 8000c1c:	f001 fbe8 	bl	80023f0 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <deactivate_led+0x3c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff ffa3 	bl	8000b74 <LL_AHB2_GRP1_DisableClock>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	2000018c 	.word	0x2000018c

08000c40 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c50:	f023 0218 	bic.w	r2, r3, #24
 8000c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <LL_AHB2_GRP1_EnableClock>:
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_UART_ErrorCallback+0x28>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d006      	beq.n	8000cbc <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_UART_ErrorCallback+0x2c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d101      	bne.n	8000cbc <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000cb8:	f000 ff72 	bl	8001ba0 <uartBasic_Error_ISR>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	40004400 	.word	0x40004400

08000ccc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_UART_TxCpltCallback+0x28>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d006      	beq.n	8000cec <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <HAL_UART_TxCpltCallback+0x2c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000ce8:	f000 ff4e 	bl	8001b88 <uartBasic_TX_Complete_ISR>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40004400 	.word	0x40004400

08000cfc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_UART_RxCpltCallback+0x28>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d006      	beq.n	8000d1c <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <HAL_UART_RxCpltCallback+0x2c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000d18:	f000 ff2a 	bl	8001b70 <uartBasic_RX_Complete_ISR>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013800 	.word	0x40013800
 8000d28:	40004400 	.word	0x40004400

08000d2c <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8000d34:	f7ff fd74 	bl	8000820 <calendar_AlarmA_ISR>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <event_0_start_cb>:


void event_0_start_cb(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	activate_led(RED_LED);
 8000d44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d48:	f7ff ff26 	bl	8000b98 <activate_led>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <event_0_end_cb>:

void event_0_end_cb(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	deactivate_led(RED_LED);
 8000d54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d58:	f7ff ff52 	bl	8000c00 <deactivate_led>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <event_1_start_cb>:


void event_1_start_cb(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	activate_led(GREEN_LED);
 8000d64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d68:	f7ff ff16 	bl	8000b98 <activate_led>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <event_1_end_cb>:

void event_1_end_cb(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	deactivate_led(GREEN_LED);
 8000d74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d78:	f7ff ff42 	bl	8000c00 <deactivate_led>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <event_2_start_cb>:


void event_2_start_cb(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	activate_led(BLUE_LED);
 8000d84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d88:	f7ff ff06 	bl	8000b98 <activate_led>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <event_2_end_cb>:

void event_2_end_cb(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	deactivate_led(BLUE_LED);
 8000d94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d98:	f7ff ff32 	bl	8000c00 <deactivate_led>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da2:	b0d1      	sub	sp, #324	; 0x144
 8000da4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da6:	f000 ff85 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000daa:	f000 f9bd 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f000 fb0d 	bl	80013cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db2:	f000 fab5 	bl	8001320 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000db6:	f000 fa15 	bl	80011e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f001 fc26 	bl	800260c <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 8000dc0:	48ce      	ldr	r0, [pc, #824]	; (80010fc <main+0x35c>)
 8000dc2:	f000 fe63 	bl	8001a8c <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000dc6:	48ce      	ldr	r0, [pc, #824]	; (8001100 <main+0x360>)
 8000dc8:	f7ff fbb2 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8000dcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 8000dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dde:	f7ff fbb7 	bl	8000550 <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000de2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000dea:	4618      	mov	r0, r3
 8000dec:	23f0      	movs	r3, #240	; 0xf0
 8000dee:	461a      	mov	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f005 fcbf 	bl	8006774 <memset>

  events[0].start.year = 0;
 8000df6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
  events[0].start.month = 0;
 8000e02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	705a      	strb	r2, [r3, #1]
  events[0].start.day = 0;
 8000e0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e16:	2200      	movs	r2, #0
 8000e18:	709a      	strb	r2, [r3, #2]
  events[0].start.hour = 0;
 8000e1a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e22:	2200      	movs	r2, #0
 8000e24:	70da      	strb	r2, [r3, #3]
  events[0].start.minute = 0;
 8000e26:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e2e:	2200      	movs	r2, #0
 8000e30:	711a      	strb	r2, [r3, #4]
  events[0].start.second = 5;
 8000e32:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	715a      	strb	r2, [r3, #5]
  events[0].end.year = 0;
 8000e3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e46:	2200      	movs	r2, #0
 8000e48:	731a      	strb	r2, [r3, #12]
  events[0].end.month = 0;
 8000e4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e52:	2200      	movs	r2, #0
 8000e54:	735a      	strb	r2, [r3, #13]
  events[0].end.day = 0;
 8000e56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e5e:	2200      	movs	r2, #0
 8000e60:	739a      	strb	r2, [r3, #14]
  events[0].end.hour = 0;
 8000e62:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	73da      	strb	r2, [r3, #15]
  events[0].end.minute = 0;
 8000e6e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e76:	2200      	movs	r2, #0
 8000e78:	741a      	strb	r2, [r3, #16]
  events[0].end.second = 10;
 8000e7a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e82:	220a      	movs	r2, #10
 8000e84:	745a      	strb	r2, [r3, #17]
  events[0].start_callback = event_0_start_cb;
 8000e86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e8e:	4a9d      	ldr	r2, [pc, #628]	; (8001104 <main+0x364>)
 8000e90:	609a      	str	r2, [r3, #8]
  events[0].end_callback = event_0_end_cb;
 8000e92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e9a:	4a9b      	ldr	r2, [pc, #620]	; (8001108 <main+0x368>)
 8000e9c:	615a      	str	r2, [r3, #20]

  events[1].start.year = 0;
 8000e9e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	761a      	strb	r2, [r3, #24]
  events[1].start.month = 0;
 8000eaa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	765a      	strb	r2, [r3, #25]
  events[1].start.day = 0;
 8000eb6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	769a      	strb	r2, [r3, #26]
  events[1].start.hour = 0;
 8000ec2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000eca:	2200      	movs	r2, #0
 8000ecc:	76da      	strb	r2, [r3, #27]
  events[1].start.minute = 0;
 8000ece:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	771a      	strb	r2, [r3, #28]
  events[1].start.second = 15;
 8000eda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	775a      	strb	r2, [r3, #29]
  events[1].end.year = 0;
 8000ee6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  events[1].end.month = 0;
 8000ef4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  events[1].end.day = 0;
 8000f02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  events[1].end.hour = 0;
 8000f10:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  events[1].end.minute = 0;
 8000f1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  events[1].end.second = 20;
 8000f2c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f34:	2214      	movs	r2, #20
 8000f36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  events[1].start_callback = event_1_start_cb;
 8000f3a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f42:	4a72      	ldr	r2, [pc, #456]	; (800110c <main+0x36c>)
 8000f44:	621a      	str	r2, [r3, #32]
  events[1].end_callback = event_1_end_cb;
 8000f46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f4e:	4a70      	ldr	r2, [pc, #448]	; (8001110 <main+0x370>)
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c

  events[2].start.year = 0;
 8000f52:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  events[2].start.month = 0;
 8000f60:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  events[2].start.day = 0;
 8000f6e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  events[2].start.hour = 0;
 8000f7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  events[2].start.minute = 0;
 8000f8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  events[2].start.second = 20;
 8000f98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fa0:	2214      	movs	r2, #20
 8000fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  events[2].end.year = 0;
 8000fa6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  events[2].end.month = 0;
 8000fb4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  events[2].end.day = 0;
 8000fc2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  events[2].end.hour = 0;
 8000fd0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  events[2].end.minute = 0;
 8000fde:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  events[2].end.second = 25;
 8000fec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ff4:	2219      	movs	r2, #25
 8000ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  events[2].start_callback = event_2_start_cb;
 8000ffa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001002:	4a44      	ldr	r2, [pc, #272]	; (8001114 <main+0x374>)
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
  events[2].end_callback = event_2_end_cb;
 8001006:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800100a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800100e:	4a42      	ldr	r2, [pc, #264]	; (8001118 <main+0x378>)
 8001010:	645a      	str	r2, [r3, #68]	; 0x44

  calendar_setEvents(events, 3);
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	2103      	movs	r1, #3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fac9 	bl	80005b0 <calendar_setEvents>

  // start calendar
//  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  calendar_start();
 800101e:	f7ff fadd 	bl	80005dc <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8001022:	f000 fd41 	bl	8001aa8 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int timeSeconds = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  int timeMinutes = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 8001038:	f7ff fb0e 	bl	8000658 <calendar_handleAlarm>

	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 800103c:	463a      	mov	r2, r7
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fd69 	bl	8001b1c <uartBasic_get_RX>
 800104a:	4603      	mov	r3, r0
 800104c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	  // if message present, handle message
	  if (messageStatus == true) {
 8001050:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00d      	beq.n	8001074 <main+0x2d4>
		  // echo back to computer
		  uartBasic_TX_Poll(messageHeader, messageBody);
 8001058:	463a      	mov	r2, r7
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fd35 	bl	8001ad0 <uartBasic_TX_Poll>
		  messageCount++;
 8001066:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800106a:	3301      	adds	r3, #1
 800106c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  uartBasic_RX_IT();
 8001070:	f000 fd1a 	bl	8001aa8 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8001074:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa7f 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 800107e:	463b      	mov	r3, r7
 8001080:	221c      	movs	r2, #28
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fb75 	bl	8006774 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 800108a:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800108e:	461e      	mov	r6, r3
 8001090:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8001094:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8001098:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
 800109c:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 80010a0:	4604      	mov	r4, r0
 80010a2:	f897 0115 	ldrb.w	r0, [r7, #277]	; 0x115
 80010a6:	4605      	mov	r5, r0
 80010a8:	4638      	mov	r0, r7
 80010aa:	9504      	str	r5, [sp, #16]
 80010ac:	9403      	str	r4, [sp, #12]
 80010ae:	9102      	str	r1, [sp, #8]
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4633      	mov	r3, r6
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <main+0x37c>)
 80010b8:	211c      	movs	r1, #28
 80010ba:	f005 fb63 	bl	8006784 <sniprintf>
	  uartBasic_TX_Poll("TIME", messageBody);
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <main+0x380>)
 80010c4:	f000 fd04 	bl	8001ad0 <uartBasic_TX_Poll>
	  timeSeconds++;
 80010c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  timeMinutes++;
 80010d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010d6:	3301      	adds	r3, #1
 80010d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	  long int i = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 80010e2:	e004      	b.n	80010ee <main+0x34e>
		  i++;
 80010e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010e8:	3301      	adds	r3, #1
 80010ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 80010ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010f2:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <main+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	ddf5      	ble.n	80010e4 <main+0x344>
  {
 80010f8:	e79e      	b.n	8001038 <main+0x298>
 80010fa:	bf00      	nop
 80010fc:	200001c8 	.word	0x200001c8
 8001100:	20000190 	.word	0x20000190
 8001104:	08000d41 	.word	0x08000d41
 8001108:	08000d51 	.word	0x08000d51
 800110c:	08000d61 	.word	0x08000d61
 8001110:	08000d71 	.word	0x08000d71
 8001114:	08000d81 	.word	0x08000d81
 8001118:	08000d91 	.word	0x08000d91
 800111c:	080070a4 	.word	0x080070a4
 8001120:	080070c8 	.word	0x080070c8
 8001124:	0001fffd 	.word	0x0001fffd

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09a      	sub	sp, #104	; 0x68
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2248      	movs	r2, #72	; 0x48
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 fb1c 	bl	8006774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	615a      	str	r2, [r3, #20]
 800114c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800114e:	f001 fa35 	bl	80025bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fd74 	bl	8000c40 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <SystemClock_Config+0xb8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001160:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <SystemClock_Config+0xb8>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <SystemClock_Config+0xb8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001174:	232c      	movs	r3, #44	; 0x2c
 8001176:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001178:	2381      	movs	r3, #129	; 0x81
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001184:	2360      	movs	r3, #96	; 0x60
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fcf9 	bl	8002b90 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011a4:	f000 f91f 	bl	80013e6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80011a8:	236f      	movs	r3, #111	; 0x6f
 80011aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f863 	bl	8003294 <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011d4:	f000 f907 	bl	80013e6 <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	3768      	adds	r7, #104	; 0x68
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58000400 	.word	0x58000400

080011e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b092      	sub	sp, #72	; 0x48
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	222c      	movs	r2, #44	; 0x2c
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fab5 	bl	8006774 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <MX_RTC_Init+0x134>)
 800120c:	4a43      	ldr	r2, [pc, #268]	; (800131c <MX_RTC_Init+0x138>)
 800120e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <MX_RTC_Init+0x134>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <MX_RTC_Init+0x134>)
 8001218:	227f      	movs	r2, #127	; 0x7f
 800121a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <MX_RTC_Init+0x134>)
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MX_RTC_Init+0x134>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001228:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <MX_RTC_Init+0x134>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <MX_RTC_Init+0x134>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <MX_RTC_Init+0x134>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <MX_RTC_Init+0x134>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_RTC_Init+0x134>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001248:	4833      	ldr	r0, [pc, #204]	; (8001318 <MX_RTC_Init+0x134>)
 800124a:	f002 fcfd 	bl	8003c48 <HAL_RTC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001254:	f000 f8c7 	bl	80013e6 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800126a:	2300      	movs	r3, #0
 800126c:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001272:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001276:	2201      	movs	r2, #1
 8001278:	4619      	mov	r1, r3
 800127a:	4827      	ldr	r0, [pc, #156]	; (8001318 <MX_RTC_Init+0x134>)
 800127c:	f002 fd66 	bl	8003d4c <HAL_RTC_SetTime>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001286:	f000 f8ae 	bl	80013e6 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001290:	2301      	movs	r3, #1
 8001292:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	481b      	ldr	r0, [pc, #108]	; (8001318 <MX_RTC_Init+0x134>)
 80012ac:	f002 fe4c 	bl	8003f48 <HAL_RTC_SetDate>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 80012b6:	f000 f896 	bl	80013e6 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012be:	2300      	movs	r3, #0
 80012c0:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_RTC_Init+0x134>)
 80012f2:	f002 fefd 	bl	80040f0 <HAL_RTC_SetAlarm_IT>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80012fc:	f000 f873 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	202a      	movs	r0, #42	; 0x2a
 8001306:	f000 fe22 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800130a:	202a      	movs	r0, #42	; 0x2a
 800130c:	f000 fe39 	bl	8001f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3748      	adds	r7, #72	; 0x48
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000190 	.word	0x20000190
 800131c:	40002800 	.word	0x40002800

08001320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001326:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <MX_USART2_UART_Init+0xa8>)
 8001328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 800132c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 800133a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001342:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001368:	2230      	movs	r2, #48	; 0x30
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 800136e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137c:	4811      	ldr	r0, [pc, #68]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 800137e:	f003 f945 	bl	800460c <HAL_UART_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001388:	f000 f82d 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138c:	2100      	movs	r1, #0
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 8001390:	f005 f8ef 	bl	8006572 <HAL_UARTEx_SetTxFifoThreshold>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800139a:	f000 f824 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139e:	2100      	movs	r1, #0
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 80013a2:	f005 f924 	bl	80065ee <HAL_UARTEx_SetRxFifoThreshold>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80013ac:	f000 f81b 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_USART2_UART_Init+0xa4>)
 80013b2:	f005 f8a6 	bl	8006502 <HAL_UARTEx_DisableFifoMode>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 80013bc:	f000 f813 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200001c8 	.word	0x200001c8
 80013c8:	40004400 	.word	0x40004400

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fc4a 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2004      	movs	r0, #4
 80013d8:	f7ff fc47 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	2002      	movs	r0, #2
 80013de:	f7ff fc44 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ea:	b672      	cpsid	i
}
 80013ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ee:	e7fe      	b.n	80013ee <Error_Handler+0x8>

080013f0 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 80013f8:	4a03      	ldr	r2, [pc, #12]	; (8001408 <rtcAlarmControl_init+0x18>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	2000025c 	.word	0x2000025c

0800140c <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	4611      	mov	r1, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	4603      	mov	r3, r0
 8001420:	71bb      	strb	r3, [r7, #6]
 8001422:	460b      	mov	r3, r1
 8001424:	717b      	strb	r3, [r7, #5]
 8001426:	4613      	mov	r3, r2
 8001428:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4a5a      	ldr	r2, [pc, #360]	; (8001598 <setDateTime+0x18c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	b258      	sxtb	r0, r3
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	4b56      	ldr	r3, [pc, #344]	; (8001598 <setDateTime+0x18c>)
 800143e:	fba3 1302 	umull	r1, r3, r3, r2
 8001442:	08d9      	lsrs	r1, r3, #3
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4303      	orrs	r3, r0
 8001454:	b25b      	sxtb	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	4a4e      	ldr	r2, [pc, #312]	; (8001598 <setDateTime+0x18c>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	08db      	lsrs	r3, r3, #3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	b258      	sxtb	r0, r3
 800146a:	79ba      	ldrb	r2, [r7, #6]
 800146c:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <setDateTime+0x18c>)
 800146e:	fba3 1302 	umull	r1, r3, r3, r2
 8001472:	08d9      	lsrs	r1, r3, #3
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b25b      	sxtb	r3, r3
 8001482:	4303      	orrs	r3, r0
 8001484:	b25b      	sxtb	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	4a42      	ldr	r2, [pc, #264]	; (8001598 <setDateTime+0x18c>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	b258      	sxtb	r0, r3
 800149a:	797a      	ldrb	r2, [r7, #5]
 800149c:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <setDateTime+0x18c>)
 800149e:	fba3 1302 	umull	r1, r3, r3, r2
 80014a2:	08d9      	lsrs	r1, r3, #3
 80014a4:	460b      	mov	r3, r1
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	4303      	orrs	r3, r0
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 80014be:	793b      	ldrb	r3, [r7, #4]
 80014c0:	4a35      	ldr	r2, [pc, #212]	; (8001598 <setDateTime+0x18c>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	b258      	sxtb	r0, r3
 80014ce:	793a      	ldrb	r2, [r7, #4]
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <setDateTime+0x18c>)
 80014d2:	fba3 1302 	umull	r1, r3, r3, r2
 80014d6:	08d9      	lsrs	r1, r3, #3
 80014d8:	460b      	mov	r3, r1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	4303      	orrs	r3, r0
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 80014ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <setDateTime+0x18c>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	b258      	sxtb	r0, r3
 8001500:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <setDateTime+0x18c>)
 8001506:	fba3 1302 	umull	r1, r3, r3, r2
 800150a:	08d9      	lsrs	r1, r3, #3
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4303      	orrs	r3, r0
 800151c:	b25b      	sxtb	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001522:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <setDateTime+0x18c>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	b258      	sxtb	r0, r3
 8001534:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <setDateTime+0x18c>)
 800153a:	fba3 1302 	umull	r1, r3, r3, r2
 800153e:	08d9      	lsrs	r1, r3, #3
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b25b      	sxtb	r3, r3
 800154e:	4303      	orrs	r3, r0
 8001550:	b25b      	sxtb	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <setDateTime+0x190>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f107 011c 	add.w	r1, r7, #28
 800155e:	2201      	movs	r2, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fcf1 	bl	8003f48 <HAL_RTC_SetDate>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001570:	e7fe      	b.n	8001570 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <setDateTime+0x190>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f107 0108 	add.w	r1, r7, #8
 800157a:	2201      	movs	r2, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f002 fbe5 	bl	8003d4c <HAL_RTC_SetTime>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 800158c:	e7fe      	b.n	800158c <setDateTime+0x180>
  }
}
 800158e:	bf00      	nop
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	cccccccd 	.word	0xcccccccd
 800159c:	2000025c 	.word	0x2000025c

080015a0 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <getDateTime+0x124>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f107 0114 	add.w	r1, r7, #20
 80015ca:	2201      	movs	r2, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 fc59 	bl	8003e84 <HAL_RTC_GetTime>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80015dc:	e7fe      	b.n	80015dc <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <getDateTime+0x124>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f107 0110 	add.w	r1, r7, #16
 80015e6:	2201      	movs	r2, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fd33 	bl	8004054 <HAL_RTC_GetDate>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80015f8:	e7fe      	b.n	80015f8 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4413      	add	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	7cfb      	ldrb	r3, [r7, #19]
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b2da      	uxtb	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 800161a:	7c7b      	ldrb	r3, [r7, #17]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	b2da      	uxtb	r2, r3
 800162a:	7c7b      	ldrb	r3, [r7, #17]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4413      	add	r3, r2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 800163a:	7cbb      	ldrb	r3, [r7, #18]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	7cbb      	ldrb	r3, [r7, #18]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4413      	add	r3, r2
 8001654:	b2da      	uxtb	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 800165a:	7d3b      	ldrb	r3, [r7, #20]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4413      	add	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	7d3b      	ldrb	r3, [r7, #20]
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4413      	add	r3, r2
 8001674:	b2da      	uxtb	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 800167a:	7d7b      	ldrb	r3, [r7, #21]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	7d7b      	ldrb	r3, [r7, #21]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4413      	add	r3, r2
 8001694:	b2da      	uxtb	r2, r3
 8001696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001698:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 800169a:	7dbb      	ldrb	r3, [r7, #22]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	7dbb      	ldrb	r3, [r7, #22]
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000025c 	.word	0x2000025c

080016c8 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08f      	sub	sp, #60	; 0x3c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	4603      	mov	r3, r0
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	460b      	mov	r3, r1
 80016e0:	717b      	strb	r3, [r7, #5]
 80016e2:	4613      	mov	r3, r2
 80016e4:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	222c      	movs	r2, #44	; 0x2c
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 f840 	bl	8006774 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4a40      	ldr	r2, [pc, #256]	; (80017f8 <setAlarm_A+0x130>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	08db      	lsrs	r3, r3, #3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	b258      	sxtb	r0, r3
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <setAlarm_A+0x130>)
 8001708:	fba3 1302 	umull	r1, r3, r3, r2
 800170c:	08d9      	lsrs	r1, r3, #3
 800170e:	460b      	mov	r3, r1
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	b25b      	sxtb	r3, r3
 800171c:	4303      	orrs	r3, r0
 800171e:	b25b      	sxtb	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <setAlarm_A+0x130>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	b258      	sxtb	r0, r3
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <setAlarm_A+0x130>)
 800173a:	fba3 1302 	umull	r1, r3, r3, r2
 800173e:	08d9      	lsrs	r1, r3, #3
 8001740:	460b      	mov	r3, r1
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	4303      	orrs	r3, r0
 8001750:	b25b      	sxtb	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8001756:	797b      	ldrb	r3, [r7, #5]
 8001758:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <setAlarm_A+0x130>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	b258      	sxtb	r0, r3
 8001766:	797a      	ldrb	r2, [r7, #5]
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <setAlarm_A+0x130>)
 800176a:	fba3 1302 	umull	r1, r3, r3, r2
 800176e:	08d9      	lsrs	r1, r3, #3
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4303      	orrs	r3, r0
 8001780:	b25b      	sxtb	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8001786:	793b      	ldrb	r3, [r7, #4]
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <setAlarm_A+0x130>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	b258      	sxtb	r0, r3
 8001796:	793a      	ldrb	r2, [r7, #4]
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <setAlarm_A+0x130>)
 800179a:	fba3 1302 	umull	r1, r3, r3, r2
 800179e:	08d9      	lsrs	r1, r3, #3
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	4303      	orrs	r3, r0
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 80017ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <setAlarm_A+0x134>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f107 010c 	add.w	r1, r7, #12
 80017dc:	2201      	movs	r2, #1
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fc86 	bl	80040f0 <HAL_RTC_SetAlarm_IT>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 80017ea:	b672      	cpsid	i
}
 80017ec:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 80017ee:	e7fe      	b.n	80017ee <setAlarm_A+0x126>
  }
}
 80017f0:	bf00      	nop
 80017f2:	373c      	adds	r7, #60	; 0x3c
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	cccccccd 	.word	0xcccccccd
 80017fc:	2000025c 	.word	0x2000025c

08001800 <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <diableAlarm_A+0x24>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fd7b 	bl	8004308 <HAL_RTC_DeactivateAlarm>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 800181c:	e7fe      	b.n	800181c <diableAlarm_A+0x1c>
	}
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000025c 	.word	0x2000025c

08001828 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800182c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <LL_AHB2_GRP1_EnableClock>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	; 0x40
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	2238      	movs	r2, #56	; 0x38
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 ff55 	bl	8006774 <memset>
  if(hrtc->Instance==RTC)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_RTC_MspInit+0x54>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d115      	bne.n	8001900 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 f895 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80018f0:	f7ff fd79 	bl	80013e6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018f4:	f7ff ff98 	bl	8001828 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80018f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018fc:	f7ff ffbc 	bl	8001878 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3740      	adds	r7, #64	; 0x40
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40002800 	.word	0x40002800

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b096      	sub	sp, #88	; 0x58
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2238      	movs	r2, #56	; 0x38
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f004 ff21 	bl	8006774 <memset>
  if(huart->Instance==USART2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_UART_MspInit+0x98>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d12e      	bne.n	800199a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800193c:	2302      	movs	r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001940:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001944:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4618      	mov	r0, r3
 800194c:	f002 f862 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001956:	f7ff fd46 	bl	80013e6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800195e:	f7ff ff8b 	bl	8001878 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff ff70 	bl	8001848 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001968:	230c      	movs	r3, #12
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001978:	2307      	movs	r3, #7
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f000 fbd3 	bl	8002130 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2025      	movs	r0, #37	; 0x25
 8001990:	f000 fadd 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001994:	2025      	movs	r0, #37	; 0x25
 8001996:	f000 faf4 	bl	8001f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3758      	adds	r7, #88	; 0x58
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ee:	f000 f9bb 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USART2_IRQHandler+0x10>)
 80019fe:	f002 ff27 	bl	8004850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200001c8 	.word	0x200001c8

08001a0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <RTC_Alarm_IRQHandler+0x10>)
 8001a12:	f002 fcd5 	bl	80043c0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000190 	.word	0x20000190

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f004 fe58 	bl	8006704 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20008000 	.word	0x20008000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	20000260 	.word	0x20000260
 8001a88:	200002c8 	.word	0x200002c8

08001a8c <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8001a94:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <uartBasic_init+0x18>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000268 	.word	0x20000268

08001aa8 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <uartBasic_RX_IT+0x24>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f083 0301 	eor.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 8001abc:	f000 f874 	bl	8001ba8 <_rxMessage_IT>

		// return success
		return true;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 8001ac4:	2300      	movs	r3, #0
	}
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002ad 	.word	0x200002ad

08001ad0 <uartBasic_TX_Poll>:
/*
 * Start transmitting message over UART.
 */
bool uartBasic_TX_Poll(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <uartBasic_TX_Poll+0x44>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00e      	beq.n	8001b08 <uartBasic_TX_Poll+0x38>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <uartBasic_TX_Poll+0x48>)
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f88a 	bl	8001c08 <composeMessage>
		_txBuffer_full = true;
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <uartBasic_TX_Poll+0x44>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_Poll();
 8001afa:	f000 f86d 	bl	8001bd8 <_txMessage_Poll>

		// clear buffer full
		_txBuffer_full = false;
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <uartBasic_TX_Poll+0x44>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]

		// report successfully queued
		return true;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <uartBasic_TX_Poll+0x3a>
	}

	else
	{
		// return full buffer
		return false;
 8001b08:	2300      	movs	r3, #0
	}
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002ac 	.word	0x200002ac
 8001b18:	2000026c 	.word	0x2000026c

08001b1c <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <uartBasic_get_RX+0x4c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d015      	beq.n	8001b5c <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <uartBasic_get_RX+0x50>)
 8001b32:	f107 0408 	add.w	r4, r7, #8
 8001b36:	461d      	mov	r5, r3
 8001b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <uartBasic_get_RX+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6839      	ldr	r1, [r7, #0]
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f86e 	bl	8001c34 <decomposeMessage>

		// report successfully dequeued
		return true;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 8001b5c:	2300      	movs	r3, #0
	}
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002ad 	.word	0x200002ad
 8001b6c:	2000028c 	.word	0x2000028c

08001b70 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <uartBasic_RX_Complete_ISR+0x14>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200002ad 	.word	0x200002ad

08001b88 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <uartBasic_TX_Complete_ISR+0x14>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	200002ac 	.word	0x200002ac

08001ba0 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 8001ba4:	e7fe      	b.n	8001ba4 <uartBasic_Error_ISR+0x4>
	...

08001ba8 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_rxMessage_IT+0x24>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <_rxMessage_IT+0x28>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fdff 	bl	80047b8 <HAL_UART_Receive_IT>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d102      	bne.n	8001bc6 <_rxMessage_IT+0x1e>
		_rxError = true;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <_rxMessage_IT+0x2c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000268 	.word	0x20000268
 8001bd0:	2000028c 	.word	0x2000028c
 8001bd4:	20000265 	.word	0x20000265

08001bd8 <_txMessage_Poll>:

/*
 *
 */
void _txMessage_Poll(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <_txMessage_Poll+0x24>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	23fa      	movs	r3, #250	; 0xfa
 8001be2:	2220      	movs	r2, #32
 8001be4:	4906      	ldr	r1, [pc, #24]	; (8001c00 <_txMessage_Poll+0x28>)
 8001be6:	f002 fd61 	bl	80046ac <HAL_UART_Transmit>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d102      	bne.n	8001bf6 <_txMessage_Poll+0x1e>
		_txError = true;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <_txMessage_Poll+0x2c>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000268 	.word	0x20000268
 8001c00:	2000026c 	.word	0x2000026c
 8001c04:	20000264 	.word	0x20000264

08001c08 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	221c      	movs	r2, #28
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 fd96 	bl	8006758 <memcpy>
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	221c      	movs	r2, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f004 fd80 	bl	8006758 <memcpy>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c64:	f7fe fc5e 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6a:	490d      	ldr	r1, [pc, #52]	; (8001ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <LoopForever+0xe>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c80:	4c0a      	ldr	r4, [pc, #40]	; (8001cac <LoopForever+0x16>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c8e:	f004 fd3f 	bl	8006710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c92:	f7ff f885 	bl	8000da0 <main>

08001c96 <LoopForever>:

LoopForever:
    b LoopForever
 8001c96:	e7fe      	b.n	8001c96 <LoopForever>
  ldr   r0, =_estack
 8001c98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ca4:	080071f8 	.word	0x080071f8
  ldr r2, =_sbss
 8001ca8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cac:	200002c4 	.word	0x200002c4

08001cb0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f000 f93a 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cc4:	f001 fcc8 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_Init+0x3c>)
 8001ccc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f810 	bl	8001cf4 <HAL_InitTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	71fb      	strb	r3, [r7, #7]
 8001cde:	e001      	b.n	8001ce4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ce0:	f7ff fde2 	bl	80018a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_InitTick+0x6c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d024      	beq.n	8001d52 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d08:	f001 fca6 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_InitTick+0x6c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f93c 	bl	8001f9e <HAL_SYSTICK_Config>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	d809      	bhi.n	8001d46 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d32:	2200      	movs	r2, #0
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d3a:	f000 f908 	bl	8001f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_InitTick+0x70>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e007      	b.n	8001d56 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	e004      	b.n	8001d56 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e001      	b.n	8001d56 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000000c 	.word	0x2000000c
 8001d64:	20000008 	.word	0x20000008

08001d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_IncTick+0x1c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x20>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_IncTick+0x20>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	200002b0 	.word	0x200002b0

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_GetTick+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	200002b0 	.word	0x200002b0

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4906      	ldr	r1, [pc, #24]	; (8001e38 <__NVIC_EnableIRQ+0x34>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f18:	f7ff ff90 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff2d 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff44 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff92 	bl	8001e90 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff61 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff37 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa4 	bl	8001ef4 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e04f      	b.n	8002068 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d008      	beq.n	8001fe6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 020e 	bic.w	r2, r2, #14
 8001ff4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f003 021c 	and.w	r2, r3, #28
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002032:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00c      	beq.n	8002056 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002054:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d005      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e047      	b.n	8002126 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 020e 	bic.w	r2, r2, #14
 80020a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 021c 	and.w	r2, r3, #28
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002104:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
    }
  }
  return status;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e140      	b.n	80023c2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8132 	beq.w	80023bc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d005      	beq.n	8002170 <HAL_GPIO_Init+0x40>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d130      	bne.n	80021d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a6:	2201      	movs	r2, #1
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 0201 	and.w	r2, r3, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d017      	beq.n	800220e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d123      	bne.n	8002262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0203 	and.w	r2, r3, #3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 808c 	beq.w	80023bc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80022a4:	4a4e      	ldr	r2, [pc, #312]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	2207      	movs	r2, #7
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ce:	d00d      	beq.n	80022ec <HAL_GPIO_Init+0x1bc>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <HAL_GPIO_Init+0x2b4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <HAL_GPIO_Init+0x1b8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a43      	ldr	r2, [pc, #268]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_GPIO_Init+0x1b4>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e004      	b.n	80022ee <HAL_GPIO_Init+0x1be>
 80022e4:	2307      	movs	r3, #7
 80022e6:	e002      	b.n	80022ee <HAL_GPIO_Init+0x1be>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_GPIO_Init+0x1be>
 80022ec:	2300      	movs	r3, #0
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	f002 0203 	and.w	r2, r2, #3
 80022f4:	0092      	lsls	r2, r2, #2
 80022f6:	4093      	lsls	r3, r2
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022fe:	4938      	ldr	r1, [pc, #224]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800230c:	4b37      	ldr	r3, [pc, #220]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002330:	4a2e      	ldr	r2, [pc, #184]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800235a:	4a24      	ldr	r2, [pc, #144]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002366:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002394:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f aeb7 	bne.w	8002140 <HAL_GPIO_Init+0x10>
  }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40010000 	.word	0x40010000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800
 80023ec:	58000800 	.word	0x58000800

080023f0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80023fe:	e0af      	b.n	8002560 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002400:	2201      	movs	r2, #1
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a2 	beq.w	800255a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002416:	4a59      	ldr	r2, [pc, #356]	; (800257c <HAL_GPIO_DeInit+0x18c>)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	2207      	movs	r2, #7
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_DeInit+0x6c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_GPIO_DeInit+0x190>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_DeInit+0x68>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <HAL_GPIO_DeInit+0x194>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_DeInit+0x64>
 8002450:	2302      	movs	r3, #2
 8002452:	e004      	b.n	800245e <HAL_GPIO_DeInit+0x6e>
 8002454:	2307      	movs	r3, #7
 8002456:	e002      	b.n	800245e <HAL_GPIO_DeInit+0x6e>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_GPIO_DeInit+0x6e>
 800245c:	2300      	movs	r3, #0
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	429a      	cmp	r2, r3
 800246c:	d136      	bne.n	80024dc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800246e:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 8002470:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	4943      	ldr	r1, [pc, #268]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 800247a:	4013      	ands	r3, r2
 800247c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 8002482:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	493f      	ldr	r1, [pc, #252]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 800248c:	4013      	ands	r3, r2
 800248e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	493b      	ldr	r1, [pc, #236]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 800249c:	4013      	ands	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80024a0:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_GPIO_DeInit+0x198>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	2207      	movs	r2, #7
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80024be:	4a2f      	ldr	r2, [pc, #188]	; (800257c <HAL_GPIO_DeInit+0x18c>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	482b      	ldr	r0, [pc, #172]	; (800257c <HAL_GPIO_DeInit+0x18c>)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	400a      	ands	r2, r1
 80024d6:	3302      	adds	r3, #2
 80024d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2103      	movs	r1, #3
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	08d2      	lsrs	r2, r2, #3
 8002510:	4019      	ands	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2103      	movs	r1, #3
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	401a      	ands	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	2101      	movs	r1, #1
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2103      	movs	r1, #3
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60da      	str	r2, [r3, #12]
    }

    position++;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f af49 	bne.w	8002400 <HAL_GPIO_DeInit+0x10>
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40010000 	.word	0x40010000
 8002580:	48000400 	.word	0x48000400
 8002584:	48000800 	.word	0x48000800
 8002588:	58000800 	.word	0x58000800

0800258c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
 8002598:	4613      	mov	r3, r2
 800259a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a03      	ldr	r2, [pc, #12]	; (80025d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	58000400 	.word	0x58000400

080025d8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <LL_PWR_EnableBootC2+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <LL_PWR_EnableBootC2+0x18>)
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	58000400 	.word	0x58000400

080025f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_PWREx_GetVoltageRange+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	58000400 	.word	0x58000400

0800260c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002614:	f7ff ffe0 	bl	80025d8 <LL_PWR_EnableBootC2>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002630:	d101      	bne.n	8002636 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	58000400 	.word	0x58000400

08002644 <LL_RCC_HSE_EnableTcxo>:
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <LL_RCC_HSE_DisableTcxo>:
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800268e:	d101      	bne.n	8002694 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <LL_RCC_HSE_Enable>:
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <LL_RCC_HSE_Disable>:
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_HSE_IsReady>:
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e8:	d101      	bne.n	80026ee <LL_RCC_HSE_IsReady+0x18>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_RCC_HSE_IsReady+0x1a>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <LL_RCC_HSI_Enable>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <LL_RCC_HSI_Disable>:
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <LL_RCC_HSI_IsReady>:
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d101      	bne.n	8002748 <LL_RCC_HSI_IsReady+0x18>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <LL_RCC_HSI_IsReady+0x1a>
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <LL_RCC_LSE_IsReady>:
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d101      	bne.n	8002792 <LL_RCC_LSE_IsReady+0x18>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_RCC_LSE_IsReady+0x1a>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <LL_RCC_LSI_Enable>:
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <LL_RCC_LSI_Disable>:
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <LL_RCC_LSI_IsReady>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d101      	bne.n	80027f4 <LL_RCC_LSI_IsReady+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_RCC_LSI_IsReady+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_MSI_Enable>:
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6013      	str	r3, [r2, #0]
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <LL_RCC_MSI_Disable>:
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6013      	str	r3, [r2, #0]
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <LL_RCC_MSI_IsReady>:
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d101      	bne.n	800284c <LL_RCC_MSI_IsReady+0x16>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_RCC_MSI_IsReady+0x18>
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d101      	bne.n	800286c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <LL_RCC_MSI_GetRange>:
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002898:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <LL_RCC_SetSysClkSource>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_GetSysClkSource>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <LL_RCC_SetAHBPrescaler>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4313      	orrs	r3, r2
 8002922:	608b      	str	r3, [r1, #8]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <LL_C2_RCC_SetAHBPrescaler>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800293e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <LL_RCC_SetAHB3Prescaler>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002968:	f023 020f 	bic.w	r2, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_SetAPB1Prescaler>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4313      	orrs	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <LL_RCC_SetAPB2Prescaler>:
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_GetAHBPrescaler>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_GetAHB3Prescaler>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_GetAPB1Prescaler>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_GetAPB2Prescaler>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a76:	d101      	bne.n	8002a7c <LL_RCC_PLL_IsReady+0x18>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <LL_RCC_PLL_IsReady+0x1a>
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af2:	d101      	bne.n	8002af8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b16:	d101      	bne.n	8002b1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d101      	bne.n	8002b40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5c:	d101      	bne.n	8002b62 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b7e:	d101      	bne.n	8002b84 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e36f      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	f7ff fea6 	bl	80028f2 <LL_RCC_GetSysClkSource>
 8002ba6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba8:	f7ff ff8f 	bl	8002aca <LL_RCC_PLL_GetMainSource>
 8002bac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80c4 	beq.w	8002d44 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x3e>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d176      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d173      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e353      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x68>
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf6:	e006      	b.n	8002c06 <HAL_RCC_OscConfig+0x76>
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d222      	bcs.n	8002c50 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fd5a 	bl	80036c8 <RCC_SetFlashLatencyFromMSIRange>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e331      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c28:	f043 0308 	orr.w	r3, r3, #8
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fe2b 	bl	80028a4 <LL_RCC_MSI_SetCalibTrimming>
 8002c4e:	e021      	b.n	8002c94 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fe12 	bl	80028a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fd1f 	bl	80036c8 <RCC_SetFlashLatencyFromMSIRange>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e2f6      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c94:	f000 fce0 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4aa7      	ldr	r2, [pc, #668]	; (8002f38 <HAL_RCC_OscConfig+0x3a8>)
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002c9e:	4ba7      	ldr	r3, [pc, #668]	; (8002f3c <HAL_RCC_OscConfig+0x3ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f826 	bl	8001cf4 <HAL_InitTick>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d047      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	e2e5      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02c      	beq.n	8002d18 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cbe:	f7ff fd9e 	bl	80027fe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc2:	f7ff f863 	bl	8001d8c <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cca:	f7ff f85f 	bl	8001d8c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e2d2      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cdc:	f7ff fdab 	bl	8002836 <LL_RCC_MSI_IsReady>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f1      	beq.n	8002cca <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fdc7 	bl	80028a4 <LL_RCC_MSI_SetCalibTrimming>
 8002d16:	e015      	b.n	8002d44 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d18:	f7ff fd7f 	bl	800281a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff f836 	bl	8001d8c <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d24:	f7ff f832 	bl	8001d8c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e2a5      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d36:	f7ff fd7e 	bl	8002836 <LL_RCC_MSI_IsReady>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f1      	bne.n	8002d24 <HAL_RCC_OscConfig+0x194>
 8002d40:	e000      	b.n	8002d44 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d42:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d058      	beq.n	8002e02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1d2>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d108      	bne.n	8002d6e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d105      	bne.n	8002d6e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d14b      	bne.n	8002e02 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e289      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d102      	bne.n	8002d94 <HAL_RCC_OscConfig+0x204>
 8002d8e:	f7ff fc86 	bl	800269e <LL_RCC_HSE_Enable>
 8002d92:	e00d      	b.n	8002db0 <HAL_RCC_OscConfig+0x220>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002d9c:	d104      	bne.n	8002da8 <HAL_RCC_OscConfig+0x218>
 8002d9e:	f7ff fc51 	bl	8002644 <LL_RCC_HSE_EnableTcxo>
 8002da2:	f7ff fc7c 	bl	800269e <LL_RCC_HSE_Enable>
 8002da6:	e003      	b.n	8002db0 <HAL_RCC_OscConfig+0x220>
 8002da8:	f7ff fc87 	bl	80026ba <LL_RCC_HSE_Disable>
 8002dac:	f7ff fc58 	bl	8002660 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe ffe8 	bl	8001d8c <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe ffe4 	bl	8001d8c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e257      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dd2:	f7ff fc80 	bl	80026d6 <LL_RCC_HSE_IsReady>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f1      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x230>
 8002ddc:	e011      	b.n	8002e02 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe ffd5 	bl	8001d8c <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fe ffd1 	bl	8001d8c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e244      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002df8:	f7ff fc6d 	bl	80026d6 <LL_RCC_HSE_IsReady>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f1      	bne.n	8002de6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d046      	beq.n	8002e9c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_OscConfig+0x290>
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d10e      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e22a      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fc8e 	bl	8002752 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e36:	e031      	b.n	8002e9c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d019      	beq.n	8002e74 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	f7ff fc5a 	bl	80026f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe ffa2 	bl	8001d8c <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe ff9e 	bl	8001d8c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e211      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e5e:	f7ff fc67 	bl	8002730 <LL_RCC_HSI_IsReady>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f1      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fc70 	bl	8002752 <LL_RCC_HSI_SetCalibTrimming>
 8002e72:	e013      	b.n	8002e9c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e74:	f7ff fc4e 	bl	8002714 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe ff88 	bl	8001d8c <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fe ff84 	bl	8001d8c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1f7      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e92:	f7ff fc4d 	bl	8002730 <LL_RCC_HSI_IsReady>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f1      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d06e      	beq.n	8002f86 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d056      	beq.n	8002f5e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d031      	beq.n	8002f2c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e1d0      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d013      	beq.n	8002f12 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002eea:	f7ff fc67 	bl	80027bc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eee:	f7fe ff4d 	bl	8001d8c <HAL_GetTick>
 8002ef2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe ff49 	bl	8001d8c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b11      	cmp	r3, #17
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1bc      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f08:	f7ff fc68 	bl	80027dc <LL_RCC_LSI_IsReady>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f1      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	f023 0210 	bic.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2c:	f7ff fc36 	bl	800279c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fe ff2c 	bl	8001d8c <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f36:	e00c      	b.n	8002f52 <HAL_RCC_OscConfig+0x3c2>
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe ff24 	bl	8001d8c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b11      	cmp	r3, #17
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e197      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f52:	f7ff fc43 	bl	80027dc <LL_RCC_LSI_IsReady>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f1      	beq.n	8002f40 <HAL_RCC_OscConfig+0x3b0>
 8002f5c:	e013      	b.n	8002f86 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	f7ff fc2d 	bl	80027bc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fe ff13 	bl	8001d8c <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fe ff0f 	bl	8001d8c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b11      	cmp	r3, #17
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e182      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f7c:	f7ff fc2e 	bl	80027dc <LL_RCC_LSI_IsReady>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f1      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80d8 	beq.w	8003144 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f94:	f7ff fb44 	bl	8002620 <LL_PWR_IsEnabledBkUpAccess>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d113      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f9e:	f7ff fb0d 	bl	80025bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fef3 	bl	8001d8c <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe feef 	bl	8001d8c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e162      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fbc:	f7ff fb30 	bl	8002620 <LL_PWR_IsEnabledBkUpAccess>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f1      	beq.n	8002faa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d07b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b85      	cmp	r3, #133	; 0x85
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fecb 	bl	8001d8c <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe febd 	bl	8001d8c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e12e      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003024:	f7ff fba9 	bl	800277a <LL_RCC_LSE_IsReady>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ef      	beq.n	800300e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b81      	cmp	r3, #129	; 0x81
 8003034:	d003      	beq.n	800303e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b85      	cmp	r3, #133	; 0x85
 800303c:	d121      	bne.n	8003082 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe fea5 	bl	8001d8c <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe fe97 	bl	8001d8c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e108      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ec      	beq.n	800305a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003080:	e060      	b.n	8003144 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe fe83 	bl	8001d8c <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe fe75 	bl	8001d8c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0e6      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ec      	bne.n	800309e <HAL_RCC_OscConfig+0x50e>
 80030c4:	e03e      	b.n	8003144 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fe fe61 	bl	8001d8c <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fe53 	bl	8001d8c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0c4      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ec      	bne.n	80030e2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fe fe40 	bl	8001d8c <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003122:	e00a      	b.n	800313a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fe fe32 	bl	8001d8c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0a3      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800313a:	f7ff fb1e 	bl	800277a <LL_RCC_LSE_IsReady>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ef      	bne.n	8003124 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8099 	beq.w	8003280 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d06c      	beq.n	800322e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	2b02      	cmp	r3, #2
 800315a:	d14b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315c:	f7ff fc74 	bl	8002a48 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe fe14 	bl	8001d8c <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fe fe10 	bl	8001d8c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b0a      	cmp	r3, #10
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e083      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800317a:	f7ff fc73 	bl	8002a64 <LL_RCC_PLL_IsReady>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f1      	bne.n	8003168 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	4b40      	ldr	r3, [pc, #256]	; (800328c <HAL_RCC_OscConfig+0x6fc>)
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003196:	4311      	orrs	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800319c:	0212      	lsls	r2, r2, #8
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031a4:	4311      	orrs	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031b0:	430a      	orrs	r2, r1
 80031b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ba:	f7ff fc37 	bl	8002a2c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe fddd 	bl	8001d8c <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d6:	f7fe fdd9 	bl	8001d8c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b0a      	cmp	r3, #10
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e04c      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80031e8:	f7ff fc3c 	bl	8002a64 <LL_RCC_PLL_IsReady>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f1      	beq.n	80031d6 <HAL_RCC_OscConfig+0x646>
 80031f2:	e045      	b.n	8003280 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	f7ff fc28 	bl	8002a48 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe fdc8 	bl	8001d8c <HAL_GetTick>
 80031fc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe fdc4 	bl	8001d8c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b0a      	cmp	r3, #10
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e037      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003212:	f7ff fc27 	bl	8002a64 <LL_RCC_PLL_IsReady>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f1      	bne.n	8003200 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCC_OscConfig+0x700>)
 8003228:	4013      	ands	r3, r2
 800322a:	60cb      	str	r3, [r1, #12]
 800322c:	e028      	b.n	8003280 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e023      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	429a      	cmp	r2, r3
 800324e:	d115      	bne.n	800327c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	429a      	cmp	r2, r3
 800325c:	d10e      	bne.n	800327c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	429a      	cmp	r2, r3
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	11c1808c 	.word	0x11c1808c
 8003290:	eefefffc 	.word	0xeefefffc

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e12c      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b98      	ldr	r3, [pc, #608]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d91b      	bls.n	80032ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b95      	ldr	r3, [pc, #596]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4993      	ldr	r1, [pc, #588]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c6:	f7fe fd61 	bl	8001d8c <HAL_GetTick>
 80032ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032ce:	f7fe fd5d 	bl	8001d8c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e110      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e0:	4b8a      	ldr	r3, [pc, #552]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d1ef      	bne.n	80032ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fb02 	bl	8002908 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003304:	f7fe fd42 	bl	8001d8c <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800330c:	f7fe fd3e 	bl	8001d8c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0f1      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800331e:	f7ff fbdf 	bl	8002ae0 <LL_RCC_IsActiveFlag_HPRE>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f1      	beq.n	800330c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d016      	beq.n	8003362 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff faf8 	bl	800292e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800333e:	f7fe fd25 	bl	8001d8c <HAL_GetTick>
 8003342:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003346:	f7fe fd21 	bl	8001d8c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0d4      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003358:	f7ff fbd3 	bl	8002b02 <LL_RCC_IsActiveFlag_C2HPRE>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f1      	beq.n	8003346 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff faf0 	bl	8002958 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003378:	f7fe fd08 	bl	8001d8c <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003380:	f7fe fd04 	bl	8001d8c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0b7      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003392:	f7ff fbc8 	bl	8002b26 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f1      	beq.n	8003380 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d016      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fae9 	bl	8002984 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033b2:	f7fe fceb 	bl	8001d8c <HAL_GetTick>
 80033b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033ba:	f7fe fce7 	bl	8001d8c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e09a      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033cc:	f7ff fbbd 	bl	8002b4a <LL_RCC_IsActiveFlag_PPRE1>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f1      	beq.n	80033ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d017      	beq.n	8003412 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fade 	bl	80029aa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033ee:	f7fe fccd 	bl	8001d8c <HAL_GetTick>
 80033f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033f6:	f7fe fcc9 	bl	8001d8c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e07c      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003408:	f7ff fbb0 	bl	8002b6c <LL_RCC_IsActiveFlag_PPRE2>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f1      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d043      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d106      	bne.n	8003434 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003426:	f7ff f956 	bl	80026d6 <LL_RCC_HSE_IsReady>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11e      	bne.n	800346e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e066      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d106      	bne.n	800344a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800343c:	f7ff fb12 	bl	8002a64 <LL_RCC_PLL_IsReady>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d113      	bne.n	800346e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e05b      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003452:	f7ff f9f0 	bl	8002836 <LL_RCC_MSI_IsReady>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e050      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003460:	f7ff f966 	bl	8002730 <LL_RCC_HSI_IsReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e049      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fa2a 	bl	80028cc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe fc88 	bl	8001d8c <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe fc84 	bl	8001d8c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e035      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	f7ff fa2c 	bl	80028f2 <LL_RCC_GetSysClkSource>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d1ec      	bne.n	8003480 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d21b      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	4913      	ldr	r1, [pc, #76]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fe fc62 	bl	8001d8c <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	e008      	b.n	80034de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034cc:	f7fe fc5e 	bl	8001d8c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e011      	b.n	8003502 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x278>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1ef      	bne.n	80034cc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034ec:	f000 f8b4 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <HAL_RCC_ClockConfig+0x27c>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCC_ClockConfig+0x280>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fbfa 	bl	8001cf4 <HAL_InitTick>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	58004000 	.word	0x58004000
 8003510:	20000000 	.word	0x20000000
 8003514:	20000008 	.word	0x20000008

08003518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003526:	f7ff f9e4 	bl	80028f2 <LL_RCC_GetSysClkSource>
 800352a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352c:	f7ff facd 	bl	8002aca <LL_RCC_PLL_GetMainSource>
 8003530:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d139      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d136      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003544:	f7ff f987 	bl	8002856 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <HAL_RCC_GetSysClockFreq+0x62>
 800354e:	f7ff f982 	bl	8002856 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003552:	4603      	mov	r3, r0
 8003554:	2b01      	cmp	r3, #1
 8003556:	d106      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x4e>
 8003558:	f7ff f98d 	bl	8002876 <LL_RCC_MSI_GetRange>
 800355c:	4603      	mov	r3, r0
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	e005      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x5a>
 8003566:	f7ff f991 	bl	800288c <LL_RCC_MSI_GetRangeAfterStandby>
 800356a:	4603      	mov	r3, r0
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	4a36      	ldr	r2, [pc, #216]	; (800364c <HAL_RCC_GetSysClockFreq+0x134>)
 8003574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003578:	e014      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x8c>
 800357a:	f7ff f96c 	bl	8002856 <LL_RCC_MSI_IsEnabledRangeSelect>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_GetSysClockFreq+0x7a>
 8003584:	f7ff f977 	bl	8002876 <LL_RCC_MSI_GetRange>
 8003588:	4603      	mov	r3, r0
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	e005      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x86>
 8003592:	f7ff f97b 	bl	800288c <LL_RCC_MSI_GetRangeAfterStandby>
 8003596:	4603      	mov	r3, r0
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	4a2b      	ldr	r2, [pc, #172]	; (800364c <HAL_RCC_GetSysClockFreq+0x134>)
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d115      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035b0:	e012      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d102      	bne.n	80035be <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <HAL_RCC_GetSysClockFreq+0x138>)
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e00c      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d109      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035c4:	f7ff f85a 	bl	800267c <LL_RCC_HSE_IsEnabledDiv2>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_RCC_GetSysClockFreq+0x138>)
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e001      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035d4:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_RCC_GetSysClockFreq+0x13c>)
 80035d6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d8:	f7ff f98b 	bl	80028f2 <LL_RCC_GetSysClkSource>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d12f      	bne.n	8003642 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80035e2:	f7ff fa72 	bl	8002aca <LL_RCC_PLL_GetMainSource>
 80035e6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0xde>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d003      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0xe4>
 80035f4:	e00d      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80035f6:	4b16      	ldr	r3, [pc, #88]	; (8003650 <HAL_RCC_GetSysClockFreq+0x138>)
 80035f8:	60fb      	str	r3, [r7, #12]
        break;
 80035fa:	e00d      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035fc:	f7ff f83e 	bl	800267c <LL_RCC_HSE_IsEnabledDiv2>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_GetSysClockFreq+0x138>)
 8003608:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800360a:	e005      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_RCC_GetSysClockFreq+0x13c>)
 800360e:	60fb      	str	r3, [r7, #12]
        break;
 8003610:	e002      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	60fb      	str	r3, [r7, #12]
        break;
 8003616:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003618:	f7ff fa35 	bl	8002a86 <LL_RCC_PLL_GetN>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	fb03 f402 	mul.w	r4, r3, r2
 8003624:	f7ff fa46 	bl	8002ab4 <LL_RCC_PLL_GetDivider>
 8003628:	4603      	mov	r3, r0
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	3301      	adds	r3, #1
 800362e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003632:	f7ff fa34 	bl	8002a9e <LL_RCC_PLL_GetR>
 8003636:	4603      	mov	r3, r0
 8003638:	0f5b      	lsrs	r3, r3, #29
 800363a:	3301      	adds	r3, #1
 800363c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003640:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003642:	697b      	ldr	r3, [r7, #20]
}
 8003644:	4618      	mov	r0, r3
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd90      	pop	{r4, r7, pc}
 800364c:	0800714c 	.word	0x0800714c
 8003650:	00f42400 	.word	0x00f42400
 8003654:	01e84800 	.word	0x01e84800

08003658 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b598      	push	{r3, r4, r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800365c:	f7ff ff5c 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8003660:	4604      	mov	r4, r0
 8003662:	f7ff f9b5 	bl	80029d0 <LL_RCC_GetAHBPrescaler>
 8003666:	4603      	mov	r3, r0
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	4a03      	ldr	r2, [pc, #12]	; (800367c <HAL_RCC_GetHCLKFreq+0x24>)
 8003670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003674:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd98      	pop	{r3, r4, r7, pc}
 800367c:	080070ec 	.word	0x080070ec

08003680 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b598      	push	{r3, r4, r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003684:	f7ff ffe8 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003688:	4604      	mov	r4, r0
 800368a:	f7ff f9b9 	bl	8002a00 <LL_RCC_GetAPB1Prescaler>
 800368e:	4603      	mov	r3, r0
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	fa24 f303 	lsr.w	r3, r4, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd98      	pop	{r3, r4, r7, pc}
 80036a0:	0800712c 	.word	0x0800712c

080036a4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b598      	push	{r3, r4, r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80036a8:	f7ff ffd6 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036ac:	4604      	mov	r4, r0
 80036ae:	f7ff f9b2 	bl	8002a16 <LL_RCC_GetAPB2Prescaler>
 80036b2:	4603      	mov	r3, r0
 80036b4:	0adb      	lsrs	r3, r3, #11
 80036b6:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd98      	pop	{r3, r4, r7, pc}
 80036c4:	0800712c 	.word	0x0800712c

080036c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	4a10      	ldr	r2, [pc, #64]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80036e0:	f7ff f981 	bl	80029e6 <LL_RCC_GetAHB3Prescaler>
 80036e4:	4603      	mov	r3, r0
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a09      	ldr	r2, [pc, #36]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	0c9c      	lsrs	r4, r3, #18
 8003704:	f7fe ff76 	bl	80025f4 <HAL_PWREx_GetVoltageRange>
 8003708:	4603      	mov	r3, r0
 800370a:	4619      	mov	r1, r3
 800370c:	4620      	mov	r0, r4
 800370e:	f000 f80b 	bl	8003728 <RCC_SetFlashLatency>
 8003712:	4603      	mov	r3, r0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}
 800371c:	0800714c 	.word	0x0800714c
 8003720:	080070ec 	.word	0x080070ec
 8003724:	431bde83 	.word	0x431bde83

08003728 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08e      	sub	sp, #56	; 0x38
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <RCC_SetFlashLatency+0xf4>)
 8003734:	f107 0320 	add.w	r3, r7, #32
 8003738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800373c:	6018      	str	r0, [r3, #0]
 800373e:	3304      	adds	r3, #4
 8003740:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003742:	4a37      	ldr	r2, [pc, #220]	; (8003820 <RCC_SetFlashLatency+0xf8>)
 8003744:	f107 0318 	add.w	r3, r7, #24
 8003748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800374c:	6018      	str	r0, [r3, #0]
 800374e:	3304      	adds	r3, #4
 8003750:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003752:	4a34      	ldr	r2, [pc, #208]	; (8003824 <RCC_SetFlashLatency+0xfc>)
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	ca07      	ldmia	r2, {r0, r1, r2}
 800375a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800375e:	2300      	movs	r3, #0
 8003760:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d11b      	bne.n	80037a2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800376a:	2300      	movs	r3, #0
 800376c:	633b      	str	r3, [r7, #48]	; 0x30
 800376e:	e014      	b.n	800379a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	3338      	adds	r3, #56	; 0x38
 8003776:	443b      	add	r3, r7
 8003778:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800377c:	461a      	mov	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4293      	cmp	r3, r2
 8003782:	d807      	bhi.n	8003794 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	3338      	adds	r3, #56	; 0x38
 800378a:	443b      	add	r3, r7
 800378c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003792:	e021      	b.n	80037d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	3301      	adds	r3, #1
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	2b02      	cmp	r3, #2
 800379e:	d9e7      	bls.n	8003770 <RCC_SetFlashLatency+0x48>
 80037a0:	e01a      	b.n	80037d8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a6:	e014      	b.n	80037d2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	3338      	adds	r3, #56	; 0x38
 80037ae:	443b      	add	r3, r7
 80037b0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80037b4:	461a      	mov	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d807      	bhi.n	80037cc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	3338      	adds	r3, #56	; 0x38
 80037c2:	443b      	add	r3, r7
 80037c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037ca:	e005      	b.n	80037d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	3301      	adds	r3, #1
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d9e7      	bls.n	80037a8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <RCC_SetFlashLatency+0x100>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 0207 	bic.w	r2, r3, #7
 80037e0:	4911      	ldr	r1, [pc, #68]	; (8003828 <RCC_SetFlashLatency+0x100>)
 80037e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037e8:	f7fe fad0 	bl	8001d8c <HAL_GetTick>
 80037ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037ee:	e008      	b.n	8003802 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037f0:	f7fe facc 	bl	8001d8c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e007      	b.n	8003812 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <RCC_SetFlashLatency+0x100>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380c:	429a      	cmp	r2, r3
 800380e:	d1ef      	bne.n	80037f0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3738      	adds	r7, #56	; 0x38
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	080070d0 	.word	0x080070d0
 8003820:	080070d8 	.word	0x080070d8
 8003824:	080070e0 	.word	0x080070e0
 8003828:	58004000 	.word	0x58004000

0800382c <LL_RCC_LSE_IsReady>:
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d101      	bne.n	8003844 <LL_RCC_LSE_IsReady+0x18>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <LL_RCC_LSE_IsReady+0x1a>
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <LL_RCC_SetUSARTClockSource>:
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	43db      	mvns	r3, r3
 8003864:	401a      	ands	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <LL_RCC_SetI2SClockSource>:
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <LL_RCC_SetLPUARTClockSource>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <LL_RCC_SetI2CClockSource>:
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80038f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <LL_RCC_SetLPTIMClockSource>:
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003916:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <LL_RCC_SetRNGClockSource>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <LL_RCC_SetADCClockSource>:
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800397a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <LL_RCC_SetRTCClockSource>:
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_GetRTCClockSource>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <LL_RCC_ForceBackupDomainReset>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003a20:	2300      	movs	r3, #0
 8003a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d058      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003a34:	f7fe fdc2 	bl	80025bc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a38:	f7fe f9a8 	bl	8001d8c <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a3e:	e009      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fe f9a4 	bl	8001d8c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d902      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	74fb      	strb	r3, [r7, #19]
        break;
 8003a52:	e006      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a54:	4b7b      	ldr	r3, [pc, #492]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a60:	d1ee      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d13c      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003a68:	f7ff ffa7 	bl	80039ba <LL_RCC_GetRTCClockSource>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d00f      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a82:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a84:	f7ff ffa5 	bl	80039d2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a88:	f7ff ffb3 	bl	80039f2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d014      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f974 	bl	8001d8c <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fe f970 	bl	8001d8c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d902      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	74fb      	strb	r3, [r7, #19]
            break;
 8003abe:	e004      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ac0:	f7ff feb4 	bl	800382c <LL_RCC_LSE_IsReady>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d1ee      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff5b 	bl	8003990 <LL_RCC_SetRTCClockSource>
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fea9 	bl	800384e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fe9e 	bl	800384e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fec0 	bl	80038a8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fee6 	bl	800390a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fedb 	bl	800390a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fed0 	bl	800390a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fea9 	bl	80038d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fe9e 	bl	80038d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fe93 	bl	80038d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d011      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fe5e 	bl	800387e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bca:	d107      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d010      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fea5 	bl	800393c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c08:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d011      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fea3 	bl	8003966 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d107      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003c3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	58000400 	.word	0x58000400

08003c48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d071      	beq.n	8003d3e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fe20 	bl	80018b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c7c:	4b32      	ldr	r3, [pc, #200]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d051      	beq.n	8003d2c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c88:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003c8a:	22ca      	movs	r2, #202	; 0xca
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003c90:	2253      	movs	r2, #83	; 0x53
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fbe3 	bl	8004460 <RTC_EnterInitMode>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d13f      	bne.n	8003d24 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003ca4:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003caa:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cb2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	4319      	orrs	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	491f      	ldr	r1, [pc, #124]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	491b      	ldr	r1, [pc, #108]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003cde:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	4915      	ldr	r1, [pc, #84]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fbe6 	bl	80044c8 <RTC_ExitInitMode>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10e      	bne.n	8003d24 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a19      	ldr	r1, [r3, #32]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4319      	orrs	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_RTC_Init+0x100>)
 8003d26:	22ff      	movs	r2, #255	; 0xff
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
 8003d2a:	e001      	b.n	8003d30 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40002800 	.word	0x40002800

08003d4c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_RTC_SetTime+0x1a>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e088      	b.n	8003e78 <HAL_RTC_SetTime+0x12c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d76:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003d78:	22ca      	movs	r2, #202	; 0xca
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d7c:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003d7e:	2253      	movs	r2, #83	; 0x53
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fb6c 	bl	8004460 <RTC_EnterInitMode>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d15e      	bne.n	8003e50 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9e:	d057      	beq.n	8003e50 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d125      	bne.n	8003df2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fbc1 	bl	8004544 <RTC_ByteToBcd2>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fbba 	bl	8004544 <RTC_ByteToBcd2>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003dd4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	789b      	ldrb	r3, [r3, #2]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fbb2 	bl	8004544 <RTC_ByteToBcd2>
 8003de0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003de2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	78db      	ldrb	r3, [r3, #3]
 8003dea:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e017      	b.n	8003e22 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003df2:	4b23      	ldr	r3, [pc, #140]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	785b      	ldrb	r3, [r3, #1]
 8003e0e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e10:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e16:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	78db      	ldrb	r3, [r3, #3]
 8003e1c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003e22:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003e2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e2e:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	68d9      	ldr	r1, [r3, #12]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	490d      	ldr	r1, [pc, #52]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fb39 	bl	80044c8 <RTC_ExitInitMode>
 8003e56:	4603      	mov	r3, r0
 8003e58:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RTC_SetTime+0x134>)
 8003e5c:	22ff      	movs	r2, #255	; 0xff
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd90      	pop	{r4, r7, pc}
 8003e80:	40002800 	.word	0x40002800

08003e84 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003e90:	4b2c      	ldr	r3, [pc, #176]	; (8003f44 <HAL_RTC_GetTime+0xc0>)
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003e98:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <HAL_RTC_GetTime+0xc0>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea4:	d049      	beq.n	8003f3a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <HAL_RTC_GetTime+0xc0>)
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_RTC_GetTime+0xc0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003eba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ebe:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	0d9b      	lsrs	r3, r3, #22
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11a      	bne.n	8003f3a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fb3a 	bl	8004582 <RTC_Bcd2ToByte>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb31 	bl	8004582 <RTC_Bcd2ToByte>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	789b      	ldrb	r3, [r3, #2]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fb28 	bl	8004582 <RTC_Bcd2ToByte>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40002800 	.word	0x40002800

08003f48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_RTC_SetDate+0x1a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e071      	b.n	8004046 <HAL_RTC_SetDate+0xfe>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10e      	bne.n	8003f96 <HAL_RTC_SetDate+0x4e>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	f023 0310 	bic.w	r3, r3, #16
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	330a      	adds	r3, #10
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11c      	bne.n	8003fd6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	78db      	ldrb	r3, [r3, #3]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 facf 	bl	8004544 <RTC_ByteToBcd2>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fac8 	bl	8004544 <RTC_ByteToBcd2>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003fb8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	789b      	ldrb	r3, [r3, #2]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fac0 	bl	8004544 <RTC_ByteToBcd2>
 8003fc4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003fc6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e00e      	b.n	8003ff4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	78db      	ldrb	r3, [r3, #3]
 8003fda:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003fe2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003fe8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff4:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_RTC_SetDate+0x108>)
 8003ff6:	22ca      	movs	r2, #202	; 0xca
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RTC_SetDate+0x108>)
 8003ffc:	2253      	movs	r2, #83	; 0x53
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fa2d 	bl	8004460 <RTC_EnterInitMode>
 8004006:	4603      	mov	r3, r0
 8004008:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <HAL_RTC_SetDate+0x108>)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004018:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800401c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa52 	bl	80044c8 <RTC_ExitInitMode>
 8004024:	4603      	mov	r3, r0
 8004026:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RTC_SetDate+0x108>)
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d103      	bne.n	800403c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	40002800 	.word	0x40002800

08004054 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8004060:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RTC_GetDate+0x98>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004068:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800406c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	0b5b      	lsrs	r3, r3, #13
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d11a      	bne.n	80040e2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	78db      	ldrb	r3, [r3, #3]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fa66 	bl	8004582 <RTC_Bcd2ToByte>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa5d 	bl	8004582 <RTC_Bcd2ToByte>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	789b      	ldrb	r3, [r3, #2]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fa54 	bl	8004582 <RTC_Bcd2ToByte>
 80040da:	4603      	mov	r3, r0
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40002800 	.word	0x40002800

080040f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_RTC_SetAlarm_IT+0x1e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0f3      	b.n	80042f6 <HAL_RTC_SetAlarm_IT+0x206>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800411e:	4b78      	ldr	r3, [pc, #480]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d06a      	beq.n	8004206 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d13a      	bne.n	80041ac <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004136:	4b72      	ldr	r3, [pc, #456]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2200      	movs	r2, #0
 8004146:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f9f5 	bl	8004544 <RTC_ByteToBcd2>
 800415a:	4603      	mov	r3, r0
 800415c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	785b      	ldrb	r3, [r3, #1]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f9ee 	bl	8004544 <RTC_ByteToBcd2>
 8004168:	4603      	mov	r3, r0
 800416a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800416c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	789b      	ldrb	r3, [r3, #2]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f9e6 	bl	8004544 <RTC_ByteToBcd2>
 8004178:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800417a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	78db      	ldrb	r3, [r3, #3]
 8004182:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004184:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f9d8 	bl	8004544 <RTC_ByteToBcd2>
 8004194:	4603      	mov	r3, r0
 8004196:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004198:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80041a0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e02c      	b.n	8004206 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80041b4:	d00d      	beq.n	80041d2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041be:	d008      	beq.n	80041d2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80041c0:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041de:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041e4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	78db      	ldrb	r3, [r3, #3]
 80041ea:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80041ec:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041f4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80041f6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80041fc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004206:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004208:	22ca      	movs	r2, #202	; 0xca
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
 800420c:	4b3c      	ldr	r3, [pc, #240]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800420e:	2253      	movs	r2, #83	; 0x53
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	d12c      	bne.n	8004276 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800421c:	4b38      	ldr	r3, [pc, #224]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4a37      	ldr	r2, [pc, #220]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004222:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004226:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004228:	4b35      	ldr	r3, [pc, #212]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800422a:	2201      	movs	r2, #1
 800422c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d107      	bne.n	8004246 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	4930      	ldr	r1, [pc, #192]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004240:	4313      	orrs	r3, r2
 8004242:	644b      	str	r3, [r1, #68]	; 0x44
 8004244:	e006      	b.n	8004254 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004246:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800424c:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004254:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004268:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4a24      	ldr	r2, [pc, #144]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800426e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004272:	6193      	str	r3, [r2, #24]
 8004274:	e02b      	b.n	80042ce <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800427c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004280:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004282:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 8004284:	2202      	movs	r2, #2
 8004286:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d107      	bne.n	80042a0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4919      	ldr	r1, [pc, #100]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 800429a:	4313      	orrs	r3, r2
 800429c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800429e:	e006      	b.n	80042ae <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80042a0:	4a17      	ldr	r2, [pc, #92]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80042ae:	4a14      	ldr	r2, [pc, #80]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 80042c8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80042cc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RTC_SetAlarm_IT+0x214>)
 80042d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <HAL_RTC_SetAlarm_IT+0x214>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_RTC_SetAlarm_IT+0x210>)
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd90      	pop	{r4, r7, pc}
 80042fe:	bf00      	nop
 8004300:	40002800 	.word	0x40002800
 8004304:	58000800 	.word	0x58000800

08004308 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_RTC_DeactivateAlarm+0x18>
 800431c:	2302      	movs	r3, #2
 800431e:	e048      	b.n	80043b2 <HAL_RTC_DeactivateAlarm+0xaa>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004330:	4b22      	ldr	r3, [pc, #136]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004332:	22ca      	movs	r2, #202	; 0xca
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004338:	2253      	movs	r2, #83	; 0x53
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004342:	d115      	bne.n	8004370 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 800434a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800434e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800435a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f023 0201 	bic.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 800436a:	2201      	movs	r2, #1
 800436c:	65da      	str	r2, [r3, #92]	; 0x5c
 800436e:	e014      	b.n	800439a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004370:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004376:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800437a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 800437e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004382:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004386:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	f023 0202 	bic.w	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004396:	2202      	movs	r2, #2
 8004398:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_RTC_DeactivateAlarm+0xb4>)
 800439c:	22ff      	movs	r2, #255	; 0xff
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	40002800 	.word	0x40002800

080043c0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_RTC_AlarmIRQHandler+0x50>)
 80043ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4013      	ands	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_RTC_AlarmIRQHandler+0x50>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fc fca1 	bl	8000d2c <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RTC_AlarmIRQHandler+0x50>)
 80043f6:	2202      	movs	r2, #2
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8dc 	bl	80045b8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40002800 	.word	0x40002800

08004414 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_RTC_WaitForSynchro+0x48>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4a0e      	ldr	r2, [pc, #56]	; (800445c <HAL_RTC_WaitForSynchro+0x48>)
 8004422:	f023 0320 	bic.w	r3, r3, #32
 8004426:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004428:	f7fd fcb0 	bl	8001d8c <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800442e:	e009      	b.n	8004444 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004430:	f7fd fcac 	bl	8001d8c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443e:	d901      	bls.n	8004444 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e006      	b.n	8004452 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RTC_WaitForSynchro+0x48>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ef      	beq.n	8004430 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40002800 	.word	0x40002800

08004460 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800446c:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <RTC_EnterInitMode+0x64>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d120      	bne.n	80044ba <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <RTC_EnterInitMode+0x64>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a11      	ldr	r2, [pc, #68]	; (80044c4 <RTC_EnterInitMode+0x64>)
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004484:	f7fd fc82 	bl	8001d8c <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800448a:	e00d      	b.n	80044a8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800448c:	f7fd fc7e 	bl	8001d8c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800449a:	d905      	bls.n	80044a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2203      	movs	r2, #3
 80044a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <RTC_EnterInitMode+0x64>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <RTC_EnterInitMode+0x5a>
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d1e8      	bne.n	800448c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40002800 	.word	0x40002800

080044c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <RTC_ExitInitMode+0x78>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <RTC_ExitInitMode+0x78>)
 80044da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044de:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <RTC_ExitInitMode+0x78>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10c      	bne.n	8004506 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ff91 	bl	8004414 <HAL_RTC_WaitForSynchro>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01e      	beq.n	8004536 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2203      	movs	r2, #3
 80044fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e017      	b.n	8004536 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <RTC_ExitInitMode+0x78>)
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <RTC_ExitInitMode+0x78>)
 800450c:	f023 0320 	bic.w	r3, r3, #32
 8004510:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ff7e 	bl	8004414 <HAL_RTC_WaitForSynchro>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <RTC_ExitInitMode+0x78>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	4a04      	ldr	r2, [pc, #16]	; (8004540 <RTC_ExitInitMode+0x78>)
 8004530:	f043 0320 	orr.w	r3, r3, #32
 8004534:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40002800 	.word	0x40002800

08004544 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004556:	e005      	b.n	8004564 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	3b0a      	subs	r3, #10
 8004562:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004564:	7afb      	ldrb	r3, [r7, #11]
 8004566:	2b09      	cmp	r3, #9
 8004568:	d8f6      	bhi.n	8004558 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	b2da      	uxtb	r2, r3
 8004572:	7afb      	ldrb	r3, [r7, #11]
 8004574:	4313      	orrs	r3, r2
 8004576:	b2db      	uxtb	r3, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004582:	b480      	push	{r7}
 8004584:	b085      	sub	sp, #20
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	b2db      	uxtb	r3, r3
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_GetUSARTClockSource>:
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	401a      	ands	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	4313      	orrs	r3, r2
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_GetLPUARTClockSource>:
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80045f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4013      	ands	r3, r2
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e042      	b.n	80046a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fd f96b 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2224      	movs	r2, #36	; 0x24
 800463a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fc2e 	bl	8004eb0 <UART_SetConfig>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e022      	b.n	80046a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fe96 	bl	8005398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800467a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800468a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 ff1c 	bl	80054da <UART_CheckIdleState>
 80046a2:	4603      	mov	r3, r0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d173      	bne.n	80047ae <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_UART_Transmit+0x26>
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06c      	b.n	80047b0 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2221      	movs	r2, #33	; 0x21
 80046e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e6:	f7fd fb51 	bl	8001d8c <HAL_GetTick>
 80046ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d108      	bne.n	8004718 <HAL_UART_Transmit+0x6c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e003      	b.n	8004720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004720:	e02c      	b.n	800477c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 ff22 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e039      	b.n	80047b0 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e007      	b.n	800476a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1cc      	bne.n	8004722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 feef 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e006      	b.n	80047b0 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d137      	bne.n	8004840 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_UART_Receive_IT+0x24>
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e030      	b.n	8004842 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_UART_Receive_IT+0x94>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01f      	beq.n	8004830 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	613b      	str	r3, [r7, #16]
   return(result);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	69f9      	ldr	r1, [r7, #28]
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	61bb      	str	r3, [r7, #24]
   return(result);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e6      	bne.n	80047fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	461a      	mov	r2, r3
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 ff66 	bl	8005708 <UART_Start_Receive_IT>
 800483c:	4603      	mov	r3, r0
 800483e:	e000      	b.n	8004842 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3728      	adds	r7, #40	; 0x28
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40008000 	.word	0x40008000

08004850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b0ba      	sub	sp, #232	; 0xe8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004876:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800487a:	f640 030f 	movw	r3, #2063	; 0x80f
 800487e:	4013      	ands	r3, r2
 8004880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11b      	bne.n	80048c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 82e3 	beq.w	8004e80 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
      }
      return;
 80048c2:	e2dd      	b.n	8004e80 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8123 	beq.w	8004b14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048d2:	4b8d      	ldr	r3, [pc, #564]	; (8004b08 <HAL_UART_IRQHandler+0x2b8>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048de:	4b8b      	ldr	r3, [pc, #556]	; (8004b0c <HAL_UART_IRQHandler+0x2bc>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8116 	beq.w	8004b14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d011      	beq.n	8004918 <HAL_UART_IRQHandler+0xc8>
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	f043 0201 	orr.w	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d011      	beq.n	8004948 <HAL_UART_IRQHandler+0xf8>
 8004924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2202      	movs	r2, #2
 8004936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	f043 0204 	orr.w	r2, r3, #4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_UART_IRQHandler+0x128>
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2204      	movs	r2, #4
 8004966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f043 0202 	orr.w	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004990:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004994:	4b5c      	ldr	r3, [pc, #368]	; (8004b08 <HAL_UART_IRQHandler+0x2b8>)
 8004996:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2208      	movs	r2, #8
 80049a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f043 0208 	orr.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <HAL_UART_IRQHandler+0x196>
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8249 	beq.w	8004e84 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d013      	beq.n	8004a26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d054      	beq.n	8004af4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 ff7c 	bl	8005948 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d146      	bne.n	8004aec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3308      	adds	r3, #8
 8004a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1d9      	bne.n	8004a5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <HAL_UART_IRQHandler+0x2c0>)
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd fad4 	bl	8002072 <HAL_DMA_Abort_IT>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d019      	beq.n	8004b04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae2:	e00f      	b.n	8004b04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc f8d9 	bl	8000c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aea:	e00b      	b.n	8004b04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fc f8d5 	bl	8000c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af2:	e007      	b.n	8004b04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc f8d1 	bl	8000c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004b02:	e1bf      	b.n	8004e84 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	bf00      	nop
    return;
 8004b06:	e1bd      	b.n	8004e84 <HAL_UART_IRQHandler+0x634>
 8004b08:	10000001 	.word	0x10000001
 8004b0c:	04000120 	.word	0x04000120
 8004b10:	08005a13 	.word	0x08005a13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	f040 8153 	bne.w	8004dc4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 814c 	beq.w	8004dc4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8145 	beq.w	8004dc4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2210      	movs	r2, #16
 8004b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	f040 80bb 	bne.w	8004cc8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 818f 	beq.w	8004e88 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b74:	429a      	cmp	r2, r3
 8004b76:	f080 8187 	bcs.w	8004e88 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 8087 	bne.w	8004ca6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1da      	bne.n	8004b98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3308      	adds	r3, #8
 8004be8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3308      	adds	r3, #8
 8004c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e1      	bne.n	8004be2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e3      	bne.n	8004c1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	f023 0310 	bic.w	r3, r3, #16
 8004c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e4      	bne.n	8004c64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd f988 	bl	8001fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8e9 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cc6:	e0df      	b.n	8004e88 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80d1 	beq.w	8004e8c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80cc 	beq.w	8004e8c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d16:	647b      	str	r3, [r7, #68]	; 0x44
 8004d18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e4      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d52:	633a      	str	r2, [r7, #48]	; 0x30
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e1      	bne.n	8004d2a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0310 	bic.w	r3, r3, #16
 8004d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	69b9      	ldr	r1, [r7, #24]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	617b      	str	r3, [r7, #20]
   return(result);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e4      	bne.n	8004d7a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f86b 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dc2:	e063      	b.n	8004e8c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <HAL_UART_IRQHandler+0x59e>
 8004dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fb70 	bl	80064cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dec:	e051      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d014      	beq.n	8004e24 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d03a      	beq.n	8004e90 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4798      	blx	r3
    }
    return;
 8004e22:	e035      	b.n	8004e90 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_UART_IRQHandler+0x5f4>
 8004e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fdfe 	bl	8005a3e <UART_EndTransmit_IT>
    return;
 8004e42:	e026      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <HAL_UART_IRQHandler+0x614>
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f001 fb47 	bl	80064f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e62:	e016      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d010      	beq.n	8004e92 <HAL_UART_IRQHandler+0x642>
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	da0c      	bge.n	8004e92 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 fb30 	bl	80064de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e7e:	e008      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
      return;
 8004e80:	bf00      	nop
 8004e82:	e006      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
    return;
 8004e84:	bf00      	nop
 8004e86:	e004      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
      return;
 8004e88:	bf00      	nop
 8004e8a:	e002      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
      return;
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_IRQHandler+0x642>
    return;
 8004e90:	bf00      	nop
  }
}
 8004e92:	37e8      	adds	r7, #232	; 0xe8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
	...

08004eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb4:	b08c      	sub	sp, #48	; 0x30
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b94      	ldr	r3, [pc, #592]	; (8005130 <UART_SetConfig+0x280>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a89      	ldr	r2, [pc, #548]	; (8005134 <UART_SetConfig+0x284>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	f023 010f 	bic.w	r1, r3, #15
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a7a      	ldr	r2, [pc, #488]	; (8005138 <UART_SetConfig+0x288>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d127      	bne.n	8004fa4 <UART_SetConfig+0xf4>
 8004f54:	2003      	movs	r0, #3
 8004f56:	f7ff fb38 	bl	80045ca <LL_RCC_GetUSARTClockSource>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d81b      	bhi.n	8004f9c <UART_SetConfig+0xec>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0xbc>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f82:	e080      	b.n	8005086 <UART_SetConfig+0x1d6>
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8a:	e07c      	b.n	8005086 <UART_SetConfig+0x1d6>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f92:	e078      	b.n	8005086 <UART_SetConfig+0x1d6>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9a:	e074      	b.n	8005086 <UART_SetConfig+0x1d6>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa2:	e070      	b.n	8005086 <UART_SetConfig+0x1d6>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a64      	ldr	r2, [pc, #400]	; (800513c <UART_SetConfig+0x28c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d138      	bne.n	8005020 <UART_SetConfig+0x170>
 8004fae:	200c      	movs	r0, #12
 8004fb0:	f7ff fb0b 	bl	80045ca <LL_RCC_GetUSARTClockSource>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d82c      	bhi.n	8005018 <UART_SetConfig+0x168>
 8004fbe:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x114>)
 8004fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	08005019 	.word	0x08005019
 8004fcc:	08005019 	.word	0x08005019
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	08005009 	.word	0x08005009
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	08005019 	.word	0x08005019
 8004fe0:	08005019 	.word	0x08005019
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005011 	.word	0x08005011
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffe:	e042      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005000:	2302      	movs	r3, #2
 8005002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005006:	e03e      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500e:	e03a      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005016:	e036      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501e:	e032      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a43      	ldr	r2, [pc, #268]	; (8005134 <UART_SetConfig+0x284>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d12a      	bne.n	8005080 <UART_SetConfig+0x1d0>
 800502a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800502e:	f7ff fade 	bl	80045ee <LL_RCC_GetLPUARTClockSource>
 8005032:	4603      	mov	r3, r0
 8005034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005038:	d01a      	beq.n	8005070 <UART_SetConfig+0x1c0>
 800503a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800503e:	d81b      	bhi.n	8005078 <UART_SetConfig+0x1c8>
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d00c      	beq.n	8005060 <UART_SetConfig+0x1b0>
 8005046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504a:	d815      	bhi.n	8005078 <UART_SetConfig+0x1c8>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <UART_SetConfig+0x1a8>
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005054:	d008      	beq.n	8005068 <UART_SetConfig+0x1b8>
 8005056:	e00f      	b.n	8005078 <UART_SetConfig+0x1c8>
 8005058:	2300      	movs	r3, #0
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505e:	e012      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005060:	2302      	movs	r3, #2
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005066:	e00e      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005068:	2304      	movs	r3, #4
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506e:	e00a      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005070:	2308      	movs	r3, #8
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005076:	e006      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005078:	2310      	movs	r3, #16
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507e:	e002      	b.n	8005086 <UART_SetConfig+0x1d6>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <UART_SetConfig+0x284>)
 800508c:	4293      	cmp	r3, r2
 800508e:	f040 80a4 	bne.w	80051da <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005096:	2b08      	cmp	r3, #8
 8005098:	d823      	bhi.n	80050e2 <UART_SetConfig+0x232>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <UART_SetConfig+0x1f0>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050e3 	.word	0x080050e3
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050e3 	.word	0x080050e3
 80050b0:	080050d3 	.word	0x080050d3
 80050b4:	080050e3 	.word	0x080050e3
 80050b8:	080050e3 	.word	0x080050e3
 80050bc:	080050e3 	.word	0x080050e3
 80050c0:	080050db 	.word	0x080050db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c4:	f7fe fadc 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050ca:	e010      	b.n	80050ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <UART_SetConfig+0x290>)
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050d0:	e00d      	b.n	80050ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d2:	f7fe fa21 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050d8:	e009      	b.n	80050ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050e0:	e005      	b.n	80050ee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8137 	beq.w	8005364 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <UART_SetConfig+0x294>)
 80050fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005100:	461a      	mov	r2, r3
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	fbb3 f3f2 	udiv	r3, r3, r2
 8005108:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	4413      	add	r3, r2
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	429a      	cmp	r2, r3
 8005118:	d305      	bcc.n	8005126 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	429a      	cmp	r2, r3
 8005124:	d910      	bls.n	8005148 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800512c:	e11a      	b.n	8005364 <UART_SetConfig+0x4b4>
 800512e:	bf00      	nop
 8005130:	cfff69f3 	.word	0xcfff69f3
 8005134:	40008000 	.word	0x40008000
 8005138:	40013800 	.word	0x40013800
 800513c:	40004400 	.word	0x40004400
 8005140:	00f42400 	.word	0x00f42400
 8005144:	0800718c 	.word	0x0800718c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	2200      	movs	r2, #0
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	60fa      	str	r2, [r7, #12]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	4a8e      	ldr	r2, [pc, #568]	; (8005390 <UART_SetConfig+0x4e0>)
 8005156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515a:	b29b      	uxth	r3, r3
 800515c:	2200      	movs	r2, #0
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800516a:	f7fb f859 	bl	8000220 <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	020b      	lsls	r3, r1, #8
 8005180:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005184:	0202      	lsls	r2, r0, #8
 8005186:	6979      	ldr	r1, [r7, #20]
 8005188:	6849      	ldr	r1, [r1, #4]
 800518a:	0849      	lsrs	r1, r1, #1
 800518c:	2000      	movs	r0, #0
 800518e:	460c      	mov	r4, r1
 8005190:	4605      	mov	r5, r0
 8005192:	eb12 0804 	adds.w	r8, r2, r4
 8005196:	eb43 0905 	adc.w	r9, r3, r5
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	469a      	mov	sl, r3
 80051a2:	4693      	mov	fp, r2
 80051a4:	4652      	mov	r2, sl
 80051a6:	465b      	mov	r3, fp
 80051a8:	4640      	mov	r0, r8
 80051aa:	4649      	mov	r1, r9
 80051ac:	f7fb f838 	bl	8000220 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4613      	mov	r3, r2
 80051b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051be:	d308      	bcc.n	80051d2 <UART_SetConfig+0x322>
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c6:	d204      	bcs.n	80051d2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	60da      	str	r2, [r3, #12]
 80051d0:	e0c8      	b.n	8005364 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051d8:	e0c4      	b.n	8005364 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e2:	d167      	bne.n	80052b4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80051e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d828      	bhi.n	800523e <UART_SetConfig+0x38e>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0x344>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005229 	.word	0x08005229
 8005200:	0800523f 	.word	0x0800523f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800523f 	.word	0x0800523f
 8005210:	0800523f 	.word	0x0800523f
 8005214:	08005237 	.word	0x08005237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fe fa32 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800521e:	e014      	b.n	800524a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7fe fa40 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8005224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005226:	e010      	b.n	800524a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005228:	4b5a      	ldr	r3, [pc, #360]	; (8005394 <UART_SetConfig+0x4e4>)
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800522c:	e00d      	b.n	800524a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522e:	f7fe f973 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005234:	e009      	b.n	800524a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800523c:	e005      	b.n	800524a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8089 	beq.w	8005364 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	4a4e      	ldr	r2, [pc, #312]	; (8005390 <UART_SetConfig+0x4e0>)
 8005258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800525c:	461a      	mov	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	fbb3 f3f2 	udiv	r3, r3, r2
 8005264:	005a      	lsls	r2, r3, #1
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	441a      	add	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	2b0f      	cmp	r3, #15
 800527c:	d916      	bls.n	80052ac <UART_SetConfig+0x3fc>
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005284:	d212      	bcs.n	80052ac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f023 030f 	bic.w	r3, r3, #15
 800528e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	b29a      	uxth	r2, r3
 800529c:	8bfb      	ldrh	r3, [r7, #30]
 800529e:	4313      	orrs	r3, r2
 80052a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	8bfa      	ldrh	r2, [r7, #30]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e05b      	b.n	8005364 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052b2:	e057      	b.n	8005364 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d828      	bhi.n	800530e <UART_SetConfig+0x45e>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0x414>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	0800530f 	.word	0x0800530f
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	0800530f 	.word	0x0800530f
 80052dc:	0800530f 	.word	0x0800530f
 80052e0:	0800530f 	.word	0x0800530f
 80052e4:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7fe f9ca 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 80052ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ee:	e014      	b.n	800531a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe f9d8 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 80052f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f6:	e010      	b.n	800531a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b26      	ldr	r3, [pc, #152]	; (8005394 <UART_SetConfig+0x4e4>)
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052fc:	e00d      	b.n	800531a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe f90b 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005304:	e009      	b.n	800531a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800530c:	e005      	b.n	800531a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005318:	bf00      	nop
    }

    if (pclk != 0U)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d021      	beq.n	8005364 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <UART_SetConfig+0x4e0>)
 8005326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532a:	461a      	mov	r2, r3
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	441a      	add	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d909      	bls.n	800535e <UART_SetConfig+0x4ae>
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d205      	bcs.n	800535e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	b29a      	uxth	r2, r3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
 800535c:	e002      	b.n	8005364 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2201      	movs	r2, #1
 8005368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2201      	movs	r2, #1
 8005370:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2200      	movs	r2, #0
 8005378:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005380:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	; 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538e:	bf00      	nop
 8005390:	0800718c 	.word	0x0800718c
 8005394:	00f42400 	.word	0x00f42400

08005398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01a      	beq.n	80054ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005496:	d10a      	bne.n	80054ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
  }
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b086      	sub	sp, #24
 80054de:	af02      	add	r7, sp, #8
 80054e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054ea:	f7fc fc4f 	bl	8001d8c <HAL_GetTick>
 80054ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d10e      	bne.n	800551c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f832 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e028      	b.n	800556e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b04      	cmp	r3, #4
 8005528:	d10e      	bne.n	8005548 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800552a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f81c 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e012      	b.n	800556e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b09c      	sub	sp, #112	; 0x70
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	4613      	mov	r3, r2
 8005584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005586:	e0a9      	b.n	80056dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558e:	f000 80a5 	beq.w	80056dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fc fbfb 	bl	8001d8c <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80055a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d140      	bne.n	800562a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055bc:	667b      	str	r3, [r7, #100]	; 0x64
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e6      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3308      	adds	r3, #8
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	663b      	str	r3, [r7, #96]	; 0x60
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e069      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d051      	beq.n	80056dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005646:	d149      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005650:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
 8005672:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e6      	bne.n	8005652 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	613b      	str	r3, [r7, #16]
   return(result);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	66bb      	str	r3, [r7, #104]	; 0x68
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056a4:	623a      	str	r2, [r7, #32]
 80056a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	69f9      	ldr	r1, [r7, #28]
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e010      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	f43f af46 	beq.w	8005588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3770      	adds	r7, #112	; 0x70
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005708:	b480      	push	{r7}
 800570a:	b0a3      	sub	sp, #140	; 0x8c
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	d10e      	bne.n	800575a <UART_Start_Receive_IT+0x52>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <UART_Start_Receive_IT+0x48>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f240 12ff 	movw	r2, #511	; 0x1ff
 800574a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800574e:	e02d      	b.n	80057ac <UART_Start_Receive_IT+0xa4>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	22ff      	movs	r2, #255	; 0xff
 8005754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005758:	e028      	b.n	80057ac <UART_Start_Receive_IT+0xa4>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <UART_Start_Receive_IT+0x76>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <UART_Start_Receive_IT+0x6c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005772:	e01b      	b.n	80057ac <UART_Start_Receive_IT+0xa4>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	227f      	movs	r2, #127	; 0x7f
 8005778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800577c:	e016      	b.n	80057ac <UART_Start_Receive_IT+0xa4>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005786:	d10d      	bne.n	80057a4 <UART_Start_Receive_IT+0x9c>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <UART_Start_Receive_IT+0x92>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	227f      	movs	r2, #127	; 0x7f
 8005794:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005798:	e008      	b.n	80057ac <UART_Start_Receive_IT+0xa4>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	223f      	movs	r2, #63	; 0x3f
 800579e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057a2:	e003      	b.n	80057ac <UART_Start_Receive_IT+0xa4>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2222      	movs	r2, #34	; 0x22
 80057b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3308      	adds	r3, #8
 80057c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80057cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3308      	adds	r3, #8
 80057dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80057e0:	673a      	str	r2, [r7, #112]	; 0x70
 80057e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80057e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80057ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e3      	bne.n	80057bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fc:	d14f      	bne.n	800589e <UART_Start_Receive_IT+0x196>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	429a      	cmp	r2, r3
 8005808:	d349      	bcc.n	800589e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005812:	d107      	bne.n	8005824 <UART_Start_Receive_IT+0x11c>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a46      	ldr	r2, [pc, #280]	; (8005938 <UART_Start_Receive_IT+0x230>)
 8005820:	675a      	str	r2, [r3, #116]	; 0x74
 8005822:	e002      	b.n	800582a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a45      	ldr	r2, [pc, #276]	; (800593c <UART_Start_Receive_IT+0x234>)
 8005828:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01a      	beq.n	8005868 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005856:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800585a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e4      	bne.n	8005832 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3308      	adds	r3, #8
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3308      	adds	r3, #8
 8005886:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005888:	64ba      	str	r2, [r7, #72]	; 0x48
 800588a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800588e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e5      	bne.n	8005868 <UART_Start_Receive_IT+0x160>
 800589c:	e046      	b.n	800592c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	d107      	bne.n	80058b8 <UART_Start_Receive_IT+0x1b0>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a23      	ldr	r2, [pc, #140]	; (8005940 <UART_Start_Receive_IT+0x238>)
 80058b4:	675a      	str	r2, [r3, #116]	; 0x74
 80058b6:	e002      	b.n	80058be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a22      	ldr	r2, [pc, #136]	; (8005944 <UART_Start_Receive_IT+0x23c>)
 80058bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d019      	beq.n	80058fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80058da:	677b      	str	r3, [r7, #116]	; 0x74
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
 80058e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_Start_Receive_IT+0x1be>
 80058f8:	e018      	b.n	800592c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	613b      	str	r3, [r7, #16]
   return(result);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f043 0320 	orr.w	r3, r3, #32
 800590e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	69f9      	ldr	r1, [r7, #28]
 800591e:	6a3a      	ldr	r2, [r7, #32]
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	61bb      	str	r3, [r7, #24]
   return(result);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e6      	bne.n	80058fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	378c      	adds	r7, #140	; 0x8c
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	08006165 	.word	0x08006165
 800593c:	08005e05 	.word	0x08005e05
 8005940:	08005c4d 	.word	0x08005c4d
 8005944:	08005a95 	.word	0x08005a95

08005948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b095      	sub	sp, #84	; 0x54
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596e:	643b      	str	r3, [r7, #64]	; 0x40
 8005970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	61fb      	str	r3, [r7, #28]
   return(result);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	64bb      	str	r3, [r7, #72]	; 0x48
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3308      	adds	r3, #8
 80059a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e3      	bne.n	8005982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d118      	bne.n	80059f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	647b      	str	r3, [r7, #68]	; 0x44
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6979      	ldr	r1, [r7, #20]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	613b      	str	r3, [r7, #16]
   return(result);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a08:	bf00      	nop
 8005a0a:	3754      	adds	r7, #84	; 0x54
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7fb f933 	bl	8000c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b088      	sub	sp, #32
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6979      	ldr	r1, [r7, #20]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	613b      	str	r3, [r7, #16]
   return(result);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e6      	bne.n	8005a46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fb f920 	bl	8000ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a8c:	bf00      	nop
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b09c      	sub	sp, #112	; 0x70
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005aa2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aac:	2b22      	cmp	r3, #34	; 0x22
 8005aae:	f040 80be 	bne.w	8005c2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005abc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ac0:	b2d9      	uxtb	r1, r3
 8005ac2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	400a      	ands	r2, r1
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 80a1 	bne.w	8005c3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e6      	bne.n	8005afc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3308      	adds	r3, #8
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	667b      	str	r3, [r7, #100]	; 0x64
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b4e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e5      	bne.n	8005b2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a33      	ldr	r2, [pc, #204]	; (8005c48 <UART_RxISR_8BIT+0x1b4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d01f      	beq.n	8005bc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d018      	beq.n	8005bc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
 8005bae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d12e      	bne.n	8005c26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0310 	bic.w	r3, r3, #16
 8005be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e6      	bne.n	8005bce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b10      	cmp	r3, #16
 8005c0c:	d103      	bne.n	8005c16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2210      	movs	r2, #16
 8005c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff f93a 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c24:	e00b      	b.n	8005c3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb f868 	bl	8000cfc <HAL_UART_RxCpltCallback>
}
 8005c2c:	e007      	b.n	8005c3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0208 	orr.w	r2, r2, #8
 8005c3c:	619a      	str	r2, [r3, #24]
}
 8005c3e:	bf00      	nop
 8005c40:	3770      	adds	r7, #112	; 0x70
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40008000 	.word	0x40008000

08005c4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b09c      	sub	sp, #112	; 0x70
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c64:	2b22      	cmp	r3, #34	; 0x22
 8005c66:	f040 80be 	bne.w	8005de6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005c7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005c82:	4013      	ands	r3, r2
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 80a1 	bne.w	8005df6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d06:	643a      	str	r2, [r7, #64]	; 0x40
 8005d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a33      	ldr	r2, [pc, #204]	; (8005e00 <UART_RxISR_16BIT+0x1b4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d01f      	beq.n	8005d78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e6      	bne.n	8005d46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d12e      	bne.n	8005dde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f023 0310 	bic.w	r3, r3, #16
 8005d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6979      	ldr	r1, [r7, #20]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	613b      	str	r3, [r7, #16]
   return(result);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e6      	bne.n	8005d86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0310 	and.w	r3, r3, #16
 8005dc2:	2b10      	cmp	r3, #16
 8005dc4:	d103      	bne.n	8005dce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2210      	movs	r2, #16
 8005dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff f85e 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ddc:	e00b      	b.n	8005df6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fa ff8c 	bl	8000cfc <HAL_UART_RxCpltCallback>
}
 8005de4:	e007      	b.n	8005df6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0208 	orr.w	r2, r2, #8
 8005df4:	619a      	str	r2, [r3, #24]
}
 8005df6:	bf00      	nop
 8005df8:	3770      	adds	r7, #112	; 0x70
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40008000 	.word	0x40008000

08005e04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b0ac      	sub	sp, #176	; 0xb0
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3a:	2b22      	cmp	r3, #34	; 0x22
 8005e3c:	f040 8182 	bne.w	8006144 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e46:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e4a:	e125      	b.n	8006098 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005e5a:	b2d9      	uxtb	r1, r3
 8005e5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	400a      	ands	r2, r1
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d053      	beq.n	8005f46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <UART_RxISR_8BIT_FIFOEN+0xca>
 8005eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f043 0201 	orr.w	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d011      	beq.n	8005efe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2202      	movs	r2, #2
 8005eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef4:	f043 0204 	orr.w	r2, r3, #4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d011      	beq.n	8005f2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	f043 0202 	orr.w	r2, r3, #2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d006      	beq.n	8005f46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fa feaf 	bl	8000c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 80a2 	bne.w	8006098 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f78:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005f7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e4      	bne.n	8005f54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fb2:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fb4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e1      	bne.n	8005f8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5f      	ldr	r2, [pc, #380]	; (800615c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d021      	beq.n	8006028 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01a      	beq.n	8006028 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006014:	657b      	str	r3, [r7, #84]	; 0x54
 8006016:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800601a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e4      	bne.n	8005ff2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d130      	bne.n	8006092 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
 800605a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800605e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e4      	bne.n	8006036 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f003 0310 	and.w	r3, r3, #16
 8006076:	2b10      	cmp	r3, #16
 8006078:	d103      	bne.n	8006082 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2210      	movs	r2, #16
 8006080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fe ff04 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
 8006090:	e002      	b.n	8006098 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fa fe32 	bl	8000cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006098:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80060a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f47f aecf 	bne.w	8005e4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d049      	beq.n	8006154 <UART_RxISR_8BIT_FIFOEN+0x350>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d242      	bcs.n	8006154 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3308      	adds	r3, #8
 80060ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80060f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e3      	bne.n	80060ce <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a15      	ldr	r2, [pc, #84]	; (8006160 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800610a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	60bb      	str	r3, [r7, #8]
   return(result);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f043 0320 	orr.w	r3, r3, #32
 8006120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	613b      	str	r3, [r7, #16]
   return(result);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e4      	bne.n	800610c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006142:	e007      	b.n	8006154 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0208 	orr.w	r2, r2, #8
 8006152:	619a      	str	r2, [r3, #24]
}
 8006154:	bf00      	nop
 8006156:	37b0      	adds	r7, #176	; 0xb0
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40008000 	.word	0x40008000
 8006160:	08005a95 	.word	0x08005a95

08006164 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b0ae      	sub	sp, #184	; 0xb8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006172:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800619a:	2b22      	cmp	r3, #34	; 0x22
 800619c:	f040 8186 	bne.w	80064ac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061aa:	e129      	b.n	8006400 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80061be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80061c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80061c6:	4013      	ands	r3, r2
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	1c9a      	adds	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80061f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d053      	beq.n	80062aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d011      	beq.n	8006232 <UART_RxISR_16BIT_FIFOEN+0xce>
 800620e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2201      	movs	r2, #1
 8006220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d011      	beq.n	8006262 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800623e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2202      	movs	r2, #2
 8006250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006258:	f043 0204 	orr.w	r2, r3, #4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d011      	beq.n	8006292 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800626e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2204      	movs	r2, #4
 8006280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f043 0202 	orr.w	r2, r3, #2
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	2b00      	cmp	r3, #0
 800629a:	d006      	beq.n	80062aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7fa fcfd 	bl	8000c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 80a4 	bne.w	8006400 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e2      	bne.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006308:	f023 0301 	bic.w	r3, r3, #1
 800630c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800631a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800631c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e1      	bne.n	80062f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2220      	movs	r2, #32
 8006332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a5f      	ldr	r2, [pc, #380]	; (80064c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d021      	beq.n	8006390 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01a      	beq.n	8006390 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800636e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800637c:	65bb      	str	r3, [r7, #88]	; 0x58
 800637e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e4      	bne.n	800635a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d130      	bne.n	80063fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ae:	f023 0310 	bic.w	r3, r3, #16
 80063b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44
 80063c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e4      	bne.n	800639e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d103      	bne.n	80063ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2210      	movs	r2, #16
 80063e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fe fd50 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
 80063f8:	e002      	b.n	8006400 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fa fc7e 	bl	8000cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006400:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	f47f aecb 	bne.w	80061ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800641c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006420:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006424:	2b00      	cmp	r3, #0
 8006426:	d049      	beq.n	80064bc <UART_RxISR_16BIT_FIFOEN+0x358>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800642e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006432:	429a      	cmp	r2, r3
 8006434:	d242      	bcs.n	80064bc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3308      	adds	r3, #8
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	623b      	str	r3, [r7, #32]
   return(result);
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800645a:	633a      	str	r2, [r7, #48]	; 0x30
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e3      	bne.n	8006436 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006472:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	60fb      	str	r3, [r7, #12]
   return(result);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f043 0320 	orr.w	r3, r3, #32
 8006488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	69b9      	ldr	r1, [r7, #24]
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	617b      	str	r3, [r7, #20]
   return(result);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e4      	bne.n	8006474 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064aa:	e007      	b.n	80064bc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0208 	orr.w	r2, r2, #8
 80064ba:	619a      	str	r2, [r3, #24]
}
 80064bc:	bf00      	nop
 80064be:	37b8      	adds	r7, #184	; 0xb8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40008000 	.word	0x40008000
 80064c8:	08005c4d 	.word	0x08005c4d

080064cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr

080064de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_UARTEx_DisableFifoMode+0x16>
 8006514:	2302      	movs	r3, #2
 8006516:	e027      	b.n	8006568 <HAL_UARTEx_DisableFifoMode+0x66>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2224      	movs	r2, #36	; 0x24
 8006524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0201 	bic.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006546:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006586:	2302      	movs	r3, #2
 8006588:	e02d      	b.n	80065e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2224      	movs	r2, #36	; 0x24
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f850 	bl	800666c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006602:	2302      	movs	r3, #2
 8006604:	e02d      	b.n	8006662 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2224      	movs	r2, #36	; 0x24
 8006612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f812 	bl	800666c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006678:	2b00      	cmp	r3, #0
 800667a:	d108      	bne.n	800668e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800668c:	e031      	b.n	80066f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800668e:	2308      	movs	r3, #8
 8006690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006692:	2308      	movs	r3, #8
 8006694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	0e5b      	lsrs	r3, r3, #25
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	0f5b      	lsrs	r3, r3, #29
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	7b3a      	ldrb	r2, [r7, #12]
 80066ba:	4910      	ldr	r1, [pc, #64]	; (80066fc <UARTEx_SetNbDataToProcess+0x90>)
 80066bc:	5c8a      	ldrb	r2, [r1, r2]
 80066be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066c2:	7b3a      	ldrb	r2, [r7, #12]
 80066c4:	490e      	ldr	r1, [pc, #56]	; (8006700 <UARTEx_SetNbDataToProcess+0x94>)
 80066c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	7b7a      	ldrb	r2, [r7, #13]
 80066d8:	4908      	ldr	r1, [pc, #32]	; (80066fc <UARTEx_SetNbDataToProcess+0x90>)
 80066da:	5c8a      	ldrb	r2, [r1, r2]
 80066dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066e0:	7b7a      	ldrb	r2, [r7, #13]
 80066e2:	4907      	ldr	r1, [pc, #28]	; (8006700 <UARTEx_SetNbDataToProcess+0x94>)
 80066e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	080071a4 	.word	0x080071a4
 8006700:	080071ac 	.word	0x080071ac

08006704 <__errno>:
 8006704:	4b01      	ldr	r3, [pc, #4]	; (800670c <__errno+0x8>)
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000010 	.word	0x20000010

08006710 <__libc_init_array>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4d0d      	ldr	r5, [pc, #52]	; (8006748 <__libc_init_array+0x38>)
 8006714:	4c0d      	ldr	r4, [pc, #52]	; (800674c <__libc_init_array+0x3c>)
 8006716:	1b64      	subs	r4, r4, r5
 8006718:	10a4      	asrs	r4, r4, #2
 800671a:	2600      	movs	r6, #0
 800671c:	42a6      	cmp	r6, r4
 800671e:	d109      	bne.n	8006734 <__libc_init_array+0x24>
 8006720:	4d0b      	ldr	r5, [pc, #44]	; (8006750 <__libc_init_array+0x40>)
 8006722:	4c0c      	ldr	r4, [pc, #48]	; (8006754 <__libc_init_array+0x44>)
 8006724:	f000 fca0 	bl	8007068 <_init>
 8006728:	1b64      	subs	r4, r4, r5
 800672a:	10a4      	asrs	r4, r4, #2
 800672c:	2600      	movs	r6, #0
 800672e:	42a6      	cmp	r6, r4
 8006730:	d105      	bne.n	800673e <__libc_init_array+0x2e>
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	f855 3b04 	ldr.w	r3, [r5], #4
 8006738:	4798      	blx	r3
 800673a:	3601      	adds	r6, #1
 800673c:	e7ee      	b.n	800671c <__libc_init_array+0xc>
 800673e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006742:	4798      	blx	r3
 8006744:	3601      	adds	r6, #1
 8006746:	e7f2      	b.n	800672e <__libc_init_array+0x1e>
 8006748:	080071f0 	.word	0x080071f0
 800674c:	080071f0 	.word	0x080071f0
 8006750:	080071f0 	.word	0x080071f0
 8006754:	080071f4 	.word	0x080071f4

08006758 <memcpy>:
 8006758:	440a      	add	r2, r1
 800675a:	4291      	cmp	r1, r2
 800675c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006760:	d100      	bne.n	8006764 <memcpy+0xc>
 8006762:	4770      	bx	lr
 8006764:	b510      	push	{r4, lr}
 8006766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800676a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676e:	4291      	cmp	r1, r2
 8006770:	d1f9      	bne.n	8006766 <memcpy+0xe>
 8006772:	bd10      	pop	{r4, pc}

08006774 <memset>:
 8006774:	4402      	add	r2, r0
 8006776:	4603      	mov	r3, r0
 8006778:	4293      	cmp	r3, r2
 800677a:	d100      	bne.n	800677e <memset+0xa>
 800677c:	4770      	bx	lr
 800677e:	f803 1b01 	strb.w	r1, [r3], #1
 8006782:	e7f9      	b.n	8006778 <memset+0x4>

08006784 <sniprintf>:
 8006784:	b40c      	push	{r2, r3}
 8006786:	b530      	push	{r4, r5, lr}
 8006788:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <sniprintf+0x64>)
 800678a:	1e0c      	subs	r4, r1, #0
 800678c:	681d      	ldr	r5, [r3, #0]
 800678e:	b09d      	sub	sp, #116	; 0x74
 8006790:	da08      	bge.n	80067a4 <sniprintf+0x20>
 8006792:	238b      	movs	r3, #139	; 0x8b
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800679a:	b01d      	add	sp, #116	; 0x74
 800679c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067a0:	b002      	add	sp, #8
 80067a2:	4770      	bx	lr
 80067a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80067a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80067ac:	bf14      	ite	ne
 80067ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80067b2:	4623      	moveq	r3, r4
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067bc:	9002      	str	r0, [sp, #8]
 80067be:	9006      	str	r0, [sp, #24]
 80067c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067c6:	ab21      	add	r3, sp, #132	; 0x84
 80067c8:	a902      	add	r1, sp, #8
 80067ca:	4628      	mov	r0, r5
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	f000 f869 	bl	80068a4 <_svfiprintf_r>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	bfbc      	itt	lt
 80067d6:	238b      	movlt	r3, #139	; 0x8b
 80067d8:	602b      	strlt	r3, [r5, #0]
 80067da:	2c00      	cmp	r4, #0
 80067dc:	d0dd      	beq.n	800679a <sniprintf+0x16>
 80067de:	9b02      	ldr	r3, [sp, #8]
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	e7d9      	b.n	800679a <sniprintf+0x16>
 80067e6:	bf00      	nop
 80067e8:	20000010 	.word	0x20000010

080067ec <__ssputs_r>:
 80067ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	688e      	ldr	r6, [r1, #8]
 80067f2:	429e      	cmp	r6, r3
 80067f4:	4682      	mov	sl, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	4690      	mov	r8, r2
 80067fa:	461f      	mov	r7, r3
 80067fc:	d838      	bhi.n	8006870 <__ssputs_r+0x84>
 80067fe:	898a      	ldrh	r2, [r1, #12]
 8006800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006804:	d032      	beq.n	800686c <__ssputs_r+0x80>
 8006806:	6825      	ldr	r5, [r4, #0]
 8006808:	6909      	ldr	r1, [r1, #16]
 800680a:	eba5 0901 	sub.w	r9, r5, r1
 800680e:	6965      	ldr	r5, [r4, #20]
 8006810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006818:	3301      	adds	r3, #1
 800681a:	444b      	add	r3, r9
 800681c:	106d      	asrs	r5, r5, #1
 800681e:	429d      	cmp	r5, r3
 8006820:	bf38      	it	cc
 8006822:	461d      	movcc	r5, r3
 8006824:	0553      	lsls	r3, r2, #21
 8006826:	d531      	bpl.n	800688c <__ssputs_r+0xa0>
 8006828:	4629      	mov	r1, r5
 800682a:	f000 fb53 	bl	8006ed4 <_malloc_r>
 800682e:	4606      	mov	r6, r0
 8006830:	b950      	cbnz	r0, 8006848 <__ssputs_r+0x5c>
 8006832:	230c      	movs	r3, #12
 8006834:	f8ca 3000 	str.w	r3, [sl]
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006848:	6921      	ldr	r1, [r4, #16]
 800684a:	464a      	mov	r2, r9
 800684c:	f7ff ff84 	bl	8006758 <memcpy>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	6126      	str	r6, [r4, #16]
 800685e:	6165      	str	r5, [r4, #20]
 8006860:	444e      	add	r6, r9
 8006862:	eba5 0509 	sub.w	r5, r5, r9
 8006866:	6026      	str	r6, [r4, #0]
 8006868:	60a5      	str	r5, [r4, #8]
 800686a:	463e      	mov	r6, r7
 800686c:	42be      	cmp	r6, r7
 800686e:	d900      	bls.n	8006872 <__ssputs_r+0x86>
 8006870:	463e      	mov	r6, r7
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	4632      	mov	r2, r6
 8006876:	4641      	mov	r1, r8
 8006878:	f000 faa8 	bl	8006dcc <memmove>
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	1b9b      	subs	r3, r3, r6
 8006880:	60a3      	str	r3, [r4, #8]
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	4433      	add	r3, r6
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	2000      	movs	r0, #0
 800688a:	e7db      	b.n	8006844 <__ssputs_r+0x58>
 800688c:	462a      	mov	r2, r5
 800688e:	f000 fb95 	bl	8006fbc <_realloc_r>
 8006892:	4606      	mov	r6, r0
 8006894:	2800      	cmp	r0, #0
 8006896:	d1e1      	bne.n	800685c <__ssputs_r+0x70>
 8006898:	6921      	ldr	r1, [r4, #16]
 800689a:	4650      	mov	r0, sl
 800689c:	f000 fab0 	bl	8006e00 <_free_r>
 80068a0:	e7c7      	b.n	8006832 <__ssputs_r+0x46>
	...

080068a4 <_svfiprintf_r>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	4698      	mov	r8, r3
 80068aa:	898b      	ldrh	r3, [r1, #12]
 80068ac:	061b      	lsls	r3, r3, #24
 80068ae:	b09d      	sub	sp, #116	; 0x74
 80068b0:	4607      	mov	r7, r0
 80068b2:	460d      	mov	r5, r1
 80068b4:	4614      	mov	r4, r2
 80068b6:	d50e      	bpl.n	80068d6 <_svfiprintf_r+0x32>
 80068b8:	690b      	ldr	r3, [r1, #16]
 80068ba:	b963      	cbnz	r3, 80068d6 <_svfiprintf_r+0x32>
 80068bc:	2140      	movs	r1, #64	; 0x40
 80068be:	f000 fb09 	bl	8006ed4 <_malloc_r>
 80068c2:	6028      	str	r0, [r5, #0]
 80068c4:	6128      	str	r0, [r5, #16]
 80068c6:	b920      	cbnz	r0, 80068d2 <_svfiprintf_r+0x2e>
 80068c8:	230c      	movs	r3, #12
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d0:	e0d1      	b.n	8006a76 <_svfiprintf_r+0x1d2>
 80068d2:	2340      	movs	r3, #64	; 0x40
 80068d4:	616b      	str	r3, [r5, #20]
 80068d6:	2300      	movs	r3, #0
 80068d8:	9309      	str	r3, [sp, #36]	; 0x24
 80068da:	2320      	movs	r3, #32
 80068dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e4:	2330      	movs	r3, #48	; 0x30
 80068e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a90 <_svfiprintf_r+0x1ec>
 80068ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ee:	f04f 0901 	mov.w	r9, #1
 80068f2:	4623      	mov	r3, r4
 80068f4:	469a      	mov	sl, r3
 80068f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068fa:	b10a      	cbz	r2, 8006900 <_svfiprintf_r+0x5c>
 80068fc:	2a25      	cmp	r2, #37	; 0x25
 80068fe:	d1f9      	bne.n	80068f4 <_svfiprintf_r+0x50>
 8006900:	ebba 0b04 	subs.w	fp, sl, r4
 8006904:	d00b      	beq.n	800691e <_svfiprintf_r+0x7a>
 8006906:	465b      	mov	r3, fp
 8006908:	4622      	mov	r2, r4
 800690a:	4629      	mov	r1, r5
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff ff6d 	bl	80067ec <__ssputs_r>
 8006912:	3001      	adds	r0, #1
 8006914:	f000 80aa 	beq.w	8006a6c <_svfiprintf_r+0x1c8>
 8006918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691a:	445a      	add	r2, fp
 800691c:	9209      	str	r2, [sp, #36]	; 0x24
 800691e:	f89a 3000 	ldrb.w	r3, [sl]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a2 	beq.w	8006a6c <_svfiprintf_r+0x1c8>
 8006928:	2300      	movs	r3, #0
 800692a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800692e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006932:	f10a 0a01 	add.w	sl, sl, #1
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	9307      	str	r3, [sp, #28]
 800693a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800693e:	931a      	str	r3, [sp, #104]	; 0x68
 8006940:	4654      	mov	r4, sl
 8006942:	2205      	movs	r2, #5
 8006944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006948:	4851      	ldr	r0, [pc, #324]	; (8006a90 <_svfiprintf_r+0x1ec>)
 800694a:	f7f9 fc19 	bl	8000180 <memchr>
 800694e:	9a04      	ldr	r2, [sp, #16]
 8006950:	b9d8      	cbnz	r0, 800698a <_svfiprintf_r+0xe6>
 8006952:	06d0      	lsls	r0, r2, #27
 8006954:	bf44      	itt	mi
 8006956:	2320      	movmi	r3, #32
 8006958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695c:	0711      	lsls	r1, r2, #28
 800695e:	bf44      	itt	mi
 8006960:	232b      	movmi	r3, #43	; 0x2b
 8006962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006966:	f89a 3000 	ldrb.w	r3, [sl]
 800696a:	2b2a      	cmp	r3, #42	; 0x2a
 800696c:	d015      	beq.n	800699a <_svfiprintf_r+0xf6>
 800696e:	9a07      	ldr	r2, [sp, #28]
 8006970:	4654      	mov	r4, sl
 8006972:	2000      	movs	r0, #0
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	4621      	mov	r1, r4
 800697a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697e:	3b30      	subs	r3, #48	; 0x30
 8006980:	2b09      	cmp	r3, #9
 8006982:	d94e      	bls.n	8006a22 <_svfiprintf_r+0x17e>
 8006984:	b1b0      	cbz	r0, 80069b4 <_svfiprintf_r+0x110>
 8006986:	9207      	str	r2, [sp, #28]
 8006988:	e014      	b.n	80069b4 <_svfiprintf_r+0x110>
 800698a:	eba0 0308 	sub.w	r3, r0, r8
 800698e:	fa09 f303 	lsl.w	r3, r9, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	46a2      	mov	sl, r4
 8006998:	e7d2      	b.n	8006940 <_svfiprintf_r+0x9c>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	1d19      	adds	r1, r3, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	9103      	str	r1, [sp, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfbb      	ittet	lt
 80069a6:	425b      	neglt	r3, r3
 80069a8:	f042 0202 	orrlt.w	r2, r2, #2
 80069ac:	9307      	strge	r3, [sp, #28]
 80069ae:	9307      	strlt	r3, [sp, #28]
 80069b0:	bfb8      	it	lt
 80069b2:	9204      	strlt	r2, [sp, #16]
 80069b4:	7823      	ldrb	r3, [r4, #0]
 80069b6:	2b2e      	cmp	r3, #46	; 0x2e
 80069b8:	d10c      	bne.n	80069d4 <_svfiprintf_r+0x130>
 80069ba:	7863      	ldrb	r3, [r4, #1]
 80069bc:	2b2a      	cmp	r3, #42	; 0x2a
 80069be:	d135      	bne.n	8006a2c <_svfiprintf_r+0x188>
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	1d1a      	adds	r2, r3, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	9203      	str	r2, [sp, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bfb8      	it	lt
 80069cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069d0:	3402      	adds	r4, #2
 80069d2:	9305      	str	r3, [sp, #20]
 80069d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006a94 <_svfiprintf_r+0x1f0>
 80069d8:	7821      	ldrb	r1, [r4, #0]
 80069da:	2203      	movs	r2, #3
 80069dc:	4650      	mov	r0, sl
 80069de:	f7f9 fbcf 	bl	8000180 <memchr>
 80069e2:	b140      	cbz	r0, 80069f6 <_svfiprintf_r+0x152>
 80069e4:	2340      	movs	r3, #64	; 0x40
 80069e6:	eba0 000a 	sub.w	r0, r0, sl
 80069ea:	fa03 f000 	lsl.w	r0, r3, r0
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	4303      	orrs	r3, r0
 80069f2:	3401      	adds	r4, #1
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fa:	4827      	ldr	r0, [pc, #156]	; (8006a98 <_svfiprintf_r+0x1f4>)
 80069fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a00:	2206      	movs	r2, #6
 8006a02:	f7f9 fbbd 	bl	8000180 <memchr>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d038      	beq.n	8006a7c <_svfiprintf_r+0x1d8>
 8006a0a:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <_svfiprintf_r+0x1f8>)
 8006a0c:	bb1b      	cbnz	r3, 8006a56 <_svfiprintf_r+0x1b2>
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	3307      	adds	r3, #7
 8006a12:	f023 0307 	bic.w	r3, r3, #7
 8006a16:	3308      	adds	r3, #8
 8006a18:	9303      	str	r3, [sp, #12]
 8006a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1c:	4433      	add	r3, r6
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	e767      	b.n	80068f2 <_svfiprintf_r+0x4e>
 8006a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a26:	460c      	mov	r4, r1
 8006a28:	2001      	movs	r0, #1
 8006a2a:	e7a5      	b.n	8006978 <_svfiprintf_r+0xd4>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	3401      	adds	r4, #1
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	4619      	mov	r1, r3
 8006a34:	f04f 0c0a 	mov.w	ip, #10
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a3e:	3a30      	subs	r2, #48	; 0x30
 8006a40:	2a09      	cmp	r2, #9
 8006a42:	d903      	bls.n	8006a4c <_svfiprintf_r+0x1a8>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0c5      	beq.n	80069d4 <_svfiprintf_r+0x130>
 8006a48:	9105      	str	r1, [sp, #20]
 8006a4a:	e7c3      	b.n	80069d4 <_svfiprintf_r+0x130>
 8006a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a50:	4604      	mov	r4, r0
 8006a52:	2301      	movs	r3, #1
 8006a54:	e7f0      	b.n	8006a38 <_svfiprintf_r+0x194>
 8006a56:	ab03      	add	r3, sp, #12
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	462a      	mov	r2, r5
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <_svfiprintf_r+0x1fc>)
 8006a5e:	a904      	add	r1, sp, #16
 8006a60:	4638      	mov	r0, r7
 8006a62:	f3af 8000 	nop.w
 8006a66:	1c42      	adds	r2, r0, #1
 8006a68:	4606      	mov	r6, r0
 8006a6a:	d1d6      	bne.n	8006a1a <_svfiprintf_r+0x176>
 8006a6c:	89ab      	ldrh	r3, [r5, #12]
 8006a6e:	065b      	lsls	r3, r3, #25
 8006a70:	f53f af2c 	bmi.w	80068cc <_svfiprintf_r+0x28>
 8006a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a76:	b01d      	add	sp, #116	; 0x74
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	ab03      	add	r3, sp, #12
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	462a      	mov	r2, r5
 8006a82:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <_svfiprintf_r+0x1fc>)
 8006a84:	a904      	add	r1, sp, #16
 8006a86:	4638      	mov	r0, r7
 8006a88:	f000 f87a 	bl	8006b80 <_printf_i>
 8006a8c:	e7eb      	b.n	8006a66 <_svfiprintf_r+0x1c2>
 8006a8e:	bf00      	nop
 8006a90:	080071b4 	.word	0x080071b4
 8006a94:	080071ba 	.word	0x080071ba
 8006a98:	080071be 	.word	0x080071be
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	080067ed 	.word	0x080067ed

08006aa4 <_printf_common>:
 8006aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	4699      	mov	r9, r3
 8006aac:	688a      	ldr	r2, [r1, #8]
 8006aae:	690b      	ldr	r3, [r1, #16]
 8006ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	bfb8      	it	lt
 8006ab8:	4613      	movlt	r3, r2
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	b10a      	cbz	r2, 8006aca <_printf_common+0x26>
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	0699      	lsls	r1, r3, #26
 8006ace:	bf42      	ittt	mi
 8006ad0:	6833      	ldrmi	r3, [r6, #0]
 8006ad2:	3302      	addmi	r3, #2
 8006ad4:	6033      	strmi	r3, [r6, #0]
 8006ad6:	6825      	ldr	r5, [r4, #0]
 8006ad8:	f015 0506 	ands.w	r5, r5, #6
 8006adc:	d106      	bne.n	8006aec <_printf_common+0x48>
 8006ade:	f104 0a19 	add.w	sl, r4, #25
 8006ae2:	68e3      	ldr	r3, [r4, #12]
 8006ae4:	6832      	ldr	r2, [r6, #0]
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	42ab      	cmp	r3, r5
 8006aea:	dc26      	bgt.n	8006b3a <_printf_common+0x96>
 8006aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006af0:	1e13      	subs	r3, r2, #0
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	bf18      	it	ne
 8006af6:	2301      	movne	r3, #1
 8006af8:	0692      	lsls	r2, r2, #26
 8006afa:	d42b      	bmi.n	8006b54 <_printf_common+0xb0>
 8006afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b00:	4649      	mov	r1, r9
 8006b02:	4638      	mov	r0, r7
 8006b04:	47c0      	blx	r8
 8006b06:	3001      	adds	r0, #1
 8006b08:	d01e      	beq.n	8006b48 <_printf_common+0xa4>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	68e5      	ldr	r5, [r4, #12]
 8006b0e:	6832      	ldr	r2, [r6, #0]
 8006b10:	f003 0306 	and.w	r3, r3, #6
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	bf08      	it	eq
 8006b18:	1aad      	subeq	r5, r5, r2
 8006b1a:	68a3      	ldr	r3, [r4, #8]
 8006b1c:	6922      	ldr	r2, [r4, #16]
 8006b1e:	bf0c      	ite	eq
 8006b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b24:	2500      	movne	r5, #0
 8006b26:	4293      	cmp	r3, r2
 8006b28:	bfc4      	itt	gt
 8006b2a:	1a9b      	subgt	r3, r3, r2
 8006b2c:	18ed      	addgt	r5, r5, r3
 8006b2e:	2600      	movs	r6, #0
 8006b30:	341a      	adds	r4, #26
 8006b32:	42b5      	cmp	r5, r6
 8006b34:	d11a      	bne.n	8006b6c <_printf_common+0xc8>
 8006b36:	2000      	movs	r0, #0
 8006b38:	e008      	b.n	8006b4c <_printf_common+0xa8>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4652      	mov	r2, sl
 8006b3e:	4649      	mov	r1, r9
 8006b40:	4638      	mov	r0, r7
 8006b42:	47c0      	blx	r8
 8006b44:	3001      	adds	r0, #1
 8006b46:	d103      	bne.n	8006b50 <_printf_common+0xac>
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b50:	3501      	adds	r5, #1
 8006b52:	e7c6      	b.n	8006ae2 <_printf_common+0x3e>
 8006b54:	18e1      	adds	r1, r4, r3
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	2030      	movs	r0, #48	; 0x30
 8006b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b5e:	4422      	add	r2, r4
 8006b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b68:	3302      	adds	r3, #2
 8006b6a:	e7c7      	b.n	8006afc <_printf_common+0x58>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4649      	mov	r1, r9
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	3001      	adds	r0, #1
 8006b78:	d0e6      	beq.n	8006b48 <_printf_common+0xa4>
 8006b7a:	3601      	adds	r6, #1
 8006b7c:	e7d9      	b.n	8006b32 <_printf_common+0x8e>
	...

08006b80 <_printf_i>:
 8006b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	7e0f      	ldrb	r7, [r1, #24]
 8006b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b88:	2f78      	cmp	r7, #120	; 0x78
 8006b8a:	4691      	mov	r9, r2
 8006b8c:	4680      	mov	r8, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	469a      	mov	sl, r3
 8006b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b96:	d807      	bhi.n	8006ba8 <_printf_i+0x28>
 8006b98:	2f62      	cmp	r7, #98	; 0x62
 8006b9a:	d80a      	bhi.n	8006bb2 <_printf_i+0x32>
 8006b9c:	2f00      	cmp	r7, #0
 8006b9e:	f000 80d8 	beq.w	8006d52 <_printf_i+0x1d2>
 8006ba2:	2f58      	cmp	r7, #88	; 0x58
 8006ba4:	f000 80a3 	beq.w	8006cee <_printf_i+0x16e>
 8006ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bb0:	e03a      	b.n	8006c28 <_printf_i+0xa8>
 8006bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bb6:	2b15      	cmp	r3, #21
 8006bb8:	d8f6      	bhi.n	8006ba8 <_printf_i+0x28>
 8006bba:	a101      	add	r1, pc, #4	; (adr r1, 8006bc0 <_printf_i+0x40>)
 8006bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc0:	08006c19 	.word	0x08006c19
 8006bc4:	08006c2d 	.word	0x08006c2d
 8006bc8:	08006ba9 	.word	0x08006ba9
 8006bcc:	08006ba9 	.word	0x08006ba9
 8006bd0:	08006ba9 	.word	0x08006ba9
 8006bd4:	08006ba9 	.word	0x08006ba9
 8006bd8:	08006c2d 	.word	0x08006c2d
 8006bdc:	08006ba9 	.word	0x08006ba9
 8006be0:	08006ba9 	.word	0x08006ba9
 8006be4:	08006ba9 	.word	0x08006ba9
 8006be8:	08006ba9 	.word	0x08006ba9
 8006bec:	08006d39 	.word	0x08006d39
 8006bf0:	08006c5d 	.word	0x08006c5d
 8006bf4:	08006d1b 	.word	0x08006d1b
 8006bf8:	08006ba9 	.word	0x08006ba9
 8006bfc:	08006ba9 	.word	0x08006ba9
 8006c00:	08006d5b 	.word	0x08006d5b
 8006c04:	08006ba9 	.word	0x08006ba9
 8006c08:	08006c5d 	.word	0x08006c5d
 8006c0c:	08006ba9 	.word	0x08006ba9
 8006c10:	08006ba9 	.word	0x08006ba9
 8006c14:	08006d23 	.word	0x08006d23
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	1d1a      	adds	r2, r3, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	602a      	str	r2, [r5, #0]
 8006c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0a3      	b.n	8006d74 <_printf_i+0x1f4>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	6829      	ldr	r1, [r5, #0]
 8006c30:	0606      	lsls	r6, r0, #24
 8006c32:	f101 0304 	add.w	r3, r1, #4
 8006c36:	d50a      	bpl.n	8006c4e <_printf_i+0xce>
 8006c38:	680e      	ldr	r6, [r1, #0]
 8006c3a:	602b      	str	r3, [r5, #0]
 8006c3c:	2e00      	cmp	r6, #0
 8006c3e:	da03      	bge.n	8006c48 <_printf_i+0xc8>
 8006c40:	232d      	movs	r3, #45	; 0x2d
 8006c42:	4276      	negs	r6, r6
 8006c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c48:	485e      	ldr	r0, [pc, #376]	; (8006dc4 <_printf_i+0x244>)
 8006c4a:	230a      	movs	r3, #10
 8006c4c:	e019      	b.n	8006c82 <_printf_i+0x102>
 8006c4e:	680e      	ldr	r6, [r1, #0]
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c56:	bf18      	it	ne
 8006c58:	b236      	sxthne	r6, r6
 8006c5a:	e7ef      	b.n	8006c3c <_printf_i+0xbc>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	1d19      	adds	r1, r3, #4
 8006c62:	6029      	str	r1, [r5, #0]
 8006c64:	0601      	lsls	r1, r0, #24
 8006c66:	d501      	bpl.n	8006c6c <_printf_i+0xec>
 8006c68:	681e      	ldr	r6, [r3, #0]
 8006c6a:	e002      	b.n	8006c72 <_printf_i+0xf2>
 8006c6c:	0646      	lsls	r6, r0, #25
 8006c6e:	d5fb      	bpl.n	8006c68 <_printf_i+0xe8>
 8006c70:	881e      	ldrh	r6, [r3, #0]
 8006c72:	4854      	ldr	r0, [pc, #336]	; (8006dc4 <_printf_i+0x244>)
 8006c74:	2f6f      	cmp	r7, #111	; 0x6f
 8006c76:	bf0c      	ite	eq
 8006c78:	2308      	moveq	r3, #8
 8006c7a:	230a      	movne	r3, #10
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c82:	6865      	ldr	r5, [r4, #4]
 8006c84:	60a5      	str	r5, [r4, #8]
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	bfa2      	ittt	ge
 8006c8a:	6821      	ldrge	r1, [r4, #0]
 8006c8c:	f021 0104 	bicge.w	r1, r1, #4
 8006c90:	6021      	strge	r1, [r4, #0]
 8006c92:	b90e      	cbnz	r6, 8006c98 <_printf_i+0x118>
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	d04d      	beq.n	8006d34 <_printf_i+0x1b4>
 8006c98:	4615      	mov	r5, r2
 8006c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006ca2:	5dc7      	ldrb	r7, [r0, r7]
 8006ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ca8:	4637      	mov	r7, r6
 8006caa:	42bb      	cmp	r3, r7
 8006cac:	460e      	mov	r6, r1
 8006cae:	d9f4      	bls.n	8006c9a <_printf_i+0x11a>
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d10b      	bne.n	8006ccc <_printf_i+0x14c>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	07de      	lsls	r6, r3, #31
 8006cb8:	d508      	bpl.n	8006ccc <_printf_i+0x14c>
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	6861      	ldr	r1, [r4, #4]
 8006cbe:	4299      	cmp	r1, r3
 8006cc0:	bfde      	ittt	le
 8006cc2:	2330      	movle	r3, #48	; 0x30
 8006cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ccc:	1b52      	subs	r2, r2, r5
 8006cce:	6122      	str	r2, [r4, #16]
 8006cd0:	f8cd a000 	str.w	sl, [sp]
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	aa03      	add	r2, sp, #12
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4640      	mov	r0, r8
 8006cdc:	f7ff fee2 	bl	8006aa4 <_printf_common>
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d14c      	bne.n	8006d7e <_printf_i+0x1fe>
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce8:	b004      	add	sp, #16
 8006cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cee:	4835      	ldr	r0, [pc, #212]	; (8006dc4 <_printf_i+0x244>)
 8006cf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cf4:	6829      	ldr	r1, [r5, #0]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cfc:	6029      	str	r1, [r5, #0]
 8006cfe:	061d      	lsls	r5, r3, #24
 8006d00:	d514      	bpl.n	8006d2c <_printf_i+0x1ac>
 8006d02:	07df      	lsls	r7, r3, #31
 8006d04:	bf44      	itt	mi
 8006d06:	f043 0320 	orrmi.w	r3, r3, #32
 8006d0a:	6023      	strmi	r3, [r4, #0]
 8006d0c:	b91e      	cbnz	r6, 8006d16 <_printf_i+0x196>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	f023 0320 	bic.w	r3, r3, #32
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	2310      	movs	r3, #16
 8006d18:	e7b0      	b.n	8006c7c <_printf_i+0xfc>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	f043 0320 	orr.w	r3, r3, #32
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	2378      	movs	r3, #120	; 0x78
 8006d24:	4828      	ldr	r0, [pc, #160]	; (8006dc8 <_printf_i+0x248>)
 8006d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d2a:	e7e3      	b.n	8006cf4 <_printf_i+0x174>
 8006d2c:	0659      	lsls	r1, r3, #25
 8006d2e:	bf48      	it	mi
 8006d30:	b2b6      	uxthmi	r6, r6
 8006d32:	e7e6      	b.n	8006d02 <_printf_i+0x182>
 8006d34:	4615      	mov	r5, r2
 8006d36:	e7bb      	b.n	8006cb0 <_printf_i+0x130>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	6826      	ldr	r6, [r4, #0]
 8006d3c:	6961      	ldr	r1, [r4, #20]
 8006d3e:	1d18      	adds	r0, r3, #4
 8006d40:	6028      	str	r0, [r5, #0]
 8006d42:	0635      	lsls	r5, r6, #24
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	d501      	bpl.n	8006d4c <_printf_i+0x1cc>
 8006d48:	6019      	str	r1, [r3, #0]
 8006d4a:	e002      	b.n	8006d52 <_printf_i+0x1d2>
 8006d4c:	0670      	lsls	r0, r6, #25
 8006d4e:	d5fb      	bpl.n	8006d48 <_printf_i+0x1c8>
 8006d50:	8019      	strh	r1, [r3, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	4615      	mov	r5, r2
 8006d58:	e7ba      	b.n	8006cd0 <_printf_i+0x150>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	1d1a      	adds	r2, r3, #4
 8006d5e:	602a      	str	r2, [r5, #0]
 8006d60:	681d      	ldr	r5, [r3, #0]
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	2100      	movs	r1, #0
 8006d66:	4628      	mov	r0, r5
 8006d68:	f7f9 fa0a 	bl	8000180 <memchr>
 8006d6c:	b108      	cbz	r0, 8006d72 <_printf_i+0x1f2>
 8006d6e:	1b40      	subs	r0, r0, r5
 8006d70:	6060      	str	r0, [r4, #4]
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	6123      	str	r3, [r4, #16]
 8006d76:	2300      	movs	r3, #0
 8006d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d7c:	e7a8      	b.n	8006cd0 <_printf_i+0x150>
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	462a      	mov	r2, r5
 8006d82:	4649      	mov	r1, r9
 8006d84:	4640      	mov	r0, r8
 8006d86:	47d0      	blx	sl
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d0ab      	beq.n	8006ce4 <_printf_i+0x164>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	079b      	lsls	r3, r3, #30
 8006d90:	d413      	bmi.n	8006dba <_printf_i+0x23a>
 8006d92:	68e0      	ldr	r0, [r4, #12]
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	4298      	cmp	r0, r3
 8006d98:	bfb8      	it	lt
 8006d9a:	4618      	movlt	r0, r3
 8006d9c:	e7a4      	b.n	8006ce8 <_printf_i+0x168>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4632      	mov	r2, r6
 8006da2:	4649      	mov	r1, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	47d0      	blx	sl
 8006da8:	3001      	adds	r0, #1
 8006daa:	d09b      	beq.n	8006ce4 <_printf_i+0x164>
 8006dac:	3501      	adds	r5, #1
 8006dae:	68e3      	ldr	r3, [r4, #12]
 8006db0:	9903      	ldr	r1, [sp, #12]
 8006db2:	1a5b      	subs	r3, r3, r1
 8006db4:	42ab      	cmp	r3, r5
 8006db6:	dcf2      	bgt.n	8006d9e <_printf_i+0x21e>
 8006db8:	e7eb      	b.n	8006d92 <_printf_i+0x212>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	f104 0619 	add.w	r6, r4, #25
 8006dc0:	e7f5      	b.n	8006dae <_printf_i+0x22e>
 8006dc2:	bf00      	nop
 8006dc4:	080071c5 	.word	0x080071c5
 8006dc8:	080071d6 	.word	0x080071d6

08006dcc <memmove>:
 8006dcc:	4288      	cmp	r0, r1
 8006dce:	b510      	push	{r4, lr}
 8006dd0:	eb01 0402 	add.w	r4, r1, r2
 8006dd4:	d902      	bls.n	8006ddc <memmove+0x10>
 8006dd6:	4284      	cmp	r4, r0
 8006dd8:	4623      	mov	r3, r4
 8006dda:	d807      	bhi.n	8006dec <memmove+0x20>
 8006ddc:	1e43      	subs	r3, r0, #1
 8006dde:	42a1      	cmp	r1, r4
 8006de0:	d008      	beq.n	8006df4 <memmove+0x28>
 8006de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dea:	e7f8      	b.n	8006dde <memmove+0x12>
 8006dec:	4402      	add	r2, r0
 8006dee:	4601      	mov	r1, r0
 8006df0:	428a      	cmp	r2, r1
 8006df2:	d100      	bne.n	8006df6 <memmove+0x2a>
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dfe:	e7f7      	b.n	8006df0 <memmove+0x24>

08006e00 <_free_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4605      	mov	r5, r0
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d041      	beq.n	8006e8c <_free_r+0x8c>
 8006e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0c:	1f0c      	subs	r4, r1, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfb8      	it	lt
 8006e12:	18e4      	addlt	r4, r4, r3
 8006e14:	f000 f912 	bl	800703c <__malloc_lock>
 8006e18:	4a1d      	ldr	r2, [pc, #116]	; (8006e90 <_free_r+0x90>)
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	b933      	cbnz	r3, 8006e2c <_free_r+0x2c>
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	6014      	str	r4, [r2, #0]
 8006e22:	4628      	mov	r0, r5
 8006e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e28:	f000 b90e 	b.w	8007048 <__malloc_unlock>
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d908      	bls.n	8006e42 <_free_r+0x42>
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	1821      	adds	r1, r4, r0
 8006e34:	428b      	cmp	r3, r1
 8006e36:	bf01      	itttt	eq
 8006e38:	6819      	ldreq	r1, [r3, #0]
 8006e3a:	685b      	ldreq	r3, [r3, #4]
 8006e3c:	1809      	addeq	r1, r1, r0
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	e7ed      	b.n	8006e1e <_free_r+0x1e>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x4c>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x42>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1850      	adds	r0, r2, r1
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x6c>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	4401      	add	r1, r0
 8006e58:	1850      	adds	r0, r2, r1
 8006e5a:	4283      	cmp	r3, r0
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1e0      	bne.n	8006e22 <_free_r+0x22>
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	4401      	add	r1, r0
 8006e68:	6011      	str	r1, [r2, #0]
 8006e6a:	e7da      	b.n	8006e22 <_free_r+0x22>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x74>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	e7d6      	b.n	8006e22 <_free_r+0x22>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	1821      	adds	r1, r4, r0
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1809      	addeq	r1, r1, r0
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7ca      	b.n	8006e22 <_free_r+0x22>
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	200002b4 	.word	0x200002b4

08006e94 <sbrk_aligned>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	4e0e      	ldr	r6, [pc, #56]	; (8006ed0 <sbrk_aligned+0x3c>)
 8006e98:	460c      	mov	r4, r1
 8006e9a:	6831      	ldr	r1, [r6, #0]
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	b911      	cbnz	r1, 8006ea6 <sbrk_aligned+0x12>
 8006ea0:	f000 f8bc 	bl	800701c <_sbrk_r>
 8006ea4:	6030      	str	r0, [r6, #0]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 f8b7 	bl	800701c <_sbrk_r>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d00a      	beq.n	8006ec8 <sbrk_aligned+0x34>
 8006eb2:	1cc4      	adds	r4, r0, #3
 8006eb4:	f024 0403 	bic.w	r4, r4, #3
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d007      	beq.n	8006ecc <sbrk_aligned+0x38>
 8006ebc:	1a21      	subs	r1, r4, r0
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 f8ac 	bl	800701c <_sbrk_r>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d101      	bne.n	8006ecc <sbrk_aligned+0x38>
 8006ec8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ecc:	4620      	mov	r0, r4
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	200002b8 	.word	0x200002b8

08006ed4 <_malloc_r>:
 8006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed8:	1ccd      	adds	r5, r1, #3
 8006eda:	f025 0503 	bic.w	r5, r5, #3
 8006ede:	3508      	adds	r5, #8
 8006ee0:	2d0c      	cmp	r5, #12
 8006ee2:	bf38      	it	cc
 8006ee4:	250c      	movcc	r5, #12
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	4607      	mov	r7, r0
 8006eea:	db01      	blt.n	8006ef0 <_malloc_r+0x1c>
 8006eec:	42a9      	cmp	r1, r5
 8006eee:	d905      	bls.n	8006efc <_malloc_r+0x28>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efc:	4e2e      	ldr	r6, [pc, #184]	; (8006fb8 <_malloc_r+0xe4>)
 8006efe:	f000 f89d 	bl	800703c <__malloc_lock>
 8006f02:	6833      	ldr	r3, [r6, #0]
 8006f04:	461c      	mov	r4, r3
 8006f06:	bb34      	cbnz	r4, 8006f56 <_malloc_r+0x82>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7ff ffc2 	bl	8006e94 <sbrk_aligned>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	4604      	mov	r4, r0
 8006f14:	d14d      	bne.n	8006fb2 <_malloc_r+0xde>
 8006f16:	6834      	ldr	r4, [r6, #0]
 8006f18:	4626      	mov	r6, r4
 8006f1a:	2e00      	cmp	r6, #0
 8006f1c:	d140      	bne.n	8006fa0 <_malloc_r+0xcc>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	4631      	mov	r1, r6
 8006f22:	4638      	mov	r0, r7
 8006f24:	eb04 0803 	add.w	r8, r4, r3
 8006f28:	f000 f878 	bl	800701c <_sbrk_r>
 8006f2c:	4580      	cmp	r8, r0
 8006f2e:	d13a      	bne.n	8006fa6 <_malloc_r+0xd2>
 8006f30:	6821      	ldr	r1, [r4, #0]
 8006f32:	3503      	adds	r5, #3
 8006f34:	1a6d      	subs	r5, r5, r1
 8006f36:	f025 0503 	bic.w	r5, r5, #3
 8006f3a:	3508      	adds	r5, #8
 8006f3c:	2d0c      	cmp	r5, #12
 8006f3e:	bf38      	it	cc
 8006f40:	250c      	movcc	r5, #12
 8006f42:	4629      	mov	r1, r5
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ffa5 	bl	8006e94 <sbrk_aligned>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d02b      	beq.n	8006fa6 <_malloc_r+0xd2>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	442b      	add	r3, r5
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	e00e      	b.n	8006f74 <_malloc_r+0xa0>
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	1b52      	subs	r2, r2, r5
 8006f5a:	d41e      	bmi.n	8006f9a <_malloc_r+0xc6>
 8006f5c:	2a0b      	cmp	r2, #11
 8006f5e:	d916      	bls.n	8006f8e <_malloc_r+0xba>
 8006f60:	1961      	adds	r1, r4, r5
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	6025      	str	r5, [r4, #0]
 8006f66:	bf18      	it	ne
 8006f68:	6059      	strne	r1, [r3, #4]
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	bf08      	it	eq
 8006f6e:	6031      	streq	r1, [r6, #0]
 8006f70:	5162      	str	r2, [r4, r5]
 8006f72:	604b      	str	r3, [r1, #4]
 8006f74:	4638      	mov	r0, r7
 8006f76:	f104 060b 	add.w	r6, r4, #11
 8006f7a:	f000 f865 	bl	8007048 <__malloc_unlock>
 8006f7e:	f026 0607 	bic.w	r6, r6, #7
 8006f82:	1d23      	adds	r3, r4, #4
 8006f84:	1af2      	subs	r2, r6, r3
 8006f86:	d0b6      	beq.n	8006ef6 <_malloc_r+0x22>
 8006f88:	1b9b      	subs	r3, r3, r6
 8006f8a:	50a3      	str	r3, [r4, r2]
 8006f8c:	e7b3      	b.n	8006ef6 <_malloc_r+0x22>
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	42a3      	cmp	r3, r4
 8006f92:	bf0c      	ite	eq
 8006f94:	6032      	streq	r2, [r6, #0]
 8006f96:	605a      	strne	r2, [r3, #4]
 8006f98:	e7ec      	b.n	8006f74 <_malloc_r+0xa0>
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	6864      	ldr	r4, [r4, #4]
 8006f9e:	e7b2      	b.n	8006f06 <_malloc_r+0x32>
 8006fa0:	4634      	mov	r4, r6
 8006fa2:	6876      	ldr	r6, [r6, #4]
 8006fa4:	e7b9      	b.n	8006f1a <_malloc_r+0x46>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	4638      	mov	r0, r7
 8006fac:	f000 f84c 	bl	8007048 <__malloc_unlock>
 8006fb0:	e7a1      	b.n	8006ef6 <_malloc_r+0x22>
 8006fb2:	6025      	str	r5, [r4, #0]
 8006fb4:	e7de      	b.n	8006f74 <_malloc_r+0xa0>
 8006fb6:	bf00      	nop
 8006fb8:	200002b4 	.word	0x200002b4

08006fbc <_realloc_r>:
 8006fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	4614      	mov	r4, r2
 8006fc4:	460e      	mov	r6, r1
 8006fc6:	b921      	cbnz	r1, 8006fd2 <_realloc_r+0x16>
 8006fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fcc:	4611      	mov	r1, r2
 8006fce:	f7ff bf81 	b.w	8006ed4 <_malloc_r>
 8006fd2:	b92a      	cbnz	r2, 8006fe0 <_realloc_r+0x24>
 8006fd4:	f7ff ff14 	bl	8006e00 <_free_r>
 8006fd8:	4625      	mov	r5, r4
 8006fda:	4628      	mov	r0, r5
 8006fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe0:	f000 f838 	bl	8007054 <_malloc_usable_size_r>
 8006fe4:	4284      	cmp	r4, r0
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	d802      	bhi.n	8006ff0 <_realloc_r+0x34>
 8006fea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fee:	d812      	bhi.n	8007016 <_realloc_r+0x5a>
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f7ff ff6e 	bl	8006ed4 <_malloc_r>
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d0ed      	beq.n	8006fda <_realloc_r+0x1e>
 8006ffe:	42bc      	cmp	r4, r7
 8007000:	4622      	mov	r2, r4
 8007002:	4631      	mov	r1, r6
 8007004:	bf28      	it	cs
 8007006:	463a      	movcs	r2, r7
 8007008:	f7ff fba6 	bl	8006758 <memcpy>
 800700c:	4631      	mov	r1, r6
 800700e:	4640      	mov	r0, r8
 8007010:	f7ff fef6 	bl	8006e00 <_free_r>
 8007014:	e7e1      	b.n	8006fda <_realloc_r+0x1e>
 8007016:	4635      	mov	r5, r6
 8007018:	e7df      	b.n	8006fda <_realloc_r+0x1e>
	...

0800701c <_sbrk_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d06      	ldr	r5, [pc, #24]	; (8007038 <_sbrk_r+0x1c>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	f7fa fcfa 	bl	8001a20 <_sbrk>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_sbrk_r+0x1a>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_sbrk_r+0x1a>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	200002bc 	.word	0x200002bc

0800703c <__malloc_lock>:
 800703c:	4801      	ldr	r0, [pc, #4]	; (8007044 <__malloc_lock+0x8>)
 800703e:	f000 b811 	b.w	8007064 <__retarget_lock_acquire_recursive>
 8007042:	bf00      	nop
 8007044:	200002c0 	.word	0x200002c0

08007048 <__malloc_unlock>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__malloc_unlock+0x8>)
 800704a:	f000 b80c 	b.w	8007066 <__retarget_lock_release_recursive>
 800704e:	bf00      	nop
 8007050:	200002c0 	.word	0x200002c0

08007054 <_malloc_usable_size_r>:
 8007054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007058:	1f18      	subs	r0, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	bfbc      	itt	lt
 800705e:	580b      	ldrlt	r3, [r1, r0]
 8007060:	18c0      	addlt	r0, r0, r3
 8007062:	4770      	bx	lr

08007064 <__retarget_lock_acquire_recursive>:
 8007064:	4770      	bx	lr

08007066 <__retarget_lock_release_recursive>:
 8007066:	4770      	bx	lr

08007068 <_init>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr

08007074 <_fini>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

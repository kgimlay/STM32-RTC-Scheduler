
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005b18  08005b18  00015b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c60  08005c60  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c68  08005c68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000074  08005ce4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005ce4  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015303  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003026  00000000  00000000  000353a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  000383c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00039758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3ab  00000000  00000000  0003a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014539  00000000  00000000  00058d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b889a  00000000  00000000  0006d294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125b2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000547c  00000000  00000000  00125b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b00 	.word	0x08005b00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08005b00 	.word	0x08005b00

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fffc 	bl	800153c <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000188 	.word	0x20000188

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fff2 	bl	8001558 <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 8000582:	1cfa      	adds	r2, r7, #3
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f956 	bl	800083c <getNextAlarm>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d024      	beq.n	80005e0 <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000596:	7ab8      	ldrb	r0, [r7, #10]
 8000598:	7af9      	ldrb	r1, [r7, #11]
 800059a:	7b3a      	ldrb	r2, [r7, #12]
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	f001 f939 	bl	8001814 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d017      	beq.n	80005d8 <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4910      	ldr	r1, [pc, #64]	; (80005ec <calendar_start+0x70>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	440b      	add	r3, r1
 80005b6:	3308      	adds	r3, #8
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d009      	beq.n	80005d2 <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].start_callback)();
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <calendar_start+0x70>)
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	440b      	add	r3, r1
 80005cc:	3308      	adds	r3, #8
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <calendar_start+0x74>)
 80005d6:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <calendar_start+0x78>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 80005de:	e001      	b.n	80005e4 <calendar_start+0x68>
		diableAlarm_A();
 80005e0:	f001 f9b4 	bl	800194c <diableAlarm_A>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000090 	.word	0x20000090
 80005f0:	20000004 	.word	0x20000004
 80005f4:	20000184 	.word	0x20000184

080005f8 <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 80005fe:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <calendar_handleAlarm+0x17c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 80b1 	beq.w	800076c <calendar_handleAlarm+0x174>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 800060a:	1cfa      	adds	r2, r7, #3
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f912 	bl	800083c <getNextAlarm>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 8085 	beq.w	800072a <calendar_handleAlarm+0x132>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000620:	7ab8      	ldrb	r0, [r7, #10]
 8000622:	7af9      	ldrb	r1, [r7, #11]
 8000624:	7b3a      	ldrb	r2, [r7, #12]
 8000626:	7b7b      	ldrb	r3, [r7, #13]
 8000628:	f001 f8f4 	bl	8001814 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d01d      	beq.n	800066e <calendar_handleAlarm+0x76>
 8000632:	4b51      	ldr	r3, [pc, #324]	; (8000778 <calendar_handleAlarm+0x180>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800063a:	d118      	bne.n	800066e <calendar_handleAlarm+0x76>

				// call start event callback
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	494f      	ldr	r1, [pc, #316]	; (800077c <calendar_handleAlarm+0x184>)
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	440b      	add	r3, r1
 800064a:	3308      	adds	r3, #8
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d009      	beq.n	8000666 <calendar_handleAlarm+0x6e>
					(*_calendarEvents[currentEventIdx].start_callback)();
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4949      	ldr	r1, [pc, #292]	; (800077c <calendar_handleAlarm+0x184>)
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	440b      	add	r3, r1
 8000660:	3308      	adds	r3, #8
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a43      	ldr	r2, [pc, #268]	; (8000778 <calendar_handleAlarm+0x180>)
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	e07b      	b.n	8000766 <calendar_handleAlarm+0x16e>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d034      	beq.n	80006de <calendar_handleAlarm+0xe6>
 8000674:	4b40      	ldr	r3, [pc, #256]	; (8000778 <calendar_handleAlarm+0x180>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800067c:	d02f      	beq.n	80006de <calendar_handleAlarm+0xe6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <calendar_handleAlarm+0x180>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	493e      	ldr	r1, [pc, #248]	; (800077c <calendar_handleAlarm+0x184>)
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	440b      	add	r3, r1
 800068e:	3314      	adds	r3, #20
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00a      	beq.n	80006ac <calendar_handleAlarm+0xb4>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000696:	4b38      	ldr	r3, [pc, #224]	; (8000778 <calendar_handleAlarm+0x180>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4938      	ldr	r1, [pc, #224]	; (800077c <calendar_handleAlarm+0x184>)
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	440b      	add	r3, r1
 80006a6:	3314      	adds	r3, #20
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4933      	ldr	r1, [pc, #204]	; (800077c <calendar_handleAlarm+0x184>)
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	440b      	add	r3, r1
 80006ba:	3308      	adds	r3, #8
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d009      	beq.n	80006d6 <calendar_handleAlarm+0xde>
					(*_calendarEvents[currentEventIdx].start_callback)();
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	492d      	ldr	r1, [pc, #180]	; (800077c <calendar_handleAlarm+0x184>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3308      	adds	r3, #8
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <calendar_handleAlarm+0x180>)
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e043      	b.n	8000766 <calendar_handleAlarm+0x16e>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	f083 0301 	eor.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d03d      	beq.n	8000766 <calendar_handleAlarm+0x16e>
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <calendar_handleAlarm+0x180>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f2:	d038      	beq.n	8000766 <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <calendar_handleAlarm+0x180>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4920      	ldr	r1, [pc, #128]	; (800077c <calendar_handleAlarm+0x184>)
 80006fa:	4613      	mov	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	440b      	add	r3, r1
 8000704:	3314      	adds	r3, #20
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00a      	beq.n	8000722 <calendar_handleAlarm+0x12a>
					(*_calendarEvents[_currentEvent].end_callback)();
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <calendar_handleAlarm+0x180>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	491a      	ldr	r1, [pc, #104]	; (800077c <calendar_handleAlarm+0x184>)
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	440b      	add	r3, r1
 800071c:	3314      	adds	r3, #20
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a14      	ldr	r2, [pc, #80]	; (8000778 <calendar_handleAlarm+0x180>)
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	e01d      	b.n	8000766 <calendar_handleAlarm+0x16e>

		}

		// if there is no alarm to set, disable the alarm and exit any events
		else {
			diableAlarm_A();
 800072a:	f001 f90f 	bl	800194c <diableAlarm_A>

			if (CURRENTLY_IN_EVENT) {
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <calendar_handleAlarm+0x180>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000736:	d016      	beq.n	8000766 <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <calendar_handleAlarm+0x180>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	490f      	ldr	r1, [pc, #60]	; (800077c <calendar_handleAlarm+0x184>)
 800073e:	4613      	mov	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	440b      	add	r3, r1
 8000748:	3314      	adds	r3, #20
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00a      	beq.n	8000766 <calendar_handleAlarm+0x16e>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <calendar_handleAlarm+0x180>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4909      	ldr	r1, [pc, #36]	; (800077c <calendar_handleAlarm+0x184>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3314      	adds	r3, #20
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <calendar_handleAlarm+0x17c>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	}

	else {

	}
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000184 	.word	0x20000184
 8000778:	20000004 	.word	0x20000004
 800077c:	20000090 	.word	0x20000090

08000780 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <calendar_AlarmA_ISR+0x14>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000184 	.word	0x20000184

08000798 <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
 800079e:	f107 0408 	add.w	r4, r7, #8
 80007a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80007a6:	4639      	mov	r1, r7
 80007a8:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007b4:	f000 f80e 	bl	80007d4 <dateTimeToSeconds>
 80007b8:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 80007ba:	463b      	mov	r3, r7
 80007bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007c0:	f000 f808 	bl	80007d4 <dateTimeToSeconds>
 80007c4:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	1ad3      	subs	r3, r2, r3
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	463b      	mov	r3, r7
 80007dc:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4613      	mov	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80007fa:	fb01 f303 	mul.w	r3, r1, r3
 80007fe:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000800:	78bb      	ldrb	r3, [r7, #2]
 8000802:	3b01      	subs	r3, #1
 8000804:	490a      	ldr	r1, [pc, #40]	; (8000830 <dateTimeToSeconds+0x5c>)
 8000806:	fb01 f303 	mul.w	r3, r1, r3
 800080a:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 800080c:	787b      	ldrb	r3, [r7, #1]
 800080e:	3b01      	subs	r3, #1
 8000810:	4908      	ldr	r1, [pc, #32]	; (8000834 <dateTimeToSeconds+0x60>)
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 8000818:	783b      	ldrb	r3, [r7, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <dateTimeToSeconds+0x64>)
 800081e:	fb01 f303 	mul.w	r3, r1, r3
 8000822:	4413      	add	r3, r2
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	00015180 	.word	0x00015180
 8000834:	00278d00 	.word	0x00278d00
 8000838:	01da9c00 	.word	0x01da9c00

0800083c <getNextAlarm>:


/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b08d      	sub	sp, #52	; 0x34
 8000840:	af02      	add	r7, sp, #8
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
	int currentIdx = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
	bool nextAlarmFound = false;
 8000850:	2300      	movs	r3, #0
 8000852:	77fb      	strb	r3, [r7, #31]
	DateTime now = {0};
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	1cdc      	adds	r4, r3, #3
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	1c9a      	adds	r2, r3, #2
 8000874:	f107 0318 	add.w	r3, r7, #24
 8000878:	1c59      	adds	r1, r3, #1
 800087a:	f107 0018 	add.w	r0, r7, #24
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	3305      	adds	r3, #5
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	3304      	adds	r3, #4
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	4623      	mov	r3, r4
 8000890:	f000 ff2c 	bl	80016ec <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
	currentIdx = eventIdx - 1;
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	3b01      	subs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
	nextAlarmFound = false;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 80008a2:	e0bc      	b.n	8000a1e <getNextAlarm+0x1e2>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 80008a4:	4973      	ldr	r1, [pc, #460]	; (8000a74 <getNextAlarm+0x238>)
 80008a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	440b      	add	r3, r1
 80008b2:	cb0c      	ldmia	r3, {r2, r3}
 80008b4:	f107 0118 	add.w	r1, r7, #24
 80008b8:	c903      	ldmia	r1, {r0, r1}
 80008ba:	f7ff ff6d 	bl	8000798 <compareDateTime>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	da43      	bge.n	800094c <getNextAlarm+0x110>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 80008c4:	496b      	ldr	r1, [pc, #428]	; (8000a74 <getNextAlarm+0x238>)
 80008c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 80008d6:	4967      	ldr	r1, [pc, #412]	; (8000a74 <getNextAlarm+0x238>)
 80008d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	3301      	adds	r3, #1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 80008ea:	4962      	ldr	r1, [pc, #392]	; (8000a74 <getNextAlarm+0x238>)
 80008ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	3302      	adds	r3, #2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 80008fe:	495d      	ldr	r1, [pc, #372]	; (8000a74 <getNextAlarm+0x238>)
 8000900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	440b      	add	r3, r1
 800090c:	3303      	adds	r3, #3
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 8000912:	4958      	ldr	r1, [pc, #352]	; (8000a74 <getNextAlarm+0x238>)
 8000914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	440b      	add	r3, r1
 8000920:	3304      	adds	r3, #4
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 8000926:	4953      	ldr	r1, [pc, #332]	; (8000a74 <getNextAlarm+0x238>)
 8000928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	440b      	add	r3, r1
 8000934:	3305      	adds	r3, #5
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 800093a:	2301      	movs	r3, #1
 800093c:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx - 1;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	3b01      	subs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
			*inEvent = false;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e068      	b.n	8000a1e <getNextAlarm+0x1e2>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 800094c:	4949      	ldr	r1, [pc, #292]	; (8000a74 <getNextAlarm+0x238>)
 800094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	cb0c      	ldmia	r3, {r2, r3}
 800095c:	f107 0118 	add.w	r1, r7, #24
 8000960:	c903      	ldmia	r1, {r0, r1}
 8000962:	f7ff ff19 	bl	8000798 <compareDateTime>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	db55      	blt.n	8000a18 <getNextAlarm+0x1dc>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 800096c:	4941      	ldr	r1, [pc, #260]	; (8000a74 <getNextAlarm+0x238>)
 800096e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	3308      	adds	r3, #8
 800097c:	3304      	adds	r3, #4
 800097e:	cb0c      	ldmia	r3, {r2, r3}
 8000980:	f107 0118 	add.w	r1, r7, #24
 8000984:	c903      	ldmia	r1, {r0, r1}
 8000986:	f7ff ff07 	bl	8000798 <compareDateTime>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	da43      	bge.n	8000a18 <getNextAlarm+0x1dc>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 8000990:	4938      	ldr	r1, [pc, #224]	; (8000a74 <getNextAlarm+0x238>)
 8000992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	440b      	add	r3, r1
 800099e:	330c      	adds	r3, #12
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 80009a4:	4933      	ldr	r1, [pc, #204]	; (8000a74 <getNextAlarm+0x238>)
 80009a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	330d      	adds	r3, #13
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 80009b8:	492e      	ldr	r1, [pc, #184]	; (8000a74 <getNextAlarm+0x238>)
 80009ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	440b      	add	r3, r1
 80009c6:	330e      	adds	r3, #14
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 80009cc:	4929      	ldr	r1, [pc, #164]	; (8000a74 <getNextAlarm+0x238>)
 80009ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	330f      	adds	r3, #15
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 80009e0:	4924      	ldr	r1, [pc, #144]	; (8000a74 <getNextAlarm+0x238>)
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	440b      	add	r3, r1
 80009ee:	3310      	adds	r3, #16
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 80009f4:	491f      	ldr	r1, [pc, #124]	; (8000a74 <getNextAlarm+0x238>)
 80009f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	3311      	adds	r3, #17
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx;
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	623b      	str	r3, [r7, #32]
			*inEvent = true;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e002      	b.n	8000a1e <getNextAlarm+0x1e2>
		}

		// traverse to next event
		else {
			eventIdx++;
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <getNextAlarm+0x23c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a24:	429a      	cmp	r2, r3
 8000a26:	da06      	bge.n	8000a36 <getNextAlarm+0x1fa>
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	f083 0301 	eor.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f47f af37 	bne.w	80008a4 <getNextAlarm+0x68>
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	f083 0301 	eor.w	r3, r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d007      	beq.n	8000a52 <getNextAlarm+0x216>
		dateTime = NULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a4c:	601a      	str	r2, [r3, #0]
		return false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e00b      	b.n	8000a6a <getNextAlarm+0x22e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	6010      	str	r0, [r2, #0]
 8000a5e:	889b      	ldrh	r3, [r3, #4]
 8000a60:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = currentIdx;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	6a3a      	ldr	r2, [r7, #32]
 8000a66:	601a      	str	r2, [r3, #0]
		return true;
 8000a68:	2301      	movs	r3, #1
	}
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	372c      	adds	r7, #44	; 0x2c
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd90      	pop	{r4, r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000090 	.word	0x20000090
 8000a78:	20000180 	.word	0x20000180

08000a7c <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	221c      	movs	r2, #28
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fb94 	bl	80051c8 <memcpy>
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	221c      	movs	r2, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68b8      	ldr	r0, [r7, #8]
 8000ac8:	f004 fb7e 	bl	80051c8 <memcpy>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f9c3 	bl	8000e68 <com_transport_init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d007      	beq.n	8000af8 <com_session_init+0x24>
	{
		_sessionOpen = false;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <com_session_init+0x30>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <com_session_init+0x34>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
		return true;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <com_session_init+0x26>
	}

	else
	{
		return false;
 8000af8:	2300      	movs	r3, #0
	}
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000018c 	.word	0x2000018c
 8000b08:	2000018d 	.word	0x2000018d

08000b0c <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <start_session+0x48>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d016      	beq.n	8000b48 <start_session+0x3c>
	{
		if (!_sessionOpen)
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <start_session+0x4c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f083 0301 	eor.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00d      	beq.n	8000b44 <start_session+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8000b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2c:	f000 f82e 	bl	8000b8c <_handshake>
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <start_session+0x34>
				_sessionOpen = true;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <start_session+0x4c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	e002      	b.n	8000b4a <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e000      	b.n	8000b4a <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000b48:	2303      	movs	r3, #3
	}
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000018d 	.word	0x2000018d
 8000b58:	2000018c 	.word	0x2000018c

08000b5c <session_cycle>:

/*
 *
 */
SESSION_STATUS session_cycle(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	if (_sessionInit)
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <session_cycle+0x28>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d009      	beq.n	8000b7c <session_cycle+0x20>
	{
		if (_sessionOpen)
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <session_cycle+0x2c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <session_cycle+0x1c>
		{
			return _session_cycle();
 8000b70:	f000 f8f6 	bl	8000d60 <_session_cycle>
 8000b74:	4603      	mov	r3, r0
 8000b76:	e002      	b.n	8000b7e <session_cycle+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e000      	b.n	8000b7e <session_cycle+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000b7c:	2303      	movs	r3, #3
	}
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000018d 	.word	0x2000018d
 8000b88:	2000018c 	.word	0x2000018c

08000b8c <_handshake>:

/*
 *
 */
SESSION_STATUS _handshake(unsigned int timeout_ms)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool error = false;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	bool success = false;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]

	while (!success && !error)
 8000bbe:	e0a2      	b.n	8000d06 <_handshake+0x17a>
	{
		// state 0:  receive message
		if (state == 0)
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <_handshake+0x48>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 fa00 	bl	8000fcc <rx>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000bd2:	e063      	b.n	8000c9c <_handshake+0x110>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10b      	bne.n	8000bf2 <_handshake+0x66>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000bda:	f107 0208 	add.w	r2, r7, #8
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f983 	bl	8000ef0 <dequeue_rx>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000bf0:	e054      	b.n	8000c9c <_handshake+0x110>
		}
		// state 2: check if sync
		else if (state == 2)
 8000bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d10d      	bne.n	8000c14 <_handshake+0x88>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	4955      	ldr	r1, [pc, #340]	; (8000d54 <_handshake+0x1c8>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fb2b 	bl	800525c <strncmp>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d047      	beq.n	8000c9c <_handshake+0x110>
			{
				error = true;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c12:	e043      	b.n	8000c9c <_handshake+0x110>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d110      	bne.n	8000c3c <_handshake+0xb0>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	221c      	movs	r2, #28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fade 	bl	80051e4 <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	484a      	ldr	r0, [pc, #296]	; (8000d58 <_handshake+0x1cc>)
 8000c30:	f000 f938 	bl	8000ea4 <queue_tx>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c3a:	e02f      	b.n	8000c9c <_handshake+0x110>
		}
		// state 4: send ack
		else if (state == 4)
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d106      	bne.n	8000c50 <_handshake+0xc4>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 8000c42:	2064      	movs	r0, #100	; 0x64
 8000c44:	f000 f988 	bl	8000f58 <tx>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c4e:	e025      	b.n	8000c9c <_handshake+0x110>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8000c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	d106      	bne.n	8000c64 <_handshake+0xd8>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 8000c56:	20fa      	movs	r0, #250	; 0xfa
 8000c58:	f000 f9b8 	bl	8000fcc <rx>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c62:	e01b      	b.n	8000c9c <_handshake+0x110>
		}
		// state 6: dequeue message
		else if (state == 6)
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d10b      	bne.n	8000c82 <_handshake+0xf6>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000c6a:	f107 0208 	add.w	r2, r7, #8
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f93b 	bl	8000ef0 <dequeue_rx>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c80:	e00c      	b.n	8000c9c <_handshake+0x110>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	2204      	movs	r2, #4
 8000c88:	4934      	ldr	r1, [pc, #208]	; (8000d5c <_handshake+0x1d0>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f004 fae6 	bl	800525c <strncmp>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <_handshake+0x110>
			{
				error = true;
 8000c96:	2301      	movs	r3, #1
 8000c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8000c9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d12d      	bne.n	8000d00 <_handshake+0x174>
		{
			if (state == 0)
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <_handshake+0x124>
				state = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cae:	e02a      	b.n	8000d06 <_handshake+0x17a>
			else if (state == 1)
 8000cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d102      	bne.n	8000cbc <_handshake+0x130>
				state = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cba:	e024      	b.n	8000d06 <_handshake+0x17a>
			else if (state == 2)
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d102      	bne.n	8000cc8 <_handshake+0x13c>
				state = 3;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc6:	e01e      	b.n	8000d06 <_handshake+0x17a>
			else if (state == 3)
 8000cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d102      	bne.n	8000cd4 <_handshake+0x148>
				state = 4;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cd2:	e018      	b.n	8000d06 <_handshake+0x17a>
			else if (state == 4)
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d102      	bne.n	8000ce0 <_handshake+0x154>
				state = 5;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cde:	e012      	b.n	8000d06 <_handshake+0x17a>
			else if (state == 5)
 8000ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d102      	bne.n	8000cec <_handshake+0x160>
				state = 6;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cea:	e00c      	b.n	8000d06 <_handshake+0x17a>
			else if (state == 6)
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d102      	bne.n	8000cf8 <_handshake+0x16c>
				state = 7;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf6:	e006      	b.n	8000d06 <_handshake+0x17a>
			else // if (state == 7)
				success = true;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000cfe:	e002      	b.n	8000d06 <_handshake+0x17a>
		}
		else
		{
			error = true;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (!success && !error)
 8000d06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <_handshake+0x198>
 8000d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d18:	f083 0301 	eor.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f47f af4e 	bne.w	8000bc0 <_handshake+0x34>
		}
	}


	// report status of handshake
	if (success && !error)
 8000d24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <_handshake+0x1b2>
 8000d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <_handshake+0x1b2>
	{
		return SESSION_OKAY;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e006      	b.n	8000d4c <_handshake+0x1c0>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 8000d3e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <_handshake+0x1be>
		{
			return SESSION_TIMEOUT;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <_handshake+0x1c0>
		}
		else
		{
			return SESSION_ERROR;
 8000d4a:	2302      	movs	r3, #2
		}
	}
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08005b18 	.word	0x08005b18
 8000d58:	08005b20 	.word	0x08005b20
 8000d5c:	08005b28 	.word	0x08005b28

08000d60 <_session_cycle>:

/*
 *
 */
SESSION_STATUS _session_cycle(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	615a      	str	r2, [r3, #20]
	bool* isMessage = false;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24

	// Perform message phase of session cycle.
	return _message_phase(messageHeader, messageBody, isMessage);
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f805 	bl	8000d9c <_message_phase>
 8000d92:	4603      	mov	r3, r0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_message_phase>:

/*
 *
 */
SESSION_STATUS _message_phase(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE], bool* messageReceived)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
	TRANSPORT_STATUS transportStatus;
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	221c      	movs	r2, #28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 fa0c 	bl	80051e4 <memset>
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "Clear to send!\n");
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <_message_phase+0xc4>)
 8000dd2:	211c      	movs	r1, #28
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fa0d 	bl	80051f4 <sniprintf>
	transportStatus = queue_tx(CTS_HEADER, messageBody);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4820      	ldr	r0, [pc, #128]	; (8000e64 <_message_phase+0xc8>)
 8000de2:	f000 f85f 	bl	8000ea4 <queue_tx>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (transportStatus != TRANSPORT_OKAY)
 8000dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <_message_phase+0x5c>
	{
		return SESSION_ERROR;
 8000df4:	2302      	movs	r3, #2
 8000df6:	e02e      	b.n	8000e56 <_message_phase+0xba>
	}

	transportStatus = tx(TX_TIMEOUT_MS);
 8000df8:	2064      	movs	r0, #100	; 0x64
 8000dfa:	f000 f8ad 	bl	8000f58 <tx>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8000e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <_message_phase+0x74>
	{
		return SESSION_TIMEOUT;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e022      	b.n	8000e56 <_message_phase+0xba>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8000e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <_message_phase+0x80>
	{
		return SESSION_ERROR;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e01c      	b.n	8000e56 <_message_phase+0xba>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = rx(RX_TIMEOUT_MS);
 8000e1c:	20fa      	movs	r0, #250	; 0xfa
 8000e1e:	f000 f8d5 	bl	8000fcc <rx>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8000e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <_message_phase+0x98>
	{
		return SESSION_TIMEOUT;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e010      	b.n	8000e56 <_message_phase+0xba>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8000e34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <_message_phase+0xa4>
	{
		return SESSION_ERROR;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e00a      	b.n	8000e56 <_message_phase+0xba>
	}

	transportStatus = dequeue_rx(header, body);
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f854 	bl	8000ef0 <dequeue_rx>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	*messageReceived = true;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]

	return SESSION_OKAY;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3730      	adds	r7, #48	; 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08005b30 	.word	0x08005b30
 8000e64:	08005b40 	.word	0x08005b40

08000e68 <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00a      	beq.n	8000e8c <com_transport_init+0x24>
	{
		_uartHandle = huart;
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <com_transport_init+0x30>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <com_transport_init+0x34>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <com_transport_init+0x38>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
		return true;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <com_transport_init+0x26>
	}

	else
	{
		return false;
 8000e8c:	2300      	movs	r3, #0
	}
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	20000190 	.word	0x20000190
 8000e9c:	200001d4 	.word	0x200001d4
 8000ea0:	200001d5 	.word	0x200001d5

08000ea4 <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <queue_tx+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d010      	beq.n	8000ed8 <queue_tx+0x34>
	{
		if (_txBuffer_full)
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <queue_tx+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e00a      	b.n	8000eda <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 8000ec4:	4a09      	ldr	r2, [pc, #36]	; (8000eec <queue_tx+0x48>)
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fdd7 	bl	8000a7c <composeMessage>
			_txBuffer_full = true;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <queue_tx+0x44>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e000      	b.n	8000eda <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000ed8:	2308      	movs	r3, #8
	}
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000190 	.word	0x20000190
 8000ee8:	200001d4 	.word	0x200001d4
 8000eec:	20000194 	.word	0x20000194

08000ef0 <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <dequeue_rx+0x5c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01f      	beq.n	8000f42 <dequeue_rx+0x52>
	{
		if (!_rxBuffer_full)
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <dequeue_rx+0x60>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 8000f12:	2306      	movs	r3, #6
 8000f14:	e016      	b.n	8000f44 <dequeue_rx+0x54>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <dequeue_rx+0x64>)
 8000f18:	f107 0408 	add.w	r4, r7, #8
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <dequeue_rx+0x60>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	461a      	mov	r2, r3
 8000f36:	6839      	ldr	r1, [r7, #0]
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fdb5 	bl	8000aa8 <decomposeMessage>

			return TRANSPORT_OKAY;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <dequeue_rx+0x54>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000f42:	2308      	movs	r3, #8
	}
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4c:	20000190 	.word	0x20000190
 8000f50:	200001d5 	.word	0x200001d5
 8000f54:	200001b4 	.word	0x200001b4

08000f58 <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <tx+0x68>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d026      	beq.n	8000fb6 <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <tx+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f083 0301 	eor.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	e01d      	b.n	8000fb8 <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <tx+0x68>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2220      	movs	r2, #32
 8000f84:	4910      	ldr	r1, [pc, #64]	; (8000fc8 <tx+0x70>)
 8000f86:	f003 fa7f 	bl	8004488 <HAL_UART_Transmit>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <tx+0x40>
		{
			return TRANSPORT_ERROR;
 8000f94:	2302      	movs	r3, #2
 8000f96:	e00f      	b.n	8000fb8 <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d101      	bne.n	8000fa2 <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00a      	b.n	8000fb8 <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d101      	bne.n	8000fac <tx+0x54>
		{
			return TRANSPORT_BUSY;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e005      	b.n	8000fb8 <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <tx+0x6c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000fb6:	2308      	movs	r3, #8
	}
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000190 	.word	0x20000190
 8000fc4:	200001d4 	.word	0x200001d4
 8000fc8:	20000194 	.word	0x20000194

08000fcc <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <rx+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d023      	beq.n	8001024 <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <rx+0x68>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e01d      	b.n	8001026 <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <rx+0x64>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	4911      	ldr	r1, [pc, #68]	; (8001038 <rx+0x6c>)
 8000ff4:	f003 face 	bl	8004594 <HAL_UART_Receive>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 8001002:	2302      	movs	r3, #2
 8001004:	e00f      	b.n	8001026 <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d101      	bne.n	8001010 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 800100c:	2301      	movs	r3, #1
 800100e:	e00a      	b.n	8001026 <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d101      	bne.n	800101a <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 8001016:	2303      	movs	r3, #3
 8001018:	e005      	b.n	8001026 <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <rx+0x68>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001024:	2308      	movs	r3, #8
	}
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000190 	.word	0x20000190
 8001034:	200001d5 	.word	0x200001d5
 8001038:	200001b4 	.word	0x200001b4

0800103c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4013      	ands	r3, r2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d101      	bne.n	8001088 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010aa:	4013      	ands	r3, r2
 80010ac:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 80010c2:	2002      	movs	r0, #2
 80010c4:	f7ff ffd2 	bl	800106c <LL_AHB2_GRP1_IsEnabledClock>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <activate_led+0x60>)
 80010cc:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <activate_led+0x60>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2002      	movs	r0, #2
 80010d8:	f7ff ffb0 	bl	800103c <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <activate_led+0x64>)
 8001100:	f000 ff04 	bl	8001f0c <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	2201      	movs	r2, #1
 8001108:	4619      	mov	r1, r3
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <activate_led+0x64>)
 800110c:	f001 f92c 	bl	8002368 <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200001d8 	.word	0x200001d8
 800111c:	48000400 	.word	0x48000400

08001120 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <deactivate_led+0x38>)
 8001132:	f001 f919 	bl	8002368 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <deactivate_led+0x38>)
 800113c:	f001 f846 	bl	80021cc <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <deactivate_led+0x3c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff ffa3 	bl	8001094 <LL_AHB2_GRP1_DisableClock>
  }
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	48000400 	.word	0x48000400
 800115c:	200001d8 	.word	0x200001d8

08001160 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001170:	f023 0218 	bic.w	r2, r3, #24
 8001174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <LL_AHB2_GRP1_EnableClock>:
{
 800118a:	b480      	push	{r7}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4313      	orrs	r3, r2
 80011a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4013      	ands	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80011c2:	f7ff fadd 	bl	8000780 <calendar_AlarmA_ISR>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fd17 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f84b 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 f99b 	bl	8001518 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011e2:	f000 f943 	bl	800146c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80011e6:	f000 f8a3 	bl	8001330 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f001 f8fc 	bl	80023e8 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 80011f0:	481e      	ldr	r0, [pc, #120]	; (800126c <main+0x9c>)
 80011f2:	f7ff fc6f 	bl	8000ad4 <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 80011f6:	481e      	ldr	r0, [pc, #120]	; (8001270 <main+0xa0>)
 80011f8:	f7ff f99a 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800120e:	f7ff f99f 	bl	8000550 <calendar_setDateTime>

  // start calendar
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	202a      	movs	r0, #42	; 0x2a
 8001218:	f000 fe43 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800121c:	202a      	movs	r0, #42	; 0x2a
 800121e:	f000 fe5a 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  calendar_start();
 8001222:	f7ff f9ab 	bl	800057c <calendar_start>

  // begin listening for messages from desktop
  if (start_session() == SESSION_OKAY)
 8001226:	f7ff fc71 	bl	8000b0c <start_session>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d103      	bne.n	8001238 <main+0x68>
  {
	  activate_led(GREEN_LED);
 8001230:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001234:	f7ff ff40 	bl	80010b8 <activate_led>
  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 8001238:	f7ff f9de 	bl	80005f8 <calendar_handleAlarm>

	  // try connection if not present
	  if (start_session() == SESSION_OKAY)
 800123c:	f7ff fc66 	bl	8000b0c <start_session>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <main+0x7e>
	  {
		  activate_led(GREEN_LED);
 8001246:	f44f 7000 	mov.w	r0, #512	; 0x200
 800124a:	f7ff ff35 	bl	80010b8 <activate_led>
	  }

	  // if message present, handle message
	  if (session_cycle() != SESSION_OKAY)
 800124e:	f7ff fc85 	bl	8000b5c <session_cycle>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <main+0x92>
	  {
		  activate_led(RED_LED);
 8001258:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800125c:	f7ff ff2c 	bl	80010b8 <activate_led>
 8001260:	e7ea      	b.n	8001238 <main+0x68>
	  }
	  else
	  {
		  deactivate_led(RED_LED);
 8001262:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001266:	f7ff ff5b 	bl	8001120 <deactivate_led>
	  calendar_handleAlarm();
 800126a:	e7e5      	b.n	8001238 <main+0x68>
 800126c:	20000214 	.word	0x20000214
 8001270:	200001dc 	.word	0x200001dc

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b09a      	sub	sp, #104	; 0x68
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2248      	movs	r2, #72	; 0x48
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f003 ffae 	bl	80051e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800129a:	f001 f87d 	bl	8002398 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff5e 	bl	8001160 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <SystemClock_Config+0xb8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <SystemClock_Config+0xb8>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <SystemClock_Config+0xb8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80012c0:	232c      	movs	r3, #44	; 0x2c
 80012c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012c4:	2381      	movs	r3, #129	; 0x81
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012d0:	2360      	movs	r3, #96	; 0x60
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012dc:	2300      	movs	r3, #0
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fb41 	bl	800296c <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012f0:	f000 f91f 	bl	8001532 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80012f4:	236f      	movs	r3, #111	; 0x6f
 80012f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f001 feab 	bl	8003070 <HAL_RCC_ClockConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001320:	f000 f907 	bl	8001532 <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3768      	adds	r7, #104	; 0x68
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58000400 	.word	0x58000400

08001330 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	222c      	movs	r2, #44	; 0x2c
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f003 ff47 	bl	80051e4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <MX_RTC_Init+0x134>)
 8001358:	4a43      	ldr	r2, [pc, #268]	; (8001468 <MX_RTC_Init+0x138>)
 800135a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <MX_RTC_Init+0x134>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <MX_RTC_Init+0x134>)
 8001364:	227f      	movs	r2, #127	; 0x7f
 8001366:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001368:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <MX_RTC_Init+0x134>)
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <MX_RTC_Init+0x134>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <MX_RTC_Init+0x134>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <MX_RTC_Init+0x134>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001380:	4b38      	ldr	r3, [pc, #224]	; (8001464 <MX_RTC_Init+0x134>)
 8001382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001386:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <MX_RTC_Init+0x134>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <MX_RTC_Init+0x134>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001394:	4833      	ldr	r0, [pc, #204]	; (8001464 <MX_RTC_Init+0x134>)
 8001396:	f002 fb45 	bl	8003a24 <HAL_RTC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80013a0:	f000 f8c7 	bl	8001532 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013c2:	2201      	movs	r2, #1
 80013c4:	4619      	mov	r1, r3
 80013c6:	4827      	ldr	r0, [pc, #156]	; (8001464 <MX_RTC_Init+0x134>)
 80013c8:	f002 fbae 	bl	8003b28 <HAL_RTC_SetTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80013d2:	f000 f8ae 	bl	8001532 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80013dc:	2301      	movs	r3, #1
 80013de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	481b      	ldr	r0, [pc, #108]	; (8001464 <MX_RTC_Init+0x134>)
 80013f8:	f002 fc94 	bl	8003d24 <HAL_RTC_SetDate>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001402:	f000 f896 	bl	8001532 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001406:	2300      	movs	r3, #0
 8001408:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800140a:	2300      	movs	r3, #0
 800140c:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800140e:	2300      	movs	r3, #0
 8001410:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2201      	movs	r2, #1
 800143a:	4619      	mov	r1, r3
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <MX_RTC_Init+0x134>)
 800143e:	f002 fd45 	bl	8003ecc <HAL_RTC_SetAlarm_IT>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001448:	f000 f873 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	202a      	movs	r0, #42	; 0x2a
 8001452:	f000 fd26 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001456:	202a      	movs	r0, #42	; 0x2a
 8001458:	f000 fd3d 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3748      	adds	r7, #72	; 0x48
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001dc 	.word	0x200001dc
 8001468:	40002800 	.word	0x40002800

0800146c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 8001472:	4a28      	ldr	r2, [pc, #160]	; (8001514 <MX_USART2_UART_Init+0xa8>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 8001478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 8001486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 800148e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014b4:	2230      	movs	r2, #48	; 0x30
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014ca:	f002 ff8d 	bl	80043e8 <HAL_UART_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80014d4:	f000 f82d 	bl	8001532 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014dc:	f003 fd81 	bl	8004fe2 <HAL_UARTEx_SetTxFifoThreshold>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80014e6:	f000 f824 	bl	8001532 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014ee:	f003 fdb6 	bl	800505e <HAL_UARTEx_SetRxFifoThreshold>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80014f8:	f000 f81b 	bl	8001532 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_USART2_UART_Init+0xa4>)
 80014fe:	f003 fd38 	bl	8004f72 <HAL_UARTEx_DisableFifoMode>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8001508:	f000 f813 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000214 	.word	0x20000214
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fe34 	bl	800118a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2004      	movs	r0, #4
 8001524:	f7ff fe31 	bl	800118a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	2002      	movs	r0, #2
 800152a:	f7ff fe2e 	bl	800118a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}

08001532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001536:	b672      	cpsid	i
}
 8001538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153a:	e7fe      	b.n	800153a <Error_Handler+0x8>

0800153c <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <rtcAlarmControl_init+0x18>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	200002a8 	.word	0x200002a8

08001558 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4623      	mov	r3, r4
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	4603      	mov	r3, r0
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	460b      	mov	r3, r1
 8001570:	717b      	strb	r3, [r7, #5]
 8001572:	4613      	mov	r3, r2
 8001574:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a5a      	ldr	r2, [pc, #360]	; (80016e4 <setDateTime+0x18c>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	b258      	sxtb	r0, r3
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <setDateTime+0x18c>)
 800158a:	fba3 1302 	umull	r1, r3, r3, r2
 800158e:	08d9      	lsrs	r1, r3, #3
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	b25b      	sxtb	r3, r3
 800159e:	4303      	orrs	r3, r0
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	; (80016e4 <setDateTime+0x18c>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	b258      	sxtb	r0, r3
 80015b6:	79ba      	ldrb	r2, [r7, #6]
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <setDateTime+0x18c>)
 80015ba:	fba3 1302 	umull	r1, r3, r3, r2
 80015be:	08d9      	lsrs	r1, r3, #3
 80015c0:	460b      	mov	r3, r1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	4303      	orrs	r3, r0
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 80015d6:	797b      	ldrb	r3, [r7, #5]
 80015d8:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <setDateTime+0x18c>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	b258      	sxtb	r0, r3
 80015e6:	797a      	ldrb	r2, [r7, #5]
 80015e8:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <setDateTime+0x18c>)
 80015ea:	fba3 1302 	umull	r1, r3, r3, r2
 80015ee:	08d9      	lsrs	r1, r3, #3
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	4303      	orrs	r3, r0
 8001600:	b25b      	sxtb	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 800160a:	793b      	ldrb	r3, [r7, #4]
 800160c:	4a35      	ldr	r2, [pc, #212]	; (80016e4 <setDateTime+0x18c>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	08db      	lsrs	r3, r3, #3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	b258      	sxtb	r0, r3
 800161a:	793a      	ldrb	r2, [r7, #4]
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <setDateTime+0x18c>)
 800161e:	fba3 1302 	umull	r1, r3, r3, r2
 8001622:	08d9      	lsrs	r1, r3, #3
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	b25b      	sxtb	r3, r3
 8001632:	4303      	orrs	r3, r0
 8001634:	b25b      	sxtb	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 800163a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800163e:	4a29      	ldr	r2, [pc, #164]	; (80016e4 <setDateTime+0x18c>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	b258      	sxtb	r0, r3
 800164c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <setDateTime+0x18c>)
 8001652:	fba3 1302 	umull	r1, r3, r3, r2
 8001656:	08d9      	lsrs	r1, r3, #3
 8001658:	460b      	mov	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b25b      	sxtb	r3, r3
 8001666:	4303      	orrs	r3, r0
 8001668:	b25b      	sxtb	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 800166e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <setDateTime+0x18c>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	b258      	sxtb	r0, r3
 8001680:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <setDateTime+0x18c>)
 8001686:	fba3 1302 	umull	r1, r3, r3, r2
 800168a:	08d9      	lsrs	r1, r3, #3
 800168c:	460b      	mov	r3, r1
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	b25b      	sxtb	r3, r3
 800169a:	4303      	orrs	r3, r0
 800169c:	b25b      	sxtb	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <setDateTime+0x190>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f107 011c 	add.w	r1, r7, #28
 80016aa:	2201      	movs	r2, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fb39 	bl	8003d24 <HAL_RTC_SetDate>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80016bc:	e7fe      	b.n	80016bc <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <setDateTime+0x190>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f107 0108 	add.w	r1, r7, #8
 80016c6:	2201      	movs	r2, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 fa2d 	bl	8003b28 <HAL_RTC_SetTime>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80016d8:	e7fe      	b.n	80016d8 <setDateTime+0x180>
  }
}
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	cccccccd 	.word	0xcccccccd
 80016e8:	200002a8 	.word	0x200002a8

080016ec <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <getDateTime+0x124>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f107 0114 	add.w	r1, r7, #20
 8001716:	2201      	movs	r2, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f002 faa1 	bl	8003c60 <HAL_RTC_GetTime>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001728:	e7fe      	b.n	8001728 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <getDateTime+0x124>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f107 0110 	add.w	r1, r7, #16
 8001732:	2201      	movs	r2, #1
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fb7b 	bl	8003e30 <HAL_RTC_GetDate>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001744:	e7fe      	b.n	8001744 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8001746:	7cfb      	ldrb	r3, [r7, #19]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4413      	add	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	7cfb      	ldrb	r3, [r7, #19]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b2da      	uxtb	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001766:	7c7b      	ldrb	r3, [r7, #17]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	7c7b      	ldrb	r3, [r7, #17]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4413      	add	r3, r2
 8001780:	b2da      	uxtb	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001786:	7cbb      	ldrb	r3, [r7, #18]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4413      	add	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	7cbb      	ldrb	r3, [r7, #18]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4413      	add	r3, r2
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 80017a6:	7d3b      	ldrb	r3, [r7, #20]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	7d3b      	ldrb	r3, [r7, #20]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4413      	add	r3, r2
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 80017c6:	7d7b      	ldrb	r3, [r7, #21]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	7d7b      	ldrb	r3, [r7, #21]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e4:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 80017e6:	7dbb      	ldrb	r3, [r7, #22]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002a8 	.word	0x200002a8

08001814 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b08f      	sub	sp, #60	; 0x3c
 8001818:	af00      	add	r7, sp, #0
 800181a:	4604      	mov	r4, r0
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	461a      	mov	r2, r3
 8001822:	4623      	mov	r3, r4
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	4603      	mov	r3, r0
 8001828:	71bb      	strb	r3, [r7, #6]
 800182a:	460b      	mov	r3, r1
 800182c:	717b      	strb	r3, [r7, #5]
 800182e:	4613      	mov	r3, r2
 8001830:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	222c      	movs	r2, #44	; 0x2c
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fcd2 	bl	80051e4 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4a40      	ldr	r2, [pc, #256]	; (8001944 <setAlarm_A+0x130>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	b258      	sxtb	r0, r3
 8001850:	79fa      	ldrb	r2, [r7, #7]
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <setAlarm_A+0x130>)
 8001854:	fba3 1302 	umull	r1, r3, r3, r2
 8001858:	08d9      	lsrs	r1, r3, #3
 800185a:	460b      	mov	r3, r1
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	4303      	orrs	r3, r0
 800186a:	b25b      	sxtb	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	4a33      	ldr	r2, [pc, #204]	; (8001944 <setAlarm_A+0x130>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	b258      	sxtb	r0, r3
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <setAlarm_A+0x130>)
 8001886:	fba3 1302 	umull	r1, r3, r3, r2
 800188a:	08d9      	lsrs	r1, r3, #3
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	b25b      	sxtb	r3, r3
 800189a:	4303      	orrs	r3, r0
 800189c:	b25b      	sxtb	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 80018a2:	797b      	ldrb	r3, [r7, #5]
 80018a4:	4a27      	ldr	r2, [pc, #156]	; (8001944 <setAlarm_A+0x130>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	b258      	sxtb	r0, r3
 80018b2:	797a      	ldrb	r2, [r7, #5]
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <setAlarm_A+0x130>)
 80018b6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ba:	08d9      	lsrs	r1, r3, #3
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	4303      	orrs	r3, r0
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <setAlarm_A+0x130>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	08db      	lsrs	r3, r3, #3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	b258      	sxtb	r0, r3
 80018e2:	793a      	ldrb	r2, [r7, #4]
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <setAlarm_A+0x130>)
 80018e6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ea:	08d9      	lsrs	r1, r3, #3
 80018ec:	460b      	mov	r3, r1
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	4303      	orrs	r3, r0
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 800191a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <setAlarm_A+0x134>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f107 010c 	add.w	r1, r7, #12
 8001928:	2201      	movs	r2, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f002 face 	bl	8003ecc <HAL_RTC_SetAlarm_IT>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8001936:	b672      	cpsid	i
}
 8001938:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 800193a:	e7fe      	b.n	800193a <setAlarm_A+0x126>
  }
}
 800193c:	bf00      	nop
 800193e:	373c      	adds	r7, #60	; 0x3c
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	cccccccd 	.word	0xcccccccd
 8001948:	200002a8 	.word	0x200002a8

0800194c <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <diableAlarm_A+0x24>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fbc3 	bl	80040e4 <HAL_RTC_DeactivateAlarm>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 8001968:	e7fe      	b.n	8001968 <diableAlarm_A+0x1c>
	}
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200002a8 	.word	0x200002a8

08001974 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <LL_AHB2_GRP1_EnableClock>:
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4313      	orrs	r3, r2
 80019da:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b090      	sub	sp, #64	; 0x40
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	2238      	movs	r2, #56	; 0x38
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fbe7 	bl	80051e4 <memset>
  if(hrtc->Instance==RTC)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_RTC_MspInit+0x54>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d115      	bne.n	8001a4c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a24:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fedd 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a3c:	f7ff fd79 	bl	8001532 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a40:	f7ff ff98 	bl	8001974 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a48:	f7ff ffbc 	bl	80019c4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a4c:	bf00      	nop
 8001a4e:	3740      	adds	r7, #64	; 0x40
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40002800 	.word	0x40002800

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b096      	sub	sp, #88	; 0x58
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2238      	movs	r2, #56	; 0x38
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fbb3 	bl	80051e4 <memset>
  if(huart->Instance==USART2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d126      	bne.n	8001ad6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a8c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001a90:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 feaa 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001aa2:	f7ff fd46 	bl	8001532 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aaa:	f7ff ff8b 	bl	80019c4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff ff70 	bl	8001994 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f000 fa1b 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3758      	adds	r7, #88	; 0x58
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2a:	f000 f8c7 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <RTC_Alarm_IRQHandler+0x10>)
 8001b3a:	f002 fb2f 	bl	800419c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200001dc 	.word	0x200001dc

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f003 fafc 	bl	8005174 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20008000 	.word	0x20008000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	200002ac 	.word	0x200002ac
 8001bb0:	200002c8 	.word	0x200002c8

08001bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb8:	f7fe fcb4 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be2:	f003 facd 	bl	8005180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be6:	f7ff faf3 	bl	80011d0 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   r0, =_estack
 8001bec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001bf8:	08005c70 	.word	0x08005c70
  ldr r2, =_sbss
 8001bfc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c00:	200002c4 	.word	0x200002c4

08001c04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f93a 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c18:	f001 fc0c 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_Init+0x3c>)
 8001c20:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f810 	bl	8001c48 <HAL_InitTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	71fb      	strb	r3, [r7, #7]
 8001c32:	e001      	b.n	8001c38 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c34:	f7ff fede 	bl	80019f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_InitTick+0x6c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d024      	beq.n	8001ca6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c5c:	f001 fbea 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_InitTick+0x6c>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f93c 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	d809      	bhi.n	8001c9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c86:	2200      	movs	r2, #0
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c8e:	f000 f908 	bl	8001ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_InitTick+0x70>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e007      	b.n	8001caa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e004      	b.n	8001caa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e001      	b.n	8001caa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	20000008 	.word	0x20000008

08001cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x1c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_IncTick+0x20>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	2000000c 	.word	0x2000000c
 8001cdc:	200002b0 	.word	0x200002b0

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_GetTick+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	200002b0 	.word	0x200002b0

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4906      	ldr	r1, [pc, #24]	; (8001d8c <__NVIC_EnableIRQ+0x34>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e6c:	f7ff ff90 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff2d 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff44 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff92 	bl	8001de4 <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff61 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff37 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffa4 	bl	8001e48 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e140      	b.n	800219e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8132 	beq.w	8002198 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d005      	beq.n	8001f4c <HAL_GPIO_Init+0x40>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d130      	bne.n	8001fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f82:	2201      	movs	r2, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 0201 	and.w	r2, r3, #1
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d017      	beq.n	8001fea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d123      	bne.n	800203e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	6939      	ldr	r1, [r7, #16]
 800203a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0203 	and.w	r2, r3, #3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 808c 	beq.w	8002198 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002080:	4a4e      	ldr	r2, [pc, #312]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	2207      	movs	r2, #7
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1bc>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a44      	ldr	r2, [pc, #272]	; (80021c0 <HAL_GPIO_Init+0x2b4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1b8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_GPIO_Init+0x2b8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1b4>
 80020bc:	2302      	movs	r3, #2
 80020be:	e004      	b.n	80020ca <HAL_GPIO_Init+0x1be>
 80020c0:	2307      	movs	r3, #7
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0x1be>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_GPIO_Init+0x1be>
 80020c8:	2300      	movs	r3, #0
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	4093      	lsls	r3, r2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020da:	4938      	ldr	r1, [pc, #224]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800210c:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002136:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 800213e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002142:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002162:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 800216c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002170:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f47f aeb7 	bne.w	8001f1c <HAL_GPIO_Init+0x10>
  }
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	48000800 	.word	0x48000800
 80021c8:	58000800 	.word	0x58000800

080021cc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80021da:	e0af      	b.n	800233c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80021dc:	2201      	movs	r2, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a2 	beq.w	8002336 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80021f2:	4a59      	ldr	r2, [pc, #356]	; (8002358 <HAL_GPIO_DeInit+0x18c>)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	3302      	adds	r3, #2
 80021fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	2207      	movs	r2, #7
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800221a:	d00d      	beq.n	8002238 <HAL_GPIO_DeInit+0x6c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a4f      	ldr	r2, [pc, #316]	; (800235c <HAL_GPIO_DeInit+0x190>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_DeInit+0x68>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a4e      	ldr	r2, [pc, #312]	; (8002360 <HAL_GPIO_DeInit+0x194>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_GPIO_DeInit+0x64>
 800222c:	2302      	movs	r3, #2
 800222e:	e004      	b.n	800223a <HAL_GPIO_DeInit+0x6e>
 8002230:	2307      	movs	r3, #7
 8002232:	e002      	b.n	800223a <HAL_GPIO_DeInit+0x6e>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_GPIO_DeInit+0x6e>
 8002238:	2300      	movs	r3, #0
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	f002 0203 	and.w	r2, r2, #3
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	4093      	lsls	r3, r2
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	d136      	bne.n	80022b8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 800224c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	4943      	ldr	r1, [pc, #268]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 8002256:	4013      	ands	r3, r2
 8002258:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800225c:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 800225e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	493f      	ldr	r1, [pc, #252]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 8002268:	4013      	ands	r3, r2
 800226a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	493b      	ldr	r1, [pc, #236]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 8002278:	4013      	ands	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	4937      	ldr	r1, [pc, #220]	; (8002364 <HAL_GPIO_DeInit+0x198>)
 8002286:	4013      	ands	r3, r2
 8002288:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	2207      	movs	r2, #7
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <HAL_GPIO_DeInit+0x18c>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	43da      	mvns	r2, r3
 80022aa:	482b      	ldr	r0, [pc, #172]	; (8002358 <HAL_GPIO_DeInit+0x18c>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	400a      	ands	r2, r1
 80022b2:	3302      	adds	r3, #2
 80022b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2103      	movs	r1, #3
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	08d2      	lsrs	r2, r2, #3
 80022ec:	4019      	ands	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2103      	movs	r1, #3
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2103      	movs	r1, #3
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	f47f af49 	bne.w	80021dc <HAL_GPIO_DeInit+0x10>
  }
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	48000400 	.word	0x48000400
 8002360:	48000800 	.word	0x48000800
 8002364:	58000800 	.word	0x58000800

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002384:	e002      	b.n	800238c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	58000400 	.word	0x58000400

080023b4 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <LL_PWR_EnableBootC2+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a03      	ldr	r2, [pc, #12]	; (80023cc <LL_PWR_EnableBootC2+0x18>)
 80023be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	58000400 	.word	0x58000400

080023d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_PWREx_GetVoltageRange+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	58000400 	.word	0x58000400

080023e8 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80023f0:	f7ff ffe0 	bl	80023b4 <LL_PWR_EnableBootC2>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <LL_PWR_IsEnabledBkUpAccess>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240c:	d101      	bne.n	8002412 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	58000400 	.word	0x58000400

08002420 <LL_RCC_HSE_EnableTcxo>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <LL_RCC_HSE_DisableTcxo>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246a:	d101      	bne.n	8002470 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <LL_RCC_HSE_Enable>:
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <LL_RCC_HSE_Disable>:
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_HSE_IsReady>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c4:	d101      	bne.n	80024ca <LL_RCC_HSE_IsReady+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_RCC_HSE_IsReady+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <LL_RCC_HSI_Enable>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_HSI_Disable>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <LL_RCC_HSI_IsReady>:
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251e:	d101      	bne.n	8002524 <LL_RCC_HSI_IsReady+0x18>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <LL_RCC_HSI_IsReady+0x1a>
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <LL_RCC_HSI_SetCalibTrimming>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_RCC_LSE_IsReady>:
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d101      	bne.n	800256e <LL_RCC_LSE_IsReady+0x18>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_RCC_LSE_IsReady+0x1a>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <LL_RCC_LSI_Enable>:
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <LL_RCC_LSI_Disable>:
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <LL_RCC_LSI_IsReady>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d101      	bne.n	80025d0 <LL_RCC_LSI_IsReady+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_RCC_LSI_IsReady+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <LL_RCC_MSI_Enable>:
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6013      	str	r3, [r2, #0]
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_MSI_Disable>:
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_RCC_MSI_IsReady>:
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d101      	bne.n	8002628 <LL_RCC_MSI_IsReady+0x16>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <LL_RCC_MSI_IsReady+0x18>
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d101      	bne.n	8002648 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_RCC_MSI_GetRange>:
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002674:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <LL_RCC_SetSysClkSource>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_GetSysClkSource>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <LL_RCC_SetAHBPrescaler>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <LL_C2_RCC_SetAHBPrescaler>:
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002716:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800271a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <LL_RCC_SetAHB3Prescaler>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002740:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002744:	f023 020f 	bic.w	r2, r3, #15
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <LL_RCC_SetAPB1Prescaler>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <LL_RCC_SetAPB2Prescaler>:
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_GetAHBPrescaler>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <LL_RCC_GetAHB3Prescaler>:
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <LL_RCC_GetAPB1Prescaler>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <LL_RCC_GetAPB2Prescaler>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002852:	d101      	bne.n	8002858 <LL_RCC_PLL_IsReady+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_RCC_PLL_IsReady+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0303 	and.w	r3, r3, #3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ce:	d101      	bne.n	80028d4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f2:	d101      	bne.n	80028f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d101      	bne.n	800291c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002938:	d101      	bne.n	800293e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800295a:	d101      	bne.n	8002960 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
	...

0800296c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e36f      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	f7ff fea6 	bl	80026ce <LL_RCC_GetSysClkSource>
 8002982:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002984:	f7ff ff8f 	bl	80028a6 <LL_RCC_PLL_GetMainSource>
 8002988:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80c4 	beq.w	8002b20 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x3e>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d176      	bne.n	8002a92 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d173      	bne.n	8002a92 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e353      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x68>
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d2:	e006      	b.n	80029e2 <HAL_RCC_OscConfig+0x76>
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d222      	bcs.n	8002a2c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fd5a 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e331      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fe2b 	bl	8002680 <LL_RCC_MSI_SetCalibTrimming>
 8002a2a:	e021      	b.n	8002a70 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a36:	f043 0308 	orr.w	r3, r3, #8
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe12 	bl	8002680 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fd1f 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e2f6      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a70:	f000 fce0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4aa7      	ldr	r2, [pc, #668]	; (8002d14 <HAL_RCC_OscConfig+0x3a8>)
 8002a78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002a7a:	4ba7      	ldr	r3, [pc, #668]	; (8002d18 <HAL_RCC_OscConfig+0x3ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f8e2 	bl	8001c48 <HAL_InitTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d047      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	e2e5      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a9a:	f7ff fd9e 	bl	80025da <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a9e:	f7ff f91f 	bl	8001ce0 <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f91b 	bl	8001ce0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e2d2      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ab8:	f7ff fdab 	bl	8002612 <LL_RCC_MSI_IsReady>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f1      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fdc7 	bl	8002680 <LL_RCC_MSI_SetCalibTrimming>
 8002af2:	e015      	b.n	8002b20 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002af4:	f7ff fd7f 	bl	80025f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002af8:	f7ff f8f2 	bl	8001ce0 <HAL_GetTick>
 8002afc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b00:	f7ff f8ee 	bl	8001ce0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e2a5      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b12:	f7ff fd7e 	bl	8002612 <LL_RCC_MSI_IsReady>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f1      	bne.n	8002b00 <HAL_RCC_OscConfig+0x194>
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b1e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d058      	beq.n	8002bde <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d005      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d108      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d14b      	bne.n	8002bde <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e289      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0x204>
 8002b6a:	f7ff fc86 	bl	800247a <LL_RCC_HSE_Enable>
 8002b6e:	e00d      	b.n	8002b8c <HAL_RCC_OscConfig+0x220>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002b78:	d104      	bne.n	8002b84 <HAL_RCC_OscConfig+0x218>
 8002b7a:	f7ff fc51 	bl	8002420 <LL_RCC_HSE_EnableTcxo>
 8002b7e:	f7ff fc7c 	bl	800247a <LL_RCC_HSE_Enable>
 8002b82:	e003      	b.n	8002b8c <HAL_RCC_OscConfig+0x220>
 8002b84:	f7ff fc87 	bl	8002496 <LL_RCC_HSE_Disable>
 8002b88:	f7ff fc58 	bl	800243c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d012      	beq.n	8002bba <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff f8a4 	bl	8001ce0 <HAL_GetTick>
 8002b98:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff f8a0 	bl	8001ce0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e257      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002bae:	f7ff fc80 	bl	80024b2 <LL_RCC_HSE_IsReady>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f1      	beq.n	8002b9c <HAL_RCC_OscConfig+0x230>
 8002bb8:	e011      	b.n	8002bde <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7ff f891 	bl	8001ce0 <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7ff f88d 	bl	8001ce0 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e244      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002bd4:	f7ff fc6d 	bl	80024b2 <LL_RCC_HSE_IsReady>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f1      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d046      	beq.n	8002c78 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_OscConfig+0x290>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	d10e      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d10b      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e22a      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fc8e 	bl	800252e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c12:	e031      	b.n	8002c78 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	f7ff fc5a 	bl	80024d4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7ff f85e 	bl	8001ce0 <HAL_GetTick>
 8002c24:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7ff f85a 	bl	8001ce0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e211      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c3a:	f7ff fc67 	bl	800250c <LL_RCC_HSI_IsReady>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f1      	beq.n	8002c28 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fc70 	bl	800252e <LL_RCC_HSI_SetCalibTrimming>
 8002c4e:	e013      	b.n	8002c78 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c50:	f7ff fc4e 	bl	80024f0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff f844 	bl	8001ce0 <HAL_GetTick>
 8002c58:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7ff f840 	bl	8001ce0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1f7      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c6e:	f7ff fc4d 	bl	800250c <LL_RCC_HSI_IsReady>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f1      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d06e      	beq.n	8002d62 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d056      	beq.n	8002d3a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c94:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d031      	beq.n	8002d08 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e1d0      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d013      	beq.n	8002cee <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cc6:	f7ff fc67 	bl	8002598 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cca:	f7ff f809 	bl	8001ce0 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7ff f805 	bl	8001ce0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b11      	cmp	r3, #17
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1bc      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ce4:	f7ff fc68 	bl	80025b8 <LL_RCC_LSI_IsReady>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f1      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf6:	f023 0210 	bic.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d08:	f7ff fc36 	bl	8002578 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7fe ffe8 	bl	8001ce0 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002d12:	e00c      	b.n	8002d2e <HAL_RCC_OscConfig+0x3c2>
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe ffe0 	bl	8001ce0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b11      	cmp	r3, #17
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e197      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002d2e:	f7ff fc43 	bl	80025b8 <LL_RCC_LSI_IsReady>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f1      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3b0>
 8002d38:	e013      	b.n	8002d62 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3a:	f7ff fc2d 	bl	8002598 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe ffcf 	bl	8001ce0 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fe ffcb 	bl	8001ce0 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b11      	cmp	r3, #17
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e182      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d58:	f7ff fc2e 	bl	80025b8 <LL_RCC_LSI_IsReady>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f1      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80d8 	beq.w	8002f20 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d70:	f7ff fb44 	bl	80023fc <LL_PWR_IsEnabledBkUpAccess>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d113      	bne.n	8002da2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d7a:	f7ff fb0d 	bl	8002398 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe ffaf 	bl	8001ce0 <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe ffab 	bl	8001ce0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e162      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d98:	f7ff fb30 	bl	80023fc <LL_PWR_IsEnabledBkUpAccess>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f1      	beq.n	8002d86 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d07b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b85      	cmp	r3, #133	; 0x85
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe ff87 	bl	8001ce0 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe ff79 	bl	8001ce0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e12e      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e00:	f7ff fba9 	bl	8002556 <LL_RCC_LSE_IsReady>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ef      	beq.n	8002dea <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b81      	cmp	r3, #129	; 0x81
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b85      	cmp	r3, #133	; 0x85
 8002e18:	d121      	bne.n	8002e5e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe ff61 	bl	8001ce0 <HAL_GetTick>
 8002e1e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe ff53 	bl	8001ce0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e108      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ec      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e5c:	e060      	b.n	8002f20 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe ff3f 	bl	8001ce0 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe ff31 	bl	8001ce0 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0e6      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ec      	bne.n	8002e7a <HAL_RCC_OscConfig+0x50e>
 8002ea0:	e03e      	b.n	8002f20 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe ff1d 	bl	8001ce0 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe ff0f 	bl	8001ce0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0c4      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ec      	bne.n	8002ebe <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fefc 	bl	8001ce0 <HAL_GetTick>
 8002ee8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7fe feee 	bl	8001ce0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0a3      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f16:	f7ff fb1e 	bl	8002556 <LL_RCC_LSE_IsReady>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ef      	bne.n	8002f00 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8099 	beq.w	800305c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d06c      	beq.n	800300a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d14b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	f7ff fc74 	bl	8002824 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fed0 	bl	8001ce0 <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fecc 	bl	8001ce0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e083      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f56:	f7ff fc73 	bl	8002840 <LL_RCC_PLL_IsReady>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f1      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_RCC_OscConfig+0x6fc>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f78:	0212      	lsls	r2, r2, #8
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f80:	4311      	orrs	r1, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f96:	f7ff fc37 	bl	8002808 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fe fe99 	bl	8001ce0 <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7fe fe95 	bl	8001ce0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b0a      	cmp	r3, #10
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e04c      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002fc4:	f7ff fc3c 	bl	8002840 <LL_RCC_PLL_IsReady>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f1      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x646>
 8002fce:	e045      	b.n	800305c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	f7ff fc28 	bl	8002824 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fe84 	bl	8001ce0 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fe fe80 	bl	8001ce0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b0a      	cmp	r3, #10
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e037      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fee:	f7ff fc27 	bl	8002840 <LL_RCC_PLL_IsReady>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f1      	bne.n	8002fdc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCC_OscConfig+0x700>)
 8003004:	4013      	ands	r3, r2
 8003006:	60cb      	str	r3, [r1, #12]
 8003008:	e028      	b.n	800305c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e023      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	429a      	cmp	r2, r3
 800302a:	d115      	bne.n	8003058 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	429a      	cmp	r2, r3
 8003038:	d10e      	bne.n	8003058 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	429a      	cmp	r2, r3
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	11c1808c 	.word	0x11c1808c
 800306c:	eefefffc 	.word	0xeefefffc

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e12c      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b98      	ldr	r3, [pc, #608]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d91b      	bls.n	80030ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b95      	ldr	r3, [pc, #596]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	4993      	ldr	r1, [pc, #588]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a2:	f7fe fe1d 	bl	8001ce0 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030aa:	f7fe fe19 	bl	8001ce0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e110      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030bc:	4b8a      	ldr	r3, [pc, #552]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d1ef      	bne.n	80030aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fb02 	bl	80026e4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030e0:	f7fe fdfe 	bl	8001ce0 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030e8:	f7fe fdfa 	bl	8001ce0 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0f1      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030fa:	f7ff fbdf 	bl	80028bc <LL_RCC_IsActiveFlag_HPRE>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f1      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff faf8 	bl	800270a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800311a:	f7fe fde1 	bl	8001ce0 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003122:	f7fe fddd 	bl	8001ce0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0d4      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003134:	f7ff fbd3 	bl	80028de <LL_RCC_IsActiveFlag_C2HPRE>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f1      	beq.n	8003122 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff faf0 	bl	8002734 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003154:	f7fe fdc4 	bl	8001ce0 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800315c:	f7fe fdc0 	bl	8001ce0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0b7      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800316e:	f7ff fbc8 	bl	8002902 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f1      	beq.n	800315c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d016      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fae9 	bl	8002760 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800318e:	f7fe fda7 	bl	8001ce0 <HAL_GetTick>
 8003192:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003196:	f7fe fda3 	bl	8001ce0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e09a      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031a8:	f7ff fbbd 	bl	8002926 <LL_RCC_IsActiveFlag_PPRE1>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f1      	beq.n	8003196 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fade 	bl	8002786 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031ca:	f7fe fd89 	bl	8001ce0 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031d2:	f7fe fd85 	bl	8001ce0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e07c      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031e4:	f7ff fbb0 	bl	8002948 <LL_RCC_IsActiveFlag_PPRE2>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f1      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d043      	beq.n	8003282 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d106      	bne.n	8003210 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003202:	f7ff f956 	bl	80024b2 <LL_RCC_HSE_IsReady>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11e      	bne.n	800324a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e066      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d106      	bne.n	8003226 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003218:	f7ff fb12 	bl	8002840 <LL_RCC_PLL_IsReady>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e05b      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800322e:	f7ff f9f0 	bl	8002612 <LL_RCC_MSI_IsReady>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e050      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800323c:	f7ff f966 	bl	800250c <LL_RCC_HSI_IsReady>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e049      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fa2a 	bl	80026a8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003254:	f7fe fd44 	bl	8001ce0 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fe fd40 	bl	8001ce0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e035      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	f7ff fa2c 	bl	80026ce <LL_RCC_GetSysClkSource>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	429a      	cmp	r2, r3
 8003280:	d1ec      	bne.n	800325c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d21b      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 0207 	bic.w	r2, r3, #7
 8003298:	4913      	ldr	r1, [pc, #76]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fe fd1e 	bl	8001ce0 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032a8:	f7fe fd1a 	bl	8001ce0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e011      	b.n	80032de <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x278>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1ef      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032c8:	f000 f8b4 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_RCC_ClockConfig+0x27c>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_RCC_ClockConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fcb6 	bl	8001c48 <HAL_InitTick>
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	58004000 	.word	0x58004000
 80032ec:	20000000 	.word	0x20000000
 80032f0:	20000008 	.word	0x20000008

080032f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003302:	f7ff f9e4 	bl	80026ce <LL_RCC_GetSysClkSource>
 8003306:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003308:	f7ff facd 	bl	80028a6 <LL_RCC_PLL_GetMainSource>
 800330c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x2c>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d139      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d136      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003320:	f7ff f987 	bl	8002632 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <HAL_RCC_GetSysClockFreq+0x62>
 800332a:	f7ff f982 	bl	8002632 <LL_RCC_MSI_IsEnabledRangeSelect>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d106      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x4e>
 8003334:	f7ff f98d 	bl	8002652 <LL_RCC_MSI_GetRange>
 8003338:	4603      	mov	r3, r0
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	e005      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x5a>
 8003342:	f7ff f991 	bl	8002668 <LL_RCC_MSI_GetRangeAfterStandby>
 8003346:	4603      	mov	r3, r0
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_RCC_GetSysClockFreq+0x134>)
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	e014      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x8c>
 8003356:	f7ff f96c 	bl	8002632 <LL_RCC_MSI_IsEnabledRangeSelect>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x7a>
 8003360:	f7ff f977 	bl	8002652 <LL_RCC_MSI_GetRange>
 8003364:	4603      	mov	r3, r0
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	e005      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x86>
 800336e:	f7ff f97b 	bl	8002668 <LL_RCC_MSI_GetRangeAfterStandby>
 8003372:	4603      	mov	r3, r0
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_RCC_GetSysClockFreq+0x134>)
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d115      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800338c:	e012      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d102      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_RCC_GetSysClockFreq+0x138>)
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e00c      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d109      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033a0:	f7ff f85a 	bl	8002458 <LL_RCC_HSE_IsEnabledDiv2>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_RCC_GetSysClockFreq+0x138>)
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e001      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033b2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b4:	f7ff f98b 	bl	80026ce <LL_RCC_GetSysClkSource>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d12f      	bne.n	800341e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80033be:	f7ff fa72 	bl	80028a6 <LL_RCC_PLL_GetMainSource>
 80033c2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0xde>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d003      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0xe4>
 80033d0:	e00d      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80033d2:	4b16      	ldr	r3, [pc, #88]	; (800342c <HAL_RCC_GetSysClockFreq+0x138>)
 80033d4:	60fb      	str	r3, [r7, #12]
        break;
 80033d6:	e00d      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033d8:	f7ff f83e 	bl	8002458 <LL_RCC_HSE_IsEnabledDiv2>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d102      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_RCC_GetSysClockFreq+0x138>)
 80033e4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033ea:	60fb      	str	r3, [r7, #12]
        break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	60fb      	str	r3, [r7, #12]
        break;
 80033f2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80033f4:	f7ff fa35 	bl	8002862 <LL_RCC_PLL_GetN>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	fb03 f402 	mul.w	r4, r3, r2
 8003400:	f7ff fa46 	bl	8002890 <LL_RCC_PLL_GetDivider>
 8003404:	4603      	mov	r3, r0
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	3301      	adds	r3, #1
 800340a:	fbb4 f4f3 	udiv	r4, r4, r3
 800340e:	f7ff fa34 	bl	800287a <LL_RCC_PLL_GetR>
 8003412:	4603      	mov	r3, r0
 8003414:	0f5b      	lsrs	r3, r3, #29
 8003416:	3301      	adds	r3, #1
 8003418:	fbb4 f3f3 	udiv	r3, r4, r3
 800341c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800341e:	697b      	ldr	r3, [r7, #20]
}
 8003420:	4618      	mov	r0, r3
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	08005bc4 	.word	0x08005bc4
 800342c:	00f42400 	.word	0x00f42400
 8003430:	01e84800 	.word	0x01e84800

08003434 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b598      	push	{r3, r4, r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003438:	f7ff ff5c 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 800343c:	4604      	mov	r4, r0
 800343e:	f7ff f9b5 	bl	80027ac <LL_RCC_GetAHBPrescaler>
 8003442:	4603      	mov	r3, r0
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_RCC_GetHCLKFreq+0x24>)
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd98      	pop	{r3, r4, r7, pc}
 8003458:	08005b64 	.word	0x08005b64

0800345c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b598      	push	{r3, r4, r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003460:	f7ff ffe8 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003464:	4604      	mov	r4, r0
 8003466:	f7ff f9b9 	bl	80027dc <LL_RCC_GetAPB1Prescaler>
 800346a:	4603      	mov	r3, r0
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	4a03      	ldr	r2, [pc, #12]	; (800347c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd98      	pop	{r3, r4, r7, pc}
 800347c:	08005ba4 	.word	0x08005ba4

08003480 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003480:	b598      	push	{r3, r4, r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003484:	f7ff ffd6 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003488:	4604      	mov	r4, r0
 800348a:	f7ff f9b2 	bl	80027f2 <LL_RCC_GetAPB2Prescaler>
 800348e:	4603      	mov	r3, r0
 8003490:	0adb      	lsrs	r3, r3, #11
 8003492:	4a03      	ldr	r2, [pc, #12]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	fa24 f303 	lsr.w	r3, r4, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd98      	pop	{r3, r4, r7, pc}
 80034a0:	08005ba4 	.word	0x08005ba4

080034a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	4a10      	ldr	r2, [pc, #64]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80034bc:	f7ff f981 	bl	80027c2 <LL_RCC_GetAHB3Prescaler>
 80034c0:	4603      	mov	r3, r0
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80034ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0c9c      	lsrs	r4, r3, #18
 80034e0:	f7fe ff76 	bl	80023d0 <HAL_PWREx_GetVoltageRange>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4619      	mov	r1, r3
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 f80b 	bl	8003504 <RCC_SetFlashLatency>
 80034ee:	4603      	mov	r3, r0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd90      	pop	{r4, r7, pc}
 80034f8:	08005bc4 	.word	0x08005bc4
 80034fc:	08005b64 	.word	0x08005b64
 8003500:	431bde83 	.word	0x431bde83

08003504 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800350e:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <RCC_SetFlashLatency+0xf4>)
 8003510:	f107 0320 	add.w	r3, r7, #32
 8003514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003518:	6018      	str	r0, [r3, #0]
 800351a:	3304      	adds	r3, #4
 800351c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800351e:	4a37      	ldr	r2, [pc, #220]	; (80035fc <RCC_SetFlashLatency+0xf8>)
 8003520:	f107 0318 	add.w	r3, r7, #24
 8003524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003528:	6018      	str	r0, [r3, #0]
 800352a:	3304      	adds	r3, #4
 800352c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800352e:	4a34      	ldr	r2, [pc, #208]	; (8003600 <RCC_SetFlashLatency+0xfc>)
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	ca07      	ldmia	r2, {r0, r1, r2}
 8003536:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800353a:	2300      	movs	r3, #0
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003544:	d11b      	bne.n	800357e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003546:	2300      	movs	r3, #0
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	3338      	adds	r3, #56	; 0x38
 8003552:	443b      	add	r3, r7
 8003554:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4293      	cmp	r3, r2
 800355e:	d807      	bhi.n	8003570 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3338      	adds	r3, #56	; 0x38
 8003566:	443b      	add	r3, r7
 8003568:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800356e:	e021      	b.n	80035b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	3301      	adds	r3, #1
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2b02      	cmp	r3, #2
 800357a:	d9e7      	bls.n	800354c <RCC_SetFlashLatency+0x48>
 800357c:	e01a      	b.n	80035b4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800357e:	2300      	movs	r3, #0
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	e014      	b.n	80035ae <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	3338      	adds	r3, #56	; 0x38
 800358a:	443b      	add	r3, r7
 800358c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003590:	461a      	mov	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4293      	cmp	r3, r2
 8003596:	d807      	bhi.n	80035a8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	3338      	adds	r3, #56	; 0x38
 800359e:	443b      	add	r3, r7
 80035a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035a6:	e005      	b.n	80035b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	3301      	adds	r3, #1
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d9e7      	bls.n	8003584 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <RCC_SetFlashLatency+0x100>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 0207 	bic.w	r2, r3, #7
 80035bc:	4911      	ldr	r1, [pc, #68]	; (8003604 <RCC_SetFlashLatency+0x100>)
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035c4:	f7fe fb8c 	bl	8001ce0 <HAL_GetTick>
 80035c8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035ca:	e008      	b.n	80035de <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035cc:	f7fe fb88 	bl	8001ce0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e007      	b.n	80035ee <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <RCC_SetFlashLatency+0x100>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1ef      	bne.n	80035cc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3738      	adds	r7, #56	; 0x38
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	08005b48 	.word	0x08005b48
 80035fc:	08005b50 	.word	0x08005b50
 8003600:	08005b58 	.word	0x08005b58
 8003604:	58004000 	.word	0x58004000

08003608 <LL_RCC_LSE_IsReady>:
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d101      	bne.n	8003620 <LL_RCC_LSE_IsReady+0x18>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <LL_RCC_LSE_IsReady+0x1a>
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <LL_RCC_SetUSARTClockSource>:
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003636:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	43db      	mvns	r3, r3
 8003640:	401a      	ands	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <LL_RCC_SetI2SClockSource>:
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800366e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <LL_RCC_SetLPUARTClockSource>:
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <LL_RCC_SetI2CClockSource>:
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80036c6:	43db      	mvns	r3, r3
 80036c8:	401a      	ands	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80036d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <LL_RCC_SetLPTIMClockSource>:
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	43db      	mvns	r3, r3
 80036fe:	401a      	ands	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <LL_RCC_SetRNGClockSource>:
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800372c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <LL_RCC_SetADCClockSource>:
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <LL_RCC_SetRTCClockSource>:
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <LL_RCC_GetRTCClockSource>:
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_ForceBackupDomainReset>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003800:	2300      	movs	r3, #0
 8003802:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d058      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003810:	f7fe fdc2 	bl	8002398 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003814:	f7fe fa64 	bl	8001ce0 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800381a:	e009      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381c:	f7fe fa60 	bl	8001ce0 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d902      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	74fb      	strb	r3, [r7, #19]
        break;
 800382e:	e006      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003830:	4b7b      	ldr	r3, [pc, #492]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d1ee      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d13c      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003844:	f7ff ffa7 	bl	8003796 <LL_RCC_GetRTCClockSource>
 8003848:	4602      	mov	r2, r0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	429a      	cmp	r2, r3
 8003850:	d00f      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003860:	f7ff ffa5 	bl	80037ae <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003864:	f7ff ffb3 	bl	80037ce <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d014      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe fa30 	bl	8001ce0 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003882:	e00b      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fe fa2c 	bl	8001ce0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d902      	bls.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	74fb      	strb	r3, [r7, #19]
            break;
 800389a:	e004      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800389c:	f7ff feb4 	bl	8003608 <LL_RCC_LSE_IsReady>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d1ee      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff5b 	bl	800376c <LL_RCC_SetRTCClockSource>
 80038b6:	e004      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
 80038bc:	e001      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fea9 	bl	800362a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fe9e 	bl	800362a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fec0 	bl	8003684 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fee6 	bl	80036e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fedb 	bl	80036e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fed0 	bl	80036e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fea9 	bl	80036ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fe9e 	bl	80036ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fe93 	bl	80036ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d011      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fe5e 	bl	800365a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a6:	d107      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fea5 	bl	8003718 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d011      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fea3 	bl	8003742 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a04:	d107      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003a16:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	58000400 	.word	0x58000400

08003a24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d071      	beq.n	8003b1a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd ffd8 	bl	8001a00 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d051      	beq.n	8003b08 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a64:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003a66:	22ca      	movs	r2, #202	; 0xca
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003a6c:	2253      	movs	r2, #83	; 0x53
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fbe3 	bl	800423c <RTC_EnterInitMode>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d13f      	bne.n	8003b00 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003a86:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a8e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	4319      	orrs	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	491f      	ldr	r1, [pc, #124]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	491b      	ldr	r1, [pc, #108]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	430b      	orrs	r3, r1
 8003acc:	4915      	ldr	r1, [pc, #84]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fbe6 	bl	80042a4 <RTC_ExitInitMode>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10e      	bne.n	8003b00 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a19      	ldr	r1, [r3, #32]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4319      	orrs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RTC_Init+0x100>)
 8003b02:	22ff      	movs	r2, #255	; 0xff
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24
 8003b06:	e001      	b.n	8003b0c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40002800 	.word	0x40002800

08003b28 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_RTC_SetTime+0x1a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e088      	b.n	8003c54 <HAL_RTC_SetTime+0x12c>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b52:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003b54:	22ca      	movs	r2, #202	; 0xca
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003b5a:	2253      	movs	r2, #83	; 0x53
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fb6c 	bl	800423c <RTC_EnterInitMode>
 8003b64:	4603      	mov	r3, r0
 8003b66:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d15e      	bne.n	8003c2c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003b6e:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	d057      	beq.n	8003c2c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d125      	bne.n	8003bce <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b82:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2200      	movs	r2, #0
 8003b92:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fbc1 	bl	8004320 <RTC_ByteToBcd2>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fbba 	bl	8004320 <RTC_ByteToBcd2>
 8003bac:	4603      	mov	r3, r0
 8003bae:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bb0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	789b      	ldrb	r3, [r3, #2]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fbb2 	bl	8004320 <RTC_ByteToBcd2>
 8003bbc:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bbe:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	78db      	ldrb	r3, [r3, #3]
 8003bc6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e017      	b.n	8003bfe <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bec:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bf2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	78db      	ldrb	r3, [r3, #3]
 8003bf8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c0a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c16:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	68d9      	ldr	r1, [r3, #12]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	490d      	ldr	r1, [pc, #52]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fb39 	bl	80042a4 <RTC_ExitInitMode>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RTC_SetTime+0x134>)
 8003c38:	22ff      	movs	r2, #255	; 0xff
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}
 8003c5c:	40002800 	.word	0x40002800

08003c60 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_RTC_GetTime+0xc0>)
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003c74:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RTC_GetTime+0xc0>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c80:	d049      	beq.n	8003d16 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003c82:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <HAL_RTC_GetTime+0xc0>)
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RTC_GetTime+0xc0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c9a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	0d9b      	lsrs	r3, r3, #22
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d11a      	bne.n	8003d16 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb3a 	bl	800435e <RTC_Bcd2ToByte>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fb31 	bl	800435e <RTC_Bcd2ToByte>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	789b      	ldrb	r3, [r3, #2]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fb28 	bl	800435e <RTC_Bcd2ToByte>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40002800 	.word	0x40002800

08003d24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_RTC_SetDate+0x1a>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e071      	b.n	8003e22 <HAL_RTC_SetDate+0xfe>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10e      	bne.n	8003d72 <HAL_RTC_SetDate+0x4e>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	f023 0310 	bic.w	r3, r3, #16
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	330a      	adds	r3, #10
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11c      	bne.n	8003db2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	78db      	ldrb	r3, [r3, #3]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 facf 	bl	8004320 <RTC_ByteToBcd2>
 8003d82:	4603      	mov	r3, r0
 8003d84:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fac8 	bl	8004320 <RTC_ByteToBcd2>
 8003d90:	4603      	mov	r3, r0
 8003d92:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003d94:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	789b      	ldrb	r3, [r3, #2]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fac0 	bl	8004320 <RTC_ByteToBcd2>
 8003da0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003da2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e00e      	b.n	8003dd0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	78db      	ldrb	r3, [r3, #3]
 8003db6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003dbe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003dc4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <HAL_RTC_SetDate+0x108>)
 8003dd2:	22ca      	movs	r2, #202	; 0xca
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_RTC_SetDate+0x108>)
 8003dd8:	2253      	movs	r2, #83	; 0x53
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fa2d 	bl	800423c <RTC_EnterInitMode>
 8003de2:	4603      	mov	r3, r0
 8003de4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003de6:	7cfb      	ldrb	r3, [r7, #19]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003dec:	4a0f      	ldr	r2, [pc, #60]	; (8003e2c <HAL_RTC_SetDate+0x108>)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003df4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003df8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa52 	bl	80042a4 <RTC_ExitInitMode>
 8003e00:	4603      	mov	r3, r0
 8003e02:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RTC_SetDate+0x108>)
 8003e06:	22ff      	movs	r2, #255	; 0xff
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd90      	pop	{r4, r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40002800 	.word	0x40002800

08003e30 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003e3c:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <HAL_RTC_GetDate+0x98>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e48:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	0b5b      	lsrs	r3, r3, #13
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d11a      	bne.n	8003ebe <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	78db      	ldrb	r3, [r3, #3]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fa66 	bl	800435e <RTC_Bcd2ToByte>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461a      	mov	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	785b      	ldrb	r3, [r3, #1]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fa5d 	bl	800435e <RTC_Bcd2ToByte>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	789b      	ldrb	r3, [r3, #2]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fa54 	bl	800435e <RTC_Bcd2ToByte>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40002800 	.word	0x40002800

08003ecc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_RTC_SetAlarm_IT+0x1e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0f3      	b.n	80040d2 <HAL_RTC_SetAlarm_IT+0x206>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003efa:	4b78      	ldr	r3, [pc, #480]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	d06a      	beq.n	8003fe2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d13a      	bne.n	8003f88 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f12:	4b72      	ldr	r3, [pc, #456]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 f9f5 	bl	8004320 <RTC_ByteToBcd2>
 8003f36:	4603      	mov	r3, r0
 8003f38:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f9ee 	bl	8004320 <RTC_ByteToBcd2>
 8003f44:	4603      	mov	r3, r0
 8003f46:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f48:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	789b      	ldrb	r3, [r3, #2]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f9e6 	bl	8004320 <RTC_ByteToBcd2>
 8003f54:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f56:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	78db      	ldrb	r3, [r3, #3]
 8003f5e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f60:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f9d8 	bl	8004320 <RTC_ByteToBcd2>
 8003f70:	4603      	mov	r3, r0
 8003f72:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f74:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f7c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e02c      	b.n	8003fe2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003f90:	d00d      	beq.n	8003fae <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f9a:	d008      	beq.n	8003fae <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f9c:	4b4f      	ldr	r3, [pc, #316]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2200      	movs	r2, #0
 8003fac:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fba:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fc0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	78db      	ldrb	r3, [r3, #3]
 8003fc6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fc8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fd2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fd8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe2:	4b3e      	ldr	r3, [pc, #248]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8003fe4:	22ca      	movs	r2, #202	; 0xca
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8003fe8:	4b3c      	ldr	r3, [pc, #240]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8003fea:	2253      	movs	r2, #83	; 0x53
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d12c      	bne.n	8004052 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003ff8:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	4a37      	ldr	r2, [pc, #220]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8003ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004002:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004004:	4b35      	ldr	r3, [pc, #212]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004006:	2201      	movs	r2, #1
 8004008:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004010:	d107      	bne.n	8004022 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	4930      	ldr	r1, [pc, #192]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 800401c:	4313      	orrs	r3, r2
 800401e:	644b      	str	r3, [r1, #68]	; 0x44
 8004020:	e006      	b.n	8004030 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004022:	4a2e      	ldr	r2, [pc, #184]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004028:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	4a24      	ldr	r2, [pc, #144]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 800404a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800404e:	6193      	str	r3, [r2, #24]
 8004050:	e02b      	b.n	80040aa <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	4a21      	ldr	r2, [pc, #132]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004058:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800405c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800405e:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004060:	2202      	movs	r2, #2
 8004062:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406a:	d107      	bne.n	800407c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4919      	ldr	r1, [pc, #100]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004076:	4313      	orrs	r3, r2
 8004078:	64cb      	str	r3, [r1, #76]	; 0x4c
 800407a:	e006      	b.n	800408a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004082:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800408a:	4a14      	ldr	r2, [pc, #80]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f043 0202 	orr.w	r2, r3, #2
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800409e:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	4a0e      	ldr	r2, [pc, #56]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 80040a4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80040a8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80040ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b0:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_RTC_SetAlarm_IT+0x210>)
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop
 80040dc:	40002800 	.word	0x40002800
 80040e0:	58000800 	.word	0x58000800

080040e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_RTC_DeactivateAlarm+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e048      	b.n	800418e <HAL_RTC_DeactivateAlarm+0xaa>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800410c:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 800410e:	22ca      	movs	r2, #202	; 0xca
 8004110:	625a      	str	r2, [r3, #36]	; 0x24
 8004112:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004114:	2253      	movs	r2, #83	; 0x53
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411e:	d115      	bne.n	800414c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004126:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800412a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004136:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	f023 0201 	bic.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004146:	2201      	movs	r2, #1
 8004148:	65da      	str	r2, [r3, #92]	; 0x5c
 800414a:	e014      	b.n	8004176 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	4a11      	ldr	r2, [pc, #68]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004152:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004156:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 800415e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004162:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	f023 0202 	bic.w	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004172:	2202      	movs	r2, #2
 8004174:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	40002800 	.word	0x40002800

0800419c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80041a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80041bc:	2201      	movs	r2, #1
 80041be:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fc fffa 	bl	80011ba <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80041d2:	2202      	movs	r2, #2
 80041d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8dc 	bl	8004394 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40002800 	.word	0x40002800

080041f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_RTC_WaitForSynchro+0x48>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <HAL_RTC_WaitForSynchro+0x48>)
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004204:	f7fd fd6c 	bl	8001ce0 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800420a:	e009      	b.n	8004220 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800420c:	f7fd fd68 	bl	8001ce0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800421a:	d901      	bls.n	8004220 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e006      	b.n	800422e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RTC_WaitForSynchro+0x48>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ef      	beq.n	800420c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40002800 	.word	0x40002800

0800423c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <RTC_EnterInitMode+0x64>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d120      	bne.n	8004296 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <RTC_EnterInitMode+0x64>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <RTC_EnterInitMode+0x64>)
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004260:	f7fd fd3e 	bl	8001ce0 <HAL_GetTick>
 8004264:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004266:	e00d      	b.n	8004284 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004268:	f7fd fd3a 	bl	8001ce0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004276:	d905      	bls.n	8004284 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2203      	movs	r2, #3
 8004280:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <RTC_EnterInitMode+0x64>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <RTC_EnterInitMode+0x5a>
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d1e8      	bne.n	8004268 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40002800 	.word	0x40002800

080042a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <RTC_ExitInitMode+0x78>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <RTC_ExitInitMode+0x78>)
 80042b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <RTC_ExitInitMode+0x78>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10c      	bne.n	80042e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ff91 	bl	80041f0 <HAL_RTC_WaitForSynchro>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01e      	beq.n	8004312 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2203      	movs	r2, #3
 80042d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e017      	b.n	8004312 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <RTC_ExitInitMode+0x78>)
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	4a0d      	ldr	r2, [pc, #52]	; (800431c <RTC_ExitInitMode+0x78>)
 80042e8:	f023 0320 	bic.w	r3, r3, #32
 80042ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ff7e 	bl	80041f0 <HAL_RTC_WaitForSynchro>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2203      	movs	r2, #3
 80042fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <RTC_ExitInitMode+0x78>)
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <RTC_ExitInitMode+0x78>)
 800430c:	f043 0320 	orr.w	r3, r3, #32
 8004310:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40002800 	.word	0x40002800

08004320 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004332:	e005      	b.n	8004340 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800433a:	7afb      	ldrb	r3, [r7, #11]
 800433c:	3b0a      	subs	r3, #10
 800433e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004340:	7afb      	ldrb	r3, [r7, #11]
 8004342:	2b09      	cmp	r3, #9
 8004344:	d8f6      	bhi.n	8004334 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	b2da      	uxtb	r2, r3
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	4313      	orrs	r3, r2
 8004352:	b2db      	uxtb	r3, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	4603      	mov	r3, r0
 8004366:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	b2db      	uxtb	r3, r3
 8004386:	4413      	add	r3, r2
 8004388:	b2db      	uxtb	r3, r3
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <LL_RCC_GetUSARTClockSource>:
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	401a      	ands	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	4313      	orrs	r3, r2
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <LL_RCC_GetLPUARTClockSource>:
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4013      	ands	r3, r2
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e042      	b.n	8004480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fd fb23 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2224      	movs	r2, #36	; 0x24
 8004416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f976 	bl	800471c <UART_SetConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fbde 	bl	8004c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fc64 	bl	8004d46 <UART_CheckIdleState>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d173      	bne.n	800458a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_UART_Transmit+0x26>
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06c      	b.n	800458c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2221      	movs	r2, #33	; 0x21
 80044be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c2:	f7fd fc0d 	bl	8001ce0 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d108      	bne.n	80044f4 <HAL_UART_Transmit+0x6c>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e003      	b.n	80044fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044fc:	e02c      	b.n	8004558 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fc6a 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e039      	b.n	800458c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	3302      	adds	r3, #2
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e007      	b.n	8004546 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3301      	adds	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1cc      	bne.n	80044fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	2140      	movs	r1, #64	; 0x40
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fc37 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e006      	b.n	800458c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	f040 80b1 	bne.w	8004712 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_UART_Receive+0x28>
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0a9      	b.n	8004714 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2222      	movs	r2, #34	; 0x22
 80045cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fd fb83 	bl	8001ce0 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d10e      	bne.n	8004614 <HAL_UART_Receive+0x80>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <HAL_UART_Receive+0x76>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004608:	e02d      	b.n	8004666 <HAL_UART_Receive+0xd2>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	22ff      	movs	r2, #255	; 0xff
 800460e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004612:	e028      	b.n	8004666 <HAL_UART_Receive+0xd2>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_UART_Receive+0xa4>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_UART_Receive+0x9a>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800462c:	e01b      	b.n	8004666 <HAL_UART_Receive+0xd2>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	227f      	movs	r2, #127	; 0x7f
 8004632:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004636:	e016      	b.n	8004666 <HAL_UART_Receive+0xd2>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004640:	d10d      	bne.n	800465e <HAL_UART_Receive+0xca>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_UART_Receive+0xc0>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	227f      	movs	r2, #127	; 0x7f
 800464e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004652:	e008      	b.n	8004666 <HAL_UART_Receive+0xd2>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	223f      	movs	r2, #63	; 0x3f
 8004658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800465c:	e003      	b.n	8004666 <HAL_UART_Receive+0xd2>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800466c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d108      	bne.n	800468a <HAL_UART_Receive+0xf6>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	e003      	b.n	8004692 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004692:	e032      	b.n	80046fa <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2200      	movs	r2, #0
 800469c:	2120      	movs	r1, #32
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fb9f 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e032      	b.n	8004714 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10c      	bne.n	80046ce <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	8a7b      	ldrh	r3, [r7, #18]
 80046be:	4013      	ands	r3, r2
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	3302      	adds	r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	e00c      	b.n	80046e8 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	8a7b      	ldrh	r3, [r7, #18]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	4013      	ands	r3, r2
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3301      	adds	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1c6      	bne.n	8004694 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800471c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004720:	b08c      	sub	sp, #48	; 0x30
 8004722:	af00      	add	r7, sp, #0
 8004724:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	431a      	orrs	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	431a      	orrs	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	4313      	orrs	r3, r2
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b94      	ldr	r3, [pc, #592]	; (800499c <UART_SetConfig+0x280>)
 800474c:	4013      	ands	r3, r2
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004754:	430b      	orrs	r3, r1
 8004756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a89      	ldr	r2, [pc, #548]	; (80049a0 <UART_SetConfig+0x284>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004784:	4313      	orrs	r3, r2
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004792:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800479c:	430b      	orrs	r3, r1
 800479e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	f023 010f 	bic.w	r1, r3, #15
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a7a      	ldr	r2, [pc, #488]	; (80049a4 <UART_SetConfig+0x288>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d127      	bne.n	8004810 <UART_SetConfig+0xf4>
 80047c0:	2003      	movs	r0, #3
 80047c2:	f7ff fdf0 	bl	80043a6 <LL_RCC_GetUSARTClockSource>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d81b      	bhi.n	8004808 <UART_SetConfig+0xec>
 80047d0:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0xbc>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	080047e9 	.word	0x080047e9
 80047dc:	080047f9 	.word	0x080047f9
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	08004801 	.word	0x08004801
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ee:	e080      	b.n	80048f2 <UART_SetConfig+0x1d6>
 80047f0:	2302      	movs	r3, #2
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f6:	e07c      	b.n	80048f2 <UART_SetConfig+0x1d6>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fe:	e078      	b.n	80048f2 <UART_SetConfig+0x1d6>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004806:	e074      	b.n	80048f2 <UART_SetConfig+0x1d6>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480e:	e070      	b.n	80048f2 <UART_SetConfig+0x1d6>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a64      	ldr	r2, [pc, #400]	; (80049a8 <UART_SetConfig+0x28c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d138      	bne.n	800488c <UART_SetConfig+0x170>
 800481a:	200c      	movs	r0, #12
 800481c:	f7ff fdc3 	bl	80043a6 <LL_RCC_GetUSARTClockSource>
 8004820:	4603      	mov	r3, r0
 8004822:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d82c      	bhi.n	8004884 <UART_SetConfig+0x168>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0x114>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004865 	.word	0x08004865
 8004834:	08004885 	.word	0x08004885
 8004838:	08004885 	.word	0x08004885
 800483c:	08004885 	.word	0x08004885
 8004840:	08004875 	.word	0x08004875
 8004844:	08004885 	.word	0x08004885
 8004848:	08004885 	.word	0x08004885
 800484c:	08004885 	.word	0x08004885
 8004850:	0800486d 	.word	0x0800486d
 8004854:	08004885 	.word	0x08004885
 8004858:	08004885 	.word	0x08004885
 800485c:	08004885 	.word	0x08004885
 8004860:	0800487d 	.word	0x0800487d
 8004864:	2300      	movs	r3, #0
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486a:	e042      	b.n	80048f2 <UART_SetConfig+0x1d6>
 800486c:	2302      	movs	r3, #2
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004872:	e03e      	b.n	80048f2 <UART_SetConfig+0x1d6>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e03a      	b.n	80048f2 <UART_SetConfig+0x1d6>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e036      	b.n	80048f2 <UART_SetConfig+0x1d6>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e032      	b.n	80048f2 <UART_SetConfig+0x1d6>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a43      	ldr	r2, [pc, #268]	; (80049a0 <UART_SetConfig+0x284>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d12a      	bne.n	80048ec <UART_SetConfig+0x1d0>
 8004896:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800489a:	f7ff fd96 	bl	80043ca <LL_RCC_GetLPUARTClockSource>
 800489e:	4603      	mov	r3, r0
 80048a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048a4:	d01a      	beq.n	80048dc <UART_SetConfig+0x1c0>
 80048a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048aa:	d81b      	bhi.n	80048e4 <UART_SetConfig+0x1c8>
 80048ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b0:	d00c      	beq.n	80048cc <UART_SetConfig+0x1b0>
 80048b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b6:	d815      	bhi.n	80048e4 <UART_SetConfig+0x1c8>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <UART_SetConfig+0x1a8>
 80048bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c0:	d008      	beq.n	80048d4 <UART_SetConfig+0x1b8>
 80048c2:	e00f      	b.n	80048e4 <UART_SetConfig+0x1c8>
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ca:	e012      	b.n	80048f2 <UART_SetConfig+0x1d6>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d2:	e00e      	b.n	80048f2 <UART_SetConfig+0x1d6>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e00a      	b.n	80048f2 <UART_SetConfig+0x1d6>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e006      	b.n	80048f2 <UART_SetConfig+0x1d6>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e002      	b.n	80048f2 <UART_SetConfig+0x1d6>
 80048ec:	2310      	movs	r3, #16
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <UART_SetConfig+0x284>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	f040 80a4 	bne.w	8004a46 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004902:	2b08      	cmp	r3, #8
 8004904:	d823      	bhi.n	800494e <UART_SetConfig+0x232>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <UART_SetConfig+0x1f0>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004931 	.word	0x08004931
 8004910:	0800494f 	.word	0x0800494f
 8004914:	08004939 	.word	0x08004939
 8004918:	0800494f 	.word	0x0800494f
 800491c:	0800493f 	.word	0x0800493f
 8004920:	0800494f 	.word	0x0800494f
 8004924:	0800494f 	.word	0x0800494f
 8004928:	0800494f 	.word	0x0800494f
 800492c:	08004947 	.word	0x08004947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe fd94 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004936:	e010      	b.n	800495a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004938:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <UART_SetConfig+0x290>)
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800493c:	e00d      	b.n	800495a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493e:	f7fe fcd9 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 8004942:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004944:	e009      	b.n	800495a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800494c:	e005      	b.n	800495a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8137 	beq.w	8004bd0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <UART_SetConfig+0x294>)
 8004968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496c:	461a      	mov	r2, r3
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	fbb3 f3f2 	udiv	r3, r3, r2
 8004974:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	429a      	cmp	r2, r3
 8004984:	d305      	bcc.n	8004992 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	429a      	cmp	r2, r3
 8004990:	d910      	bls.n	80049b4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004998:	e11a      	b.n	8004bd0 <UART_SetConfig+0x4b4>
 800499a:	bf00      	nop
 800499c:	cfff69f3 	.word	0xcfff69f3
 80049a0:	40008000 	.word	0x40008000
 80049a4:	40013800 	.word	0x40013800
 80049a8:	40004400 	.word	0x40004400
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	08005c04 	.word	0x08005c04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	2200      	movs	r2, #0
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	60fa      	str	r2, [r7, #12]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	4a8e      	ldr	r2, [pc, #568]	; (8004bfc <UART_SetConfig+0x4e0>)
 80049c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2200      	movs	r2, #0
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049d6:	f7fb fc23 	bl	8000220 <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	020b      	lsls	r3, r1, #8
 80049ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049f0:	0202      	lsls	r2, r0, #8
 80049f2:	6979      	ldr	r1, [r7, #20]
 80049f4:	6849      	ldr	r1, [r1, #4]
 80049f6:	0849      	lsrs	r1, r1, #1
 80049f8:	2000      	movs	r0, #0
 80049fa:	460c      	mov	r4, r1
 80049fc:	4605      	mov	r5, r0
 80049fe:	eb12 0804 	adds.w	r8, r2, r4
 8004a02:	eb43 0905 	adc.w	r9, r3, r5
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	469a      	mov	sl, r3
 8004a0e:	4693      	mov	fp, r2
 8004a10:	4652      	mov	r2, sl
 8004a12:	465b      	mov	r3, fp
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fb fc02 	bl	8000220 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2a:	d308      	bcc.n	8004a3e <UART_SetConfig+0x322>
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a32:	d204      	bcs.n	8004a3e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6a3a      	ldr	r2, [r7, #32]
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	e0c8      	b.n	8004bd0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a44:	e0c4      	b.n	8004bd0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4e:	d167      	bne.n	8004b20 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d828      	bhi.n	8004aaa <UART_SetConfig+0x38e>
 8004a58:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <UART_SetConfig+0x344>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004a85 	.word	0x08004a85
 8004a64:	08004a8d 	.word	0x08004a8d
 8004a68:	08004a95 	.word	0x08004a95
 8004a6c:	08004aab 	.word	0x08004aab
 8004a70:	08004a9b 	.word	0x08004a9b
 8004a74:	08004aab 	.word	0x08004aab
 8004a78:	08004aab 	.word	0x08004aab
 8004a7c:	08004aab 	.word	0x08004aab
 8004a80:	08004aa3 	.word	0x08004aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a84:	f7fe fcea 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a8a:	e014      	b.n	8004ab6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a8c:	f7fe fcf8 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8004a90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a92:	e010      	b.n	8004ab6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a94:	4b5a      	ldr	r3, [pc, #360]	; (8004c00 <UART_SetConfig+0x4e4>)
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a98:	e00d      	b.n	8004ab6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9a:	f7fe fc2b 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 8004a9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aa0:	e009      	b.n	8004ab6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aa8:	e005      	b.n	8004ab6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8089 	beq.w	8004bd0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	4a4e      	ldr	r2, [pc, #312]	; (8004bfc <UART_SetConfig+0x4e0>)
 8004ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ad0:	005a      	lsls	r2, r3, #1
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	441a      	add	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d916      	bls.n	8004b18 <UART_SetConfig+0x3fc>
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d212      	bcs.n	8004b18 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f023 030f 	bic.w	r3, r3, #15
 8004afa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	8bfb      	ldrh	r3, [r7, #30]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	8bfa      	ldrh	r2, [r7, #30]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	e05b      	b.n	8004bd0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b1e:	e057      	b.n	8004bd0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d828      	bhi.n	8004b7a <UART_SetConfig+0x45e>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x414>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b7b 	.word	0x08004b7b
 8004b40:	08004b6b 	.word	0x08004b6b
 8004b44:	08004b7b 	.word	0x08004b7b
 8004b48:	08004b7b 	.word	0x08004b7b
 8004b4c:	08004b7b 	.word	0x08004b7b
 8004b50:	08004b73 	.word	0x08004b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fe fc82 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004b58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b5a:	e014      	b.n	8004b86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b5c:	f7fe fc90 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8004b60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b62:	e010      	b.n	8004b86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <UART_SetConfig+0x4e4>)
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b68:	e00d      	b.n	8004b86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7fe fbc3 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b70:	e009      	b.n	8004b86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b78:	e005      	b.n	8004b86 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b84:	bf00      	nop
    }

    if (pclk != 0U)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d021      	beq.n	8004bd0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <UART_SetConfig+0x4e0>)
 8004b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b96:	461a      	mov	r2, r3
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	441a      	add	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	d909      	bls.n	8004bca <UART_SetConfig+0x4ae>
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d205      	bcs.n	8004bca <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e002      	b.n	8004bd0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2200      	movs	r2, #0
 8004be4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004bec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3730      	adds	r7, #48	; 0x30
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfa:	bf00      	nop
 8004bfc:	08005c04 	.word	0x08005c04
 8004c00:	00f42400 	.word	0x00f42400

08004c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d02:	d10a      	bne.n	8004d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af02      	add	r7, sp, #8
 8004d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d56:	f7fc ffc3 	bl	8001ce0 <HAL_GetTick>
 8004d5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d10e      	bne.n	8004d88 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f832 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e028      	b.n	8004dda <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d10e      	bne.n	8004db4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f81c 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e012      	b.n	8004dda <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b09c      	sub	sp, #112	; 0x70
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df2:	e0a9      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfa:	f000 80a5 	beq.w	8004f48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fc ff6f 	bl	8001ce0 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d140      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e28:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e6      	bne.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e66:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e069      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d051      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d149      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f10:	623a      	str	r2, [r7, #32]
 8004f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e010      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	f43f af46 	beq.w	8004df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3770      	adds	r7, #112	; 0x70
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e027      	b.n	8004fd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e02d      	b.n	8005056 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2224      	movs	r2, #36	; 0x24
 8005006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f850 	bl	80050dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005072:	2302      	movs	r3, #2
 8005074:	e02d      	b.n	80050d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2224      	movs	r2, #36	; 0x24
 8005082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f812 	bl	80050dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d108      	bne.n	80050fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050fc:	e031      	b.n	8005162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050fe:	2308      	movs	r3, #8
 8005100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005102:	2308      	movs	r3, #8
 8005104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	0e5b      	lsrs	r3, r3, #25
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	0f5b      	lsrs	r3, r3, #29
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005126:	7bbb      	ldrb	r3, [r7, #14]
 8005128:	7b3a      	ldrb	r2, [r7, #12]
 800512a:	4910      	ldr	r1, [pc, #64]	; (800516c <UARTEx_SetNbDataToProcess+0x90>)
 800512c:	5c8a      	ldrb	r2, [r1, r2]
 800512e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005132:	7b3a      	ldrb	r2, [r7, #12]
 8005134:	490e      	ldr	r1, [pc, #56]	; (8005170 <UARTEx_SetNbDataToProcess+0x94>)
 8005136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005138:	fb93 f3f2 	sdiv	r3, r3, r2
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	7b7a      	ldrb	r2, [r7, #13]
 8005148:	4908      	ldr	r1, [pc, #32]	; (800516c <UARTEx_SetNbDataToProcess+0x90>)
 800514a:	5c8a      	ldrb	r2, [r1, r2]
 800514c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005150:	7b7a      	ldrb	r2, [r7, #13]
 8005152:	4907      	ldr	r1, [pc, #28]	; (8005170 <UARTEx_SetNbDataToProcess+0x94>)
 8005154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005156:	fb93 f3f2 	sdiv	r3, r3, r2
 800515a:	b29a      	uxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	08005c1c 	.word	0x08005c1c
 8005170:	08005c24 	.word	0x08005c24

08005174 <__errno>:
 8005174:	4b01      	ldr	r3, [pc, #4]	; (800517c <__errno+0x8>)
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000010 	.word	0x20000010

08005180 <__libc_init_array>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	4d0d      	ldr	r5, [pc, #52]	; (80051b8 <__libc_init_array+0x38>)
 8005184:	4c0d      	ldr	r4, [pc, #52]	; (80051bc <__libc_init_array+0x3c>)
 8005186:	1b64      	subs	r4, r4, r5
 8005188:	10a4      	asrs	r4, r4, #2
 800518a:	2600      	movs	r6, #0
 800518c:	42a6      	cmp	r6, r4
 800518e:	d109      	bne.n	80051a4 <__libc_init_array+0x24>
 8005190:	4d0b      	ldr	r5, [pc, #44]	; (80051c0 <__libc_init_array+0x40>)
 8005192:	4c0c      	ldr	r4, [pc, #48]	; (80051c4 <__libc_init_array+0x44>)
 8005194:	f000 fcb4 	bl	8005b00 <_init>
 8005198:	1b64      	subs	r4, r4, r5
 800519a:	10a4      	asrs	r4, r4, #2
 800519c:	2600      	movs	r6, #0
 800519e:	42a6      	cmp	r6, r4
 80051a0:	d105      	bne.n	80051ae <__libc_init_array+0x2e>
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a8:	4798      	blx	r3
 80051aa:	3601      	adds	r6, #1
 80051ac:	e7ee      	b.n	800518c <__libc_init_array+0xc>
 80051ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b2:	4798      	blx	r3
 80051b4:	3601      	adds	r6, #1
 80051b6:	e7f2      	b.n	800519e <__libc_init_array+0x1e>
 80051b8:	08005c68 	.word	0x08005c68
 80051bc:	08005c68 	.word	0x08005c68
 80051c0:	08005c68 	.word	0x08005c68
 80051c4:	08005c6c 	.word	0x08005c6c

080051c8 <memcpy>:
 80051c8:	440a      	add	r2, r1
 80051ca:	4291      	cmp	r1, r2
 80051cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051d0:	d100      	bne.n	80051d4 <memcpy+0xc>
 80051d2:	4770      	bx	lr
 80051d4:	b510      	push	{r4, lr}
 80051d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051de:	4291      	cmp	r1, r2
 80051e0:	d1f9      	bne.n	80051d6 <memcpy+0xe>
 80051e2:	bd10      	pop	{r4, pc}

080051e4 <memset>:
 80051e4:	4402      	add	r2, r0
 80051e6:	4603      	mov	r3, r0
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d100      	bne.n	80051ee <memset+0xa>
 80051ec:	4770      	bx	lr
 80051ee:	f803 1b01 	strb.w	r1, [r3], #1
 80051f2:	e7f9      	b.n	80051e8 <memset+0x4>

080051f4 <sniprintf>:
 80051f4:	b40c      	push	{r2, r3}
 80051f6:	b530      	push	{r4, r5, lr}
 80051f8:	4b17      	ldr	r3, [pc, #92]	; (8005258 <sniprintf+0x64>)
 80051fa:	1e0c      	subs	r4, r1, #0
 80051fc:	681d      	ldr	r5, [r3, #0]
 80051fe:	b09d      	sub	sp, #116	; 0x74
 8005200:	da08      	bge.n	8005214 <sniprintf+0x20>
 8005202:	238b      	movs	r3, #139	; 0x8b
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800520a:	b01d      	add	sp, #116	; 0x74
 800520c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005210:	b002      	add	sp, #8
 8005212:	4770      	bx	lr
 8005214:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005218:	f8ad 3014 	strh.w	r3, [sp, #20]
 800521c:	bf14      	ite	ne
 800521e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005222:	4623      	moveq	r3, r4
 8005224:	9304      	str	r3, [sp, #16]
 8005226:	9307      	str	r3, [sp, #28]
 8005228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800522c:	9002      	str	r0, [sp, #8]
 800522e:	9006      	str	r0, [sp, #24]
 8005230:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005234:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005236:	ab21      	add	r3, sp, #132	; 0x84
 8005238:	a902      	add	r1, sp, #8
 800523a:	4628      	mov	r0, r5
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	f000 f87d 	bl	800533c <_svfiprintf_r>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	bfbc      	itt	lt
 8005246:	238b      	movlt	r3, #139	; 0x8b
 8005248:	602b      	strlt	r3, [r5, #0]
 800524a:	2c00      	cmp	r4, #0
 800524c:	d0dd      	beq.n	800520a <sniprintf+0x16>
 800524e:	9b02      	ldr	r3, [sp, #8]
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e7d9      	b.n	800520a <sniprintf+0x16>
 8005256:	bf00      	nop
 8005258:	20000010 	.word	0x20000010

0800525c <strncmp>:
 800525c:	b510      	push	{r4, lr}
 800525e:	4603      	mov	r3, r0
 8005260:	b172      	cbz	r2, 8005280 <strncmp+0x24>
 8005262:	3901      	subs	r1, #1
 8005264:	1884      	adds	r4, r0, r2
 8005266:	f813 0b01 	ldrb.w	r0, [r3], #1
 800526a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800526e:	4290      	cmp	r0, r2
 8005270:	d101      	bne.n	8005276 <strncmp+0x1a>
 8005272:	42a3      	cmp	r3, r4
 8005274:	d101      	bne.n	800527a <strncmp+0x1e>
 8005276:	1a80      	subs	r0, r0, r2
 8005278:	bd10      	pop	{r4, pc}
 800527a:	2800      	cmp	r0, #0
 800527c:	d1f3      	bne.n	8005266 <strncmp+0xa>
 800527e:	e7fa      	b.n	8005276 <strncmp+0x1a>
 8005280:	4610      	mov	r0, r2
 8005282:	e7f9      	b.n	8005278 <strncmp+0x1c>

08005284 <__ssputs_r>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	688e      	ldr	r6, [r1, #8]
 800528a:	429e      	cmp	r6, r3
 800528c:	4682      	mov	sl, r0
 800528e:	460c      	mov	r4, r1
 8005290:	4690      	mov	r8, r2
 8005292:	461f      	mov	r7, r3
 8005294:	d838      	bhi.n	8005308 <__ssputs_r+0x84>
 8005296:	898a      	ldrh	r2, [r1, #12]
 8005298:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800529c:	d032      	beq.n	8005304 <__ssputs_r+0x80>
 800529e:	6825      	ldr	r5, [r4, #0]
 80052a0:	6909      	ldr	r1, [r1, #16]
 80052a2:	eba5 0901 	sub.w	r9, r5, r1
 80052a6:	6965      	ldr	r5, [r4, #20]
 80052a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b0:	3301      	adds	r3, #1
 80052b2:	444b      	add	r3, r9
 80052b4:	106d      	asrs	r5, r5, #1
 80052b6:	429d      	cmp	r5, r3
 80052b8:	bf38      	it	cc
 80052ba:	461d      	movcc	r5, r3
 80052bc:	0553      	lsls	r3, r2, #21
 80052be:	d531      	bpl.n	8005324 <__ssputs_r+0xa0>
 80052c0:	4629      	mov	r1, r5
 80052c2:	f000 fb53 	bl	800596c <_malloc_r>
 80052c6:	4606      	mov	r6, r0
 80052c8:	b950      	cbnz	r0, 80052e0 <__ssputs_r+0x5c>
 80052ca:	230c      	movs	r3, #12
 80052cc:	f8ca 3000 	str.w	r3, [sl]
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e0:	6921      	ldr	r1, [r4, #16]
 80052e2:	464a      	mov	r2, r9
 80052e4:	f7ff ff70 	bl	80051c8 <memcpy>
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	6126      	str	r6, [r4, #16]
 80052f6:	6165      	str	r5, [r4, #20]
 80052f8:	444e      	add	r6, r9
 80052fa:	eba5 0509 	sub.w	r5, r5, r9
 80052fe:	6026      	str	r6, [r4, #0]
 8005300:	60a5      	str	r5, [r4, #8]
 8005302:	463e      	mov	r6, r7
 8005304:	42be      	cmp	r6, r7
 8005306:	d900      	bls.n	800530a <__ssputs_r+0x86>
 8005308:	463e      	mov	r6, r7
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	4632      	mov	r2, r6
 800530e:	4641      	mov	r1, r8
 8005310:	f000 faa8 	bl	8005864 <memmove>
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	1b9b      	subs	r3, r3, r6
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	4433      	add	r3, r6
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	2000      	movs	r0, #0
 8005322:	e7db      	b.n	80052dc <__ssputs_r+0x58>
 8005324:	462a      	mov	r2, r5
 8005326:	f000 fb95 	bl	8005a54 <_realloc_r>
 800532a:	4606      	mov	r6, r0
 800532c:	2800      	cmp	r0, #0
 800532e:	d1e1      	bne.n	80052f4 <__ssputs_r+0x70>
 8005330:	6921      	ldr	r1, [r4, #16]
 8005332:	4650      	mov	r0, sl
 8005334:	f000 fab0 	bl	8005898 <_free_r>
 8005338:	e7c7      	b.n	80052ca <__ssputs_r+0x46>
	...

0800533c <_svfiprintf_r>:
 800533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005340:	4698      	mov	r8, r3
 8005342:	898b      	ldrh	r3, [r1, #12]
 8005344:	061b      	lsls	r3, r3, #24
 8005346:	b09d      	sub	sp, #116	; 0x74
 8005348:	4607      	mov	r7, r0
 800534a:	460d      	mov	r5, r1
 800534c:	4614      	mov	r4, r2
 800534e:	d50e      	bpl.n	800536e <_svfiprintf_r+0x32>
 8005350:	690b      	ldr	r3, [r1, #16]
 8005352:	b963      	cbnz	r3, 800536e <_svfiprintf_r+0x32>
 8005354:	2140      	movs	r1, #64	; 0x40
 8005356:	f000 fb09 	bl	800596c <_malloc_r>
 800535a:	6028      	str	r0, [r5, #0]
 800535c:	6128      	str	r0, [r5, #16]
 800535e:	b920      	cbnz	r0, 800536a <_svfiprintf_r+0x2e>
 8005360:	230c      	movs	r3, #12
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005368:	e0d1      	b.n	800550e <_svfiprintf_r+0x1d2>
 800536a:	2340      	movs	r3, #64	; 0x40
 800536c:	616b      	str	r3, [r5, #20]
 800536e:	2300      	movs	r3, #0
 8005370:	9309      	str	r3, [sp, #36]	; 0x24
 8005372:	2320      	movs	r3, #32
 8005374:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005378:	f8cd 800c 	str.w	r8, [sp, #12]
 800537c:	2330      	movs	r3, #48	; 0x30
 800537e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005528 <_svfiprintf_r+0x1ec>
 8005382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005386:	f04f 0901 	mov.w	r9, #1
 800538a:	4623      	mov	r3, r4
 800538c:	469a      	mov	sl, r3
 800538e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005392:	b10a      	cbz	r2, 8005398 <_svfiprintf_r+0x5c>
 8005394:	2a25      	cmp	r2, #37	; 0x25
 8005396:	d1f9      	bne.n	800538c <_svfiprintf_r+0x50>
 8005398:	ebba 0b04 	subs.w	fp, sl, r4
 800539c:	d00b      	beq.n	80053b6 <_svfiprintf_r+0x7a>
 800539e:	465b      	mov	r3, fp
 80053a0:	4622      	mov	r2, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff ff6d 	bl	8005284 <__ssputs_r>
 80053aa:	3001      	adds	r0, #1
 80053ac:	f000 80aa 	beq.w	8005504 <_svfiprintf_r+0x1c8>
 80053b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b2:	445a      	add	r2, fp
 80053b4:	9209      	str	r2, [sp, #36]	; 0x24
 80053b6:	f89a 3000 	ldrb.w	r3, [sl]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80a2 	beq.w	8005504 <_svfiprintf_r+0x1c8>
 80053c0:	2300      	movs	r3, #0
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ca:	f10a 0a01 	add.w	sl, sl, #1
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	9307      	str	r3, [sp, #28]
 80053d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d6:	931a      	str	r3, [sp, #104]	; 0x68
 80053d8:	4654      	mov	r4, sl
 80053da:	2205      	movs	r2, #5
 80053dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e0:	4851      	ldr	r0, [pc, #324]	; (8005528 <_svfiprintf_r+0x1ec>)
 80053e2:	f7fa fecd 	bl	8000180 <memchr>
 80053e6:	9a04      	ldr	r2, [sp, #16]
 80053e8:	b9d8      	cbnz	r0, 8005422 <_svfiprintf_r+0xe6>
 80053ea:	06d0      	lsls	r0, r2, #27
 80053ec:	bf44      	itt	mi
 80053ee:	2320      	movmi	r3, #32
 80053f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f4:	0711      	lsls	r1, r2, #28
 80053f6:	bf44      	itt	mi
 80053f8:	232b      	movmi	r3, #43	; 0x2b
 80053fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005402:	2b2a      	cmp	r3, #42	; 0x2a
 8005404:	d015      	beq.n	8005432 <_svfiprintf_r+0xf6>
 8005406:	9a07      	ldr	r2, [sp, #28]
 8005408:	4654      	mov	r4, sl
 800540a:	2000      	movs	r0, #0
 800540c:	f04f 0c0a 	mov.w	ip, #10
 8005410:	4621      	mov	r1, r4
 8005412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005416:	3b30      	subs	r3, #48	; 0x30
 8005418:	2b09      	cmp	r3, #9
 800541a:	d94e      	bls.n	80054ba <_svfiprintf_r+0x17e>
 800541c:	b1b0      	cbz	r0, 800544c <_svfiprintf_r+0x110>
 800541e:	9207      	str	r2, [sp, #28]
 8005420:	e014      	b.n	800544c <_svfiprintf_r+0x110>
 8005422:	eba0 0308 	sub.w	r3, r0, r8
 8005426:	fa09 f303 	lsl.w	r3, r9, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	46a2      	mov	sl, r4
 8005430:	e7d2      	b.n	80053d8 <_svfiprintf_r+0x9c>
 8005432:	9b03      	ldr	r3, [sp, #12]
 8005434:	1d19      	adds	r1, r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	9103      	str	r1, [sp, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	bfbb      	ittet	lt
 800543e:	425b      	neglt	r3, r3
 8005440:	f042 0202 	orrlt.w	r2, r2, #2
 8005444:	9307      	strge	r3, [sp, #28]
 8005446:	9307      	strlt	r3, [sp, #28]
 8005448:	bfb8      	it	lt
 800544a:	9204      	strlt	r2, [sp, #16]
 800544c:	7823      	ldrb	r3, [r4, #0]
 800544e:	2b2e      	cmp	r3, #46	; 0x2e
 8005450:	d10c      	bne.n	800546c <_svfiprintf_r+0x130>
 8005452:	7863      	ldrb	r3, [r4, #1]
 8005454:	2b2a      	cmp	r3, #42	; 0x2a
 8005456:	d135      	bne.n	80054c4 <_svfiprintf_r+0x188>
 8005458:	9b03      	ldr	r3, [sp, #12]
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	9203      	str	r2, [sp, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfb8      	it	lt
 8005464:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005468:	3402      	adds	r4, #2
 800546a:	9305      	str	r3, [sp, #20]
 800546c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800552c <_svfiprintf_r+0x1f0>
 8005470:	7821      	ldrb	r1, [r4, #0]
 8005472:	2203      	movs	r2, #3
 8005474:	4650      	mov	r0, sl
 8005476:	f7fa fe83 	bl	8000180 <memchr>
 800547a:	b140      	cbz	r0, 800548e <_svfiprintf_r+0x152>
 800547c:	2340      	movs	r3, #64	; 0x40
 800547e:	eba0 000a 	sub.w	r0, r0, sl
 8005482:	fa03 f000 	lsl.w	r0, r3, r0
 8005486:	9b04      	ldr	r3, [sp, #16]
 8005488:	4303      	orrs	r3, r0
 800548a:	3401      	adds	r4, #1
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005492:	4827      	ldr	r0, [pc, #156]	; (8005530 <_svfiprintf_r+0x1f4>)
 8005494:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005498:	2206      	movs	r2, #6
 800549a:	f7fa fe71 	bl	8000180 <memchr>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d038      	beq.n	8005514 <_svfiprintf_r+0x1d8>
 80054a2:	4b24      	ldr	r3, [pc, #144]	; (8005534 <_svfiprintf_r+0x1f8>)
 80054a4:	bb1b      	cbnz	r3, 80054ee <_svfiprintf_r+0x1b2>
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	3307      	adds	r3, #7
 80054aa:	f023 0307 	bic.w	r3, r3, #7
 80054ae:	3308      	adds	r3, #8
 80054b0:	9303      	str	r3, [sp, #12]
 80054b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b4:	4433      	add	r3, r6
 80054b6:	9309      	str	r3, [sp, #36]	; 0x24
 80054b8:	e767      	b.n	800538a <_svfiprintf_r+0x4e>
 80054ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80054be:	460c      	mov	r4, r1
 80054c0:	2001      	movs	r0, #1
 80054c2:	e7a5      	b.n	8005410 <_svfiprintf_r+0xd4>
 80054c4:	2300      	movs	r3, #0
 80054c6:	3401      	adds	r4, #1
 80054c8:	9305      	str	r3, [sp, #20]
 80054ca:	4619      	mov	r1, r3
 80054cc:	f04f 0c0a 	mov.w	ip, #10
 80054d0:	4620      	mov	r0, r4
 80054d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d6:	3a30      	subs	r2, #48	; 0x30
 80054d8:	2a09      	cmp	r2, #9
 80054da:	d903      	bls.n	80054e4 <_svfiprintf_r+0x1a8>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0c5      	beq.n	800546c <_svfiprintf_r+0x130>
 80054e0:	9105      	str	r1, [sp, #20]
 80054e2:	e7c3      	b.n	800546c <_svfiprintf_r+0x130>
 80054e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e8:	4604      	mov	r4, r0
 80054ea:	2301      	movs	r3, #1
 80054ec:	e7f0      	b.n	80054d0 <_svfiprintf_r+0x194>
 80054ee:	ab03      	add	r3, sp, #12
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	462a      	mov	r2, r5
 80054f4:	4b10      	ldr	r3, [pc, #64]	; (8005538 <_svfiprintf_r+0x1fc>)
 80054f6:	a904      	add	r1, sp, #16
 80054f8:	4638      	mov	r0, r7
 80054fa:	f3af 8000 	nop.w
 80054fe:	1c42      	adds	r2, r0, #1
 8005500:	4606      	mov	r6, r0
 8005502:	d1d6      	bne.n	80054b2 <_svfiprintf_r+0x176>
 8005504:	89ab      	ldrh	r3, [r5, #12]
 8005506:	065b      	lsls	r3, r3, #25
 8005508:	f53f af2c 	bmi.w	8005364 <_svfiprintf_r+0x28>
 800550c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800550e:	b01d      	add	sp, #116	; 0x74
 8005510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005514:	ab03      	add	r3, sp, #12
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	462a      	mov	r2, r5
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <_svfiprintf_r+0x1fc>)
 800551c:	a904      	add	r1, sp, #16
 800551e:	4638      	mov	r0, r7
 8005520:	f000 f87a 	bl	8005618 <_printf_i>
 8005524:	e7eb      	b.n	80054fe <_svfiprintf_r+0x1c2>
 8005526:	bf00      	nop
 8005528:	08005c2c 	.word	0x08005c2c
 800552c:	08005c32 	.word	0x08005c32
 8005530:	08005c36 	.word	0x08005c36
 8005534:	00000000 	.word	0x00000000
 8005538:	08005285 	.word	0x08005285

0800553c <_printf_common>:
 800553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005540:	4616      	mov	r6, r2
 8005542:	4699      	mov	r9, r3
 8005544:	688a      	ldr	r2, [r1, #8]
 8005546:	690b      	ldr	r3, [r1, #16]
 8005548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800554c:	4293      	cmp	r3, r2
 800554e:	bfb8      	it	lt
 8005550:	4613      	movlt	r3, r2
 8005552:	6033      	str	r3, [r6, #0]
 8005554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005558:	4607      	mov	r7, r0
 800555a:	460c      	mov	r4, r1
 800555c:	b10a      	cbz	r2, 8005562 <_printf_common+0x26>
 800555e:	3301      	adds	r3, #1
 8005560:	6033      	str	r3, [r6, #0]
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	0699      	lsls	r1, r3, #26
 8005566:	bf42      	ittt	mi
 8005568:	6833      	ldrmi	r3, [r6, #0]
 800556a:	3302      	addmi	r3, #2
 800556c:	6033      	strmi	r3, [r6, #0]
 800556e:	6825      	ldr	r5, [r4, #0]
 8005570:	f015 0506 	ands.w	r5, r5, #6
 8005574:	d106      	bne.n	8005584 <_printf_common+0x48>
 8005576:	f104 0a19 	add.w	sl, r4, #25
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	6832      	ldr	r2, [r6, #0]
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	42ab      	cmp	r3, r5
 8005582:	dc26      	bgt.n	80055d2 <_printf_common+0x96>
 8005584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005588:	1e13      	subs	r3, r2, #0
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	bf18      	it	ne
 800558e:	2301      	movne	r3, #1
 8005590:	0692      	lsls	r2, r2, #26
 8005592:	d42b      	bmi.n	80055ec <_printf_common+0xb0>
 8005594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005598:	4649      	mov	r1, r9
 800559a:	4638      	mov	r0, r7
 800559c:	47c0      	blx	r8
 800559e:	3001      	adds	r0, #1
 80055a0:	d01e      	beq.n	80055e0 <_printf_common+0xa4>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	68e5      	ldr	r5, [r4, #12]
 80055a6:	6832      	ldr	r2, [r6, #0]
 80055a8:	f003 0306 	and.w	r3, r3, #6
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	bf08      	it	eq
 80055b0:	1aad      	subeq	r5, r5, r2
 80055b2:	68a3      	ldr	r3, [r4, #8]
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	bf0c      	ite	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	2500      	movne	r5, #0
 80055be:	4293      	cmp	r3, r2
 80055c0:	bfc4      	itt	gt
 80055c2:	1a9b      	subgt	r3, r3, r2
 80055c4:	18ed      	addgt	r5, r5, r3
 80055c6:	2600      	movs	r6, #0
 80055c8:	341a      	adds	r4, #26
 80055ca:	42b5      	cmp	r5, r6
 80055cc:	d11a      	bne.n	8005604 <_printf_common+0xc8>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e008      	b.n	80055e4 <_printf_common+0xa8>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4652      	mov	r2, sl
 80055d6:	4649      	mov	r1, r9
 80055d8:	4638      	mov	r0, r7
 80055da:	47c0      	blx	r8
 80055dc:	3001      	adds	r0, #1
 80055de:	d103      	bne.n	80055e8 <_printf_common+0xac>
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e8:	3501      	adds	r5, #1
 80055ea:	e7c6      	b.n	800557a <_printf_common+0x3e>
 80055ec:	18e1      	adds	r1, r4, r3
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	2030      	movs	r0, #48	; 0x30
 80055f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055f6:	4422      	add	r2, r4
 80055f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005600:	3302      	adds	r3, #2
 8005602:	e7c7      	b.n	8005594 <_printf_common+0x58>
 8005604:	2301      	movs	r3, #1
 8005606:	4622      	mov	r2, r4
 8005608:	4649      	mov	r1, r9
 800560a:	4638      	mov	r0, r7
 800560c:	47c0      	blx	r8
 800560e:	3001      	adds	r0, #1
 8005610:	d0e6      	beq.n	80055e0 <_printf_common+0xa4>
 8005612:	3601      	adds	r6, #1
 8005614:	e7d9      	b.n	80055ca <_printf_common+0x8e>
	...

08005618 <_printf_i>:
 8005618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	7e0f      	ldrb	r7, [r1, #24]
 800561e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005620:	2f78      	cmp	r7, #120	; 0x78
 8005622:	4691      	mov	r9, r2
 8005624:	4680      	mov	r8, r0
 8005626:	460c      	mov	r4, r1
 8005628:	469a      	mov	sl, r3
 800562a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800562e:	d807      	bhi.n	8005640 <_printf_i+0x28>
 8005630:	2f62      	cmp	r7, #98	; 0x62
 8005632:	d80a      	bhi.n	800564a <_printf_i+0x32>
 8005634:	2f00      	cmp	r7, #0
 8005636:	f000 80d8 	beq.w	80057ea <_printf_i+0x1d2>
 800563a:	2f58      	cmp	r7, #88	; 0x58
 800563c:	f000 80a3 	beq.w	8005786 <_printf_i+0x16e>
 8005640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005648:	e03a      	b.n	80056c0 <_printf_i+0xa8>
 800564a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800564e:	2b15      	cmp	r3, #21
 8005650:	d8f6      	bhi.n	8005640 <_printf_i+0x28>
 8005652:	a101      	add	r1, pc, #4	; (adr r1, 8005658 <_printf_i+0x40>)
 8005654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005658:	080056b1 	.word	0x080056b1
 800565c:	080056c5 	.word	0x080056c5
 8005660:	08005641 	.word	0x08005641
 8005664:	08005641 	.word	0x08005641
 8005668:	08005641 	.word	0x08005641
 800566c:	08005641 	.word	0x08005641
 8005670:	080056c5 	.word	0x080056c5
 8005674:	08005641 	.word	0x08005641
 8005678:	08005641 	.word	0x08005641
 800567c:	08005641 	.word	0x08005641
 8005680:	08005641 	.word	0x08005641
 8005684:	080057d1 	.word	0x080057d1
 8005688:	080056f5 	.word	0x080056f5
 800568c:	080057b3 	.word	0x080057b3
 8005690:	08005641 	.word	0x08005641
 8005694:	08005641 	.word	0x08005641
 8005698:	080057f3 	.word	0x080057f3
 800569c:	08005641 	.word	0x08005641
 80056a0:	080056f5 	.word	0x080056f5
 80056a4:	08005641 	.word	0x08005641
 80056a8:	08005641 	.word	0x08005641
 80056ac:	080057bb 	.word	0x080057bb
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	602a      	str	r2, [r5, #0]
 80056b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0a3      	b.n	800580c <_printf_i+0x1f4>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	6829      	ldr	r1, [r5, #0]
 80056c8:	0606      	lsls	r6, r0, #24
 80056ca:	f101 0304 	add.w	r3, r1, #4
 80056ce:	d50a      	bpl.n	80056e6 <_printf_i+0xce>
 80056d0:	680e      	ldr	r6, [r1, #0]
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	2e00      	cmp	r6, #0
 80056d6:	da03      	bge.n	80056e0 <_printf_i+0xc8>
 80056d8:	232d      	movs	r3, #45	; 0x2d
 80056da:	4276      	negs	r6, r6
 80056dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e0:	485e      	ldr	r0, [pc, #376]	; (800585c <_printf_i+0x244>)
 80056e2:	230a      	movs	r3, #10
 80056e4:	e019      	b.n	800571a <_printf_i+0x102>
 80056e6:	680e      	ldr	r6, [r1, #0]
 80056e8:	602b      	str	r3, [r5, #0]
 80056ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056ee:	bf18      	it	ne
 80056f0:	b236      	sxthne	r6, r6
 80056f2:	e7ef      	b.n	80056d4 <_printf_i+0xbc>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	6820      	ldr	r0, [r4, #0]
 80056f8:	1d19      	adds	r1, r3, #4
 80056fa:	6029      	str	r1, [r5, #0]
 80056fc:	0601      	lsls	r1, r0, #24
 80056fe:	d501      	bpl.n	8005704 <_printf_i+0xec>
 8005700:	681e      	ldr	r6, [r3, #0]
 8005702:	e002      	b.n	800570a <_printf_i+0xf2>
 8005704:	0646      	lsls	r6, r0, #25
 8005706:	d5fb      	bpl.n	8005700 <_printf_i+0xe8>
 8005708:	881e      	ldrh	r6, [r3, #0]
 800570a:	4854      	ldr	r0, [pc, #336]	; (800585c <_printf_i+0x244>)
 800570c:	2f6f      	cmp	r7, #111	; 0x6f
 800570e:	bf0c      	ite	eq
 8005710:	2308      	moveq	r3, #8
 8005712:	230a      	movne	r3, #10
 8005714:	2100      	movs	r1, #0
 8005716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800571a:	6865      	ldr	r5, [r4, #4]
 800571c:	60a5      	str	r5, [r4, #8]
 800571e:	2d00      	cmp	r5, #0
 8005720:	bfa2      	ittt	ge
 8005722:	6821      	ldrge	r1, [r4, #0]
 8005724:	f021 0104 	bicge.w	r1, r1, #4
 8005728:	6021      	strge	r1, [r4, #0]
 800572a:	b90e      	cbnz	r6, 8005730 <_printf_i+0x118>
 800572c:	2d00      	cmp	r5, #0
 800572e:	d04d      	beq.n	80057cc <_printf_i+0x1b4>
 8005730:	4615      	mov	r5, r2
 8005732:	fbb6 f1f3 	udiv	r1, r6, r3
 8005736:	fb03 6711 	mls	r7, r3, r1, r6
 800573a:	5dc7      	ldrb	r7, [r0, r7]
 800573c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005740:	4637      	mov	r7, r6
 8005742:	42bb      	cmp	r3, r7
 8005744:	460e      	mov	r6, r1
 8005746:	d9f4      	bls.n	8005732 <_printf_i+0x11a>
 8005748:	2b08      	cmp	r3, #8
 800574a:	d10b      	bne.n	8005764 <_printf_i+0x14c>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	07de      	lsls	r6, r3, #31
 8005750:	d508      	bpl.n	8005764 <_printf_i+0x14c>
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	6861      	ldr	r1, [r4, #4]
 8005756:	4299      	cmp	r1, r3
 8005758:	bfde      	ittt	le
 800575a:	2330      	movle	r3, #48	; 0x30
 800575c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005760:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005764:	1b52      	subs	r2, r2, r5
 8005766:	6122      	str	r2, [r4, #16]
 8005768:	f8cd a000 	str.w	sl, [sp]
 800576c:	464b      	mov	r3, r9
 800576e:	aa03      	add	r2, sp, #12
 8005770:	4621      	mov	r1, r4
 8005772:	4640      	mov	r0, r8
 8005774:	f7ff fee2 	bl	800553c <_printf_common>
 8005778:	3001      	adds	r0, #1
 800577a:	d14c      	bne.n	8005816 <_printf_i+0x1fe>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005780:	b004      	add	sp, #16
 8005782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005786:	4835      	ldr	r0, [pc, #212]	; (800585c <_printf_i+0x244>)
 8005788:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800578c:	6829      	ldr	r1, [r5, #0]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f851 6b04 	ldr.w	r6, [r1], #4
 8005794:	6029      	str	r1, [r5, #0]
 8005796:	061d      	lsls	r5, r3, #24
 8005798:	d514      	bpl.n	80057c4 <_printf_i+0x1ac>
 800579a:	07df      	lsls	r7, r3, #31
 800579c:	bf44      	itt	mi
 800579e:	f043 0320 	orrmi.w	r3, r3, #32
 80057a2:	6023      	strmi	r3, [r4, #0]
 80057a4:	b91e      	cbnz	r6, 80057ae <_printf_i+0x196>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	f023 0320 	bic.w	r3, r3, #32
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	2310      	movs	r3, #16
 80057b0:	e7b0      	b.n	8005714 <_printf_i+0xfc>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f043 0320 	orr.w	r3, r3, #32
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	2378      	movs	r3, #120	; 0x78
 80057bc:	4828      	ldr	r0, [pc, #160]	; (8005860 <_printf_i+0x248>)
 80057be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057c2:	e7e3      	b.n	800578c <_printf_i+0x174>
 80057c4:	0659      	lsls	r1, r3, #25
 80057c6:	bf48      	it	mi
 80057c8:	b2b6      	uxthmi	r6, r6
 80057ca:	e7e6      	b.n	800579a <_printf_i+0x182>
 80057cc:	4615      	mov	r5, r2
 80057ce:	e7bb      	b.n	8005748 <_printf_i+0x130>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	6826      	ldr	r6, [r4, #0]
 80057d4:	6961      	ldr	r1, [r4, #20]
 80057d6:	1d18      	adds	r0, r3, #4
 80057d8:	6028      	str	r0, [r5, #0]
 80057da:	0635      	lsls	r5, r6, #24
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	d501      	bpl.n	80057e4 <_printf_i+0x1cc>
 80057e0:	6019      	str	r1, [r3, #0]
 80057e2:	e002      	b.n	80057ea <_printf_i+0x1d2>
 80057e4:	0670      	lsls	r0, r6, #25
 80057e6:	d5fb      	bpl.n	80057e0 <_printf_i+0x1c8>
 80057e8:	8019      	strh	r1, [r3, #0]
 80057ea:	2300      	movs	r3, #0
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	4615      	mov	r5, r2
 80057f0:	e7ba      	b.n	8005768 <_printf_i+0x150>
 80057f2:	682b      	ldr	r3, [r5, #0]
 80057f4:	1d1a      	adds	r2, r3, #4
 80057f6:	602a      	str	r2, [r5, #0]
 80057f8:	681d      	ldr	r5, [r3, #0]
 80057fa:	6862      	ldr	r2, [r4, #4]
 80057fc:	2100      	movs	r1, #0
 80057fe:	4628      	mov	r0, r5
 8005800:	f7fa fcbe 	bl	8000180 <memchr>
 8005804:	b108      	cbz	r0, 800580a <_printf_i+0x1f2>
 8005806:	1b40      	subs	r0, r0, r5
 8005808:	6060      	str	r0, [r4, #4]
 800580a:	6863      	ldr	r3, [r4, #4]
 800580c:	6123      	str	r3, [r4, #16]
 800580e:	2300      	movs	r3, #0
 8005810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005814:	e7a8      	b.n	8005768 <_printf_i+0x150>
 8005816:	6923      	ldr	r3, [r4, #16]
 8005818:	462a      	mov	r2, r5
 800581a:	4649      	mov	r1, r9
 800581c:	4640      	mov	r0, r8
 800581e:	47d0      	blx	sl
 8005820:	3001      	adds	r0, #1
 8005822:	d0ab      	beq.n	800577c <_printf_i+0x164>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	079b      	lsls	r3, r3, #30
 8005828:	d413      	bmi.n	8005852 <_printf_i+0x23a>
 800582a:	68e0      	ldr	r0, [r4, #12]
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	4298      	cmp	r0, r3
 8005830:	bfb8      	it	lt
 8005832:	4618      	movlt	r0, r3
 8005834:	e7a4      	b.n	8005780 <_printf_i+0x168>
 8005836:	2301      	movs	r3, #1
 8005838:	4632      	mov	r2, r6
 800583a:	4649      	mov	r1, r9
 800583c:	4640      	mov	r0, r8
 800583e:	47d0      	blx	sl
 8005840:	3001      	adds	r0, #1
 8005842:	d09b      	beq.n	800577c <_printf_i+0x164>
 8005844:	3501      	adds	r5, #1
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	9903      	ldr	r1, [sp, #12]
 800584a:	1a5b      	subs	r3, r3, r1
 800584c:	42ab      	cmp	r3, r5
 800584e:	dcf2      	bgt.n	8005836 <_printf_i+0x21e>
 8005850:	e7eb      	b.n	800582a <_printf_i+0x212>
 8005852:	2500      	movs	r5, #0
 8005854:	f104 0619 	add.w	r6, r4, #25
 8005858:	e7f5      	b.n	8005846 <_printf_i+0x22e>
 800585a:	bf00      	nop
 800585c:	08005c3d 	.word	0x08005c3d
 8005860:	08005c4e 	.word	0x08005c4e

08005864 <memmove>:
 8005864:	4288      	cmp	r0, r1
 8005866:	b510      	push	{r4, lr}
 8005868:	eb01 0402 	add.w	r4, r1, r2
 800586c:	d902      	bls.n	8005874 <memmove+0x10>
 800586e:	4284      	cmp	r4, r0
 8005870:	4623      	mov	r3, r4
 8005872:	d807      	bhi.n	8005884 <memmove+0x20>
 8005874:	1e43      	subs	r3, r0, #1
 8005876:	42a1      	cmp	r1, r4
 8005878:	d008      	beq.n	800588c <memmove+0x28>
 800587a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800587e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005882:	e7f8      	b.n	8005876 <memmove+0x12>
 8005884:	4402      	add	r2, r0
 8005886:	4601      	mov	r1, r0
 8005888:	428a      	cmp	r2, r1
 800588a:	d100      	bne.n	800588e <memmove+0x2a>
 800588c:	bd10      	pop	{r4, pc}
 800588e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005896:	e7f7      	b.n	8005888 <memmove+0x24>

08005898 <_free_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4605      	mov	r5, r0
 800589c:	2900      	cmp	r1, #0
 800589e:	d041      	beq.n	8005924 <_free_r+0x8c>
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfb8      	it	lt
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	f000 f912 	bl	8005ad4 <__malloc_lock>
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <_free_r+0x90>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	b933      	cbnz	r3, 80058c4 <_free_r+0x2c>
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	6014      	str	r4, [r2, #0]
 80058ba:	4628      	mov	r0, r5
 80058bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c0:	f000 b90e 	b.w	8005ae0 <__malloc_unlock>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d908      	bls.n	80058da <_free_r+0x42>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	1821      	adds	r1, r4, r0
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf01      	itttt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	1809      	addeq	r1, r1, r0
 80058d6:	6021      	streq	r1, [r4, #0]
 80058d8:	e7ed      	b.n	80058b6 <_free_r+0x1e>
 80058da:	461a      	mov	r2, r3
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b10b      	cbz	r3, 80058e4 <_free_r+0x4c>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x42>
 80058e4:	6811      	ldr	r1, [r2, #0]
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x6c>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	4401      	add	r1, r0
 80058f0:	1850      	adds	r0, r2, r1
 80058f2:	4283      	cmp	r3, r0
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	d1e0      	bne.n	80058ba <_free_r+0x22>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	6053      	str	r3, [r2, #4]
 80058fe:	4401      	add	r1, r0
 8005900:	6011      	str	r1, [r2, #0]
 8005902:	e7da      	b.n	80058ba <_free_r+0x22>
 8005904:	d902      	bls.n	800590c <_free_r+0x74>
 8005906:	230c      	movs	r3, #12
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	e7d6      	b.n	80058ba <_free_r+0x22>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf04      	itt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	bf04      	itt	eq
 800591c:	1809      	addeq	r1, r1, r0
 800591e:	6021      	streq	r1, [r4, #0]
 8005920:	6054      	str	r4, [r2, #4]
 8005922:	e7ca      	b.n	80058ba <_free_r+0x22>
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	200002b4 	.word	0x200002b4

0800592c <sbrk_aligned>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4e0e      	ldr	r6, [pc, #56]	; (8005968 <sbrk_aligned+0x3c>)
 8005930:	460c      	mov	r4, r1
 8005932:	6831      	ldr	r1, [r6, #0]
 8005934:	4605      	mov	r5, r0
 8005936:	b911      	cbnz	r1, 800593e <sbrk_aligned+0x12>
 8005938:	f000 f8bc 	bl	8005ab4 <_sbrk_r>
 800593c:	6030      	str	r0, [r6, #0]
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f000 f8b7 	bl	8005ab4 <_sbrk_r>
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	d00a      	beq.n	8005960 <sbrk_aligned+0x34>
 800594a:	1cc4      	adds	r4, r0, #3
 800594c:	f024 0403 	bic.w	r4, r4, #3
 8005950:	42a0      	cmp	r0, r4
 8005952:	d007      	beq.n	8005964 <sbrk_aligned+0x38>
 8005954:	1a21      	subs	r1, r4, r0
 8005956:	4628      	mov	r0, r5
 8005958:	f000 f8ac 	bl	8005ab4 <_sbrk_r>
 800595c:	3001      	adds	r0, #1
 800595e:	d101      	bne.n	8005964 <sbrk_aligned+0x38>
 8005960:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005964:	4620      	mov	r0, r4
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	200002b8 	.word	0x200002b8

0800596c <_malloc_r>:
 800596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005970:	1ccd      	adds	r5, r1, #3
 8005972:	f025 0503 	bic.w	r5, r5, #3
 8005976:	3508      	adds	r5, #8
 8005978:	2d0c      	cmp	r5, #12
 800597a:	bf38      	it	cc
 800597c:	250c      	movcc	r5, #12
 800597e:	2d00      	cmp	r5, #0
 8005980:	4607      	mov	r7, r0
 8005982:	db01      	blt.n	8005988 <_malloc_r+0x1c>
 8005984:	42a9      	cmp	r1, r5
 8005986:	d905      	bls.n	8005994 <_malloc_r+0x28>
 8005988:	230c      	movs	r3, #12
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	2600      	movs	r6, #0
 800598e:	4630      	mov	r0, r6
 8005990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005994:	4e2e      	ldr	r6, [pc, #184]	; (8005a50 <_malloc_r+0xe4>)
 8005996:	f000 f89d 	bl	8005ad4 <__malloc_lock>
 800599a:	6833      	ldr	r3, [r6, #0]
 800599c:	461c      	mov	r4, r3
 800599e:	bb34      	cbnz	r4, 80059ee <_malloc_r+0x82>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4638      	mov	r0, r7
 80059a4:	f7ff ffc2 	bl	800592c <sbrk_aligned>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	4604      	mov	r4, r0
 80059ac:	d14d      	bne.n	8005a4a <_malloc_r+0xde>
 80059ae:	6834      	ldr	r4, [r6, #0]
 80059b0:	4626      	mov	r6, r4
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d140      	bne.n	8005a38 <_malloc_r+0xcc>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	4631      	mov	r1, r6
 80059ba:	4638      	mov	r0, r7
 80059bc:	eb04 0803 	add.w	r8, r4, r3
 80059c0:	f000 f878 	bl	8005ab4 <_sbrk_r>
 80059c4:	4580      	cmp	r8, r0
 80059c6:	d13a      	bne.n	8005a3e <_malloc_r+0xd2>
 80059c8:	6821      	ldr	r1, [r4, #0]
 80059ca:	3503      	adds	r5, #3
 80059cc:	1a6d      	subs	r5, r5, r1
 80059ce:	f025 0503 	bic.w	r5, r5, #3
 80059d2:	3508      	adds	r5, #8
 80059d4:	2d0c      	cmp	r5, #12
 80059d6:	bf38      	it	cc
 80059d8:	250c      	movcc	r5, #12
 80059da:	4629      	mov	r1, r5
 80059dc:	4638      	mov	r0, r7
 80059de:	f7ff ffa5 	bl	800592c <sbrk_aligned>
 80059e2:	3001      	adds	r0, #1
 80059e4:	d02b      	beq.n	8005a3e <_malloc_r+0xd2>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	442b      	add	r3, r5
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	e00e      	b.n	8005a0c <_malloc_r+0xa0>
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	1b52      	subs	r2, r2, r5
 80059f2:	d41e      	bmi.n	8005a32 <_malloc_r+0xc6>
 80059f4:	2a0b      	cmp	r2, #11
 80059f6:	d916      	bls.n	8005a26 <_malloc_r+0xba>
 80059f8:	1961      	adds	r1, r4, r5
 80059fa:	42a3      	cmp	r3, r4
 80059fc:	6025      	str	r5, [r4, #0]
 80059fe:	bf18      	it	ne
 8005a00:	6059      	strne	r1, [r3, #4]
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	bf08      	it	eq
 8005a06:	6031      	streq	r1, [r6, #0]
 8005a08:	5162      	str	r2, [r4, r5]
 8005a0a:	604b      	str	r3, [r1, #4]
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	f104 060b 	add.w	r6, r4, #11
 8005a12:	f000 f865 	bl	8005ae0 <__malloc_unlock>
 8005a16:	f026 0607 	bic.w	r6, r6, #7
 8005a1a:	1d23      	adds	r3, r4, #4
 8005a1c:	1af2      	subs	r2, r6, r3
 8005a1e:	d0b6      	beq.n	800598e <_malloc_r+0x22>
 8005a20:	1b9b      	subs	r3, r3, r6
 8005a22:	50a3      	str	r3, [r4, r2]
 8005a24:	e7b3      	b.n	800598e <_malloc_r+0x22>
 8005a26:	6862      	ldr	r2, [r4, #4]
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	bf0c      	ite	eq
 8005a2c:	6032      	streq	r2, [r6, #0]
 8005a2e:	605a      	strne	r2, [r3, #4]
 8005a30:	e7ec      	b.n	8005a0c <_malloc_r+0xa0>
 8005a32:	4623      	mov	r3, r4
 8005a34:	6864      	ldr	r4, [r4, #4]
 8005a36:	e7b2      	b.n	800599e <_malloc_r+0x32>
 8005a38:	4634      	mov	r4, r6
 8005a3a:	6876      	ldr	r6, [r6, #4]
 8005a3c:	e7b9      	b.n	80059b2 <_malloc_r+0x46>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4638      	mov	r0, r7
 8005a44:	f000 f84c 	bl	8005ae0 <__malloc_unlock>
 8005a48:	e7a1      	b.n	800598e <_malloc_r+0x22>
 8005a4a:	6025      	str	r5, [r4, #0]
 8005a4c:	e7de      	b.n	8005a0c <_malloc_r+0xa0>
 8005a4e:	bf00      	nop
 8005a50:	200002b4 	.word	0x200002b4

08005a54 <_realloc_r>:
 8005a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a58:	4680      	mov	r8, r0
 8005a5a:	4614      	mov	r4, r2
 8005a5c:	460e      	mov	r6, r1
 8005a5e:	b921      	cbnz	r1, 8005a6a <_realloc_r+0x16>
 8005a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	4611      	mov	r1, r2
 8005a66:	f7ff bf81 	b.w	800596c <_malloc_r>
 8005a6a:	b92a      	cbnz	r2, 8005a78 <_realloc_r+0x24>
 8005a6c:	f7ff ff14 	bl	8005898 <_free_r>
 8005a70:	4625      	mov	r5, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a78:	f000 f838 	bl	8005aec <_malloc_usable_size_r>
 8005a7c:	4284      	cmp	r4, r0
 8005a7e:	4607      	mov	r7, r0
 8005a80:	d802      	bhi.n	8005a88 <_realloc_r+0x34>
 8005a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a86:	d812      	bhi.n	8005aae <_realloc_r+0x5a>
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f7ff ff6e 	bl	800596c <_malloc_r>
 8005a90:	4605      	mov	r5, r0
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d0ed      	beq.n	8005a72 <_realloc_r+0x1e>
 8005a96:	42bc      	cmp	r4, r7
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	bf28      	it	cs
 8005a9e:	463a      	movcs	r2, r7
 8005aa0:	f7ff fb92 	bl	80051c8 <memcpy>
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f7ff fef6 	bl	8005898 <_free_r>
 8005aac:	e7e1      	b.n	8005a72 <_realloc_r+0x1e>
 8005aae:	4635      	mov	r5, r6
 8005ab0:	e7df      	b.n	8005a72 <_realloc_r+0x1e>
	...

08005ab4 <_sbrk_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d06      	ldr	r5, [pc, #24]	; (8005ad0 <_sbrk_r+0x1c>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7fc f842 	bl	8001b48 <_sbrk>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_sbrk_r+0x1a>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_sbrk_r+0x1a>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	200002bc 	.word	0x200002bc

08005ad4 <__malloc_lock>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <__malloc_lock+0x8>)
 8005ad6:	f000 b811 	b.w	8005afc <__retarget_lock_acquire_recursive>
 8005ada:	bf00      	nop
 8005adc:	200002c0 	.word	0x200002c0

08005ae0 <__malloc_unlock>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <__malloc_unlock+0x8>)
 8005ae2:	f000 b80c 	b.w	8005afe <__retarget_lock_release_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	200002c0 	.word	0x200002c0

08005aec <_malloc_usable_size_r>:
 8005aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af0:	1f18      	subs	r0, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bfbc      	itt	lt
 8005af6:	580b      	ldrlt	r3, [r1, r0]
 8005af8:	18c0      	addlt	r0, r0, r3
 8005afa:	4770      	bx	lr

08005afc <__retarget_lock_acquire_recursive>:
 8005afc:	4770      	bx	lr

08005afe <__retarget_lock_release_recursive>:
 8005afe:	4770      	bx	lr

08005b00 <_init>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	bf00      	nop
 8005b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b06:	bc08      	pop	{r3}
 8005b08:	469e      	mov	lr, r3
 8005b0a:	4770      	bx	lr

08005b0c <_fini>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr

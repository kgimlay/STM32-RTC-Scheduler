
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007748  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c00  08007c00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c08  08007c08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000070  08007c80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08007c80  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018383  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003906  00000000  00000000  0003841d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0003bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  0003d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f27f  00000000  00000000  0003e910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d92  00000000  00000000  0005db8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbac6  00000000  00000000  00075921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001313e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c8  00000000  00000000  00131438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08007870 	.word	0x08007870

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08007870 	.word	0x08007870

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000550:	f023 0218 	bic.w	r2, r3, #24
 8000554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *         @arg @ref LL_DBGMCU_APB1_GRP1_I2C3_STOP
  *         @arg @ref LL_DBGMCU_APB1_GRP1_LPTIM1_STOP
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB1FZR1, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 80005a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e0042000 	.word	0xe0042000

080005c0 <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80005c8:	f004 fc74 	bl	8004eb4 <calendar_AlarmA_ISR>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <HAL_LPTIM_CompareMatchCallback>:

void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if (hlptim->Instance == LPTIM1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_LPTIM_CompareMatchCallback+0x20>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d101      	bne.n	80005ea <HAL_LPTIM_CompareMatchCallback+0x16>
		modeTimer_CompareMatch_IRQ();
 80005e6:	f005 fab9 	bl	8005b5c <modeTimer_CompareMatch_IRQ>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40007c00 	.word	0x40007c00

080005f8 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if (hlptim->Instance == LPTIM1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d101      	bne.n	800060e <HAL_LPTIM_AutoReloadMatchCallback+0x16>
		modeTimer_AutoReload_IRQ();
 800060a:	f005 fab5 	bl	8005b78 <modeTimer_AutoReload_IRQ>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40007c00 	.word	0x40007c00

0800061c <event_start>:

void event_start(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	activate_led(BLUE_LED);
 8000620:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000624:	f005 f9c6 	bl	80059b4 <activate_led>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <event_end>:

void event_end(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	deactivate_led(BLUE_LED);
 8000630:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000634:	f005 f9f2 	bl	8005a1c <deactivate_led>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09a      	sub	sp, #104	; 0x68
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fbeb 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f8c7 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 fa45 	bl	8000ad8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064e:	f000 f9ed 	bl	8000a2c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000652:	f000 f94d 	bl	80008f0 <MX_RTC_Init>
  MX_LPTIM1_Init();
 8000656:	f000 f91d 	bl	8000894 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_RTC();	// freezes RTC during debugging pause
 800065a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800065e:	f7ff ff9d 	bl	800059c <LL_DBGMCU_APB1_GRP1_FreezePeriph>
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000662:	2001      	movs	r0, #1
 8000664:	f001 fc78 	bl	8001f58 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  desktopAppSession_init(&huart2);
 8000668:	4853      	ldr	r0, [pc, #332]	; (80007b8 <main+0x17c>)
 800066a:	f005 fb9b 	bl	8005da4 <desktopAppSession_init>

  // initialize calendar
  calendar_init(&hrtc);
 800066e:	4853      	ldr	r0, [pc, #332]	; (80007bc <main+0x180>)
 8000670:	f004 fb38 	bl	8004ce4 <calendar_init>

  // initialize the mode timer
  modeTimer_init(&hlptim1);
 8000674:	4852      	ldr	r0, [pc, #328]	; (80007c0 <main+0x184>)
 8000676:	f005 f9f1 	bl	8005a5c <modeTimer_init>
  modeTimer_configure(256, 256/2, &(event_start), &(event_end));
 800067a:	4b52      	ldr	r3, [pc, #328]	; (80007c4 <main+0x188>)
 800067c:	4a52      	ldr	r2, [pc, #328]	; (80007c8 <main+0x18c>)
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000684:	f005 f9fe 	bl	8005a84 <modeTimer_configure>

  // begin listening for messages from desktop
  if (desktopAppSession_start() == SESSION_OKAY)
 8000688:	f005 fbda 	bl	8005e40 <desktopAppSession_start>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d103      	bne.n	800069a <main+0x5e>
  {
	  activate_led(GREEN_LED);
 8000692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000696:	f005 f98d 	bl	80059b4 <activate_led>

  // initialize main loop variables
  char messageHeader[UART_PACKET_HEADER_SIZE];
  char messageBody[UART_PACKET_PAYLOAD_SIZE];
  enum AppActions commandCode;
  DateTime newDateTime = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	809a      	strh	r2, [r3, #4]
  struct CalendarEvent tempEvent = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  // main loop
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_updateScheduler();
 80006b2:	f004 fbdd 	bl	8004e70 <calendar_updateScheduler>

	  // try to open connection if not present
	  desktopAppSession_start();
 80006b6:	f005 fbc3 	bl	8005e40 <desktopAppSession_start>

	  // led debug for if a communication is in session
	  if (sessionOpen())
 80006ba:	f005 fba9 	bl	8005e10 <sessionOpen>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d004      	beq.n	80006ce <main+0x92>
		  activate_led(GREEN_LED);
 80006c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c8:	f005 f974 	bl	80059b4 <activate_led>
 80006cc:	e003      	b.n	80006d6 <main+0x9a>
	  else
		  deactivate_led(GREEN_LED);
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f005 f9a3 	bl	8005a1c <deactivate_led>

	  // if a session is open, listen and execute messages/commands
	  if (sessionOpen())
 80006d6:	f005 fb9b 	bl	8005e10 <sessionOpen>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d067      	beq.n	80007b0 <main+0x174>
	  {
		  // if message present, handle message
		  desktopAppSession_update();
 80006e0:	f005 fbd6 	bl	8005e90 <desktopAppSession_update>

		  // get command if present
		  if (desktopAppSession_dequeueMessage(messageHeader, messageBody) == SESSION_OKAY)
 80006e4:	f107 021c 	add.w	r2, r7, #28
 80006e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 fc02 	bl	8005ef8 <desktopAppSession_dequeueMessage>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d15a      	bne.n	80007b0 <main+0x174>
		  {
			  // execute command
			  commandCode = code_to_appActions(messageHeader);
 80006fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 fa48 	bl	8005b94 <code_to_appActions>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			  switch (commandCode) {
 800070a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800070e:	3b01      	subs	r3, #1
 8000710:	2b06      	cmp	r3, #6
 8000712:	d84f      	bhi.n	80007b4 <main+0x178>
 8000714:	a201      	add	r2, pc, #4	; (adr r2, 800071c <main+0xe0>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	08000739 	.word	0x08000739
 8000720:	08000757 	.word	0x08000757
 8000724:	08000787 	.word	0x08000787
 8000728:	080007b5 	.word	0x080007b5
 800072c:	080007b5 	.word	0x080007b5
 8000730:	080007b5 	.word	0x080007b5
 8000734:	080007ab 	.word	0x080007ab
				  case SET_CALENDAR_DATETIME:
					  parseDateTime(&newDateTime, messageBody);
 8000738:	f107 021c 	add.w	r2, r7, #28
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fa84 	bl	8005c50 <parseDateTime>
					  calendar_setDateTime(newDateTime);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000750:	f004 fb0c 	bl	8004d6c <calendar_setDateTime>
					  break;
 8000754:	e02f      	b.n	80007b6 <main+0x17a>

				  case GET_CALENDAR_DATETIME:
					  calendar_getDateTime(&newDateTime);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4618      	mov	r0, r3
 800075c:	f004 fb30 	bl	8004dc0 <calendar_getDateTime>
					  formatDateTime(messageBody, &newDateTime);
 8000760:	f107 0214 	add.w	r2, r7, #20
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4611      	mov	r1, r2
 800076a:	4618      	mov	r0, r3
 800076c:	f005 fa98 	bl	8005ca0 <formatDateTime>
					  memcpy(messageHeader, "ECHO", UART_PACKET_HEADER_SIZE*sizeof(char));
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <main+0x190>)
 8000772:	65bb      	str	r3, [r7, #88]	; 0x58
					  desktopAppSession_enqueueMessage(messageHeader, messageBody);
 8000774:	f107 021c 	add.w	r2, r7, #28
 8000778:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fb9e 	bl	8005ec0 <desktopAppSession_enqueueMessage>
					  break;
 8000784:	e017      	b.n	80007b6 <main+0x17a>

				  case ADD_CALENDAR_EVENT:
					  parseEvent(&tempEvent, messageBody);
 8000786:	f107 021c 	add.w	r2, r7, #28
 800078a:	463b      	mov	r3, r7
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f005 fabc 	bl	8005d0c <parseEvent>
					  tempEvent.start_callback = (void*)&(modeTimer_start);
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <main+0x194>)
 8000796:	60fb      	str	r3, [r7, #12]
					  tempEvent.end_callback = (void*)&(modeTimer_stop);
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <main+0x198>)
 800079a:	613b      	str	r3, [r7, #16]
					  calendar_addEvent(tempEvent);
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	463b      	mov	r3, r7
 80007a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a4:	f004 fb2e 	bl	8004e04 <calendar_addEvent>
					  break;
 80007a8:	e005      	b.n	80007b6 <main+0x17a>

				  case CLEAR_CALENDAR_EVENTS:
					  break;

				  case START_CALENDAR:
					  calendar_startScheduler();
 80007aa:	f004 fac1 	bl	8004d30 <calendar_startScheduler>
					  break;
 80007ae:	e002      	b.n	80007b6 <main+0x17a>

				  default:
					  break;
			  }
		  }
 80007b0:	bf00      	nop
 80007b2:	e77e      	b.n	80006b2 <main+0x76>
					  break;
 80007b4:	bf00      	nop
	  calendar_updateScheduler();
 80007b6:	e77c      	b.n	80006b2 <main+0x76>
 80007b8:	20000100 	.word	0x20000100
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	0800062d 	.word	0x0800062d
 80007c8:	0800061d 	.word	0x0800061d
 80007cc:	4f484345 	.word	0x4f484345
 80007d0:	08005add 	.word	0x08005add
 80007d4:	08005b25 	.word	0x08005b25

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09a      	sub	sp, #104	; 0x68
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2248      	movs	r2, #72	; 0x48
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 ff00 	bl	80065ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007fe:	f001 fb83 	bl	8001f08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fe9c 	bl	8000540 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <SystemClock_Config+0xb8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000810:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <SystemClock_Config+0xb8>)
 8000812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <SystemClock_Config+0xb8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000824:	232c      	movs	r3, #44	; 0x2c
 8000826:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000828:	2381      	movs	r3, #129	; 0x81
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000830:	2300      	movs	r3, #0
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000834:	2360      	movs	r3, #96	; 0x60
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000840:	2300      	movs	r3, #0
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fe47 	bl	80024dc <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000854:	f000 f94d 	bl	8000af2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000858:	236f      	movs	r3, #111	; 0x6f
 800085a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f9b1 	bl	8002be0 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000884:	f000 f935 	bl	8000af2 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3768      	adds	r7, #104	; 0x68
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58000400 	.word	0x58000400

08000894 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <MX_LPTIM1_Init+0x58>)
 800089c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008a6:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80008aa:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_LPTIM1_Init+0x54>)
 80008d4:	f000 feda 	bl	800168c <HAL_LPTIM_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80008de:	f000 f908 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000008c 	.word	0x2000008c
 80008ec:	40007c00 	.word	0x40007c00

080008f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b092      	sub	sp, #72	; 0x48
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	222c      	movs	r2, #44	; 0x2c
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f005 fe6b 	bl	80065ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <MX_RTC_Init+0x134>)
 8000918:	4a43      	ldr	r2, [pc, #268]	; (8000a28 <MX_RTC_Init+0x138>)
 800091a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800091c:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <MX_RTC_Init+0x134>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <MX_RTC_Init+0x134>)
 8000924:	227f      	movs	r2, #127	; 0x7f
 8000926:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000928:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <MX_RTC_Init+0x134>)
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800092e:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <MX_RTC_Init+0x134>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000934:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <MX_RTC_Init+0x134>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <MX_RTC_Init+0x134>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000940:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <MX_RTC_Init+0x134>)
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <MX_RTC_Init+0x134>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <MX_RTC_Init+0x134>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000954:	4833      	ldr	r0, [pc, #204]	; (8000a24 <MX_RTC_Init+0x134>)
 8000956:	f002 fe1d 	bl	8003594 <HAL_RTC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000960:	f000 f8c7 	bl	8000af2 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000970:	2300      	movs	r3, #0
 8000972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000976:	2300      	movs	r3, #0
 8000978:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800097e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000982:	2201      	movs	r2, #1
 8000984:	4619      	mov	r1, r3
 8000986:	4827      	ldr	r0, [pc, #156]	; (8000a24 <MX_RTC_Init+0x134>)
 8000988:	f002 fe86 	bl	8003698 <HAL_RTC_SetTime>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000992:	f000 f8ae 	bl	8000af2 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000996:	2301      	movs	r3, #1
 8000998:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800099c:	2301      	movs	r3, #1
 800099e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	481b      	ldr	r0, [pc, #108]	; (8000a24 <MX_RTC_Init+0x134>)
 80009b8:	f002 ff6c 	bl	8003894 <HAL_RTC_SetDate>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 80009c2:	f000 f896 	bl	8000af2 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80009f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2201      	movs	r2, #1
 80009fa:	4619      	mov	r1, r3
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_RTC_Init+0x134>)
 80009fe:	f003 f81d 	bl	8003a3c <HAL_RTC_SetAlarm_IT>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000a08:	f000 f873 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	202a      	movs	r0, #42	; 0x2a
 8000a12:	f000 fb50 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a16:	202a      	movs	r0, #42	; 0x2a
 8000a18:	f000 fb67 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3748      	adds	r7, #72	; 0x48
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000c8 	.word	0x200000c8
 8000a28:	40002800 	.word	0x40002800

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a32:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <MX_USART2_UART_Init+0xa8>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a36:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a54:	220c      	movs	r2, #12
 8000a56:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a84:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a88:	f003 fa66 	bl	8003f58 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f82e 	bl	8000af2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000a9a:	f004 f85a 	bl	8004b52 <HAL_UARTEx_SetTxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 f825 	bl	8000af2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000aac:	f004 f88f 	bl	8004bce <HAL_UARTEx_SetRxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000ab6:	f000 f81c 	bl	8000af2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART2_UART_Init+0xa4>)
 8000abc:	f004 f811 	bl	8004ae2 <HAL_UARTEx_DisableFifoMode>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000ac6:	f000 f814 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000100 	.word	0x20000100
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fd44 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2004      	movs	r0, #4
 8000ae4:	f7ff fd41 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fd3e 	bl	800056a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af6:	b672      	cpsid	i
}
 8000af8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afa:	e7fe      	b.n	8000afa <Error_Handler+0x8>

08000afc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <LL_AHB2_GRP1_EnableClock>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b40:	68fb      	ldr	r3, [r7, #12]
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b70:	68fb      	ldr	r3, [r7, #12]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b090      	sub	sp, #64	; 0x40
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2238      	movs	r2, #56	; 0x38
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 fd27 	bl	80065ec <memset>
  if(hlptim->Instance==LPTIM1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <HAL_LPTIM_MspInit+0x60>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d11a      	bne.n	8000bde <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_LPTIM_MspInit+0x64>)
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fbd2 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8000bc2:	f7ff ff96 	bl	8000af2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000bc6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000bca:	f7ff ffbf 	bl	8000b4c <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2027      	movs	r0, #39	; 0x27
 8000bd4:	f000 fa6f 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000bd8:	2027      	movs	r0, #39	; 0x27
 8000bda:	f000 fa86 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	; 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40007c00 	.word	0x40007c00
 8000bec:	000c0004 	.word	0x000c0004

08000bf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	; 0x40
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	2238      	movs	r2, #56	; 0x38
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 fcf3 	bl	80065ec <memset>
  if(hrtc->Instance==RTC)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <HAL_RTC_MspInit+0x64>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d11d      	bne.n	8000c4c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c14:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fb9d 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c2c:	f7ff ff61 	bl	8000af2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c30:	f7ff ff64 	bl	8000afc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c38:	f7ff ff88 	bl	8000b4c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	202a      	movs	r0, #42	; 0x2a
 8000c42:	f000 fa38 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c46:	202a      	movs	r0, #42	; 0x2a
 8000c48:	f000 fa4f 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3740      	adds	r7, #64	; 0x40
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40002800 	.word	0x40002800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b096      	sub	sp, #88	; 0x58
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2238      	movs	r2, #56	; 0x38
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f005 fcb7 	bl	80065ec <memset>
  if(huart->Instance==USART2)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d126      	bne.n	8000cd6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c8c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000c90:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fb62 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ca2:	f7ff ff26 	bl	8000af2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000caa:	f7ff ff4f 	bl	8000b4c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff ff34 	bl	8000b1c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 fa25 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3758      	adds	r7, #88	; 0x58
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f8d1 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <LPTIM1_IRQHandler+0x10>)
 8000d3a:	f000 fe67 	bl	8001a0c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000008c 	.word	0x2000008c

08000d48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <RTC_Alarm_IRQHandler+0x10>)
 8000d4e:	f002 ffdd 	bl	8003d0c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000c8 	.word	0x200000c8

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f005 fbf6 	bl	800657c <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20008000 	.word	0x20008000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	20000194 	.word	0x20000194
 8000dc4:	20000630 	.word	0x20000630

08000dc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dcc:	f7ff fbb2 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000df6:	f005 fbc7 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff fc1f 	bl	800063c <main>

08000dfe <LoopForever>:

LoopForever:
    b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
  ldr   r0, =_estack
 8000e00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e0c:	08007c10 	.word	0x08007c10
  ldr r2, =_sbss
 8000e10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e14:	2000062c 	.word	0x2000062c

08000e18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f93a 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e2c:	f002 f8ba 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_Init+0x3c>)
 8000e34:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f810 	bl	8000e5c <HAL_InitTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	e001      	b.n	8000e4c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e48:	f7ff fe98 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_InitTick+0x6c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d024      	beq.n	8000eba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e70:	f002 f898 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_InitTick+0x6c>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 f93c 	bl	8001106 <HAL_SYSTICK_Config>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10f      	bne.n	8000eb4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	d809      	bhi.n	8000eae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea2:	f000 f908 	bl	80010b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_InitTick+0x70>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e007      	b.n	8000ebe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e004      	b.n	8000ebe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e001      	b.n	8000ebe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x20>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000198 	.word	0x20000198

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <HAL_GetTick+0x10>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000198 	.word	0x20000198

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <__NVIC_EnableIRQ+0x34>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001080:	f7ff ff90 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff2d 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff44 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff92 	bl	8000ff8 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff61 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff37 	bl	8000f6c <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa4 	bl	800105c <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e140      	b.n	80013b2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8132 	beq.w	80013ac <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 808c 	beq.w	80013ac <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001294:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_GPIO_Init+0x2b0>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	2207      	movs	r2, #7
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012be:	d00d      	beq.n	80012dc <HAL_GPIO_Init+0x1bc>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a44      	ldr	r2, [pc, #272]	; (80013d4 <HAL_GPIO_Init+0x2b4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <HAL_GPIO_Init+0x1b8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a43      	ldr	r2, [pc, #268]	; (80013d8 <HAL_GPIO_Init+0x2b8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_GPIO_Init+0x1b4>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e004      	b.n	80012de <HAL_GPIO_Init+0x1be>
 80012d4:	2307      	movs	r3, #7
 80012d6:	e002      	b.n	80012de <HAL_GPIO_Init+0x1be>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <HAL_GPIO_Init+0x1be>
 80012dc:	2300      	movs	r3, #0
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	f002 0203 	and.w	r2, r2, #3
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	4093      	lsls	r3, r2
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ee:	4938      	ldr	r1, [pc, #224]	; (80013d0 <HAL_GPIO_Init+0x2b0>)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001320:	4a2e      	ldr	r2, [pc, #184]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001356:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 8001380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001384:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f aeb7 	bne.w	8001130 <HAL_GPIO_Init+0x10>
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	58000800 	.word	0x58000800

080013e0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80013ee:	e0af      	b.n	8001550 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80013f0:	2201      	movs	r2, #1
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a2 	beq.w	800154a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001406:	4a59      	ldr	r2, [pc, #356]	; (800156c <HAL_GPIO_DeInit+0x18c>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	2207      	movs	r2, #7
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142e:	d00d      	beq.n	800144c <HAL_GPIO_DeInit+0x6c>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_GPIO_DeInit+0x190>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d007      	beq.n	8001448 <HAL_GPIO_DeInit+0x68>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4e      	ldr	r2, [pc, #312]	; (8001574 <HAL_GPIO_DeInit+0x194>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_GPIO_DeInit+0x64>
 8001440:	2302      	movs	r3, #2
 8001442:	e004      	b.n	800144e <HAL_GPIO_DeInit+0x6e>
 8001444:	2307      	movs	r3, #7
 8001446:	e002      	b.n	800144e <HAL_GPIO_DeInit+0x6e>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <HAL_GPIO_DeInit+0x6e>
 800144c:	2300      	movs	r3, #0
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	f002 0203 	and.w	r2, r2, #3
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	4093      	lsls	r3, r2
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	429a      	cmp	r2, r3
 800145c:	d136      	bne.n	80014cc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 8001460:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	4943      	ldr	r1, [pc, #268]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 800146a:	4013      	ands	r3, r2
 800146c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 8001472:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	493f      	ldr	r1, [pc, #252]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 800147c:	4013      	ands	r3, r2
 800147e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	493b      	ldr	r1, [pc, #236]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 800148c:	4013      	ands	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	4937      	ldr	r1, [pc, #220]	; (8001578 <HAL_GPIO_DeInit+0x198>)
 800149a:	4013      	ands	r3, r2
 800149c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	2207      	movs	r2, #7
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <HAL_GPIO_DeInit+0x18c>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43da      	mvns	r2, r3
 80014be:	482b      	ldr	r0, [pc, #172]	; (800156c <HAL_GPIO_DeInit+0x18c>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	400a      	ands	r2, r1
 80014c6:	3302      	adds	r3, #2
 80014c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2103      	movs	r1, #3
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	08d2      	lsrs	r2, r2, #3
 8001500:	4019      	ands	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2103      	movs	r1, #3
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	2101      	movs	r1, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2103      	movs	r1, #3
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	401a      	ands	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	60da      	str	r2, [r3, #12]
    }

    position++;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	f47f af49 	bne.w	80013f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40010000 	.word	0x40010000
 8001570:	48000400 	.word	0x48000400
 8001574:	48000800 	.word	0x48000800
 8001578:	58000800 	.word	0x58000800

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_SetLPTIMClockSource>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0c1b      	lsrs	r3, r3, #16
 80015be:	041b      	lsls	r3, r3, #16
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015cc:	4313      	orrs	r3, r2
 80015ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <LL_RCC_GetLPTIMClockSource>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4013      	ands	r3, r2
 80015f0:	0c1a      	lsrs	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800160e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4313      	orrs	r3, r2
 8001616:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <LL_APB1_GRP2_ForceReset>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4313      	orrs	r3, r2
 8001638:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	43db      	mvns	r3, r3
 8001656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800165a:	4013      	ands	r3, r2
 800165c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <LL_APB1_GRP2_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	43db      	mvns	r3, r3
 800167a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800167e:	4013      	ands	r3, r2
 8001680:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0b6      	b.n	800180c <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fa65 	bl	8000b88 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2202      	movs	r2, #2
 80016c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016de:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80016ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 faa0 	bl	8001c34 <LPTIM_WaitForFlag>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d101      	bne.n	80016fe <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e086      	b.n	800180c <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fac8 	bl	8001c94 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fa88 	bl	8001c1a <HAL_LPTIM_GetState>
 800170a:	4603      	mov	r3, r0
 800170c:	2b03      	cmp	r3, #3
 800170e:	d101      	bne.n	8001714 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e07b      	b.n	800180c <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d004      	beq.n	800172e <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800172c:	d103      	bne.n	8001736 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f023 031e 	bic.w	r3, r3, #30
 8001734:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173e:	4293      	cmp	r3, r2
 8001740:	d005      	beq.n	800174e <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001748:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800174c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_LPTIM_Init+0x188>)
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800175e:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001764:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800176a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001770:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001788:	4313      	orrs	r3, r2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d004      	beq.n	80017a2 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017a0:	d107      	bne.n	80017b2 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80017aa:	4313      	orrs	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00a      	beq.n	80017d4 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017c6:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80017cc:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_LPTIM_Init+0x18c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d108      	bne.n	80017f8 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	621a      	str	r2, [r3, #32]
 80017f6:	e004      	b.n	8001802 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001800:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	ff19f1fe 	.word	0xff19f1fe
 8001818:	40007c00 	.word	0x40007c00

0800181c <HAL_LPTIM_PWM_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800183e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2210      	movs	r2, #16
 8001856:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001860:	2110      	movs	r1, #16
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f9e6 	bl	8001c34 <LPTIM_WaitForFlag>
 8001868:	4603      	mov	r3, r0
 800186a:	2b03      	cmp	r3, #3
 800186c:	d101      	bne.n	8001872 <HAL_LPTIM_PWM_Start_IT+0x56>
  {
    return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e06e      	b.n	8001950 <HAL_LPTIM_PWM_Start_IT+0x134>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2208      	movs	r2, #8
 8001878:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001882:	2108      	movs	r1, #8
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f9d5 	bl	8001c34 <LPTIM_WaitForFlag>
 800188a:	4603      	mov	r3, r0
 800188c:	2b03      	cmp	r3, #3
 800188e:	d101      	bne.n	8001894 <HAL_LPTIM_PWM_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e05d      	b.n	8001950 <HAL_LPTIM_PWM_Start_IT+0x134>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f9fd 	bl	8001c94 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f9bd 	bl	8001c1a <HAL_LPTIM_GetState>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d101      	bne.n	80018aa <HAL_LPTIM_PWM_Start_IT+0x8e>
  {
    return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e052      	b.n	8001950 <HAL_LPTIM_PWM_Start_IT+0x134>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0210 	orr.w	r2, r2, #16
 80018b8:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0208 	orr.w	r2, r2, #8
 80018c8:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0202 	orr.w	r2, r2, #2
 80018d8:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d007      	beq.n	8001906 <HAL_LPTIM_PWM_Start_IT+0xea>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0204 	orr.w	r2, r2, #4
 8001904:	609a      	str	r2, [r3, #8]
  }

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001914:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001924:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0204 	orr.w	r2, r2, #4
 8001944:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_LPTIM_PWM_Stop_IT>:
  * @brief  Stop the LPTIM PWM generation in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f993 	bl	8001c94 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f953 	bl	8001c1a <HAL_LPTIM_GetState>
 8001974:	4603      	mov	r3, r0
 8001976:	2b03      	cmp	r3, #3
 8001978:	d101      	bne.n	800197e <HAL_LPTIM_PWM_Stop_IT+0x26>
  {
    return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e042      	b.n	8001a04 <HAL_LPTIM_PWM_Stop_IT+0xac>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0210 	bic.w	r2, r2, #16
 800198c:	609a      	str	r2, [r3, #8]

  /* Disable Compare write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0208 	bic.w	r2, r2, #8
 800199c:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0202 	bic.w	r2, r2, #2
 80019ac:	609a      	str	r2, [r3, #8]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then disable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_LPTIM_PWM_Stop_IT+0x82>
  {
    /* Disable external trigger interrupt */
    __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0204 	bic.w	r2, r2, #4
 80019d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e8:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f8:	609a      	str	r2, [r3, #8]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10d      	bne.n	8001a3e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fdcb 	bl	80005d4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d10d      	bne.n	8001a68 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d106      	bne.n	8001a68 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7fe fdc8 	bl	80005f8 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d10d      	bne.n	8001a92 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d106      	bne.n	8001a92 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f885 	bl	8001b9c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d10d      	bne.n	8001abc <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d106      	bne.n	8001abc <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f879 	bl	8001bae <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d106      	bne.n	8001ae6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f86d 	bl	8001bc0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d10d      	bne.n	8001b10 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d106      	bne.n	8001b10 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2220      	movs	r2, #32
 8001b08:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f861 	bl	8001bd2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1a:	2b40      	cmp	r3, #64	; 0x40
 8001b1c:	d10d      	bne.n	8001b3a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d106      	bne.n	8001b3a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f855 	bl	8001be4 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b44:	2b80      	cmp	r3, #128	; 0x80
 8001b46:	d10d      	bne.n	8001b64 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	2b80      	cmp	r3, #128	; 0x80
 8001b54:	d106      	bne.n	8001b64 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f849 	bl	8001bf6 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b72:	d10f      	bne.n	8001b94 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b82:	d107      	bne.n	8001b94 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f83a 	bl	8001c08 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c28:	b2db      	uxtb	r3, r3
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <LPTIM_WaitForFlag+0x58>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <LPTIM_WaitForFlag+0x5c>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	0b9b      	lsrs	r3, r3, #14
 8001c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4013      	ands	r3, r2
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d002      	beq.n	8001c7e <LPTIM_WaitForFlag+0x4a>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ec      	bne.n	8001c58 <LPTIM_WaitForFlag+0x24>

  return result;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	d1b71759 	.word	0xd1b71759

08001c94 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08e      	sub	sp, #56	; 0x38
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ca4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ca6:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f383 8810 	msr	PRIMASK, r3
}
 8001cb4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a90      	ldr	r2, [pc, #576]	; (8001efc <LPTIM_Disable+0x268>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d015      	beq.n	8001cec <LPTIM_Disable+0x58>
 8001cc0:	4a8e      	ldr	r2, [pc, #568]	; (8001efc <LPTIM_Disable+0x268>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d818      	bhi.n	8001cf8 <LPTIM_Disable+0x64>
 8001cc6:	4a8e      	ldr	r2, [pc, #568]	; (8001f00 <LPTIM_Disable+0x26c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d003      	beq.n	8001cd4 <LPTIM_Disable+0x40>
 8001ccc:	4a8d      	ldr	r2, [pc, #564]	; (8001f04 <LPTIM_Disable+0x270>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d006      	beq.n	8001ce0 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8001cd2:	e011      	b.n	8001cf8 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001cd4:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001cd8:	f7ff fc80 	bl	80015dc <LL_RCC_GetLPTIMClockSource>
 8001cdc:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8001cde:	e00c      	b.n	8001cfa <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001ce0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001ce4:	f7ff fc7a 	bl	80015dc <LL_RCC_GetLPTIMClockSource>
 8001ce8:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8001cea:	e006      	b.n	8001cfa <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8001cec:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001cf0:	f7ff fc74 	bl	80015dc <LL_RCC_GetLPTIMClockSource>
 8001cf4:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8001cf6:	e000      	b.n	8001cfa <LPTIM_Disable+0x66>
      break;
 8001cf8:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a73      	ldr	r2, [pc, #460]	; (8001efc <LPTIM_Disable+0x268>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d019      	beq.n	8001d68 <LPTIM_Disable+0xd4>
 8001d34:	4a71      	ldr	r2, [pc, #452]	; (8001efc <LPTIM_Disable+0x268>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d81d      	bhi.n	8001d76 <LPTIM_Disable+0xe2>
 8001d3a:	4a71      	ldr	r2, [pc, #452]	; (8001f00 <LPTIM_Disable+0x26c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d003      	beq.n	8001d48 <LPTIM_Disable+0xb4>
 8001d40:	4a70      	ldr	r2, [pc, #448]	; (8001f04 <LPTIM_Disable+0x270>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d009      	beq.n	8001d5a <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8001d46:	e016      	b.n	8001d76 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001d48:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001d4c:	f7ff fc58 	bl	8001600 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001d50:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001d54:	f7ff fc76 	bl	8001644 <LL_APB1_GRP1_ReleaseReset>
      break;
 8001d58:	e00e      	b.n	8001d78 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8001d5a:	2020      	movs	r0, #32
 8001d5c:	f7ff fc61 	bl	8001622 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8001d60:	2020      	movs	r0, #32
 8001d62:	f7ff fc81 	bl	8001668 <LL_APB1_GRP2_ReleaseReset>
      break;
 8001d66:	e007      	b.n	8001d78 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8001d68:	2040      	movs	r0, #64	; 0x40
 8001d6a:	f7ff fc5a 	bl	8001622 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8001d6e:	2040      	movs	r0, #64	; 0x40
 8001d70:	f7ff fc7a 	bl	8001668 <LL_APB1_GRP2_ReleaseReset>
      break;
 8001d74:	e000      	b.n	8001d78 <LPTIM_Disable+0xe4>
      break;
 8001d76:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <LPTIM_Disable+0xf8>
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <LPTIM_Disable+0xf8>
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8096 	beq.w	8001eb8 <LPTIM_Disable+0x224>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a5a      	ldr	r2, [pc, #360]	; (8001efc <LPTIM_Disable+0x268>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <LPTIM_Disable+0x12a>
 8001d96:	4a59      	ldr	r2, [pc, #356]	; (8001efc <LPTIM_Disable+0x268>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d815      	bhi.n	8001dc8 <LPTIM_Disable+0x134>
 8001d9c:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <LPTIM_Disable+0x26c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <LPTIM_Disable+0x116>
 8001da2:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <LPTIM_Disable+0x270>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d005      	beq.n	8001db4 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8001da8:	e00e      	b.n	8001dc8 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001daa:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001dae:	f7ff fbfc 	bl	80015aa <LL_RCC_SetLPTIMClockSource>
        break;
 8001db2:	e00a      	b.n	8001dca <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8001db4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001db8:	f7ff fbf7 	bl	80015aa <LL_RCC_SetLPTIMClockSource>
        break;
 8001dbc:	e005      	b.n	8001dca <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8001dbe:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001dc2:	f7ff fbf2 	bl	80015aa <LL_RCC_SetLPTIMClockSource>
        break;
 8001dc6:	e000      	b.n	8001dca <LPTIM_Disable+0x136>
        break;
 8001dc8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01a      	beq.n	8001e06 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001de8:	2108      	movs	r1, #8
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff22 	bl	8001c34 <LPTIM_WaitForFlag>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d103      	bne.n	8001dfe <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2208      	movs	r2, #8
 8001e04:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01a      	beq.n	8001e42 <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a3a      	ldr	r2, [r7, #32]
 8001e22:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001e24:	2110      	movs	r1, #16
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff04 	bl	8001c34 <LPTIM_WaitForFlag>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d103      	bne.n	8001e3a <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8001e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fee5 	bl	8001c34 <LPTIM_WaitForFlag>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d103      	bne.n	8001e78 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2203      	movs	r2, #3
 8001e74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e80:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <LPTIM_Disable+0x268>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d011      	beq.n	8001eb0 <LPTIM_Disable+0x21c>
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <LPTIM_Disable+0x268>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d814      	bhi.n	8001ebc <LPTIM_Disable+0x228>
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <LPTIM_Disable+0x26c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <LPTIM_Disable+0x20c>
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <LPTIM_Disable+0x270>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8001e9e:	e00d      	b.n	8001ebc <LPTIM_Disable+0x228>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001ea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ea2:	f7ff fb82 	bl	80015aa <LL_RCC_SetLPTIMClockSource>
        break;
 8001ea6:	e00a      	b.n	8001ebe <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8001ea8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eaa:	f7ff fb7e 	bl	80015aa <LL_RCC_SetLPTIMClockSource>
        break;
 8001eae:	e006      	b.n	8001ebe <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8001eb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eb2:	f7ff fb7a 	bl	80015aa <LL_RCC_SetLPTIMClockSource>
        break;
 8001eb6:	e002      	b.n	8001ebe <LPTIM_Disable+0x22a>
    }
  }
 8001eb8:	bf00      	nop
 8001eba:	e000      	b.n	8001ebe <LPTIM_Disable+0x22a>
        break;
 8001ebc:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed4:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001edc:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	621a      	str	r2, [r3, #32]
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f383 8810 	msr	PRIMASK, r3
}
 8001ef0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001ef2:	bf00      	nop
 8001ef4:	3738      	adds	r7, #56	; 0x38
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40009800 	.word	0x40009800
 8001f00:	40007c00 	.word	0x40007c00
 8001f04:	40009400 	.word	0x40009400

08001f08 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	58000400 	.word	0x58000400

08001f24 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <LL_PWR_EnableBootC2+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <LL_PWR_EnableBootC2+0x18>)
 8001f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	58000400 	.word	0x58000400

08001f40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_PWREx_GetVoltageRange+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	58000400 	.word	0x58000400

08001f58 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001f60:	f7ff ffe0 	bl	8001f24 <LL_PWR_EnableBootC2>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <LL_PWR_IsEnabledBkUpAccess>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f7c:	d101      	bne.n	8001f82 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	58000400 	.word	0x58000400

08001f90 <LL_RCC_HSE_EnableTcxo>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_HSE_DisableTcxo>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fda:	d101      	bne.n	8001fe0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_HSE_Enable>:
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <LL_RCC_HSE_Disable>:
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <LL_RCC_HSE_IsReady>:
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002034:	d101      	bne.n	800203a <LL_RCC_HSE_IsReady+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_RCC_HSE_IsReady+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <LL_RCC_HSI_Enable>:
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <LL_RCC_HSI_Disable>:
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <LL_RCC_HSI_IsReady>:
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208e:	d101      	bne.n	8002094 <LL_RCC_HSI_IsReady+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_RCC_HSI_IsReady+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <LL_RCC_HSI_SetCalibTrimming>:
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	061b      	lsls	r3, r3, #24
 80020b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_LSE_IsReady>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d101      	bne.n	80020de <LL_RCC_LSE_IsReady+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_RCC_LSE_IsReady+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_LSI_Enable>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <LL_RCC_LSI_Disable>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <LL_RCC_LSI_IsReady>:
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b02      	cmp	r3, #2
 800213a:	d101      	bne.n	8002140 <LL_RCC_LSI_IsReady+0x18>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <LL_RCC_LSI_IsReady+0x1a>
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <LL_RCC_MSI_Enable>:
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <LL_RCC_MSI_Disable>:
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_RCC_MSI_IsReady>:
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b02      	cmp	r3, #2
 8002192:	d101      	bne.n	8002198 <LL_RCC_MSI_IsReady+0x16>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_RCC_MSI_IsReady+0x18>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d101      	bne.n	80021b8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <LL_RCC_MSI_GetRange>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <LL_RCC_SetSysClkSource>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <LL_RCC_GetSysClkSource>:
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <LL_RCC_SetAHBPrescaler>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <LL_C2_RCC_SetAHBPrescaler>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800228a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <LL_RCC_SetAHB3Prescaler>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022b4:	f023 020f 	bic.w	r2, r3, #15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <LL_RCC_SetAPB1Prescaler>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_SetAPB2Prescaler>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <LL_RCC_GetAHBPrescaler>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <LL_RCC_GetAHB3Prescaler>:
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <LL_RCC_GetAPB1Prescaler>:
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <LL_RCC_GetAPB2Prescaler>:
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c2:	d101      	bne.n	80023c8 <LL_RCC_PLL_IsReady+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_RCC_PLL_IsReady+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0303 	and.w	r3, r3, #3
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243e:	d101      	bne.n	8002444 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002462:	d101      	bne.n	8002468 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002486:	d101      	bne.n	800248c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a8:	d101      	bne.n	80024ae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024ca:	d101      	bne.n	80024d0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e36f      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ee:	f7ff fea6 	bl	800223e <LL_RCC_GetSysClkSource>
 80024f2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f4:	f7ff ff8f 	bl	8002416 <LL_RCC_PLL_GetMainSource>
 80024f8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80c4 	beq.w	8002690 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x3e>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d176      	bne.n	8002602 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d173      	bne.n	8002602 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e353      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x68>
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002542:	e006      	b.n	8002552 <HAL_RCC_OscConfig+0x76>
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002552:	4293      	cmp	r3, r2
 8002554:	d222      	bcs.n	800259c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fd5a 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e331      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fe2b 	bl	80021f0 <LL_RCC_MSI_SetCalibTrimming>
 800259a:	e021      	b.n	80025e0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fe12 	bl	80021f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fd1f 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e2f6      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025e0:	f000 fce0 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4aa7      	ldr	r2, [pc, #668]	; (8002884 <HAL_RCC_OscConfig+0x3a8>)
 80025e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80025ea:	4ba7      	ldr	r3, [pc, #668]	; (8002888 <HAL_RCC_OscConfig+0x3ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fc34 	bl	8000e5c <HAL_InitTick>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d047      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	e2e5      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d02c      	beq.n	8002664 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800260a:	f7ff fd9e 	bl	800214a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800260e:	f7fe fc71 	bl	8000ef4 <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002616:	f7fe fc6d 	bl	8000ef4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e2d2      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002628:	f7ff fdab 	bl	8002182 <LL_RCC_MSI_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f1      	beq.n	8002616 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fdc7 	bl	80021f0 <LL_RCC_MSI_SetCalibTrimming>
 8002662:	e015      	b.n	8002690 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002664:	f7ff fd7f 	bl	8002166 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002668:	f7fe fc44 	bl	8000ef4 <HAL_GetTick>
 800266c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002670:	f7fe fc40 	bl	8000ef4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e2a5      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002682:	f7ff fd7e 	bl	8002182 <LL_RCC_MSI_IsReady>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f1      	bne.n	8002670 <HAL_RCC_OscConfig+0x194>
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800268e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d058      	beq.n	800274e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x1d2>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d108      	bne.n	80026ba <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d14b      	bne.n	800274e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e289      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d102      	bne.n	80026e0 <HAL_RCC_OscConfig+0x204>
 80026da:	f7ff fc86 	bl	8001fea <LL_RCC_HSE_Enable>
 80026de:	e00d      	b.n	80026fc <HAL_RCC_OscConfig+0x220>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80026e8:	d104      	bne.n	80026f4 <HAL_RCC_OscConfig+0x218>
 80026ea:	f7ff fc51 	bl	8001f90 <LL_RCC_HSE_EnableTcxo>
 80026ee:	f7ff fc7c 	bl	8001fea <LL_RCC_HSE_Enable>
 80026f2:	e003      	b.n	80026fc <HAL_RCC_OscConfig+0x220>
 80026f4:	f7ff fc87 	bl	8002006 <LL_RCC_HSE_Disable>
 80026f8:	f7ff fc58 	bl	8001fac <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d012      	beq.n	800272a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fbf6 	bl	8000ef4 <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fbf2 	bl	8000ef4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e257      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800271e:	f7ff fc80 	bl	8002022 <LL_RCC_HSE_IsReady>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f1      	beq.n	800270c <HAL_RCC_OscConfig+0x230>
 8002728:	e011      	b.n	800274e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe fbe3 	bl	8000ef4 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002732:	f7fe fbdf 	bl	8000ef4 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e244      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002744:	f7ff fc6d 	bl	8002022 <LL_RCC_HSE_IsReady>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f1      	bne.n	8002732 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d046      	beq.n	80027e8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x290>
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d10e      	bne.n	8002784 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e22a      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fc8e 	bl	800209e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002782:	e031      	b.n	80027e8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278c:	f7ff fc5a 	bl	8002044 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fbb0 	bl	8000ef4 <HAL_GetTick>
 8002794:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe fbac 	bl	8000ef4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e211      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80027aa:	f7ff fc67 	bl	800207c <LL_RCC_HSI_IsReady>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f1      	beq.n	8002798 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fc70 	bl	800209e <LL_RCC_HSI_SetCalibTrimming>
 80027be:	e013      	b.n	80027e8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	f7ff fc4e 	bl	8002060 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fb96 	bl	8000ef4 <HAL_GetTick>
 80027c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fb92 	bl	8000ef4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1f7      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80027de:	f7ff fc4d 	bl	800207c <LL_RCC_HSI_IsReady>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f1      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d06e      	beq.n	80028d2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d056      	beq.n	80028aa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002804:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	429a      	cmp	r2, r3
 8002812:	d031      	beq.n	8002878 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e1d0      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d013      	beq.n	800285e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002836:	f7ff fc67 	bl	8002108 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800283a:	f7fe fb5b 	bl	8000ef4 <HAL_GetTick>
 800283e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe fb57 	bl	8000ef4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b11      	cmp	r3, #17
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1bc      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002854:	f7ff fc68 	bl	8002128 <LL_RCC_LSI_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f1      	bne.n	8002842 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002878:	f7ff fc36 	bl	80020e8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe fb3a 	bl	8000ef4 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002882:	e00c      	b.n	800289e <HAL_RCC_OscConfig+0x3c2>
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fb32 	bl	8000ef4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b11      	cmp	r3, #17
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e197      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800289e:	f7ff fc43 	bl	8002128 <LL_RCC_LSI_IsReady>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f1      	beq.n	800288c <HAL_RCC_OscConfig+0x3b0>
 80028a8:	e013      	b.n	80028d2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	f7ff fc2d 	bl	8002108 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fb21 	bl	8000ef4 <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe fb1d 	bl	8000ef4 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b11      	cmp	r3, #17
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e182      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80028c8:	f7ff fc2e 	bl	8002128 <LL_RCC_LSI_IsReady>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f1      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80d8 	beq.w	8002a90 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80028e0:	f7ff fb44 	bl	8001f6c <LL_PWR_IsEnabledBkUpAccess>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80028ea:	f7ff fb0d 	bl	8001f08 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fb01 	bl	8000ef4 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fafd 	bl	8000ef4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e162      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002908:	f7ff fb30 	bl	8001f6c <LL_PWR_IsEnabledBkUpAccess>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f1      	beq.n	80028f6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d07b      	beq.n	8002a12 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b85      	cmp	r3, #133	; 0x85
 8002920:	d003      	beq.n	800292a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d109      	bne.n	800293e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe fad9 	bl	8000ef4 <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe facb 	bl	8000ef4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e12e      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002970:	f7ff fba9 	bl	80020c6 <LL_RCC_LSE_IsReady>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ef      	beq.n	800295a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b81      	cmp	r3, #129	; 0x81
 8002980:	d003      	beq.n	800298a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b85      	cmp	r3, #133	; 0x85
 8002988:	d121      	bne.n	80029ce <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7fe fab3 	bl	8000ef4 <HAL_GetTick>
 800298e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe faa5 	bl	8000ef4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e108      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ec      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80029cc:	e060      	b.n	8002a90 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fa91 	bl	8000ef4 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fa83 	bl	8000ef4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0e6      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ec      	bne.n	80029ea <HAL_RCC_OscConfig+0x50e>
 8002a10:	e03e      	b.n	8002a90 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fa6f 	bl	8000ef4 <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fa61 	bl	8000ef4 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0c4      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ec      	bne.n	8002a2e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe fa4e 	bl	8000ef4 <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7fe fa40 	bl	8000ef4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0a3      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a86:	f7ff fb1e 	bl	80020c6 <LL_RCC_LSE_IsReady>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1ef      	bne.n	8002a70 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8099 	beq.w	8002bcc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d06c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d14b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	f7ff fc74 	bl	8002394 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fa22 	bl	8000ef4 <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fa1e 	bl	8000ef4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b0a      	cmp	r3, #10
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e083      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ac6:	f7ff fc73 	bl	80023b0 <LL_RCC_PLL_IsReady>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f1      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCC_OscConfig+0x6fc>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae8:	0212      	lsls	r2, r2, #8
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002afc:	430a      	orrs	r2, r1
 8002afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b06:	f7ff fc37 	bl	8002378 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f9eb 	bl	8000ef4 <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe f9e7 	bl	8000ef4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b0a      	cmp	r3, #10
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e04c      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b34:	f7ff fc3c 	bl	80023b0 <LL_RCC_PLL_IsReady>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f1      	beq.n	8002b22 <HAL_RCC_OscConfig+0x646>
 8002b3e:	e045      	b.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	f7ff fc28 	bl	8002394 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe f9d6 	bl	8000ef4 <HAL_GetTick>
 8002b48:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe f9d2 	bl	8000ef4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b0a      	cmp	r3, #10
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e037      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b5e:	f7ff fc27 	bl	80023b0 <LL_RCC_PLL_IsReady>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f1      	bne.n	8002b4c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_RCC_OscConfig+0x700>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
 8002b78:	e028      	b.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e023      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d115      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	11c1808c 	.word	0x11c1808c
 8002bdc:	eefefffc 	.word	0xeefefffc

08002be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e12c      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b98      	ldr	r3, [pc, #608]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d91b      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b95      	ldr	r3, [pc, #596]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 0207 	bic.w	r2, r3, #7
 8002c0a:	4993      	ldr	r1, [pc, #588]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f96f 	bl	8000ef4 <HAL_GetTick>
 8002c16:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c1a:	f7fe f96b 	bl	8000ef4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e110      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2c:	4b8a      	ldr	r3, [pc, #552]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d1ef      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fb02 	bl	8002254 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c50:	f7fe f950 	bl	8000ef4 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c58:	f7fe f94c 	bl	8000ef4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0f1      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c6a:	f7ff fbdf 	bl	800242c <LL_RCC_IsActiveFlag_HPRE>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f1      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d016      	beq.n	8002cae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff faf8 	bl	800227a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f933 	bl	8000ef4 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c92:	f7fe f92f 	bl	8000ef4 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0d4      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ca4:	f7ff fbd3 	bl	800244e <LL_RCC_IsActiveFlag_C2HPRE>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f1      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff faf0 	bl	80022a4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe f916 	bl	8000ef4 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ccc:	f7fe f912 	bl	8000ef4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0b7      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002cde:	f7ff fbc8 	bl	8002472 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f1      	beq.n	8002ccc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fae9 	bl	80022d0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cfe:	f7fe f8f9 	bl	8000ef4 <HAL_GetTick>
 8002d02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d06:	f7fe f8f5 	bl	8000ef4 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e09a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d18:	f7ff fbbd 	bl	8002496 <LL_RCC_IsActiveFlag_PPRE1>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f1      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fade 	bl	80022f6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d3a:	f7fe f8db 	bl	8000ef4 <HAL_GetTick>
 8002d3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d42:	f7fe f8d7 	bl	8000ef4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e07c      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d54:	f7ff fbb0 	bl	80024b8 <LL_RCC_IsActiveFlag_PPRE2>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f1      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d043      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002d72:	f7ff f956 	bl	8002022 <LL_RCC_HSE_IsReady>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11e      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e066      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002d88:	f7ff fb12 	bl	80023b0 <LL_RCC_PLL_IsReady>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e05b      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002d9e:	f7ff f9f0 	bl	8002182 <LL_RCC_MSI_IsReady>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d108      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e050      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002dac:	f7ff f966 	bl	800207c <LL_RCC_HSI_IsReady>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e049      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fa2a 	bl	8002218 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe f896 	bl	8000ef4 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe f892 	bl	8000ef4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e035      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	f7ff fa2c 	bl	800223e <LL_RCC_GetSysClkSource>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d1ec      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d21b      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	4913      	ldr	r1, [pc, #76]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e10:	f7fe f870 	bl	8000ef4 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e18:	f7fe f86c 	bl	8000ef4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e011      	b.n	8002e4e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1ef      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e38:	f000 f8b4 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_RCC_ClockConfig+0x27c>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_RCC_ClockConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe f808 	bl	8000e5c <HAL_InitTick>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	58004000 	.word	0x58004000
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e72:	f7ff f9e4 	bl	800223e <LL_RCC_GetSysClkSource>
 8002e76:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e78:	f7ff facd 	bl	8002416 <LL_RCC_PLL_GetMainSource>
 8002e7c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x2c>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d139      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d136      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002e90:	f7ff f987 	bl	80021a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d115      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x62>
 8002e9a:	f7ff f982 	bl	80021a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x4e>
 8002ea4:	f7ff f98d 	bl	80021c2 <LL_RCC_MSI_GetRange>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	e005      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x5a>
 8002eb2:	f7ff f991 	bl	80021d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	4a36      	ldr	r2, [pc, #216]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec4:	e014      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002ec6:	f7ff f96c 	bl	80021a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_GetSysClockFreq+0x7a>
 8002ed0:	f7ff f977 	bl	80021c2 <LL_RCC_MSI_GetRange>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	e005      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x86>
 8002ede:	f7ff f97b 	bl	80021d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	4a2b      	ldr	r2, [pc, #172]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x134>)
 8002eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d115      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002efc:	e012      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e00c      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f10:	f7ff f85a 	bl	8001fc8 <LL_RCC_HSE_IsEnabledDiv2>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e001      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f22:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f24:	f7ff f98b 	bl	800223e <LL_RCC_GetSysClkSource>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d12f      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f2e:	f7ff fa72 	bl	8002416 <LL_RCC_PLL_GetMainSource>
 8002f32:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0xde>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0xe4>
 8002f40:	e00d      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f44:	60fb      	str	r3, [r7, #12]
        break;
 8002f46:	e00d      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f48:	f7ff f83e 	bl	8001fc8 <LL_RCC_HSE_IsEnabledDiv2>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f54:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f5a:	60fb      	str	r3, [r7, #12]
        break;
 8002f5c:	e002      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	60fb      	str	r3, [r7, #12]
        break;
 8002f62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002f64:	f7ff fa35 	bl	80023d2 <LL_RCC_PLL_GetN>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	fb03 f402 	mul.w	r4, r3, r2
 8002f70:	f7ff fa46 	bl	8002400 <LL_RCC_PLL_GetDivider>
 8002f74:	4603      	mov	r3, r0
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	3301      	adds	r3, #1
 8002f7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8002f7e:	f7ff fa34 	bl	80023ea <LL_RCC_PLL_GetR>
 8002f82:	4603      	mov	r3, r0
 8002f84:	0f5b      	lsrs	r3, r3, #29
 8002f86:	3301      	adds	r3, #1
 8002f88:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f8c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	080079e8 	.word	0x080079e8
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	01e84800 	.word	0x01e84800

08002fa4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b598      	push	{r3, r4, r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002fa8:	f7ff ff5c 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002fac:	4604      	mov	r4, r0
 8002fae:	f7ff f9b5 	bl	800231c <LL_RCC_GetAHBPrescaler>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd98      	pop	{r3, r4, r7, pc}
 8002fc8:	08007988 	.word	0x08007988

08002fcc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b598      	push	{r3, r4, r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fd0:	f7ff ffe8 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	f7ff f9b9 	bl	800234c <LL_RCC_GetAPB1Prescaler>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	4a03      	ldr	r2, [pc, #12]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd98      	pop	{r3, r4, r7, pc}
 8002fec:	080079c8 	.word	0x080079c8

08002ff0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff0:	b598      	push	{r3, r4, r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ff4:	f7ff ffd6 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	f7ff f9b2 	bl	8002362 <LL_RCC_GetAPB2Prescaler>
 8002ffe:	4603      	mov	r3, r0
 8003000:	0adb      	lsrs	r3, r3, #11
 8003002:	4a03      	ldr	r2, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	fa24 f303 	lsr.w	r3, r4, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd98      	pop	{r3, r4, r7, pc}
 8003010:	080079c8 	.word	0x080079c8

08003014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	4a10      	ldr	r2, [pc, #64]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800302c:	f7ff f981 	bl	8002332 <LL_RCC_GetAHB3Prescaler>
 8003030:	4603      	mov	r3, r0
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	4a0c      	ldr	r2, [pc, #48]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800303a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0c9c      	lsrs	r4, r3, #18
 8003050:	f7fe ff76 	bl	8001f40 <HAL_PWREx_GetVoltageRange>
 8003054:	4603      	mov	r3, r0
 8003056:	4619      	mov	r1, r3
 8003058:	4620      	mov	r0, r4
 800305a:	f000 f80b 	bl	8003074 <RCC_SetFlashLatency>
 800305e:	4603      	mov	r3, r0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}
 8003068:	080079e8 	.word	0x080079e8
 800306c:	08007988 	.word	0x08007988
 8003070:	431bde83 	.word	0x431bde83

08003074 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08e      	sub	sp, #56	; 0x38
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800307e:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <RCC_SetFlashLatency+0xf4>)
 8003080:	f107 0320 	add.w	r3, r7, #32
 8003084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003088:	6018      	str	r0, [r3, #0]
 800308a:	3304      	adds	r3, #4
 800308c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800308e:	4a37      	ldr	r2, [pc, #220]	; (800316c <RCC_SetFlashLatency+0xf8>)
 8003090:	f107 0318 	add.w	r3, r7, #24
 8003094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003098:	6018      	str	r0, [r3, #0]
 800309a:	3304      	adds	r3, #4
 800309c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800309e:	4a34      	ldr	r2, [pc, #208]	; (8003170 <RCC_SetFlashLatency+0xfc>)
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030aa:	2300      	movs	r3, #0
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b4:	d11b      	bne.n	80030ee <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ba:	e014      	b.n	80030e6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	3338      	adds	r3, #56	; 0x38
 80030c2:	443b      	add	r3, r7
 80030c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d807      	bhi.n	80030e0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3338      	adds	r3, #56	; 0x38
 80030d6:	443b      	add	r3, r7
 80030d8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030de:	e021      	b.n	8003124 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	3301      	adds	r3, #1
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d9e7      	bls.n	80030bc <RCC_SetFlashLatency+0x48>
 80030ec:	e01a      	b.n	8003124 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f2:	e014      	b.n	800311e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	3338      	adds	r3, #56	; 0x38
 80030fa:	443b      	add	r3, r7
 80030fc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4293      	cmp	r3, r2
 8003106:	d807      	bhi.n	8003118 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	3338      	adds	r3, #56	; 0x38
 800310e:	443b      	add	r3, r7
 8003110:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003116:	e005      	b.n	8003124 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	3301      	adds	r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	2b02      	cmp	r3, #2
 8003122:	d9e7      	bls.n	80030f4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <RCC_SetFlashLatency+0x100>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 0207 	bic.w	r2, r3, #7
 800312c:	4911      	ldr	r1, [pc, #68]	; (8003174 <RCC_SetFlashLatency+0x100>)
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003134:	f7fd fede 	bl	8000ef4 <HAL_GetTick>
 8003138:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800313a:	e008      	b.n	800314e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800313c:	f7fd feda 	bl	8000ef4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e007      	b.n	800315e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <RCC_SetFlashLatency+0x100>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003158:	429a      	cmp	r2, r3
 800315a:	d1ef      	bne.n	800313c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3738      	adds	r7, #56	; 0x38
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	08007888 	.word	0x08007888
 800316c:	08007890 	.word	0x08007890
 8003170:	08007898 	.word	0x08007898
 8003174:	58004000 	.word	0x58004000

08003178 <LL_RCC_LSE_IsReady>:
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d101      	bne.n	8003190 <LL_RCC_LSE_IsReady+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_RCC_LSE_IsReady+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <LL_RCC_SetUSARTClockSource>:
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	43db      	mvns	r3, r3
 80031b0:	401a      	ands	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <LL_RCC_SetI2SClockSource>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <LL_RCC_SetLPUARTClockSource>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <LL_RCC_SetI2CClockSource>:
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003236:	43db      	mvns	r3, r3
 8003238:	401a      	ands	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <LL_RCC_SetLPTIMClockSource>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <LL_RCC_SetRNGClockSource>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800329c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <LL_RCC_SetADCClockSource>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <LL_RCC_SetRTCClockSource>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <LL_RCC_GetRTCClockSource>:
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800330a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <LL_RCC_ForceBackupDomainReset>:
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <LL_RCC_ReleaseBackupDomainReset>:
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
	...

08003360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800336c:	2300      	movs	r3, #0
 800336e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003370:	2300      	movs	r3, #0
 8003372:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d058      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003380:	f7fe fdc2 	bl	8001f08 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003384:	f7fd fdb6 	bl	8000ef4 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800338a:	e009      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd fdb2 	bl	8000ef4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d902      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	74fb      	strb	r3, [r7, #19]
        break;
 800339e:	e006      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033a0:	4b7b      	ldr	r3, [pc, #492]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ac:	d1ee      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d13c      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80033b4:	f7ff ffa7 	bl	8003306 <LL_RCC_GetRTCClockSource>
 80033b8:	4602      	mov	r2, r0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	429a      	cmp	r2, r3
 80033c0:	d00f      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d0:	f7ff ffa5 	bl	800331e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033d4:	f7ff ffb3 	bl	800333e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d014      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fd82 	bl	8000ef4 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80033f2:	e00b      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd fd7e 	bl	8000ef4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d902      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	74fb      	strb	r3, [r7, #19]
            break;
 800340a:	e004      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800340c:	f7ff feb4 	bl	8003178 <LL_RCC_LSE_IsReady>
 8003410:	4603      	mov	r3, r0
 8003412:	2b01      	cmp	r3, #1
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff5b 	bl	80032dc <LL_RCC_SetRTCClockSource>
 8003426:	e004      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
 800342c:	e001      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d004      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fea9 	bl	800319a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fe9e 	bl	800319a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fec0 	bl	80031f4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fee6 	bl	8003256 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fedb 	bl	8003256 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fed0 	bl	8003256 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fea9 	bl	800321e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fe9e 	bl	800321e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fe93 	bl	800321e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d011      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fe5e 	bl	80031ca <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	d107      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fea5 	bl	8003288 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003554:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d011      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fea3 	bl	80032b2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003574:	d107      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003586:	7cbb      	ldrb	r3, [r7, #18]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	58000400 	.word	0x58000400

08003594 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d071      	beq.n	800368a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fb18 	bl	8000bf0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <HAL_RTC_Init+0x100>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d051      	beq.n	8003678 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <HAL_RTC_Init+0x100>)
 80035d6:	22ca      	movs	r2, #202	; 0xca
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
 80035da:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <HAL_RTC_Init+0x100>)
 80035dc:	2253      	movs	r2, #83	; 0x53
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fbe3 	bl	8003dac <RTC_EnterInitMode>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d13f      	bne.n	8003670 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_RTC_Init+0x100>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_RTC_Init+0x100>)
 80035f6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80035fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035fe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003600:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RTC_Init+0x100>)
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	4319      	orrs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	430b      	orrs	r3, r1
 8003614:	491f      	ldr	r1, [pc, #124]	; (8003694 <HAL_RTC_Init+0x100>)
 8003616:	4313      	orrs	r3, r2
 8003618:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	491b      	ldr	r1, [pc, #108]	; (8003694 <HAL_RTC_Init+0x100>)
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_RTC_Init+0x100>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	430b      	orrs	r3, r1
 800363c:	4915      	ldr	r1, [pc, #84]	; (8003694 <HAL_RTC_Init+0x100>)
 800363e:	4313      	orrs	r3, r2
 8003640:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fbe6 	bl	8003e14 <RTC_ExitInitMode>
 8003648:	4603      	mov	r3, r0
 800364a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RTC_Init+0x100>)
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a19      	ldr	r1, [r3, #32]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4319      	orrs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	430b      	orrs	r3, r1
 800366a:	490a      	ldr	r1, [pc, #40]	; (8003694 <HAL_RTC_Init+0x100>)
 800366c:	4313      	orrs	r3, r2
 800366e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <HAL_RTC_Init+0x100>)
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
 8003676:	e001      	b.n	800367c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40002800 	.word	0x40002800

08003698 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_RTC_SetTime+0x1a>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e088      	b.n	80037c4 <HAL_RTC_SetTime+0x12c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036c2:	4b42      	ldr	r3, [pc, #264]	; (80037cc <HAL_RTC_SetTime+0x134>)
 80036c4:	22ca      	movs	r2, #202	; 0xca
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
 80036c8:	4b40      	ldr	r3, [pc, #256]	; (80037cc <HAL_RTC_SetTime+0x134>)
 80036ca:	2253      	movs	r2, #83	; 0x53
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fb6c 	bl	8003dac <RTC_EnterInitMode>
 80036d4:	4603      	mov	r3, r0
 80036d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d15e      	bne.n	800379c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RTC_SetTime+0x134>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d057      	beq.n	800379c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d125      	bne.n	800373e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <HAL_RTC_SetTime+0x134>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2200      	movs	r2, #0
 8003702:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fbc1 	bl	8003e90 <RTC_ByteToBcd2>
 800370e:	4603      	mov	r3, r0
 8003710:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fbba 	bl	8003e90 <RTC_ByteToBcd2>
 800371c:	4603      	mov	r3, r0
 800371e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003720:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	789b      	ldrb	r3, [r3, #2]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fbb2 	bl	8003e90 <RTC_ByteToBcd2>
 800372c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800372e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	78db      	ldrb	r3, [r3, #3]
 8003736:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e017      	b.n	800376e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <HAL_RTC_SetTime+0x134>)
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2200      	movs	r2, #0
 800374e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800375c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003762:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <HAL_RTC_SetTime+0x134>)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003776:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800377a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_RTC_SetTime+0x134>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	4a12      	ldr	r2, [pc, #72]	; (80037cc <HAL_RTC_SetTime+0x134>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RTC_SetTime+0x134>)
 800378a:	699a      	ldr	r2, [r3, #24]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	68d9      	ldr	r1, [r3, #12]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	430b      	orrs	r3, r1
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <HAL_RTC_SetTime+0x134>)
 8003798:	4313      	orrs	r3, r2
 800379a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fb39 	bl	8003e14 <RTC_ExitInitMode>
 80037a2:	4603      	mov	r3, r0
 80037a4:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RTC_SetTime+0x134>)
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	40002800 	.word	0x40002800

080037d0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80037dc:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_RTC_GetTime+0xc0>)
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RTC_GetTime+0xc0>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d049      	beq.n	8003886 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_RTC_GetTime+0xc0>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RTC_GetTime+0xc0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003806:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800380a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	0c1b      	lsrs	r3, r3, #16
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	0d9b      	lsrs	r3, r3, #22
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11a      	bne.n	8003886 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fb3a 	bl	8003ece <RTC_Bcd2ToByte>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fb31 	bl	8003ece <RTC_Bcd2ToByte>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	789b      	ldrb	r3, [r3, #2]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb28 	bl	8003ece <RTC_Bcd2ToByte>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40002800 	.word	0x40002800

08003894 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_RTC_SetDate+0x1a>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e071      	b.n	8003992 <HAL_RTC_SetDate+0xfe>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10e      	bne.n	80038e2 <HAL_RTC_SetDate+0x4e>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	f023 0310 	bic.w	r3, r3, #16
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	330a      	adds	r3, #10
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d11c      	bne.n	8003922 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	78db      	ldrb	r3, [r3, #3]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 facf 	bl	8003e90 <RTC_ByteToBcd2>
 80038f2:	4603      	mov	r3, r0
 80038f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fac8 	bl	8003e90 <RTC_ByteToBcd2>
 8003900:	4603      	mov	r3, r0
 8003902:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003904:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	789b      	ldrb	r3, [r3, #2]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fac0 	bl	8003e90 <RTC_ByteToBcd2>
 8003910:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003912:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e00e      	b.n	8003940 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	78db      	ldrb	r3, [r3, #3]
 8003926:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800392e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003934:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_RTC_SetDate+0x108>)
 8003942:	22ca      	movs	r2, #202	; 0xca
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_RTC_SetDate+0x108>)
 8003948:	2253      	movs	r2, #83	; 0x53
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fa2d 	bl	8003dac <RTC_EnterInitMode>
 8003952:	4603      	mov	r3, r0
 8003954:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800395c:	4a0f      	ldr	r2, [pc, #60]	; (800399c <HAL_RTC_SetDate+0x108>)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003964:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003968:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fa52 	bl	8003e14 <RTC_ExitInitMode>
 8003970:	4603      	mov	r3, r0
 8003972:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RTC_SetDate+0x108>)
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003990:	7cfb      	ldrb	r3, [r7, #19]
}
 8003992:	4618      	mov	r0, r3
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}
 800399a:	bf00      	nop
 800399c:	40002800 	.word	0x40002800

080039a0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80039ac:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <HAL_RTC_GetDate+0x98>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	0b5b      	lsrs	r3, r3, #13
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11a      	bne.n	8003a2e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	78db      	ldrb	r3, [r3, #3]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa66 	bl	8003ece <RTC_Bcd2ToByte>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fa5d 	bl	8003ece <RTC_Bcd2ToByte>
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	789b      	ldrb	r3, [r3, #2]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fa54 	bl	8003ece <RTC_Bcd2ToByte>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40002800 	.word	0x40002800

08003a3c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_RTC_SetAlarm_IT+0x1e>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0f3      	b.n	8003c42 <HAL_RTC_SetAlarm_IT+0x206>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003a6a:	4b78      	ldr	r3, [pc, #480]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7a:	d06a      	beq.n	8003b52 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d13a      	bne.n	8003af8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003a82:	4b72      	ldr	r3, [pc, #456]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2200      	movs	r2, #0
 8003a92:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f9f5 	bl	8003e90 <RTC_ByteToBcd2>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f9ee 	bl	8003e90 <RTC_ByteToBcd2>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ab8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	789b      	ldrb	r3, [r3, #2]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f9e6 	bl	8003e90 <RTC_ByteToBcd2>
 8003ac4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ac6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	78db      	ldrb	r3, [r3, #3]
 8003ace:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ad0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f9d8 	bl	8003e90 <RTC_ByteToBcd2>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ae4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003aec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e02c      	b.n	8003b52 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003b00:	d00d      	beq.n	8003b1e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b0a:	d008      	beq.n	8003b1e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b0c:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b2a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b30:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	78db      	ldrb	r3, [r3, #3]
 8003b36:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b38:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b40:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b42:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b48:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b54:	22ca      	movs	r2, #202	; 0xca
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24
 8003b58:	4b3c      	ldr	r3, [pc, #240]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b5a:	2253      	movs	r2, #83	; 0x53
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d12c      	bne.n	8003bc2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b72:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b80:	d107      	bne.n	8003b92 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4930      	ldr	r1, [pc, #192]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	644b      	str	r3, [r1, #68]	; 0x44
 8003b90:	e006      	b.n	8003ba0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003b92:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bba:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003bbe:	6193      	str	r3, [r2, #24]
 8003bc0:	e02b      	b.n	8003c1a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003bc2:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bc8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003bcc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003bce:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bda:	d107      	bne.n	8003bec <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4919      	ldr	r1, [pc, #100]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bea:	e006      	b.n	8003bfa <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003bec:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003bfa:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c14:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003c18:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_RTC_SetAlarm_IT+0x214>)
 8003c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c20:	4a0b      	ldr	r2, [pc, #44]	; (8003c50 <HAL_RTC_SetAlarm_IT+0x214>)
 8003c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_RTC_SetAlarm_IT+0x210>)
 8003c2c:	22ff      	movs	r2, #255	; 0xff
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40002800 	.word	0x40002800
 8003c50:	58000800 	.word	0x58000800

08003c54 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_RTC_DeactivateAlarm+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e048      	b.n	8003cfe <HAL_RTC_DeactivateAlarm+0xaa>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003c7e:	22ca      	movs	r2, #202	; 0xca
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003c84:	2253      	movs	r2, #83	; 0x53
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8e:	d115      	bne.n	8003cbc <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003c96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c9a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	f023 0201 	bic.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cba:	e014      	b.n	8003ce6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003cc2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003cc6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cd2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	f023 0202 	bic.w	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	40002800 	.word	0x40002800

08003d0c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fc fc45 	bl	80005c0 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d42:	2202      	movs	r2, #2
 8003d44:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8dc 	bl	8003f04 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40002800 	.word	0x40002800

08003d60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <HAL_RTC_WaitForSynchro+0x48>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a0e      	ldr	r2, [pc, #56]	; (8003da8 <HAL_RTC_WaitForSynchro+0x48>)
 8003d6e:	f023 0320 	bic.w	r3, r3, #32
 8003d72:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003d74:	f7fd f8be 	bl	8000ef4 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003d7a:	e009      	b.n	8003d90 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d7c:	f7fd f8ba 	bl	8000ef4 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d8a:	d901      	bls.n	8003d90 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e006      	b.n	8003d9e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RTC_WaitForSynchro+0x48>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ef      	beq.n	8003d7c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40002800 	.word	0x40002800

08003dac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <RTC_EnterInitMode+0x64>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d120      	bne.n	8003e06 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <RTC_EnterInitMode+0x64>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4a11      	ldr	r2, [pc, #68]	; (8003e10 <RTC_EnterInitMode+0x64>)
 8003dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dce:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003dd0:	f7fd f890 	bl	8000ef4 <HAL_GetTick>
 8003dd4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003dd6:	e00d      	b.n	8003df4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003dd8:	f7fd f88c 	bl	8000ef4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de6:	d905      	bls.n	8003df4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2203      	movs	r2, #3
 8003df0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <RTC_EnterInitMode+0x64>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <RTC_EnterInitMode+0x5a>
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d1e8      	bne.n	8003dd8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40002800 	.word	0x40002800

08003e14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <RTC_ExitInitMode+0x78>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <RTC_ExitInitMode+0x78>)
 8003e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <RTC_ExitInitMode+0x78>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10c      	bne.n	8003e52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff91 	bl	8003d60 <HAL_RTC_WaitForSynchro>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01e      	beq.n	8003e82 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2203      	movs	r2, #3
 8003e48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e017      	b.n	8003e82 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <RTC_ExitInitMode+0x78>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <RTC_ExitInitMode+0x78>)
 8003e58:	f023 0320 	bic.w	r3, r3, #32
 8003e5c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ff7e 	bl	8003d60 <HAL_RTC_WaitForSynchro>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <RTC_ExitInitMode+0x78>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <RTC_ExitInitMode+0x78>)
 8003e7c:	f043 0320 	orr.w	r3, r3, #32
 8003e80:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40002800 	.word	0x40002800

08003e90 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003ea2:	e005      	b.n	8003eb0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	3b0a      	subs	r3, #10
 8003eae:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d8f6      	bhi.n	8003ea4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	7afb      	ldrb	r3, [r7, #11]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	b2db      	uxtb	r3, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b2db      	uxtb	r3, r3
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_GetUSARTClockSource>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	4313      	orrs	r3, r2
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <LL_RCC_GetLPUARTClockSource>:
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4013      	ands	r3, r2
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e042      	b.n	8003ff0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7fc fe6b 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2224      	movs	r2, #36	; 0x24
 8003f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f976 	bl	800428c <UART_SetConfig>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e022      	b.n	8003ff0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fbde 	bl	8004774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fc64 	bl	80048b6 <UART_CheckIdleState>
 8003fee:	4603      	mov	r3, r0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	2b20      	cmp	r3, #32
 8004010:	d173      	bne.n	80040fa <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_Transmit+0x26>
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06c      	b.n	80040fc <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2221      	movs	r2, #33	; 0x21
 800402e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004032:	f7fc ff5f 	bl	8000ef4 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d108      	bne.n	8004064 <HAL_UART_Transmit+0x6c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	e003      	b.n	800406c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800406c:	e02c      	b.n	80040c8 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fc6a 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e039      	b.n	80040fc <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3302      	adds	r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e007      	b.n	80040b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1cc      	bne.n	800406e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	2140      	movs	r1, #64	; 0x40
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fc37 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e006      	b.n	80040fc <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411a:	2b20      	cmp	r3, #32
 800411c:	f040 80b1 	bne.w	8004282 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Receive+0x28>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0a9      	b.n	8004284 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2222      	movs	r2, #34	; 0x22
 800413c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004146:	f7fc fed5 	bl	8000ef4 <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d10e      	bne.n	8004184 <HAL_UART_Receive+0x80>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d105      	bne.n	800417a <HAL_UART_Receive+0x76>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004174:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004178:	e02d      	b.n	80041d6 <HAL_UART_Receive+0xd2>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	22ff      	movs	r2, #255	; 0xff
 800417e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004182:	e028      	b.n	80041d6 <HAL_UART_Receive+0xd2>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_UART_Receive+0xa4>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_UART_Receive+0x9a>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	22ff      	movs	r2, #255	; 0xff
 8004198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800419c:	e01b      	b.n	80041d6 <HAL_UART_Receive+0xd2>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	227f      	movs	r2, #127	; 0x7f
 80041a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041a6:	e016      	b.n	80041d6 <HAL_UART_Receive+0xd2>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b0:	d10d      	bne.n	80041ce <HAL_UART_Receive+0xca>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <HAL_UART_Receive+0xc0>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	227f      	movs	r2, #127	; 0x7f
 80041be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041c2:	e008      	b.n	80041d6 <HAL_UART_Receive+0xd2>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	223f      	movs	r2, #63	; 0x3f
 80041c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041cc:	e003      	b.n	80041d6 <HAL_UART_Receive+0xd2>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80041dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d108      	bne.n	80041fa <HAL_UART_Receive+0xf6>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	e003      	b.n	8004202 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004202:	e032      	b.n	800426a <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	2120      	movs	r1, #32
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fb9f 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e032      	b.n	8004284 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10c      	bne.n	800423e <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	b29a      	uxth	r2, r3
 800422c:	8a7b      	ldrh	r3, [r7, #18]
 800422e:	4013      	ands	r3, r2
 8004230:	b29a      	uxth	r2, r3
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3302      	adds	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e00c      	b.n	8004258 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2da      	uxtb	r2, r3
 8004246:	8a7b      	ldrh	r3, [r7, #18]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	4013      	ands	r3, r2
 800424c:	b2da      	uxtb	r2, r3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3301      	adds	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1c6      	bne.n	8004204 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b08c      	sub	sp, #48	; 0x30
 8004292:	af00      	add	r7, sp, #0
 8004294:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b94      	ldr	r3, [pc, #592]	; (800450c <UART_SetConfig+0x280>)
 80042bc:	4013      	ands	r3, r2
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a89      	ldr	r2, [pc, #548]	; (8004510 <UART_SetConfig+0x284>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f4:	4313      	orrs	r3, r2
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004302:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430c:	430b      	orrs	r3, r1
 800430e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f023 010f 	bic.w	r1, r3, #15
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7a      	ldr	r2, [pc, #488]	; (8004514 <UART_SetConfig+0x288>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d127      	bne.n	8004380 <UART_SetConfig+0xf4>
 8004330:	2003      	movs	r0, #3
 8004332:	f7ff fdf0 	bl	8003f16 <LL_RCC_GetUSARTClockSource>
 8004336:	4603      	mov	r3, r0
 8004338:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800433c:	2b03      	cmp	r3, #3
 800433e:	d81b      	bhi.n	8004378 <UART_SetConfig+0xec>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0xbc>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	08004359 	.word	0x08004359
 800434c:	08004369 	.word	0x08004369
 8004350:	08004361 	.word	0x08004361
 8004354:	08004371 	.word	0x08004371
 8004358:	2301      	movs	r3, #1
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800435e:	e080      	b.n	8004462 <UART_SetConfig+0x1d6>
 8004360:	2302      	movs	r3, #2
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004366:	e07c      	b.n	8004462 <UART_SetConfig+0x1d6>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800436e:	e078      	b.n	8004462 <UART_SetConfig+0x1d6>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004376:	e074      	b.n	8004462 <UART_SetConfig+0x1d6>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437e:	e070      	b.n	8004462 <UART_SetConfig+0x1d6>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a64      	ldr	r2, [pc, #400]	; (8004518 <UART_SetConfig+0x28c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d138      	bne.n	80043fc <UART_SetConfig+0x170>
 800438a:	200c      	movs	r0, #12
 800438c:	f7ff fdc3 	bl	8003f16 <LL_RCC_GetUSARTClockSource>
 8004390:	4603      	mov	r3, r0
 8004392:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d82c      	bhi.n	80043f4 <UART_SetConfig+0x168>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <UART_SetConfig+0x114>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	080043f5 	.word	0x080043f5
 80043a8:	080043f5 	.word	0x080043f5
 80043ac:	080043f5 	.word	0x080043f5
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	080043f5 	.word	0x080043f5
 80043bc:	080043f5 	.word	0x080043f5
 80043c0:	080043dd 	.word	0x080043dd
 80043c4:	080043f5 	.word	0x080043f5
 80043c8:	080043f5 	.word	0x080043f5
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043ed 	.word	0x080043ed
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043da:	e042      	b.n	8004462 <UART_SetConfig+0x1d6>
 80043dc:	2302      	movs	r3, #2
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e2:	e03e      	b.n	8004462 <UART_SetConfig+0x1d6>
 80043e4:	2304      	movs	r3, #4
 80043e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ea:	e03a      	b.n	8004462 <UART_SetConfig+0x1d6>
 80043ec:	2308      	movs	r3, #8
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f2:	e036      	b.n	8004462 <UART_SetConfig+0x1d6>
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043fa:	e032      	b.n	8004462 <UART_SetConfig+0x1d6>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a43      	ldr	r2, [pc, #268]	; (8004510 <UART_SetConfig+0x284>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d12a      	bne.n	800445c <UART_SetConfig+0x1d0>
 8004406:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800440a:	f7ff fd96 	bl	8003f3a <LL_RCC_GetLPUARTClockSource>
 800440e:	4603      	mov	r3, r0
 8004410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004414:	d01a      	beq.n	800444c <UART_SetConfig+0x1c0>
 8004416:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800441a:	d81b      	bhi.n	8004454 <UART_SetConfig+0x1c8>
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004420:	d00c      	beq.n	800443c <UART_SetConfig+0x1b0>
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004426:	d815      	bhi.n	8004454 <UART_SetConfig+0x1c8>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x1a8>
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d008      	beq.n	8004444 <UART_SetConfig+0x1b8>
 8004432:	e00f      	b.n	8004454 <UART_SetConfig+0x1c8>
 8004434:	2300      	movs	r3, #0
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443a:	e012      	b.n	8004462 <UART_SetConfig+0x1d6>
 800443c:	2302      	movs	r3, #2
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004442:	e00e      	b.n	8004462 <UART_SetConfig+0x1d6>
 8004444:	2304      	movs	r3, #4
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444a:	e00a      	b.n	8004462 <UART_SetConfig+0x1d6>
 800444c:	2308      	movs	r3, #8
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004452:	e006      	b.n	8004462 <UART_SetConfig+0x1d6>
 8004454:	2310      	movs	r3, #16
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445a:	e002      	b.n	8004462 <UART_SetConfig+0x1d6>
 800445c:	2310      	movs	r3, #16
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <UART_SetConfig+0x284>)
 8004468:	4293      	cmp	r3, r2
 800446a:	f040 80a4 	bne.w	80045b6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800446e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004472:	2b08      	cmp	r3, #8
 8004474:	d823      	bhi.n	80044be <UART_SetConfig+0x232>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x1f0>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044bf 	.word	0x080044bf
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044bf 	.word	0x080044bf
 800448c:	080044af 	.word	0x080044af
 8004490:	080044bf 	.word	0x080044bf
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044bf 	.word	0x080044bf
 800449c:	080044b7 	.word	0x080044b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fe fd94 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044a6:	e010      	b.n	80044ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a8:	4b1c      	ldr	r3, [pc, #112]	; (800451c <UART_SetConfig+0x290>)
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044ac:	e00d      	b.n	80044ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ae:	f7fe fcd9 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 80044b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044b4:	e009      	b.n	80044ca <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044bc:	e005      	b.n	80044ca <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8137 	beq.w	8004740 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <UART_SetConfig+0x294>)
 80044d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044dc:	461a      	mov	r2, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d305      	bcc.n	8004502 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d910      	bls.n	8004524 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004508:	e11a      	b.n	8004740 <UART_SetConfig+0x4b4>
 800450a:	bf00      	nop
 800450c:	cfff69f3 	.word	0xcfff69f3
 8004510:	40008000 	.word	0x40008000
 8004514:	40013800 	.word	0x40013800
 8004518:	40004400 	.word	0x40004400
 800451c:	00f42400 	.word	0x00f42400
 8004520:	08007a28 	.word	0x08007a28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	2200      	movs	r2, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	4a8e      	ldr	r2, [pc, #568]	; (800476c <UART_SetConfig+0x4e0>)
 8004532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004536:	b29b      	uxth	r3, r3
 8004538:	2200      	movs	r2, #0
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004546:	f7fb fe73 	bl	8000230 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	020b      	lsls	r3, r1, #8
 800455c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004560:	0202      	lsls	r2, r0, #8
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	6849      	ldr	r1, [r1, #4]
 8004566:	0849      	lsrs	r1, r1, #1
 8004568:	2000      	movs	r0, #0
 800456a:	460c      	mov	r4, r1
 800456c:	4605      	mov	r5, r0
 800456e:	eb12 0804 	adds.w	r8, r2, r4
 8004572:	eb43 0905 	adc.w	r9, r3, r5
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	469a      	mov	sl, r3
 800457e:	4693      	mov	fp, r2
 8004580:	4652      	mov	r2, sl
 8004582:	465b      	mov	r3, fp
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	f7fb fe52 	bl	8000230 <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459a:	d308      	bcc.n	80045ae <UART_SetConfig+0x322>
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a2:	d204      	bcs.n	80045ae <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	60da      	str	r2, [r3, #12]
 80045ac:	e0c8      	b.n	8004740 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045b4:	e0c4      	b.n	8004740 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045be:	d167      	bne.n	8004690 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80045c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d828      	bhi.n	800461a <UART_SetConfig+0x38e>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <UART_SetConfig+0x344>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fe fcea 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80045f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045fa:	e014      	b.n	8004626 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fcf8 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 8004600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b5a      	ldr	r3, [pc, #360]	; (8004770 <UART_SetConfig+0x4e4>)
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe fc2b 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8089 	beq.w	8004740 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	4a4e      	ldr	r2, [pc, #312]	; (800476c <UART_SetConfig+0x4e0>)
 8004634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004638:	461a      	mov	r2, r3
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004640:	005a      	lsls	r2, r3, #1
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	441a      	add	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d916      	bls.n	8004688 <UART_SetConfig+0x3fc>
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004660:	d212      	bcs.n	8004688 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f023 030f 	bic.w	r3, r3, #15
 800466a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	b29a      	uxth	r2, r3
 8004678:	8bfb      	ldrh	r3, [r7, #30]
 800467a:	4313      	orrs	r3, r2
 800467c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	8bfa      	ldrh	r2, [r7, #30]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	e05b      	b.n	8004740 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800468e:	e057      	b.n	8004740 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004694:	2b08      	cmp	r3, #8
 8004696:	d828      	bhi.n	80046ea <UART_SetConfig+0x45e>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x414>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7fe fc82 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80046c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7fe fc90 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <UART_SetConfig+0x4e4>)
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046d8:	e00d      	b.n	80046f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fe fbc3 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046e0:	e009      	b.n	80046f6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046e8:	e005      	b.n	80046f6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046f4:	bf00      	nop
    }

    if (pclk != 0U)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d021      	beq.n	8004740 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	4a1a      	ldr	r2, [pc, #104]	; (800476c <UART_SetConfig+0x4e0>)
 8004702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004706:	461a      	mov	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	fbb3 f2f2 	udiv	r2, r3, r2
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	441a      	add	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	d909      	bls.n	800473a <UART_SetConfig+0x4ae>
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d205      	bcs.n	800473a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	b29a      	uxth	r2, r3
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	e002      	b.n	8004740 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2201      	movs	r2, #1
 8004744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2201      	movs	r2, #1
 800474c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2200      	movs	r2, #0
 800475a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800475c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004760:	4618      	mov	r0, r3
 8004762:	3730      	adds	r7, #48	; 0x30
 8004764:	46bd      	mov	sp, r7
 8004766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476a:	bf00      	nop
 800476c:	08007a28 	.word	0x08007a28
 8004770:	00f42400 	.word	0x00f42400

08004774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01a      	beq.n	800488a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004872:	d10a      	bne.n	800488a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af02      	add	r7, sp, #8
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c6:	f7fc fb15 	bl	8000ef4 <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d10e      	bne.n	80048f8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f832 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e028      	b.n	800494a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b04      	cmp	r3, #4
 8004904:	d10e      	bne.n	8004924 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f81c 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e012      	b.n	800494a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4613      	mov	r3, r2
 8004960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	e0a9      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800496a:	f000 80a5 	beq.w	8004ab8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fc fac1 	bl	8000ef4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <UART_WaitOnFlagUntilTimeout+0x32>
 800497e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004980:	2b00      	cmp	r3, #0
 8004982:	d140      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004998:	667b      	str	r3, [r7, #100]	; 0x64
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e6      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	663b      	str	r3, [r7, #96]	; 0x60
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e5      	bne.n	80049b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e069      	b.n	8004ada <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d051      	beq.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a22:	d149      	bne.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e6      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a80:	623a      	str	r2, [r7, #32]
 8004a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	69f9      	ldr	r1, [r7, #28]
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e010      	b.n	8004ada <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	f43f af46 	beq.w	8004964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3770      	adds	r7, #112	; 0x70
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e027      	b.n	8004b48 <HAL_UARTEx_DisableFifoMode+0x66>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0201 	bic.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e02d      	b.n	8004bc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2224      	movs	r2, #36	; 0x24
 8004b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f850 	bl	8004c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e02d      	b.n	8004c42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2224      	movs	r2, #36	; 0x24
 8004bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f812 	bl	8004c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d108      	bne.n	8004c6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c6c:	e031      	b.n	8004cd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c6e:	2308      	movs	r3, #8
 8004c70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c72:	2308      	movs	r3, #8
 8004c74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	0e5b      	lsrs	r3, r3, #25
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	0f5b      	lsrs	r3, r3, #29
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c96:	7bbb      	ldrb	r3, [r7, #14]
 8004c98:	7b3a      	ldrb	r2, [r7, #12]
 8004c9a:	4910      	ldr	r1, [pc, #64]	; (8004cdc <UARTEx_SetNbDataToProcess+0x90>)
 8004c9c:	5c8a      	ldrb	r2, [r1, r2]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ca2:	7b3a      	ldrb	r2, [r7, #12]
 8004ca4:	490e      	ldr	r1, [pc, #56]	; (8004ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8004ca6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ca8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	7b7a      	ldrb	r2, [r7, #13]
 8004cb8:	4908      	ldr	r1, [pc, #32]	; (8004cdc <UARTEx_SetNbDataToProcess+0x90>)
 8004cba:	5c8a      	ldrb	r2, [r1, r2]
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cc0:	7b7a      	ldrb	r2, [r7, #13]
 8004cc2:	4907      	ldr	r1, [pc, #28]	; (8004ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8004cc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	08007a40 	.word	0x08007a40
 8004ce0:	08007a48 	.word	0x08007a48

08004ce4 <calendar_init>:
 * this module.
 *
 * Note: will not reinitialize/reset if already initialized.
 */
CalendarStatus calendar_init(RTC_HandleTypeDef* hrtc)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	// check for pointer to initialized RTC handle
	if (hrtc != NULL && hrtc->Instance != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d015      	beq.n	8004d1e <calendar_init+0x3a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <calendar_init+0x3a>
	{
		// initialize only if not already initialized
		if (!_isInit)
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <calendar_init+0x44>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f083 0301 	eor.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <calendar_init+0x36>
		{
			// pass pointer to alarm control
			rtcCalendarControl_init(hrtc);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fbd5 	bl	80054b8 <rtcCalendarControl_init>

			// initialize the calendar
			eventSLL_reset(&_eventQueue);
 8004d0e:	4807      	ldr	r0, [pc, #28]	; (8004d2c <calendar_init+0x48>)
 8004d10:	f000 f950 	bl	8004fb4 <eventSLL_reset>

			// set init flag
			_isInit = true;
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <calendar_init+0x44>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
		}

		return CALENDAR_OKAY;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <calendar_init+0x3c>
	}

	// module already initialized
	else
	{
		return CALENDAR_PARAMETER_ERROR;
 8004d1e:	2301      	movs	r3, #1
	}
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	2000019c 	.word	0x2000019c
 8004d2c:	200001a0 	.word	0x200001a0

08004d30 <calendar_startScheduler>:
 * and sets RTC Alarm A for the next event transition (start or end of event).
 * Executes start of event callback if starting within an event.  Ignores past
 * events.
 */
CalendarStatus calendar_startScheduler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	// if the module has been initialized
	if (_isInit)
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <calendar_startScheduler+0x34>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00f      	beq.n	8004d5c <calendar_startScheduler+0x2c>
	{
		// only start if the calendar has been paused
		if (!_isRunning)
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <calendar_startScheduler+0x38>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f083 0301 	eor.w	r3, r3, #1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <calendar_startScheduler+0x28>
		{
			_update();
 8004d4a:	f000 f8bf 	bl	8004ecc <_update>

			// set is running flag
			_isRunning = true;
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <calendar_startScheduler+0x38>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]

			return CALENDAR_OKAY;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e002      	b.n	8004d5e <calendar_startScheduler+0x2e>
		}

		// report that the calendar is already running
		else
		{
			return CALENDAR_RUNNING;
 8004d58:	2305      	movs	r3, #5
 8004d5a:	e000      	b.n	8004d5e <calendar_startScheduler+0x2e>
	}

	// module is not initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004d5c:	2302      	movs	r3, #2
	}
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	2000019c 	.word	0x2000019c
 8004d68:	2000019d 	.word	0x2000019d

08004d6c <calendar_setDateTime>:
/* calendar_setDateTime
 *
 * Set the date/time within the RTC.
 */
CalendarStatus calendar_setDateTime(const DateTime dateTime)
{
 8004d6c:	b5b0      	push	{r4, r5, r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	463b      	mov	r3, r7
 8004d74:	e883 0003 	stmia.w	r3, {r0, r1}
	// if the module has been initialized
	if (_isInit)
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <calendar_setDateTime+0x4c>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d016      	beq.n	8004dae <calendar_setDateTime+0x42>
	{
		// if the calendar is paused
		if (!_isRunning)
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <calendar_setDateTime+0x50>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f083 0301 	eor.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <calendar_setDateTime+0x3e>
		{
			// set the date and time in the RTC
			rtcCalendarControl_setDateTime(dateTime.year, dateTime.month, dateTime.day,
 8004d8e:	7838      	ldrb	r0, [r7, #0]
 8004d90:	7879      	ldrb	r1, [r7, #1]
 8004d92:	78bc      	ldrb	r4, [r7, #2]
 8004d94:	78fd      	ldrb	r5, [r7, #3]
 8004d96:	793b      	ldrb	r3, [r7, #4]
 8004d98:	797a      	ldrb	r2, [r7, #5]
 8004d9a:	9201      	str	r2, [sp, #4]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	462b      	mov	r3, r5
 8004da0:	4622      	mov	r2, r4
 8004da2:	f000 fba3 	bl	80054ec <rtcCalendarControl_setDateTime>
					dateTime.hour, dateTime.minute, dateTime.second);

			return CALENDAR_OKAY;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e002      	b.n	8004db0 <calendar_setDateTime+0x44>
		}

		else
		{
			return CALENDAR_RUNNING;
 8004daa:	2305      	movs	r3, #5
 8004dac:	e000      	b.n	8004db0 <calendar_setDateTime+0x44>
	}

	// if the module has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004dae:	2302      	movs	r3, #2
	}
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bdb0      	pop	{r4, r5, r7, pc}
 8004db8:	2000019c 	.word	0x2000019c
 8004dbc:	2000019d 	.word	0x2000019d

08004dc0 <calendar_getDateTime>:
/* calendar_getDateTime
 *
 * Get the date/time within the RTC.
 */
CalendarStatus calendar_getDateTime(DateTime* const dateTime)
{
 8004dc0:	b5b0      	push	{r4, r5, r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
	// if the module is initialized
	if (_isInit)
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <calendar_getDateTime+0x40>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <calendar_getDateTime+0x36>
	{
		// get the date and time in the RTC
		rtcCalendarControl_getDateTime(&(dateTime->year), &(dateTime->month),
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1c59      	adds	r1, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	1c9c      	adds	r4, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	1cdd      	adds	r5, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	3205      	adds	r2, #5
 8004de6:	9201      	str	r2, [sp, #4]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462b      	mov	r3, r5
 8004dec:	4622      	mov	r2, r4
 8004dee:	f000 fc53 	bl	8005698 <rtcCalendarControl_getDateTime>
				&(dateTime->day), &(dateTime->hour), &(dateTime->minute),
				&(dateTime->second));

		return CALENDAR_OKAY;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <calendar_getDateTime+0x38>
	}

	// the module has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004df6:	2302      	movs	r3, #2
	}
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004e00:	2000019c 	.word	0x2000019c

08004e04 <calendar_addEvent>:
/* calendar_addEvent
 *
 * Add an event to the calendar's event linked list.
 */
CalendarStatus calendar_addEvent(const struct CalendarEvent event)
{
 8004e04:	b084      	sub	sp, #16
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af02      	add	r7, sp, #8
 8004e0c:	f107 0c08 	add.w	ip, r7, #8
 8004e10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// add only if the calendar has been initialized
	if (_isInit)
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <calendar_addEvent+0x60>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01c      	beq.n	8004e56 <calendar_addEvent+0x52>
	{
		// if the calendar is paused
		if (!_isRunning)
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <calendar_addEvent+0x64>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f083 0301 	eor.w	r3, r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d013      	beq.n	8004e52 <calendar_addEvent+0x4e>
		{
			// attempt to add event and report success/failure
			if (eventSLL_insert(&_eventQueue, event))
 8004e2a:	466a      	mov	r2, sp
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e34:	e882 0003 	stmia.w	r2, {r0, r1}
 8004e38:	f107 0308 	add.w	r3, r7, #8
 8004e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e3e:	480b      	ldr	r0, [pc, #44]	; (8004e6c <calendar_addEvent+0x68>)
 8004e40:	f000 f909 	bl	8005056 <eventSLL_insert>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <calendar_addEvent+0x4a>
			{
				return CALENDAR_OKAY;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e004      	b.n	8004e58 <calendar_addEvent+0x54>
			}
			else
			{
				return CALENDAR_FULL;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e002      	b.n	8004e58 <calendar_addEvent+0x54>
			}
		}

		else
		{
			return CALENDAR_RUNNING;
 8004e52:	2305      	movs	r3, #5
 8004e54:	e000      	b.n	8004e58 <calendar_addEvent+0x54>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004e56:	2302      	movs	r3, #2
	}
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e60:	b004      	add	sp, #16
 8004e62:	4770      	bx	lr
 8004e64:	2000019c 	.word	0x2000019c
 8004e68:	2000019d 	.word	0x2000019d
 8004e6c:	200001a0 	.word	0x200001a0

08004e70 <calendar_updateScheduler>:
 * Note:
 * 	Will not run if the module has not been initialized and if the calendar
 * 	is not running.
 */
CalendarStatus calendar_updateScheduler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
	// if the calendar module has been initialized
	if (_isInit)
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <calendar_updateScheduler+0x38>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d011      	beq.n	8004ea0 <calendar_updateScheduler+0x30>
	{
		// only update if the calendar is running
		if (_isRunning)
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <calendar_updateScheduler+0x3c>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <calendar_updateScheduler+0x2c>
		{
			// only update if an alarm has fired
			if (_alarmAFired) {
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <calendar_updateScheduler+0x40>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <calendar_updateScheduler+0x28>
				// update the calendar's state
				_update();
 8004e8e:	f000 f81d 	bl	8004ecc <_update>

				// reset alarm fired flag
				_alarmAFired = false;
 8004e92:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <calendar_updateScheduler+0x40>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
			}

			return CALENDAR_OKAY;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e002      	b.n	8004ea2 <calendar_updateScheduler+0x32>
		}

		// report that the calendar is paused
		else
		{
			return CALENDAR_PAUSED;
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	e000      	b.n	8004ea2 <calendar_updateScheduler+0x32>
	}

	// the module is not initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004ea0:	2302      	movs	r3, #2
	}
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000019c 	.word	0x2000019c
 8004eac:	2000019d 	.word	0x2000019d
 8004eb0:	2000019e 	.word	0x2000019e

08004eb4 <calendar_AlarmA_ISR>:
 *
 * RTC Alarm A interrupt service routine.  To only be called within the
 * RTC Alarm A ISR (HAL_RTC_AlarmAEventCallback()).
 */
void calendar_AlarmA_ISR(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <calendar_AlarmA_ISR+0x14>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000019e 	.word	0x2000019e

08004ecc <_update>:
 * appropriately.
 *
 * Also handles reseting the alarm for events that occur in a following month/year.
 */
void _update(void)
{
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af02      	add	r7, sp, #8
	DateTime nextAlarm;
	DateTime now;
	int prevInProgress;

	// get calendar alarm for next alarm in event list relative to now
	rtcCalendarControl_getDateTime(&(now.year), &(now.month), &(now.day),
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	1cdc      	adds	r4, r3, #3
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	1c59      	adds	r1, r3, #1
 8004ede:	1d38      	adds	r0, r7, #4
 8004ee0:	1d3b      	adds	r3, r7, #4
 8004ee2:	3305      	adds	r3, #5
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	3304      	adds	r3, #4
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	4623      	mov	r3, r4
 8004eee:	f000 fbd3 	bl	8005698 <rtcCalendarControl_getDateTime>
			&(now.hour), &(now.minute), &(now.second));

	// store the currently running event to test index to check if an
	// event change has occurred
	prevInProgress = _eventQueue.inProgress;
 8004ef2:	4b2f      	ldr	r3, [pc, #188]	; (8004fb0 <_update+0xe4>)
 8004ef4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004ef8:	617b      	str	r3, [r7, #20]

	// if there is an alarm to set upon updating the events queue
	if (eventSLL_getNextAlarm(&_eventQueue, now, &nextAlarm))
 8004efa:	f107 030c 	add.w	r3, r7, #12
 8004efe:	1d3a      	adds	r2, r7, #4
 8004f00:	ca06      	ldmia	r2, {r1, r2}
 8004f02:	482b      	ldr	r0, [pc, #172]	; (8004fb0 <_update+0xe4>)
 8004f04:	f000 f9b2 	bl	800526c <eventSLL_getNextAlarm>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <_update+0x50>
	{
		// set Alarm A
		rtcCalendarControl_setAlarm_A(nextAlarm.day, nextAlarm.hour,
 8004f0e:	7bb8      	ldrb	r0, [r7, #14]
 8004f10:	7bf9      	ldrb	r1, [r7, #15]
 8004f12:	7c3a      	ldrb	r2, [r7, #16]
 8004f14:	7c7b      	ldrb	r3, [r7, #17]
 8004f16:	f000 fc53 	bl	80057c0 <rtcCalendarControl_setAlarm_A>
 8004f1a:	e001      	b.n	8004f20 <_update+0x54>
	}

	// if there is no alarm to set, disable the alarm
	else
	{
		rtcCalendarControl_diableAlarm_A();
 8004f1c:	f000 fcf2 	bl	8005904 <rtcCalendarControl_diableAlarm_A>
	}

	// if exiting an event
	if (_eventQueue.inProgress != prevInProgress
 8004f20:	4b23      	ldr	r3, [pc, #140]	; (8004fb0 <_update+0xe4>)
 8004f22:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d018      	beq.n	8004f5e <_update+0x92>
			&& prevInProgress != EVENTS_SLL_NO_EVENT)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f32:	d014      	beq.n	8004f5e <_update+0x92>
	{
		// call end event callback for exited event (if registered)
		if (_eventQueue.events[prevInProgress].event.end_callback != NULL)
 8004f34:	491e      	ldr	r1, [pc, #120]	; (8004fb0 <_update+0xe4>)
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	3310      	adds	r3, #16
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <_update+0x92>
			(*_eventQueue.events[prevInProgress].event.end_callback)();
 8004f4a:	4919      	ldr	r1, [pc, #100]	; (8004fb0 <_update+0xe4>)
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	3310      	adds	r3, #16
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4798      	blx	r3
	}

	// if entering an event
	if (_eventQueue.inProgress != EVENTS_SLL_NO_EVENT
 8004f5e:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <_update+0xe4>)
 8004f60:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f68:	d01e      	beq.n	8004fa8 <_update+0xdc>
			&& _eventQueue.inProgress != prevInProgress)
 8004f6a:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <_update+0xe4>)
 8004f6c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d018      	beq.n	8004fa8 <_update+0xdc>
	{
		// call start event callback for entered event (if registered)
		if (_eventQueue.events[_eventQueue.inProgress].event.start_callback != NULL)
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <_update+0xe4>)
 8004f78:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 8004f7c:	490c      	ldr	r1, [pc, #48]	; (8004fb0 <_update+0xe4>)
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	330c      	adds	r3, #12
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <_update+0xdc>
			(*_eventQueue.events[_eventQueue.inProgress].event.start_callback)();
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <_update+0xe4>)
 8004f92:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 8004f96:	4906      	ldr	r1, [pc, #24]	; (8004fb0 <_update+0xe4>)
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4798      	blx	r3
	}
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}
 8004fb0:	200001a0 	.word	0x200001a0

08004fb4 <eventSLL_reset>:
/* eventSLL_reset
 *
 * Resets operation variables and clears events storage.
 */
bool eventSLL_reset(Event_SLL* const sll)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	if (sll != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d044      	beq.n	800504c <eventSLL_reset+0x98>
	{
		int idx;

		sll->inProgress = EVENTS_SLL_NO_EVENT;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fc8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
		sll->freeHead = 0;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
		sll->usedHead = EVENTS_SLL_NO_EVENT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fda:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
		sll->count = 0;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

		memset(sll->events, 0, sizeof(struct EventSLL_Node) * MAX_NUM_EVENTS);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f44f 7260 	mov.w	r2, #896	; 0x380
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 fafc 	bl	80065ec <memset>
		for (idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e018      	b.n	800502c <eventSLL_reset+0x78>
		{
			sll->events[idx].id = EVENTS_SLL_NO_EVENT;
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	3314      	adds	r3, #20
 800500a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800500e:	601a      	str	r2, [r3, #0]
			sll->events[idx].next = idx + 1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4403      	add	r3, r0
 8005022:	3318      	adds	r3, #24
 8005024:	6019      	str	r1, [r3, #0]
		for (idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b1e      	cmp	r3, #30
 8005030:	dde3      	ble.n	8004ffa <eventSLL_reset+0x46>
		}
		sll->events[idx].next = EVENTS_SLL_NO_EVENT;
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	3318      	adds	r3, #24
 8005042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005046:	601a      	str	r2, [r3, #0]

		return true;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <eventSLL_reset+0x9a>
	}

	else
	{
		return false;
 800504c:	2300      	movs	r3, #0
	}
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <eventSLL_insert>:
/* eventSLL_insert
 *
 * Inserts an event while maintaining monotonic ordering on event start times.
 */
bool eventSLL_insert(Event_SLL* const sll, const struct CalendarEvent event)
{
 8005056:	b084      	sub	sp, #16
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005064:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int prevToInsertIdx;
	int toInsertIdx;
	int tempIdx;

	// if list is not full
	if (sll->count < MAX_NUM_EVENTS)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 800506e:	2b1f      	cmp	r3, #31
 8005070:	f200 80f4 	bhi.w	800525c <eventSLL_insert+0x206>
	{
		// if the list is empty, insert at beginning
		if (sll->usedHead == EVENTS_SLL_NO_EVENT)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507e:	d123      	bne.n	80050c8 <eventSLL_insert+0x72>
		{
			// set used and free heads
			sll->usedHead = sll->freeHead;							// point head of used to head of free
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			sll->freeHead = sll->events[sll->freeHead].next;		// point head of free to next of free
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3318      	adds	r3, #24
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
			toInsertIdx = sll->usedHead;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050ae:	613b      	str	r3, [r7, #16]
			sll->events[toInsertIdx].next = EVENTS_SLL_NO_EVENT;	// point head of used to none
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3318      	adds	r3, #24
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	e0a9      	b.n	800521c <eventSLL_insert+0x1c6>
		}

		// the list is not empty
		// iterate over list and insert where appropriate for monotonic ordering
		else if (sll->count < MAX_NUM_EVENTS)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 80050ce:	2b1f      	cmp	r3, #31
 80050d0:	f200 80a4 	bhi.w	800521c <eventSLL_insert+0x1c6>
		{
			// if inserting at start
			if (_compareDateTime(event.start, sll->events[sll->usedHead].event.start) < 0)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	cb0c      	ldmia	r3, {r2, r3}
 80050e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80050ec:	c903      	ldmia	r1, {r0, r1}
 80050ee:	f000 f990 	bl	8005412 <_compareDateTime>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	da2e      	bge.n	8005156 <eventSLL_insert+0x100>
			{
				// take from head of free nodes and move to start of used nodes
				tempIdx = sll->usedHead;							// store head of used in temp
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050fe:	60fb      	str	r3, [r7, #12]
				sll->events[sll->usedHead].next = sll->freeHead;	// point head of used to head of free
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4403      	add	r3, r0
 8005118:	3318      	adds	r3, #24
 800511a:	6019      	str	r1, [r3, #0]
				sll->freeHead = sll->events[sll->freeHead].next;	// point head of free to next of free
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	3318      	adds	r3, #24
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
				toInsertIdx = sll->usedHead;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800513e:	613b      	str	r3, [r7, #16]
				sll->events[toInsertIdx].next = tempIdx;			// point head of used to stored in temp
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3318      	adds	r3, #24
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e062      	b.n	800521c <eventSLL_insert+0x1c6>

			// if inserting not at the start
			else
			{
				// find node previous to where to insert
				prevToInsertIdx = sll->usedHead;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800515c:	617b      	str	r3, [r7, #20]
				// while insert event's start time is less than each event's start time
				// already in the list, iterate list
				// if the start times are equal, then inserting after the current iteration
				// does not care about end times of events
				while (_compareDateTime(event.start, sll->events[prevToInsertIdx].event.start) >= 0
 800515e:	e009      	b.n	8005174 <eventSLL_insert+0x11e>
						&& sll->events[prevToInsertIdx].next != EVENTS_SLL_NO_EVENT)
					prevToInsertIdx = sll->events[prevToInsertIdx].next;
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3318      	adds	r3, #24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	617b      	str	r3, [r7, #20]
				while (_compareDateTime(event.start, sll->events[prevToInsertIdx].event.start) >= 0
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	cb0c      	ldmia	r3, {r2, r3}
 8005184:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005188:	c903      	ldmia	r1, {r0, r1}
 800518a:	f000 f942 	bl	8005412 <_compareDateTime>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	db0b      	blt.n	80051ac <eventSLL_insert+0x156>
						&& sll->events[prevToInsertIdx].next != EVENTS_SLL_NO_EVENT)
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	3318      	adds	r3, #24
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051aa:	d1d9      	bne.n	8005160 <eventSLL_insert+0x10a>

				// perform insert
				tempIdx = sll->events[prevToInsertIdx].next;		// store previous to insert in temp
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	3318      	adds	r3, #24
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
				sll->events[prevToInsertIdx].next = sll->freeHead;	// point next to insert to head of free
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4403      	add	r3, r0
 80051d4:	3318      	adds	r3, #24
 80051d6:	6019      	str	r1, [r3, #0]
				sll->freeHead = sll->events[sll->freeHead].next;	// point head of free to next of free
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3318      	adds	r3, #24
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
				toInsertIdx = sll->events[prevToInsertIdx].next;
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3318      	adds	r3, #24
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	613b      	str	r3, [r7, #16]
				sll->events[toInsertIdx].next = tempIdx;			// point new node to stored in temp
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	3318      	adds	r3, #24
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	601a      	str	r2, [r3, #0]
			}
		}

		// copy event into new node
		_copyEvent(&(sll->events[toInsertIdx].event), &event);
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f88a 	bl	800534a <_copyEvent>

		// set ID
		sll->events[toInsertIdx].id = toInsertIdx;
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	3314      	adds	r3, #20
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	601a      	str	r2, [r3, #0]

		// increment count
		(sll->count)++;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

		return true;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <eventSLL_insert+0x208>
	}

	// if the list is full
	else
	{
		return false;
 800525c:	2300      	movs	r3, #0
	}
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005268:	b004      	add	sp, #16
 800526a:	4770      	bx	lr

0800526c <eventSLL_getNextAlarm>:
 *
 * Finds the next alarm to set to a given DateTime.  This will be either the start
 * or end alarm for an event.
 */
bool eventSLL_getNextAlarm(Event_SLL* const sll, const DateTime dateTime, DateTime* const alarm)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	1d38      	adds	r0, r7, #4
 8005276:	e880 0006 	stmia.w	r0, {r1, r2}
 800527a:	603b      	str	r3, [r7, #0]
	int idx;

	idx = sll->usedHead;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005282:	617b      	str	r3, [r7, #20]
	while (idx != EVENTS_SLL_NO_EVENT)
 8005284:	e053      	b.n	800532e <eventSLL_getNextAlarm+0xc2>
	{
		// if the current iteration's end time has past
		// mark as past
		if (_compareDateTime(dateTime, sll->events[idx].event.end) >= 0)
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4613      	mov	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	3306      	adds	r3, #6
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4611      	mov	r1, r2
 800529a:	889a      	ldrh	r2, [r3, #4]
 800529c:	2300      	movs	r3, #0
 800529e:	f362 030f 	bfi	r3, r2, #0, #16
 80052a2:	460a      	mov	r2, r1
 80052a4:	1d39      	adds	r1, r7, #4
 80052a6:	c903      	ldmia	r1, {r0, r1}
 80052a8:	f000 f8b3 	bl	8005412 <_compareDateTime>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	db0a      	blt.n	80052c8 <eventSLL_getNextAlarm+0x5c>
		{
			// go to next event
			idx = sll->events[idx].next;
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4613      	mov	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3318      	adds	r3, #24
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e032      	b.n	800532e <eventSLL_getNextAlarm+0xc2>
		}

		// now is within event
		// return alarm for end of event
		else if (_compareDateTime(dateTime, sll->events[idx].event.start) >= 0)
 80052c8:	68f9      	ldr	r1, [r7, #12]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	cb0c      	ldmia	r3, {r2, r3}
 80052d8:	1d39      	adds	r1, r7, #4
 80052da:	c903      	ldmia	r1, {r0, r1}
 80052dc:	f000 f899 	bl	8005412 <_compareDateTime>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	db11      	blt.n	800530a <eventSLL_getNextAlarm+0x9e>
		{
			// set sll inProgress pointer to this event and exit
			sll->inProgress = idx;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
			_copyDateTime(alarm, &(sll->events[idx].event.end));
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	3306      	adds	r3, #6
 80052fe:	4619      	mov	r1, r3
 8005300:	6838      	ldr	r0, [r7, #0]
 8005302:	f000 f864 	bl	80053ce <_copyDateTime>
			return true;
 8005306:	2301      	movs	r3, #1
 8005308:	e01b      	b.n	8005342 <eventSLL_getNextAlarm+0xd6>

		// event is in the future (next)
		// return alarm for start of event
		else
		{
			sll->inProgress = EVENTS_SLL_NO_EVENT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005310:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
			_copyDateTime(alarm, &(sll->events[idx].event.start));
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4613      	mov	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	4619      	mov	r1, r3
 8005324:	6838      	ldr	r0, [r7, #0]
 8005326:	f000 f852 	bl	80053ce <_copyDateTime>
			return true;
 800532a:	2301      	movs	r3, #1
 800532c:	e009      	b.n	8005342 <eventSLL_getNextAlarm+0xd6>
	while (idx != EVENTS_SLL_NO_EVENT)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005334:	d1a7      	bne.n	8005286 <eventSLL_getNextAlarm+0x1a>
		}
	}

	// no alarms to set
	sll->inProgress = EVENTS_SLL_NO_EVENT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800533c:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	return false;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <_copyEvent>:
/* _copyEvent
 *
 * Copy the contents of one CalenderEvent into another.
 */
void _copyEvent(struct CalendarEvent* const to, const struct CalendarEvent* const from)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	785a      	ldrb	r2, [r3, #1]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	789a      	ldrb	r2, [r3, #2]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	78da      	ldrb	r2, [r3, #3]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	791a      	ldrb	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	795a      	ldrb	r2, [r3, #5]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]
	to->end.year = from->end.year;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	799a      	ldrb	r2, [r3, #6]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	719a      	strb	r2, [r3, #6]
	to->end.month = from->end.month;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	79da      	ldrb	r2, [r3, #7]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	71da      	strb	r2, [r3, #7]
	to->end.day = from->end.day;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	7a1a      	ldrb	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	721a      	strb	r2, [r3, #8]
	to->end.hour = from->end.hour;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	7a5a      	ldrb	r2, [r3, #9]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	725a      	strb	r2, [r3, #9]
	to->end.minute = from->end.minute;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	7a9a      	ldrb	r2, [r3, #10]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	729a      	strb	r2, [r3, #10]
	to->end.second = from->end.second;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	7ada      	ldrb	r2, [r3, #11]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	72da      	strb	r2, [r3, #11]
	to->end_callback = from->end_callback;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	611a      	str	r2, [r3, #16]
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr

080053ce <_copyDateTime>:
/* _copyDateTime
 *
 * Copy the contents of one DateTime into another.
 */
void _copyDateTime(DateTime* const to, DateTime* const from)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
	to->year = from->year;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781a      	ldrb	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	701a      	strb	r2, [r3, #0]
	to->month = from->month;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	785a      	ldrb	r2, [r3, #1]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	705a      	strb	r2, [r3, #1]
	to->day = from->day;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	789a      	ldrb	r2, [r3, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	709a      	strb	r2, [r3, #2]
	to->hour = from->hour;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	78da      	ldrb	r2, [r3, #3]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	70da      	strb	r2, [r3, #3]
	to->minute = from->minute;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	791a      	ldrb	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	711a      	strb	r2, [r3, #4]
	to->second = from->second;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	795a      	ldrb	r2, [r3, #5]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	715a      	strb	r2, [r3, #5]
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <_compareDateTime>:
 * Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t _compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 8005412:	b590      	push	{r4, r7, lr}
 8005414:	b087      	sub	sp, #28
 8005416:	af00      	add	r7, sp, #0
 8005418:	f107 0408 	add.w	r4, r7, #8
 800541c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005420:	4639      	mov	r1, r7
 8005422:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = _dateTimeToSeconds(dateTime_1);
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800542e:	f000 f80f 	bl	8005450 <_dateTimeToSeconds>
 8005432:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = _dateTimeToSeconds(dateTime_2);
 8005434:	463b      	mov	r3, r7
 8005436:	e893 0003 	ldmia.w	r3, {r0, r1}
 800543a:	f000 f809 	bl	8005450 <_dateTimeToSeconds>
 800543e:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
}
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd90      	pop	{r4, r7, pc}
	...

08005450 <_dateTimeToSeconds>:
 *
 * Note: assumes 30 days in a month and no leap years, it is not needed for the
 * calculation because they are used for relative comparisons, not absolute values.
 */
uint32_t _dateTimeToSeconds(DateTime dateTime)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	463b      	mov	r3, r7
 8005458:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds
	return (dateTime.second
 800545c:	797b      	ldrb	r3, [r7, #5]
 800545e:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 8005460:	793b      	ldrb	r3, [r7, #4]
 8005462:	461a      	mov	r2, r3
 8005464:	4613      	mov	r3, r2
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	4619      	mov	r1, r3
 8005472:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 800547c:	78bb      	ldrb	r3, [r7, #2]
 800547e:	3b01      	subs	r3, #1
 8005480:	490a      	ldr	r1, [pc, #40]	; (80054ac <_dateTimeToSeconds+0x5c>)
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8005488:	787b      	ldrb	r3, [r7, #1]
 800548a:	3b01      	subs	r3, #1
 800548c:	4908      	ldr	r1, [pc, #32]	; (80054b0 <_dateTimeToSeconds+0x60>)
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 8005494:	783b      	ldrb	r3, [r7, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <_dateTimeToSeconds+0x64>)
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	4413      	add	r3, r2
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	00015180 	.word	0x00015180
 80054b0:	00278d00 	.word	0x00278d00
 80054b4:	01da9c00 	.word	0x01da9c00

080054b8 <rtcCalendarControl_init>:
 * Initializes the module and stores a pointer to the HAL RTC handle.
 *
 * Note: will not reinitialize if already initialized.
 */
RtcUtilsStatus rtcCalendarControl_init(RTC_HandleTypeDef* const hrtc)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	// if an initialized RTC handle has been passed
	if (!IS_RTC_INIT(_rtc_handle))
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <rtcCalendarControl_init+0x30>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <rtcCalendarControl_init+0x1a>
 80054c8:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <rtcCalendarControl_init+0x30>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <rtcCalendarControl_init+0x24>
	{
		_rtc_handle = hrtc;		// store handle pointer
 80054d2:	4a05      	ldr	r2, [pc, #20]	; (80054e8 <rtcCalendarControl_init+0x30>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6013      	str	r3, [r2, #0]
		return RTC_CALENDAR_CONTROL_OKAY;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <rtcCalendarControl_init+0x26>
	}

	// an invalid handle or uninitialized handle passed
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 80054dc:	2301      	movs	r3, #1
	}
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	20000530 	.word	0x20000530

080054ec <rtcCalendarControl_setDateTime>:
 * Note: does not check if parameters are within correct range.
 */
RtcUtilsStatus rtcCalendarControl_setDateTime(const uint8_t year, const uint8_t month,
		const uint8_t day, const uint8_t hour, const uint8_t minute,
		const uint8_t second)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	71fb      	strb	r3, [r7, #7]
 80054fe:	4603      	mov	r3, r0
 8005500:	71bb      	strb	r3, [r7, #6]
 8005502:	460b      	mov	r3, r1
 8005504:	717b      	strb	r3, [r7, #5]
 8005506:	4613      	mov	r3, r2
 8005508:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	// if module has been initialized
	if (IS_RTC_INIT(_rtc_handle))
 800550a:	4b61      	ldr	r3, [pc, #388]	; (8005690 <rtcCalendarControl_setDateTime+0x1a4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80b8 	beq.w	8005684 <rtcCalendarControl_setDateTime+0x198>
 8005514:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <rtcCalendarControl_setDateTime+0x1a4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80b2 	beq.w	8005684 <rtcCalendarControl_setDateTime+0x198>
	{
		// convert from decimal to BCD
		date.Year = ((year/10) << 4) | (year % 10);
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	4a5c      	ldr	r2, [pc, #368]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	b258      	sxtb	r0, r3
 8005530:	79fa      	ldrb	r2, [r7, #7]
 8005532:	4b58      	ldr	r3, [pc, #352]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	08d9      	lsrs	r1, r3, #3
 800553a:	460b      	mov	r3, r1
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	b2db      	uxtb	r3, r3
 8005546:	b25b      	sxtb	r3, r3
 8005548:	4303      	orrs	r3, r0
 800554a:	b25b      	sxtb	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	77fb      	strb	r3, [r7, #31]
		date.Month = ((month/10) << 4) | (month % 10);
 8005550:	79bb      	ldrb	r3, [r7, #6]
 8005552:	4a50      	ldr	r2, [pc, #320]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	08db      	lsrs	r3, r3, #3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	b258      	sxtb	r0, r3
 8005560:	79ba      	ldrb	r2, [r7, #6]
 8005562:	4b4c      	ldr	r3, [pc, #304]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 8005564:	fba3 1302 	umull	r1, r3, r3, r2
 8005568:	08d9      	lsrs	r1, r3, #3
 800556a:	460b      	mov	r3, r1
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	b25b      	sxtb	r3, r3
 8005578:	4303      	orrs	r3, r0
 800557a:	b25b      	sxtb	r3, r3
 800557c:	b2db      	uxtb	r3, r3
 800557e:	777b      	strb	r3, [r7, #29]
		date.Date = ((day/10) << 4) | (day % 10);
 8005580:	797b      	ldrb	r3, [r7, #5]
 8005582:	4a44      	ldr	r2, [pc, #272]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	b258      	sxtb	r0, r3
 8005590:	797a      	ldrb	r2, [r7, #5]
 8005592:	4b40      	ldr	r3, [pc, #256]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 8005594:	fba3 1302 	umull	r1, r3, r3, r2
 8005598:	08d9      	lsrs	r1, r3, #3
 800559a:	460b      	mov	r3, r1
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	b25b      	sxtb	r3, r3
 80055a8:	4303      	orrs	r3, r0
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	77bb      	strb	r3, [r7, #30]
		date.WeekDay = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	773b      	strb	r3, [r7, #28]
		time.Hours = ((hour/10) << 4) | (hour % 10);
 80055b4:	793b      	ldrb	r3, [r7, #4]
 80055b6:	4a37      	ldr	r2, [pc, #220]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 80055b8:	fba2 2303 	umull	r2, r3, r2, r3
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	b258      	sxtb	r0, r3
 80055c4:	793a      	ldrb	r2, [r7, #4]
 80055c6:	4b33      	ldr	r3, [pc, #204]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	08d9      	lsrs	r1, r3, #3
 80055ce:	460b      	mov	r3, r1
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	b25b      	sxtb	r3, r3
 80055dc:	4303      	orrs	r3, r0
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	723b      	strb	r3, [r7, #8]
		time.Minutes = ((minute/10) << 4) | (minute % 10);
 80055e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	b258      	sxtb	r0, r3
 80055f6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 80055fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005600:	08d9      	lsrs	r1, r3, #3
 8005602:	460b      	mov	r3, r1
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	b2db      	uxtb	r3, r3
 800560e:	b25b      	sxtb	r3, r3
 8005610:	4303      	orrs	r3, r0
 8005612:	b25b      	sxtb	r3, r3
 8005614:	b2db      	uxtb	r3, r3
 8005616:	727b      	strb	r3, [r7, #9]
		time.Seconds = ((second/10) << 4) | (second % 10);
 8005618:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	08db      	lsrs	r3, r3, #3
 8005624:	b2db      	uxtb	r3, r3
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	b258      	sxtb	r0, r3
 800562a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800562e:	4b19      	ldr	r3, [pc, #100]	; (8005694 <rtcCalendarControl_setDateTime+0x1a8>)
 8005630:	fba3 1302 	umull	r1, r3, r3, r2
 8005634:	08d9      	lsrs	r1, r3, #3
 8005636:	460b      	mov	r3, r1
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	b25b      	sxtb	r3, r3
 8005644:	4303      	orrs	r3, r0
 8005646:	b25b      	sxtb	r3, r3
 8005648:	b2db      	uxtb	r3, r3
 800564a:	72bb      	strb	r3, [r7, #10]

		// Set the date.
		if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT_BCD) != HAL_OK) {
 800564c:	4b10      	ldr	r3, [pc, #64]	; (8005690 <rtcCalendarControl_setDateTime+0x1a4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f107 011c 	add.w	r1, r7, #28
 8005654:	2201      	movs	r2, #1
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe f91c 	bl	8003894 <HAL_RTC_SetDate>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <rtcCalendarControl_setDateTime+0x17a>
			// HAL timeout
			return RTC_CALENDAR_CONTROL_TIMEOUT;
 8005662:	2302      	movs	r3, #2
 8005664:	e00f      	b.n	8005686 <rtcCalendarControl_setDateTime+0x19a>
		}

		// Set the time.
		if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT_BCD) != HAL_OK) {
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <rtcCalendarControl_setDateTime+0x1a4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f107 0108 	add.w	r1, r7, #8
 800566e:	2201      	movs	r2, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe f811 	bl	8003698 <HAL_RTC_SetTime>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <rtcCalendarControl_setDateTime+0x194>
			// HAL timeout
			return RTC_CALENDAR_CONTROL_TIMEOUT;
 800567c:	2302      	movs	r3, #2
 800567e:	e002      	b.n	8005686 <rtcCalendarControl_setDateTime+0x19a>
		}

		return RTC_CALENDAR_CONTROL_OKAY;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <rtcCalendarControl_setDateTime+0x19a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8005684:	2301      	movs	r3, #1
	}
}
 8005686:	4618      	mov	r0, r3
 8005688:	3724      	adds	r7, #36	; 0x24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd90      	pop	{r4, r7, pc}
 800568e:	bf00      	nop
 8005690:	20000530 	.word	0x20000530
 8005694:	cccccccd 	.word	0xcccccccd

08005698 <rtcCalendarControl_getDateTime>:
 * Gets the date and time within the RTC.
 */
RtcUtilsStatus rtcCalendarControl_getDateTime(uint8_t* const year, uint8_t* const month,
		uint8_t* const day, uint8_t* const hour, uint8_t* const minute,
		uint8_t* const second)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
	RTC_TimeTypeDef time = {0};
 80056a6:	f107 0314 	add.w	r3, r7, #20
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	605a      	str	r2, [r3, #4]
 80056b0:	609a      	str	r2, [r3, #8]
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]

	// if the module has been initialized
	if (IS_RTC_INIT(_rtc_handle))
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <rtcCalendarControl_getDateTime+0x124>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d076      	beq.n	80057b0 <rtcCalendarControl_getDateTime+0x118>
 80056c2:	4b3e      	ldr	r3, [pc, #248]	; (80057bc <rtcCalendarControl_getDateTime+0x124>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d071      	beq.n	80057b0 <rtcCalendarControl_getDateTime+0x118>
	{
		// Get the time and the date.
		HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT_BCD);
 80056cc:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <rtcCalendarControl_getDateTime+0x124>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f107 0114 	add.w	r1, r7, #20
 80056d4:	2201      	movs	r2, #1
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe f87a 	bl	80037d0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT_BCD);
 80056dc:	4b37      	ldr	r3, [pc, #220]	; (80057bc <rtcCalendarControl_getDateTime+0x124>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f107 0110 	add.w	r1, r7, #16
 80056e4:	2201      	movs	r2, #1
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe f95a 	bl	80039a0 <HAL_RTC_GetDate>

		// Return through parameters
		*year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4413      	add	r3, r2
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	701a      	strb	r2, [r3, #0]
		*month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 800570c:	7c7b      	ldrb	r3, [r7, #17]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	0092      	lsls	r2, r2, #2
 8005716:	4413      	add	r3, r2
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	7c7b      	ldrb	r3, [r7, #17]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	b2db      	uxtb	r3, r3
 8005724:	4413      	add	r3, r2
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	701a      	strb	r2, [r3, #0]
		*day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 800572c:	7cbb      	ldrb	r3, [r7, #18]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	b2db      	uxtb	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	0092      	lsls	r2, r2, #2
 8005736:	4413      	add	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	7cbb      	ldrb	r3, [r7, #18]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	b2db      	uxtb	r3, r3
 8005744:	4413      	add	r3, r2
 8005746:	b2da      	uxtb	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	701a      	strb	r2, [r3, #0]
		*hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 800574c:	7d3b      	ldrb	r3, [r7, #20]
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	b2db      	uxtb	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	0092      	lsls	r2, r2, #2
 8005756:	4413      	add	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	b2da      	uxtb	r2, r3
 800575c:	7d3b      	ldrb	r3, [r7, #20]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4413      	add	r3, r2
 8005766:	b2da      	uxtb	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	701a      	strb	r2, [r3, #0]
		*minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 800576c:	7d7b      	ldrb	r3, [r7, #21]
 800576e:	091b      	lsrs	r3, r3, #4
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	4413      	add	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	b2da      	uxtb	r2, r3
 800577c:	7d7b      	ldrb	r3, [r7, #21]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	b2db      	uxtb	r3, r3
 8005784:	4413      	add	r3, r2
 8005786:	b2da      	uxtb	r2, r3
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	701a      	strb	r2, [r3, #0]
		*second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 800578c:	7dbb      	ldrb	r3, [r7, #22]
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	0092      	lsls	r2, r2, #2
 8005796:	4413      	add	r3, r2
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	b2da      	uxtb	r2, r3
 800579c:	7dbb      	ldrb	r3, [r7, #22]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	701a      	strb	r2, [r3, #0]

		return RTC_CALENDAR_CONTROL_OKAY;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <rtcCalendarControl_getDateTime+0x11a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 80057b0:	2301      	movs	r3, #1
	}
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3728      	adds	r7, #40	; 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000530 	.word	0x20000530

080057c0 <rtcCalendarControl_setAlarm_A>:
 *
 * Note: does not validate that parameters are within valid range.
 */
RtcUtilsStatus rtcCalendarControl_setAlarm_A(const uint8_t day, const uint8_t hour,
		const uint8_t minute, const uint8_t second)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b08f      	sub	sp, #60	; 0x3c
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4604      	mov	r4, r0
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4623      	mov	r3, r4
 80057d0:	71fb      	strb	r3, [r7, #7]
 80057d2:	4603      	mov	r3, r0
 80057d4:	71bb      	strb	r3, [r7, #6]
 80057d6:	460b      	mov	r3, r1
 80057d8:	717b      	strb	r3, [r7, #5]
 80057da:	4613      	mov	r3, r2
 80057dc:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	222c      	movs	r2, #44	; 0x2c
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 ff00 	bl	80065ec <memset>

  // if the module has been initialized
  if (IS_RTC_INIT(_rtc_handle))
 80057ec:	4b43      	ldr	r3, [pc, #268]	; (80058fc <rtcCalendarControl_setAlarm_A+0x13c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d07e      	beq.n	80058f2 <rtcCalendarControl_setAlarm_A+0x132>
 80057f4:	4b41      	ldr	r3, [pc, #260]	; (80058fc <rtcCalendarControl_setAlarm_A+0x13c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d079      	beq.n	80058f2 <rtcCalendarControl_setAlarm_A+0x132>
  {
	  // settings for alarm
	  // convert decimal to BCD
	  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	4a3f      	ldr	r2, [pc, #252]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	08db      	lsrs	r3, r3, #3
 8005808:	b2db      	uxtb	r3, r3
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	b258      	sxtb	r0, r3
 800580e:	79fa      	ldrb	r2, [r7, #7]
 8005810:	4b3b      	ldr	r3, [pc, #236]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 8005812:	fba3 1302 	umull	r1, r3, r3, r2
 8005816:	08d9      	lsrs	r1, r3, #3
 8005818:	460b      	mov	r3, r1
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	b2db      	uxtb	r3, r3
 8005824:	b25b      	sxtb	r3, r3
 8005826:	4303      	orrs	r3, r0
 8005828:	b25b      	sxtb	r3, r3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8005830:	79bb      	ldrb	r3, [r7, #6]
 8005832:	4a33      	ldr	r2, [pc, #204]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	b2db      	uxtb	r3, r3
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	b258      	sxtb	r0, r3
 8005840:	79ba      	ldrb	r2, [r7, #6]
 8005842:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	08d9      	lsrs	r1, r3, #3
 800584a:	460b      	mov	r3, r1
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	b25b      	sxtb	r3, r3
 8005858:	4303      	orrs	r3, r0
 800585a:	b25b      	sxtb	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	733b      	strb	r3, [r7, #12]
	  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8005860:	797b      	ldrb	r3, [r7, #5]
 8005862:	4a27      	ldr	r2, [pc, #156]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	08db      	lsrs	r3, r3, #3
 800586a:	b2db      	uxtb	r3, r3
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	b258      	sxtb	r0, r3
 8005870:	797a      	ldrb	r2, [r7, #5]
 8005872:	4b23      	ldr	r3, [pc, #140]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 8005874:	fba3 1302 	umull	r1, r3, r3, r2
 8005878:	08d9      	lsrs	r1, r3, #3
 800587a:	460b      	mov	r3, r1
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	b2db      	uxtb	r3, r3
 8005886:	b25b      	sxtb	r3, r3
 8005888:	4303      	orrs	r3, r0
 800588a:	b25b      	sxtb	r3, r3
 800588c:	b2db      	uxtb	r3, r3
 800588e:	737b      	strb	r3, [r7, #13]
	  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8005890:	793b      	ldrb	r3, [r7, #4]
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	08db      	lsrs	r3, r3, #3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	b258      	sxtb	r0, r3
 80058a0:	793a      	ldrb	r2, [r7, #4]
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <rtcCalendarControl_setAlarm_A+0x140>)
 80058a4:	fba3 1302 	umull	r1, r3, r3, r2
 80058a8:	08d9      	lsrs	r1, r3, #3
 80058aa:	460b      	mov	r3, r1
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	b25b      	sxtb	r3, r3
 80058b8:	4303      	orrs	r3, r0
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	73bb      	strb	r3, [r7, #14]
	  // other settings for setting alarm
	  alarm.AlarmTime.SubSeconds = 0x0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]
	  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61bb      	str	r3, [r7, #24]
	  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61fb      	str	r3, [r7, #28]
	  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	623b      	str	r3, [r7, #32]
	  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
	  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  alarm.Alarm = RTC_ALARM_A;
 80058d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34

	  // set the alarm and enable an interrupt to fire
	  HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT_BCD);
 80058de:	4b07      	ldr	r3, [pc, #28]	; (80058fc <rtcCalendarControl_setAlarm_A+0x13c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f107 010c 	add.w	r1, r7, #12
 80058e6:	2201      	movs	r2, #1
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe f8a7 	bl	8003a3c <HAL_RTC_SetAlarm_IT>

	  return RTC_CALENDAR_CONTROL_OKAY;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e000      	b.n	80058f4 <rtcCalendarControl_setAlarm_A+0x134>
  }

  // the module has not been initialized
  else
  {
	  return RTC_CALENDAR_CONTROL_NOT_INIT;
 80058f2:	2301      	movs	r3, #1
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	373c      	adds	r7, #60	; 0x3c
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	20000530 	.word	0x20000530
 8005900:	cccccccd 	.word	0xcccccccd

08005904 <rtcCalendarControl_diableAlarm_A>:
/* rtcCalendarControl_diableAlarm_A
 *
 * Disables alarm A from firing.
 */
RtcUtilsStatus rtcCalendarControl_diableAlarm_A(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
	// if the module has been initlaized
	if (IS_RTC_INIT(_rtc_handle))
 8005908:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <rtcCalendarControl_diableAlarm_A+0x30>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00d      	beq.n	800592c <rtcCalendarControl_diableAlarm_A+0x28>
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <rtcCalendarControl_diableAlarm_A+0x30>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <rtcCalendarControl_diableAlarm_A+0x28>
	{
		HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A);
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <rtcCalendarControl_diableAlarm_A+0x30>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe f996 	bl	8003c54 <HAL_RTC_DeactivateAlarm>

		return RTC_CALENDAR_CONTROL_OKAY;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <rtcCalendarControl_diableAlarm_A+0x2a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 800592c:	2301      	movs	r3, #1
	}
}
 800592e:	4618      	mov	r0, r3
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000530 	.word	0x20000530

08005938 <LL_AHB2_GRP1_EnableClock>:
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4313      	orrs	r3, r2
 800594e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <LL_AHB2_GRP1_IsEnabledClock>:
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8005970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4013      	ands	r3, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d101      	bne.n	8005984 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <LL_AHB2_GRP1_DisableClock>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a6:	4013      	ands	r3, r2
 80059a8:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 80059be:	2002      	movs	r0, #2
 80059c0:	f7ff ffd2 	bl	8005968 <LL_AHB2_GRP1_IsEnabledClock>
 80059c4:	4603      	mov	r3, r0
 80059c6:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <activate_led+0x60>)
 80059c8:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <activate_led+0x60>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059d2:	2002      	movs	r0, #2
 80059d4:	f7ff ffb0 	bl	8005938 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	609a      	str	r2, [r3, #8]
 80059e4:	60da      	str	r2, [r3, #12]
 80059e6:	611a      	str	r2, [r3, #16]
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	2301      	movs	r3, #1
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	2302      	movs	r3, #2
 80059f2:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 80059f4:	f107 030c 	add.w	r3, r7, #12
 80059f8:	4619      	mov	r1, r3
 80059fa:	4807      	ldr	r0, [pc, #28]	; (8005a18 <activate_led+0x64>)
 80059fc:	f7fb fb90 	bl	8001120 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2201      	movs	r2, #1
 8005a04:	4619      	mov	r1, r3
 8005a06:	4804      	ldr	r0, [pc, #16]	; (8005a18 <activate_led+0x64>)
 8005a08:	f7fb fdb8 	bl	800157c <HAL_GPIO_WritePin>
}
 8005a0c:	bf00      	nop
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000534 	.word	0x20000534
 8005a18:	48000400 	.word	0x48000400

08005a1c <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4809      	ldr	r0, [pc, #36]	; (8005a54 <deactivate_led+0x38>)
 8005a2e:	f7fb fda5 	bl	800157c <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	4619      	mov	r1, r3
 8005a36:	4807      	ldr	r0, [pc, #28]	; (8005a54 <deactivate_led+0x38>)
 8005a38:	f7fb fcd2 	bl	80013e0 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <deactivate_led+0x3c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8005a44:	2002      	movs	r0, #2
 8005a46:	f7ff ffa3 	bl	8005990 <LL_AHB2_GRP1_DisableClock>
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	48000400 	.word	0x48000400
 8005a58:	20000534 	.word	0x20000534

08005a5c <modeTimer_init>:

/* modeTimer_init
 *
 */
bool modeTimer_init(LPTIM_HandleTypeDef* const hlptim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	if (hlptim != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <modeTimer_init+0x18>
	{
		_lptimer = hlptim;
 8005a6a:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <modeTimer_init+0x24>)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6013      	str	r3, [r2, #0]

		return true;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <modeTimer_init+0x1a>
	}

	else
	{
		return false;
 8005a74:	2300      	movs	r3, #0
	}
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr
 8005a80:	20000538 	.word	0x20000538

08005a84 <modeTimer_configure>:

/* modeTimer_configure
 *
 */
MODE_TIMER_STATUS modeTimer_configure(const uint16_t period, const uint16_t pulse, void (*startCallback)(), void (*endCallback)())
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60ba      	str	r2, [r7, #8]
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	4603      	mov	r3, r0
 8005a90:	81fb      	strh	r3, [r7, #14]
 8005a92:	460b      	mov	r3, r1
 8005a94:	81bb      	strh	r3, [r7, #12]
	if (_lptimer != NULL)
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <modeTimer_configure+0x44>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <modeTimer_configure+0x36>
	{
		_ar_value = period;
 8005a9e:	89fb      	ldrh	r3, [r7, #14]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <modeTimer_configure+0x48>)
 8005aa2:	6013      	str	r3, [r2, #0]
		_cm_value = pulse;
 8005aa4:	89bb      	ldrh	r3, [r7, #12]
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <modeTimer_configure+0x4c>)
 8005aa8:	6013      	str	r3, [r2, #0]
		_startCallback = startCallback;
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <modeTimer_configure+0x50>)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6013      	str	r3, [r2, #0]
		_endCallback = endCallback;
 8005ab0:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <modeTimer_configure+0x54>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6013      	str	r3, [r2, #0]

		return MODE_TIMER_OKAY;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e000      	b.n	8005abc <modeTimer_configure+0x38>
	}

	else
	{
		return MODE_TIMER_NOT_INIT;
 8005aba:	2301      	movs	r3, #1
	}
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000538 	.word	0x20000538
 8005acc:	2000053c 	.word	0x2000053c
 8005ad0:	20000540 	.word	0x20000540
 8005ad4:	20000544 	.word	0x20000544
 8005ad8:	20000548 	.word	0x20000548

08005adc <modeTimer_start>:

/* modeTimer_start
 *
 */
MODE_TIMER_STATUS modeTimer_start(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
	if (_lptimer != NULL)
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <modeTimer_start+0x38>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d011      	beq.n	8005b0c <modeTimer_start+0x30>
	{
		// start timer in PWM mode (compare match and auto reload callbacks used)
		HAL_LPTIM_PWM_Start_IT(_lptimer, _ar_value, _cm_value);
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <modeTimer_start+0x38>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a0a      	ldr	r2, [pc, #40]	; (8005b18 <modeTimer_start+0x3c>)
 8005aee:	6811      	ldr	r1, [r2, #0]
 8005af0:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <modeTimer_start+0x40>)
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fb fe91 	bl	800181c <HAL_LPTIM_PWM_Start_IT>

		// call start callback
		if (_startCallback != NULL)
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <modeTimer_start+0x44>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <modeTimer_start+0x2c>
			_startCallback();
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <modeTimer_start+0x44>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4798      	blx	r3

		return MODE_TIMER_OKAY;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e000      	b.n	8005b0e <modeTimer_start+0x32>
	}

	else
	{
		return MODE_TIMER_NOT_INIT;
 8005b0c:	2301      	movs	r3, #1
	}
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000538 	.word	0x20000538
 8005b18:	2000053c 	.word	0x2000053c
 8005b1c:	20000540 	.word	0x20000540
 8005b20:	20000544 	.word	0x20000544

08005b24 <modeTimer_stop>:

/* modeTimer_stop
 *
 */
MODE_TIMER_STATUS modeTimer_stop(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
	if (_lptimer != NULL)
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <modeTimer_stop+0x30>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00d      	beq.n	8005b4c <modeTimer_stop+0x28>
	{
		// stop the timer
		HAL_LPTIM_PWM_Stop_IT(_lptimer);
 8005b30:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <modeTimer_stop+0x30>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fb ff0f 	bl	8001958 <HAL_LPTIM_PWM_Stop_IT>

		// call end callback
		if (_endCallback != NULL)
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <modeTimer_stop+0x34>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <modeTimer_stop+0x24>
			_endCallback();
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <modeTimer_stop+0x34>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4798      	blx	r3

		return MODE_TIMER_OKAY;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <modeTimer_stop+0x2a>
	}

	else
	{
		return MODE_TIMER_NOT_INIT;
 8005b4c:	2301      	movs	r3, #1
	}
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000538 	.word	0x20000538
 8005b58:	20000548 	.word	0x20000548

08005b5c <modeTimer_CompareMatch_IRQ>:

/* modeTimer_CompareMatch_IRQ
 *
 */
void modeTimer_CompareMatch_IRQ(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	// call end callback
	if (_endCallback != NULL)
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <modeTimer_CompareMatch_IRQ+0x18>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <modeTimer_CompareMatch_IRQ+0x12>
		_endCallback();
 8005b68:	4b02      	ldr	r3, [pc, #8]	; (8005b74 <modeTimer_CompareMatch_IRQ+0x18>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4798      	blx	r3
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000548 	.word	0x20000548

08005b78 <modeTimer_AutoReload_IRQ>:

/* modeTimer_AutoReload_IRQ
 *
 */
void modeTimer_AutoReload_IRQ(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
	// call start callback
	if (_startCallback != NULL)
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <modeTimer_AutoReload_IRQ+0x18>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <modeTimer_AutoReload_IRQ+0x12>
		_startCallback();
 8005b84:	4b02      	ldr	r3, [pc, #8]	; (8005b90 <modeTimer_AutoReload_IRQ+0x18>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4798      	blx	r3
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000544 	.word	0x20000544

08005b94 <code_to_appActions>:
 *
 * Map char array command code to numerical code.  If no match is found,
 * NO_ACTION is returned.
 */
AppActions code_to_appActions(const char* code)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	4925      	ldr	r1, [pc, #148]	; (8005c34 <code_to_appActions+0xa0>)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fd8b 	bl	80066bc <strncmp>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e03c      	b.n	8005c2a <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	4921      	ldr	r1, [pc, #132]	; (8005c38 <code_to_appActions+0xa4>)
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fd81 	bl	80066bc <strncmp>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e032      	b.n	8005c2a <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	491d      	ldr	r1, [pc, #116]	; (8005c3c <code_to_appActions+0xa8>)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fd77 	bl	80066bc <strncmp>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e028      	b.n	8005c2a <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8005bd8:	2204      	movs	r2, #4
 8005bda:	4919      	ldr	r1, [pc, #100]	; (8005c40 <code_to_appActions+0xac>)
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fd6d 	bl	80066bc <strncmp>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 8005be8:	2304      	movs	r3, #4
 8005bea:	e01e      	b.n	8005c2a <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8005bec:	2204      	movs	r2, #4
 8005bee:	4915      	ldr	r1, [pc, #84]	; (8005c44 <code_to_appActions+0xb0>)
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fd63 	bl	80066bc <strncmp>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 8005bfc:	2305      	movs	r3, #5
 8005bfe:	e014      	b.n	8005c2a <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_PACKET_HEADER_SIZE))
 8005c00:	2204      	movs	r2, #4
 8005c02:	4911      	ldr	r1, [pc, #68]	; (8005c48 <code_to_appActions+0xb4>)
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fd59 	bl	80066bc <strncmp>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 8005c10:	2306      	movs	r3, #6
 8005c12:	e00a      	b.n	8005c2a <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_PACKET_HEADER_SIZE))
 8005c14:	2204      	movs	r2, #4
 8005c16:	490d      	ldr	r1, [pc, #52]	; (8005c4c <code_to_appActions+0xb8>)
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fd4f 	bl	80066bc <strncmp>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <code_to_appActions+0x94>
			return START_CALENDAR;
 8005c24:	2307      	movs	r3, #7
 8005c26:	e000      	b.n	8005c2a <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	080078a4 	.word	0x080078a4
 8005c38:	080078ac 	.word	0x080078ac
 8005c3c:	080078b4 	.word	0x080078b4
 8005c40:	080078bc 	.word	0x080078bc
 8005c44:	080078c4 	.word	0x080078c4
 8005c48:	080078cc 	.word	0x080078cc
 8005c4c:	080078d4 	.word	0x080078d4

08005c50 <parseDateTime>:
 *
 * Parse a DateTime from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseDateTime(DateTime* dateTime, char data[UART_PACKET_PAYLOAD_SIZE])
{
 8005c50:	b5b0      	push	{r4, r5, r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	int formatCount;

	// parse values from string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(dateTime->year),
 8005c5a:	687c      	ldr	r4, [r7, #4]
			(int*)&(dateTime->month),
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	1c5d      	adds	r5, r3, #1
			(int*)&(dateTime->day),
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3302      	adds	r3, #2
			(int*)&(dateTime->hour),
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	3203      	adds	r2, #3
			(int*)&(dateTime->minute),
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	3104      	adds	r1, #4
			(int*)&(dateTime->second));
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	3005      	adds	r0, #5
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005c70:	9003      	str	r0, [sp, #12]
 8005c72:	9102      	str	r1, [sp, #8]
 8005c74:	9201      	str	r2, [sp, #4]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	462b      	mov	r3, r5
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	4907      	ldr	r1, [pc, #28]	; (8005c9c <parseDateTime+0x4c>)
 8005c7e:	6838      	ldr	r0, [r7, #0]
 8005c80:	f000 fcf0 	bl	8006664 <siscanf>
 8005c84:	60f8      	str	r0, [r7, #12]

	// if the correct number of values were parsed, return true
	if (formatCount == 6)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b06      	cmp	r3, #6
 8005c8a:	d101      	bne.n	8005c90 <parseDateTime+0x40>
		return true;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <parseDateTime+0x42>

	// else, there was an error, return false
	else
		return false;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bdb0      	pop	{r4, r5, r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	080078dc 	.word	0x080078dc

08005ca0 <formatDateTime>:
 *
 * Format a string from a DateTime.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool formatDateTime(char data[UART_PACKET_PAYLOAD_SIZE], const DateTime* dateTime)
{
 8005ca0:	b5b0      	push	{r4, r5, r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af06      	add	r7, sp, #24
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	int formatCount;

	// format values into string
	memset(data, 0, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 8005caa:	223c      	movs	r2, #60	; 0x3c
 8005cac:	2100      	movs	r1, #0
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fc9c 	bl	80065ec <memset>
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int)(dateTime->year),
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005cb8:	461d      	mov	r5, r3
			(int)(dateTime->month),
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005cbe:	461a      	mov	r2, r3
			(int)(dateTime->day),
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	789b      	ldrb	r3, [r3, #2]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005cc4:	4619      	mov	r1, r3
			(int)(dateTime->hour),
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	78db      	ldrb	r3, [r3, #3]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005cca:	4618      	mov	r0, r3
			(int)(dateTime->minute),
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	791b      	ldrb	r3, [r3, #4]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005cd0:	461c      	mov	r4, r3
			(int)(dateTime->second));
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	795b      	ldrb	r3, [r3, #5]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	9403      	str	r4, [sp, #12]
 8005cda:	9002      	str	r0, [sp, #8]
 8005cdc:	9101      	str	r1, [sp, #4]
 8005cde:	9200      	str	r2, [sp, #0]
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <formatDateTime+0x68>)
 8005ce4:	213c      	movs	r1, #60	; 0x3c
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fc88 	bl	80065fc <sniprintf>
 8005cec:	60f8      	str	r0, [r7, #12]

	// if the resulting string is not longer than the packet payload size and there was no
	// error formatting, return true
	if (formatCount >= 0 && formatCount <= UART_PACKET_PAYLOAD_SIZE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db04      	blt.n	8005cfe <formatDateTime+0x5e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b3c      	cmp	r3, #60	; 0x3c
 8005cf8:	dc01      	bgt.n	8005cfe <formatDateTime+0x5e>
		return true;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <formatDateTime+0x60>

	// else, return false
	else
		return false;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bdb0      	pop	{r4, r5, r7, pc}
 8005d08:	080078dc 	.word	0x080078dc

08005d0c <parseEvent>:
 *
 * Parse a CalendarEvent from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss;yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseEvent(CalendarEvent* event, char data[UART_PACKET_PAYLOAD_SIZE])
{
 8005d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0e:	b093      	sub	sp, #76	; 0x4c
 8005d10:	af0a      	add	r7, sp, #40	; 0x28
 8005d12:	6178      	str	r0, [r7, #20]
 8005d14:	6139      	str	r1, [r7, #16]
	int formatCount;

	// parse string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(event->start.year),
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	60fb      	str	r3, [r7, #12]
			(int*)&(event->start.month),
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f103 0c01 	add.w	ip, r3, #1
			(int*)&(event->start.day),
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3302      	adds	r3, #2
			(int*)&(event->start.hour),
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	3203      	adds	r2, #3
			(int*)&(event->start.minute),
 8005d28:	6979      	ldr	r1, [r7, #20]
 8005d2a:	3104      	adds	r1, #4
			(int*)&(event->start.second),
 8005d2c:	6978      	ldr	r0, [r7, #20]
 8005d2e:	3005      	adds	r0, #5
			(int*)&(event->end.year),
 8005d30:	697c      	ldr	r4, [r7, #20]
 8005d32:	3406      	adds	r4, #6
			(int*)&(event->end.month),
 8005d34:	697d      	ldr	r5, [r7, #20]
 8005d36:	3507      	adds	r5, #7
			(int*)&(event->end.day),
 8005d38:	697e      	ldr	r6, [r7, #20]
 8005d3a:	3608      	adds	r6, #8
			(int*)&(event->end.hour),
 8005d3c:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005d40:	f10e 0e09 	add.w	lr, lr, #9
 8005d44:	f8c7 e008 	str.w	lr, [r7, #8]
			(int*)&(event->end.minute),
 8005d48:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005d4c:	f10e 0e0a 	add.w	lr, lr, #10
 8005d50:	f8c7 e004 	str.w	lr, [r7, #4]
			(int*)&(event->end.second));
 8005d54:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005d58:	f10e 0e0b 	add.w	lr, lr, #11
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
 8005d5c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8005d60:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8005d64:	f8cd e020 	str.w	lr, [sp, #32]
 8005d68:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8005d6c:	f8cd e01c 	str.w	lr, [sp, #28]
 8005d70:	9606      	str	r6, [sp, #24]
 8005d72:	9505      	str	r5, [sp, #20]
 8005d74:	9404      	str	r4, [sp, #16]
 8005d76:	9003      	str	r0, [sp, #12]
 8005d78:	9102      	str	r1, [sp, #8]
 8005d7a:	9201      	str	r2, [sp, #4]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4663      	mov	r3, ip
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4907      	ldr	r1, [pc, #28]	; (8005da0 <parseEvent+0x94>)
 8005d84:	6938      	ldr	r0, [r7, #16]
 8005d86:	f000 fc6d 	bl	8006664 <siscanf>
 8005d8a:	61f8      	str	r0, [r7, #28]

	// if the correct number of values were parsed, return true
	if (formatCount == 12)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d101      	bne.n	8005d96 <parseEvent+0x8a>
		return true;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <parseEvent+0x8c>

	// else, there was an error, return false
	else
		return false;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3724      	adds	r7, #36	; 0x24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da0:	080078fc 	.word	0x080078fc

08005da4 <desktopAppSession_init>:
 *
 * Initializes the UART transport layer and resets operational variables for the manager.
 * Only will initialize if the manager has not been initialized already.
 */
bool desktopAppSession_init(UART_HandleTypeDef* huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (!_sessionInit && uartTransport_init(huart))
 8005dac:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <desktopAppSession_init+0x58>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f083 0301 	eor.w	r3, r3, #1
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01a      	beq.n	8005df0 <desktopAppSession_init+0x4c>
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fad0 	bl	8006360 <uartTransport_init>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d014      	beq.n	8005df0 <desktopAppSession_init+0x4c>
	{
		// reset operational variables
		_sessionOpen = false;
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <desktopAppSession_init+0x5c>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <desktopAppSession_init+0x58>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
		_messageReady = false;
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <desktopAppSession_init+0x60>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
		memset(_messageCommand, 0, UART_PACKET_HEADER_SIZE * sizeof(char));
 8005dd8:	2204      	movs	r2, #4
 8005dda:	2100      	movs	r1, #0
 8005ddc:	480a      	ldr	r0, [pc, #40]	; (8005e08 <desktopAppSession_init+0x64>)
 8005dde:	f000 fc05 	bl	80065ec <memset>
		memset(_messageData, 0, UART_PACKET_PAYLOAD_SIZE * sizeof(char));
 8005de2:	223c      	movs	r2, #60	; 0x3c
 8005de4:	2100      	movs	r1, #0
 8005de6:	4809      	ldr	r0, [pc, #36]	; (8005e0c <desktopAppSession_init+0x68>)
 8005de8:	f000 fc00 	bl	80065ec <memset>

		return true;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <desktopAppSession_init+0x4e>
	}

	// an uninitialized uart handle was passed.
	else
	{
		return false;
 8005df0:	2300      	movs	r3, #0
	}
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2000054d 	.word	0x2000054d
 8005e00:	2000054c 	.word	0x2000054c
 8005e04:	20000590 	.word	0x20000590
 8005e08:	20000550 	.word	0x20000550
 8005e0c:	20000554 	.word	0x20000554

08005e10 <sessionOpen>:
/* sessionOpen
 *
 * Return if the session is initialized and open.
 */
bool sessionOpen(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
	return _sessionInit && _sessionOpen;
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <sessionOpen+0x28>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <sessionOpen+0x18>
 8005e1c:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <sessionOpen+0x2c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <sessionOpen+0x18>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <sessionOpen+0x1a>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	b2db      	uxtb	r3, r3
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr
 8005e38:	2000054d 	.word	0x2000054d
 8005e3c:	2000054c 	.word	0x2000054c

08005e40 <desktopAppSession_start>:
 * Attempts to handshake with the desktop application.  Wrapper for the handshake function.
 * Will not attempt if the manager has not been initialized and will not attempt if a
 * session is already open.
 */
DesktopComSessionStatus desktopAppSession_start(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
	DesktopComSessionStatus handshakeStatus;

	// if the module has been initialized
	if (_sessionInit)
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <desktopAppSession_start+0x48>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <desktopAppSession_start+0x3c>
	{
		// only attempt to handshake if a session is not already open
		if (!_sessionOpen)
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <desktopAppSession_start+0x4c>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f083 0301 	eor.w	r3, r3, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <desktopAppSession_start+0x38>
		{
			// perform handshake and return result
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8005e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e60:	f000 f888 	bl	8005f74 <_handshake>
 8005e64:	4603      	mov	r3, r0
 8005e66:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <desktopAppSession_start+0x34>
				_sessionOpen = true;
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <desktopAppSession_start+0x4c>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	e002      	b.n	8005e7e <desktopAppSession_start+0x3e>
		}

		// if session is closed
		else
		{
			return SESSION_NOT_OPEN;
 8005e78:	2304      	movs	r3, #4
 8005e7a:	e000      	b.n	8005e7e <desktopAppSession_start+0x3e>
	}

	// module not initialized
	else
	{
		return SESSION_NOT_INIT;
 8005e7c:	2303      	movs	r3, #3
	}
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	2000054d 	.word	0x2000054d
 8005e8c:	2000054c 	.word	0x2000054c

08005e90 <desktopAppSession_update>:
 *
 * Update the state of the session manager.  Wraps the _session_cycle() function,
 * which performs the actual update, with checks for a session to be opened.
 */
DesktopComSessionStatus desktopAppSession_update(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
	// if the module has been initialized
	if (_sessionInit)
 8005e94:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <desktopAppSession_update+0x28>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <desktopAppSession_update+0x20>
	{
		// only run _update() if a session is opened
		if (_sessionOpen)
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <desktopAppSession_update+0x2c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <desktopAppSession_update+0x1c>
		{
			return _session_update();
 8005ea4:	f000 f94e 	bl	8006144 <_session_update>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	e002      	b.n	8005eb2 <desktopAppSession_update+0x22>
		}

		// a session has not been opened
		else
		{
			return SESSION_NOT_OPEN;
 8005eac:	2304      	movs	r3, #4
 8005eae:	e000      	b.n	8005eb2 <desktopAppSession_update+0x22>
	}

	// the module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 8005eb0:	2303      	movs	r3, #3
	}
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000054d 	.word	0x2000054d
 8005ebc:	2000054c 	.word	0x2000054c

08005ec0 <desktopAppSession_enqueueMessage>:
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_enqueueMessage(char header[UART_PACKET_HEADER_SIZE],
		char body[UART_PACKET_PAYLOAD_SIZE])
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (_sessionInit)
 8005eca:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <desktopAppSession_enqueueMessage+0x34>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <desktopAppSession_enqueueMessage+0x28>
	{
		// try to enqueue message and return if successful
		if (uartTransport_bufferTx((uint8_t*)header, (uint8_t*)body) != TRANSPORT_OKAY)
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa65 	bl	80063a4 <uartTransport_bufferTx>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <desktopAppSession_enqueueMessage+0x24>
		{
			return SESSION_ERROR;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e002      	b.n	8005eea <desktopAppSession_enqueueMessage+0x2a>
		}
		else
		{
			return SESSION_OKAY;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e000      	b.n	8005eea <desktopAppSession_enqueueMessage+0x2a>
	}

	// module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 8005ee8:	2303      	movs	r3, #3
	}
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	2000054d 	.word	0x2000054d

08005ef8 <desktopAppSession_dequeueMessage>:
 * above.
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_dequeueMessage(char header[UART_PACKET_HEADER_SIZE], char body[UART_PACKET_PAYLOAD_SIZE])
{
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (_sessionInit)
 8005f02:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <desktopAppSession_dequeueMessage+0x6c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d026      	beq.n	8005f58 <desktopAppSession_dequeueMessage+0x60>
	{
		// if a message is present in the received queue, copy to output
		if (_messageReady)
 8005f0a:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <desktopAppSession_dequeueMessage+0x70>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d020      	beq.n	8005f54 <desktopAppSession_dequeueMessage+0x5c>
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <desktopAppSession_dequeueMessage+0x74>)
 8005f14:	681a      	ldr	r2, [r3, #0]
		{
			memcpy(header, _messageCommand, UART_PACKET_HEADER_SIZE*sizeof(char));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
			memcpy(body, _messageData, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <desktopAppSession_dequeueMessage+0x78>)
 8005f1e:	4614      	mov	r4, r2
 8005f20:	469c      	mov	ip, r3
 8005f22:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005f26:	4665      	mov	r5, ip
 8005f28:	4626      	mov	r6, r4
 8005f2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f2c:	6028      	str	r0, [r5, #0]
 8005f2e:	6069      	str	r1, [r5, #4]
 8005f30:	60aa      	str	r2, [r5, #8]
 8005f32:	60eb      	str	r3, [r5, #12]
 8005f34:	3410      	adds	r4, #16
 8005f36:	f10c 0c10 	add.w	ip, ip, #16
 8005f3a:	4574      	cmp	r4, lr
 8005f3c:	d1f3      	bne.n	8005f26 <desktopAppSession_dequeueMessage+0x2e>
 8005f3e:	4665      	mov	r5, ip
 8005f40:	4623      	mov	r3, r4
 8005f42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f44:	6028      	str	r0, [r5, #0]
 8005f46:	6069      	str	r1, [r5, #4]
 8005f48:	60aa      	str	r2, [r5, #8]
			_messageReady = false;
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <desktopAppSession_dequeueMessage+0x70>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]

			return SESSION_OKAY;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e002      	b.n	8005f5a <desktopAppSession_dequeueMessage+0x62>
		}

		// no message is ready
		else
		{
			return SESSION_ERROR;
 8005f54:	2302      	movs	r3, #2
 8005f56:	e000      	b.n	8005f5a <desktopAppSession_dequeueMessage+0x62>
	}

	// the module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 8005f58:	2303      	movs	r3, #3
	}
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2000054d 	.word	0x2000054d
 8005f68:	20000590 	.word	0x20000590
 8005f6c:	20000550 	.word	0x20000550
 8005f70:	20000554 	.word	0x20000554

08005f74 <_handshake>:
 * Note:  no software flow control is used for the first message.  Listening for the
 * first message from the desktop may timeout and cause synchronization issues while
 * attempting to handshake.
 */
DesktopComSessionStatus _handshake(unsigned int timeout_ms)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b094      	sub	sp, #80	; 0x50
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TransportStatus transportStatus;
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 8005f90:	2300      	movs	r3, #0
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	2238      	movs	r2, #56	; 0x38
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fb25 	bl	80065ec <memset>

	// while the handshake follows proper steps and UART communication does not error
	while (!success && !error)
 8005fa2:	e0a2      	b.n	80060ea <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 8005fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <_handshake+0x44>
		{
			transportStatus = uartTransport_rx_polled(timeout_ms); // handshake timeout until start of handshake
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa8e 	bl	80064cc <uartTransport_rx_polled>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005fb6:	e063      	b.n	8006080 <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 8005fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d10b      	bne.n	8005fd6 <_handshake+0x62>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 8005fbe:	f107 0208 	add.w	r2, r7, #8
 8005fc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fa15 	bl	80063f8 <uartTransport_debufferRx>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005fd4:	e054      	b.n	8006080 <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 8005fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d10d      	bne.n	8005ff8 <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_PACKET_HEADER_SIZE))
 8005fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	4955      	ldr	r1, [pc, #340]	; (8006138 <_handshake+0x1c4>)
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fb69 	bl	80066bc <strncmp>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d047      	beq.n	8006080 <_handshake+0x10c>
			{
				error = true;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005ff6:	e043      	b.n	8006080 <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 8005ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d110      	bne.n	8006020 <_handshake+0xac>
		{
			memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	223c      	movs	r2, #60	; 0x3c
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f000 faf0 	bl	80065ec <memset>
			transportStatus = uartTransport_bufferTx((uint8_t*)HANDSHAKE_HEADER_ACKN, (uint8_t*)messageBody);
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	4619      	mov	r1, r3
 8006012:	484a      	ldr	r0, [pc, #296]	; (800613c <_handshake+0x1c8>)
 8006014:	f000 f9c6 	bl	80063a4 <uartTransport_bufferTx>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800601e:	e02f      	b.n	8006080 <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 8006020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006022:	2b04      	cmp	r3, #4
 8006024:	d106      	bne.n	8006034 <_handshake+0xc0>
		{
			transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 8006026:	2064      	movs	r0, #100	; 0x64
 8006028:	f000 fa12 	bl	8006450 <uartTransport_tx_polled>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8006032:	e025      	b.n	8006080 <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8006034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006036:	2b05      	cmp	r3, #5
 8006038:	d106      	bne.n	8006048 <_handshake+0xd4>
		{
			transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 800603a:	2064      	movs	r0, #100	; 0x64
 800603c:	f000 fa46 	bl	80064cc <uartTransport_rx_polled>
 8006040:	4603      	mov	r3, r0
 8006042:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8006046:	e01b      	b.n	8006080 <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 8006048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604a:	2b06      	cmp	r3, #6
 800604c:	d10b      	bne.n	8006066 <_handshake+0xf2>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 800604e:	f107 0208 	add.w	r2, r7, #8
 8006052:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f9cd 	bl	80063f8 <uartTransport_debufferRx>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8006064:	e00c      	b.n	8006080 <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_PACKET_HEADER_SIZE))
 8006066:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800606a:	2204      	movs	r2, #4
 800606c:	4934      	ldr	r1, [pc, #208]	; (8006140 <_handshake+0x1cc>)
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fb24 	bl	80066bc <strncmp>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <_handshake+0x10c>
			{
				error = true;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}

		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8006080:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006084:	2b00      	cmp	r3, #0
 8006086:	d12d      	bne.n	80060e4 <_handshake+0x170>
		{
			if (state == 0)
 8006088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <_handshake+0x120>
				state = 1;
 800608e:	2301      	movs	r3, #1
 8006090:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006092:	e02a      	b.n	80060ea <_handshake+0x176>
			else if (state == 1)
 8006094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d102      	bne.n	80060a0 <_handshake+0x12c>
				state = 2;
 800609a:	2302      	movs	r3, #2
 800609c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800609e:	e024      	b.n	80060ea <_handshake+0x176>
			else if (state == 2)
 80060a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d102      	bne.n	80060ac <_handshake+0x138>
				state = 3;
 80060a6:	2303      	movs	r3, #3
 80060a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060aa:	e01e      	b.n	80060ea <_handshake+0x176>
			else if (state == 3)
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d102      	bne.n	80060b8 <_handshake+0x144>
				state = 4;
 80060b2:	2304      	movs	r3, #4
 80060b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b6:	e018      	b.n	80060ea <_handshake+0x176>
			else if (state == 4)
 80060b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d102      	bne.n	80060c4 <_handshake+0x150>
				state = 5;
 80060be:	2305      	movs	r3, #5
 80060c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c2:	e012      	b.n	80060ea <_handshake+0x176>
			else if (state == 5)
 80060c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d102      	bne.n	80060d0 <_handshake+0x15c>
				state = 6;
 80060ca:	2306      	movs	r3, #6
 80060cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ce:	e00c      	b.n	80060ea <_handshake+0x176>
			else if (state == 6)
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d102      	bne.n	80060dc <_handshake+0x168>
				state = 7;
 80060d6:	2307      	movs	r3, #7
 80060d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060da:	e006      	b.n	80060ea <_handshake+0x176>
			else // if (state == 7)
				success = true;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80060e2:	e002      	b.n	80060ea <_handshake+0x176>
		}
		else
		{
			error = true;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 80060ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80060ee:	f083 0301 	eor.w	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <_handshake+0x194>
 80060f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	f47f af4e 	bne.w	8005fa4 <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 8006108:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <_handshake+0x1ae>
 8006110:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006114:	f083 0301 	eor.w	r3, r3, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 800611e:	2300      	movs	r3, #0
 8006120:	e006      	b.n	8006130 <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 8006122:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 800612e:	2302      	movs	r3, #2
		}
	}
}
 8006130:	4618      	mov	r0, r3
 8006132:	3750      	adds	r7, #80	; 0x50
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	08007938 	.word	0x08007938
 800613c:	08007940 	.word	0x08007940
 8006140:	08007948 	.word	0x08007948

08006144 <_session_update>:
 *
 * Note:  If a response to the desktop is necessary, this response won't be sent until
 * the next time the session is updated.
 */
DesktopComSessionStatus _session_update(void)
{
 8006144:	b5b0      	push	{r4, r5, r7, lr}
 8006146:	b092      	sub	sp, #72	; 0x48
 8006148:	af00      	add	r7, sp, #0
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 800614a:	2300      	movs	r3, #0
 800614c:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	2238      	movs	r2, #56	; 0x38
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fa46 	bl	80065ec <memset>
	DesktopComSessionStatus status;

	// Perform Tx message phase of session cycle.
	status = _tell();
 8006160:	f000 f8ba 	bl	80062d8 <_tell>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Perform Rx message phase of session cycle.
	status = _listen();
 800616a:	f000 f863 	bl	8006234 <_listen>
 800616e:	4603      	mov	r3, r0
 8006170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 8006174:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006178:	2b02      	cmp	r3, #2
 800617a:	d101      	bne.n	8006180 <_session_update+0x3c>
	{
		return SESSION_ERROR;
 800617c:	2302      	movs	r3, #2
 800617e:	e046      	b.n	800620e <_session_update+0xca>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 8006180:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006184:	2b00      	cmp	r3, #0
 8006186:	d140      	bne.n	800620a <_session_update+0xc6>
	{
		// dequeue received message
		uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 8006188:	1d3a      	adds	r2, r7, #4
 800618a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800618e:	4611      	mov	r1, r2
 8006190:	4618      	mov	r0, r3
 8006192:	f000 f931 	bl	80063f8 <uartTransport_debufferRx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_PACKET_HEADER_SIZE))
 8006196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800619a:	2204      	movs	r2, #4
 800619c:	491e      	ldr	r1, [pc, #120]	; (8006218 <_session_update+0xd4>)
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fa8c 	bl	80066bc <strncmp>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <_session_update+0x7c>
		{
			desktopAppSession_enqueueMessage(HANDSHAKE_HEADER_DISC, "\0");
 80061aa:	491c      	ldr	r1, [pc, #112]	; (800621c <_session_update+0xd8>)
 80061ac:	481a      	ldr	r0, [pc, #104]	; (8006218 <_session_update+0xd4>)
 80061ae:	f7ff fe87 	bl	8005ec0 <desktopAppSession_enqueueMessage>
			_sessionOpen = false;
 80061b2:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <_session_update+0xdc>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
			status = SESSION_CLOSED;
 80061b8:	2306      	movs	r3, #6
 80061ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80061be:	e024      	b.n	800620a <_session_update+0xc6>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_PACKET_HEADER_SIZE))
 80061c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061c4:	2204      	movs	r2, #4
 80061c6:	4917      	ldr	r1, [pc, #92]	; (8006224 <_session_update+0xe0>)
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fa77 	bl	80066bc <strncmp>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <_session_update+0xa0>
		{
			desktopAppSession_enqueueMessage(messageHeader, messageBody);
 80061d4:	1d3a      	adds	r2, r7, #4
 80061d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fe6f 	bl	8005ec0 <desktopAppSession_enqueueMessage>
 80061e2:	e012      	b.n	800620a <_session_update+0xc6>
 80061e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_PACKET_HEADER_SIZE*sizeof(char));
 80061e6:	4a10      	ldr	r2, [pc, #64]	; (8006228 <_session_update+0xe4>)
 80061e8:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <_session_update+0xe8>)
 80061ec:	461d      	mov	r5, r3
 80061ee:	1d3c      	adds	r4, r7, #4
 80061f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006200:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <_session_update+0xec>)
 8006206:	2201      	movs	r2, #1
 8006208:	701a      	strb	r2, [r3, #0]
		}
	}

	return status;
 800620a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800620e:	4618      	mov	r0, r3
 8006210:	3748      	adds	r7, #72	; 0x48
 8006212:	46bd      	mov	sp, r7
 8006214:	bdb0      	pop	{r4, r5, r7, pc}
 8006216:	bf00      	nop
 8006218:	08007950 	.word	0x08007950
 800621c:	08007958 	.word	0x08007958
 8006220:	2000054c 	.word	0x2000054c
 8006224:	0800795c 	.word	0x0800795c
 8006228:	20000550 	.word	0x20000550
 800622c:	20000554 	.word	0x20000554
 8006230:	20000590 	.word	0x20000590

08006234 <_listen>:
 * message.  A CTS message is transmitted.  The Message window listens for a message
 * from the desktop application with the RECEIVE_TIMEOUT_MS value.  Error codes from
 * the transport layer are aliased to session error codes.
 */
DesktopComSessionStatus _listen(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b090      	sub	sp, #64	; 0x40
 8006238:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800623a:	2300      	movs	r3, #0
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	2238      	movs	r2, #56	; 0x38
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f9d1 	bl	80065ec <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 800624a:	463b      	mov	r3, r7
 800624c:	223c      	movs	r2, #60	; 0x3c
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f9cb 	bl	80065ec <memset>
	snprintf(messageBody, UART_PACKET_PAYLOAD_SIZE, "Clear to send!\n");
 8006256:	463b      	mov	r3, r7
 8006258:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <_listen+0x9c>)
 800625a:	213c      	movs	r1, #60	; 0x3c
 800625c:	4618      	mov	r0, r3
 800625e:	f000 f9cd 	bl	80065fc <sniprintf>
	transportStatus = uartTransport_bufferTx((uint8_t*)CTS_HEADER,(uint8_t*) messageBody);
 8006262:	463b      	mov	r3, r7
 8006264:	4619      	mov	r1, r3
 8006266:	481b      	ldr	r0, [pc, #108]	; (80062d4 <_listen+0xa0>)
 8006268:	f000 f89c 	bl	80063a4 <uartTransport_bufferTx>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 8006272:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <_listen+0x4a>
	{
		return SESSION_ERROR;
 800627a:	2302      	movs	r3, #2
 800627c:	e024      	b.n	80062c8 <_listen+0x94>
	}

	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 800627e:	2064      	movs	r0, #100	; 0x64
 8006280:	f000 f8e6 	bl	8006450 <uartTransport_tx_polled>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 800628a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 8006292:	2301      	movs	r3, #1
 8006294:	e018      	b.n	80062c8 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8006296:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <_listen+0x6e>
	{
		return SESSION_ERROR;
 800629e:	2302      	movs	r3, #2
 80062a0:	e012      	b.n	80062c8 <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 80062a2:	2064      	movs	r0, #100	; 0x64
 80062a4:	f000 f912 	bl	80064cc <uartTransport_rx_polled>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 80062ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e006      	b.n	80062c8 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 80062ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <_listen+0x92>
	{
		return SESSION_ERROR;
 80062c2:	2302      	movs	r3, #2
 80062c4:	e000      	b.n	80062c8 <_listen+0x94>
	}

	return SESSION_OKAY;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3740      	adds	r7, #64	; 0x40
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	08007964 	.word	0x08007964
 80062d4:	08007974 	.word	0x08007974

080062d8 <_tell>:
 * Wraps UART transmission layer calls.
 * Transmits a buffered message to the desktop application.
 * Aliases transport layer error codes to session error codes.
 */
DesktopComSessionStatus _tell(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;

	// attempt to transmit packet
	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 80062de:	2064      	movs	r0, #100	; 0x64
 80062e0:	f000 f8b6 	bl	8006450 <uartTransport_tx_polled>
 80062e4:	4603      	mov	r3, r0
 80062e6:	71fb      	strb	r3, [r7, #7]

	// report status of transmission
	if (transportStatus == TRANSPORT_OKAY)
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <_tell+0x1a>
	{
		return SESSION_OKAY;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e005      	b.n	80062fe <_tell+0x26>
	}
	else if (transportStatus == TRANSPORT_TIMEOUT)
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <_tell+0x24>
	{
		return SESSION_TIMEOUT;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <_tell+0x26>
	}
	else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
	{
		return SESSION_ERROR;
 80062fc:	2302      	movs	r3, #2
	}
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <composePacket>:
 * UART_PACKET_PAYLOAD_SIZE bytes to the packet buffer offset by UART_PACKET_HEADER_SIZE
 * number of bytes.
 */
void composePacket(uint8_t packet_buffer[UART_PACKET_SIZE], const uint8_t header[UART_PACKET_HEADER_SIZE],
		const uint8_t payload[UART_PACKET_PAYLOAD_SIZE])
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
	// Copy header into packet.
	memcpy(packet_buffer, header, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]
	// Copy payload into packet.
	memcpy(packet_buffer + UART_PACKET_HEADER_SIZE, payload, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3304      	adds	r3, #4
 8006320:	223c      	movs	r2, #60	; 0x3c
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f953 	bl	80065d0 <memcpy>
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <decomposePacket>:
 * Copies UART_PACKET_HEADER_SIZE number of bytes to the header_buffer and copies
 * UART_PACKET_PAYLOAD_SIZE number of bytes to the payload buffer.
 */
void decomposePacket(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t payload[UART_PACKET_PAYLOAD_SIZE],
		const uint8_t packet_buffer[UART_PACKET_SIZE])
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
	// Copy header from packet.
	memcpy(header, packet_buffer, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	601a      	str	r2, [r3, #0]
	// Copy payload from packet.
	memcpy(payload, packet_buffer + UART_PACKET_HEADER_SIZE, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	223c      	movs	r2, #60	; 0x3c
 800634e:	4619      	mov	r1, r3
 8006350:	68b8      	ldr	r0, [r7, #8]
 8006352:	f000 f93d 	bl	80065d0 <memcpy>
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <uartTransport_init>:
 * operational variables.
 *
 * Note:  will not re-initalize until the layer has been de-initalized.
 */
bool uartTransport_init(UART_HandleTypeDef* huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	// if module not already initialized and the uart handle passed is initialized
	if (!IS_UART_HANDLE_INIT(_uartHandle) && IS_UART_HANDLE_INIT(huart))
 8006368:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <uartTransport_init+0x40>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <uartTransport_init+0x1a>
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <uartTransport_init+0x40>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <uartTransport_init+0x36>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <uartTransport_init+0x36>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <uartTransport_init+0x36>
	{
		_uartHandle = huart;		// store handle pointer
 8006388:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <uartTransport_init+0x40>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6013      	str	r3, [r2, #0]
		_transportLayer_reset();	// reset the module's operational variables
 800638e:	f000 f8d9 	bl	8006544 <_transportLayer_reset>
		return true;				// return success
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <uartTransport_init+0x38>
	}

	// module already initializes or handle passed is not initialized
	else
	{
		return false;
 8006396:	2300      	movs	r3, #0
	}
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000594 	.word	0x20000594

080063a4 <uartTransport_bufferTx>:
 * Enqueues a packet for transmission.  Only successful if the layer has been
 * initialized.  Reports if queuing could or could not be performed due to the
 * tx buffer being full.
 */
TransportStatus uartTransport_bufferTx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	// if module initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <uartTransport_bufferTx+0x48>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d014      	beq.n	80063e0 <uartTransport_bufferTx+0x3c>
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <uartTransport_bufferTx+0x48>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00f      	beq.n	80063e0 <uartTransport_bufferTx+0x3c>
	{
		// if the transmit buffer is in use (program has queued a packet but
		// has not yet sent it)
		if (_txBuffer_full)
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <uartTransport_bufferTx+0x4c>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <uartTransport_bufferTx+0x28>
		{
			return TRANSPORT_TX_FULL;
 80063c8:	2304      	movs	r3, #4
 80063ca:	e00a      	b.n	80063e2 <uartTransport_bufferTx+0x3e>

		// the buffer is empty and ready to receive a new packet
		else
		{
			// Compose header and body into one message
			composePacket(_txBuffer, header, body);
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4808      	ldr	r0, [pc, #32]	; (80063f4 <uartTransport_bufferTx+0x50>)
 80063d2:	f7ff ff98 	bl	8006306 <composePacket>
			_txBuffer_full = true;
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <uartTransport_bufferTx+0x4c>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 80063dc:	2300      	movs	r3, #0
 80063de:	e000      	b.n	80063e2 <uartTransport_bufferTx+0x3e>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 80063e0:	2308      	movs	r3, #8
	}
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000594 	.word	0x20000594
 80063f0:	20000618 	.word	0x20000618
 80063f4:	20000598 	.word	0x20000598

080063f8 <uartTransport_debufferRx>:
 * Dequeues a packet from those that have been received.  Only successful if
 * the layer has been initialized.  Reportes of dequeuing could or could not be
 * performed due to the rx buffer being empty.
 */
TransportStatus uartTransport_debufferRx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 8006402:	4b10      	ldr	r3, [pc, #64]	; (8006444 <uartTransport_debufferRx+0x4c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d017      	beq.n	800643a <uartTransport_debufferRx+0x42>
 800640a:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <uartTransport_debufferRx+0x4c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <uartTransport_debufferRx+0x42>
	{
		// if no packet has been received
		if (!_rxBuffer_full)
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <uartTransport_debufferRx+0x50>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f083 0301 	eor.w	r3, r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <uartTransport_debufferRx+0x2e>
		{
			return TRANSPORT_RX_EMPTY;
 8006422:	2306      	movs	r3, #6
 8006424:	e00a      	b.n	800643c <uartTransport_debufferRx+0x44>
		// packet received and ready
		else
		{
			// retrieve message from buffer
			// decompose header and body from message
			decomposePacket(header, body, _rxBuffer);
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <uartTransport_debufferRx+0x54>)
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff ff81 	bl	8006332 <decomposePacket>
			_rxBuffer_full = false;
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <uartTransport_debufferRx+0x50>)
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8006436:	2300      	movs	r3, #0
 8006438:	e000      	b.n	800643c <uartTransport_debufferRx+0x44>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 800643a:	2308      	movs	r3, #8
	}
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000594 	.word	0x20000594
 8006448:	20000619 	.word	0x20000619
 800644c:	200005d8 	.word	0x200005d8

08006450 <uartTransport_tx_polled>:
 * Transmits all packets in tx queue.  Reports if the tx queue is empty
 * (to start) or the state of the transmissions (success or failure).
 * Uses HAL calls.
 */
TransportStatus uartTransport_tx_polled(uint32_t timeout_ms)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	// if the module has been initalized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 8006458:	4b19      	ldr	r3, [pc, #100]	; (80064c0 <uartTransport_tx_polled+0x70>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02a      	beq.n	80064b6 <uartTransport_tx_polled+0x66>
 8006460:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <uartTransport_tx_polled+0x70>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d025      	beq.n	80064b6 <uartTransport_tx_polled+0x66>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 800646a:	4b16      	ldr	r3, [pc, #88]	; (80064c4 <uartTransport_tx_polled+0x74>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f083 0301 	eor.w	r3, r3, #1
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <uartTransport_tx_polled+0x2c>
		{
			return TRANSPORT_TX_EMPTY;
 8006478:	2305      	movs	r3, #5
 800647a:	e01d      	b.n	80064b8 <uartTransport_tx_polled+0x68>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_PACKET_SIZE, timeout_ms);
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <uartTransport_tx_polled+0x70>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2240      	movs	r2, #64	; 0x40
 8006484:	4910      	ldr	r1, [pc, #64]	; (80064c8 <uartTransport_tx_polled+0x78>)
 8006486:	f7fd fdb7 	bl	8003ff8 <HAL_UART_Transmit>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <uartTransport_tx_polled+0x48>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 8006494:	2302      	movs	r3, #2
 8006496:	e00f      	b.n	80064b8 <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_TIMEOUT)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d101      	bne.n	80064a2 <uartTransport_tx_polled+0x52>
		{
			return TRANSPORT_TIMEOUT;
 800649e:	2301      	movs	r3, #1
 80064a0:	e00a      	b.n	80064b8 <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_BUSY)
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d101      	bne.n	80064ac <uartTransport_tx_polled+0x5c>
		{
			return TRANSPORT_BUSY;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e005      	b.n	80064b8 <uartTransport_tx_polled+0x68>
		}
		else
		{
			// transmission successful
			_txBuffer_full = false;
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <uartTransport_tx_polled+0x74>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <uartTransport_tx_polled+0x68>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 80064b6:	2308      	movs	r3, #8
	}
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000594 	.word	0x20000594
 80064c4:	20000618 	.word	0x20000618
 80064c8:	20000598 	.word	0x20000598

080064cc <uartTransport_rx_polled>:
 * Receives packets and enqueues them to the rx queue.  Reports of the
 * rx queue was full (to start) or the state of the receptions (success
 * or failure).  Uses HAL calls.
 */
TransportStatus uartTransport_rx_polled(uint32_t timeout_ms)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	// if the module has been initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 80064d4:	4b18      	ldr	r3, [pc, #96]	; (8006538 <uartTransport_rx_polled+0x6c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d027      	beq.n	800652c <uartTransport_rx_polled+0x60>
 80064dc:	4b16      	ldr	r3, [pc, #88]	; (8006538 <uartTransport_rx_polled+0x6c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d022      	beq.n	800652c <uartTransport_rx_polled+0x60>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 80064e6:	4b15      	ldr	r3, [pc, #84]	; (800653c <uartTransport_rx_polled+0x70>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <uartTransport_rx_polled+0x26>
		{
			return TRANSPORT_RX_FULL;
 80064ee:	2307      	movs	r3, #7
 80064f0:	e01d      	b.n	800652e <uartTransport_rx_polled+0x62>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_PACKET_SIZE, timeout_ms);
 80064f2:	4b11      	ldr	r3, [pc, #68]	; (8006538 <uartTransport_rx_polled+0x6c>)
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2240      	movs	r2, #64	; 0x40
 80064fa:	4911      	ldr	r1, [pc, #68]	; (8006540 <uartTransport_rx_polled+0x74>)
 80064fc:	f7fd fe02 	bl	8004104 <HAL_UART_Receive>
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <uartTransport_rx_polled+0x42>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 800650a:	2302      	movs	r3, #2
 800650c:	e00f      	b.n	800652e <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_TIMEOUT)
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b03      	cmp	r3, #3
 8006512:	d101      	bne.n	8006518 <uartTransport_rx_polled+0x4c>
		{
			return TRANSPORT_TIMEOUT;
 8006514:	2301      	movs	r3, #1
 8006516:	e00a      	b.n	800652e <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_BUSY)
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d101      	bne.n	8006522 <uartTransport_rx_polled+0x56>
		{
			return TRANSPORT_BUSY;
 800651e:	2303      	movs	r3, #3
 8006520:	e005      	b.n	800652e <uartTransport_rx_polled+0x62>
		}
		else
		{
			// reception was successful and a packet was received
			_rxBuffer_full = true;
 8006522:	4b06      	ldr	r3, [pc, #24]	; (800653c <uartTransport_rx_polled+0x70>)
 8006524:	2201      	movs	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8006528:	2300      	movs	r3, #0
 800652a:	e000      	b.n	800652e <uartTransport_rx_polled+0x62>
	}

	// the module is not initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 800652c:	2308      	movs	r3, #8
	}
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000594 	.word	0x20000594
 800653c:	20000619 	.word	0x20000619
 8006540:	200005d8 	.word	0x200005d8

08006544 <_transportLayer_reset>:
/* _transportLayer_reset
 *
 * Resets operational variables other than the HAL UART handle pointer.
 */
void _transportLayer_reset(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
	// clear buffers and flags
	memset(_txBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 8006548:	2240      	movs	r2, #64	; 0x40
 800654a:	2100      	movs	r1, #0
 800654c:	4807      	ldr	r0, [pc, #28]	; (800656c <_transportLayer_reset+0x28>)
 800654e:	f000 f84d 	bl	80065ec <memset>
	memset(_rxBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 8006552:	2240      	movs	r2, #64	; 0x40
 8006554:	2100      	movs	r1, #0
 8006556:	4806      	ldr	r0, [pc, #24]	; (8006570 <_transportLayer_reset+0x2c>)
 8006558:	f000 f848 	bl	80065ec <memset>
	_txBuffer_full = false;
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <_transportLayer_reset+0x30>)
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
	_rxBuffer_full = false;
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <_transportLayer_reset+0x34>)
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
}
 8006568:	bf00      	nop
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000598 	.word	0x20000598
 8006570:	200005d8 	.word	0x200005d8
 8006574:	20000618 	.word	0x20000618
 8006578:	20000619 	.word	0x20000619

0800657c <__errno>:
 800657c:	4b01      	ldr	r3, [pc, #4]	; (8006584 <__errno+0x8>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	2000000c 	.word	0x2000000c

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	; (80065c0 <__libc_init_array+0x38>)
 800658c:	4c0d      	ldr	r4, [pc, #52]	; (80065c4 <__libc_init_array+0x3c>)
 800658e:	1b64      	subs	r4, r4, r5
 8006590:	10a4      	asrs	r4, r4, #2
 8006592:	2600      	movs	r6, #0
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	; (80065c8 <__libc_init_array+0x40>)
 800659a:	4c0c      	ldr	r4, [pc, #48]	; (80065cc <__libc_init_array+0x44>)
 800659c:	f001 f968 	bl	8007870 <_init>
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	2600      	movs	r6, #0
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	4798      	blx	r3
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	4798      	blx	r3
 80065bc:	3601      	adds	r6, #1
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	08007c08 	.word	0x08007c08
 80065c4:	08007c08 	.word	0x08007c08
 80065c8:	08007c08 	.word	0x08007c08
 80065cc:	08007c0c 	.word	0x08007c0c

080065d0 <memcpy>:
 80065d0:	440a      	add	r2, r1
 80065d2:	4291      	cmp	r1, r2
 80065d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065d8:	d100      	bne.n	80065dc <memcpy+0xc>
 80065da:	4770      	bx	lr
 80065dc:	b510      	push	{r4, lr}
 80065de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e6:	4291      	cmp	r1, r2
 80065e8:	d1f9      	bne.n	80065de <memcpy+0xe>
 80065ea:	bd10      	pop	{r4, pc}

080065ec <memset>:
 80065ec:	4402      	add	r2, r0
 80065ee:	4603      	mov	r3, r0
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d100      	bne.n	80065f6 <memset+0xa>
 80065f4:	4770      	bx	lr
 80065f6:	f803 1b01 	strb.w	r1, [r3], #1
 80065fa:	e7f9      	b.n	80065f0 <memset+0x4>

080065fc <sniprintf>:
 80065fc:	b40c      	push	{r2, r3}
 80065fe:	b530      	push	{r4, r5, lr}
 8006600:	4b17      	ldr	r3, [pc, #92]	; (8006660 <sniprintf+0x64>)
 8006602:	1e0c      	subs	r4, r1, #0
 8006604:	681d      	ldr	r5, [r3, #0]
 8006606:	b09d      	sub	sp, #116	; 0x74
 8006608:	da08      	bge.n	800661c <sniprintf+0x20>
 800660a:	238b      	movs	r3, #139	; 0x8b
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006612:	b01d      	add	sp, #116	; 0x74
 8006614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006618:	b002      	add	sp, #8
 800661a:	4770      	bx	lr
 800661c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006620:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006624:	bf14      	ite	ne
 8006626:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800662a:	4623      	moveq	r3, r4
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006634:	9002      	str	r0, [sp, #8]
 8006636:	9006      	str	r0, [sp, #24]
 8006638:	f8ad 3016 	strh.w	r3, [sp, #22]
 800663c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800663e:	ab21      	add	r3, sp, #132	; 0x84
 8006640:	a902      	add	r1, sp, #8
 8006642:	4628      	mov	r0, r5
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	f000 f8a9 	bl	800679c <_svfiprintf_r>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	bfbc      	itt	lt
 800664e:	238b      	movlt	r3, #139	; 0x8b
 8006650:	602b      	strlt	r3, [r5, #0]
 8006652:	2c00      	cmp	r4, #0
 8006654:	d0dd      	beq.n	8006612 <sniprintf+0x16>
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e7d9      	b.n	8006612 <sniprintf+0x16>
 800665e:	bf00      	nop
 8006660:	2000000c 	.word	0x2000000c

08006664 <siscanf>:
 8006664:	b40e      	push	{r1, r2, r3}
 8006666:	b530      	push	{r4, r5, lr}
 8006668:	b09c      	sub	sp, #112	; 0x70
 800666a:	ac1f      	add	r4, sp, #124	; 0x7c
 800666c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006670:	f854 5b04 	ldr.w	r5, [r4], #4
 8006674:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006678:	9002      	str	r0, [sp, #8]
 800667a:	9006      	str	r0, [sp, #24]
 800667c:	f7f9 fd80 	bl	8000180 <strlen>
 8006680:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <siscanf+0x4c>)
 8006682:	9003      	str	r0, [sp, #12]
 8006684:	9007      	str	r0, [sp, #28]
 8006686:	930b      	str	r3, [sp, #44]	; 0x2c
 8006688:	480a      	ldr	r0, [pc, #40]	; (80066b4 <siscanf+0x50>)
 800668a:	9401      	str	r4, [sp, #4]
 800668c:	2300      	movs	r3, #0
 800668e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006690:	9314      	str	r3, [sp, #80]	; 0x50
 8006692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006696:	f8ad 3016 	strh.w	r3, [sp, #22]
 800669a:	462a      	mov	r2, r5
 800669c:	4623      	mov	r3, r4
 800669e:	a902      	add	r1, sp, #8
 80066a0:	6800      	ldr	r0, [r0, #0]
 80066a2:	f000 f9d5 	bl	8006a50 <__ssvfiscanf_r>
 80066a6:	b01c      	add	sp, #112	; 0x70
 80066a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066ac:	b003      	add	sp, #12
 80066ae:	4770      	bx	lr
 80066b0:	080066b9 	.word	0x080066b9
 80066b4:	2000000c 	.word	0x2000000c

080066b8 <__seofread>:
 80066b8:	2000      	movs	r0, #0
 80066ba:	4770      	bx	lr

080066bc <strncmp>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	4603      	mov	r3, r0
 80066c0:	b172      	cbz	r2, 80066e0 <strncmp+0x24>
 80066c2:	3901      	subs	r1, #1
 80066c4:	1884      	adds	r4, r0, r2
 80066c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80066ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80066ce:	4290      	cmp	r0, r2
 80066d0:	d101      	bne.n	80066d6 <strncmp+0x1a>
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	d101      	bne.n	80066da <strncmp+0x1e>
 80066d6:	1a80      	subs	r0, r0, r2
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	2800      	cmp	r0, #0
 80066dc:	d1f3      	bne.n	80066c6 <strncmp+0xa>
 80066de:	e7fa      	b.n	80066d6 <strncmp+0x1a>
 80066e0:	4610      	mov	r0, r2
 80066e2:	e7f9      	b.n	80066d8 <strncmp+0x1c>

080066e4 <__ssputs_r>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	688e      	ldr	r6, [r1, #8]
 80066ea:	429e      	cmp	r6, r3
 80066ec:	4682      	mov	sl, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4690      	mov	r8, r2
 80066f2:	461f      	mov	r7, r3
 80066f4:	d838      	bhi.n	8006768 <__ssputs_r+0x84>
 80066f6:	898a      	ldrh	r2, [r1, #12]
 80066f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066fc:	d032      	beq.n	8006764 <__ssputs_r+0x80>
 80066fe:	6825      	ldr	r5, [r4, #0]
 8006700:	6909      	ldr	r1, [r1, #16]
 8006702:	eba5 0901 	sub.w	r9, r5, r1
 8006706:	6965      	ldr	r5, [r4, #20]
 8006708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800670c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006710:	3301      	adds	r3, #1
 8006712:	444b      	add	r3, r9
 8006714:	106d      	asrs	r5, r5, #1
 8006716:	429d      	cmp	r5, r3
 8006718:	bf38      	it	cc
 800671a:	461d      	movcc	r5, r3
 800671c:	0553      	lsls	r3, r2, #21
 800671e:	d531      	bpl.n	8006784 <__ssputs_r+0xa0>
 8006720:	4629      	mov	r1, r5
 8006722:	f000 ffdd 	bl	80076e0 <_malloc_r>
 8006726:	4606      	mov	r6, r0
 8006728:	b950      	cbnz	r0, 8006740 <__ssputs_r+0x5c>
 800672a:	230c      	movs	r3, #12
 800672c:	f8ca 3000 	str.w	r3, [sl]
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	6921      	ldr	r1, [r4, #16]
 8006742:	464a      	mov	r2, r9
 8006744:	f7ff ff44 	bl	80065d0 <memcpy>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800674e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	6126      	str	r6, [r4, #16]
 8006756:	6165      	str	r5, [r4, #20]
 8006758:	444e      	add	r6, r9
 800675a:	eba5 0509 	sub.w	r5, r5, r9
 800675e:	6026      	str	r6, [r4, #0]
 8006760:	60a5      	str	r5, [r4, #8]
 8006762:	463e      	mov	r6, r7
 8006764:	42be      	cmp	r6, r7
 8006766:	d900      	bls.n	800676a <__ssputs_r+0x86>
 8006768:	463e      	mov	r6, r7
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	4632      	mov	r2, r6
 800676e:	4641      	mov	r1, r8
 8006770:	f000 ff32 	bl	80075d8 <memmove>
 8006774:	68a3      	ldr	r3, [r4, #8]
 8006776:	1b9b      	subs	r3, r3, r6
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	4433      	add	r3, r6
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	2000      	movs	r0, #0
 8006782:	e7db      	b.n	800673c <__ssputs_r+0x58>
 8006784:	462a      	mov	r2, r5
 8006786:	f001 f81f 	bl	80077c8 <_realloc_r>
 800678a:	4606      	mov	r6, r0
 800678c:	2800      	cmp	r0, #0
 800678e:	d1e1      	bne.n	8006754 <__ssputs_r+0x70>
 8006790:	6921      	ldr	r1, [r4, #16]
 8006792:	4650      	mov	r0, sl
 8006794:	f000 ff3a 	bl	800760c <_free_r>
 8006798:	e7c7      	b.n	800672a <__ssputs_r+0x46>
	...

0800679c <_svfiprintf_r>:
 800679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	4698      	mov	r8, r3
 80067a2:	898b      	ldrh	r3, [r1, #12]
 80067a4:	061b      	lsls	r3, r3, #24
 80067a6:	b09d      	sub	sp, #116	; 0x74
 80067a8:	4607      	mov	r7, r0
 80067aa:	460d      	mov	r5, r1
 80067ac:	4614      	mov	r4, r2
 80067ae:	d50e      	bpl.n	80067ce <_svfiprintf_r+0x32>
 80067b0:	690b      	ldr	r3, [r1, #16]
 80067b2:	b963      	cbnz	r3, 80067ce <_svfiprintf_r+0x32>
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	f000 ff93 	bl	80076e0 <_malloc_r>
 80067ba:	6028      	str	r0, [r5, #0]
 80067bc:	6128      	str	r0, [r5, #16]
 80067be:	b920      	cbnz	r0, 80067ca <_svfiprintf_r+0x2e>
 80067c0:	230c      	movs	r3, #12
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c8:	e0d1      	b.n	800696e <_svfiprintf_r+0x1d2>
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	616b      	str	r3, [r5, #20]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9309      	str	r3, [sp, #36]	; 0x24
 80067d2:	2320      	movs	r3, #32
 80067d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067dc:	2330      	movs	r3, #48	; 0x30
 80067de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006988 <_svfiprintf_r+0x1ec>
 80067e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067e6:	f04f 0901 	mov.w	r9, #1
 80067ea:	4623      	mov	r3, r4
 80067ec:	469a      	mov	sl, r3
 80067ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f2:	b10a      	cbz	r2, 80067f8 <_svfiprintf_r+0x5c>
 80067f4:	2a25      	cmp	r2, #37	; 0x25
 80067f6:	d1f9      	bne.n	80067ec <_svfiprintf_r+0x50>
 80067f8:	ebba 0b04 	subs.w	fp, sl, r4
 80067fc:	d00b      	beq.n	8006816 <_svfiprintf_r+0x7a>
 80067fe:	465b      	mov	r3, fp
 8006800:	4622      	mov	r2, r4
 8006802:	4629      	mov	r1, r5
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ff6d 	bl	80066e4 <__ssputs_r>
 800680a:	3001      	adds	r0, #1
 800680c:	f000 80aa 	beq.w	8006964 <_svfiprintf_r+0x1c8>
 8006810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006812:	445a      	add	r2, fp
 8006814:	9209      	str	r2, [sp, #36]	; 0x24
 8006816:	f89a 3000 	ldrb.w	r3, [sl]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80a2 	beq.w	8006964 <_svfiprintf_r+0x1c8>
 8006820:	2300      	movs	r3, #0
 8006822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800682a:	f10a 0a01 	add.w	sl, sl, #1
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006836:	931a      	str	r3, [sp, #104]	; 0x68
 8006838:	4654      	mov	r4, sl
 800683a:	2205      	movs	r2, #5
 800683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006840:	4851      	ldr	r0, [pc, #324]	; (8006988 <_svfiprintf_r+0x1ec>)
 8006842:	f7f9 fca5 	bl	8000190 <memchr>
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	b9d8      	cbnz	r0, 8006882 <_svfiprintf_r+0xe6>
 800684a:	06d0      	lsls	r0, r2, #27
 800684c:	bf44      	itt	mi
 800684e:	2320      	movmi	r3, #32
 8006850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006854:	0711      	lsls	r1, r2, #28
 8006856:	bf44      	itt	mi
 8006858:	232b      	movmi	r3, #43	; 0x2b
 800685a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b2a      	cmp	r3, #42	; 0x2a
 8006864:	d015      	beq.n	8006892 <_svfiprintf_r+0xf6>
 8006866:	9a07      	ldr	r2, [sp, #28]
 8006868:	4654      	mov	r4, sl
 800686a:	2000      	movs	r0, #0
 800686c:	f04f 0c0a 	mov.w	ip, #10
 8006870:	4621      	mov	r1, r4
 8006872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006876:	3b30      	subs	r3, #48	; 0x30
 8006878:	2b09      	cmp	r3, #9
 800687a:	d94e      	bls.n	800691a <_svfiprintf_r+0x17e>
 800687c:	b1b0      	cbz	r0, 80068ac <_svfiprintf_r+0x110>
 800687e:	9207      	str	r2, [sp, #28]
 8006880:	e014      	b.n	80068ac <_svfiprintf_r+0x110>
 8006882:	eba0 0308 	sub.w	r3, r0, r8
 8006886:	fa09 f303 	lsl.w	r3, r9, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	46a2      	mov	sl, r4
 8006890:	e7d2      	b.n	8006838 <_svfiprintf_r+0x9c>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	1d19      	adds	r1, r3, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfbb      	ittet	lt
 800689e:	425b      	neglt	r3, r3
 80068a0:	f042 0202 	orrlt.w	r2, r2, #2
 80068a4:	9307      	strge	r3, [sp, #28]
 80068a6:	9307      	strlt	r3, [sp, #28]
 80068a8:	bfb8      	it	lt
 80068aa:	9204      	strlt	r2, [sp, #16]
 80068ac:	7823      	ldrb	r3, [r4, #0]
 80068ae:	2b2e      	cmp	r3, #46	; 0x2e
 80068b0:	d10c      	bne.n	80068cc <_svfiprintf_r+0x130>
 80068b2:	7863      	ldrb	r3, [r4, #1]
 80068b4:	2b2a      	cmp	r3, #42	; 0x2a
 80068b6:	d135      	bne.n	8006924 <_svfiprintf_r+0x188>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9203      	str	r2, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfb8      	it	lt
 80068c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068c8:	3402      	adds	r4, #2
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800698c <_svfiprintf_r+0x1f0>
 80068d0:	7821      	ldrb	r1, [r4, #0]
 80068d2:	2203      	movs	r2, #3
 80068d4:	4650      	mov	r0, sl
 80068d6:	f7f9 fc5b 	bl	8000190 <memchr>
 80068da:	b140      	cbz	r0, 80068ee <_svfiprintf_r+0x152>
 80068dc:	2340      	movs	r3, #64	; 0x40
 80068de:	eba0 000a 	sub.w	r0, r0, sl
 80068e2:	fa03 f000 	lsl.w	r0, r3, r0
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	4303      	orrs	r3, r0
 80068ea:	3401      	adds	r4, #1
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f2:	4827      	ldr	r0, [pc, #156]	; (8006990 <_svfiprintf_r+0x1f4>)
 80068f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068f8:	2206      	movs	r2, #6
 80068fa:	f7f9 fc49 	bl	8000190 <memchr>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d038      	beq.n	8006974 <_svfiprintf_r+0x1d8>
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <_svfiprintf_r+0x1f8>)
 8006904:	bb1b      	cbnz	r3, 800694e <_svfiprintf_r+0x1b2>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	3307      	adds	r3, #7
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	3308      	adds	r3, #8
 8006910:	9303      	str	r3, [sp, #12]
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	4433      	add	r3, r6
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	e767      	b.n	80067ea <_svfiprintf_r+0x4e>
 800691a:	fb0c 3202 	mla	r2, ip, r2, r3
 800691e:	460c      	mov	r4, r1
 8006920:	2001      	movs	r0, #1
 8006922:	e7a5      	b.n	8006870 <_svfiprintf_r+0xd4>
 8006924:	2300      	movs	r3, #0
 8006926:	3401      	adds	r4, #1
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	4619      	mov	r1, r3
 800692c:	f04f 0c0a 	mov.w	ip, #10
 8006930:	4620      	mov	r0, r4
 8006932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006936:	3a30      	subs	r2, #48	; 0x30
 8006938:	2a09      	cmp	r2, #9
 800693a:	d903      	bls.n	8006944 <_svfiprintf_r+0x1a8>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0c5      	beq.n	80068cc <_svfiprintf_r+0x130>
 8006940:	9105      	str	r1, [sp, #20]
 8006942:	e7c3      	b.n	80068cc <_svfiprintf_r+0x130>
 8006944:	fb0c 2101 	mla	r1, ip, r1, r2
 8006948:	4604      	mov	r4, r0
 800694a:	2301      	movs	r3, #1
 800694c:	e7f0      	b.n	8006930 <_svfiprintf_r+0x194>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4b10      	ldr	r3, [pc, #64]	; (8006998 <_svfiprintf_r+0x1fc>)
 8006956:	a904      	add	r1, sp, #16
 8006958:	4638      	mov	r0, r7
 800695a:	f3af 8000 	nop.w
 800695e:	1c42      	adds	r2, r0, #1
 8006960:	4606      	mov	r6, r0
 8006962:	d1d6      	bne.n	8006912 <_svfiprintf_r+0x176>
 8006964:	89ab      	ldrh	r3, [r5, #12]
 8006966:	065b      	lsls	r3, r3, #25
 8006968:	f53f af2c 	bmi.w	80067c4 <_svfiprintf_r+0x28>
 800696c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800696e:	b01d      	add	sp, #116	; 0x74
 8006970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	462a      	mov	r2, r5
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <_svfiprintf_r+0x1fc>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	4638      	mov	r0, r7
 8006980:	f000 fa4c 	bl	8006e1c <_printf_i>
 8006984:	e7eb      	b.n	800695e <_svfiprintf_r+0x1c2>
 8006986:	bf00      	nop
 8006988:	08007a50 	.word	0x08007a50
 800698c:	08007a56 	.word	0x08007a56
 8006990:	08007a5a 	.word	0x08007a5a
 8006994:	00000000 	.word	0x00000000
 8006998:	080066e5 	.word	0x080066e5

0800699c <_sungetc_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	1c4b      	adds	r3, r1, #1
 80069a0:	4614      	mov	r4, r2
 80069a2:	d103      	bne.n	80069ac <_sungetc_r+0x10>
 80069a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80069a8:	4628      	mov	r0, r5
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	8993      	ldrh	r3, [r2, #12]
 80069ae:	f023 0320 	bic.w	r3, r3, #32
 80069b2:	8193      	strh	r3, [r2, #12]
 80069b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b6:	6852      	ldr	r2, [r2, #4]
 80069b8:	b2cd      	uxtb	r5, r1
 80069ba:	b18b      	cbz	r3, 80069e0 <_sungetc_r+0x44>
 80069bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069be:	4293      	cmp	r3, r2
 80069c0:	dd08      	ble.n	80069d4 <_sungetc_r+0x38>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	1e5a      	subs	r2, r3, #1
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80069cc:	6863      	ldr	r3, [r4, #4]
 80069ce:	3301      	adds	r3, #1
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	e7e9      	b.n	80069a8 <_sungetc_r+0xc>
 80069d4:	4621      	mov	r1, r4
 80069d6:	f000 fdc3 	bl	8007560 <__submore>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d0f1      	beq.n	80069c2 <_sungetc_r+0x26>
 80069de:	e7e1      	b.n	80069a4 <_sungetc_r+0x8>
 80069e0:	6921      	ldr	r1, [r4, #16]
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	b151      	cbz	r1, 80069fc <_sungetc_r+0x60>
 80069e6:	4299      	cmp	r1, r3
 80069e8:	d208      	bcs.n	80069fc <_sungetc_r+0x60>
 80069ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80069ee:	42a9      	cmp	r1, r5
 80069f0:	d104      	bne.n	80069fc <_sungetc_r+0x60>
 80069f2:	3b01      	subs	r3, #1
 80069f4:	3201      	adds	r2, #1
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	6062      	str	r2, [r4, #4]
 80069fa:	e7d5      	b.n	80069a8 <_sungetc_r+0xc>
 80069fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a04:	6363      	str	r3, [r4, #52]	; 0x34
 8006a06:	2303      	movs	r3, #3
 8006a08:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7dc      	b.n	80069d0 <_sungetc_r+0x34>

08006a16 <__ssrefill_r>:
 8006a16:	b510      	push	{r4, lr}
 8006a18:	460c      	mov	r4, r1
 8006a1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006a1c:	b169      	cbz	r1, 8006a3a <__ssrefill_r+0x24>
 8006a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a22:	4299      	cmp	r1, r3
 8006a24:	d001      	beq.n	8006a2a <__ssrefill_r+0x14>
 8006a26:	f000 fdf1 	bl	800760c <_free_r>
 8006a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a2c:	6063      	str	r3, [r4, #4]
 8006a2e:	2000      	movs	r0, #0
 8006a30:	6360      	str	r0, [r4, #52]	; 0x34
 8006a32:	b113      	cbz	r3, 8006a3a <__ssrefill_r+0x24>
 8006a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6063      	str	r3, [r4, #4]
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f043 0320 	orr.w	r3, r3, #32
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a4e:	e7f3      	b.n	8006a38 <__ssrefill_r+0x22>

08006a50 <__ssvfiscanf_r>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	460c      	mov	r4, r1
 8006a56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006a60:	49a6      	ldr	r1, [pc, #664]	; (8006cfc <__ssvfiscanf_r+0x2ac>)
 8006a62:	91a0      	str	r1, [sp, #640]	; 0x280
 8006a64:	f10d 0804 	add.w	r8, sp, #4
 8006a68:	49a5      	ldr	r1, [pc, #660]	; (8006d00 <__ssvfiscanf_r+0x2b0>)
 8006a6a:	4fa6      	ldr	r7, [pc, #664]	; (8006d04 <__ssvfiscanf_r+0x2b4>)
 8006a6c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006d08 <__ssvfiscanf_r+0x2b8>
 8006a70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006a74:	4606      	mov	r6, r0
 8006a76:	91a1      	str	r1, [sp, #644]	; 0x284
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	7813      	ldrb	r3, [r2, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 815a 	beq.w	8006d36 <__ssvfiscanf_r+0x2e6>
 8006a82:	5dd9      	ldrb	r1, [r3, r7]
 8006a84:	f011 0108 	ands.w	r1, r1, #8
 8006a88:	f102 0501 	add.w	r5, r2, #1
 8006a8c:	d019      	beq.n	8006ac2 <__ssvfiscanf_r+0x72>
 8006a8e:	6863      	ldr	r3, [r4, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dd0f      	ble.n	8006ab4 <__ssvfiscanf_r+0x64>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	5cba      	ldrb	r2, [r7, r2]
 8006a9a:	0712      	lsls	r2, r2, #28
 8006a9c:	d401      	bmi.n	8006aa2 <__ssvfiscanf_r+0x52>
 8006a9e:	462a      	mov	r2, r5
 8006aa0:	e7eb      	b.n	8006a7a <__ssvfiscanf_r+0x2a>
 8006aa2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006aa4:	3201      	adds	r2, #1
 8006aa6:	9245      	str	r2, [sp, #276]	; 0x114
 8006aa8:	6862      	ldr	r2, [r4, #4]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	3a01      	subs	r2, #1
 8006aae:	6062      	str	r2, [r4, #4]
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	e7ec      	b.n	8006a8e <__ssvfiscanf_r+0x3e>
 8006ab4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4798      	blx	r3
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d0e9      	beq.n	8006a94 <__ssvfiscanf_r+0x44>
 8006ac0:	e7ed      	b.n	8006a9e <__ssvfiscanf_r+0x4e>
 8006ac2:	2b25      	cmp	r3, #37	; 0x25
 8006ac4:	d012      	beq.n	8006aec <__ssvfiscanf_r+0x9c>
 8006ac6:	469a      	mov	sl, r3
 8006ac8:	6863      	ldr	r3, [r4, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f340 8091 	ble.w	8006bf2 <__ssvfiscanf_r+0x1a2>
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	7813      	ldrb	r3, [r2, #0]
 8006ad4:	4553      	cmp	r3, sl
 8006ad6:	f040 812e 	bne.w	8006d36 <__ssvfiscanf_r+0x2e6>
 8006ada:	6863      	ldr	r3, [r4, #4]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	6063      	str	r3, [r4, #4]
 8006ae0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006ae2:	3201      	adds	r2, #1
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	9345      	str	r3, [sp, #276]	; 0x114
 8006aea:	e7d8      	b.n	8006a9e <__ssvfiscanf_r+0x4e>
 8006aec:	9141      	str	r1, [sp, #260]	; 0x104
 8006aee:	9143      	str	r1, [sp, #268]	; 0x10c
 8006af0:	7853      	ldrb	r3, [r2, #1]
 8006af2:	2b2a      	cmp	r3, #42	; 0x2a
 8006af4:	bf02      	ittt	eq
 8006af6:	2310      	moveq	r3, #16
 8006af8:	1c95      	addeq	r5, r2, #2
 8006afa:	9341      	streq	r3, [sp, #260]	; 0x104
 8006afc:	220a      	movs	r2, #10
 8006afe:	46aa      	mov	sl, r5
 8006b00:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006b04:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006b08:	2b09      	cmp	r3, #9
 8006b0a:	d91d      	bls.n	8006b48 <__ssvfiscanf_r+0xf8>
 8006b0c:	487e      	ldr	r0, [pc, #504]	; (8006d08 <__ssvfiscanf_r+0x2b8>)
 8006b0e:	2203      	movs	r2, #3
 8006b10:	f7f9 fb3e 	bl	8000190 <memchr>
 8006b14:	b140      	cbz	r0, 8006b28 <__ssvfiscanf_r+0xd8>
 8006b16:	2301      	movs	r3, #1
 8006b18:	eba0 0009 	sub.w	r0, r0, r9
 8006b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8006b20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006b22:	4318      	orrs	r0, r3
 8006b24:	9041      	str	r0, [sp, #260]	; 0x104
 8006b26:	4655      	mov	r5, sl
 8006b28:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b2c:	2b78      	cmp	r3, #120	; 0x78
 8006b2e:	d806      	bhi.n	8006b3e <__ssvfiscanf_r+0xee>
 8006b30:	2b57      	cmp	r3, #87	; 0x57
 8006b32:	d810      	bhi.n	8006b56 <__ssvfiscanf_r+0x106>
 8006b34:	2b25      	cmp	r3, #37	; 0x25
 8006b36:	d0c6      	beq.n	8006ac6 <__ssvfiscanf_r+0x76>
 8006b38:	d856      	bhi.n	8006be8 <__ssvfiscanf_r+0x198>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d064      	beq.n	8006c08 <__ssvfiscanf_r+0x1b8>
 8006b3e:	2303      	movs	r3, #3
 8006b40:	9347      	str	r3, [sp, #284]	; 0x11c
 8006b42:	230a      	movs	r3, #10
 8006b44:	9342      	str	r3, [sp, #264]	; 0x108
 8006b46:	e071      	b.n	8006c2c <__ssvfiscanf_r+0x1dc>
 8006b48:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006b4a:	fb02 1103 	mla	r1, r2, r3, r1
 8006b4e:	3930      	subs	r1, #48	; 0x30
 8006b50:	9143      	str	r1, [sp, #268]	; 0x10c
 8006b52:	4655      	mov	r5, sl
 8006b54:	e7d3      	b.n	8006afe <__ssvfiscanf_r+0xae>
 8006b56:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006b5a:	2a20      	cmp	r2, #32
 8006b5c:	d8ef      	bhi.n	8006b3e <__ssvfiscanf_r+0xee>
 8006b5e:	a101      	add	r1, pc, #4	; (adr r1, 8006b64 <__ssvfiscanf_r+0x114>)
 8006b60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b64:	08006c17 	.word	0x08006c17
 8006b68:	08006b3f 	.word	0x08006b3f
 8006b6c:	08006b3f 	.word	0x08006b3f
 8006b70:	08006c75 	.word	0x08006c75
 8006b74:	08006b3f 	.word	0x08006b3f
 8006b78:	08006b3f 	.word	0x08006b3f
 8006b7c:	08006b3f 	.word	0x08006b3f
 8006b80:	08006b3f 	.word	0x08006b3f
 8006b84:	08006b3f 	.word	0x08006b3f
 8006b88:	08006b3f 	.word	0x08006b3f
 8006b8c:	08006b3f 	.word	0x08006b3f
 8006b90:	08006c8b 	.word	0x08006c8b
 8006b94:	08006c61 	.word	0x08006c61
 8006b98:	08006bef 	.word	0x08006bef
 8006b9c:	08006bef 	.word	0x08006bef
 8006ba0:	08006bef 	.word	0x08006bef
 8006ba4:	08006b3f 	.word	0x08006b3f
 8006ba8:	08006c65 	.word	0x08006c65
 8006bac:	08006b3f 	.word	0x08006b3f
 8006bb0:	08006b3f 	.word	0x08006b3f
 8006bb4:	08006b3f 	.word	0x08006b3f
 8006bb8:	08006b3f 	.word	0x08006b3f
 8006bbc:	08006c9b 	.word	0x08006c9b
 8006bc0:	08006c6d 	.word	0x08006c6d
 8006bc4:	08006c0f 	.word	0x08006c0f
 8006bc8:	08006b3f 	.word	0x08006b3f
 8006bcc:	08006b3f 	.word	0x08006b3f
 8006bd0:	08006c97 	.word	0x08006c97
 8006bd4:	08006b3f 	.word	0x08006b3f
 8006bd8:	08006c61 	.word	0x08006c61
 8006bdc:	08006b3f 	.word	0x08006b3f
 8006be0:	08006b3f 	.word	0x08006b3f
 8006be4:	08006c17 	.word	0x08006c17
 8006be8:	3b45      	subs	r3, #69	; 0x45
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d8a7      	bhi.n	8006b3e <__ssvfiscanf_r+0xee>
 8006bee:	2305      	movs	r3, #5
 8006bf0:	e01b      	b.n	8006c2a <__ssvfiscanf_r+0x1da>
 8006bf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	4798      	blx	r3
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f43f af68 	beq.w	8006ad0 <__ssvfiscanf_r+0x80>
 8006c00:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f040 808d 	bne.w	8006d22 <__ssvfiscanf_r+0x2d2>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c0c:	e08f      	b.n	8006d2e <__ssvfiscanf_r+0x2de>
 8006c0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006c10:	f042 0220 	orr.w	r2, r2, #32
 8006c14:	9241      	str	r2, [sp, #260]	; 0x104
 8006c16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1c:	9241      	str	r2, [sp, #260]	; 0x104
 8006c1e:	2210      	movs	r2, #16
 8006c20:	2b6f      	cmp	r3, #111	; 0x6f
 8006c22:	9242      	str	r2, [sp, #264]	; 0x108
 8006c24:	bf34      	ite	cc
 8006c26:	2303      	movcc	r3, #3
 8006c28:	2304      	movcs	r3, #4
 8006c2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8006c2c:	6863      	ldr	r3, [r4, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dd42      	ble.n	8006cb8 <__ssvfiscanf_r+0x268>
 8006c32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c34:	0659      	lsls	r1, r3, #25
 8006c36:	d404      	bmi.n	8006c42 <__ssvfiscanf_r+0x1f2>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	5cba      	ldrb	r2, [r7, r2]
 8006c3e:	0712      	lsls	r2, r2, #28
 8006c40:	d441      	bmi.n	8006cc6 <__ssvfiscanf_r+0x276>
 8006c42:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	dc50      	bgt.n	8006cea <__ssvfiscanf_r+0x29a>
 8006c48:	466b      	mov	r3, sp
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	a941      	add	r1, sp, #260	; 0x104
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f000 fa0a 	bl	8007068 <_scanf_chars>
 8006c54:	2801      	cmp	r0, #1
 8006c56:	d06e      	beq.n	8006d36 <__ssvfiscanf_r+0x2e6>
 8006c58:	2802      	cmp	r0, #2
 8006c5a:	f47f af20 	bne.w	8006a9e <__ssvfiscanf_r+0x4e>
 8006c5e:	e7cf      	b.n	8006c00 <__ssvfiscanf_r+0x1b0>
 8006c60:	220a      	movs	r2, #10
 8006c62:	e7dd      	b.n	8006c20 <__ssvfiscanf_r+0x1d0>
 8006c64:	2300      	movs	r3, #0
 8006c66:	9342      	str	r3, [sp, #264]	; 0x108
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e7de      	b.n	8006c2a <__ssvfiscanf_r+0x1da>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	9342      	str	r3, [sp, #264]	; 0x108
 8006c70:	2304      	movs	r3, #4
 8006c72:	e7da      	b.n	8006c2a <__ssvfiscanf_r+0x1da>
 8006c74:	4629      	mov	r1, r5
 8006c76:	4640      	mov	r0, r8
 8006c78:	f000 fb48 	bl	800730c <__sccl>
 8006c7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c82:	9341      	str	r3, [sp, #260]	; 0x104
 8006c84:	4605      	mov	r5, r0
 8006c86:	2301      	movs	r3, #1
 8006c88:	e7cf      	b.n	8006c2a <__ssvfiscanf_r+0x1da>
 8006c8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c90:	9341      	str	r3, [sp, #260]	; 0x104
 8006c92:	2300      	movs	r3, #0
 8006c94:	e7c9      	b.n	8006c2a <__ssvfiscanf_r+0x1da>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e7c7      	b.n	8006c2a <__ssvfiscanf_r+0x1da>
 8006c9a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006c9c:	06c3      	lsls	r3, r0, #27
 8006c9e:	f53f aefe 	bmi.w	8006a9e <__ssvfiscanf_r+0x4e>
 8006ca2:	9b00      	ldr	r3, [sp, #0]
 8006ca4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006ca6:	1d19      	adds	r1, r3, #4
 8006ca8:	9100      	str	r1, [sp, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f010 0f01 	tst.w	r0, #1
 8006cb0:	bf14      	ite	ne
 8006cb2:	801a      	strhne	r2, [r3, #0]
 8006cb4:	601a      	streq	r2, [r3, #0]
 8006cb6:	e6f2      	b.n	8006a9e <__ssvfiscanf_r+0x4e>
 8006cb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4798      	blx	r3
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d0b6      	beq.n	8006c32 <__ssvfiscanf_r+0x1e2>
 8006cc4:	e79c      	b.n	8006c00 <__ssvfiscanf_r+0x1b0>
 8006cc6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006cc8:	3201      	adds	r2, #1
 8006cca:	9245      	str	r2, [sp, #276]	; 0x114
 8006ccc:	6862      	ldr	r2, [r4, #4]
 8006cce:	3a01      	subs	r2, #1
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	6062      	str	r2, [r4, #4]
 8006cd4:	dd02      	ble.n	8006cdc <__ssvfiscanf_r+0x28c>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	e7ad      	b.n	8006c38 <__ssvfiscanf_r+0x1e8>
 8006cdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	4798      	blx	r3
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d0a7      	beq.n	8006c38 <__ssvfiscanf_r+0x1e8>
 8006ce8:	e78a      	b.n	8006c00 <__ssvfiscanf_r+0x1b0>
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	dc0e      	bgt.n	8006d0c <__ssvfiscanf_r+0x2bc>
 8006cee:	466b      	mov	r3, sp
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	a941      	add	r1, sp, #260	; 0x104
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f000 fa11 	bl	800711c <_scanf_i>
 8006cfa:	e7ab      	b.n	8006c54 <__ssvfiscanf_r+0x204>
 8006cfc:	0800699d 	.word	0x0800699d
 8006d00:	08006a17 	.word	0x08006a17
 8006d04:	08007a9f 	.word	0x08007a9f
 8006d08:	08007a56 	.word	0x08007a56
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <__ssvfiscanf_r+0x2ec>)
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f43f aec5 	beq.w	8006a9e <__ssvfiscanf_r+0x4e>
 8006d14:	466b      	mov	r3, sp
 8006d16:	4622      	mov	r2, r4
 8006d18:	a941      	add	r1, sp, #260	; 0x104
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f3af 8000 	nop.w
 8006d20:	e798      	b.n	8006c54 <__ssvfiscanf_r+0x204>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d28:	bf18      	it	ne
 8006d2a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006d2e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006d38:	e7f9      	b.n	8006d2e <__ssvfiscanf_r+0x2de>
 8006d3a:	bf00      	nop
 8006d3c:	00000000 	.word	0x00000000

08006d40 <_printf_common>:
 8006d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d44:	4616      	mov	r6, r2
 8006d46:	4699      	mov	r9, r3
 8006d48:	688a      	ldr	r2, [r1, #8]
 8006d4a:	690b      	ldr	r3, [r1, #16]
 8006d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	bfb8      	it	lt
 8006d54:	4613      	movlt	r3, r2
 8006d56:	6033      	str	r3, [r6, #0]
 8006d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	b10a      	cbz	r2, 8006d66 <_printf_common+0x26>
 8006d62:	3301      	adds	r3, #1
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	0699      	lsls	r1, r3, #26
 8006d6a:	bf42      	ittt	mi
 8006d6c:	6833      	ldrmi	r3, [r6, #0]
 8006d6e:	3302      	addmi	r3, #2
 8006d70:	6033      	strmi	r3, [r6, #0]
 8006d72:	6825      	ldr	r5, [r4, #0]
 8006d74:	f015 0506 	ands.w	r5, r5, #6
 8006d78:	d106      	bne.n	8006d88 <_printf_common+0x48>
 8006d7a:	f104 0a19 	add.w	sl, r4, #25
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	6832      	ldr	r2, [r6, #0]
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dc26      	bgt.n	8006dd6 <_printf_common+0x96>
 8006d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d8c:	1e13      	subs	r3, r2, #0
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	bf18      	it	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	0692      	lsls	r2, r2, #26
 8006d96:	d42b      	bmi.n	8006df0 <_printf_common+0xb0>
 8006d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d01e      	beq.n	8006de4 <_printf_common+0xa4>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	68e5      	ldr	r5, [r4, #12]
 8006daa:	6832      	ldr	r2, [r6, #0]
 8006dac:	f003 0306 	and.w	r3, r3, #6
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	bf08      	it	eq
 8006db4:	1aad      	subeq	r5, r5, r2
 8006db6:	68a3      	ldr	r3, [r4, #8]
 8006db8:	6922      	ldr	r2, [r4, #16]
 8006dba:	bf0c      	ite	eq
 8006dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dc0:	2500      	movne	r5, #0
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	bfc4      	itt	gt
 8006dc6:	1a9b      	subgt	r3, r3, r2
 8006dc8:	18ed      	addgt	r5, r5, r3
 8006dca:	2600      	movs	r6, #0
 8006dcc:	341a      	adds	r4, #26
 8006dce:	42b5      	cmp	r5, r6
 8006dd0:	d11a      	bne.n	8006e08 <_printf_common+0xc8>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e008      	b.n	8006de8 <_printf_common+0xa8>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4652      	mov	r2, sl
 8006dda:	4649      	mov	r1, r9
 8006ddc:	4638      	mov	r0, r7
 8006dde:	47c0      	blx	r8
 8006de0:	3001      	adds	r0, #1
 8006de2:	d103      	bne.n	8006dec <_printf_common+0xac>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dec:	3501      	adds	r5, #1
 8006dee:	e7c6      	b.n	8006d7e <_printf_common+0x3e>
 8006df0:	18e1      	adds	r1, r4, r3
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	2030      	movs	r0, #48	; 0x30
 8006df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dfa:	4422      	add	r2, r4
 8006dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e04:	3302      	adds	r3, #2
 8006e06:	e7c7      	b.n	8006d98 <_printf_common+0x58>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c0      	blx	r8
 8006e12:	3001      	adds	r0, #1
 8006e14:	d0e6      	beq.n	8006de4 <_printf_common+0xa4>
 8006e16:	3601      	adds	r6, #1
 8006e18:	e7d9      	b.n	8006dce <_printf_common+0x8e>
	...

08006e1c <_printf_i>:
 8006e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	7e0f      	ldrb	r7, [r1, #24]
 8006e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e24:	2f78      	cmp	r7, #120	; 0x78
 8006e26:	4691      	mov	r9, r2
 8006e28:	4680      	mov	r8, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	469a      	mov	sl, r3
 8006e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e32:	d807      	bhi.n	8006e44 <_printf_i+0x28>
 8006e34:	2f62      	cmp	r7, #98	; 0x62
 8006e36:	d80a      	bhi.n	8006e4e <_printf_i+0x32>
 8006e38:	2f00      	cmp	r7, #0
 8006e3a:	f000 80d8 	beq.w	8006fee <_printf_i+0x1d2>
 8006e3e:	2f58      	cmp	r7, #88	; 0x58
 8006e40:	f000 80a3 	beq.w	8006f8a <_printf_i+0x16e>
 8006e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e4c:	e03a      	b.n	8006ec4 <_printf_i+0xa8>
 8006e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e52:	2b15      	cmp	r3, #21
 8006e54:	d8f6      	bhi.n	8006e44 <_printf_i+0x28>
 8006e56:	a101      	add	r1, pc, #4	; (adr r1, 8006e5c <_printf_i+0x40>)
 8006e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e5c:	08006eb5 	.word	0x08006eb5
 8006e60:	08006ec9 	.word	0x08006ec9
 8006e64:	08006e45 	.word	0x08006e45
 8006e68:	08006e45 	.word	0x08006e45
 8006e6c:	08006e45 	.word	0x08006e45
 8006e70:	08006e45 	.word	0x08006e45
 8006e74:	08006ec9 	.word	0x08006ec9
 8006e78:	08006e45 	.word	0x08006e45
 8006e7c:	08006e45 	.word	0x08006e45
 8006e80:	08006e45 	.word	0x08006e45
 8006e84:	08006e45 	.word	0x08006e45
 8006e88:	08006fd5 	.word	0x08006fd5
 8006e8c:	08006ef9 	.word	0x08006ef9
 8006e90:	08006fb7 	.word	0x08006fb7
 8006e94:	08006e45 	.word	0x08006e45
 8006e98:	08006e45 	.word	0x08006e45
 8006e9c:	08006ff7 	.word	0x08006ff7
 8006ea0:	08006e45 	.word	0x08006e45
 8006ea4:	08006ef9 	.word	0x08006ef9
 8006ea8:	08006e45 	.word	0x08006e45
 8006eac:	08006e45 	.word	0x08006e45
 8006eb0:	08006fbf 	.word	0x08006fbf
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	1d1a      	adds	r2, r3, #4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	602a      	str	r2, [r5, #0]
 8006ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0a3      	b.n	8007010 <_printf_i+0x1f4>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	6829      	ldr	r1, [r5, #0]
 8006ecc:	0606      	lsls	r6, r0, #24
 8006ece:	f101 0304 	add.w	r3, r1, #4
 8006ed2:	d50a      	bpl.n	8006eea <_printf_i+0xce>
 8006ed4:	680e      	ldr	r6, [r1, #0]
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	da03      	bge.n	8006ee4 <_printf_i+0xc8>
 8006edc:	232d      	movs	r3, #45	; 0x2d
 8006ede:	4276      	negs	r6, r6
 8006ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee4:	485e      	ldr	r0, [pc, #376]	; (8007060 <_printf_i+0x244>)
 8006ee6:	230a      	movs	r3, #10
 8006ee8:	e019      	b.n	8006f1e <_printf_i+0x102>
 8006eea:	680e      	ldr	r6, [r1, #0]
 8006eec:	602b      	str	r3, [r5, #0]
 8006eee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ef2:	bf18      	it	ne
 8006ef4:	b236      	sxthne	r6, r6
 8006ef6:	e7ef      	b.n	8006ed8 <_printf_i+0xbc>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	6820      	ldr	r0, [r4, #0]
 8006efc:	1d19      	adds	r1, r3, #4
 8006efe:	6029      	str	r1, [r5, #0]
 8006f00:	0601      	lsls	r1, r0, #24
 8006f02:	d501      	bpl.n	8006f08 <_printf_i+0xec>
 8006f04:	681e      	ldr	r6, [r3, #0]
 8006f06:	e002      	b.n	8006f0e <_printf_i+0xf2>
 8006f08:	0646      	lsls	r6, r0, #25
 8006f0a:	d5fb      	bpl.n	8006f04 <_printf_i+0xe8>
 8006f0c:	881e      	ldrh	r6, [r3, #0]
 8006f0e:	4854      	ldr	r0, [pc, #336]	; (8007060 <_printf_i+0x244>)
 8006f10:	2f6f      	cmp	r7, #111	; 0x6f
 8006f12:	bf0c      	ite	eq
 8006f14:	2308      	moveq	r3, #8
 8006f16:	230a      	movne	r3, #10
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f1e:	6865      	ldr	r5, [r4, #4]
 8006f20:	60a5      	str	r5, [r4, #8]
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	bfa2      	ittt	ge
 8006f26:	6821      	ldrge	r1, [r4, #0]
 8006f28:	f021 0104 	bicge.w	r1, r1, #4
 8006f2c:	6021      	strge	r1, [r4, #0]
 8006f2e:	b90e      	cbnz	r6, 8006f34 <_printf_i+0x118>
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	d04d      	beq.n	8006fd0 <_printf_i+0x1b4>
 8006f34:	4615      	mov	r5, r2
 8006f36:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f3a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f3e:	5dc7      	ldrb	r7, [r0, r7]
 8006f40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f44:	4637      	mov	r7, r6
 8006f46:	42bb      	cmp	r3, r7
 8006f48:	460e      	mov	r6, r1
 8006f4a:	d9f4      	bls.n	8006f36 <_printf_i+0x11a>
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d10b      	bne.n	8006f68 <_printf_i+0x14c>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	07de      	lsls	r6, r3, #31
 8006f54:	d508      	bpl.n	8006f68 <_printf_i+0x14c>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	6861      	ldr	r1, [r4, #4]
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	bfde      	ittt	le
 8006f5e:	2330      	movle	r3, #48	; 0x30
 8006f60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f68:	1b52      	subs	r2, r2, r5
 8006f6a:	6122      	str	r2, [r4, #16]
 8006f6c:	f8cd a000 	str.w	sl, [sp]
 8006f70:	464b      	mov	r3, r9
 8006f72:	aa03      	add	r2, sp, #12
 8006f74:	4621      	mov	r1, r4
 8006f76:	4640      	mov	r0, r8
 8006f78:	f7ff fee2 	bl	8006d40 <_printf_common>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d14c      	bne.n	800701a <_printf_i+0x1fe>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f84:	b004      	add	sp, #16
 8006f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8a:	4835      	ldr	r0, [pc, #212]	; (8007060 <_printf_i+0x244>)
 8006f8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f90:	6829      	ldr	r1, [r5, #0]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f98:	6029      	str	r1, [r5, #0]
 8006f9a:	061d      	lsls	r5, r3, #24
 8006f9c:	d514      	bpl.n	8006fc8 <_printf_i+0x1ac>
 8006f9e:	07df      	lsls	r7, r3, #31
 8006fa0:	bf44      	itt	mi
 8006fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fa6:	6023      	strmi	r3, [r4, #0]
 8006fa8:	b91e      	cbnz	r6, 8006fb2 <_printf_i+0x196>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	f023 0320 	bic.w	r3, r3, #32
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	2310      	movs	r3, #16
 8006fb4:	e7b0      	b.n	8006f18 <_printf_i+0xfc>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	f043 0320 	orr.w	r3, r3, #32
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	2378      	movs	r3, #120	; 0x78
 8006fc0:	4828      	ldr	r0, [pc, #160]	; (8007064 <_printf_i+0x248>)
 8006fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fc6:	e7e3      	b.n	8006f90 <_printf_i+0x174>
 8006fc8:	0659      	lsls	r1, r3, #25
 8006fca:	bf48      	it	mi
 8006fcc:	b2b6      	uxthmi	r6, r6
 8006fce:	e7e6      	b.n	8006f9e <_printf_i+0x182>
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	e7bb      	b.n	8006f4c <_printf_i+0x130>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	6826      	ldr	r6, [r4, #0]
 8006fd8:	6961      	ldr	r1, [r4, #20]
 8006fda:	1d18      	adds	r0, r3, #4
 8006fdc:	6028      	str	r0, [r5, #0]
 8006fde:	0635      	lsls	r5, r6, #24
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	d501      	bpl.n	8006fe8 <_printf_i+0x1cc>
 8006fe4:	6019      	str	r1, [r3, #0]
 8006fe6:	e002      	b.n	8006fee <_printf_i+0x1d2>
 8006fe8:	0670      	lsls	r0, r6, #25
 8006fea:	d5fb      	bpl.n	8006fe4 <_printf_i+0x1c8>
 8006fec:	8019      	strh	r1, [r3, #0]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	4615      	mov	r5, r2
 8006ff4:	e7ba      	b.n	8006f6c <_printf_i+0x150>
 8006ff6:	682b      	ldr	r3, [r5, #0]
 8006ff8:	1d1a      	adds	r2, r3, #4
 8006ffa:	602a      	str	r2, [r5, #0]
 8006ffc:	681d      	ldr	r5, [r3, #0]
 8006ffe:	6862      	ldr	r2, [r4, #4]
 8007000:	2100      	movs	r1, #0
 8007002:	4628      	mov	r0, r5
 8007004:	f7f9 f8c4 	bl	8000190 <memchr>
 8007008:	b108      	cbz	r0, 800700e <_printf_i+0x1f2>
 800700a:	1b40      	subs	r0, r0, r5
 800700c:	6060      	str	r0, [r4, #4]
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	2300      	movs	r3, #0
 8007014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007018:	e7a8      	b.n	8006f6c <_printf_i+0x150>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	462a      	mov	r2, r5
 800701e:	4649      	mov	r1, r9
 8007020:	4640      	mov	r0, r8
 8007022:	47d0      	blx	sl
 8007024:	3001      	adds	r0, #1
 8007026:	d0ab      	beq.n	8006f80 <_printf_i+0x164>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	079b      	lsls	r3, r3, #30
 800702c:	d413      	bmi.n	8007056 <_printf_i+0x23a>
 800702e:	68e0      	ldr	r0, [r4, #12]
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	4298      	cmp	r0, r3
 8007034:	bfb8      	it	lt
 8007036:	4618      	movlt	r0, r3
 8007038:	e7a4      	b.n	8006f84 <_printf_i+0x168>
 800703a:	2301      	movs	r3, #1
 800703c:	4632      	mov	r2, r6
 800703e:	4649      	mov	r1, r9
 8007040:	4640      	mov	r0, r8
 8007042:	47d0      	blx	sl
 8007044:	3001      	adds	r0, #1
 8007046:	d09b      	beq.n	8006f80 <_printf_i+0x164>
 8007048:	3501      	adds	r5, #1
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	9903      	ldr	r1, [sp, #12]
 800704e:	1a5b      	subs	r3, r3, r1
 8007050:	42ab      	cmp	r3, r5
 8007052:	dcf2      	bgt.n	800703a <_printf_i+0x21e>
 8007054:	e7eb      	b.n	800702e <_printf_i+0x212>
 8007056:	2500      	movs	r5, #0
 8007058:	f104 0619 	add.w	r6, r4, #25
 800705c:	e7f5      	b.n	800704a <_printf_i+0x22e>
 800705e:	bf00      	nop
 8007060:	08007a61 	.word	0x08007a61
 8007064:	08007a72 	.word	0x08007a72

08007068 <_scanf_chars>:
 8007068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800706c:	4615      	mov	r5, r2
 800706e:	688a      	ldr	r2, [r1, #8]
 8007070:	4680      	mov	r8, r0
 8007072:	460c      	mov	r4, r1
 8007074:	b932      	cbnz	r2, 8007084 <_scanf_chars+0x1c>
 8007076:	698a      	ldr	r2, [r1, #24]
 8007078:	2a00      	cmp	r2, #0
 800707a:	bf0c      	ite	eq
 800707c:	2201      	moveq	r2, #1
 800707e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007082:	608a      	str	r2, [r1, #8]
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007118 <_scanf_chars+0xb0>
 800708a:	06d1      	lsls	r1, r2, #27
 800708c:	bf5f      	itttt	pl
 800708e:	681a      	ldrpl	r2, [r3, #0]
 8007090:	1d11      	addpl	r1, r2, #4
 8007092:	6019      	strpl	r1, [r3, #0]
 8007094:	6816      	ldrpl	r6, [r2, #0]
 8007096:	2700      	movs	r7, #0
 8007098:	69a0      	ldr	r0, [r4, #24]
 800709a:	b188      	cbz	r0, 80070c0 <_scanf_chars+0x58>
 800709c:	2801      	cmp	r0, #1
 800709e:	d107      	bne.n	80070b0 <_scanf_chars+0x48>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	6963      	ldr	r3, [r4, #20]
 80070a6:	5c9b      	ldrb	r3, [r3, r2]
 80070a8:	b953      	cbnz	r3, 80070c0 <_scanf_chars+0x58>
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	d031      	beq.n	8007112 <_scanf_chars+0xaa>
 80070ae:	e022      	b.n	80070f6 <_scanf_chars+0x8e>
 80070b0:	2802      	cmp	r0, #2
 80070b2:	d120      	bne.n	80070f6 <_scanf_chars+0x8e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80070bc:	071b      	lsls	r3, r3, #28
 80070be:	d41a      	bmi.n	80070f6 <_scanf_chars+0x8e>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	06da      	lsls	r2, r3, #27
 80070c4:	bf5e      	ittt	pl
 80070c6:	682b      	ldrpl	r3, [r5, #0]
 80070c8:	781b      	ldrbpl	r3, [r3, #0]
 80070ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80070ce:	682a      	ldr	r2, [r5, #0]
 80070d0:	686b      	ldr	r3, [r5, #4]
 80070d2:	3201      	adds	r2, #1
 80070d4:	602a      	str	r2, [r5, #0]
 80070d6:	68a2      	ldr	r2, [r4, #8]
 80070d8:	3b01      	subs	r3, #1
 80070da:	3a01      	subs	r2, #1
 80070dc:	606b      	str	r3, [r5, #4]
 80070de:	3701      	adds	r7, #1
 80070e0:	60a2      	str	r2, [r4, #8]
 80070e2:	b142      	cbz	r2, 80070f6 <_scanf_chars+0x8e>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	dcd7      	bgt.n	8007098 <_scanf_chars+0x30>
 80070e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070ec:	4629      	mov	r1, r5
 80070ee:	4640      	mov	r0, r8
 80070f0:	4798      	blx	r3
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d0d0      	beq.n	8007098 <_scanf_chars+0x30>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	f013 0310 	ands.w	r3, r3, #16
 80070fc:	d105      	bne.n	800710a <_scanf_chars+0xa2>
 80070fe:	68e2      	ldr	r2, [r4, #12]
 8007100:	3201      	adds	r2, #1
 8007102:	60e2      	str	r2, [r4, #12]
 8007104:	69a2      	ldr	r2, [r4, #24]
 8007106:	b102      	cbz	r2, 800710a <_scanf_chars+0xa2>
 8007108:	7033      	strb	r3, [r6, #0]
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	443b      	add	r3, r7
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	2000      	movs	r0, #0
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	bf00      	nop
 8007118:	08007a9f 	.word	0x08007a9f

0800711c <_scanf_i>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	4698      	mov	r8, r3
 8007122:	4b76      	ldr	r3, [pc, #472]	; (80072fc <_scanf_i+0x1e0>)
 8007124:	460c      	mov	r4, r1
 8007126:	4682      	mov	sl, r0
 8007128:	4616      	mov	r6, r2
 800712a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800712e:	b087      	sub	sp, #28
 8007130:	ab03      	add	r3, sp, #12
 8007132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007136:	4b72      	ldr	r3, [pc, #456]	; (8007300 <_scanf_i+0x1e4>)
 8007138:	69a1      	ldr	r1, [r4, #24]
 800713a:	4a72      	ldr	r2, [pc, #456]	; (8007304 <_scanf_i+0x1e8>)
 800713c:	2903      	cmp	r1, #3
 800713e:	bf18      	it	ne
 8007140:	461a      	movne	r2, r3
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	1e5a      	subs	r2, r3, #1
 8007148:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800714c:	bf88      	it	hi
 800714e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007152:	4627      	mov	r7, r4
 8007154:	bf82      	ittt	hi
 8007156:	eb03 0905 	addhi.w	r9, r3, r5
 800715a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800715e:	60a3      	strhi	r3, [r4, #8]
 8007160:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007164:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007168:	bf98      	it	ls
 800716a:	f04f 0900 	movls.w	r9, #0
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	463d      	mov	r5, r7
 8007172:	f04f 0b00 	mov.w	fp, #0
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	ab03      	add	r3, sp, #12
 800717a:	7809      	ldrb	r1, [r1, #0]
 800717c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007180:	2202      	movs	r2, #2
 8007182:	f7f9 f805 	bl	8000190 <memchr>
 8007186:	b328      	cbz	r0, 80071d4 <_scanf_i+0xb8>
 8007188:	f1bb 0f01 	cmp.w	fp, #1
 800718c:	d159      	bne.n	8007242 <_scanf_i+0x126>
 800718e:	6862      	ldr	r2, [r4, #4]
 8007190:	b92a      	cbnz	r2, 800719e <_scanf_i+0x82>
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	2308      	movs	r3, #8
 8007196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	6022      	str	r2, [r4, #0]
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80071a4:	6022      	str	r2, [r4, #0]
 80071a6:	68a2      	ldr	r2, [r4, #8]
 80071a8:	1e51      	subs	r1, r2, #1
 80071aa:	60a1      	str	r1, [r4, #8]
 80071ac:	b192      	cbz	r2, 80071d4 <_scanf_i+0xb8>
 80071ae:	6832      	ldr	r2, [r6, #0]
 80071b0:	1c51      	adds	r1, r2, #1
 80071b2:	6031      	str	r1, [r6, #0]
 80071b4:	7812      	ldrb	r2, [r2, #0]
 80071b6:	f805 2b01 	strb.w	r2, [r5], #1
 80071ba:	6872      	ldr	r2, [r6, #4]
 80071bc:	3a01      	subs	r2, #1
 80071be:	2a00      	cmp	r2, #0
 80071c0:	6072      	str	r2, [r6, #4]
 80071c2:	dc07      	bgt.n	80071d4 <_scanf_i+0xb8>
 80071c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80071c8:	4631      	mov	r1, r6
 80071ca:	4650      	mov	r0, sl
 80071cc:	4790      	blx	r2
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f040 8085 	bne.w	80072de <_scanf_i+0x1c2>
 80071d4:	f10b 0b01 	add.w	fp, fp, #1
 80071d8:	f1bb 0f03 	cmp.w	fp, #3
 80071dc:	d1cb      	bne.n	8007176 <_scanf_i+0x5a>
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	b90b      	cbnz	r3, 80071e6 <_scanf_i+0xca>
 80071e2:	230a      	movs	r3, #10
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	6863      	ldr	r3, [r4, #4]
 80071e8:	4947      	ldr	r1, [pc, #284]	; (8007308 <_scanf_i+0x1ec>)
 80071ea:	6960      	ldr	r0, [r4, #20]
 80071ec:	1ac9      	subs	r1, r1, r3
 80071ee:	f000 f88d 	bl	800730c <__sccl>
 80071f2:	f04f 0b00 	mov.w	fp, #0
 80071f6:	68a3      	ldr	r3, [r4, #8]
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d03d      	beq.n	800727a <_scanf_i+0x15e>
 80071fe:	6831      	ldr	r1, [r6, #0]
 8007200:	6960      	ldr	r0, [r4, #20]
 8007202:	f891 c000 	ldrb.w	ip, [r1]
 8007206:	f810 000c 	ldrb.w	r0, [r0, ip]
 800720a:	2800      	cmp	r0, #0
 800720c:	d035      	beq.n	800727a <_scanf_i+0x15e>
 800720e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007212:	d124      	bne.n	800725e <_scanf_i+0x142>
 8007214:	0510      	lsls	r0, r2, #20
 8007216:	d522      	bpl.n	800725e <_scanf_i+0x142>
 8007218:	f10b 0b01 	add.w	fp, fp, #1
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	d003      	beq.n	800722a <_scanf_i+0x10e>
 8007222:	3301      	adds	r3, #1
 8007224:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	6873      	ldr	r3, [r6, #4]
 800722c:	3b01      	subs	r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	6073      	str	r3, [r6, #4]
 8007232:	dd1b      	ble.n	800726c <_scanf_i+0x150>
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	68a3      	ldr	r3, [r4, #8]
 800723c:	3b01      	subs	r3, #1
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	e7d9      	b.n	80071f6 <_scanf_i+0xda>
 8007242:	f1bb 0f02 	cmp.w	fp, #2
 8007246:	d1ae      	bne.n	80071a6 <_scanf_i+0x8a>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800724e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007252:	d1bf      	bne.n	80071d4 <_scanf_i+0xb8>
 8007254:	2310      	movs	r3, #16
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725c:	e7a2      	b.n	80071a4 <_scanf_i+0x88>
 800725e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	780b      	ldrb	r3, [r1, #0]
 8007266:	f805 3b01 	strb.w	r3, [r5], #1
 800726a:	e7de      	b.n	800722a <_scanf_i+0x10e>
 800726c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007270:	4631      	mov	r1, r6
 8007272:	4650      	mov	r0, sl
 8007274:	4798      	blx	r3
 8007276:	2800      	cmp	r0, #0
 8007278:	d0df      	beq.n	800723a <_scanf_i+0x11e>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	05db      	lsls	r3, r3, #23
 800727e:	d50d      	bpl.n	800729c <_scanf_i+0x180>
 8007280:	42bd      	cmp	r5, r7
 8007282:	d909      	bls.n	8007298 <_scanf_i+0x17c>
 8007284:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800728c:	4632      	mov	r2, r6
 800728e:	4650      	mov	r0, sl
 8007290:	4798      	blx	r3
 8007292:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007296:	464d      	mov	r5, r9
 8007298:	42bd      	cmp	r5, r7
 800729a:	d02d      	beq.n	80072f8 <_scanf_i+0x1dc>
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	f012 0210 	ands.w	r2, r2, #16
 80072a2:	d113      	bne.n	80072cc <_scanf_i+0x1b0>
 80072a4:	702a      	strb	r2, [r5, #0]
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	9e01      	ldr	r6, [sp, #4]
 80072aa:	4639      	mov	r1, r7
 80072ac:	4650      	mov	r0, sl
 80072ae:	47b0      	blx	r6
 80072b0:	6821      	ldr	r1, [r4, #0]
 80072b2:	f8d8 3000 	ldr.w	r3, [r8]
 80072b6:	f011 0f20 	tst.w	r1, #32
 80072ba:	d013      	beq.n	80072e4 <_scanf_i+0x1c8>
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	f8c8 2000 	str.w	r2, [r8]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6018      	str	r0, [r3, #0]
 80072c6:	68e3      	ldr	r3, [r4, #12]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60e3      	str	r3, [r4, #12]
 80072cc:	1bed      	subs	r5, r5, r7
 80072ce:	44ab      	add	fp, r5
 80072d0:	6925      	ldr	r5, [r4, #16]
 80072d2:	445d      	add	r5, fp
 80072d4:	6125      	str	r5, [r4, #16]
 80072d6:	2000      	movs	r0, #0
 80072d8:	b007      	add	sp, #28
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	f04f 0b00 	mov.w	fp, #0
 80072e2:	e7ca      	b.n	800727a <_scanf_i+0x15e>
 80072e4:	1d1a      	adds	r2, r3, #4
 80072e6:	f8c8 2000 	str.w	r2, [r8]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f011 0f01 	tst.w	r1, #1
 80072f0:	bf14      	ite	ne
 80072f2:	8018      	strhne	r0, [r3, #0]
 80072f4:	6018      	streq	r0, [r3, #0]
 80072f6:	e7e6      	b.n	80072c6 <_scanf_i+0x1aa>
 80072f8:	2001      	movs	r0, #1
 80072fa:	e7ed      	b.n	80072d8 <_scanf_i+0x1bc>
 80072fc:	0800797c 	.word	0x0800797c
 8007300:	0800755d 	.word	0x0800755d
 8007304:	08007475 	.word	0x08007475
 8007308:	08007a9c 	.word	0x08007a9c

0800730c <__sccl>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	780b      	ldrb	r3, [r1, #0]
 8007310:	4604      	mov	r4, r0
 8007312:	2b5e      	cmp	r3, #94	; 0x5e
 8007314:	bf0b      	itete	eq
 8007316:	784b      	ldrbeq	r3, [r1, #1]
 8007318:	1c48      	addne	r0, r1, #1
 800731a:	1c88      	addeq	r0, r1, #2
 800731c:	2200      	movne	r2, #0
 800731e:	bf08      	it	eq
 8007320:	2201      	moveq	r2, #1
 8007322:	1e61      	subs	r1, r4, #1
 8007324:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007328:	f801 2f01 	strb.w	r2, [r1, #1]!
 800732c:	42a9      	cmp	r1, r5
 800732e:	d1fb      	bne.n	8007328 <__sccl+0x1c>
 8007330:	b90b      	cbnz	r3, 8007336 <__sccl+0x2a>
 8007332:	3801      	subs	r0, #1
 8007334:	bd70      	pop	{r4, r5, r6, pc}
 8007336:	f082 0201 	eor.w	r2, r2, #1
 800733a:	54e2      	strb	r2, [r4, r3]
 800733c:	4605      	mov	r5, r0
 800733e:	4628      	mov	r0, r5
 8007340:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007344:	292d      	cmp	r1, #45	; 0x2d
 8007346:	d006      	beq.n	8007356 <__sccl+0x4a>
 8007348:	295d      	cmp	r1, #93	; 0x5d
 800734a:	d0f3      	beq.n	8007334 <__sccl+0x28>
 800734c:	b909      	cbnz	r1, 8007352 <__sccl+0x46>
 800734e:	4628      	mov	r0, r5
 8007350:	e7f0      	b.n	8007334 <__sccl+0x28>
 8007352:	460b      	mov	r3, r1
 8007354:	e7f1      	b.n	800733a <__sccl+0x2e>
 8007356:	786e      	ldrb	r6, [r5, #1]
 8007358:	2e5d      	cmp	r6, #93	; 0x5d
 800735a:	d0fa      	beq.n	8007352 <__sccl+0x46>
 800735c:	42b3      	cmp	r3, r6
 800735e:	dcf8      	bgt.n	8007352 <__sccl+0x46>
 8007360:	3502      	adds	r5, #2
 8007362:	4619      	mov	r1, r3
 8007364:	3101      	adds	r1, #1
 8007366:	428e      	cmp	r6, r1
 8007368:	5462      	strb	r2, [r4, r1]
 800736a:	dcfb      	bgt.n	8007364 <__sccl+0x58>
 800736c:	1af1      	subs	r1, r6, r3
 800736e:	3901      	subs	r1, #1
 8007370:	1c58      	adds	r0, r3, #1
 8007372:	42b3      	cmp	r3, r6
 8007374:	bfa8      	it	ge
 8007376:	2100      	movge	r1, #0
 8007378:	1843      	adds	r3, r0, r1
 800737a:	e7e0      	b.n	800733e <__sccl+0x32>

0800737c <_strtol_l.constprop.0>:
 800737c:	2b01      	cmp	r3, #1
 800737e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007382:	4680      	mov	r8, r0
 8007384:	d001      	beq.n	800738a <_strtol_l.constprop.0+0xe>
 8007386:	2b24      	cmp	r3, #36	; 0x24
 8007388:	d906      	bls.n	8007398 <_strtol_l.constprop.0+0x1c>
 800738a:	f7ff f8f7 	bl	800657c <__errno>
 800738e:	2316      	movs	r3, #22
 8007390:	6003      	str	r3, [r0, #0]
 8007392:	2000      	movs	r0, #0
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	4f35      	ldr	r7, [pc, #212]	; (8007470 <_strtol_l.constprop.0+0xf4>)
 800739a:	460d      	mov	r5, r1
 800739c:	4628      	mov	r0, r5
 800739e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073a2:	5de6      	ldrb	r6, [r4, r7]
 80073a4:	f016 0608 	ands.w	r6, r6, #8
 80073a8:	d1f8      	bne.n	800739c <_strtol_l.constprop.0+0x20>
 80073aa:	2c2d      	cmp	r4, #45	; 0x2d
 80073ac:	d12f      	bne.n	800740e <_strtol_l.constprop.0+0x92>
 80073ae:	782c      	ldrb	r4, [r5, #0]
 80073b0:	2601      	movs	r6, #1
 80073b2:	1c85      	adds	r5, r0, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d057      	beq.n	8007468 <_strtol_l.constprop.0+0xec>
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d109      	bne.n	80073d0 <_strtol_l.constprop.0+0x54>
 80073bc:	2c30      	cmp	r4, #48	; 0x30
 80073be:	d107      	bne.n	80073d0 <_strtol_l.constprop.0+0x54>
 80073c0:	7828      	ldrb	r0, [r5, #0]
 80073c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80073c6:	2858      	cmp	r0, #88	; 0x58
 80073c8:	d149      	bne.n	800745e <_strtol_l.constprop.0+0xe2>
 80073ca:	786c      	ldrb	r4, [r5, #1]
 80073cc:	2310      	movs	r3, #16
 80073ce:	3502      	adds	r5, #2
 80073d0:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80073d4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80073d8:	2700      	movs	r7, #0
 80073da:	fbbe f9f3 	udiv	r9, lr, r3
 80073de:	4638      	mov	r0, r7
 80073e0:	fb03 ea19 	mls	sl, r3, r9, lr
 80073e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80073e8:	f1bc 0f09 	cmp.w	ip, #9
 80073ec:	d814      	bhi.n	8007418 <_strtol_l.constprop.0+0x9c>
 80073ee:	4664      	mov	r4, ip
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	dd22      	ble.n	800743a <_strtol_l.constprop.0+0xbe>
 80073f4:	2f00      	cmp	r7, #0
 80073f6:	db1d      	blt.n	8007434 <_strtol_l.constprop.0+0xb8>
 80073f8:	4581      	cmp	r9, r0
 80073fa:	d31b      	bcc.n	8007434 <_strtol_l.constprop.0+0xb8>
 80073fc:	d101      	bne.n	8007402 <_strtol_l.constprop.0+0x86>
 80073fe:	45a2      	cmp	sl, r4
 8007400:	db18      	blt.n	8007434 <_strtol_l.constprop.0+0xb8>
 8007402:	fb00 4003 	mla	r0, r0, r3, r4
 8007406:	2701      	movs	r7, #1
 8007408:	f815 4b01 	ldrb.w	r4, [r5], #1
 800740c:	e7ea      	b.n	80073e4 <_strtol_l.constprop.0+0x68>
 800740e:	2c2b      	cmp	r4, #43	; 0x2b
 8007410:	bf04      	itt	eq
 8007412:	782c      	ldrbeq	r4, [r5, #0]
 8007414:	1c85      	addeq	r5, r0, #2
 8007416:	e7cd      	b.n	80073b4 <_strtol_l.constprop.0+0x38>
 8007418:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800741c:	f1bc 0f19 	cmp.w	ip, #25
 8007420:	d801      	bhi.n	8007426 <_strtol_l.constprop.0+0xaa>
 8007422:	3c37      	subs	r4, #55	; 0x37
 8007424:	e7e4      	b.n	80073f0 <_strtol_l.constprop.0+0x74>
 8007426:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800742a:	f1bc 0f19 	cmp.w	ip, #25
 800742e:	d804      	bhi.n	800743a <_strtol_l.constprop.0+0xbe>
 8007430:	3c57      	subs	r4, #87	; 0x57
 8007432:	e7dd      	b.n	80073f0 <_strtol_l.constprop.0+0x74>
 8007434:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007438:	e7e6      	b.n	8007408 <_strtol_l.constprop.0+0x8c>
 800743a:	2f00      	cmp	r7, #0
 800743c:	da07      	bge.n	800744e <_strtol_l.constprop.0+0xd2>
 800743e:	2322      	movs	r3, #34	; 0x22
 8007440:	f8c8 3000 	str.w	r3, [r8]
 8007444:	4670      	mov	r0, lr
 8007446:	2a00      	cmp	r2, #0
 8007448:	d0a4      	beq.n	8007394 <_strtol_l.constprop.0+0x18>
 800744a:	1e69      	subs	r1, r5, #1
 800744c:	e005      	b.n	800745a <_strtol_l.constprop.0+0xde>
 800744e:	b106      	cbz	r6, 8007452 <_strtol_l.constprop.0+0xd6>
 8007450:	4240      	negs	r0, r0
 8007452:	2a00      	cmp	r2, #0
 8007454:	d09e      	beq.n	8007394 <_strtol_l.constprop.0+0x18>
 8007456:	2f00      	cmp	r7, #0
 8007458:	d1f7      	bne.n	800744a <_strtol_l.constprop.0+0xce>
 800745a:	6011      	str	r1, [r2, #0]
 800745c:	e79a      	b.n	8007394 <_strtol_l.constprop.0+0x18>
 800745e:	2430      	movs	r4, #48	; 0x30
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1b5      	bne.n	80073d0 <_strtol_l.constprop.0+0x54>
 8007464:	2308      	movs	r3, #8
 8007466:	e7b3      	b.n	80073d0 <_strtol_l.constprop.0+0x54>
 8007468:	2c30      	cmp	r4, #48	; 0x30
 800746a:	d0a9      	beq.n	80073c0 <_strtol_l.constprop.0+0x44>
 800746c:	230a      	movs	r3, #10
 800746e:	e7af      	b.n	80073d0 <_strtol_l.constprop.0+0x54>
 8007470:	08007a9f 	.word	0x08007a9f

08007474 <_strtol_r>:
 8007474:	f7ff bf82 	b.w	800737c <_strtol_l.constprop.0>

08007478 <_strtoul_l.constprop.0>:
 8007478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800747c:	4f36      	ldr	r7, [pc, #216]	; (8007558 <_strtoul_l.constprop.0+0xe0>)
 800747e:	4686      	mov	lr, r0
 8007480:	460d      	mov	r5, r1
 8007482:	4628      	mov	r0, r5
 8007484:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007488:	5de6      	ldrb	r6, [r4, r7]
 800748a:	f016 0608 	ands.w	r6, r6, #8
 800748e:	d1f8      	bne.n	8007482 <_strtoul_l.constprop.0+0xa>
 8007490:	2c2d      	cmp	r4, #45	; 0x2d
 8007492:	d12f      	bne.n	80074f4 <_strtoul_l.constprop.0+0x7c>
 8007494:	782c      	ldrb	r4, [r5, #0]
 8007496:	2601      	movs	r6, #1
 8007498:	1c85      	adds	r5, r0, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d057      	beq.n	800754e <_strtoul_l.constprop.0+0xd6>
 800749e:	2b10      	cmp	r3, #16
 80074a0:	d109      	bne.n	80074b6 <_strtoul_l.constprop.0+0x3e>
 80074a2:	2c30      	cmp	r4, #48	; 0x30
 80074a4:	d107      	bne.n	80074b6 <_strtoul_l.constprop.0+0x3e>
 80074a6:	7828      	ldrb	r0, [r5, #0]
 80074a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80074ac:	2858      	cmp	r0, #88	; 0x58
 80074ae:	d149      	bne.n	8007544 <_strtoul_l.constprop.0+0xcc>
 80074b0:	786c      	ldrb	r4, [r5, #1]
 80074b2:	2310      	movs	r3, #16
 80074b4:	3502      	adds	r5, #2
 80074b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80074ba:	2700      	movs	r7, #0
 80074bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80074c0:	fb03 f908 	mul.w	r9, r3, r8
 80074c4:	ea6f 0909 	mvn.w	r9, r9
 80074c8:	4638      	mov	r0, r7
 80074ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80074ce:	f1bc 0f09 	cmp.w	ip, #9
 80074d2:	d814      	bhi.n	80074fe <_strtoul_l.constprop.0+0x86>
 80074d4:	4664      	mov	r4, ip
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	dd22      	ble.n	8007520 <_strtoul_l.constprop.0+0xa8>
 80074da:	2f00      	cmp	r7, #0
 80074dc:	db1d      	blt.n	800751a <_strtoul_l.constprop.0+0xa2>
 80074de:	4580      	cmp	r8, r0
 80074e0:	d31b      	bcc.n	800751a <_strtoul_l.constprop.0+0xa2>
 80074e2:	d101      	bne.n	80074e8 <_strtoul_l.constprop.0+0x70>
 80074e4:	45a1      	cmp	r9, r4
 80074e6:	db18      	blt.n	800751a <_strtoul_l.constprop.0+0xa2>
 80074e8:	fb00 4003 	mla	r0, r0, r3, r4
 80074ec:	2701      	movs	r7, #1
 80074ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074f2:	e7ea      	b.n	80074ca <_strtoul_l.constprop.0+0x52>
 80074f4:	2c2b      	cmp	r4, #43	; 0x2b
 80074f6:	bf04      	itt	eq
 80074f8:	782c      	ldrbeq	r4, [r5, #0]
 80074fa:	1c85      	addeq	r5, r0, #2
 80074fc:	e7cd      	b.n	800749a <_strtoul_l.constprop.0+0x22>
 80074fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007502:	f1bc 0f19 	cmp.w	ip, #25
 8007506:	d801      	bhi.n	800750c <_strtoul_l.constprop.0+0x94>
 8007508:	3c37      	subs	r4, #55	; 0x37
 800750a:	e7e4      	b.n	80074d6 <_strtoul_l.constprop.0+0x5e>
 800750c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007510:	f1bc 0f19 	cmp.w	ip, #25
 8007514:	d804      	bhi.n	8007520 <_strtoul_l.constprop.0+0xa8>
 8007516:	3c57      	subs	r4, #87	; 0x57
 8007518:	e7dd      	b.n	80074d6 <_strtoul_l.constprop.0+0x5e>
 800751a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800751e:	e7e6      	b.n	80074ee <_strtoul_l.constprop.0+0x76>
 8007520:	2f00      	cmp	r7, #0
 8007522:	da07      	bge.n	8007534 <_strtoul_l.constprop.0+0xbc>
 8007524:	2322      	movs	r3, #34	; 0x22
 8007526:	f8ce 3000 	str.w	r3, [lr]
 800752a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800752e:	b932      	cbnz	r2, 800753e <_strtoul_l.constprop.0+0xc6>
 8007530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007534:	b106      	cbz	r6, 8007538 <_strtoul_l.constprop.0+0xc0>
 8007536:	4240      	negs	r0, r0
 8007538:	2a00      	cmp	r2, #0
 800753a:	d0f9      	beq.n	8007530 <_strtoul_l.constprop.0+0xb8>
 800753c:	b107      	cbz	r7, 8007540 <_strtoul_l.constprop.0+0xc8>
 800753e:	1e69      	subs	r1, r5, #1
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	e7f5      	b.n	8007530 <_strtoul_l.constprop.0+0xb8>
 8007544:	2430      	movs	r4, #48	; 0x30
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1b5      	bne.n	80074b6 <_strtoul_l.constprop.0+0x3e>
 800754a:	2308      	movs	r3, #8
 800754c:	e7b3      	b.n	80074b6 <_strtoul_l.constprop.0+0x3e>
 800754e:	2c30      	cmp	r4, #48	; 0x30
 8007550:	d0a9      	beq.n	80074a6 <_strtoul_l.constprop.0+0x2e>
 8007552:	230a      	movs	r3, #10
 8007554:	e7af      	b.n	80074b6 <_strtoul_l.constprop.0+0x3e>
 8007556:	bf00      	nop
 8007558:	08007a9f 	.word	0x08007a9f

0800755c <_strtoul_r>:
 800755c:	f7ff bf8c 	b.w	8007478 <_strtoul_l.constprop.0>

08007560 <__submore>:
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800756c:	4299      	cmp	r1, r3
 800756e:	d11d      	bne.n	80075ac <__submore+0x4c>
 8007570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007574:	f000 f8b4 	bl	80076e0 <_malloc_r>
 8007578:	b918      	cbnz	r0, 8007582 <__submore+0x22>
 800757a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800757e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007586:	63a3      	str	r3, [r4, #56]	; 0x38
 8007588:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800758c:	6360      	str	r0, [r4, #52]	; 0x34
 800758e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007592:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007596:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800759a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800759e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80075a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80075a6:	6020      	str	r0, [r4, #0]
 80075a8:	2000      	movs	r0, #0
 80075aa:	e7e8      	b.n	800757e <__submore+0x1e>
 80075ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80075ae:	0077      	lsls	r7, r6, #1
 80075b0:	463a      	mov	r2, r7
 80075b2:	f000 f909 	bl	80077c8 <_realloc_r>
 80075b6:	4605      	mov	r5, r0
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d0de      	beq.n	800757a <__submore+0x1a>
 80075bc:	eb00 0806 	add.w	r8, r0, r6
 80075c0:	4601      	mov	r1, r0
 80075c2:	4632      	mov	r2, r6
 80075c4:	4640      	mov	r0, r8
 80075c6:	f7ff f803 	bl	80065d0 <memcpy>
 80075ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80075ce:	f8c4 8000 	str.w	r8, [r4]
 80075d2:	e7e9      	b.n	80075a8 <__submore+0x48>

080075d4 <__retarget_lock_acquire_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <__retarget_lock_release_recursive>:
 80075d6:	4770      	bx	lr

080075d8 <memmove>:
 80075d8:	4288      	cmp	r0, r1
 80075da:	b510      	push	{r4, lr}
 80075dc:	eb01 0402 	add.w	r4, r1, r2
 80075e0:	d902      	bls.n	80075e8 <memmove+0x10>
 80075e2:	4284      	cmp	r4, r0
 80075e4:	4623      	mov	r3, r4
 80075e6:	d807      	bhi.n	80075f8 <memmove+0x20>
 80075e8:	1e43      	subs	r3, r0, #1
 80075ea:	42a1      	cmp	r1, r4
 80075ec:	d008      	beq.n	8007600 <memmove+0x28>
 80075ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075f6:	e7f8      	b.n	80075ea <memmove+0x12>
 80075f8:	4402      	add	r2, r0
 80075fa:	4601      	mov	r1, r0
 80075fc:	428a      	cmp	r2, r1
 80075fe:	d100      	bne.n	8007602 <memmove+0x2a>
 8007600:	bd10      	pop	{r4, pc}
 8007602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800760a:	e7f7      	b.n	80075fc <memmove+0x24>

0800760c <_free_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4605      	mov	r5, r0
 8007610:	2900      	cmp	r1, #0
 8007612:	d041      	beq.n	8007698 <_free_r+0x8c>
 8007614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007618:	1f0c      	subs	r4, r1, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	bfb8      	it	lt
 800761e:	18e4      	addlt	r4, r4, r3
 8007620:	f000 f912 	bl	8007848 <__malloc_lock>
 8007624:	4a1d      	ldr	r2, [pc, #116]	; (800769c <_free_r+0x90>)
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	b933      	cbnz	r3, 8007638 <_free_r+0x2c>
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	6014      	str	r4, [r2, #0]
 800762e:	4628      	mov	r0, r5
 8007630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007634:	f000 b90e 	b.w	8007854 <__malloc_unlock>
 8007638:	42a3      	cmp	r3, r4
 800763a:	d908      	bls.n	800764e <_free_r+0x42>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	1821      	adds	r1, r4, r0
 8007640:	428b      	cmp	r3, r1
 8007642:	bf01      	itttt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	1809      	addeq	r1, r1, r0
 800764a:	6021      	streq	r1, [r4, #0]
 800764c:	e7ed      	b.n	800762a <_free_r+0x1e>
 800764e:	461a      	mov	r2, r3
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	b10b      	cbz	r3, 8007658 <_free_r+0x4c>
 8007654:	42a3      	cmp	r3, r4
 8007656:	d9fa      	bls.n	800764e <_free_r+0x42>
 8007658:	6811      	ldr	r1, [r2, #0]
 800765a:	1850      	adds	r0, r2, r1
 800765c:	42a0      	cmp	r0, r4
 800765e:	d10b      	bne.n	8007678 <_free_r+0x6c>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	4401      	add	r1, r0
 8007664:	1850      	adds	r0, r2, r1
 8007666:	4283      	cmp	r3, r0
 8007668:	6011      	str	r1, [r2, #0]
 800766a:	d1e0      	bne.n	800762e <_free_r+0x22>
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	6053      	str	r3, [r2, #4]
 8007672:	4401      	add	r1, r0
 8007674:	6011      	str	r1, [r2, #0]
 8007676:	e7da      	b.n	800762e <_free_r+0x22>
 8007678:	d902      	bls.n	8007680 <_free_r+0x74>
 800767a:	230c      	movs	r3, #12
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	e7d6      	b.n	800762e <_free_r+0x22>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	1821      	adds	r1, r4, r0
 8007684:	428b      	cmp	r3, r1
 8007686:	bf04      	itt	eq
 8007688:	6819      	ldreq	r1, [r3, #0]
 800768a:	685b      	ldreq	r3, [r3, #4]
 800768c:	6063      	str	r3, [r4, #4]
 800768e:	bf04      	itt	eq
 8007690:	1809      	addeq	r1, r1, r0
 8007692:	6021      	streq	r1, [r4, #0]
 8007694:	6054      	str	r4, [r2, #4]
 8007696:	e7ca      	b.n	800762e <_free_r+0x22>
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	bf00      	nop
 800769c:	20000624 	.word	0x20000624

080076a0 <sbrk_aligned>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	4e0e      	ldr	r6, [pc, #56]	; (80076dc <sbrk_aligned+0x3c>)
 80076a4:	460c      	mov	r4, r1
 80076a6:	6831      	ldr	r1, [r6, #0]
 80076a8:	4605      	mov	r5, r0
 80076aa:	b911      	cbnz	r1, 80076b2 <sbrk_aligned+0x12>
 80076ac:	f000 f8bc 	bl	8007828 <_sbrk_r>
 80076b0:	6030      	str	r0, [r6, #0]
 80076b2:	4621      	mov	r1, r4
 80076b4:	4628      	mov	r0, r5
 80076b6:	f000 f8b7 	bl	8007828 <_sbrk_r>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d00a      	beq.n	80076d4 <sbrk_aligned+0x34>
 80076be:	1cc4      	adds	r4, r0, #3
 80076c0:	f024 0403 	bic.w	r4, r4, #3
 80076c4:	42a0      	cmp	r0, r4
 80076c6:	d007      	beq.n	80076d8 <sbrk_aligned+0x38>
 80076c8:	1a21      	subs	r1, r4, r0
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f8ac 	bl	8007828 <_sbrk_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	d101      	bne.n	80076d8 <sbrk_aligned+0x38>
 80076d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076d8:	4620      	mov	r0, r4
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	20000628 	.word	0x20000628

080076e0 <_malloc_r>:
 80076e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e4:	1ccd      	adds	r5, r1, #3
 80076e6:	f025 0503 	bic.w	r5, r5, #3
 80076ea:	3508      	adds	r5, #8
 80076ec:	2d0c      	cmp	r5, #12
 80076ee:	bf38      	it	cc
 80076f0:	250c      	movcc	r5, #12
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	4607      	mov	r7, r0
 80076f6:	db01      	blt.n	80076fc <_malloc_r+0x1c>
 80076f8:	42a9      	cmp	r1, r5
 80076fa:	d905      	bls.n	8007708 <_malloc_r+0x28>
 80076fc:	230c      	movs	r3, #12
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	2600      	movs	r6, #0
 8007702:	4630      	mov	r0, r6
 8007704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007708:	4e2e      	ldr	r6, [pc, #184]	; (80077c4 <_malloc_r+0xe4>)
 800770a:	f000 f89d 	bl	8007848 <__malloc_lock>
 800770e:	6833      	ldr	r3, [r6, #0]
 8007710:	461c      	mov	r4, r3
 8007712:	bb34      	cbnz	r4, 8007762 <_malloc_r+0x82>
 8007714:	4629      	mov	r1, r5
 8007716:	4638      	mov	r0, r7
 8007718:	f7ff ffc2 	bl	80076a0 <sbrk_aligned>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	4604      	mov	r4, r0
 8007720:	d14d      	bne.n	80077be <_malloc_r+0xde>
 8007722:	6834      	ldr	r4, [r6, #0]
 8007724:	4626      	mov	r6, r4
 8007726:	2e00      	cmp	r6, #0
 8007728:	d140      	bne.n	80077ac <_malloc_r+0xcc>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	4631      	mov	r1, r6
 800772e:	4638      	mov	r0, r7
 8007730:	eb04 0803 	add.w	r8, r4, r3
 8007734:	f000 f878 	bl	8007828 <_sbrk_r>
 8007738:	4580      	cmp	r8, r0
 800773a:	d13a      	bne.n	80077b2 <_malloc_r+0xd2>
 800773c:	6821      	ldr	r1, [r4, #0]
 800773e:	3503      	adds	r5, #3
 8007740:	1a6d      	subs	r5, r5, r1
 8007742:	f025 0503 	bic.w	r5, r5, #3
 8007746:	3508      	adds	r5, #8
 8007748:	2d0c      	cmp	r5, #12
 800774a:	bf38      	it	cc
 800774c:	250c      	movcc	r5, #12
 800774e:	4629      	mov	r1, r5
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ffa5 	bl	80076a0 <sbrk_aligned>
 8007756:	3001      	adds	r0, #1
 8007758:	d02b      	beq.n	80077b2 <_malloc_r+0xd2>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	442b      	add	r3, r5
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	e00e      	b.n	8007780 <_malloc_r+0xa0>
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	1b52      	subs	r2, r2, r5
 8007766:	d41e      	bmi.n	80077a6 <_malloc_r+0xc6>
 8007768:	2a0b      	cmp	r2, #11
 800776a:	d916      	bls.n	800779a <_malloc_r+0xba>
 800776c:	1961      	adds	r1, r4, r5
 800776e:	42a3      	cmp	r3, r4
 8007770:	6025      	str	r5, [r4, #0]
 8007772:	bf18      	it	ne
 8007774:	6059      	strne	r1, [r3, #4]
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	bf08      	it	eq
 800777a:	6031      	streq	r1, [r6, #0]
 800777c:	5162      	str	r2, [r4, r5]
 800777e:	604b      	str	r3, [r1, #4]
 8007780:	4638      	mov	r0, r7
 8007782:	f104 060b 	add.w	r6, r4, #11
 8007786:	f000 f865 	bl	8007854 <__malloc_unlock>
 800778a:	f026 0607 	bic.w	r6, r6, #7
 800778e:	1d23      	adds	r3, r4, #4
 8007790:	1af2      	subs	r2, r6, r3
 8007792:	d0b6      	beq.n	8007702 <_malloc_r+0x22>
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	50a3      	str	r3, [r4, r2]
 8007798:	e7b3      	b.n	8007702 <_malloc_r+0x22>
 800779a:	6862      	ldr	r2, [r4, #4]
 800779c:	42a3      	cmp	r3, r4
 800779e:	bf0c      	ite	eq
 80077a0:	6032      	streq	r2, [r6, #0]
 80077a2:	605a      	strne	r2, [r3, #4]
 80077a4:	e7ec      	b.n	8007780 <_malloc_r+0xa0>
 80077a6:	4623      	mov	r3, r4
 80077a8:	6864      	ldr	r4, [r4, #4]
 80077aa:	e7b2      	b.n	8007712 <_malloc_r+0x32>
 80077ac:	4634      	mov	r4, r6
 80077ae:	6876      	ldr	r6, [r6, #4]
 80077b0:	e7b9      	b.n	8007726 <_malloc_r+0x46>
 80077b2:	230c      	movs	r3, #12
 80077b4:	603b      	str	r3, [r7, #0]
 80077b6:	4638      	mov	r0, r7
 80077b8:	f000 f84c 	bl	8007854 <__malloc_unlock>
 80077bc:	e7a1      	b.n	8007702 <_malloc_r+0x22>
 80077be:	6025      	str	r5, [r4, #0]
 80077c0:	e7de      	b.n	8007780 <_malloc_r+0xa0>
 80077c2:	bf00      	nop
 80077c4:	20000624 	.word	0x20000624

080077c8 <_realloc_r>:
 80077c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077cc:	4680      	mov	r8, r0
 80077ce:	4614      	mov	r4, r2
 80077d0:	460e      	mov	r6, r1
 80077d2:	b921      	cbnz	r1, 80077de <_realloc_r+0x16>
 80077d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077d8:	4611      	mov	r1, r2
 80077da:	f7ff bf81 	b.w	80076e0 <_malloc_r>
 80077de:	b92a      	cbnz	r2, 80077ec <_realloc_r+0x24>
 80077e0:	f7ff ff14 	bl	800760c <_free_r>
 80077e4:	4625      	mov	r5, r4
 80077e6:	4628      	mov	r0, r5
 80077e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ec:	f000 f838 	bl	8007860 <_malloc_usable_size_r>
 80077f0:	4284      	cmp	r4, r0
 80077f2:	4607      	mov	r7, r0
 80077f4:	d802      	bhi.n	80077fc <_realloc_r+0x34>
 80077f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077fa:	d812      	bhi.n	8007822 <_realloc_r+0x5a>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4640      	mov	r0, r8
 8007800:	f7ff ff6e 	bl	80076e0 <_malloc_r>
 8007804:	4605      	mov	r5, r0
 8007806:	2800      	cmp	r0, #0
 8007808:	d0ed      	beq.n	80077e6 <_realloc_r+0x1e>
 800780a:	42bc      	cmp	r4, r7
 800780c:	4622      	mov	r2, r4
 800780e:	4631      	mov	r1, r6
 8007810:	bf28      	it	cs
 8007812:	463a      	movcs	r2, r7
 8007814:	f7fe fedc 	bl	80065d0 <memcpy>
 8007818:	4631      	mov	r1, r6
 800781a:	4640      	mov	r0, r8
 800781c:	f7ff fef6 	bl	800760c <_free_r>
 8007820:	e7e1      	b.n	80077e6 <_realloc_r+0x1e>
 8007822:	4635      	mov	r5, r6
 8007824:	e7df      	b.n	80077e6 <_realloc_r+0x1e>
	...

08007828 <_sbrk_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d06      	ldr	r5, [pc, #24]	; (8007844 <_sbrk_r+0x1c>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7f9 fa92 	bl	8000d5c <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_sbrk_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_sbrk_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	2000061c 	.word	0x2000061c

08007848 <__malloc_lock>:
 8007848:	4801      	ldr	r0, [pc, #4]	; (8007850 <__malloc_lock+0x8>)
 800784a:	f7ff bec3 	b.w	80075d4 <__retarget_lock_acquire_recursive>
 800784e:	bf00      	nop
 8007850:	20000620 	.word	0x20000620

08007854 <__malloc_unlock>:
 8007854:	4801      	ldr	r0, [pc, #4]	; (800785c <__malloc_unlock+0x8>)
 8007856:	f7ff bebe 	b.w	80075d6 <__retarget_lock_release_recursive>
 800785a:	bf00      	nop
 800785c:	20000620 	.word	0x20000620

08007860 <_malloc_usable_size_r>:
 8007860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007864:	1f18      	subs	r0, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfbc      	itt	lt
 800786a:	580b      	ldrlt	r3, [r1, r0]
 800786c:	18c0      	addlt	r0, r0, r3
 800786e:	4770      	bx	lr

08007870 <_init>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr

0800787c <_fini>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr

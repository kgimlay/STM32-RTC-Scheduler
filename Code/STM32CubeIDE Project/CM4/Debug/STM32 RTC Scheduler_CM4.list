
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e10  08006e10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08006e88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006e88  00020294  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dc8  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7d  00000000  00000000  00034e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00037ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df15  00000000  00000000  0003a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fcb  00000000  00000000  0005825d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8761  00000000  00000000  0006c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124989  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000559c  00000000  00000000  001249dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006c88 	.word	0x08006c88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006c88 	.word	0x08006c88

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fcfe 	bl	8000f40 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000015c 	.word	0x2000015c

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fcf4 	bl	8000f5c <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f000 fda5 	bl	80010f0 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS]) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005b8:	22c8      	movs	r2, #200	; 0xc8
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <calendar_setEvents+0x1c>)
 80005be:	f005 fedb 	bl	8006378 <memcpy>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000008c 	.word	0x2000008c

080005d0 <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	// reset current event index
	_currentEventIdx = 0;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <calendar_start+0x24>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]

	// set alarm for start of first event in list
	setAlarm_A(_calendarEvents[0].start.day, _calendarEvents[0].start.hour, _calendarEvents[0].start.minute, _calendarEvents[0].start.second);
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <calendar_start+0x28>)
 80005dc:	7898      	ldrb	r0, [r3, #2]
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <calendar_start+0x28>)
 80005e0:	78d9      	ldrb	r1, [r3, #3]
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <calendar_start+0x28>)
 80005e4:	791a      	ldrb	r2, [r3, #4]
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <calendar_start+0x28>)
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	f000 fe23 	bl	8001234 <setAlarm_A>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000154 	.word	0x20000154
 80005f8:	2000008c 	.word	0x2000008c

080005fc <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af02      	add	r7, sp, #8
	DateTime now;

	// get the current time
	getDateTime(&now.year, &now.month, &now.day, &now.month, &now.minute, &now.second);
 8000602:	463b      	mov	r3, r7
 8000604:	1c5c      	adds	r4, r3, #1
 8000606:	463b      	mov	r3, r7
 8000608:	1c9a      	adds	r2, r3, #2
 800060a:	463b      	mov	r3, r7
 800060c:	1c59      	adds	r1, r3, #1
 800060e:	4638      	mov	r0, r7
 8000610:	463b      	mov	r3, r7
 8000612:	3305      	adds	r3, #5
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	463b      	mov	r3, r7
 8000618:	3304      	adds	r3, #4
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	4623      	mov	r3, r4
 800061e:	f000 fd67 	bl	80010f0 <getDateTime>

	// if not in event, event started
	if (!_inEvent) {
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <calendar_AlarmA_ISR+0x1f8>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d06a      	beq.n	8000708 <calendar_AlarmA_ISR+0x10c>

		// if alarm triggered at correct month/year
		// this line can break if it takes 1 or more seconds from when the alarm interrupt fires
		if (compareDateTime(now, _calendarEvents[_currentEventIdx].start) == 0) {
 8000632:	4b71      	ldr	r3, [pc, #452]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4971      	ldr	r1, [pc, #452]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	cb0c      	ldmia	r3, {r2, r3}
 8000644:	4639      	mov	r1, r7
 8000646:	c903      	ldmia	r1, {r0, r1}
 8000648:	f000 f8da 	bl	8000800 <compareDateTime>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d12e      	bne.n	80006b0 <calendar_AlarmA_ISR+0xb4>

			_inEvent = true;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <calendar_AlarmA_ISR+0x1f8>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]

			// set alarm for end of event
			setAlarm_A(_calendarEvents[_currentEventIdx].end.day, _calendarEvents[_currentEventIdx].end.hour, _calendarEvents[_currentEventIdx].end.minute, _calendarEvents[_currentEventIdx].end.second);
 8000658:	4b67      	ldr	r3, [pc, #412]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4967      	ldr	r1, [pc, #412]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	330e      	adds	r3, #14
 800066a:	7818      	ldrb	r0, [r3, #0]
 800066c:	4b62      	ldr	r3, [pc, #392]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4962      	ldr	r1, [pc, #392]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 8000672:	4613      	mov	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	440b      	add	r3, r1
 800067c:	330f      	adds	r3, #15
 800067e:	7819      	ldrb	r1, [r3, #0]
 8000680:	4b5d      	ldr	r3, [pc, #372]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4c5d      	ldr	r4, [pc, #372]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4423      	add	r3, r4
 8000690:	3310      	adds	r3, #16
 8000692:	781c      	ldrb	r4, [r3, #0]
 8000694:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4d58      	ldr	r5, [pc, #352]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	442b      	add	r3, r5
 80006a4:	3311      	adds	r3, #17
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4622      	mov	r2, r4
 80006aa:	f000 fdc3 	bl	8001234 <setAlarm_A>
		// else not at start of event, restart alarm
		else {
			setAlarm_A(_calendarEvents[_currentEventIdx].end.day, _calendarEvents[_currentEventIdx].end.hour, _calendarEvents[_currentEventIdx].end.minute, _calendarEvents[_currentEventIdx].end.second);
		}
	}
}
 80006ae:	e09c      	b.n	80007ea <calendar_AlarmA_ISR+0x1ee>
			setAlarm_A(_calendarEvents[_currentEventIdx].start.day, _calendarEvents[_currentEventIdx].start.hour, _calendarEvents[_currentEventIdx].start.minute, _calendarEvents[_currentEventIdx].start.second);
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4951      	ldr	r1, [pc, #324]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	440b      	add	r3, r1
 80006c0:	3302      	adds	r3, #2
 80006c2:	7818      	ldrb	r0, [r3, #0]
 80006c4:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	494c      	ldr	r1, [pc, #304]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	3303      	adds	r3, #3
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4c47      	ldr	r4, [pc, #284]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 80006de:	4613      	mov	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4423      	add	r3, r4
 80006e8:	3304      	adds	r3, #4
 80006ea:	781c      	ldrb	r4, [r3, #0]
 80006ec:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4d42      	ldr	r5, [pc, #264]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	442b      	add	r3, r5
 80006fc:	3305      	adds	r3, #5
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4622      	mov	r2, r4
 8000702:	f000 fd97 	bl	8001234 <setAlarm_A>
}
 8000706:	e070      	b.n	80007ea <calendar_AlarmA_ISR+0x1ee>
		if (compareDateTime(now, _calendarEvents[_currentEventIdx].end) == 0) {
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	493b      	ldr	r1, [pc, #236]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	440b      	add	r3, r1
 8000718:	3308      	adds	r3, #8
 800071a:	3304      	adds	r3, #4
 800071c:	cb0c      	ldmia	r3, {r2, r3}
 800071e:	4639      	mov	r1, r7
 8000720:	c903      	ldmia	r1, {r0, r1}
 8000722:	f000 f86d 	bl	8000800 <compareDateTime>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d133      	bne.n	8000794 <calendar_AlarmA_ISR+0x198>
			_currentEventIdx++;
 800072c:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000734:	6013      	str	r3, [r2, #0]
			setAlarm_A(_calendarEvents[_currentEventIdx].start.day, _calendarEvents[_currentEventIdx].start.hour, _calendarEvents[_currentEventIdx].start.minute, _calendarEvents[_currentEventIdx].start.second);
 8000736:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4930      	ldr	r1, [pc, #192]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	440b      	add	r3, r1
 8000746:	3302      	adds	r3, #2
 8000748:	7818      	ldrb	r0, [r3, #0]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	492b      	ldr	r1, [pc, #172]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	440b      	add	r3, r1
 800075a:	3303      	adds	r3, #3
 800075c:	7819      	ldrb	r1, [r3, #0]
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4c26      	ldr	r4, [pc, #152]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4423      	add	r3, r4
 800076e:	3304      	adds	r3, #4
 8000770:	781c      	ldrb	r4, [r3, #0]
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4d21      	ldr	r5, [pc, #132]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	442b      	add	r3, r5
 8000782:	3305      	adds	r3, #5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4622      	mov	r2, r4
 8000788:	f000 fd54 	bl	8001234 <setAlarm_A>
			_inEvent = false;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <calendar_AlarmA_ISR+0x1f8>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	e02a      	b.n	80007ea <calendar_AlarmA_ISR+0x1ee>
			setAlarm_A(_calendarEvents[_currentEventIdx].end.day, _calendarEvents[_currentEventIdx].end.hour, _calendarEvents[_currentEventIdx].end.minute, _calendarEvents[_currentEventIdx].end.second);
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4918      	ldr	r1, [pc, #96]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	440b      	add	r3, r1
 80007a4:	330e      	adds	r3, #14
 80007a6:	7818      	ldrb	r0, [r3, #0]
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4913      	ldr	r1, [pc, #76]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	330f      	adds	r3, #15
 80007ba:	7819      	ldrb	r1, [r3, #0]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4c0e      	ldr	r4, [pc, #56]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4423      	add	r3, r4
 80007cc:	3310      	adds	r3, #16
 80007ce:	781c      	ldrb	r4, [r3, #0]
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <calendar_AlarmA_ISR+0x1fc>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4d09      	ldr	r5, [pc, #36]	; (80007fc <calendar_AlarmA_ISR+0x200>)
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	442b      	add	r3, r5
 80007e0:	3311      	adds	r3, #17
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4622      	mov	r2, r4
 80007e6:	f000 fd25 	bl	8001234 <setAlarm_A>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bdb0      	pop	{r4, r5, r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000158 	.word	0x20000158
 80007f8:	20000154 	.word	0x20000154
 80007fc:	2000008c 	.word	0x2000008c

08000800 <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	f107 0408 	add.w	r4, r7, #8
 800080a:	e884 0003 	stmia.w	r4, {r0, r1}
 800080e:	4639      	mov	r1, r7
 8000810:	e881 000c 	stmia.w	r1, {r2, r3}
  // return net comparison (date time 1 - date time 2)
  return dateTimeToSeconds(dateTime_1) - dateTimeToSeconds(dateTime_2);
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	e893 0003 	ldmia.w	r3, {r0, r1}
 800081c:	f000 f80c 	bl	8000838 <dateTimeToSeconds>
 8000820:	4604      	mov	r4, r0
 8000822:	463b      	mov	r3, r7
 8000824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000828:	f000 f806 	bl	8000838 <dateTimeToSeconds>
 800082c:	4603      	mov	r3, r0
 800082e:	1ae3      	subs	r3, r4, r3
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bd90      	pop	{r4, r7, pc}

08000838 <dateTimeToSeconds>:


/*
 *
 */
int dateTimeToSeconds(DateTime dateTime) {
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	463b      	mov	r3, r7
 8000840:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 8000844:	797b      	ldrb	r3, [r7, #5]
 8000846:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 8000848:	793b      	ldrb	r3, [r7, #4]
 800084a:	461a      	mov	r2, r3
 800084c:	4613      	mov	r3, r2
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800085e:	fb01 f303 	mul.w	r3, r1, r3
 8000862:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000864:	78bb      	ldrb	r3, [r7, #2]
 8000866:	3b01      	subs	r3, #1
 8000868:	490a      	ldr	r1, [pc, #40]	; (8000894 <dateTimeToSeconds+0x5c>)
 800086a:	fb01 f303 	mul.w	r3, r1, r3
 800086e:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000870:	787b      	ldrb	r3, [r7, #1]
 8000872:	3b01      	subs	r3, #1
 8000874:	4908      	ldr	r1, [pc, #32]	; (8000898 <dateTimeToSeconds+0x60>)
 8000876:	fb01 f303 	mul.w	r3, r1, r3
 800087a:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 800087c:	783b      	ldrb	r3, [r7, #0]
 800087e:	4619      	mov	r1, r3
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <dateTimeToSeconds+0x64>)
 8000882:	fb01 f303 	mul.w	r3, r1, r3
 8000886:	4413      	add	r3, r2
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	00015180 	.word	0x00015180
 8000898:	00278d00 	.word	0x00278d00
 800089c:	01da9c00 	.word	0x01da9c00

080008a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008b0:	f023 0218 	bic.w	r2, r3, #24
 80008b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4313      	orrs	r3, r2
 80008e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
	...

080008fc <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_UART_ErrorCallback+0x28>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d006      	beq.n	800091c <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <HAL_UART_ErrorCallback+0x2c>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d101      	bne.n	800091c <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000918:	f000 fee8 	bl	80016ec <uartBasic_Error_ISR>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40013800 	.word	0x40013800
 8000928:	40004400 	.word	0x40004400

0800092c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_UART_TxCpltCallback+0x28>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d006      	beq.n	800094c <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <HAL_UART_TxCpltCallback+0x2c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d101      	bne.n	800094c <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000948:	f000 fec4 	bl	80016d4 <uartBasic_TX_Complete_ISR>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40013800 	.word	0x40013800
 8000958:	40004400 	.word	0x40004400

0800095c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_UART_RxCpltCallback+0x28>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d006      	beq.n	800097c <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <HAL_UART_RxCpltCallback+0x2c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d101      	bne.n	800097c <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000978:	f000 fea0 	bl	80016bc <uartBasic_RX_Complete_ISR>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013800 	.word	0x40013800
 8000988:	40004400 	.word	0x40004400

0800098c <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8000994:	f7ff fe32 	bl	80005fc <calendar_AlarmA_ISR>

	// send message for debugging
	char messageBody[UART_MESSAGE_BODY_SIZE] = "\n\nALARM EVENT!\n\n\0";
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_RTC_AlarmAEventCallback+0x3c>)
 800099a:	f107 040c 	add.w	r4, r7, #12
 800099e:	461d      	mov	r5, r3
 80009a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	8023      	strh	r3, [r4, #0]
 80009a8:	f107 031e 	add.w	r3, r7, #30
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	811a      	strh	r2, [r3, #8]
	uartBasic_TX_IT("TIME", messageBody);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <HAL_RTC_AlarmAEventCallback+0x40>)
 80009bc:	f000 fe1e 	bl	80015fc <uartBasic_TX_IT>
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bdb0      	pop	{r4, r5, r7, pc}
 80009c8:	08006ca8 	.word	0x08006ca8
 80009cc:	08006ca0 	.word	0x08006ca0

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	b0c7      	sub	sp, #284	; 0x11c
 80009d4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 ff13 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f955 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 fa9d 	bl	8000f1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e2:	f000 fa45 	bl	8000e70 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80009e6:	f000 f9ad 	bl	8000d44 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 face 	bl	8001f8c <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 80009f0:	489f      	ldr	r0, [pc, #636]	; (8000c70 <main+0x2a0>)
 80009f2:	f000 fdf5 	bl	80015e0 <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 80009f6:	489f      	ldr	r0, [pc, #636]	; (8000c74 <main+0x2a4>)
 80009f8:	f7ff fd9a 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 80009fc:	4a9e      	ldr	r2, [pc, #632]	; (8000c78 <main+0x2a8>)
 80009fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	6018      	str	r0, [r3, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	8019      	strh	r1, [r3, #0]
		  .day = 8,
		  .hour = 2,
		  .minute = 30,
		  .second = 0
  };
  calendar_setDateTime(now);
 8000a0c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000a10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a14:	f7ff fd9c 	bl	8000550 <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	22c8      	movs	r2, #200	; 0xc8
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f005 fcb7 	bl	8006394 <memset>

  events[0].start.year = 23;
 8000a26:	2317      	movs	r3, #23
 8000a28:	f887 3020 	strb.w	r3, [r7, #32]
  events[0].start.month = 7;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  events[0].start.day = 8;
 8000a32:	2308      	movs	r3, #8
 8000a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  events[0].start.hour = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  events[0].start.minute = 30;
 8000a3e:	231e      	movs	r3, #30
 8000a40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  events[0].start.second = 10;
 8000a44:	230a      	movs	r3, #10
 8000a46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  events[0].end.year = 23;
 8000a4a:	2317      	movs	r3, #23
 8000a4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  events[0].end.month = 7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  events[0].end.day = 8;
 8000a56:	2308      	movs	r3, #8
 8000a58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  events[0].end.hour = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  events[0].end.minute = 30;
 8000a62:	231e      	movs	r3, #30
 8000a64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  events[0].end.second = 20;
 8000a68:	2314      	movs	r3, #20
 8000a6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  events[1].start.year = 23;
 8000a6e:	2317      	movs	r3, #23
 8000a70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  events[1].start.month = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  events[1].start.day = 8;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  events[1].start.hour = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  events[1].start.minute = 30;
 8000a86:	231e      	movs	r3, #30
 8000a88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  events[1].start.second = 30;
 8000a8c:	231e      	movs	r3, #30
 8000a8e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  events[1].end.year = 23;
 8000a92:	2317      	movs	r3, #23
 8000a94:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  events[1].end.month = 7;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  events[1].end.day = 8;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  events[1].end.hour = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  events[1].end.minute = 30;
 8000aaa:	231e      	movs	r3, #30
 8000aac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  events[1].end.second = 40;
 8000ab0:	2328      	movs	r3, #40	; 0x28
 8000ab2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

  events[2].start.year = 23;
 8000ab6:	2317      	movs	r3, #23
 8000ab8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  events[2].start.month = 7;
 8000abc:	2307      	movs	r3, #7
 8000abe:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  events[2].start.day = 8;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  events[2].start.hour = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  events[2].start.minute = 30;
 8000ace:	231e      	movs	r3, #30
 8000ad0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  events[2].start.second = 50;
 8000ad4:	2332      	movs	r3, #50	; 0x32
 8000ad6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  events[2].end.year = 23;
 8000ada:	2317      	movs	r3, #23
 8000adc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  events[2].end.month = 7;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  events[2].end.day = 8;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  events[2].end.hour = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  events[2].end.minute = 31;
 8000af2:	231f      	movs	r3, #31
 8000af4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  events[2].end.second = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  events[3].start.year = 23;
 8000afe:	2317      	movs	r3, #23
 8000b00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  events[3].start.month = 7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  events[3].start.day = 8;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  events[3].start.hour = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  events[3].start.minute = 31;
 8000b16:	231f      	movs	r3, #31
 8000b18:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  events[3].start.second = 10;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  events[3].end.year = 23;
 8000b22:	2317      	movs	r3, #23
 8000b24:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  events[3].end.month = 7;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  events[3].end.day = 8;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  events[3].end.hour = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  events[3].end.minute = 31;
 8000b3a:	231f      	movs	r3, #31
 8000b3c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  events[3].end.second = 20;
 8000b40:	2314      	movs	r3, #20
 8000b42:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  events[4].start.year = 23;
 8000b46:	2317      	movs	r3, #23
 8000b48:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  events[4].start.month = 7;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  events[4].start.day = 8;
 8000b52:	2308      	movs	r3, #8
 8000b54:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
  events[4].start.hour = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  events[4].start.minute = 31;
 8000b5e:	231f      	movs	r3, #31
 8000b60:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  events[4].start.second = 30;
 8000b64:	231e      	movs	r3, #30
 8000b66:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  events[4].end.year = 23;
 8000b6a:	2317      	movs	r3, #23
 8000b6c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  events[4].end.month = 7;
 8000b70:	2307      	movs	r3, #7
 8000b72:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  events[4].end.day = 8;
 8000b76:	2308      	movs	r3, #8
 8000b78:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  events[4].end.hour = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  events[4].end.minute = 31;
 8000b82:	231f      	movs	r3, #31
 8000b84:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  events[4].end.second = 40;
 8000b88:	2328      	movs	r3, #40	; 0x28
 8000b8a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

  calendar_setEvents(events);
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fd0c 	bl	80005b0 <calendar_setEvents>

  // start calendar
  calendar_start();
 8000b98:	f7ff fd1a 	bl	80005d0 <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8000b9c:	f000 fd50 	bl	8001640 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  int timeSeconds = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  int timeMinutes = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 8000bb2:	463a      	mov	r2, r7
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fd54 	bl	8001668 <uartBasic_get_RX>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

	  // if message present, handle message
	  if (messageStatus == true) {
 8000bc6:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00d      	beq.n	8000bea <main+0x21a>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 8000bce:	463a      	mov	r2, r7
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fd10 	bl	80015fc <uartBasic_TX_IT>
		  messageCount++;
 8000bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000be0:	3301      	adds	r3, #1
 8000be2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  uartBasic_RX_IT();
 8000be6:	f000 fd2b 	bl	8001640 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8000bea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcc4 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	221c      	movs	r2, #28
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 fbca 	bl	8006394 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000c00:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8000c04:	461e      	mov	r6, r3
 8000c06:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8000c0a:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8000c0e:	f897 10eb 	ldrb.w	r1, [r7, #235]	; 0xeb
 8000c12:	f897 00ec 	ldrb.w	r0, [r7, #236]	; 0xec
 8000c16:	4604      	mov	r4, r0
 8000c18:	f897 00ed 	ldrb.w	r0, [r7, #237]	; 0xed
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	4638      	mov	r0, r7
 8000c20:	9504      	str	r5, [sp, #16]
 8000c22:	9403      	str	r4, [sp, #12]
 8000c24:	9102      	str	r1, [sp, #8]
 8000c26:	9201      	str	r2, [sp, #4]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	4633      	mov	r3, r6
 8000c2c:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <main+0x2ac>)
 8000c2e:	211c      	movs	r1, #28
 8000c30:	f005 fbb8 	bl	80063a4 <sniprintf>
	  uartBasic_TX_IT("TIME", messageBody);
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <main+0x2b0>)
 8000c3a:	f000 fcdf 	bl	80015fc <uartBasic_TX_IT>
	  timeSeconds++;
 8000c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000c42:	3301      	adds	r3, #1
 8000c44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  timeMinutes++;
 8000c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	  long int i = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000c58:	e004      	b.n	8000c64 <main+0x294>
		  i++;
 8000c5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000c5e:	3301      	adds	r3, #1
 8000c60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000c64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <main+0x2b4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	ddf5      	ble.n	8000c5a <main+0x28a>
  {
 8000c6e:	e7a0      	b.n	8000bb2 <main+0x1e2>
 8000c70:	20000198 	.word	0x20000198
 8000c74:	20000160 	.word	0x20000160
 8000c78:	08006ce8 	.word	0x08006ce8
 8000c7c:	08006cc4 	.word	0x08006cc4
 8000c80:	08006ca0 	.word	0x08006ca0
 8000c84:	0001fffd 	.word	0x0001fffd

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09a      	sub	sp, #104	; 0x68
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2248      	movs	r2, #72	; 0x48
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f005 fb7c 	bl	8006394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cae:	f001 f945 	bl	8001f3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fdf4 	bl	80008a0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <SystemClock_Config+0xb8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <SystemClock_Config+0xb8>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <SystemClock_Config+0xb8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000cd4:	232c      	movs	r3, #44	; 0x2c
 8000cd6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cd8:	2381      	movs	r3, #129	; 0x81
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ce4:	2360      	movs	r3, #96	; 0x60
 8000ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf4:	f107 0320 	add.w	r3, r7, #32
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 fc09 	bl	8002510 <HAL_RCC_OscConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d04:	f000 f917 	bl	8000f36 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000d08:	236f      	movs	r3, #111	; 0x6f
 8000d0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 ff73 	bl	8002c14 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d34:	f000 f8ff 	bl	8000f36 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3768      	adds	r7, #104	; 0x68
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	58000400 	.word	0x58000400

08000d44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b092      	sub	sp, #72	; 0x48
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	222c      	movs	r2, #44	; 0x2c
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f005 fb15 	bl	8006394 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d6c:	4a3f      	ldr	r2, [pc, #252]	; (8000e6c <MX_RTC_Init+0x128>)
 8000d6e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d70:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d76:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d78:	227f      	movs	r2, #127	; 0x7f
 8000d7a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d7e:	22ff      	movs	r2, #255	; 0xff
 8000d80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d88:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <MX_RTC_Init+0x124>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <MX_RTC_Init+0x124>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000da8:	482f      	ldr	r0, [pc, #188]	; (8000e68 <MX_RTC_Init+0x124>)
 8000daa:	f002 fc0d 	bl	80035c8 <HAL_RTC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000db4:	f000 f8bf 	bl	8000f36 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4823      	ldr	r0, [pc, #140]	; (8000e68 <MX_RTC_Init+0x124>)
 8000ddc:	f002 fc76 	bl	80036cc <HAL_RTC_SetTime>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000de6:	f000 f8a6 	bl	8000f36 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e06:	2201      	movs	r2, #1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_RTC_Init+0x124>)
 8000e0c:	f002 fd5c 	bl	80038c8 <HAL_RTC_SetDate>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000e16:	f000 f88e 	bl	8000f36 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_RTC_Init+0x124>)
 8000e52:	f002 fe0d 	bl	8003a70 <HAL_RTC_SetAlarm_IT>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000e5c:	f000 f86b 	bl	8000f36 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3748      	adds	r7, #72	; 0x48
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000160 	.word	0x20000160
 8000e6c:	40002800 	.word	0x40002800

08000e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000e76:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <MX_USART2_UART_Init+0xa8>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000e92:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000eb8:	2230      	movs	r2, #48	; 0x30
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000ece:	f003 f801 	bl	8003ed4 <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000ed8:	f000 f82d 	bl	8000f36 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000ee0:	f005 f957 	bl	8006192 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000eea:	f000 f824 	bl	8000f36 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000ef2:	f005 f98c 	bl	800620e <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000efc:	f000 f81b 	bl	8000f36 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_USART2_UART_Init+0xa4>)
 8000f02:	f005 f90e 	bl	8006122 <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000f0c:	f000 f813 	bl	8000f36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000198 	.word	0x20000198
 8000f18:	40004400 	.word	0x40004400

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fcd2 	bl	80008ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2004      	movs	r0, #4
 8000f28:	f7ff fccf 	bl	80008ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f7ff fccc 	bl	80008ca <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3a:	b672      	cpsid	i
}
 8000f3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <Error_Handler+0x8>

08000f40 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8000f48:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <rtcAlarmControl_init+0x18>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	2000022c 	.word	0x2000022c

08000f5c <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	460b      	mov	r3, r1
 8000f74:	717b      	strb	r3, [r7, #5]
 8000f76:	4613      	mov	r3, r2
 8000f78:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	4a5a      	ldr	r2, [pc, #360]	; (80010e8 <setDateTime+0x18c>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	08db      	lsrs	r3, r3, #3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	b258      	sxtb	r0, r3
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <setDateTime+0x18c>)
 8000f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f92:	08d9      	lsrs	r1, r3, #3
 8000f94:	460b      	mov	r3, r1
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	4303      	orrs	r3, r0
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <setDateTime+0x18c>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	b258      	sxtb	r0, r3
 8000fba:	79ba      	ldrb	r2, [r7, #6]
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <setDateTime+0x18c>)
 8000fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8000fc2:	08d9      	lsrs	r1, r3, #3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	4303      	orrs	r3, r0
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8000fda:	797b      	ldrb	r3, [r7, #5]
 8000fdc:	4a42      	ldr	r2, [pc, #264]	; (80010e8 <setDateTime+0x18c>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	08db      	lsrs	r3, r3, #3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	b258      	sxtb	r0, r3
 8000fea:	797a      	ldrb	r2, [r7, #5]
 8000fec:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <setDateTime+0x18c>)
 8000fee:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff2:	08d9      	lsrs	r1, r3, #3
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	b25b      	sxtb	r3, r3
 8001002:	4303      	orrs	r3, r0
 8001004:	b25b      	sxtb	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 800100e:	793b      	ldrb	r3, [r7, #4]
 8001010:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <setDateTime+0x18c>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	08db      	lsrs	r3, r3, #3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	b258      	sxtb	r0, r3
 800101e:	793a      	ldrb	r2, [r7, #4]
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <setDateTime+0x18c>)
 8001022:	fba3 1302 	umull	r1, r3, r3, r2
 8001026:	08d9      	lsrs	r1, r3, #3
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4303      	orrs	r3, r0
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 800103e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001042:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <setDateTime+0x18c>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	b258      	sxtb	r0, r3
 8001050:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <setDateTime+0x18c>)
 8001056:	fba3 1302 	umull	r1, r3, r3, r2
 800105a:	08d9      	lsrs	r1, r3, #3
 800105c:	460b      	mov	r3, r1
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b25b      	sxtb	r3, r3
 800106a:	4303      	orrs	r3, r0
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001072:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <setDateTime+0x18c>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	b258      	sxtb	r0, r3
 8001084:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <setDateTime+0x18c>)
 800108a:	fba3 1302 	umull	r1, r3, r3, r2
 800108e:	08d9      	lsrs	r1, r3, #3
 8001090:	460b      	mov	r3, r1
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4303      	orrs	r3, r0
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <setDateTime+0x190>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f107 011c 	add.w	r1, r7, #28
 80010ae:	2201      	movs	r2, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fc09 	bl	80038c8 <HAL_RTC_SetDate>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80010c0:	e7fe      	b.n	80010c0 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <setDateTime+0x190>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f107 0108 	add.w	r1, r7, #8
 80010ca:	2201      	movs	r2, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fafd 	bl	80036cc <HAL_RTC_SetTime>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80010dc:	e7fe      	b.n	80010dc <setDateTime+0x180>
  }
}
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	bf00      	nop
 80010e8:	cccccccd 	.word	0xcccccccd
 80010ec:	2000022c 	.word	0x2000022c

080010f0 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <getDateTime+0x140>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f107 0114 	add.w	r1, r7, #20
 800111a:	2201      	movs	r2, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fb71 	bl	8003804 <HAL_RTC_GetTime>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 800112c:	e7fe      	b.n	800112c <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800112e:	4b40      	ldr	r3, [pc, #256]	; (8001230 <getDateTime+0x140>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f107 0110 	add.w	r1, r7, #16
 8001136:	2201      	movs	r2, #1
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fc4b 	bl	80039d4 <HAL_RTC_GetDate>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001148:	e7fe      	b.n	8001148 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0b11110000) >> 4) * 10 + (date.Year & 0b00001111);
 800114a:	7cfb      	ldrb	r3, [r7, #19]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4413      	add	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7cfb      	ldrb	r3, [r7, #19]
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4413      	add	r3, r2
 8001164:	b2da      	uxtb	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0b00010000) >> 4) * 10 + (date.Month & 0b00001111);
 800116a:	7c7b      	ldrb	r3, [r7, #17]
 800116c:	111b      	asrs	r3, r3, #4
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	7c7b      	ldrb	r3, [r7, #17]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0b00110000) >> 4) * 10 + (date.Date & 0b00001111);
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	111b      	asrs	r3, r3, #4
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	7cbb      	ldrb	r3, [r7, #18]
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0b00110000) >> 4) * 10 + (time.Hours & 0b00001111);
 80011b6:	7d3b      	ldrb	r3, [r7, #20]
 80011b8:	111b      	asrs	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0b01110000) >> 4) * 10 + (time.Minutes & 0b00001111);
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	111b      	asrs	r3, r3, #4
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7d7b      	ldrb	r3, [r7, #21]
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001200:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0b01110000) >> 4) * 10 + (time.Seconds & 0b00001111);
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	111b      	asrs	r3, r3, #4
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	4413      	add	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	7dbb      	ldrb	r3, [r7, #22]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	b2da      	uxtb	r2, r3
 8001224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001226:	701a      	strb	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000022c 	.word	0x2000022c

08001234 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08f      	sub	sp, #60	; 0x3c
 8001238:	af00      	add	r7, sp, #0
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4623      	mov	r3, r4
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	4603      	mov	r3, r0
 8001248:	71bb      	strb	r3, [r7, #6]
 800124a:	460b      	mov	r3, r1
 800124c:	717b      	strb	r3, [r7, #5]
 800124e:	4613      	mov	r3, r2
 8001250:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	222c      	movs	r2, #44	; 0x2c
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f005 f89a 	bl	8006394 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4a40      	ldr	r2, [pc, #256]	; (8001364 <setAlarm_A+0x130>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	b258      	sxtb	r0, r3
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <setAlarm_A+0x130>)
 8001274:	fba3 1302 	umull	r1, r3, r3, r2
 8001278:	08d9      	lsrs	r1, r3, #3
 800127a:	460b      	mov	r3, r1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4303      	orrs	r3, r0
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	4a33      	ldr	r2, [pc, #204]	; (8001364 <setAlarm_A+0x130>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	b258      	sxtb	r0, r3
 80012a2:	79ba      	ldrb	r2, [r7, #6]
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <setAlarm_A+0x130>)
 80012a6:	fba3 1302 	umull	r1, r3, r3, r2
 80012aa:	08d9      	lsrs	r1, r3, #3
 80012ac:	460b      	mov	r3, r1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	4303      	orrs	r3, r0
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <setAlarm_A+0x130>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	b258      	sxtb	r0, r3
 80012d2:	797a      	ldrb	r2, [r7, #5]
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <setAlarm_A+0x130>)
 80012d6:	fba3 1302 	umull	r1, r3, r3, r2
 80012da:	08d9      	lsrs	r1, r3, #3
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4303      	orrs	r3, r0
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 80012f2:	793b      	ldrb	r3, [r7, #4]
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <setAlarm_A+0x130>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	b258      	sxtb	r0, r3
 8001302:	793a      	ldrb	r2, [r7, #4]
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <setAlarm_A+0x130>)
 8001306:	fba3 1302 	umull	r1, r3, r3, r2
 800130a:	08d9      	lsrs	r1, r3, #3
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	b25b      	sxtb	r3, r3
 800131a:	4303      	orrs	r3, r0
 800131c:	b25b      	sxtb	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 800133a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <setAlarm_A+0x134>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f107 010c 	add.w	r1, r7, #12
 8001348:	2201      	movs	r2, #1
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fb90 	bl	8003a70 <HAL_RTC_SetAlarm_IT>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8001356:	b672      	cpsid	i
}
 8001358:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 800135a:	e7fe      	b.n	800135a <setAlarm_A+0x126>
  }
}
 800135c:	bf00      	nop
 800135e:	373c      	adds	r7, #60	; 0x3c
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	cccccccd 	.word	0xcccccccd
 8001368:	2000022c 	.word	0x2000022c

0800136c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <LL_AHB2_GRP1_EnableClock>:
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b090      	sub	sp, #64	; 0x40
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	2238      	movs	r2, #56	; 0x38
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f004 ffc3 	bl	8006394 <memset>
  if(hrtc->Instance==RTC)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_RTC_MspInit+0x64>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d11d      	bne.n	8001454 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800141e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ffb3 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001434:	f7ff fd7f 	bl	8000f36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001438:	f7ff ff98 	bl	800136c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800143c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001440:	f7ff ffbc 	bl	80013bc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	202a      	movs	r0, #42	; 0x2a
 800144a:	f000 fb26 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800144e:	202a      	movs	r0, #42	; 0x2a
 8001450:	f000 fb3d 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3740      	adds	r7, #64	; 0x40
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40002800 	.word	0x40002800

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b096      	sub	sp, #88	; 0x58
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2238      	movs	r2, #56	; 0x38
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f004 ff87 	bl	8006394 <memset>
  if(huart->Instance==USART2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_UART_MspInit+0x98>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d12e      	bne.n	80014ee <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001490:	2302      	movs	r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001494:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001498:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 ff78 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014aa:	f7ff fd44 	bl	8000f36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014b2:	f7ff ff83 	bl	80013bc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff ff68 	bl	800138c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80014bc:	230c      	movs	r3, #12
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014cc:	2307      	movs	r3, #7
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f000 fbcf 	bl	8001c7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2025      	movs	r0, #37	; 0x25
 80014e4:	f000 fad9 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e8:	2025      	movs	r0, #37	; 0x25
 80014ea:	f000 faf0 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3758      	adds	r7, #88	; 0x58
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40004400 	.word	0x40004400

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 f9b7 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART2_IRQHandler+0x10>)
 8001552:	f002 fdef 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000198 	.word	0x20000198

08001560 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <RTC_Alarm_IRQHandler+0x10>)
 8001566:	f002 fb8f 	bl	8003c88 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000160 	.word	0x20000160

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f004 febe 	bl	8006324 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20008000 	.word	0x20008000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000230 	.word	0x20000230
 80015dc:	20000298 	.word	0x20000298

080015e0 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <uartBasic_init+0x18>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000238 	.word	0x20000238

080015fc <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <uartBasic_TX_IT+0x3c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <uartBasic_TX_IT+0x40>)
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f89a 	bl	8001754 <composeMessage>
		_txBuffer_full = true;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <uartBasic_TX_IT+0x3c>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 8001626:	f000 f865 	bl	80016f4 <_txMessage_IT>

		// report successfully queued
		return true;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 800162e:	2300      	movs	r3, #0
	}
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000027c 	.word	0x2000027c
 800163c:	2000023c 	.word	0x2000023c

08001640 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <uartBasic_RX_IT+0x24>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f083 0301 	eor.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 8001654:	f000 f866 	bl	8001724 <_rxMessage_IT>

		// return success
		return true;
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 800165c:	2300      	movs	r3, #0
	}
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000027d 	.word	0x2000027d

08001668 <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <uartBasic_get_RX+0x4c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d015      	beq.n	80016a8 <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <uartBasic_get_RX+0x50>)
 800167e:	f107 0408 	add.w	r4, r7, #8
 8001682:	461d      	mov	r5, r3
 8001684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001688:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800168c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <uartBasic_get_RX+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	461a      	mov	r2, r3
 800169c:	6839      	ldr	r1, [r7, #0]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f86e 	bl	8001780 <decomposeMessage>

		// report successfully dequeued
		return true;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 80016a8:	2300      	movs	r3, #0
	}
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdb0      	pop	{r4, r5, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000027d 	.word	0x2000027d
 80016b8:	2000025c 	.word	0x2000025c

080016bc <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <uartBasic_RX_Complete_ISR+0x14>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	2000027d 	.word	0x2000027d

080016d4 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <uartBasic_TX_Complete_ISR+0x14>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000027c 	.word	0x2000027c

080016ec <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 80016f0:	e7fe      	b.n	80016f0 <uartBasic_Error_ISR+0x4>
	...

080016f4 <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_txMessage_IT+0x24>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2220      	movs	r2, #32
 80016fe:	4907      	ldr	r1, [pc, #28]	; (800171c <_txMessage_IT+0x28>)
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fc37 	bl	8003f74 <HAL_UART_Transmit_IT>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <_txMessage_IT+0x1e>
		_txError = true;
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <_txMessage_IT+0x2c>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000238 	.word	0x20000238
 800171c:	2000023c 	.word	0x2000023c
 8001720:	20000234 	.word	0x20000234

08001724 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_rxMessage_IT+0x24>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2220      	movs	r2, #32
 800172e:	4907      	ldr	r1, [pc, #28]	; (800174c <_rxMessage_IT+0x28>)
 8001730:	4618      	mov	r0, r3
 8001732:	f002 fcb3 	bl	800409c <HAL_UART_Receive_IT>
 8001736:	4603      	mov	r3, r0
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <_rxMessage_IT+0x1e>
		_rxError = true;
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <_rxMessage_IT+0x2c>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000238 	.word	0x20000238
 800174c:	2000025c 	.word	0x2000025c
 8001750:	20000235 	.word	0x20000235

08001754 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	221c      	movs	r2, #28
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fe00 	bl	8006378 <memcpy>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	221c      	movs	r2, #28
 800179c:	4619      	mov	r1, r3
 800179e:	68b8      	ldr	r0, [r7, #8]
 80017a0:	f004 fdea 	bl	8006378 <memcpy>
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017b0:	f7fe feb8 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017da:	f004 fda9 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017de:	f7ff f8f7 	bl	80009d0 <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   r0, =_estack
 80017e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017f0:	08006e18 	.word	0x08006e18
  ldr r2, =_sbss
 80017f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017f8:	20000294 	.word	0x20000294

080017fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180a:	2003      	movs	r0, #3
 800180c:	f000 f93a 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001810:	f001 fbe2 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8001814:	4603      	mov	r3, r0
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_Init+0x3c>)
 8001818:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f810 	bl	8001840 <HAL_InitTick>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e001      	b.n	8001830 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800182c:	f7ff fdde 	bl	80013ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001830:	79fb      	ldrb	r3, [r7, #7]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_InitTick+0x6c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d024      	beq.n	800189e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001854:	f001 fbc0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_InitTick+0x6c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001864:	fbb3 f3f1 	udiv	r3, r3, r1
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f93c 	bl	8001aea <HAL_SYSTICK_Config>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	d809      	bhi.n	8001892 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187e:	2200      	movs	r2, #0
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001886:	f000 f908 	bl	8001a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_InitTick+0x70>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e007      	b.n	80018a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	e004      	b.n	80018a2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x1c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_IncTick+0x20>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_IncTick+0x20>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000280 	.word	0x20000280

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_GetTick+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000280 	.word	0x20000280

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4906      	ldr	r1, [pc, #24]	; (8001984 <__NVIC_EnableIRQ+0x34>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a64:	f7ff ff90 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff2d 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff44 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff92 	bl	80019dc <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff61 	bl	8001988 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff37 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa4 	bl	8001a40 <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e04f      	b.n	8001bb4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d008      	beq.n	8001b32 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2204      	movs	r2, #4
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e040      	b.n	8001bb4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 020e 	bic.w	r2, r2, #14
 8001b40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f003 021c 	and.w	r2, r3, #28
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ba0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d005      	beq.n	8001be2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e047      	b.n	8001c72 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020e 	bic.w	r2, r2, #14
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f003 021c 	and.w	r2, r3, #28
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c2e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00c      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c50:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
    }
  }
  return status;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	e140      	b.n	8001f0e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8132 	beq.w	8001f08 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d005      	beq.n	8001cbc <HAL_GPIO_Init+0x40>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d130      	bne.n	8001d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 0201 	and.w	r2, r3, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d017      	beq.n	8001d5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d123      	bne.n	8001dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	6939      	ldr	r1, [r7, #16]
 8001daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0203 	and.w	r2, r3, #3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 808c 	beq.w	8001f08 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001df0:	4a4e      	ldr	r2, [pc, #312]	; (8001f2c <HAL_GPIO_Init+0x2b0>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	2207      	movs	r2, #7
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e1a:	d00d      	beq.n	8001e38 <HAL_GPIO_Init+0x1bc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_GPIO_Init+0x2b4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <HAL_GPIO_Init+0x1b8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a43      	ldr	r2, [pc, #268]	; (8001f34 <HAL_GPIO_Init+0x2b8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_GPIO_Init+0x1b4>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e004      	b.n	8001e3a <HAL_GPIO_Init+0x1be>
 8001e30:	2307      	movs	r3, #7
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x1be>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_GPIO_Init+0x1be>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	f002 0203 	and.w	r2, r2, #3
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	4093      	lsls	r3, r2
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e4a:	4938      	ldr	r1, [pc, #224]	; (8001f2c <HAL_GPIO_Init+0x2b0>)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e58:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea6:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001ed2:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f aeb7 	bne.w	8001c8c <HAL_GPIO_Init+0x10>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48000800 	.word	0x48000800
 8001f38:	58000800 	.word	0x58000800

08001f3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	58000400 	.word	0x58000400

08001f58 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <LL_PWR_EnableBootC2+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <LL_PWR_EnableBootC2+0x18>)
 8001f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	58000400 	.word	0x58000400

08001f74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_PWREx_GetVoltageRange+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	58000400 	.word	0x58000400

08001f8c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001f94:	f7ff ffe0 	bl	8001f58 <LL_PWR_EnableBootC2>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb0:	d101      	bne.n	8001fb6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	58000400 	.word	0x58000400

08001fc4 <LL_RCC_HSE_EnableTcxo>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_HSE_DisableTcxo>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800200e:	d101      	bne.n	8002014 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_RCC_HSE_Enable>:
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <LL_RCC_HSE_Disable>:
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <LL_RCC_HSE_IsReady>:
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002068:	d101      	bne.n	800206e <LL_RCC_HSE_IsReady+0x18>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <LL_RCC_HSE_IsReady+0x1a>
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <LL_RCC_HSI_Enable>:
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <LL_RCC_HSI_Disable>:
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <LL_RCC_HSI_IsReady>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d101      	bne.n	80020c8 <LL_RCC_HSI_IsReady+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_RCC_HSI_IsReady+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <LL_RCC_LSE_IsReady>:
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d101      	bne.n	8002112 <LL_RCC_LSE_IsReady+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_RCC_LSE_IsReady+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <LL_RCC_LSI_Enable>:
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <LL_RCC_LSI_Disable>:
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <LL_RCC_LSI_IsReady>:
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d101      	bne.n	8002174 <LL_RCC_LSI_IsReady+0x18>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <LL_RCC_LSI_IsReady+0x1a>
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <LL_RCC_MSI_Enable>:
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6013      	str	r3, [r2, #0]
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <LL_RCC_MSI_Disable>:
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <LL_RCC_MSI_IsReady>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d101      	bne.n	80021cc <LL_RCC_MSI_IsReady+0x16>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_RCC_MSI_IsReady+0x18>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d101      	bne.n	80021ec <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <LL_RCC_MSI_GetRange>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002218:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <LL_RCC_SetSysClkSource>:
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <LL_RCC_GetSysClkSource>:
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 030c 	and.w	r3, r3, #12
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <LL_RCC_SetAHBPrescaler>:
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <LL_C2_RCC_SetAHBPrescaler>:
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <LL_RCC_SetAHB3Prescaler>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022e8:	f023 020f 	bic.w	r2, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <LL_RCC_SetAPB1Prescaler>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <LL_RCC_SetAPB2Prescaler>:
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <LL_RCC_GetAHBPrescaler>:
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <LL_RCC_GetAHB3Prescaler>:
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <LL_RCC_GetAPB1Prescaler>:
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <LL_RCC_GetAPB2Prescaler>:
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023f6:	d101      	bne.n	80023fc <LL_RCC_PLL_IsReady+0x18>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_RCC_PLL_IsReady+0x1a>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0303 	and.w	r3, r3, #3
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d101      	bne.n	8002478 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002496:	d101      	bne.n	800249c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ba:	d101      	bne.n	80024c0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024dc:	d101      	bne.n	80024e2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024fe:	d101      	bne.n	8002504 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
	...

08002510 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e36f      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002522:	f7ff fea6 	bl	8002272 <LL_RCC_GetSysClkSource>
 8002526:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002528:	f7ff ff8f 	bl	800244a <LL_RCC_PLL_GetMainSource>
 800252c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80c4 	beq.w	80026c4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x3e>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d176      	bne.n	8002636 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d173      	bne.n	8002636 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e353      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x68>
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002576:	e006      	b.n	8002586 <HAL_RCC_OscConfig+0x76>
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002586:	4293      	cmp	r3, r2
 8002588:	d222      	bcs.n	80025d0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fd5a 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e331      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fe2b 	bl	8002224 <LL_RCC_MSI_SetCalibTrimming>
 80025ce:	e021      	b.n	8002614 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fe12 	bl	8002224 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fd1f 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e2f6      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002614:	f000 fce0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002618:	4603      	mov	r3, r0
 800261a:	4aa7      	ldr	r2, [pc, #668]	; (80028b8 <HAL_RCC_OscConfig+0x3a8>)
 800261c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800261e:	4ba7      	ldr	r3, [pc, #668]	; (80028bc <HAL_RCC_OscConfig+0x3ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f90c 	bl	8001840 <HAL_InitTick>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d047      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	e2e5      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d02c      	beq.n	8002698 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800263e:	f7ff fd9e 	bl	800217e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002642:	f7ff f949 	bl	80018d8 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264a:	f7ff f945 	bl	80018d8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e2d2      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800265c:	f7ff fdab 	bl	80021b6 <LL_RCC_MSI_IsReady>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f1      	beq.n	800264a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fdc7 	bl	8002224 <LL_RCC_MSI_SetCalibTrimming>
 8002696:	e015      	b.n	80026c4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002698:	f7ff fd7f 	bl	800219a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800269c:	f7ff f91c 	bl	80018d8 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a4:	f7ff f918 	bl	80018d8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2a5      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80026b6:	f7ff fd7e 	bl	80021b6 <LL_RCC_MSI_IsReady>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f1      	bne.n	80026a4 <HAL_RCC_OscConfig+0x194>
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026c2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d058      	beq.n	8002782 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d108      	bne.n	80026ee <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d14b      	bne.n	8002782 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e289      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80026ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d102      	bne.n	8002714 <HAL_RCC_OscConfig+0x204>
 800270e:	f7ff fc86 	bl	800201e <LL_RCC_HSE_Enable>
 8002712:	e00d      	b.n	8002730 <HAL_RCC_OscConfig+0x220>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800271c:	d104      	bne.n	8002728 <HAL_RCC_OscConfig+0x218>
 800271e:	f7ff fc51 	bl	8001fc4 <LL_RCC_HSE_EnableTcxo>
 8002722:	f7ff fc7c 	bl	800201e <LL_RCC_HSE_Enable>
 8002726:	e003      	b.n	8002730 <HAL_RCC_OscConfig+0x220>
 8002728:	f7ff fc87 	bl	800203a <LL_RCC_HSE_Disable>
 800272c:	f7ff fc58 	bl	8001fe0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d012      	beq.n	800275e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f8ce 	bl	80018d8 <HAL_GetTick>
 800273c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff f8ca 	bl	80018d8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e257      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002752:	f7ff fc80 	bl	8002056 <LL_RCC_HSE_IsReady>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f1      	beq.n	8002740 <HAL_RCC_OscConfig+0x230>
 800275c:	e011      	b.n	8002782 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7ff f8bb 	bl	80018d8 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002766:	f7ff f8b7 	bl	80018d8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	; 0x64
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e244      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002778:	f7ff fc6d 	bl	8002056 <LL_RCC_HSE_IsReady>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f1      	bne.n	8002766 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d046      	beq.n	800281c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_OscConfig+0x290>
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d10e      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e22a      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fc8e 	bl	80020d2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027b6:	e031      	b.n	800281c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d019      	beq.n	80027f4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	f7ff fc5a 	bl	8002078 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7ff f888 	bl	80018d8 <HAL_GetTick>
 80027c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7ff f884 	bl	80018d8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e211      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80027de:	f7ff fc67 	bl	80020b0 <LL_RCC_HSI_IsReady>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f1      	beq.n	80027cc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fc70 	bl	80020d2 <LL_RCC_HSI_SetCalibTrimming>
 80027f2:	e013      	b.n	800281c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f4:	f7ff fc4e 	bl	8002094 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff f86e 	bl	80018d8 <HAL_GetTick>
 80027fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff f86a 	bl	80018d8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1f7      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002812:	f7ff fc4d 	bl	80020b0 <LL_RCC_HSI_IsReady>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f1      	bne.n	8002800 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d06e      	beq.n	8002906 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d056      	beq.n	80028de <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002838:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	429a      	cmp	r2, r3
 8002846:	d031      	beq.n	80028ac <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e1d0      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800286a:	f7ff fc67 	bl	800213c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800286e:	f7ff f833 	bl	80018d8 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7ff f82f 	bl	80018d8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b11      	cmp	r3, #17
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1bc      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002888:	f7ff fc68 	bl	800215c <LL_RCC_LSI_IsReady>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f1      	bne.n	8002876 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	f023 0210 	bic.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ac:	f7ff fc36 	bl	800211c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7ff f812 	bl	80018d8 <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80028b6:	e00c      	b.n	80028d2 <HAL_RCC_OscConfig+0x3c2>
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7ff f80a 	bl	80018d8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b11      	cmp	r3, #17
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e197      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80028d2:	f7ff fc43 	bl	800215c <LL_RCC_LSI_IsReady>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f1      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3b0>
 80028dc:	e013      	b.n	8002906 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028de:	f7ff fc2d 	bl	800213c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fff9 	bl	80018d8 <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ea:	f7fe fff5 	bl	80018d8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e182      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80028fc:	f7ff fc2e 	bl	800215c <LL_RCC_LSI_IsReady>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f1      	bne.n	80028ea <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80d8 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002914:	f7ff fb44 	bl	8001fa0 <LL_PWR_IsEnabledBkUpAccess>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d113      	bne.n	8002946 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800291e:	f7ff fb0d 	bl	8001f3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe ffd9 	bl	80018d8 <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe ffd5 	bl	80018d8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e162      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800293c:	f7ff fb30 	bl	8001fa0 <LL_PWR_IsEnabledBkUpAccess>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f1      	beq.n	800292a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d07b      	beq.n	8002a46 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b85      	cmp	r3, #133	; 0x85
 8002954:	d003      	beq.n	800295e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d109      	bne.n	8002972 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe ffb1 	bl	80018d8 <HAL_GetTick>
 8002976:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe ffa3 	bl	80018d8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e12e      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80029a4:	f7ff fba9 	bl	80020fa <LL_RCC_LSE_IsReady>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ef      	beq.n	800298e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b81      	cmp	r3, #129	; 0x81
 80029b4:	d003      	beq.n	80029be <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b85      	cmp	r3, #133	; 0x85
 80029bc:	d121      	bne.n	8002a02 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe ff8b 	bl	80018d8 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe ff7d 	bl	80018d8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e108      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ec      	beq.n	80029da <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a00:	e060      	b.n	8002ac4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe ff69 	bl	80018d8 <HAL_GetTick>
 8002a06:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe ff5b 	bl	80018d8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0e6      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ec      	bne.n	8002a1e <HAL_RCC_OscConfig+0x50e>
 8002a44:	e03e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a46:	f7fe ff47 	bl	80018d8 <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe ff39 	bl	80018d8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0c4      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ec      	bne.n	8002a62 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7fe ff26 	bl	80018d8 <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe ff18 	bl	80018d8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0a3      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002aba:	f7ff fb1e 	bl	80020fa <LL_RCC_LSE_IsReady>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ef      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8099 	beq.w	8002c00 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d06c      	beq.n	8002bae <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d14b      	bne.n	8002b74 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	f7ff fc74 	bl	80023c8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fefa 	bl	80018d8 <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fef6 	bl	80018d8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b0a      	cmp	r3, #10
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e083      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002afa:	f7ff fc73 	bl	80023e4 <LL_RCC_PLL_IsReady>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f1      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_RCC_OscConfig+0x6fc>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b30:	430a      	orrs	r2, r1
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3a:	f7ff fc37 	bl	80023ac <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fec3 	bl	80018d8 <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe febf 	bl	80018d8 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b0a      	cmp	r3, #10
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e04c      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b68:	f7ff fc3c 	bl	80023e4 <LL_RCC_PLL_IsReady>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f1      	beq.n	8002b56 <HAL_RCC_OscConfig+0x646>
 8002b72:	e045      	b.n	8002c00 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	f7ff fc28 	bl	80023c8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe feae 	bl	80018d8 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe feaa 	bl	80018d8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b0a      	cmp	r3, #10
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e037      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b92:	f7ff fc27 	bl	80023e4 <LL_RCC_PLL_IsReady>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f1      	bne.n	8002b80 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_RCC_OscConfig+0x700>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
 8002bac:	e028      	b.n	8002c00 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e023      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d115      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d10e      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	11c1808c 	.word	0x11c1808c
 8002c10:	eefefffc 	.word	0xeefefffc

08002c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e12c      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b98      	ldr	r3, [pc, #608]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d91b      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b95      	ldr	r3, [pc, #596]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4993      	ldr	r1, [pc, #588]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c46:	f7fe fe47 	bl	80018d8 <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c4e:	f7fe fe43 	bl	80018d8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e110      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c60:	4b8a      	ldr	r3, [pc, #552]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d1ef      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fb02 	bl	8002288 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c84:	f7fe fe28 	bl	80018d8 <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c8c:	f7fe fe24 	bl	80018d8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0f1      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c9e:	f7ff fbdf 	bl	8002460 <LL_RCC_IsActiveFlag_HPRE>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f1      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff faf8 	bl	80022ae <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe fe0b 	bl	80018d8 <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cc6:	f7fe fe07 	bl	80018d8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0d4      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cd8:	f7ff fbd3 	bl	8002482 <LL_RCC_IsActiveFlag_C2HPRE>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f1      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff faf0 	bl	80022d8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fdee 	bl	80018d8 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d00:	f7fe fdea 	bl	80018d8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0b7      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d12:	f7ff fbc8 	bl	80024a6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f1      	beq.n	8002d00 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fae9 	bl	8002304 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d32:	f7fe fdd1 	bl	80018d8 <HAL_GetTick>
 8002d36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d3a:	f7fe fdcd 	bl	80018d8 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e09a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d4c:	f7ff fbbd 	bl	80024ca <LL_RCC_IsActiveFlag_PPRE1>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f1      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fade 	bl	800232a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fdb3 	bl	80018d8 <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d76:	f7fe fdaf 	bl	80018d8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e07c      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d88:	f7ff fbb0 	bl	80024ec <LL_RCC_IsActiveFlag_PPRE2>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f1      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d043      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d106      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002da6:	f7ff f956 	bl	8002056 <LL_RCC_HSE_IsReady>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d11e      	bne.n	8002dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e066      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002dbc:	f7ff fb12 	bl	80023e4 <LL_RCC_PLL_IsReady>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d113      	bne.n	8002dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e05b      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002dd2:	f7ff f9f0 	bl	80021b6 <LL_RCC_MSI_IsReady>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d108      	bne.n	8002dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e050      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002de0:	f7ff f966 	bl	80020b0 <LL_RCC_HSI_IsReady>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e049      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fa2a 	bl	800224c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7fe fd6e 	bl	80018d8 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe fd6a 	bl	80018d8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e035      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	f7ff fa2c 	bl	8002272 <LL_RCC_GetSysClkSource>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d1ec      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d21b      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 0207 	bic.w	r2, r3, #7
 8002e3c:	4913      	ldr	r1, [pc, #76]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e44:	f7fe fd48 	bl	80018d8 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e4c:	f7fe fd44 	bl	80018d8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e011      	b.n	8002e82 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_ClockConfig+0x278>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1ef      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e6c:	f000 f8b4 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_RCC_ClockConfig+0x27c>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCC_ClockConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fce0 	bl	8001840 <HAL_InitTick>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	58004000 	.word	0x58004000
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea6:	f7ff f9e4 	bl	8002272 <LL_RCC_GetSysClkSource>
 8002eaa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eac:	f7ff facd 	bl	800244a <LL_RCC_PLL_GetMainSource>
 8002eb0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x2c>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d139      	bne.n	8002f32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d136      	bne.n	8002f32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ec4:	f7ff f987 	bl	80021d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d115      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x62>
 8002ece:	f7ff f982 	bl	80021d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x4e>
 8002ed8:	f7ff f98d 	bl	80021f6 <LL_RCC_MSI_GetRange>
 8002edc:	4603      	mov	r3, r0
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	e005      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002ee6:	f7ff f991 	bl	800220c <LL_RCC_MSI_GetRangeAfterStandby>
 8002eea:	4603      	mov	r3, r0
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x134>)
 8002ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x8c>
 8002efa:	f7ff f96c 	bl	80021d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x7a>
 8002f04:	f7ff f977 	bl	80021f6 <LL_RCC_MSI_GetRange>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	e005      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x86>
 8002f12:	f7ff f97b 	bl	800220c <LL_RCC_MSI_GetRangeAfterStandby>
 8002f16:	4603      	mov	r3, r0
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x134>)
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d115      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f30:	e012      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e00c      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d109      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f44:	f7ff f85a 	bl	8001ffc <LL_RCC_HSE_IsEnabledDiv2>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e001      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f54:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f58:	f7ff f98b 	bl	8002272 <LL_RCC_GetSysClkSource>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d12f      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f62:	f7ff fa72 	bl	800244a <LL_RCC_PLL_GetMainSource>
 8002f66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0xde>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d003      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0xe4>
 8002f74:	e00d      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f78:	60fb      	str	r3, [r7, #12]
        break;
 8002f7a:	e00d      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f7c:	f7ff f83e 	bl	8001ffc <LL_RCC_HSE_IsEnabledDiv2>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f8e:	60fb      	str	r3, [r7, #12]
        break;
 8002f90:	e002      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	60fb      	str	r3, [r7, #12]
        break;
 8002f96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002f98:	f7ff fa35 	bl	8002406 <LL_RCC_PLL_GetN>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	fb03 f402 	mul.w	r4, r3, r2
 8002fa4:	f7ff fa46 	bl	8002434 <LL_RCC_PLL_GetDivider>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	3301      	adds	r3, #1
 8002fae:	fbb4 f4f3 	udiv	r4, r4, r3
 8002fb2:	f7ff fa34 	bl	800241e <LL_RCC_PLL_GetR>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	0f5b      	lsrs	r3, r3, #29
 8002fba:	3301      	adds	r3, #1
 8002fbc:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fc0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002fc2:	697b      	ldr	r3, [r7, #20]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd90      	pop	{r4, r7, pc}
 8002fcc:	08006d6c 	.word	0x08006d6c
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	01e84800 	.word	0x01e84800

08002fd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b598      	push	{r3, r4, r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002fdc:	f7ff ff5c 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	f7ff f9b5 	bl	8002350 <LL_RCC_GetAHBPrescaler>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x24>)
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd98      	pop	{r3, r4, r7, pc}
 8002ffc:	08006d0c 	.word	0x08006d0c

08003000 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b598      	push	{r3, r4, r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003004:	f7ff ffe8 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003008:	4604      	mov	r4, r0
 800300a:	f7ff f9b9 	bl	8002380 <LL_RCC_GetAPB1Prescaler>
 800300e:	4603      	mov	r3, r0
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	4a03      	ldr	r2, [pc, #12]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	fa24 f303 	lsr.w	r3, r4, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd98      	pop	{r3, r4, r7, pc}
 8003020:	08006d4c 	.word	0x08006d4c

08003024 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003024:	b598      	push	{r3, r4, r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003028:	f7ff ffd6 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 800302c:	4604      	mov	r4, r0
 800302e:	f7ff f9b2 	bl	8002396 <LL_RCC_GetAPB2Prescaler>
 8003032:	4603      	mov	r3, r0
 8003034:	0adb      	lsrs	r3, r3, #11
 8003036:	4a03      	ldr	r2, [pc, #12]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd98      	pop	{r3, r4, r7, pc}
 8003044:	08006d4c 	.word	0x08006d4c

08003048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	4a10      	ldr	r2, [pc, #64]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003060:	f7ff f981 	bl	8002366 <LL_RCC_GetAHB3Prescaler>
 8003064:	4603      	mov	r3, r0
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0c9c      	lsrs	r4, r3, #18
 8003084:	f7fe ff76 	bl	8001f74 <HAL_PWREx_GetVoltageRange>
 8003088:	4603      	mov	r3, r0
 800308a:	4619      	mov	r1, r3
 800308c:	4620      	mov	r0, r4
 800308e:	f000 f80b 	bl	80030a8 <RCC_SetFlashLatency>
 8003092:	4603      	mov	r3, r0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	08006d6c 	.word	0x08006d6c
 80030a0:	08006d0c 	.word	0x08006d0c
 80030a4:	431bde83 	.word	0x431bde83

080030a8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08e      	sub	sp, #56	; 0x38
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80030b2:	4a3a      	ldr	r2, [pc, #232]	; (800319c <RCC_SetFlashLatency+0xf4>)
 80030b4:	f107 0320 	add.w	r3, r7, #32
 80030b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030bc:	6018      	str	r0, [r3, #0]
 80030be:	3304      	adds	r3, #4
 80030c0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80030c2:	4a37      	ldr	r2, [pc, #220]	; (80031a0 <RCC_SetFlashLatency+0xf8>)
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030cc:	6018      	str	r0, [r3, #0]
 80030ce:	3304      	adds	r3, #4
 80030d0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80030d2:	4a34      	ldr	r2, [pc, #208]	; (80031a4 <RCC_SetFlashLatency+0xfc>)
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80030da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030de:	2300      	movs	r3, #0
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d11b      	bne.n	8003122 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
 80030ee:	e014      	b.n	800311a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	3338      	adds	r3, #56	; 0x38
 80030f6:	443b      	add	r3, r7
 80030f8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80030fc:	461a      	mov	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4293      	cmp	r3, r2
 8003102:	d807      	bhi.n	8003114 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3338      	adds	r3, #56	; 0x38
 800310a:	443b      	add	r3, r7
 800310c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003112:	e021      	b.n	8003158 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	3301      	adds	r3, #1
 8003118:	633b      	str	r3, [r7, #48]	; 0x30
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	2b02      	cmp	r3, #2
 800311e:	d9e7      	bls.n	80030f0 <RCC_SetFlashLatency+0x48>
 8003120:	e01a      	b.n	8003158 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003122:	2300      	movs	r3, #0
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003126:	e014      	b.n	8003152 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	3338      	adds	r3, #56	; 0x38
 800312e:	443b      	add	r3, r7
 8003130:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003134:	461a      	mov	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4293      	cmp	r3, r2
 800313a:	d807      	bhi.n	800314c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	3338      	adds	r3, #56	; 0x38
 8003142:	443b      	add	r3, r7
 8003144:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800314a:	e005      	b.n	8003158 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	3301      	adds	r3, #1
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	2b02      	cmp	r3, #2
 8003156:	d9e7      	bls.n	8003128 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <RCC_SetFlashLatency+0x100>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 0207 	bic.w	r2, r3, #7
 8003160:	4911      	ldr	r1, [pc, #68]	; (80031a8 <RCC_SetFlashLatency+0x100>)
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	4313      	orrs	r3, r2
 8003166:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003168:	f7fe fbb6 	bl	80018d8 <HAL_GetTick>
 800316c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800316e:	e008      	b.n	8003182 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003170:	f7fe fbb2 	bl	80018d8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e007      	b.n	8003192 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <RCC_SetFlashLatency+0x100>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800318c:	429a      	cmp	r2, r3
 800318e:	d1ef      	bne.n	8003170 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3738      	adds	r7, #56	; 0x38
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	08006cf0 	.word	0x08006cf0
 80031a0:	08006cf8 	.word	0x08006cf8
 80031a4:	08006d00 	.word	0x08006d00
 80031a8:	58004000 	.word	0x58004000

080031ac <LL_RCC_LSE_IsReady>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d101      	bne.n	80031c4 <LL_RCC_LSE_IsReady+0x18>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <LL_RCC_LSE_IsReady+0x1a>
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <LL_RCC_SetUSARTClockSource>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	43db      	mvns	r3, r3
 80031e4:	401a      	ands	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <LL_RCC_SetI2SClockSource>:
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <LL_RCC_SetLPUARTClockSource>:
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800323c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <LL_RCC_SetI2CClockSource>:
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800326a:	43db      	mvns	r3, r3
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <LL_RCC_SetLPTIMClockSource>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <LL_RCC_SetRNGClockSource>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_SetADCClockSource>:
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <LL_RCC_SetRTCClockSource>:
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <LL_RCC_GetRTCClockSource>:
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <LL_RCC_ForceBackupDomainReset>:
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800338a:	bf00      	nop
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
	...

08003394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80033a0:	2300      	movs	r3, #0
 80033a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033a4:	2300      	movs	r3, #0
 80033a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d058      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80033b4:	f7fe fdc2 	bl	8001f3c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fa8e 	bl	80018d8 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033be:	e009      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fe fa8a 	bl	80018d8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d902      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	74fb      	strb	r3, [r7, #19]
        break;
 80033d2:	e006      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033d4:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e0:	d1ee      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d13c      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80033e8:	f7ff ffa7 	bl	800333a <LL_RCC_GetRTCClockSource>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d00f      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003404:	f7ff ffa5 	bl	8003352 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003408:	f7ff ffb3 	bl	8003372 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800340c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d014      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fa5a 	bl	80018d8 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003426:	e00b      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe fa56 	bl	80018d8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d902      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	74fb      	strb	r3, [r7, #19]
            break;
 800343e:	e004      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003440:	f7ff feb4 	bl	80031ac <LL_RCC_LSE_IsReady>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d1ee      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff5b 	bl	8003310 <LL_RCC_SetRTCClockSource>
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	74bb      	strb	r3, [r7, #18]
 8003460:	e001      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fea9 	bl	80031ce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fe9e 	bl	80031ce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fec0 	bl	8003228 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fee6 	bl	800328a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fedb 	bl	800328a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d004      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fed0 	bl	800328a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fea9 	bl	8003252 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fe9e 	bl	8003252 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fe93 	bl	8003252 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d011      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fe5e 	bl	80031fe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d107      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fea5 	bl	80032bc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003588:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d011      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fea3 	bl	80032e6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a8:	d107      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80035ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	58000400 	.word	0x58000400

080035c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d071      	beq.n	80036be <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd ff02 	bl	80013f8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RTC_Init+0x100>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b10      	cmp	r3, #16
 8003606:	d051      	beq.n	80036ac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RTC_Init+0x100>)
 800360a:	22ca      	movs	r2, #202	; 0xca
 800360c:	625a      	str	r2, [r3, #36]	; 0x24
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <HAL_RTC_Init+0x100>)
 8003610:	2253      	movs	r2, #83	; 0x53
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb87 	bl	8003d28 <RTC_EnterInitMode>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d13f      	bne.n	80036a4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <HAL_RTC_Init+0x100>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <HAL_RTC_Init+0x100>)
 800362a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RTC_Init+0x100>)
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	4319      	orrs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	430b      	orrs	r3, r1
 8003648:	491f      	ldr	r1, [pc, #124]	; (80036c8 <HAL_RTC_Init+0x100>)
 800364a:	4313      	orrs	r3, r2
 800364c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RTC_Init+0x100>)
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800365e:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_RTC_Init+0x100>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	430b      	orrs	r3, r1
 8003670:	4915      	ldr	r1, [pc, #84]	; (80036c8 <HAL_RTC_Init+0x100>)
 8003672:	4313      	orrs	r3, r2
 8003674:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fb8a 	bl	8003d90 <RTC_ExitInitMode>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10e      	bne.n	80036a4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RTC_Init+0x100>)
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a19      	ldr	r1, [r3, #32]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4319      	orrs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	430b      	orrs	r3, r1
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RTC_Init+0x100>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_RTC_Init+0x100>)
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
 80036aa:	e001      	b.n	80036b0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40002800 	.word	0x40002800

080036cc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_RTC_SetTime+0x1a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e088      	b.n	80037f8 <HAL_RTC_SetTime+0x12c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f6:	4b42      	ldr	r3, [pc, #264]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80036f8:	22ca      	movs	r2, #202	; 0xca
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80036fe:	2253      	movs	r2, #83	; 0x53
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fb10 	bl	8003d28 <RTC_EnterInitMode>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d15e      	bne.n	80037d0 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003712:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RTC_SetTime+0x134>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371e:	d057      	beq.n	80037d0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d125      	bne.n	8003772 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <HAL_RTC_SetTime+0x134>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fb65 	bl	8003e0c <RTC_ByteToBcd2>
 8003742:	4603      	mov	r3, r0
 8003744:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fb5e 	bl	8003e0c <RTC_ByteToBcd2>
 8003750:	4603      	mov	r3, r0
 8003752:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003754:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	789b      	ldrb	r3, [r3, #2]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fb56 	bl	8003e0c <RTC_ByteToBcd2>
 8003760:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003762:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	78db      	ldrb	r3, [r3, #3]
 800376a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e017      	b.n	80037a2 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_RTC_SetTime+0x134>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2200      	movs	r2, #0
 8003782:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003790:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003796:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037ae:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	68d9      	ldr	r1, [r3, #12]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	490d      	ldr	r1, [pc, #52]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fadd 	bl	8003d90 <RTC_ExitInitMode>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RTC_SetTime+0x134>)
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}
 8003800:	40002800 	.word	0x40002800

08003804 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <HAL_RTC_GetTime+0xc0>)
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003818:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_RTC_GetTime+0xc0>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003824:	d049      	beq.n	80038ba <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003826:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <HAL_RTC_GetTime+0xc0>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_RTC_GetTime+0xc0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800383a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800383e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	0d9b      	lsrs	r3, r3, #22
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11a      	bne.n	80038ba <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fade 	bl	8003e4a <RTC_Bcd2ToByte>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fad5 	bl	8003e4a <RTC_Bcd2ToByte>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	789b      	ldrb	r3, [r3, #2]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 facc 	bl	8003e4a <RTC_Bcd2ToByte>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40002800 	.word	0x40002800

080038c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_RTC_SetDate+0x1a>
 80038de:	2302      	movs	r3, #2
 80038e0:	e071      	b.n	80039c6 <HAL_RTC_SetDate+0xfe>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10e      	bne.n	8003916 <HAL_RTC_SetDate+0x4e>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	f023 0310 	bic.w	r3, r3, #16
 800390c:	b2db      	uxtb	r3, r3
 800390e:	330a      	adds	r3, #10
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11c      	bne.n	8003956 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	78db      	ldrb	r3, [r3, #3]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fa73 	bl	8003e0c <RTC_ByteToBcd2>
 8003926:	4603      	mov	r3, r0
 8003928:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	785b      	ldrb	r3, [r3, #1]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fa6c 	bl	8003e0c <RTC_ByteToBcd2>
 8003934:	4603      	mov	r3, r0
 8003936:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003938:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	789b      	ldrb	r3, [r3, #2]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa64 	bl	8003e0c <RTC_ByteToBcd2>
 8003944:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003946:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e00e      	b.n	8003974 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	78db      	ldrb	r3, [r3, #3]
 800395a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003962:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003968:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_RTC_SetDate+0x108>)
 8003976:	22ca      	movs	r2, #202	; 0xca
 8003978:	625a      	str	r2, [r3, #36]	; 0x24
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_RTC_SetDate+0x108>)
 800397c:	2253      	movs	r2, #83	; 0x53
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f9d1 	bl	8003d28 <RTC_EnterInitMode>
 8003986:	4603      	mov	r3, r0
 8003988:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800398a:	7cfb      	ldrb	r3, [r7, #19]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003990:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <HAL_RTC_SetDate+0x108>)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003998:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800399c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f9f6 	bl	8003d90 <RTC_ExitInitMode>
 80039a4:	4603      	mov	r3, r0
 80039a6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RTC_SetDate+0x108>)
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40002800 	.word	0x40002800

080039d4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_RTC_GetDate+0x98>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	0b5b      	lsrs	r3, r3, #13
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11a      	bne.n	8003a62 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	78db      	ldrb	r3, [r3, #3]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fa0a 	bl	8003e4a <RTC_Bcd2ToByte>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	785b      	ldrb	r3, [r3, #1]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fa01 	bl	8003e4a <RTC_Bcd2ToByte>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	789b      	ldrb	r3, [r3, #2]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f9f8 	bl	8003e4a <RTC_Bcd2ToByte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40002800 	.word	0x40002800

08003a70 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_RTC_SetAlarm_IT+0x1e>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e0f3      	b.n	8003c76 <HAL_RTC_SetAlarm_IT+0x206>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003a9e:	4b78      	ldr	r3, [pc, #480]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	d06a      	beq.n	8003b86 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13a      	bne.n	8003b2c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003ab6:	4b72      	ldr	r3, [pc, #456]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 f999 	bl	8003e0c <RTC_ByteToBcd2>
 8003ada:	4603      	mov	r3, r0
 8003adc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f992 	bl	8003e0c <RTC_ByteToBcd2>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003aec:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	789b      	ldrb	r3, [r3, #2]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f98a 	bl	8003e0c <RTC_ByteToBcd2>
 8003af8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003afa:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	78db      	ldrb	r3, [r3, #3]
 8003b02:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b04:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f97c 	bl	8003e0c <RTC_ByteToBcd2>
 8003b14:	4603      	mov	r3, r0
 8003b16:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b18:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b20:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e02c      	b.n	8003b86 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003b34:	d00d      	beq.n	8003b52 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b3e:	d008      	beq.n	8003b52 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b40:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b5e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b64:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	78db      	ldrb	r3, [r3, #3]
 8003b6a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b6c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b74:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b76:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b7c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b86:	4b3e      	ldr	r3, [pc, #248]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b88:	22ca      	movs	r2, #202	; 0xca
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b8c:	4b3c      	ldr	r3, [pc, #240]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b8e:	2253      	movs	r2, #83	; 0x53
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9a:	d12c      	bne.n	8003bf6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003b9c:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	4a37      	ldr	r2, [pc, #220]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ba2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ba6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4930      	ldr	r1, [pc, #192]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	644b      	str	r3, [r1, #68]	; 0x44
 8003bc4:	e006      	b.n	8003bd4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003bc6:	4a2e      	ldr	r2, [pc, #184]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003bcc:	4a2c      	ldr	r2, [pc, #176]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003bd4:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bee:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003bf2:	6193      	str	r3, [r2, #24]
 8003bf4:	e02b      	b.n	8003c4e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003bf6:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bfc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003c00:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c04:	2202      	movs	r2, #2
 8003c06:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d107      	bne.n	8003c20 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	4919      	ldr	r1, [pc, #100]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c1e:	e006      	b.n	8003c2e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003c26:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c48:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003c4c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_RTC_SetAlarm_IT+0x214>)
 8003c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <HAL_RTC_SetAlarm_IT+0x214>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40002800 	.word	0x40002800
 8003c84:	58000800 	.word	0x58000800

08003c88 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003c92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fc fe6d 	bl	800098c <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8dc 	bl	8003e80 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40002800 	.word	0x40002800

08003cdc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RTC_WaitForSynchro+0x48>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <HAL_RTC_WaitForSynchro+0x48>)
 8003cea:	f023 0320 	bic.w	r3, r3, #32
 8003cee:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003cf0:	f7fd fdf2 	bl	80018d8 <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003cf6:	e009      	b.n	8003d0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cf8:	f7fd fdee 	bl	80018d8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d06:	d901      	bls.n	8003d0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e006      	b.n	8003d1a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RTC_WaitForSynchro+0x48>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ef      	beq.n	8003cf8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40002800 	.word	0x40002800

08003d28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003d34:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <RTC_EnterInitMode+0x64>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d120      	bne.n	8003d82 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003d40:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <RTC_EnterInitMode+0x64>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <RTC_EnterInitMode+0x64>)
 8003d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003d4c:	f7fd fdc4 	bl	80018d8 <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d52:	e00d      	b.n	8003d70 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d54:	f7fd fdc0 	bl	80018d8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d62:	d905      	bls.n	8003d70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <RTC_EnterInitMode+0x64>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <RTC_EnterInitMode+0x5a>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d1e8      	bne.n	8003d54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40002800 	.word	0x40002800

08003d90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <RTC_ExitInitMode+0x78>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <RTC_ExitInitMode+0x78>)
 8003da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003da8:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <RTC_ExitInitMode+0x78>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10c      	bne.n	8003dce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff91 	bl	8003cdc <HAL_RTC_WaitForSynchro>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01e      	beq.n	8003dfe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e017      	b.n	8003dfe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <RTC_ExitInitMode+0x78>)
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <RTC_ExitInitMode+0x78>)
 8003dd4:	f023 0320 	bic.w	r3, r3, #32
 8003dd8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff7e 	bl	8003cdc <HAL_RTC_WaitForSynchro>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2203      	movs	r2, #3
 8003dea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <RTC_ExitInitMode+0x78>)
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <RTC_ExitInitMode+0x78>)
 8003df8:	f043 0320 	orr.w	r3, r3, #32
 8003dfc:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40002800 	.word	0x40002800

08003e0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003e1e:	e005      	b.n	8003e2c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3301      	adds	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	3b0a      	subs	r3, #10
 8003e2a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	2b09      	cmp	r3, #9
 8003e30:	d8f6      	bhi.n	8003e20 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	7afb      	ldrb	r3, [r7, #11]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	b2db      	uxtb	r3, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	b2db      	uxtb	r3, r3
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <LL_RCC_GetUSARTClockSource>:
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	4313      	orrs	r3, r2
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_GetLPUARTClockSource>:
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4013      	ands	r3, r2
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e042      	b.n	8003f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fd fab1 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2224      	movs	r2, #36	; 0x24
 8003f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fc3c 	bl	8004794 <UART_SetConfig>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e022      	b.n	8003f6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fea4 	bl	8004c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 ff2a 	bl	8004dbe <UART_CheckIdleState>
 8003f6a:	4603      	mov	r3, r0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b091      	sub	sp, #68	; 0x44
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d178      	bne.n	800407e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_UART_Transmit_IT+0x24>
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e071      	b.n	8004080 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2221      	movs	r2, #33	; 0x21
 8003fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd0:	d12a      	bne.n	8004028 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d107      	bne.n	8003fec <HAL_UART_Transmit_IT+0x78>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a29      	ldr	r2, [pc, #164]	; (800408c <HAL_UART_Transmit_IT+0x118>)
 8003fe8:	679a      	str	r2, [r3, #120]	; 0x78
 8003fea:	e002      	b.n	8003ff2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a28      	ldr	r2, [pc, #160]	; (8004090 <HAL_UART_Transmit_IT+0x11c>)
 8003ff0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3308      	adds	r3, #8
 8004010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004012:	637a      	str	r2, [r7, #52]	; 0x34
 8004014:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e5      	bne.n	8003ff2 <HAL_UART_Transmit_IT+0x7e>
 8004026:	e028      	b.n	800407a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d107      	bne.n	8004042 <HAL_UART_Transmit_IT+0xce>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <HAL_UART_Transmit_IT+0x120>)
 800403e:	679a      	str	r2, [r3, #120]	; 0x78
 8004040:	e002      	b.n	8004048 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <HAL_UART_Transmit_IT+0x124>)
 8004046:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	613b      	str	r3, [r7, #16]
   return(result);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004066:	623b      	str	r3, [r7, #32]
 8004068:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	69f9      	ldr	r1, [r7, #28]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	61bb      	str	r3, [r7, #24]
   return(result);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	e000      	b.n	8004080 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800407e:	2302      	movs	r3, #2
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3744      	adds	r7, #68	; 0x44
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	08005577 	.word	0x08005577
 8004090:	08005499 	.word	0x08005499
 8004094:	080053d9 	.word	0x080053d9
 8004098:	08005323 	.word	0x08005323

0800409c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d137      	bne.n	8004124 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_UART_Receive_IT+0x24>
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e030      	b.n	8004126 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_UART_Receive_IT+0x94>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d01f      	beq.n	8004114 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d018      	beq.n	8004114 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	613b      	str	r3, [r7, #16]
   return(result);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	69f9      	ldr	r1, [r7, #28]
 8004106:	6a3a      	ldr	r2, [r7, #32]
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	61bb      	str	r3, [r7, #24]
   return(result);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e6      	bne.n	80040e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	461a      	mov	r2, r3
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 ff66 	bl	8004fec <UART_Start_Receive_IT>
 8004120:	4603      	mov	r3, r0
 8004122:	e000      	b.n	8004126 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3728      	adds	r7, #40	; 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40008000 	.word	0x40008000

08004134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0ba      	sub	sp, #232	; 0xe8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800415a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800415e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004162:	4013      	ands	r3, r2
 8004164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11b      	bne.n	80041a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800417c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 82e3 	beq.w	8004764 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
      }
      return;
 80041a6:	e2dd      	b.n	8004764 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8123 	beq.w	80043f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041b6:	4b8d      	ldr	r3, [pc, #564]	; (80043ec <HAL_UART_IRQHandler+0x2b8>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041c2:	4b8b      	ldr	r3, [pc, #556]	; (80043f0 <HAL_UART_IRQHandler+0x2bc>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8116 	beq.w	80043f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <HAL_UART_IRQHandler+0xc8>
 80041d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d011      	beq.n	800422c <HAL_UART_IRQHandler+0xf8>
 8004208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2202      	movs	r2, #2
 800421a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d011      	beq.n	800425c <HAL_UART_IRQHandler+0x128>
 8004238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2204      	movs	r2, #4
 800424a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f043 0202 	orr.w	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d017      	beq.n	8004298 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004274:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004278:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_UART_IRQHandler+0x2b8>)
 800427a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f043 0208 	orr.w	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <HAL_UART_IRQHandler+0x196>
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00c      	beq.n	80042ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8249 	beq.w	8004768 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d013      	beq.n	800430a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d005      	beq.n	800432e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432a:	2b00      	cmp	r3, #0
 800432c:	d054      	beq.n	80043d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 ff7c 	bl	800522c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d146      	bne.n	80043d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3308      	adds	r3, #8
 8004348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800435c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800436e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800437a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1d9      	bne.n	8004342 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004394:	2b00      	cmp	r3, #0
 8004396:	d017      	beq.n	80043c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <HAL_UART_IRQHandler+0x2c0>)
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd fc08 	bl	8001bbe <HAL_DMA_Abort_IT>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d019      	beq.n	80043e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80043c2:	4610      	mov	r0, r2
 80043c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c6:	e00f      	b.n	80043e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc fa97 	bl	80008fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ce:	e00b      	b.n	80043e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fc fa93 	bl	80008fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d6:	e007      	b.n	80043e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fc fa8f 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80043e6:	e1bf      	b.n	8004768 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	bf00      	nop
    return;
 80043ea:	e1bd      	b.n	8004768 <HAL_UART_IRQHandler+0x634>
 80043ec:	10000001 	.word	0x10000001
 80043f0:	04000120 	.word	0x04000120
 80043f4:	080052f7 	.word	0x080052f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 8153 	bne.w	80046a8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 814c 	beq.w	80046a8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8145 	beq.w	80046a8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2210      	movs	r2, #16
 8004424:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	f040 80bb 	bne.w	80045ac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 818f 	beq.w	800476c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004454:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004458:	429a      	cmp	r2, r3
 800445a:	f080 8187 	bcs.w	800476c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 8087 	bne.w	800458a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1da      	bne.n	800447c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3308      	adds	r3, #8
 80044e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e1      	bne.n	80044c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3308      	adds	r3, #8
 8004508:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004526:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004528:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800452c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e3      	bne.n	8004502 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004558:	f023 0310 	bic.w	r3, r3, #16
 800455c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456a:	65bb      	str	r3, [r7, #88]	; 0x58
 800456c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e4      	bne.n	8004548 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004584:	4618      	mov	r0, r3
 8004586:	f7fd fabc 	bl	8001b02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800459c:	b29b      	uxth	r3, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f8e9 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045aa:	e0df      	b.n	800476c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80d1 	beq.w	8004770 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80045ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80cc 	beq.w	8004770 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045fa:	647b      	str	r3, [r7, #68]	; 0x44
 80045fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e4      	bne.n	80045d8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	623b      	str	r3, [r7, #32]
   return(result);
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004636:	633a      	str	r2, [r7, #48]	; 0x30
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800463c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e1      	bne.n	800460e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	60fb      	str	r3, [r7, #12]
   return(result);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0310 	bic.w	r3, r3, #16
 8004672:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	69b9      	ldr	r1, [r7, #24]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	617b      	str	r3, [r7, #20]
   return(result);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e4      	bne.n	800465e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800469a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f86b 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046a6:	e063      	b.n	8004770 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <HAL_UART_IRQHandler+0x59e>
 80046b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 fd0e 	bl	80060ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046d0:	e051      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d014      	beq.n	8004708 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80046de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80046ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03a      	beq.n	8004774 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4798      	blx	r3
    }
    return;
 8004706:	e035      	b.n	8004774 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_UART_IRQHandler+0x5f4>
 8004714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 ff9c 	bl	800565e <UART_EndTransmit_IT>
    return;
 8004726:	e026      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <HAL_UART_IRQHandler+0x614>
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 fce5 	bl	8006110 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004746:	e016      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_UART_IRQHandler+0x642>
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004758:	2b00      	cmp	r3, #0
 800475a:	da0c      	bge.n	8004776 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 fcce 	bl	80060fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004762:	e008      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
      return;
 8004764:	bf00      	nop
 8004766:	e006      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
    return;
 8004768:	bf00      	nop
 800476a:	e004      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
      return;
 800476c:	bf00      	nop
 800476e:	e002      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
      return;
 8004770:	bf00      	nop
 8004772:	e000      	b.n	8004776 <HAL_UART_IRQHandler+0x642>
    return;
 8004774:	bf00      	nop
  }
}
 8004776:	37e8      	adds	r7, #232	; 0xe8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
	...

08004794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b08c      	sub	sp, #48	; 0x30
 800479a:	af00      	add	r7, sp, #0
 800479c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b94      	ldr	r3, [pc, #592]	; (8004a14 <UART_SetConfig+0x280>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a89      	ldr	r2, [pc, #548]	; (8004a18 <UART_SetConfig+0x284>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fc:	4313      	orrs	r3, r2
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800480a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004814:	430b      	orrs	r3, r1
 8004816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	f023 010f 	bic.w	r1, r3, #15
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7a      	ldr	r2, [pc, #488]	; (8004a1c <UART_SetConfig+0x288>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d127      	bne.n	8004888 <UART_SetConfig+0xf4>
 8004838:	2003      	movs	r0, #3
 800483a:	f7ff fb2a 	bl	8003e92 <LL_RCC_GetUSARTClockSource>
 800483e:	4603      	mov	r3, r0
 8004840:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004844:	2b03      	cmp	r3, #3
 8004846:	d81b      	bhi.n	8004880 <UART_SetConfig+0xec>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0xbc>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004861 	.word	0x08004861
 8004854:	08004871 	.word	0x08004871
 8004858:	08004869 	.word	0x08004869
 800485c:	08004879 	.word	0x08004879
 8004860:	2301      	movs	r3, #1
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e080      	b.n	800496a <UART_SetConfig+0x1d6>
 8004868:	2302      	movs	r3, #2
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e07c      	b.n	800496a <UART_SetConfig+0x1d6>
 8004870:	2304      	movs	r3, #4
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e078      	b.n	800496a <UART_SetConfig+0x1d6>
 8004878:	2308      	movs	r3, #8
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487e:	e074      	b.n	800496a <UART_SetConfig+0x1d6>
 8004880:	2310      	movs	r3, #16
 8004882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004886:	e070      	b.n	800496a <UART_SetConfig+0x1d6>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a64      	ldr	r2, [pc, #400]	; (8004a20 <UART_SetConfig+0x28c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d138      	bne.n	8004904 <UART_SetConfig+0x170>
 8004892:	200c      	movs	r0, #12
 8004894:	f7ff fafd 	bl	8003e92 <LL_RCC_GetUSARTClockSource>
 8004898:	4603      	mov	r3, r0
 800489a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d82c      	bhi.n	80048fc <UART_SetConfig+0x168>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0x114>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080048fd 	.word	0x080048fd
 80048b0:	080048fd 	.word	0x080048fd
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048fd 	.word	0x080048fd
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e042      	b.n	800496a <UART_SetConfig+0x1d6>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e03e      	b.n	800496a <UART_SetConfig+0x1d6>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e03a      	b.n	800496a <UART_SetConfig+0x1d6>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e036      	b.n	800496a <UART_SetConfig+0x1d6>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004902:	e032      	b.n	800496a <UART_SetConfig+0x1d6>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <UART_SetConfig+0x284>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d12a      	bne.n	8004964 <UART_SetConfig+0x1d0>
 800490e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004912:	f7ff fad0 	bl	8003eb6 <LL_RCC_GetLPUARTClockSource>
 8004916:	4603      	mov	r3, r0
 8004918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491c:	d01a      	beq.n	8004954 <UART_SetConfig+0x1c0>
 800491e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004922:	d81b      	bhi.n	800495c <UART_SetConfig+0x1c8>
 8004924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004928:	d00c      	beq.n	8004944 <UART_SetConfig+0x1b0>
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492e:	d815      	bhi.n	800495c <UART_SetConfig+0x1c8>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <UART_SetConfig+0x1a8>
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d008      	beq.n	800494c <UART_SetConfig+0x1b8>
 800493a:	e00f      	b.n	800495c <UART_SetConfig+0x1c8>
 800493c:	2300      	movs	r3, #0
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e012      	b.n	800496a <UART_SetConfig+0x1d6>
 8004944:	2302      	movs	r3, #2
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494a:	e00e      	b.n	800496a <UART_SetConfig+0x1d6>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004952:	e00a      	b.n	800496a <UART_SetConfig+0x1d6>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495a:	e006      	b.n	800496a <UART_SetConfig+0x1d6>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004962:	e002      	b.n	800496a <UART_SetConfig+0x1d6>
 8004964:	2310      	movs	r3, #16
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <UART_SetConfig+0x284>)
 8004970:	4293      	cmp	r3, r2
 8004972:	f040 80a4 	bne.w	8004abe <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800497a:	2b08      	cmp	r3, #8
 800497c:	d823      	bhi.n	80049c6 <UART_SetConfig+0x232>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x1f0>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049b7 	.word	0x080049b7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049c7 	.word	0x080049c7
 80049a4:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe fb2a 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ae:	e010      	b.n	80049d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <UART_SetConfig+0x290>)
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049b4:	e00d      	b.n	80049d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fa6f 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 80049ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049bc:	e009      	b.n	80049d2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049c4:	e005      	b.n	80049d2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8137 	beq.w	8004c48 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	4a12      	ldr	r2, [pc, #72]	; (8004a28 <UART_SetConfig+0x294>)
 80049e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d305      	bcc.n	8004a0a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d910      	bls.n	8004a2c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a10:	e11a      	b.n	8004c48 <UART_SetConfig+0x4b4>
 8004a12:	bf00      	nop
 8004a14:	cfff69f3 	.word	0xcfff69f3
 8004a18:	40008000 	.word	0x40008000
 8004a1c:	40013800 	.word	0x40013800
 8004a20:	40004400 	.word	0x40004400
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	08006dac 	.word	0x08006dac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	2200      	movs	r2, #0
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	60fa      	str	r2, [r7, #12]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	4a8e      	ldr	r2, [pc, #568]	; (8004c74 <UART_SetConfig+0x4e0>)
 8004a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2200      	movs	r2, #0
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a4e:	f7fb fbe7 	bl	8000220 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	020b      	lsls	r3, r1, #8
 8004a64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a68:	0202      	lsls	r2, r0, #8
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	6849      	ldr	r1, [r1, #4]
 8004a6e:	0849      	lsrs	r1, r1, #1
 8004a70:	2000      	movs	r0, #0
 8004a72:	460c      	mov	r4, r1
 8004a74:	4605      	mov	r5, r0
 8004a76:	eb12 0804 	adds.w	r8, r2, r4
 8004a7a:	eb43 0905 	adc.w	r9, r3, r5
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	469a      	mov	sl, r3
 8004a86:	4693      	mov	fp, r2
 8004a88:	4652      	mov	r2, sl
 8004a8a:	465b      	mov	r3, fp
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4649      	mov	r1, r9
 8004a90:	f7fb fbc6 	bl	8000220 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa2:	d308      	bcc.n	8004ab6 <UART_SetConfig+0x322>
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aaa:	d204      	bcs.n	8004ab6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a3a      	ldr	r2, [r7, #32]
 8004ab2:	60da      	str	r2, [r3, #12]
 8004ab4:	e0c8      	b.n	8004c48 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004abc:	e0c4      	b.n	8004c48 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac6:	d167      	bne.n	8004b98 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d828      	bhi.n	8004b22 <UART_SetConfig+0x38e>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0x344>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	08004b23 	.word	0x08004b23
 8004ae8:	08004b13 	.word	0x08004b13
 8004aec:	08004b23 	.word	0x08004b23
 8004af0:	08004b23 	.word	0x08004b23
 8004af4:	08004b23 	.word	0x08004b23
 8004af8:	08004b1b 	.word	0x08004b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fe fa80 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b02:	e014      	b.n	8004b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b04:	f7fe fa8e 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b0a:	e010      	b.n	8004b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b0c:	4b5a      	ldr	r3, [pc, #360]	; (8004c78 <UART_SetConfig+0x4e4>)
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b10:	e00d      	b.n	8004b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b12:	f7fe f9c1 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8004b16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b18:	e009      	b.n	8004b2e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b20:	e005      	b.n	8004b2e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8089 	beq.w	8004c48 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	4a4e      	ldr	r2, [pc, #312]	; (8004c74 <UART_SetConfig+0x4e0>)
 8004b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b48:	005a      	lsls	r2, r3, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	441a      	add	r2, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	2b0f      	cmp	r3, #15
 8004b60:	d916      	bls.n	8004b90 <UART_SetConfig+0x3fc>
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d212      	bcs.n	8004b90 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f023 030f 	bic.w	r3, r3, #15
 8004b72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	8bfb      	ldrh	r3, [r7, #30]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	8bfa      	ldrh	r2, [r7, #30]
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	e05b      	b.n	8004c48 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b96:	e057      	b.n	8004c48 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d828      	bhi.n	8004bf2 <UART_SetConfig+0x45e>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x414>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bd5 	.word	0x08004bd5
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bf3 	.word	0x08004bf3
 8004bb8:	08004be3 	.word	0x08004be3
 8004bbc:	08004bf3 	.word	0x08004bf3
 8004bc0:	08004bf3 	.word	0x08004bf3
 8004bc4:	08004bf3 	.word	0x08004bf3
 8004bc8:	08004beb 	.word	0x08004beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe fa18 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bd2:	e014      	b.n	8004bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe fa26 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bda:	e010      	b.n	8004bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <UART_SetConfig+0x4e4>)
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004be0:	e00d      	b.n	8004bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fe f959 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8004be6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be8:	e009      	b.n	8004bfe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bf0:	e005      	b.n	8004bfe <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d021      	beq.n	8004c48 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <UART_SetConfig+0x4e0>)
 8004c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	441a      	add	r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	d909      	bls.n	8004c42 <UART_SetConfig+0x4ae>
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d205      	bcs.n	8004c42 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
 8004c40:	e002      	b.n	8004c48 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3730      	adds	r7, #48	; 0x30
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c72:	bf00      	nop
 8004c74:	08006dac 	.word	0x08006dac
 8004c78:	00f42400 	.word	0x00f42400

08004c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7a:	d10a      	bne.n	8004d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr

08004dbe <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af02      	add	r7, sp, #8
 8004dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dce:	f7fc fd83 	bl	80018d8 <HAL_GetTick>
 8004dd2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d10e      	bne.n	8004e00 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f832 	bl	8004e5a <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e028      	b.n	8004e52 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d10e      	bne.n	8004e2c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f81c 	bl	8004e5a <UART_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e012      	b.n	8004e52 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b09c      	sub	sp, #112	; 0x70
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6a:	e0a9      	b.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e72:	f000 80a5 	beq.w	8004fc0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fc fd2f 	bl	80018d8 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d140      	bne.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e069      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d051      	beq.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2a:	d149      	bne.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
 8004f56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e6      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	613b      	str	r3, [r7, #16]
   return(result);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3308      	adds	r3, #8
 8004f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f88:	623a      	str	r2, [r7, #32]
 8004f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	69f9      	ldr	r1, [r7, #28]
 8004f8e:	6a3a      	ldr	r2, [r7, #32]
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e010      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	f43f af46 	beq.w	8004e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3770      	adds	r7, #112	; 0x70
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b0a3      	sub	sp, #140	; 0x8c
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d10e      	bne.n	800503e <UART_Start_Receive_IT+0x52>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <UART_Start_Receive_IT+0x48>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800502e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005032:	e02d      	b.n	8005090 <UART_Start_Receive_IT+0xa4>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	22ff      	movs	r2, #255	; 0xff
 8005038:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800503c:	e028      	b.n	8005090 <UART_Start_Receive_IT+0xa4>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <UART_Start_Receive_IT+0x76>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <UART_Start_Receive_IT+0x6c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	22ff      	movs	r2, #255	; 0xff
 8005052:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005056:	e01b      	b.n	8005090 <UART_Start_Receive_IT+0xa4>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	227f      	movs	r2, #127	; 0x7f
 800505c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005060:	e016      	b.n	8005090 <UART_Start_Receive_IT+0xa4>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506a:	d10d      	bne.n	8005088 <UART_Start_Receive_IT+0x9c>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <UART_Start_Receive_IT+0x92>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	227f      	movs	r2, #127	; 0x7f
 8005078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800507c:	e008      	b.n	8005090 <UART_Start_Receive_IT+0xa4>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	223f      	movs	r2, #63	; 0x3f
 8005082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005086:	e003      	b.n	8005090 <UART_Start_Receive_IT+0xa4>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2222      	movs	r2, #34	; 0x22
 800509c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80050b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80050c4:	673a      	str	r2, [r7, #112]	; 0x70
 80050c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80050ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80050d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e3      	bne.n	80050a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e0:	d14f      	bne.n	8005182 <UART_Start_Receive_IT+0x196>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d349      	bcc.n	8005182 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d107      	bne.n	8005108 <UART_Start_Receive_IT+0x11c>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a46      	ldr	r2, [pc, #280]	; (800521c <UART_Start_Receive_IT+0x230>)
 8005104:	675a      	str	r2, [r3, #116]	; 0x74
 8005106:	e002      	b.n	800510e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a45      	ldr	r2, [pc, #276]	; (8005220 <UART_Start_Receive_IT+0x234>)
 800510c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01a      	beq.n	800514c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800513e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e4      	bne.n	8005116 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3308      	adds	r3, #8
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3308      	adds	r3, #8
 800516a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800516c:	64ba      	str	r2, [r7, #72]	; 0x48
 800516e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800517a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e5      	bne.n	800514c <UART_Start_Receive_IT+0x160>
 8005180:	e046      	b.n	8005210 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	d107      	bne.n	800519c <UART_Start_Receive_IT+0x1b0>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a23      	ldr	r2, [pc, #140]	; (8005224 <UART_Start_Receive_IT+0x238>)
 8005198:	675a      	str	r2, [r3, #116]	; 0x74
 800519a:	e002      	b.n	80051a2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a22      	ldr	r2, [pc, #136]	; (8005228 <UART_Start_Receive_IT+0x23c>)
 80051a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d019      	beq.n	80051de <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80051be:	677b      	str	r3, [r7, #116]	; 0x74
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e6      	bne.n	80051aa <UART_Start_Receive_IT+0x1be>
 80051dc:	e018      	b.n	8005210 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	613b      	str	r3, [r7, #16]
   return(result);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f043 0320 	orr.w	r3, r3, #32
 80051f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69f9      	ldr	r1, [r7, #28]
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	61bb      	str	r3, [r7, #24]
   return(result);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	378c      	adds	r7, #140	; 0x8c
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	08005d85 	.word	0x08005d85
 8005220:	08005a25 	.word	0x08005a25
 8005224:	0800586d 	.word	0x0800586d
 8005228:	080056b5 	.word	0x080056b5

0800522c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b095      	sub	sp, #84	; 0x54
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005252:	643b      	str	r3, [r7, #64]	; 0x40
 8005254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e6      	bne.n	8005234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	61fb      	str	r3, [r7, #28]
   return(result);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	64bb      	str	r3, [r7, #72]	; 0x48
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e3      	bne.n	8005266 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d118      	bne.n	80052d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f023 0310 	bic.w	r3, r3, #16
 80052ba:	647b      	str	r3, [r7, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6979      	ldr	r1, [r7, #20]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	613b      	str	r3, [r7, #16]
   return(result);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e6      	bne.n	80052a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052ec:	bf00      	nop
 80052ee:	3754      	adds	r7, #84	; 0x54
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7fb faf1 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005322:	b480      	push	{r7}
 8005324:	b08f      	sub	sp, #60	; 0x3c
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	2b21      	cmp	r3, #33	; 0x21
 8005332:	d14c      	bne.n	80053ce <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d132      	bne.n	80053a6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	61fb      	str	r3, [r7, #28]
   return(result);
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005360:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e6      	bne.n	8005340 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005386:	633b      	str	r3, [r7, #48]	; 0x30
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e6      	bne.n	8005372 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80053a4:	e013      	b.n	80053ce <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80053ce:	bf00      	nop
 80053d0:	373c      	adds	r7, #60	; 0x3c
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b091      	sub	sp, #68	; 0x44
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	2b21      	cmp	r3, #33	; 0x21
 80053e8:	d151      	bne.n	800548e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d132      	bne.n	800545c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	623b      	str	r3, [r7, #32]
   return(result);
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540a:	63bb      	str	r3, [r7, #56]	; 0x38
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
 8005416:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800541a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e6      	bne.n	80053f6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	60fb      	str	r3, [r7, #12]
   return(result);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	617b      	str	r3, [r7, #20]
   return(result);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800545a:	e018      	b.n	800548e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	1c9a      	adds	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800548e:	bf00      	nop
 8005490:	3744      	adds	r7, #68	; 0x44
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b091      	sub	sp, #68	; 0x44
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	2b21      	cmp	r3, #33	; 0x21
 80054a8:	d160      	bne.n	800556c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054b2:	e057      	b.n	8005564 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d133      	bne.n	8005528 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	623b      	str	r3, [r7, #32]
   return(result);
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80054d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e0:	633a      	str	r2, [r7, #48]	; 0x30
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	60fb      	str	r3, [r7, #12]
   return(result);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	617b      	str	r3, [r7, #20]
   return(result);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005526:	e021      	b.n	800556c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d013      	beq.n	800555e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800555e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005560:	3b01      	subs	r3, #1
 8005562:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1a4      	bne.n	80054b4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800556a:	e7ff      	b.n	800556c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800556c:	bf00      	nop
 800556e:	3744      	adds	r7, #68	; 0x44
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005576:	b480      	push	{r7}
 8005578:	b091      	sub	sp, #68	; 0x44
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005584:	2b21      	cmp	r3, #33	; 0x21
 8005586:	d165      	bne.n	8005654 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800558e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005590:	e05c      	b.n	800564c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d133      	bne.n	8005606 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3308      	adds	r3, #8
 80055a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e6:	633b      	str	r3, [r7, #48]	; 0x30
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6979      	ldr	r1, [r7, #20]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	613b      	str	r3, [r7, #16]
   return(result);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005604:	e026      	b.n	8005654 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d018      	beq.n	8005646 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005628:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562e:	1c9a      	adds	r2, r3, #2
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005646:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005648:	3b01      	subs	r3, #1
 800564a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800564c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800564e:	2b00      	cmp	r3, #0
 8005650:	d19f      	bne.n	8005592 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005652:	e7ff      	b.n	8005654 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005654:	bf00      	nop
 8005656:	3744      	adds	r7, #68	; 0x44
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b088      	sub	sp, #32
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	60bb      	str	r3, [r7, #8]
   return(result);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fb f940 	bl	800092c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ac:	bf00      	nop
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b09c      	sub	sp, #112	; 0x70
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056cc:	2b22      	cmp	r3, #34	; 0x22
 80056ce:	f040 80be 	bne.w	800584e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056e0:	b2d9      	uxtb	r1, r3
 80056e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	400a      	ands	r2, r1
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	f040 80a1 	bne.w	800585e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800572a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005730:	66bb      	str	r3, [r7, #104]	; 0x68
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800573a:	65bb      	str	r3, [r7, #88]	; 0x58
 800573c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e6      	bne.n	800571c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	667b      	str	r3, [r7, #100]	; 0x64
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800576e:	647a      	str	r2, [r7, #68]	; 0x44
 8005770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e5      	bne.n	800574e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a33      	ldr	r2, [pc, #204]	; (8005868 <UART_RxISR_8BIT+0x1b4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d01f      	beq.n	80057e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d018      	beq.n	80057e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	623b      	str	r3, [r7, #32]
   return(result);
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057c2:	663b      	str	r3, [r7, #96]	; 0x60
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
 80057ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d12e      	bne.n	8005846 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0310 	bic.w	r3, r3, #16
 8005802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69b9      	ldr	r1, [r7, #24]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	617b      	str	r3, [r7, #20]
   return(result);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b10      	cmp	r3, #16
 800582c:	d103      	bne.n	8005836 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2210      	movs	r2, #16
 8005834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fe ff9c 	bl	800477c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005844:	e00b      	b.n	800585e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fb f888 	bl	800095c <HAL_UART_RxCpltCallback>
}
 800584c:	e007      	b.n	800585e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	619a      	str	r2, [r3, #24]
}
 800585e:	bf00      	nop
 8005860:	3770      	adds	r7, #112	; 0x70
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40008000 	.word	0x40008000

0800586c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b09c      	sub	sp, #112	; 0x70
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800587a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005884:	2b22      	cmp	r3, #34	; 0x22
 8005886:	f040 80be 	bne.w	8005a06 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800589a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800589e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058a2:	4013      	ands	r3, r2
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 80a1 	bne.w	8005a16 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80058e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54
 80058f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005926:	643a      	str	r2, [r7, #64]	; 0x40
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800592c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <UART_RxISR_16BIT+0x1b4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d01f      	beq.n	8005998 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d018      	beq.n	8005998 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	61fb      	str	r3, [r7, #28]
   return(result);
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800597a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005986:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800598a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e6      	bne.n	8005966 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d12e      	bne.n	80059fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 0310 	bic.w	r3, r3, #16
 80059ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	613b      	str	r3, [r7, #16]
   return(result);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d103      	bne.n	80059ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2210      	movs	r2, #16
 80059ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe fec0 	bl	800477c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059fc:	e00b      	b.n	8005a16 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fa ffac 	bl	800095c <HAL_UART_RxCpltCallback>
}
 8005a04:	e007      	b.n	8005a16 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0208 	orr.w	r2, r2, #8
 8005a14:	619a      	str	r2, [r3, #24]
}
 8005a16:	bf00      	nop
 8005a18:	3770      	adds	r7, #112	; 0x70
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40008000 	.word	0x40008000

08005a24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b0ac      	sub	sp, #176	; 0xb0
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a32:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5a:	2b22      	cmp	r3, #34	; 0x22
 8005a5c:	f040 8182 	bne.w	8005d64 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a66:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a6a:	e125      	b.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a76:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005a7a:	b2d9      	uxtb	r1, r3
 8005a7c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	400a      	ands	r2, r1
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d053      	beq.n	8005b66 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d011      	beq.n	8005aee <UART_RxISR_8BIT_FIFOEN+0xca>
 8005aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae4:	f043 0201 	orr.w	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d011      	beq.n	8005b1e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b14:	f043 0204 	orr.w	r2, r3, #4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2204      	movs	r2, #4
 8005b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	f043 0202 	orr.w	r2, r3, #2
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d006      	beq.n	8005b66 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7fa fecf 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 80a2 	bne.w	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b98:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005b9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e4      	bne.n	8005b74 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bd2:	66ba      	str	r2, [r7, #104]	; 0x68
 8005bd4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005bd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e1      	bne.n	8005baa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a5f      	ldr	r2, [pc, #380]	; (8005d7c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d021      	beq.n	8005c48 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01a      	beq.n	8005c48 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c34:	657b      	str	r3, [r7, #84]	; 0x54
 8005c36:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e4      	bne.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d130      	bne.n	8005cb2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e4      	bne.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d103      	bne.n	8005ca2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fe fd66 	bl	800477c <HAL_UARTEx_RxEventCallback>
 8005cb0:	e002      	b.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fa fe52 	bl	800095c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cb8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f47f aecf 	bne.w	8005a6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cd4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005cd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d049      	beq.n	8005d74 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ce6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d242      	bcs.n	8005d74 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e3      	bne.n	8005cee <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005d2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f043 0320 	orr.w	r3, r3, #32
 8005d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e4      	bne.n	8005d2c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d62:	e007      	b.n	8005d74 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	619a      	str	r2, [r3, #24]
}
 8005d74:	bf00      	nop
 8005d76:	37b0      	adds	r7, #176	; 0xb0
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40008000 	.word	0x40008000
 8005d80:	080056b5 	.word	0x080056b5

08005d84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b0ae      	sub	sp, #184	; 0xb8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d92:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dba:	2b22      	cmp	r3, #34	; 0x22
 8005dbc:	f040 8186 	bne.w	80060cc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dc6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dca:	e129      	b.n	8006020 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005dde:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005de2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005de6:	4013      	ands	r3, r2
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	1c9a      	adds	r2, r3, #2
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d053      	beq.n	8005eca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e48:	f043 0201 	orr.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d011      	beq.n	8005e82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d011      	beq.n	8005eb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f043 0202 	orr.w	r2, r3, #2
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fa fd1d 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 80a4 	bne.w	8006020 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005efa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005efe:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e2      	bne.n	8005ed8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e1      	bne.n	8005f12 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a5f      	ldr	r2, [pc, #380]	; (80060e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d021      	beq.n	8005fb0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01a      	beq.n	8005fb0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f9e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e4      	bne.n	8005f7a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d130      	bne.n	800601a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	f023 0310 	bic.w	r3, r3, #16
 8005fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e4      	bne.n	8005fbe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	d103      	bne.n	800600a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2210      	movs	r2, #16
 8006008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fe fbb2 	bl	800477c <HAL_UARTEx_RxEventCallback>
 8006018:	e002      	b.n	8006020 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fa fc9e 	bl	800095c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006020:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f aecb 	bne.w	8005dcc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800603c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006040:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006044:	2b00      	cmp	r3, #0
 8006046:	d049      	beq.n	80060dc <UART_RxISR_16BIT_FIFOEN+0x358>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800604e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006052:	429a      	cmp	r2, r3
 8006054:	d242      	bcs.n	80060dc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	623b      	str	r3, [r7, #32]
   return(result);
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800607a:	633a      	str	r2, [r7, #48]	; 0x30
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e3      	bne.n	8006056 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006092:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f043 0320 	orr.w	r3, r3, #32
 80060a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	69b9      	ldr	r1, [r7, #24]
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	617b      	str	r3, [r7, #20]
   return(result);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e4      	bne.n	8006094 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060ca:	e007      	b.n	80060dc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	619a      	str	r2, [r3, #24]
}
 80060dc:	bf00      	nop
 80060de:	37b8      	adds	r7, #184	; 0xb8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40008000 	.word	0x40008000
 80060e8:	0800586d 	.word	0x0800586d

080060ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr

08006110 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_UARTEx_DisableFifoMode+0x16>
 8006134:	2302      	movs	r3, #2
 8006136:	e027      	b.n	8006188 <HAL_UARTEx_DisableFifoMode+0x66>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	; 0x24
 8006144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006166:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e02d      	b.n	8006206 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2224      	movs	r2, #36	; 0x24
 80061b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f850 	bl	800628c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006222:	2302      	movs	r3, #2
 8006224:	e02d      	b.n	8006282 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2224      	movs	r2, #36	; 0x24
 8006232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f812 	bl	800628c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006298:	2b00      	cmp	r3, #0
 800629a:	d108      	bne.n	80062ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062ac:	e031      	b.n	8006312 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ae:	2308      	movs	r3, #8
 80062b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062b2:	2308      	movs	r3, #8
 80062b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	0e5b      	lsrs	r3, r3, #25
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	0f5b      	lsrs	r3, r3, #29
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	7b3a      	ldrb	r2, [r7, #12]
 80062da:	4910      	ldr	r1, [pc, #64]	; (800631c <UARTEx_SetNbDataToProcess+0x90>)
 80062dc:	5c8a      	ldrb	r2, [r1, r2]
 80062de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062e2:	7b3a      	ldrb	r2, [r7, #12]
 80062e4:	490e      	ldr	r1, [pc, #56]	; (8006320 <UARTEx_SetNbDataToProcess+0x94>)
 80062e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	7b7a      	ldrb	r2, [r7, #13]
 80062f8:	4908      	ldr	r1, [pc, #32]	; (800631c <UARTEx_SetNbDataToProcess+0x90>)
 80062fa:	5c8a      	ldrb	r2, [r1, r2]
 80062fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006300:	7b7a      	ldrb	r2, [r7, #13]
 8006302:	4907      	ldr	r1, [pc, #28]	; (8006320 <UARTEx_SetNbDataToProcess+0x94>)
 8006304:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006306:	fb93 f3f2 	sdiv	r3, r3, r2
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr
 800631c:	08006dc4 	.word	0x08006dc4
 8006320:	08006dcc 	.word	0x08006dcc

08006324 <__errno>:
 8006324:	4b01      	ldr	r3, [pc, #4]	; (800632c <__errno+0x8>)
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	2000000c 	.word	0x2000000c

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	; (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	; (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	; (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	; (8006374 <__libc_init_array+0x44>)
 8006344:	f000 fca0 	bl	8006c88 <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	08006e10 	.word	0x08006e10
 800636c:	08006e10 	.word	0x08006e10
 8006370:	08006e10 	.word	0x08006e10
 8006374:	08006e14 	.word	0x08006e14

08006378 <memcpy>:
 8006378:	440a      	add	r2, r1
 800637a:	4291      	cmp	r1, r2
 800637c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006380:	d100      	bne.n	8006384 <memcpy+0xc>
 8006382:	4770      	bx	lr
 8006384:	b510      	push	{r4, lr}
 8006386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800638e:	4291      	cmp	r1, r2
 8006390:	d1f9      	bne.n	8006386 <memcpy+0xe>
 8006392:	bd10      	pop	{r4, pc}

08006394 <memset>:
 8006394:	4402      	add	r2, r0
 8006396:	4603      	mov	r3, r0
 8006398:	4293      	cmp	r3, r2
 800639a:	d100      	bne.n	800639e <memset+0xa>
 800639c:	4770      	bx	lr
 800639e:	f803 1b01 	strb.w	r1, [r3], #1
 80063a2:	e7f9      	b.n	8006398 <memset+0x4>

080063a4 <sniprintf>:
 80063a4:	b40c      	push	{r2, r3}
 80063a6:	b530      	push	{r4, r5, lr}
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <sniprintf+0x64>)
 80063aa:	1e0c      	subs	r4, r1, #0
 80063ac:	681d      	ldr	r5, [r3, #0]
 80063ae:	b09d      	sub	sp, #116	; 0x74
 80063b0:	da08      	bge.n	80063c4 <sniprintf+0x20>
 80063b2:	238b      	movs	r3, #139	; 0x8b
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ba:	b01d      	add	sp, #116	; 0x74
 80063bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c0:	b002      	add	sp, #8
 80063c2:	4770      	bx	lr
 80063c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80063cc:	bf14      	ite	ne
 80063ce:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80063d2:	4623      	moveq	r3, r4
 80063d4:	9304      	str	r3, [sp, #16]
 80063d6:	9307      	str	r3, [sp, #28]
 80063d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063dc:	9002      	str	r0, [sp, #8]
 80063de:	9006      	str	r0, [sp, #24]
 80063e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80063e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063e6:	ab21      	add	r3, sp, #132	; 0x84
 80063e8:	a902      	add	r1, sp, #8
 80063ea:	4628      	mov	r0, r5
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	f000 f869 	bl	80064c4 <_svfiprintf_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	bfbc      	itt	lt
 80063f6:	238b      	movlt	r3, #139	; 0x8b
 80063f8:	602b      	strlt	r3, [r5, #0]
 80063fa:	2c00      	cmp	r4, #0
 80063fc:	d0dd      	beq.n	80063ba <sniprintf+0x16>
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e7d9      	b.n	80063ba <sniprintf+0x16>
 8006406:	bf00      	nop
 8006408:	2000000c 	.word	0x2000000c

0800640c <__ssputs_r>:
 800640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006410:	688e      	ldr	r6, [r1, #8]
 8006412:	429e      	cmp	r6, r3
 8006414:	4682      	mov	sl, r0
 8006416:	460c      	mov	r4, r1
 8006418:	4690      	mov	r8, r2
 800641a:	461f      	mov	r7, r3
 800641c:	d838      	bhi.n	8006490 <__ssputs_r+0x84>
 800641e:	898a      	ldrh	r2, [r1, #12]
 8006420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006424:	d032      	beq.n	800648c <__ssputs_r+0x80>
 8006426:	6825      	ldr	r5, [r4, #0]
 8006428:	6909      	ldr	r1, [r1, #16]
 800642a:	eba5 0901 	sub.w	r9, r5, r1
 800642e:	6965      	ldr	r5, [r4, #20]
 8006430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006438:	3301      	adds	r3, #1
 800643a:	444b      	add	r3, r9
 800643c:	106d      	asrs	r5, r5, #1
 800643e:	429d      	cmp	r5, r3
 8006440:	bf38      	it	cc
 8006442:	461d      	movcc	r5, r3
 8006444:	0553      	lsls	r3, r2, #21
 8006446:	d531      	bpl.n	80064ac <__ssputs_r+0xa0>
 8006448:	4629      	mov	r1, r5
 800644a:	f000 fb53 	bl	8006af4 <_malloc_r>
 800644e:	4606      	mov	r6, r0
 8006450:	b950      	cbnz	r0, 8006468 <__ssputs_r+0x5c>
 8006452:	230c      	movs	r3, #12
 8006454:	f8ca 3000 	str.w	r3, [sl]
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006468:	6921      	ldr	r1, [r4, #16]
 800646a:	464a      	mov	r2, r9
 800646c:	f7ff ff84 	bl	8006378 <memcpy>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	6126      	str	r6, [r4, #16]
 800647e:	6165      	str	r5, [r4, #20]
 8006480:	444e      	add	r6, r9
 8006482:	eba5 0509 	sub.w	r5, r5, r9
 8006486:	6026      	str	r6, [r4, #0]
 8006488:	60a5      	str	r5, [r4, #8]
 800648a:	463e      	mov	r6, r7
 800648c:	42be      	cmp	r6, r7
 800648e:	d900      	bls.n	8006492 <__ssputs_r+0x86>
 8006490:	463e      	mov	r6, r7
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	4632      	mov	r2, r6
 8006496:	4641      	mov	r1, r8
 8006498:	f000 faa8 	bl	80069ec <memmove>
 800649c:	68a3      	ldr	r3, [r4, #8]
 800649e:	1b9b      	subs	r3, r3, r6
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	4433      	add	r3, r6
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	2000      	movs	r0, #0
 80064aa:	e7db      	b.n	8006464 <__ssputs_r+0x58>
 80064ac:	462a      	mov	r2, r5
 80064ae:	f000 fb95 	bl	8006bdc <_realloc_r>
 80064b2:	4606      	mov	r6, r0
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d1e1      	bne.n	800647c <__ssputs_r+0x70>
 80064b8:	6921      	ldr	r1, [r4, #16]
 80064ba:	4650      	mov	r0, sl
 80064bc:	f000 fab0 	bl	8006a20 <_free_r>
 80064c0:	e7c7      	b.n	8006452 <__ssputs_r+0x46>
	...

080064c4 <_svfiprintf_r>:
 80064c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c8:	4698      	mov	r8, r3
 80064ca:	898b      	ldrh	r3, [r1, #12]
 80064cc:	061b      	lsls	r3, r3, #24
 80064ce:	b09d      	sub	sp, #116	; 0x74
 80064d0:	4607      	mov	r7, r0
 80064d2:	460d      	mov	r5, r1
 80064d4:	4614      	mov	r4, r2
 80064d6:	d50e      	bpl.n	80064f6 <_svfiprintf_r+0x32>
 80064d8:	690b      	ldr	r3, [r1, #16]
 80064da:	b963      	cbnz	r3, 80064f6 <_svfiprintf_r+0x32>
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	f000 fb09 	bl	8006af4 <_malloc_r>
 80064e2:	6028      	str	r0, [r5, #0]
 80064e4:	6128      	str	r0, [r5, #16]
 80064e6:	b920      	cbnz	r0, 80064f2 <_svfiprintf_r+0x2e>
 80064e8:	230c      	movs	r3, #12
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f0:	e0d1      	b.n	8006696 <_svfiprintf_r+0x1d2>
 80064f2:	2340      	movs	r3, #64	; 0x40
 80064f4:	616b      	str	r3, [r5, #20]
 80064f6:	2300      	movs	r3, #0
 80064f8:	9309      	str	r3, [sp, #36]	; 0x24
 80064fa:	2320      	movs	r3, #32
 80064fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006500:	f8cd 800c 	str.w	r8, [sp, #12]
 8006504:	2330      	movs	r3, #48	; 0x30
 8006506:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066b0 <_svfiprintf_r+0x1ec>
 800650a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800650e:	f04f 0901 	mov.w	r9, #1
 8006512:	4623      	mov	r3, r4
 8006514:	469a      	mov	sl, r3
 8006516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800651a:	b10a      	cbz	r2, 8006520 <_svfiprintf_r+0x5c>
 800651c:	2a25      	cmp	r2, #37	; 0x25
 800651e:	d1f9      	bne.n	8006514 <_svfiprintf_r+0x50>
 8006520:	ebba 0b04 	subs.w	fp, sl, r4
 8006524:	d00b      	beq.n	800653e <_svfiprintf_r+0x7a>
 8006526:	465b      	mov	r3, fp
 8006528:	4622      	mov	r2, r4
 800652a:	4629      	mov	r1, r5
 800652c:	4638      	mov	r0, r7
 800652e:	f7ff ff6d 	bl	800640c <__ssputs_r>
 8006532:	3001      	adds	r0, #1
 8006534:	f000 80aa 	beq.w	800668c <_svfiprintf_r+0x1c8>
 8006538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800653a:	445a      	add	r2, fp
 800653c:	9209      	str	r2, [sp, #36]	; 0x24
 800653e:	f89a 3000 	ldrb.w	r3, [sl]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80a2 	beq.w	800668c <_svfiprintf_r+0x1c8>
 8006548:	2300      	movs	r3, #0
 800654a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800654e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006552:	f10a 0a01 	add.w	sl, sl, #1
 8006556:	9304      	str	r3, [sp, #16]
 8006558:	9307      	str	r3, [sp, #28]
 800655a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800655e:	931a      	str	r3, [sp, #104]	; 0x68
 8006560:	4654      	mov	r4, sl
 8006562:	2205      	movs	r2, #5
 8006564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006568:	4851      	ldr	r0, [pc, #324]	; (80066b0 <_svfiprintf_r+0x1ec>)
 800656a:	f7f9 fe09 	bl	8000180 <memchr>
 800656e:	9a04      	ldr	r2, [sp, #16]
 8006570:	b9d8      	cbnz	r0, 80065aa <_svfiprintf_r+0xe6>
 8006572:	06d0      	lsls	r0, r2, #27
 8006574:	bf44      	itt	mi
 8006576:	2320      	movmi	r3, #32
 8006578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800657c:	0711      	lsls	r1, r2, #28
 800657e:	bf44      	itt	mi
 8006580:	232b      	movmi	r3, #43	; 0x2b
 8006582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006586:	f89a 3000 	ldrb.w	r3, [sl]
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	d015      	beq.n	80065ba <_svfiprintf_r+0xf6>
 800658e:	9a07      	ldr	r2, [sp, #28]
 8006590:	4654      	mov	r4, sl
 8006592:	2000      	movs	r0, #0
 8006594:	f04f 0c0a 	mov.w	ip, #10
 8006598:	4621      	mov	r1, r4
 800659a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800659e:	3b30      	subs	r3, #48	; 0x30
 80065a0:	2b09      	cmp	r3, #9
 80065a2:	d94e      	bls.n	8006642 <_svfiprintf_r+0x17e>
 80065a4:	b1b0      	cbz	r0, 80065d4 <_svfiprintf_r+0x110>
 80065a6:	9207      	str	r2, [sp, #28]
 80065a8:	e014      	b.n	80065d4 <_svfiprintf_r+0x110>
 80065aa:	eba0 0308 	sub.w	r3, r0, r8
 80065ae:	fa09 f303 	lsl.w	r3, r9, r3
 80065b2:	4313      	orrs	r3, r2
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	46a2      	mov	sl, r4
 80065b8:	e7d2      	b.n	8006560 <_svfiprintf_r+0x9c>
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	1d19      	adds	r1, r3, #4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	9103      	str	r1, [sp, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfbb      	ittet	lt
 80065c6:	425b      	neglt	r3, r3
 80065c8:	f042 0202 	orrlt.w	r2, r2, #2
 80065cc:	9307      	strge	r3, [sp, #28]
 80065ce:	9307      	strlt	r3, [sp, #28]
 80065d0:	bfb8      	it	lt
 80065d2:	9204      	strlt	r2, [sp, #16]
 80065d4:	7823      	ldrb	r3, [r4, #0]
 80065d6:	2b2e      	cmp	r3, #46	; 0x2e
 80065d8:	d10c      	bne.n	80065f4 <_svfiprintf_r+0x130>
 80065da:	7863      	ldrb	r3, [r4, #1]
 80065dc:	2b2a      	cmp	r3, #42	; 0x2a
 80065de:	d135      	bne.n	800664c <_svfiprintf_r+0x188>
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	1d1a      	adds	r2, r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	9203      	str	r2, [sp, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfb8      	it	lt
 80065ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065f0:	3402      	adds	r4, #2
 80065f2:	9305      	str	r3, [sp, #20]
 80065f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80066b4 <_svfiprintf_r+0x1f0>
 80065f8:	7821      	ldrb	r1, [r4, #0]
 80065fa:	2203      	movs	r2, #3
 80065fc:	4650      	mov	r0, sl
 80065fe:	f7f9 fdbf 	bl	8000180 <memchr>
 8006602:	b140      	cbz	r0, 8006616 <_svfiprintf_r+0x152>
 8006604:	2340      	movs	r3, #64	; 0x40
 8006606:	eba0 000a 	sub.w	r0, r0, sl
 800660a:	fa03 f000 	lsl.w	r0, r3, r0
 800660e:	9b04      	ldr	r3, [sp, #16]
 8006610:	4303      	orrs	r3, r0
 8006612:	3401      	adds	r4, #1
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800661a:	4827      	ldr	r0, [pc, #156]	; (80066b8 <_svfiprintf_r+0x1f4>)
 800661c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006620:	2206      	movs	r2, #6
 8006622:	f7f9 fdad 	bl	8000180 <memchr>
 8006626:	2800      	cmp	r0, #0
 8006628:	d038      	beq.n	800669c <_svfiprintf_r+0x1d8>
 800662a:	4b24      	ldr	r3, [pc, #144]	; (80066bc <_svfiprintf_r+0x1f8>)
 800662c:	bb1b      	cbnz	r3, 8006676 <_svfiprintf_r+0x1b2>
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	3307      	adds	r3, #7
 8006632:	f023 0307 	bic.w	r3, r3, #7
 8006636:	3308      	adds	r3, #8
 8006638:	9303      	str	r3, [sp, #12]
 800663a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663c:	4433      	add	r3, r6
 800663e:	9309      	str	r3, [sp, #36]	; 0x24
 8006640:	e767      	b.n	8006512 <_svfiprintf_r+0x4e>
 8006642:	fb0c 3202 	mla	r2, ip, r2, r3
 8006646:	460c      	mov	r4, r1
 8006648:	2001      	movs	r0, #1
 800664a:	e7a5      	b.n	8006598 <_svfiprintf_r+0xd4>
 800664c:	2300      	movs	r3, #0
 800664e:	3401      	adds	r4, #1
 8006650:	9305      	str	r3, [sp, #20]
 8006652:	4619      	mov	r1, r3
 8006654:	f04f 0c0a 	mov.w	ip, #10
 8006658:	4620      	mov	r0, r4
 800665a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800665e:	3a30      	subs	r2, #48	; 0x30
 8006660:	2a09      	cmp	r2, #9
 8006662:	d903      	bls.n	800666c <_svfiprintf_r+0x1a8>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0c5      	beq.n	80065f4 <_svfiprintf_r+0x130>
 8006668:	9105      	str	r1, [sp, #20]
 800666a:	e7c3      	b.n	80065f4 <_svfiprintf_r+0x130>
 800666c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006670:	4604      	mov	r4, r0
 8006672:	2301      	movs	r3, #1
 8006674:	e7f0      	b.n	8006658 <_svfiprintf_r+0x194>
 8006676:	ab03      	add	r3, sp, #12
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	462a      	mov	r2, r5
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <_svfiprintf_r+0x1fc>)
 800667e:	a904      	add	r1, sp, #16
 8006680:	4638      	mov	r0, r7
 8006682:	f3af 8000 	nop.w
 8006686:	1c42      	adds	r2, r0, #1
 8006688:	4606      	mov	r6, r0
 800668a:	d1d6      	bne.n	800663a <_svfiprintf_r+0x176>
 800668c:	89ab      	ldrh	r3, [r5, #12]
 800668e:	065b      	lsls	r3, r3, #25
 8006690:	f53f af2c 	bmi.w	80064ec <_svfiprintf_r+0x28>
 8006694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006696:	b01d      	add	sp, #116	; 0x74
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	ab03      	add	r3, sp, #12
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	462a      	mov	r2, r5
 80066a2:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <_svfiprintf_r+0x1fc>)
 80066a4:	a904      	add	r1, sp, #16
 80066a6:	4638      	mov	r0, r7
 80066a8:	f000 f87a 	bl	80067a0 <_printf_i>
 80066ac:	e7eb      	b.n	8006686 <_svfiprintf_r+0x1c2>
 80066ae:	bf00      	nop
 80066b0:	08006dd4 	.word	0x08006dd4
 80066b4:	08006dda 	.word	0x08006dda
 80066b8:	08006dde 	.word	0x08006dde
 80066bc:	00000000 	.word	0x00000000
 80066c0:	0800640d 	.word	0x0800640d

080066c4 <_printf_common>:
 80066c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c8:	4616      	mov	r6, r2
 80066ca:	4699      	mov	r9, r3
 80066cc:	688a      	ldr	r2, [r1, #8]
 80066ce:	690b      	ldr	r3, [r1, #16]
 80066d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	bfb8      	it	lt
 80066d8:	4613      	movlt	r3, r2
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066e0:	4607      	mov	r7, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	b10a      	cbz	r2, 80066ea <_printf_common+0x26>
 80066e6:	3301      	adds	r3, #1
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	0699      	lsls	r1, r3, #26
 80066ee:	bf42      	ittt	mi
 80066f0:	6833      	ldrmi	r3, [r6, #0]
 80066f2:	3302      	addmi	r3, #2
 80066f4:	6033      	strmi	r3, [r6, #0]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	f015 0506 	ands.w	r5, r5, #6
 80066fc:	d106      	bne.n	800670c <_printf_common+0x48>
 80066fe:	f104 0a19 	add.w	sl, r4, #25
 8006702:	68e3      	ldr	r3, [r4, #12]
 8006704:	6832      	ldr	r2, [r6, #0]
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	42ab      	cmp	r3, r5
 800670a:	dc26      	bgt.n	800675a <_printf_common+0x96>
 800670c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006710:	1e13      	subs	r3, r2, #0
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	bf18      	it	ne
 8006716:	2301      	movne	r3, #1
 8006718:	0692      	lsls	r2, r2, #26
 800671a:	d42b      	bmi.n	8006774 <_printf_common+0xb0>
 800671c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006720:	4649      	mov	r1, r9
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	3001      	adds	r0, #1
 8006728:	d01e      	beq.n	8006768 <_printf_common+0xa4>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	68e5      	ldr	r5, [r4, #12]
 800672e:	6832      	ldr	r2, [r6, #0]
 8006730:	f003 0306 	and.w	r3, r3, #6
 8006734:	2b04      	cmp	r3, #4
 8006736:	bf08      	it	eq
 8006738:	1aad      	subeq	r5, r5, r2
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	6922      	ldr	r2, [r4, #16]
 800673e:	bf0c      	ite	eq
 8006740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006744:	2500      	movne	r5, #0
 8006746:	4293      	cmp	r3, r2
 8006748:	bfc4      	itt	gt
 800674a:	1a9b      	subgt	r3, r3, r2
 800674c:	18ed      	addgt	r5, r5, r3
 800674e:	2600      	movs	r6, #0
 8006750:	341a      	adds	r4, #26
 8006752:	42b5      	cmp	r5, r6
 8006754:	d11a      	bne.n	800678c <_printf_common+0xc8>
 8006756:	2000      	movs	r0, #0
 8006758:	e008      	b.n	800676c <_printf_common+0xa8>
 800675a:	2301      	movs	r3, #1
 800675c:	4652      	mov	r2, sl
 800675e:	4649      	mov	r1, r9
 8006760:	4638      	mov	r0, r7
 8006762:	47c0      	blx	r8
 8006764:	3001      	adds	r0, #1
 8006766:	d103      	bne.n	8006770 <_printf_common+0xac>
 8006768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	3501      	adds	r5, #1
 8006772:	e7c6      	b.n	8006702 <_printf_common+0x3e>
 8006774:	18e1      	adds	r1, r4, r3
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	2030      	movs	r0, #48	; 0x30
 800677a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800677e:	4422      	add	r2, r4
 8006780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006788:	3302      	adds	r3, #2
 800678a:	e7c7      	b.n	800671c <_printf_common+0x58>
 800678c:	2301      	movs	r3, #1
 800678e:	4622      	mov	r2, r4
 8006790:	4649      	mov	r1, r9
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	3001      	adds	r0, #1
 8006798:	d0e6      	beq.n	8006768 <_printf_common+0xa4>
 800679a:	3601      	adds	r6, #1
 800679c:	e7d9      	b.n	8006752 <_printf_common+0x8e>
	...

080067a0 <_printf_i>:
 80067a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	7e0f      	ldrb	r7, [r1, #24]
 80067a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067a8:	2f78      	cmp	r7, #120	; 0x78
 80067aa:	4691      	mov	r9, r2
 80067ac:	4680      	mov	r8, r0
 80067ae:	460c      	mov	r4, r1
 80067b0:	469a      	mov	sl, r3
 80067b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067b6:	d807      	bhi.n	80067c8 <_printf_i+0x28>
 80067b8:	2f62      	cmp	r7, #98	; 0x62
 80067ba:	d80a      	bhi.n	80067d2 <_printf_i+0x32>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	f000 80d8 	beq.w	8006972 <_printf_i+0x1d2>
 80067c2:	2f58      	cmp	r7, #88	; 0x58
 80067c4:	f000 80a3 	beq.w	800690e <_printf_i+0x16e>
 80067c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067d0:	e03a      	b.n	8006848 <_printf_i+0xa8>
 80067d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067d6:	2b15      	cmp	r3, #21
 80067d8:	d8f6      	bhi.n	80067c8 <_printf_i+0x28>
 80067da:	a101      	add	r1, pc, #4	; (adr r1, 80067e0 <_printf_i+0x40>)
 80067dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067e0:	08006839 	.word	0x08006839
 80067e4:	0800684d 	.word	0x0800684d
 80067e8:	080067c9 	.word	0x080067c9
 80067ec:	080067c9 	.word	0x080067c9
 80067f0:	080067c9 	.word	0x080067c9
 80067f4:	080067c9 	.word	0x080067c9
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	080067c9 	.word	0x080067c9
 8006800:	080067c9 	.word	0x080067c9
 8006804:	080067c9 	.word	0x080067c9
 8006808:	080067c9 	.word	0x080067c9
 800680c:	08006959 	.word	0x08006959
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800693b 	.word	0x0800693b
 8006818:	080067c9 	.word	0x080067c9
 800681c:	080067c9 	.word	0x080067c9
 8006820:	0800697b 	.word	0x0800697b
 8006824:	080067c9 	.word	0x080067c9
 8006828:	0800687d 	.word	0x0800687d
 800682c:	080067c9 	.word	0x080067c9
 8006830:	080067c9 	.word	0x080067c9
 8006834:	08006943 	.word	0x08006943
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	602a      	str	r2, [r5, #0]
 8006840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006848:	2301      	movs	r3, #1
 800684a:	e0a3      	b.n	8006994 <_printf_i+0x1f4>
 800684c:	6820      	ldr	r0, [r4, #0]
 800684e:	6829      	ldr	r1, [r5, #0]
 8006850:	0606      	lsls	r6, r0, #24
 8006852:	f101 0304 	add.w	r3, r1, #4
 8006856:	d50a      	bpl.n	800686e <_printf_i+0xce>
 8006858:	680e      	ldr	r6, [r1, #0]
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	2e00      	cmp	r6, #0
 800685e:	da03      	bge.n	8006868 <_printf_i+0xc8>
 8006860:	232d      	movs	r3, #45	; 0x2d
 8006862:	4276      	negs	r6, r6
 8006864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006868:	485e      	ldr	r0, [pc, #376]	; (80069e4 <_printf_i+0x244>)
 800686a:	230a      	movs	r3, #10
 800686c:	e019      	b.n	80068a2 <_printf_i+0x102>
 800686e:	680e      	ldr	r6, [r1, #0]
 8006870:	602b      	str	r3, [r5, #0]
 8006872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006876:	bf18      	it	ne
 8006878:	b236      	sxthne	r6, r6
 800687a:	e7ef      	b.n	800685c <_printf_i+0xbc>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	1d19      	adds	r1, r3, #4
 8006882:	6029      	str	r1, [r5, #0]
 8006884:	0601      	lsls	r1, r0, #24
 8006886:	d501      	bpl.n	800688c <_printf_i+0xec>
 8006888:	681e      	ldr	r6, [r3, #0]
 800688a:	e002      	b.n	8006892 <_printf_i+0xf2>
 800688c:	0646      	lsls	r6, r0, #25
 800688e:	d5fb      	bpl.n	8006888 <_printf_i+0xe8>
 8006890:	881e      	ldrh	r6, [r3, #0]
 8006892:	4854      	ldr	r0, [pc, #336]	; (80069e4 <_printf_i+0x244>)
 8006894:	2f6f      	cmp	r7, #111	; 0x6f
 8006896:	bf0c      	ite	eq
 8006898:	2308      	moveq	r3, #8
 800689a:	230a      	movne	r3, #10
 800689c:	2100      	movs	r1, #0
 800689e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068a2:	6865      	ldr	r5, [r4, #4]
 80068a4:	60a5      	str	r5, [r4, #8]
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	bfa2      	ittt	ge
 80068aa:	6821      	ldrge	r1, [r4, #0]
 80068ac:	f021 0104 	bicge.w	r1, r1, #4
 80068b0:	6021      	strge	r1, [r4, #0]
 80068b2:	b90e      	cbnz	r6, 80068b8 <_printf_i+0x118>
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	d04d      	beq.n	8006954 <_printf_i+0x1b4>
 80068b8:	4615      	mov	r5, r2
 80068ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80068be:	fb03 6711 	mls	r7, r3, r1, r6
 80068c2:	5dc7      	ldrb	r7, [r0, r7]
 80068c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068c8:	4637      	mov	r7, r6
 80068ca:	42bb      	cmp	r3, r7
 80068cc:	460e      	mov	r6, r1
 80068ce:	d9f4      	bls.n	80068ba <_printf_i+0x11a>
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d10b      	bne.n	80068ec <_printf_i+0x14c>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	07de      	lsls	r6, r3, #31
 80068d8:	d508      	bpl.n	80068ec <_printf_i+0x14c>
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	6861      	ldr	r1, [r4, #4]
 80068de:	4299      	cmp	r1, r3
 80068e0:	bfde      	ittt	le
 80068e2:	2330      	movle	r3, #48	; 0x30
 80068e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80068ec:	1b52      	subs	r2, r2, r5
 80068ee:	6122      	str	r2, [r4, #16]
 80068f0:	f8cd a000 	str.w	sl, [sp]
 80068f4:	464b      	mov	r3, r9
 80068f6:	aa03      	add	r2, sp, #12
 80068f8:	4621      	mov	r1, r4
 80068fa:	4640      	mov	r0, r8
 80068fc:	f7ff fee2 	bl	80066c4 <_printf_common>
 8006900:	3001      	adds	r0, #1
 8006902:	d14c      	bne.n	800699e <_printf_i+0x1fe>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006908:	b004      	add	sp, #16
 800690a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690e:	4835      	ldr	r0, [pc, #212]	; (80069e4 <_printf_i+0x244>)
 8006910:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006914:	6829      	ldr	r1, [r5, #0]
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	f851 6b04 	ldr.w	r6, [r1], #4
 800691c:	6029      	str	r1, [r5, #0]
 800691e:	061d      	lsls	r5, r3, #24
 8006920:	d514      	bpl.n	800694c <_printf_i+0x1ac>
 8006922:	07df      	lsls	r7, r3, #31
 8006924:	bf44      	itt	mi
 8006926:	f043 0320 	orrmi.w	r3, r3, #32
 800692a:	6023      	strmi	r3, [r4, #0]
 800692c:	b91e      	cbnz	r6, 8006936 <_printf_i+0x196>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	f023 0320 	bic.w	r3, r3, #32
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	2310      	movs	r3, #16
 8006938:	e7b0      	b.n	800689c <_printf_i+0xfc>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	f043 0320 	orr.w	r3, r3, #32
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	2378      	movs	r3, #120	; 0x78
 8006944:	4828      	ldr	r0, [pc, #160]	; (80069e8 <_printf_i+0x248>)
 8006946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800694a:	e7e3      	b.n	8006914 <_printf_i+0x174>
 800694c:	0659      	lsls	r1, r3, #25
 800694e:	bf48      	it	mi
 8006950:	b2b6      	uxthmi	r6, r6
 8006952:	e7e6      	b.n	8006922 <_printf_i+0x182>
 8006954:	4615      	mov	r5, r2
 8006956:	e7bb      	b.n	80068d0 <_printf_i+0x130>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	6826      	ldr	r6, [r4, #0]
 800695c:	6961      	ldr	r1, [r4, #20]
 800695e:	1d18      	adds	r0, r3, #4
 8006960:	6028      	str	r0, [r5, #0]
 8006962:	0635      	lsls	r5, r6, #24
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	d501      	bpl.n	800696c <_printf_i+0x1cc>
 8006968:	6019      	str	r1, [r3, #0]
 800696a:	e002      	b.n	8006972 <_printf_i+0x1d2>
 800696c:	0670      	lsls	r0, r6, #25
 800696e:	d5fb      	bpl.n	8006968 <_printf_i+0x1c8>
 8006970:	8019      	strh	r1, [r3, #0]
 8006972:	2300      	movs	r3, #0
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	4615      	mov	r5, r2
 8006978:	e7ba      	b.n	80068f0 <_printf_i+0x150>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	1d1a      	adds	r2, r3, #4
 800697e:	602a      	str	r2, [r5, #0]
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	6862      	ldr	r2, [r4, #4]
 8006984:	2100      	movs	r1, #0
 8006986:	4628      	mov	r0, r5
 8006988:	f7f9 fbfa 	bl	8000180 <memchr>
 800698c:	b108      	cbz	r0, 8006992 <_printf_i+0x1f2>
 800698e:	1b40      	subs	r0, r0, r5
 8006990:	6060      	str	r0, [r4, #4]
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	6123      	str	r3, [r4, #16]
 8006996:	2300      	movs	r3, #0
 8006998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800699c:	e7a8      	b.n	80068f0 <_printf_i+0x150>
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	462a      	mov	r2, r5
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d0ab      	beq.n	8006904 <_printf_i+0x164>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	079b      	lsls	r3, r3, #30
 80069b0:	d413      	bmi.n	80069da <_printf_i+0x23a>
 80069b2:	68e0      	ldr	r0, [r4, #12]
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	4298      	cmp	r0, r3
 80069b8:	bfb8      	it	lt
 80069ba:	4618      	movlt	r0, r3
 80069bc:	e7a4      	b.n	8006908 <_printf_i+0x168>
 80069be:	2301      	movs	r3, #1
 80069c0:	4632      	mov	r2, r6
 80069c2:	4649      	mov	r1, r9
 80069c4:	4640      	mov	r0, r8
 80069c6:	47d0      	blx	sl
 80069c8:	3001      	adds	r0, #1
 80069ca:	d09b      	beq.n	8006904 <_printf_i+0x164>
 80069cc:	3501      	adds	r5, #1
 80069ce:	68e3      	ldr	r3, [r4, #12]
 80069d0:	9903      	ldr	r1, [sp, #12]
 80069d2:	1a5b      	subs	r3, r3, r1
 80069d4:	42ab      	cmp	r3, r5
 80069d6:	dcf2      	bgt.n	80069be <_printf_i+0x21e>
 80069d8:	e7eb      	b.n	80069b2 <_printf_i+0x212>
 80069da:	2500      	movs	r5, #0
 80069dc:	f104 0619 	add.w	r6, r4, #25
 80069e0:	e7f5      	b.n	80069ce <_printf_i+0x22e>
 80069e2:	bf00      	nop
 80069e4:	08006de5 	.word	0x08006de5
 80069e8:	08006df6 	.word	0x08006df6

080069ec <memmove>:
 80069ec:	4288      	cmp	r0, r1
 80069ee:	b510      	push	{r4, lr}
 80069f0:	eb01 0402 	add.w	r4, r1, r2
 80069f4:	d902      	bls.n	80069fc <memmove+0x10>
 80069f6:	4284      	cmp	r4, r0
 80069f8:	4623      	mov	r3, r4
 80069fa:	d807      	bhi.n	8006a0c <memmove+0x20>
 80069fc:	1e43      	subs	r3, r0, #1
 80069fe:	42a1      	cmp	r1, r4
 8006a00:	d008      	beq.n	8006a14 <memmove+0x28>
 8006a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a0a:	e7f8      	b.n	80069fe <memmove+0x12>
 8006a0c:	4402      	add	r2, r0
 8006a0e:	4601      	mov	r1, r0
 8006a10:	428a      	cmp	r2, r1
 8006a12:	d100      	bne.n	8006a16 <memmove+0x2a>
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a1e:	e7f7      	b.n	8006a10 <memmove+0x24>

08006a20 <_free_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4605      	mov	r5, r0
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d041      	beq.n	8006aac <_free_r+0x8c>
 8006a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a2c:	1f0c      	subs	r4, r1, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfb8      	it	lt
 8006a32:	18e4      	addlt	r4, r4, r3
 8006a34:	f000 f912 	bl	8006c5c <__malloc_lock>
 8006a38:	4a1d      	ldr	r2, [pc, #116]	; (8006ab0 <_free_r+0x90>)
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	b933      	cbnz	r3, 8006a4c <_free_r+0x2c>
 8006a3e:	6063      	str	r3, [r4, #4]
 8006a40:	6014      	str	r4, [r2, #0]
 8006a42:	4628      	mov	r0, r5
 8006a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a48:	f000 b90e 	b.w	8006c68 <__malloc_unlock>
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d908      	bls.n	8006a62 <_free_r+0x42>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	1821      	adds	r1, r4, r0
 8006a54:	428b      	cmp	r3, r1
 8006a56:	bf01      	itttt	eq
 8006a58:	6819      	ldreq	r1, [r3, #0]
 8006a5a:	685b      	ldreq	r3, [r3, #4]
 8006a5c:	1809      	addeq	r1, r1, r0
 8006a5e:	6021      	streq	r1, [r4, #0]
 8006a60:	e7ed      	b.n	8006a3e <_free_r+0x1e>
 8006a62:	461a      	mov	r2, r3
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b10b      	cbz	r3, 8006a6c <_free_r+0x4c>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d9fa      	bls.n	8006a62 <_free_r+0x42>
 8006a6c:	6811      	ldr	r1, [r2, #0]
 8006a6e:	1850      	adds	r0, r2, r1
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d10b      	bne.n	8006a8c <_free_r+0x6c>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	4401      	add	r1, r0
 8006a78:	1850      	adds	r0, r2, r1
 8006a7a:	4283      	cmp	r3, r0
 8006a7c:	6011      	str	r1, [r2, #0]
 8006a7e:	d1e0      	bne.n	8006a42 <_free_r+0x22>
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	6053      	str	r3, [r2, #4]
 8006a86:	4401      	add	r1, r0
 8006a88:	6011      	str	r1, [r2, #0]
 8006a8a:	e7da      	b.n	8006a42 <_free_r+0x22>
 8006a8c:	d902      	bls.n	8006a94 <_free_r+0x74>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	e7d6      	b.n	8006a42 <_free_r+0x22>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	1821      	adds	r1, r4, r0
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	bf04      	itt	eq
 8006a9c:	6819      	ldreq	r1, [r3, #0]
 8006a9e:	685b      	ldreq	r3, [r3, #4]
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	bf04      	itt	eq
 8006aa4:	1809      	addeq	r1, r1, r0
 8006aa6:	6021      	streq	r1, [r4, #0]
 8006aa8:	6054      	str	r4, [r2, #4]
 8006aaa:	e7ca      	b.n	8006a42 <_free_r+0x22>
 8006aac:	bd38      	pop	{r3, r4, r5, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000284 	.word	0x20000284

08006ab4 <sbrk_aligned>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4e0e      	ldr	r6, [pc, #56]	; (8006af0 <sbrk_aligned+0x3c>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	6831      	ldr	r1, [r6, #0]
 8006abc:	4605      	mov	r5, r0
 8006abe:	b911      	cbnz	r1, 8006ac6 <sbrk_aligned+0x12>
 8006ac0:	f000 f8bc 	bl	8006c3c <_sbrk_r>
 8006ac4:	6030      	str	r0, [r6, #0]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f8b7 	bl	8006c3c <_sbrk_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d00a      	beq.n	8006ae8 <sbrk_aligned+0x34>
 8006ad2:	1cc4      	adds	r4, r0, #3
 8006ad4:	f024 0403 	bic.w	r4, r4, #3
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d007      	beq.n	8006aec <sbrk_aligned+0x38>
 8006adc:	1a21      	subs	r1, r4, r0
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 f8ac 	bl	8006c3c <_sbrk_r>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d101      	bne.n	8006aec <sbrk_aligned+0x38>
 8006ae8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006aec:	4620      	mov	r0, r4
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	20000288 	.word	0x20000288

08006af4 <_malloc_r>:
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	1ccd      	adds	r5, r1, #3
 8006afa:	f025 0503 	bic.w	r5, r5, #3
 8006afe:	3508      	adds	r5, #8
 8006b00:	2d0c      	cmp	r5, #12
 8006b02:	bf38      	it	cc
 8006b04:	250c      	movcc	r5, #12
 8006b06:	2d00      	cmp	r5, #0
 8006b08:	4607      	mov	r7, r0
 8006b0a:	db01      	blt.n	8006b10 <_malloc_r+0x1c>
 8006b0c:	42a9      	cmp	r1, r5
 8006b0e:	d905      	bls.n	8006b1c <_malloc_r+0x28>
 8006b10:	230c      	movs	r3, #12
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	2600      	movs	r6, #0
 8006b16:	4630      	mov	r0, r6
 8006b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b1c:	4e2e      	ldr	r6, [pc, #184]	; (8006bd8 <_malloc_r+0xe4>)
 8006b1e:	f000 f89d 	bl	8006c5c <__malloc_lock>
 8006b22:	6833      	ldr	r3, [r6, #0]
 8006b24:	461c      	mov	r4, r3
 8006b26:	bb34      	cbnz	r4, 8006b76 <_malloc_r+0x82>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff ffc2 	bl	8006ab4 <sbrk_aligned>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	4604      	mov	r4, r0
 8006b34:	d14d      	bne.n	8006bd2 <_malloc_r+0xde>
 8006b36:	6834      	ldr	r4, [r6, #0]
 8006b38:	4626      	mov	r6, r4
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	d140      	bne.n	8006bc0 <_malloc_r+0xcc>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	4631      	mov	r1, r6
 8006b42:	4638      	mov	r0, r7
 8006b44:	eb04 0803 	add.w	r8, r4, r3
 8006b48:	f000 f878 	bl	8006c3c <_sbrk_r>
 8006b4c:	4580      	cmp	r8, r0
 8006b4e:	d13a      	bne.n	8006bc6 <_malloc_r+0xd2>
 8006b50:	6821      	ldr	r1, [r4, #0]
 8006b52:	3503      	adds	r5, #3
 8006b54:	1a6d      	subs	r5, r5, r1
 8006b56:	f025 0503 	bic.w	r5, r5, #3
 8006b5a:	3508      	adds	r5, #8
 8006b5c:	2d0c      	cmp	r5, #12
 8006b5e:	bf38      	it	cc
 8006b60:	250c      	movcc	r5, #12
 8006b62:	4629      	mov	r1, r5
 8006b64:	4638      	mov	r0, r7
 8006b66:	f7ff ffa5 	bl	8006ab4 <sbrk_aligned>
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d02b      	beq.n	8006bc6 <_malloc_r+0xd2>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	442b      	add	r3, r5
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	e00e      	b.n	8006b94 <_malloc_r+0xa0>
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	1b52      	subs	r2, r2, r5
 8006b7a:	d41e      	bmi.n	8006bba <_malloc_r+0xc6>
 8006b7c:	2a0b      	cmp	r2, #11
 8006b7e:	d916      	bls.n	8006bae <_malloc_r+0xba>
 8006b80:	1961      	adds	r1, r4, r5
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	6025      	str	r5, [r4, #0]
 8006b86:	bf18      	it	ne
 8006b88:	6059      	strne	r1, [r3, #4]
 8006b8a:	6863      	ldr	r3, [r4, #4]
 8006b8c:	bf08      	it	eq
 8006b8e:	6031      	streq	r1, [r6, #0]
 8006b90:	5162      	str	r2, [r4, r5]
 8006b92:	604b      	str	r3, [r1, #4]
 8006b94:	4638      	mov	r0, r7
 8006b96:	f104 060b 	add.w	r6, r4, #11
 8006b9a:	f000 f865 	bl	8006c68 <__malloc_unlock>
 8006b9e:	f026 0607 	bic.w	r6, r6, #7
 8006ba2:	1d23      	adds	r3, r4, #4
 8006ba4:	1af2      	subs	r2, r6, r3
 8006ba6:	d0b6      	beq.n	8006b16 <_malloc_r+0x22>
 8006ba8:	1b9b      	subs	r3, r3, r6
 8006baa:	50a3      	str	r3, [r4, r2]
 8006bac:	e7b3      	b.n	8006b16 <_malloc_r+0x22>
 8006bae:	6862      	ldr	r2, [r4, #4]
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	bf0c      	ite	eq
 8006bb4:	6032      	streq	r2, [r6, #0]
 8006bb6:	605a      	strne	r2, [r3, #4]
 8006bb8:	e7ec      	b.n	8006b94 <_malloc_r+0xa0>
 8006bba:	4623      	mov	r3, r4
 8006bbc:	6864      	ldr	r4, [r4, #4]
 8006bbe:	e7b2      	b.n	8006b26 <_malloc_r+0x32>
 8006bc0:	4634      	mov	r4, r6
 8006bc2:	6876      	ldr	r6, [r6, #4]
 8006bc4:	e7b9      	b.n	8006b3a <_malloc_r+0x46>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	4638      	mov	r0, r7
 8006bcc:	f000 f84c 	bl	8006c68 <__malloc_unlock>
 8006bd0:	e7a1      	b.n	8006b16 <_malloc_r+0x22>
 8006bd2:	6025      	str	r5, [r4, #0]
 8006bd4:	e7de      	b.n	8006b94 <_malloc_r+0xa0>
 8006bd6:	bf00      	nop
 8006bd8:	20000284 	.word	0x20000284

08006bdc <_realloc_r>:
 8006bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	4680      	mov	r8, r0
 8006be2:	4614      	mov	r4, r2
 8006be4:	460e      	mov	r6, r1
 8006be6:	b921      	cbnz	r1, 8006bf2 <_realloc_r+0x16>
 8006be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bec:	4611      	mov	r1, r2
 8006bee:	f7ff bf81 	b.w	8006af4 <_malloc_r>
 8006bf2:	b92a      	cbnz	r2, 8006c00 <_realloc_r+0x24>
 8006bf4:	f7ff ff14 	bl	8006a20 <_free_r>
 8006bf8:	4625      	mov	r5, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c00:	f000 f838 	bl	8006c74 <_malloc_usable_size_r>
 8006c04:	4284      	cmp	r4, r0
 8006c06:	4607      	mov	r7, r0
 8006c08:	d802      	bhi.n	8006c10 <_realloc_r+0x34>
 8006c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c0e:	d812      	bhi.n	8006c36 <_realloc_r+0x5a>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4640      	mov	r0, r8
 8006c14:	f7ff ff6e 	bl	8006af4 <_malloc_r>
 8006c18:	4605      	mov	r5, r0
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d0ed      	beq.n	8006bfa <_realloc_r+0x1e>
 8006c1e:	42bc      	cmp	r4, r7
 8006c20:	4622      	mov	r2, r4
 8006c22:	4631      	mov	r1, r6
 8006c24:	bf28      	it	cs
 8006c26:	463a      	movcs	r2, r7
 8006c28:	f7ff fba6 	bl	8006378 <memcpy>
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4640      	mov	r0, r8
 8006c30:	f7ff fef6 	bl	8006a20 <_free_r>
 8006c34:	e7e1      	b.n	8006bfa <_realloc_r+0x1e>
 8006c36:	4635      	mov	r5, r6
 8006c38:	e7df      	b.n	8006bfa <_realloc_r+0x1e>
	...

08006c3c <_sbrk_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d06      	ldr	r5, [pc, #24]	; (8006c58 <_sbrk_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa fc94 	bl	8001574 <_sbrk>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_sbrk_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_sbrk_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	2000028c 	.word	0x2000028c

08006c5c <__malloc_lock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__malloc_lock+0x8>)
 8006c5e:	f000 b811 	b.w	8006c84 <__retarget_lock_acquire_recursive>
 8006c62:	bf00      	nop
 8006c64:	20000290 	.word	0x20000290

08006c68 <__malloc_unlock>:
 8006c68:	4801      	ldr	r0, [pc, #4]	; (8006c70 <__malloc_unlock+0x8>)
 8006c6a:	f000 b80c 	b.w	8006c86 <__retarget_lock_release_recursive>
 8006c6e:	bf00      	nop
 8006c70:	20000290 	.word	0x20000290

08006c74 <_malloc_usable_size_r>:
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f18      	subs	r0, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbc      	itt	lt
 8006c7e:	580b      	ldrlt	r3, [r1, r0]
 8006c80:	18c0      	addlt	r0, r0, r3
 8006c82:	4770      	bx	lr

08006c84 <__retarget_lock_acquire_recursive>:
 8006c84:	4770      	bx	lr

08006c86 <__retarget_lock_release_recursive>:
 8006c86:	4770      	bx	lr

08006c88 <_init>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr

08006c94 <_fini>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	bf00      	nop
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr

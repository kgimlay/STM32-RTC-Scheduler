
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f28  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007424  08007424  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800742c  0800742c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000078  080074ac  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080074ac  00020374  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160bf  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341b  00000000  00000000  00036161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00039580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f248  00000000  00000000  0003bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015abd  00000000  00000000  0005afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9e81  00000000  00000000  00070a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a90e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006104  00000000  00000000  0012a960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007050 	.word	0x08007050

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007050 	.word	0x08007050

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:

/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <calendar_init+0x68>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 fbd2 	bl	8001ce8 <rtcAlarmControl_init>

	// initialize the calendar
	_calendarHead = -1;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <calendar_init+0x6c>)
 8000546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800054a:	601a      	str	r2, [r3, #0]
	_calendarFree = 0;
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <calendar_init+0x70>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	_currentEvent = 1;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <calendar_init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e00d      	b.n	800057a <calendar_init+0x4a>
	{
		_calendarEvents[idx].next = idx + 1;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1c59      	adds	r1, r3, #1
 8000562:	4811      	ldr	r0, [pc, #68]	; (80005a8 <calendar_init+0x78>)
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	4613      	mov	r3, r2
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4403      	add	r3, r0
 8000570:	3318      	adds	r3, #24
 8000572:	6019      	str	r1, [r3, #0]
	for (int idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b08      	cmp	r3, #8
 800057e:	ddee      	ble.n	800055e <calendar_init+0x2e>
	}
	_calendarEvents[MAX_NUM_EVENTS - 1].next = -1;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <calendar_init+0x78>)
 8000582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000586:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	// set init flag
	_isInit = true;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <calendar_init+0x7c>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000098 	.word	0x20000098
 800059c:	20000004 	.word	0x20000004
 80005a0:	200001b4 	.word	0x200001b4
 80005a4:	20000008 	.word	0x20000008
 80005a8:	2000009c 	.word	0x2000009c
 80005ac:	20000094 	.word	0x20000094

080005b0 <calendar_start>:

/*
 *
 */
void calendar_start(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f9a0 	bl	8000904 <getNextAlarm>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d024      	beq.n	8000614 <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005ca:	7ab8      	ldrb	r0, [r7, #10]
 80005cc:	7af9      	ldrb	r1, [r7, #11]
 80005ce:	7b3a      	ldrb	r2, [r7, #12]
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	f001 fcf5 	bl	8001fc0 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d017      	beq.n	800060c <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4910      	ldr	r1, [pc, #64]	; (8000620 <calendar_start+0x70>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	3308      	adds	r3, #8
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d009      	beq.n	8000606 <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].event.start_callback)();
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	490a      	ldr	r1, [pc, #40]	; (8000620 <calendar_start+0x70>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	440b      	add	r3, r1
 8000600:	3308      	adds	r3, #8
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <calendar_start+0x74>)
 800060a:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <calendar_start+0x78>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 8000612:	e001      	b.n	8000618 <calendar_start+0x68>
		diableAlarm_A();
 8000614:	f001 fd70 	bl	80020f8 <diableAlarm_A>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000009c 	.word	0x2000009c
 8000624:	20000008 	.word	0x20000008
 8000628:	20000095 	.word	0x20000095

0800062c <calendar_setDateTime>:

/*
 *
 */
void calendar_setDateTime(DateTime dateTime)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af02      	add	r7, sp, #8
 8000632:	463b      	mov	r3, r7
 8000634:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000638:	7838      	ldrb	r0, [r7, #0]
 800063a:	7879      	ldrb	r1, [r7, #1]
 800063c:	78bc      	ldrb	r4, [r7, #2]
 800063e:	78fd      	ldrb	r5, [r7, #3]
 8000640:	793b      	ldrb	r3, [r7, #4]
 8000642:	797a      	ldrb	r2, [r7, #5]
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	462b      	mov	r3, r5
 800064a:	4622      	mov	r2, r4
 800064c:	f001 fb5a 	bl	8001d04 <setDateTime>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bdb0      	pop	{r4, r5, r7, pc}

08000658 <calendar_getDateTime>:

/*
 *
 */
void calendar_getDateTime(DateTime* dateTime)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	1c59      	adds	r1, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	1c9c      	adds	r4, r3, #2
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	1cdd      	adds	r5, r3, #3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3304      	adds	r3, #4
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	3205      	adds	r2, #5
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	462b      	mov	r3, r5
 800067c:	4622      	mov	r2, r4
 800067e:	f001 fc0b 	bl	8001e98 <getDateTime>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800068c <calendar_addEvent>:

/*
 *
 */
CalendarStatus calendar_addEvent(CalendarEvent *event)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	// add only if the calendar has been initialized
	if (_isInit)
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <calendar_addEvent+0x30>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d009      	beq.n	80006b0 <calendar_addEvent+0x24>
	{
		if (_addEvent(event))
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 fa59 	bl	8000b54 <_addEvent>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <calendar_addEvent+0x20>
		{
			return CALENDAR_OKAY;
 80006a8:	2300      	movs	r3, #0
 80006aa:	e002      	b.n	80006b2 <calendar_addEvent+0x26>
		}

		else
		{
			return CALENDAR_FULL;
 80006ac:	2302      	movs	r3, #2
 80006ae:	e000      	b.n	80006b2 <calendar_addEvent+0x26>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDER_NOT_INIT;
 80006b0:	2301      	movs	r3, #1
	}
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000094 	.word	0x20000094

080006c0 <calendar_handleAlarm>:

/*
 *
 */
void calendar_handleAlarm(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 80006c6:	4b5d      	ldr	r3, [pc, #372]	; (800083c <calendar_handleAlarm+0x17c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	f000 80b1 	beq.w	8000834 <calendar_handleAlarm+0x174>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80006d2:	1cfa      	adds	r2, r7, #3
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f912 	bl	8000904 <getNextAlarm>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 8085 	beq.w	80007f2 <calendar_handleAlarm+0x132>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80006e8:	7ab8      	ldrb	r0, [r7, #10]
 80006ea:	7af9      	ldrb	r1, [r7, #11]
 80006ec:	7b3a      	ldrb	r2, [r7, #12]
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	f001 fc66 	bl	8001fc0 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d01d      	beq.n	8000736 <calendar_handleAlarm+0x76>
 80006fa:	4b51      	ldr	r3, [pc, #324]	; (8000840 <calendar_handleAlarm+0x180>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000702:	d118      	bne.n	8000736 <calendar_handleAlarm+0x76>

				// call start event callback
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	494f      	ldr	r1, [pc, #316]	; (8000844 <calendar_handleAlarm+0x184>)
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	3308      	adds	r3, #8
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d009      	beq.n	800072e <calendar_handleAlarm+0x6e>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4949      	ldr	r1, [pc, #292]	; (8000844 <calendar_handleAlarm+0x184>)
 800071e:	4613      	mov	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	1a9b      	subs	r3, r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	3308      	adds	r3, #8
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a43      	ldr	r2, [pc, #268]	; (8000840 <calendar_handleAlarm+0x180>)
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	e07b      	b.n	800082e <calendar_handleAlarm+0x16e>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d034      	beq.n	80007a6 <calendar_handleAlarm+0xe6>
 800073c:	4b40      	ldr	r3, [pc, #256]	; (8000840 <calendar_handleAlarm+0x180>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000744:	d02f      	beq.n	80007a6 <calendar_handleAlarm+0xe6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <calendar_handleAlarm+0x180>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	493e      	ldr	r1, [pc, #248]	; (8000844 <calendar_handleAlarm+0x184>)
 800074c:	4613      	mov	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	3314      	adds	r3, #20
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <calendar_handleAlarm+0xb4>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <calendar_handleAlarm+0x180>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4938      	ldr	r1, [pc, #224]	; (8000844 <calendar_handleAlarm+0x184>)
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	3314      	adds	r3, #20
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].event.start_callback != NULL)
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4933      	ldr	r1, [pc, #204]	; (8000844 <calendar_handleAlarm+0x184>)
 8000778:	4613      	mov	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	3308      	adds	r3, #8
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d009      	beq.n	800079e <calendar_handleAlarm+0xde>
					(*_calendarEvents[currentEventIdx].event.start_callback)();
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	492d      	ldr	r1, [pc, #180]	; (8000844 <calendar_handleAlarm+0x184>)
 800078e:	4613      	mov	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3308      	adds	r3, #8
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a27      	ldr	r2, [pc, #156]	; (8000840 <calendar_handleAlarm+0x180>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	e043      	b.n	800082e <calendar_handleAlarm+0x16e>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d03d      	beq.n	800082e <calendar_handleAlarm+0x16e>
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <calendar_handleAlarm+0x180>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007ba:	d038      	beq.n	800082e <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <calendar_handleAlarm+0x180>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4920      	ldr	r1, [pc, #128]	; (8000844 <calendar_handleAlarm+0x184>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	3314      	adds	r3, #20
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00a      	beq.n	80007ea <calendar_handleAlarm+0x12a>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <calendar_handleAlarm+0x180>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	491a      	ldr	r1, [pc, #104]	; (8000844 <calendar_handleAlarm+0x184>)
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	440b      	add	r3, r1
 80007e4:	3314      	adds	r3, #20
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <calendar_handleAlarm+0x180>)
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	e01d      	b.n	800082e <calendar_handleAlarm+0x16e>

		}

		// if there is no alarm to set, disable the alarm and exit any events
		else {
			diableAlarm_A();
 80007f2:	f001 fc81 	bl	80020f8 <diableAlarm_A>

			if (CURRENTLY_IN_EVENT) {
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <calendar_handleAlarm+0x180>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007fe:	d016      	beq.n	800082e <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].event.end_callback != NULL)
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <calendar_handleAlarm+0x180>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	490f      	ldr	r1, [pc, #60]	; (8000844 <calendar_handleAlarm+0x184>)
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	3314      	adds	r3, #20
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00a      	beq.n	800082e <calendar_handleAlarm+0x16e>
					(*_calendarEvents[_currentEvent].event.end_callback)();
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <calendar_handleAlarm+0x180>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4909      	ldr	r1, [pc, #36]	; (8000844 <calendar_handleAlarm+0x184>)
 800081e:	4613      	mov	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	440b      	add	r3, r1
 8000828:	3314      	adds	r3, #20
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 800082e:	4b03      	ldr	r3, [pc, #12]	; (800083c <calendar_handleAlarm+0x17c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
	}

	else {

	}
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000095 	.word	0x20000095
 8000840:	20000008 	.word	0x20000008
 8000844:	2000009c 	.word	0x2000009c

08000848 <calendar_AlarmA_ISR>:

/*
 *
 */
void calendar_AlarmA_ISR(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <calendar_AlarmA_ISR+0x14>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000095 	.word	0x20000095

08000860 <compareDateTime>:
/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	f107 0408 	add.w	r4, r7, #8
 800086a:	e884 0003 	stmia.w	r4, {r0, r1}
 800086e:	4639      	mov	r1, r7
 8000870:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	e893 0003 	ldmia.w	r3, {r0, r1}
 800087c:	f000 f80e 	bl	800089c <dateTimeToSeconds>
 8000880:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 8000882:	463b      	mov	r3, r7
 8000884:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000888:	f000 f808 	bl	800089c <dateTimeToSeconds>
 800088c:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	1ad3      	subs	r3, r2, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <dateTimeToSeconds>:

/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	463b      	mov	r3, r7
 80008a4:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80008a8:	797b      	ldrb	r3, [r7, #5]
 80008aa:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80008ac:	793b      	ldrb	r3, [r7, #4]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4613      	mov	r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	1a9b      	subs	r3, r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80008c2:	fb01 f303 	mul.w	r3, r1, r3
 80008c6:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80008c8:	78bb      	ldrb	r3, [r7, #2]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	490a      	ldr	r1, [pc, #40]	; (80008f8 <dateTimeToSeconds+0x5c>)
 80008ce:	fb01 f303 	mul.w	r3, r1, r3
 80008d2:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 80008d4:	787b      	ldrb	r3, [r7, #1]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4908      	ldr	r1, [pc, #32]	; (80008fc <dateTimeToSeconds+0x60>)
 80008da:	fb01 f303 	mul.w	r3, r1, r3
 80008de:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 80008e0:	783b      	ldrb	r3, [r7, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <dateTimeToSeconds+0x64>)
 80008e6:	fb01 f303 	mul.w	r3, r1, r3
 80008ea:	4413      	add	r3, r2
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	00015180 	.word	0x00015180
 80008fc:	00278d00 	.word	0x00278d00
 8000900:	01da9c00 	.word	0x01da9c00

08000904 <getNextAlarm>:

/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b08d      	sub	sp, #52	; 0x34
 8000908:	af02      	add	r7, sp, #8
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
	bool nextAlarmFound = false;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	DateTime now = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	1cdc      	adds	r4, r3, #3
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	1c9a      	adds	r2, r3, #2
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	1c59      	adds	r1, r3, #1
 8000940:	f107 001c 	add.w	r0, r7, #28
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	3305      	adds	r3, #5
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	3304      	adds	r3, #4
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	4623      	mov	r3, r4
 8000956:	f001 fa9f 	bl	8001e98 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = _calendarHead;
 800095a:	4b7c      	ldr	r3, [pc, #496]	; (8000b4c <getNextAlarm+0x248>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
	nextAlarmFound = false;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (eventIdx != -1)
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800096c:	f000 80ce 	beq.w	8000b0c <getNextAlarm+0x208>
	{
		while (eventIdx != -1 && !nextAlarmFound) {
 8000970:	e0c0      	b.n	8000af4 <getNextAlarm+0x1f0>
			// test if before event
			if (compareDateTime(now, _calendarEvents[eventIdx].event.start) < 0)
 8000972:	4977      	ldr	r1, [pc, #476]	; (8000b50 <getNextAlarm+0x24c>)
 8000974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000976:	4613      	mov	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	cb0c      	ldmia	r3, {r2, r3}
 8000982:	f107 011c 	add.w	r1, r7, #28
 8000986:	c903      	ldmia	r1, {r0, r1}
 8000988:	f7ff ff6a 	bl	8000860 <compareDateTime>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	da41      	bge.n	8000a16 <getNextAlarm+0x112>
			{
				// then the next alarm is the beginning of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.start.year;
 8000992:	496f      	ldr	r1, [pc, #444]	; (8000b50 <getNextAlarm+0x24c>)
 8000994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000996:	4613      	mov	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	1a9b      	subs	r3, r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.start.month;
 80009a4:	496a      	ldr	r1, [pc, #424]	; (8000b50 <getNextAlarm+0x24c>)
 80009a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	1a9b      	subs	r3, r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	440b      	add	r3, r1
 80009b2:	3301      	adds	r3, #1
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.start.day;
 80009b8:	4965      	ldr	r1, [pc, #404]	; (8000b50 <getNextAlarm+0x24c>)
 80009ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009bc:	4613      	mov	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	440b      	add	r3, r1
 80009c6:	3302      	adds	r3, #2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.start.hour;
 80009cc:	4960      	ldr	r1, [pc, #384]	; (8000b50 <getNextAlarm+0x24c>)
 80009ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d0:	4613      	mov	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	1a9b      	subs	r3, r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	440b      	add	r3, r1
 80009da:	3303      	adds	r3, #3
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.start.minute;
 80009e0:	495b      	ldr	r1, [pc, #364]	; (8000b50 <getNextAlarm+0x24c>)
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	4613      	mov	r3, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	440b      	add	r3, r1
 80009ee:	3304      	adds	r3, #4
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.start.second;
 80009f4:	4956      	ldr	r1, [pc, #344]	; (8000b50 <getNextAlarm+0x24c>)
 80009f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f8:	4613      	mov	r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	3305      	adds	r3, #5
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = false;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e06e      	b.n	8000af4 <getNextAlarm+0x1f0>
			}

			// test if within event
			else if(compareDateTime(now, _calendarEvents[eventIdx].event.start) >= 0
 8000a16:	494e      	ldr	r1, [pc, #312]	; (8000b50 <getNextAlarm+0x24c>)
 8000a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	1a9b      	subs	r3, r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	cb0c      	ldmia	r3, {r2, r3}
 8000a26:	f107 011c 	add.w	r1, r7, #28
 8000a2a:	c903      	ldmia	r1, {r0, r1}
 8000a2c:	f7ff ff18 	bl	8000860 <compareDateTime>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db54      	blt.n	8000ae0 <getNextAlarm+0x1dc>
					&& compareDateTime(now, _calendarEvents[eventIdx].event.end) < 0)
 8000a36:	4946      	ldr	r1, [pc, #280]	; (8000b50 <getNextAlarm+0x24c>)
 8000a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	440b      	add	r3, r1
 8000a44:	3308      	adds	r3, #8
 8000a46:	3304      	adds	r3, #4
 8000a48:	cb0c      	ldmia	r3, {r2, r3}
 8000a4a:	f107 011c 	add.w	r1, r7, #28
 8000a4e:	c903      	ldmia	r1, {r0, r1}
 8000a50:	f7ff ff06 	bl	8000860 <compareDateTime>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da42      	bge.n	8000ae0 <getNextAlarm+0x1dc>
			{
				// then the next alarm is the end of this event
				nextAlarmDateTime.year = _calendarEvents[eventIdx].event.end.year;
 8000a5a:	493d      	ldr	r1, [pc, #244]	; (8000b50 <getNextAlarm+0x24c>)
 8000a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a5e:	4613      	mov	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	1a9b      	subs	r3, r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	330c      	adds	r3, #12
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	753b      	strb	r3, [r7, #20]
				nextAlarmDateTime.month = _calendarEvents[eventIdx].event.end.month;
 8000a6e:	4938      	ldr	r1, [pc, #224]	; (8000b50 <getNextAlarm+0x24c>)
 8000a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	330d      	adds	r3, #13
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	757b      	strb	r3, [r7, #21]
				nextAlarmDateTime.day = _calendarEvents[eventIdx].event.end.day;
 8000a82:	4933      	ldr	r1, [pc, #204]	; (8000b50 <getNextAlarm+0x24c>)
 8000a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a86:	4613      	mov	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	1a9b      	subs	r3, r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	440b      	add	r3, r1
 8000a90:	330e      	adds	r3, #14
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	75bb      	strb	r3, [r7, #22]
				nextAlarmDateTime.hour = _calendarEvents[eventIdx].event.end.hour;
 8000a96:	492e      	ldr	r1, [pc, #184]	; (8000b50 <getNextAlarm+0x24c>)
 8000a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	330f      	adds	r3, #15
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	75fb      	strb	r3, [r7, #23]
				nextAlarmDateTime.minute = _calendarEvents[eventIdx].event.end.minute;
 8000aaa:	4929      	ldr	r1, [pc, #164]	; (8000b50 <getNextAlarm+0x24c>)
 8000aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aae:	4613      	mov	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3310      	adds	r3, #16
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	763b      	strb	r3, [r7, #24]
				nextAlarmDateTime.second = _calendarEvents[eventIdx].event.end.second;
 8000abe:	4924      	ldr	r1, [pc, #144]	; (8000b50 <getNextAlarm+0x24c>)
 8000ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	440b      	add	r3, r1
 8000acc:	3311      	adds	r3, #17
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	767b      	strb	r3, [r7, #25]

				// set found
				nextAlarmFound = true;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				*inEvent = true;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e009      	b.n	8000af4 <getNextAlarm+0x1f0>
			}

			// traverse to next event
			else {
				eventIdx = _calendarEvents[eventIdx].next;
 8000ae0:	491b      	ldr	r1, [pc, #108]	; (8000b50 <getNextAlarm+0x24c>)
 8000ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	3318      	adds	r3, #24
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
		while (eventIdx != -1 && !nextAlarmFound) {
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000afa:	d007      	beq.n	8000b0c <getNextAlarm+0x208>
 8000afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b00:	f083 0301 	eor.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f47f af33 	bne.w	8000972 <getNextAlarm+0x6e>
			}
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b10:	f083 0301 	eor.w	r3, r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <getNextAlarm+0x226>
		dateTime = NULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b24:	601a      	str	r2, [r3, #0]
		return false;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e00b      	b.n	8000b42 <getNextAlarm+0x23e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	6010      	str	r0, [r2, #0]
 8000b36:	889b      	ldrh	r3, [r3, #4]
 8000b38:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = eventIdx;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b3e:	601a      	str	r2, [r3, #0]
		return true;
 8000b40:	2301      	movs	r3, #1
	}
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	372c      	adds	r7, #44	; 0x2c
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	2000009c 	.word	0x2000009c

08000b54 <_addEvent>:

/*
 *
 */
bool _addEvent(CalendarEvent* event)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	int tempEndOfHead;

	// if the calendar is full, return early
	if (_calendarFree == -1)
 8000b5c:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <_addEvent+0x114>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b64:	d101      	bne.n	8000b6a <_addEvent+0x16>
	{
		return false;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e079      	b.n	8000c5e <_addEvent+0x10a>
	}

	// if the calendar is empty, insert at front
	if (_calendarHead == -1)
 8000b6a:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <_addEvent+0x118>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b72:	d128      	bne.n	8000bc6 <_addEvent+0x72>
	{
		// copy event into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000b74:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <_addEvent+0x114>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	1a9b      	subs	r3, r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4a3b      	ldr	r2, [pc, #236]	; (8000c70 <_addEvent+0x11c>)
 8000b82:	4413      	add	r3, r2
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f874 	bl	8000c74 <_copyEvent>

		// set the head
		_calendarHead = _calendarFree;
 8000b8c:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <_addEvent+0x114>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <_addEvent+0x118>)
 8000b92:	6013      	str	r3, [r2, #0]

		// set free to next free
		_calendarFree = _calendarEvents[_calendarFree].next;
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <_addEvent+0x114>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4935      	ldr	r1, [pc, #212]	; (8000c70 <_addEvent+0x11c>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <_addEvent+0x114>)
 8000baa:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[_calendarHead].next = -1;
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <_addEvent+0x118>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	492f      	ldr	r1, [pc, #188]	; (8000c70 <_addEvent+0x11c>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	1a9b      	subs	r3, r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	440b      	add	r3, r1
 8000bbc:	3318      	adds	r3, #24
 8000bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	e04a      	b.n	8000c5c <_addEvent+0x108>

	// if the calendar is not empty (or full), insert at end of list
	else
	{
		// find end of head
		tempEndOfHead = _calendarHead;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <_addEvent+0x118>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000bcc:	e009      	b.n	8000be2 <_addEvent+0x8e>
			tempEndOfHead = _calendarEvents[tempEndOfHead].next;
 8000bce:	4928      	ldr	r1, [pc, #160]	; (8000c70 <_addEvent+0x11c>)
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	3318      	adds	r3, #24
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
		while(_calendarEvents[tempEndOfHead].next != -1)
 8000be2:	4923      	ldr	r1, [pc, #140]	; (8000c70 <_addEvent+0x11c>)
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4613      	mov	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	440b      	add	r3, r1
 8000bf0:	3318      	adds	r3, #24
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf8:	d1e9      	bne.n	8000bce <_addEvent+0x7a>

		// copy events into start of free linked list
		_copyEvent(&(_calendarEvents[_calendarFree].event), event);
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <_addEvent+0x114>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <_addEvent+0x11c>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f831 	bl	8000c74 <_copyEvent>

		// link into head list
		_calendarEvents[tempEndOfHead].next = _calendarFree;
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_addEvent+0x114>)
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	4816      	ldr	r0, [pc, #88]	; (8000c70 <_addEvent+0x11c>)
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4403      	add	r3, r0
 8000c24:	3318      	adds	r3, #24
 8000c26:	6019      	str	r1, [r3, #0]
		tempEndOfHead = _calendarFree;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <_addEvent+0x114>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]

		// set free to next free
			_calendarFree = _calendarEvents[_calendarFree].next;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <_addEvent+0x114>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	490f      	ldr	r1, [pc, #60]	; (8000c70 <_addEvent+0x11c>)
 8000c34:	4613      	mov	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	3318      	adds	r3, #24
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <_addEvent+0x114>)
 8000c44:	6013      	str	r3, [r2, #0]

		// set end of head list
		_calendarEvents[tempEndOfHead].next = -1;
 8000c46:	490a      	ldr	r1, [pc, #40]	; (8000c70 <_addEvent+0x11c>)
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3318      	adds	r3, #24
 8000c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c5a:	601a      	str	r2, [r3, #0]
	}

	// return okay
	return true;
 8000c5c:	2301      	movs	r3, #1
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001b4 	.word	0x200001b4
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	2000009c 	.word	0x2000009c

08000c74 <_copyEvent>:

/*
 *
 */
void _copyEvent(CalendarEvent* to, CalendarEvent* from)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	785a      	ldrb	r2, [r3, #1]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	789a      	ldrb	r2, [r3, #2]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	78da      	ldrb	r2, [r3, #3]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	791a      	ldrb	r2, [r3, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	795a      	ldrb	r2, [r3, #5]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
	to->end.year = from->end.year;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	7b1a      	ldrb	r2, [r3, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	731a      	strb	r2, [r3, #12]
	to->end.month = from->end.month;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	7b5a      	ldrb	r2, [r3, #13]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	735a      	strb	r2, [r3, #13]
	to->end.day = from->end.day;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	7b9a      	ldrb	r2, [r3, #14]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	739a      	strb	r2, [r3, #14]
	to->end.hour = from->end.hour;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	7bda      	ldrb	r2, [r3, #15]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	73da      	strb	r2, [r3, #15]
	to->end.minute = from->end.minute;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	7c1a      	ldrb	r2, [r3, #16]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	741a      	strb	r2, [r3, #16]
	to->end.second = from->end.second;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	7c5a      	ldrb	r2, [r3, #17]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	745a      	strb	r2, [r3, #17]
	to->end_callback = from->end_callback;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	695a      	ldr	r2, [r3, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	615a      	str	r2, [r3, #20]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3304      	adds	r3, #4
 8000d12:	223c      	movs	r2, #60	; 0x3c
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 feba 	bl	8005a90 <memcpy>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	223c      	movs	r2, #60	; 0x3c
 8000d40:	4619      	mov	r1, r3
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f004 fea4 	bl	8005a90 <memcpy>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <code_to_appActions>:

/*
 *
 */
AppActions code_to_appActions(char* code)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4925      	ldr	r1, [pc, #148]	; (8000df0 <code_to_appActions+0xa0>)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f004 fee1 	bl	8005b24 <strncmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e03c      	b.n	8000de6 <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	4921      	ldr	r1, [pc, #132]	; (8000df4 <code_to_appActions+0xa4>)
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f004 fed7 	bl	8005b24 <strncmp>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e032      	b.n	8000de6 <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d80:	2204      	movs	r2, #4
 8000d82:	491d      	ldr	r1, [pc, #116]	; (8000df8 <code_to_appActions+0xa8>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f004 fecd 	bl	8005b24 <strncmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e028      	b.n	8000de6 <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000d94:	2204      	movs	r2, #4
 8000d96:	4919      	ldr	r1, [pc, #100]	; (8000dfc <code_to_appActions+0xac>)
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f004 fec3 	bl	8005b24 <strncmp>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 8000da4:	2304      	movs	r3, #4
 8000da6:	e01e      	b.n	8000de6 <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_MESSAGE_HEADER_SIZE))
 8000da8:	2204      	movs	r2, #4
 8000daa:	4915      	ldr	r1, [pc, #84]	; (8000e00 <code_to_appActions+0xb0>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f004 feb9 	bl	8005b24 <strncmp>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 8000db8:	2305      	movs	r3, #5
 8000dba:	e014      	b.n	8000de6 <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_MESSAGE_HEADER_SIZE))
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	4911      	ldr	r1, [pc, #68]	; (8000e04 <code_to_appActions+0xb4>)
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f004 feaf 	bl	8005b24 <strncmp>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	e00a      	b.n	8000de6 <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_MESSAGE_HEADER_SIZE))
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <code_to_appActions+0xb8>)
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f004 fea5 	bl	8005b24 <strncmp>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <code_to_appActions+0x94>
			return START_CALENDAR;
 8000de0:	2307      	movs	r3, #7
 8000de2:	e000      	b.n	8000de6 <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	08007068 	.word	0x08007068
 8000df4:	08007070 	.word	0x08007070
 8000df8:	08007078 	.word	0x08007078
 8000dfc:	08007080 	.word	0x08007080
 8000e00:	08007088 	.word	0x08007088
 8000e04:	08007090 	.word	0x08007090
 8000e08:	08007098 	.word	0x08007098

08000e0c <parseDateTime>:

/*
 *
 */
void parseDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	// parse year
	dateTime->year = atoi(strtok(data, ";"));
 8000e16:	4926      	ldr	r1, [pc, #152]	; (8000eb0 <parseDateTime+0xa4>)
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f004 fe97 	bl	8005b4c <strtok>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fe07 	bl	8005a34 <atoi>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]

	// parse month
	dateTime->month = atoi(strtok(NULL, ";"));
 8000e2e:	4920      	ldr	r1, [pc, #128]	; (8000eb0 <parseDateTime+0xa4>)
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 fe8b 	bl	8005b4c <strtok>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fdfb 	bl	8005a34 <atoi>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	705a      	strb	r2, [r3, #1]

	// parse date
	dateTime->day = atoi(strtok(NULL, ";"));
 8000e46:	491a      	ldr	r1, [pc, #104]	; (8000eb0 <parseDateTime+0xa4>)
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f004 fe7f 	bl	8005b4c <strtok>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fdef 	bl	8005a34 <atoi>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	709a      	strb	r2, [r3, #2]

	// parse hour
	dateTime->hour = atoi(strtok(NULL, ";"));
 8000e5e:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <parseDateTime+0xa4>)
 8000e60:	2000      	movs	r0, #0
 8000e62:	f004 fe73 	bl	8005b4c <strtok>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 fde3 	bl	8005a34 <atoi>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	70da      	strb	r2, [r3, #3]

	// parse minute
	dateTime->minute = atoi(strtok(NULL, ";"));
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <parseDateTime+0xa4>)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f004 fe67 	bl	8005b4c <strtok>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 fdd7 	bl	8005a34 <atoi>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	711a      	strb	r2, [r3, #4]

	// parse second
	dateTime->second = atoi(strtok(NULL, ";"));
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <parseDateTime+0xa4>)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f004 fe5b 	bl	8005b4c <strtok>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 fdcb 	bl	8005a34 <atoi>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	715a      	strb	r2, [r3, #5]
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	080070a0 	.word	0x080070a0

08000eb4 <formatDateTime>:

/*
 *
 */
void formatDateTime(char data[UART_MESSAGE_BODY_SIZE], DateTime* dateTime)
{
 8000eb4:	b5b0      	push	{r4, r5, r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af06      	add	r7, sp, #24
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	memset(data, 0, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000ebe:	223c      	movs	r2, #60	; 0x3c
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f004 fdf2 	bl	8005aac <memset>
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461d      	mov	r5, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	789b      	ldrb	r3, [r3, #2]
 8000ed8:	4619      	mov	r1, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	78db      	ldrb	r3, [r3, #3]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ede:	4618      	mov	r0, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	791b      	ldrb	r3, [r3, #4]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000ee4:	461c      	mov	r4, r3
			dateTime->hour, dateTime->minute, dateTime->second);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	795b      	ldrb	r3, [r3, #5]
	snprintf(data, UART_MESSAGE_BODY_SIZE, "%d;%d;%d;%d;%d;%d", dateTime->year, dateTime->month, dateTime->day,
 8000eea:	9304      	str	r3, [sp, #16]
 8000eec:	9403      	str	r4, [sp, #12]
 8000eee:	9002      	str	r0, [sp, #8]
 8000ef0:	9101      	str	r1, [sp, #4]
 8000ef2:	9200      	str	r2, [sp, #0]
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <formatDateTime+0x54>)
 8000ef8:	213c      	movs	r1, #60	; 0x3c
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f004 fdde 	bl	8005abc <sniprintf>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bdb0      	pop	{r4, r5, r7, pc}
 8000f08:	080070a4 	.word	0x080070a4

08000f0c <parseEvent>:

/*
 *
 */
void parseEvent(char data[UART_MESSAGE_BODY_SIZE], CalendarEvent* event)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	// parse start year
	event->start.year = atoi(strtok(data, ";"));
 8000f16:	494a      	ldr	r1, [pc, #296]	; (8001040 <parseEvent+0x134>)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f004 fe17 	bl	8005b4c <strtok>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fd87 	bl	8005a34 <atoi>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	701a      	strb	r2, [r3, #0]

	// parse start month
	event->start.month = atoi(strtok(NULL, ";"));
 8000f2e:	4944      	ldr	r1, [pc, #272]	; (8001040 <parseEvent+0x134>)
 8000f30:	2000      	movs	r0, #0
 8000f32:	f004 fe0b 	bl	8005b4c <strtok>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 fd7b 	bl	8005a34 <atoi>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	705a      	strb	r2, [r3, #1]

	// parse start date
	event->start.day = atoi(strtok(NULL, ";"));
 8000f46:	493e      	ldr	r1, [pc, #248]	; (8001040 <parseEvent+0x134>)
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f004 fdff 	bl	8005b4c <strtok>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fd6f 	bl	8005a34 <atoi>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	709a      	strb	r2, [r3, #2]

	// parse start hour
	event->start.hour = atoi(strtok(NULL, ";"));
 8000f5e:	4938      	ldr	r1, [pc, #224]	; (8001040 <parseEvent+0x134>)
 8000f60:	2000      	movs	r0, #0
 8000f62:	f004 fdf3 	bl	8005b4c <strtok>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 fd63 	bl	8005a34 <atoi>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	70da      	strb	r2, [r3, #3]

	// parse start minute
	event->start.minute = atoi(strtok(NULL, ";"));
 8000f76:	4932      	ldr	r1, [pc, #200]	; (8001040 <parseEvent+0x134>)
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f004 fde7 	bl	8005b4c <strtok>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fd57 	bl	8005a34 <atoi>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	711a      	strb	r2, [r3, #4]

	// parse start second
	event->start.second = atoi(strtok(NULL, ";"));
 8000f8e:	492c      	ldr	r1, [pc, #176]	; (8001040 <parseEvent+0x134>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f004 fddb 	bl	8005b4c <strtok>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 fd4b 	bl	8005a34 <atoi>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	715a      	strb	r2, [r3, #5]

	// parse end year
	event->end.year = atoi(strtok(NULL, ";"));
 8000fa6:	4926      	ldr	r1, [pc, #152]	; (8001040 <parseEvent+0x134>)
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f004 fdcf 	bl	8005b4c <strtok>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 fd3f 	bl	8005a34 <atoi>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	731a      	strb	r2, [r3, #12]

	// parse end month
	event->end.month = atoi(strtok(NULL, ";"));
 8000fbe:	4920      	ldr	r1, [pc, #128]	; (8001040 <parseEvent+0x134>)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f004 fdc3 	bl	8005b4c <strtok>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 fd33 	bl	8005a34 <atoi>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	735a      	strb	r2, [r3, #13]

	// parse end date
	event->end.day = atoi(strtok(NULL, ";"));
 8000fd6:	491a      	ldr	r1, [pc, #104]	; (8001040 <parseEvent+0x134>)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f004 fdb7 	bl	8005b4c <strtok>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 fd27 	bl	8005a34 <atoi>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	739a      	strb	r2, [r3, #14]

	// parse end hour
	event->end.hour = atoi(strtok(NULL, ";"));
 8000fee:	4914      	ldr	r1, [pc, #80]	; (8001040 <parseEvent+0x134>)
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f004 fdab 	bl	8005b4c <strtok>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 fd1b 	bl	8005a34 <atoi>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b2da      	uxtb	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	73da      	strb	r2, [r3, #15]

	// parse end minute
	event->end.minute = atoi(strtok(NULL, ";"));
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <parseEvent+0x134>)
 8001008:	2000      	movs	r0, #0
 800100a:	f004 fd9f 	bl	8005b4c <strtok>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fd0f 	bl	8005a34 <atoi>
 8001016:	4603      	mov	r3, r0
 8001018:	b2da      	uxtb	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	741a      	strb	r2, [r3, #16]

	// parse end second
	event->end.second = atoi(strtok(NULL, ";"));
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <parseEvent+0x134>)
 8001020:	2000      	movs	r0, #0
 8001022:	f004 fd93 	bl	8005b4c <strtok>
 8001026:	4603      	mov	r3, r0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fd03 	bl	8005a34 <atoi>
 800102e:	4603      	mov	r3, r0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	745a      	strb	r2, [r3, #17]
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	080070a0 	.word	0x080070a0

08001044 <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 fa5f 	bl	8001510 <com_transport_init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d007      	beq.n	8001068 <com_session_init+0x24>
	{
		_sessionOpen = false;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <com_session_init+0x30>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <com_session_init+0x34>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		return true;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <com_session_init+0x26>
	}

	else
	{
		return false;
 8001068:	2300      	movs	r3, #0
	}
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001b8 	.word	0x200001b8
 8001078:	200001b9 	.word	0x200001b9

0800107c <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <start_session+0x48>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d016      	beq.n	80010b8 <start_session+0x3c>
	{
		if (!_sessionOpen)
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <start_session+0x4c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00d      	beq.n	80010b4 <start_session+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	f000 f860 	bl	8001160 <_handshake>
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <start_session+0x34>
				_sessionOpen = true;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <start_session+0x4c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	e002      	b.n	80010ba <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e000      	b.n	80010ba <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80010b8:	2303      	movs	r3, #3
	}
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001b9 	.word	0x200001b9
 80010c8:	200001b8 	.word	0x200001b8

080010cc <session_cycle>:

/*
 *
 */
SESSION_STATUS session_cycle(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if (_sessionInit)
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <session_cycle+0x28>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d009      	beq.n	80010ec <session_cycle+0x20>
	{
		if (_sessionOpen)
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <session_cycle+0x2c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <session_cycle+0x1c>
		{
			return _session_cycle();
 80010e0:	f000 f926 	bl	8001330 <_session_cycle>
 80010e4:	4603      	mov	r3, r0
 80010e6:	e002      	b.n	80010ee <session_cycle+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 80010e8:	2304      	movs	r3, #4
 80010ea:	e000      	b.n	80010ee <session_cycle+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 80010ec:	2303      	movs	r3, #3
	}
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001b9 	.word	0x200001b9
 80010f8:	200001b8 	.word	0x200001b8

080010fc <tell>:

/*
 *
 */
SESSION_STATUS tell(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	TRANSPORT_STATUS transportStatus;

	if (_sessionInit)
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <tell+0x5c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01f      	beq.n	800114e <tell+0x52>
	{
		if (_sessionOpen)
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <tell+0x60>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d019      	beq.n	800114a <tell+0x4e>
		{
			// enqueue message
			if (queue_tx(header, body) != TRANSPORT_OKAY)
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fa17 	bl	800154c <queue_tx>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <tell+0x2c>
			{
				return SESSION_BUSY;
 8001124:	2305      	movs	r3, #5
 8001126:	e013      	b.n	8001150 <tell+0x54>
			}

			// send message
			transportStatus = tx(TX_TIMEOUT_MS);
 8001128:	2064      	movs	r0, #100	; 0x64
 800112a:	f000 fa6d 	bl	8001608 <tx>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]

			if (transportStatus == TRANSPORT_OKAY)
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <tell+0x40>
			{
				return SESSION_OKAY;
 8001138:	2300      	movs	r3, #0
 800113a:	e009      	b.n	8001150 <tell+0x54>
			}
			else if (transportStatus == TRANSPORT_TIMEOUT)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <tell+0x4a>
			{
				return SESSION_TIMEOUT;
 8001142:	2301      	movs	r3, #1
 8001144:	e004      	b.n	8001150 <tell+0x54>
			}
			else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
			{
				return SESSION_ERROR;
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <tell+0x54>
			}
		}

		else
		{
			return SESSION_NOT_OPEN;
 800114a:	2304      	movs	r3, #4
 800114c:	e000      	b.n	8001150 <tell+0x54>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 800114e:	2303      	movs	r3, #3
	}
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001b9 	.word	0x200001b9
 800115c:	200001b8 	.word	0x200001b8

08001160 <_handshake>:

/*
 *
 */
SESSION_STATUS _handshake(unsigned int timeout_ms)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	; 0x50
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 8001172:	2300      	movs	r3, #0
 8001174:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8001178:	2300      	movs	r3, #0
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fc8f 	bl	8005aac <memset>

	while (!success && !error)
 800118e:	e0a2      	b.n	80012d6 <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 8001190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <_handshake+0x44>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 fa70 	bl	800167c <rx>
 800119c:	4603      	mov	r3, r0
 800119e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80011a2:	e063      	b.n	800126c <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 80011a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10b      	bne.n	80011c2 <_handshake+0x62>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 80011aa:	f107 0208 	add.w	r2, r7, #8
 80011ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f9ef 	bl	8001598 <dequeue_rx>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80011c0:	e054      	b.n	800126c <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 80011c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d10d      	bne.n	80011e4 <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 80011c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011cc:	2204      	movs	r2, #4
 80011ce:	4955      	ldr	r1, [pc, #340]	; (8001324 <_handshake+0x1c4>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fca7 	bl	8005b24 <strncmp>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d047      	beq.n	800126c <_handshake+0x10c>
			{
				error = true;
 80011dc:	2301      	movs	r3, #1
 80011de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80011e2:	e043      	b.n	800126c <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 80011e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d110      	bne.n	800120c <_handshake+0xac>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	223c      	movs	r2, #60	; 0x3c
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fc5a 	bl	8005aac <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4619      	mov	r1, r3
 80011fe:	484a      	ldr	r0, [pc, #296]	; (8001328 <_handshake+0x1c8>)
 8001200:	f000 f9a4 	bl	800154c <queue_tx>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800120a:	e02f      	b.n	800126c <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 800120c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800120e:	2b04      	cmp	r3, #4
 8001210:	d106      	bne.n	8001220 <_handshake+0xc0>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 8001212:	2064      	movs	r0, #100	; 0x64
 8001214:	f000 f9f8 	bl	8001608 <tx>
 8001218:	4603      	mov	r3, r0
 800121a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800121e:	e025      	b.n	800126c <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8001220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001222:	2b05      	cmp	r3, #5
 8001224:	d106      	bne.n	8001234 <_handshake+0xd4>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 8001226:	20fa      	movs	r0, #250	; 0xfa
 8001228:	f000 fa28 	bl	800167c <rx>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001232:	e01b      	b.n	800126c <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 8001234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001236:	2b06      	cmp	r3, #6
 8001238:	d10b      	bne.n	8001252 <_handshake+0xf2>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 800123a:	f107 0208 	add.w	r2, r7, #8
 800123e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f9a7 	bl	8001598 <dequeue_rx>
 800124a:	4603      	mov	r3, r0
 800124c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001250:	e00c      	b.n	800126c <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 8001252:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001256:	2204      	movs	r2, #4
 8001258:	4934      	ldr	r1, [pc, #208]	; (800132c <_handshake+0x1cc>)
 800125a:	4618      	mov	r0, r3
 800125c:	f004 fc62 	bl	8005b24 <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <_handshake+0x10c>
			{
				error = true;
 8001266:	2301      	movs	r3, #1
 8001268:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 800126c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001270:	2b00      	cmp	r3, #0
 8001272:	d12d      	bne.n	80012d0 <_handshake+0x170>
		{
			if (state == 0)
 8001274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <_handshake+0x120>
				state = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800127e:	e02a      	b.n	80012d6 <_handshake+0x176>
			else if (state == 1)
 8001280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d102      	bne.n	800128c <_handshake+0x12c>
				state = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800128a:	e024      	b.n	80012d6 <_handshake+0x176>
			else if (state == 2)
 800128c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800128e:	2b02      	cmp	r3, #2
 8001290:	d102      	bne.n	8001298 <_handshake+0x138>
				state = 3;
 8001292:	2303      	movs	r3, #3
 8001294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001296:	e01e      	b.n	80012d6 <_handshake+0x176>
			else if (state == 3)
 8001298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129a:	2b03      	cmp	r3, #3
 800129c:	d102      	bne.n	80012a4 <_handshake+0x144>
				state = 4;
 800129e:	2304      	movs	r3, #4
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012a2:	e018      	b.n	80012d6 <_handshake+0x176>
			else if (state == 4)
 80012a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d102      	bne.n	80012b0 <_handshake+0x150>
				state = 5;
 80012aa:	2305      	movs	r3, #5
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ae:	e012      	b.n	80012d6 <_handshake+0x176>
			else if (state == 5)
 80012b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d102      	bne.n	80012bc <_handshake+0x15c>
				state = 6;
 80012b6:	2306      	movs	r3, #6
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ba:	e00c      	b.n	80012d6 <_handshake+0x176>
			else if (state == 6)
 80012bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d102      	bne.n	80012c8 <_handshake+0x168>
				state = 7;
 80012c2:	2307      	movs	r3, #7
 80012c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012c6:	e006      	b.n	80012d6 <_handshake+0x176>
			else // if (state == 7)
				success = true;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80012ce:	e002      	b.n	80012d6 <_handshake+0x176>
		}
		else
		{
			error = true;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 80012d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012da:	f083 0301 	eor.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <_handshake+0x194>
 80012e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012e8:	f083 0301 	eor.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f47f af4e 	bne.w	8001190 <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 80012f4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <_handshake+0x1ae>
 80012fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001300:	f083 0301 	eor.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 800130a:	2300      	movs	r3, #0
 800130c:	e006      	b.n	800131c <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 800130e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 800131a:	2302      	movs	r3, #2
		}
	}
}
 800131c:	4618      	mov	r0, r3
 800131e:	3750      	adds	r7, #80	; 0x50
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	080070b8 	.word	0x080070b8
 8001328:	080070c0 	.word	0x080070c0
 800132c:	080070c8 	.word	0x080070c8

08001330 <_session_cycle>:

/*
 *
 */
SESSION_STATUS _session_cycle(void)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
 8001334:	af00      	add	r7, sp, #0
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8001336:	2300      	movs	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2238      	movs	r2, #56	; 0x38
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f004 fbb0 	bl	8005aac <memset>
	SESSION_STATUS status;

	// Perform Rx message phase of session cycle.
	status = _listen();
 800134c:	f000 f858 	bl	8001400 <_listen>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 8001356:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800135a:	2b02      	cmp	r3, #2
 800135c:	d101      	bne.n	8001362 <_session_cycle+0x32>
	{
		return SESSION_ERROR;
 800135e:	2302      	movs	r3, #2
 8001360:	e03e      	b.n	80013e0 <_session_cycle+0xb0>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 8001362:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001366:	2b00      	cmp	r3, #0
 8001368:	d139      	bne.n	80013de <_session_cycle+0xae>
	{
		// dequeue received message
		dequeue_rx(messageHeader, messageBody);
 800136a:	1d3a      	adds	r2, r7, #4
 800136c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f910 	bl	8001598 <dequeue_rx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_MESSAGE_HEADER_SIZE))
 8001378:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137c:	2204      	movs	r2, #4
 800137e:	491a      	ldr	r1, [pc, #104]	; (80013e8 <_session_cycle+0xb8>)
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fbcf 	bl	8005b24 <strncmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <_session_cycle+0x64>
		{
			_sessionOpen = false;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <_session_cycle+0xbc>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e024      	b.n	80013de <_session_cycle+0xae>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_MESSAGE_HEADER_SIZE))
 8001394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001398:	2204      	movs	r2, #4
 800139a:	4915      	ldr	r1, [pc, #84]	; (80013f0 <_session_cycle+0xc0>)
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fbc1 	bl	8005b24 <strncmp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <_session_cycle+0x88>
		{
			tell(messageHeader, messageBody);
 80013a8:	1d3a      	adds	r2, r7, #4
 80013aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fea3 	bl	80010fc <tell>
 80013b6:	e012      	b.n	80013de <_session_cycle+0xae>
 80013b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <_session_cycle+0xc4>)
 80013bc:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <_session_cycle+0xc8>)
 80013c0:	461d      	mov	r5, r3
 80013c2:	1d3c      	adds	r4, r7, #4
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_session_cycle+0xcc>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
		}
	}

	return SESSION_OKAY;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3748      	adds	r7, #72	; 0x48
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	080070d0 	.word	0x080070d0
 80013ec:	200001b8 	.word	0x200001b8
 80013f0:	080070d8 	.word	0x080070d8
 80013f4:	200001bc 	.word	0x200001bc
 80013f8:	200001c0 	.word	0x200001c0
 80013fc:	200001fc 	.word	0x200001fc

08001400 <_listen>:

/*
 *
 */
SESSION_STATUS _listen(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b090      	sub	sp, #64	; 0x40
 8001404:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2238      	movs	r2, #56	; 0x38
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fb4b 	bl	8005aac <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8001416:	463b      	mov	r3, r7
 8001418:	223c      	movs	r2, #60	; 0x3c
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fb45 	bl	8005aac <memset>
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "Clear to send!\n");
 8001422:	463b      	mov	r3, r7
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <_listen+0x9c>)
 8001426:	213c      	movs	r1, #60	; 0x3c
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fb47 	bl	8005abc <sniprintf>
	transportStatus = queue_tx(CTS_HEADER, messageBody);
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <_listen+0xa0>)
 8001434:	f000 f88a 	bl	800154c <queue_tx>
 8001438:	4603      	mov	r3, r0
 800143a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 800143e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <_listen+0x4a>
	{
		return SESSION_ERROR;
 8001446:	2302      	movs	r3, #2
 8001448:	e024      	b.n	8001494 <_listen+0x94>
	}

	transportStatus = tx(TX_TIMEOUT_MS);
 800144a:	2064      	movs	r0, #100	; 0x64
 800144c:	f000 f8dc 	bl	8001608 <tx>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 8001456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 800145e:	2301      	movs	r3, #1
 8001460:	e018      	b.n	8001494 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8001462:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <_listen+0x6e>
	{
		return SESSION_ERROR;
 800146a:	2302      	movs	r3, #2
 800146c:	e012      	b.n	8001494 <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = rx(RX_TIMEOUT_MS);
 800146e:	20fa      	movs	r0, #250	; 0xfa
 8001470:	f000 f904 	bl	800167c <rx>
 8001474:	4603      	mov	r3, r0
 8001476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 800147a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 8001482:	2301      	movs	r3, #1
 8001484:	e006      	b.n	8001494 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8001486:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <_listen+0x92>
	{
		return SESSION_ERROR;
 800148e:	2302      	movs	r3, #2
 8001490:	e000      	b.n	8001494 <_listen+0x94>
	}

	return SESSION_OKAY;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3740      	adds	r7, #64	; 0x40
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	080070e0 	.word	0x080070e0
 80014a0:	080070f0 	.word	0x080070f0

080014a4 <getCommand>:

/*
 *
 */
SESSION_STATUS getCommand(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	if (_messageReady)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <getCommand+0x60>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d020      	beq.n	80014f8 <getCommand+0x54>
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <getCommand+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(header, _messageCommand, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
		memcpy(body, _messageData, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <getCommand+0x68>)
 80014c2:	4614      	mov	r4, r2
 80014c4:	469c      	mov	ip, r3
 80014c6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014ca:	4665      	mov	r5, ip
 80014cc:	4626      	mov	r6, r4
 80014ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d0:	6028      	str	r0, [r5, #0]
 80014d2:	6069      	str	r1, [r5, #4]
 80014d4:	60aa      	str	r2, [r5, #8]
 80014d6:	60eb      	str	r3, [r5, #12]
 80014d8:	3410      	adds	r4, #16
 80014da:	f10c 0c10 	add.w	ip, ip, #16
 80014de:	4574      	cmp	r4, lr
 80014e0:	d1f3      	bne.n	80014ca <getCommand+0x26>
 80014e2:	4665      	mov	r5, ip
 80014e4:	4623      	mov	r3, r4
 80014e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014e8:	6028      	str	r0, [r5, #0]
 80014ea:	6069      	str	r1, [r5, #4]
 80014ec:	60aa      	str	r2, [r5, #8]
		_messageReady = false;
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <getCommand+0x60>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]

		return SESSION_OKAY;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e000      	b.n	80014fa <getCommand+0x56>
	}

	else
	{
		return SESSION_ERROR;
 80014f8:	2302      	movs	r3, #2
	}
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001502:	bf00      	nop
 8001504:	200001fc 	.word	0x200001fc
 8001508:	200001bc 	.word	0x200001bc
 800150c:	200001c0 	.word	0x200001c0

08001510 <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00a      	beq.n	8001534 <com_transport_init+0x24>
	{
		_uartHandle = huart;
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <com_transport_init+0x30>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <com_transport_init+0x34>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <com_transport_init+0x38>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
		return true;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <com_transport_init+0x26>
	}

	else
	{
		return false;
 8001534:	2300      	movs	r3, #0
	}
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000200 	.word	0x20000200
 8001544:	20000284 	.word	0x20000284
 8001548:	20000285 	.word	0x20000285

0800154c <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <queue_tx+0x40>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d010      	beq.n	8001580 <queue_tx+0x34>
	{
		if (_txBuffer_full)
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <queue_tx+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 8001568:	2304      	movs	r3, #4
 800156a:	e00a      	b.n	8001582 <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <queue_tx+0x48>)
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fbc1 	bl	8000cf8 <composeMessage>
			_txBuffer_full = true;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <queue_tx+0x44>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001580:	2308      	movs	r3, #8
	}
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000200 	.word	0x20000200
 8001590:	20000284 	.word	0x20000284
 8001594:	20000204 	.word	0x20000204

08001598 <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b092      	sub	sp, #72	; 0x48
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <dequeue_rx+0x64>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d023      	beq.n	80015f2 <dequeue_rx+0x5a>
	{
		if (!_rxBuffer_full)
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <dequeue_rx+0x68>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 80015ba:	2306      	movs	r3, #6
 80015bc:	e01a      	b.n	80015f4 <dequeue_rx+0x5c>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <dequeue_rx+0x6c>)
 80015c0:	f107 0408 	add.w	r4, r7, #8
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <dequeue_rx+0x68>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	461a      	mov	r2, r3
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fb9b 	bl	8000d24 <decomposeMessage>

			return TRANSPORT_OKAY;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <dequeue_rx+0x5c>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80015f2:	2308      	movs	r3, #8
	}
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3748      	adds	r7, #72	; 0x48
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	20000200 	.word	0x20000200
 8001600:	20000285 	.word	0x20000285
 8001604:	20000244 	.word	0x20000244

08001608 <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <tx+0x68>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d026      	beq.n	8001666 <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <tx+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 8001628:	2305      	movs	r3, #5
 800162a:	e01d      	b.n	8001668 <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <tx+0x68>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2240      	movs	r2, #64	; 0x40
 8001634:	4910      	ldr	r1, [pc, #64]	; (8001678 <tx+0x70>)
 8001636:	f003 fb87 	bl	8004d48 <HAL_UART_Transmit>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <tx+0x40>
		{
			return TRANSPORT_ERROR;
 8001644:	2302      	movs	r3, #2
 8001646:	e00f      	b.n	8001668 <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d101      	bne.n	8001652 <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 800164e:	2301      	movs	r3, #1
 8001650:	e00a      	b.n	8001668 <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d101      	bne.n	800165c <tx+0x54>
		{
			return TRANSPORT_BUSY;
 8001658:	2303      	movs	r3, #3
 800165a:	e005      	b.n	8001668 <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <tx+0x6c>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8001666:	2308      	movs	r3, #8
	}
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000200 	.word	0x20000200
 8001674:	20000284 	.word	0x20000284
 8001678:	20000204 	.word	0x20000204

0800167c <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <rx+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <rx+0x68>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 8001696:	2307      	movs	r3, #7
 8001698:	e01d      	b.n	80016d6 <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <rx+0x64>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2240      	movs	r2, #64	; 0x40
 80016a2:	4911      	ldr	r1, [pc, #68]	; (80016e8 <rx+0x6c>)
 80016a4:	f003 fbd6 	bl	8004e54 <HAL_UART_Receive>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 80016b2:	2302      	movs	r3, #2
 80016b4:	e00f      	b.n	80016d6 <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d101      	bne.n	80016c0 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 80016bc:	2301      	movs	r3, #1
 80016be:	e00a      	b.n	80016d6 <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d101      	bne.n	80016ca <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e005      	b.n	80016d6 <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <rx+0x68>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e000      	b.n	80016d6 <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80016d4:	2308      	movs	r3, #8
	}
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000200 	.word	0x20000200
 80016e4:	20000285 	.word	0x20000285
 80016e8:	20000244 	.word	0x20000244

080016ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001710:	68fb      	ldr	r3, [r7, #12]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d101      	bne.n	8001738 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	43db      	mvns	r3, r3
 8001756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800175a:	4013      	ands	r3, r2
 800175c:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8001772:	2002      	movs	r0, #2
 8001774:	f7ff ffd2 	bl	800171c <LL_AHB2_GRP1_IsEnabledClock>
 8001778:	4603      	mov	r3, r0
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <activate_led+0x60>)
 800177c:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <activate_led+0x60>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2002      	movs	r0, #2
 8001788:	f7ff ffb0 	bl	80016ec <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <activate_led+0x64>)
 80017b0:	f001 f80c 	bl	80027cc <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	2201      	movs	r2, #1
 80017b8:	4619      	mov	r1, r3
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <activate_led+0x64>)
 80017bc:	f001 fa34 	bl	8002c28 <HAL_GPIO_WritePin>
}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000288 	.word	0x20000288
 80017cc:	48000400 	.word	0x48000400

080017d0 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	4809      	ldr	r0, [pc, #36]	; (8001808 <deactivate_led+0x38>)
 80017e2:	f001 fa21 	bl	8002c28 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <deactivate_led+0x38>)
 80017ec:	f001 f94e 	bl	8002a8c <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <deactivate_led+0x3c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80017f8:	2002      	movs	r0, #2
 80017fa:	f7ff ffa3 	bl	8001744 <LL_AHB2_GRP1_DisableClock>
  }
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	48000400 	.word	0x48000400
 800180c:	20000288 	.word	0x20000288

08001810 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f023 0218 	bic.w	r2, r3, #24
 8001824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4313      	orrs	r3, r2
 800182c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <LL_AHB2_GRP1_EnableClock>:
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4313      	orrs	r3, r2
 8001850:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4013      	ands	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8001872:	f7fe ffe9 	bl	8000848 <calendar_AlarmA_ISR>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <event_start>:

void event_start(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
	activate_led(GPIO_PIN_15);
 8001882:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001886:	f7ff ff6f 	bl	8001768 <activate_led>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}

0800188e <event_end>:

void event_end(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
	deactivate_led(GPIO_PIN_15);
 8001892:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001896:	f7ff ff9b 	bl	80017d0 <deactivate_led>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09a      	sub	sp, #104	; 0x68
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a6:	f000 fe0f 	bl	80024c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018aa:	f000 f8b9 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ae:	f000 fa09 	bl	8001cc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018b2:	f000 f9b1 	bl	8001c18 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80018b6:	f000 f911 	bl	8001adc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f001 f9f4 	bl	8002ca8 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 80018c0:	4852      	ldr	r0, [pc, #328]	; (8001a0c <main+0x16c>)
 80018c2:	f7ff fbbf 	bl	8001044 <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 80018c6:	4852      	ldr	r0, [pc, #328]	; (8001a10 <main+0x170>)
 80018c8:	f7fe fe32 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 80018cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 80018d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018de:	f7fe fea5 	bl	800062c <calendar_setDateTime>

  // start calendar
//  calendar_start();

  // begin listening for messages from desktop
  if (start_session() == SESSION_OKAY)
 80018e2:	f7ff fbcb 	bl	800107c <start_session>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <main+0x54>
  {
	  activate_led(GREEN_LED);
 80018ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018f0:	f7ff ff3a 	bl	8001768 <activate_led>
  }

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  AppActions commandCode;
  DateTime newDateTime = {0};
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	809a      	strh	r2, [r3, #4]
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 80018fe:	f7fe fedf 	bl	80006c0 <calendar_handleAlarm>

	  // try to open connection if not present
	  if (start_session() == SESSION_OKAY)
 8001902:	f7ff fbbb 	bl	800107c <start_session>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d103      	bne.n	8001914 <main+0x74>
	  {
		  activate_led(GREEN_LED);
 800190c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001910:	f7ff ff2a 	bl	8001768 <activate_led>
	  }

	  // if message present, handle message
	  if (session_cycle() != SESSION_OKAY)
 8001914:	f7ff fbda 	bl	80010cc <session_cycle>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <main+0x86>
	  {
		  activate_led(RED_LED);
 800191e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001922:	f7ff ff21 	bl	8001768 <activate_led>
	  }

	  // get command if present
	  if (getCommand(messageHeader, messageBody) == SESSION_OKAY)
 8001926:	f107 0220 	add.w	r2, r7, #32
 800192a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fdb7 	bl	80014a4 <getCommand>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e0      	bne.n	80018fe <main+0x5e>
	  {
		  // execute command
		  commandCode = code_to_appActions(messageHeader);
 800193c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fa05 	bl	8000d50 <code_to_appActions>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  // set date/time
		  if (commandCode == SET_CALENDAR_DATETIME)
 800194c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10e      	bne.n	8001972 <main+0xd2>
		  {
			  parseDateTime(messageBody, &newDateTime);
 8001954:	f107 0218 	add.w	r2, r7, #24
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa54 	bl	8000e0c <parseDateTime>
			  calendar_setDateTime(newDateTime);
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	e893 0003 	ldmia.w	r3, {r0, r1}
 800196c:	f7fe fe5e 	bl	800062c <calendar_setDateTime>
 8001970:	e7c5      	b.n	80018fe <main+0x5e>
		  }

		  // get date/time
		  else if (commandCode == GET_CALENDAR_DATETIME)
 8001972:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001976:	2b02      	cmp	r3, #2
 8001978:	d117      	bne.n	80019aa <main+0x10a>
		  {
			  calendar_getDateTime(&newDateTime);
 800197a:	f107 0318 	add.w	r3, r7, #24
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fe6a 	bl	8000658 <calendar_getDateTime>
			  formatDateTime(messageBody, &newDateTime);
 8001984:	f107 0218 	add.w	r2, r7, #24
 8001988:	f107 0320 	add.w	r3, r7, #32
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa90 	bl	8000eb4 <formatDateTime>
			  memcpy(messageHeader, "ECHO", UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <main+0x174>)
 8001996:	65fb      	str	r3, [r7, #92]	; 0x5c
			  tell(messageHeader, messageBody);
 8001998:	f107 0220 	add.w	r2, r7, #32
 800199c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fbaa 	bl	80010fc <tell>
 80019a8:	e7a9      	b.n	80018fe <main+0x5e>
		  }

		  // add event
		  else if (commandCode == ADD_CALENDAR_EVENT)
 80019aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d117      	bne.n	80019e2 <main+0x142>
		  {
			  CalendarEvent tempEvent = {0};
 80019b2:	463b      	mov	r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
			  parseEvent(messageBody, &tempEvent);
 80019c2:	463a      	mov	r2, r7
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fa9e 	bl	8000f0c <parseEvent>
			  tempEvent.start_callback = &(event_start);
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <main+0x178>)
 80019d2:	60bb      	str	r3, [r7, #8]
			  tempEvent.end_callback = &(event_end);
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <main+0x17c>)
 80019d6:	617b      	str	r3, [r7, #20]
			  calendar_addEvent(&tempEvent);
 80019d8:	463b      	mov	r3, r7
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fe56 	bl	800068c <calendar_addEvent>
 80019e0:	e78d      	b.n	80018fe <main+0x5e>
		  }

		  // get/view event
		  else if (commandCode == GET_CALENDAR_EVENT)
 80019e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d089      	beq.n	80018fe <main+0x5e>
		  {

		  }

		  // remove event
		  else if (commandCode == REMOVE_CALENDAR_EVENT)
 80019ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d085      	beq.n	80018fe <main+0x5e>
		  {

		  }

		  // clear all events
		  else if (commandCode == CLEAR_CALENDAR_EVENTS)
 80019f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d081      	beq.n	80018fe <main+0x5e>
		  {

		  }

		  // start calendar
		  else if (commandCode == START_CALENDAR)
 80019fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019fe:	2b07      	cmp	r3, #7
 8001a00:	f47f af7d 	bne.w	80018fe <main+0x5e>
		  {
			  calendar_start();
 8001a04:	f7fe fdd4 	bl	80005b0 <calendar_start>
	  calendar_handleAlarm();
 8001a08:	e779      	b.n	80018fe <main+0x5e>
 8001a0a:	bf00      	nop
 8001a0c:	200002c4 	.word	0x200002c4
 8001a10:	2000028c 	.word	0x2000028c
 8001a14:	4f484345 	.word	0x4f484345
 8001a18:	0800187f 	.word	0x0800187f
 8001a1c:	0800188f 	.word	0x0800188f

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09a      	sub	sp, #104	; 0x68
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2248      	movs	r2, #72	; 0x48
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 f83c 	bl	8005aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a46:	f001 f907 	bl	8002c58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fee0 	bl	8001810 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001a6c:	232c      	movs	r3, #44	; 0x2c
 8001a6e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a70:	2381      	movs	r3, #129	; 0x81
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a74:	2301      	movs	r3, #1
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a7c:	2360      	movs	r3, #96	; 0x60
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fbcb 	bl	800322c <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a9c:	f000 f91f 	bl	8001cde <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001aa0:	236f      	movs	r3, #111	; 0x6f
 8001aa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 ff35 	bl	8003930 <HAL_RCC_ClockConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001acc:	f000 f907 	bl	8001cde <Error_Handler>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3768      	adds	r7, #104	; 0x68
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	58000400 	.word	0x58000400

08001adc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b092      	sub	sp, #72	; 0x48
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ae2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001af2:	2300      	movs	r3, #0
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	222c      	movs	r2, #44	; 0x2c
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 ffd5 	bl	8005aac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b04:	4a43      	ldr	r2, [pc, #268]	; (8001c14 <MX_RTC_Init+0x138>)
 8001b06:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b10:	227f      	movs	r2, #127	; 0x7f
 8001b12:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b26:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b32:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001b3a:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b40:	4833      	ldr	r0, [pc, #204]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b42:	f002 fbcf 	bl	80042e4 <HAL_RTC_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001b4c:	f000 f8c7 	bl	8001cde <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4619      	mov	r1, r3
 8001b72:	4827      	ldr	r0, [pc, #156]	; (8001c10 <MX_RTC_Init+0x134>)
 8001b74:	f002 fc38 	bl	80043e8 <HAL_RTC_SetTime>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001b7e:	f000 f8ae 	bl	8001cde <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481b      	ldr	r0, [pc, #108]	; (8001c10 <MX_RTC_Init+0x134>)
 8001ba4:	f002 fd1e 	bl	80045e4 <HAL_RTC_SetDate>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001bae:	f000 f896 	bl	8001cde <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2201      	movs	r2, #1
 8001be6:	4619      	mov	r1, r3
 8001be8:	4809      	ldr	r0, [pc, #36]	; (8001c10 <MX_RTC_Init+0x134>)
 8001bea:	f002 fdcf 	bl	800478c <HAL_RTC_SetAlarm_IT>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001bf4:	f000 f873 	bl	8001cde <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	202a      	movs	r0, #42	; 0x2a
 8001bfe:	f000 fdb0 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c02:	202a      	movs	r0, #42	; 0x2a
 8001c04:	f000 fdc7 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3748      	adds	r7, #72	; 0x48
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000028c 	.word	0x2000028c
 8001c14:	40002800 	.word	0x40002800

08001c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <MX_USART2_UART_Init+0xa8>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c3a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c60:	2230      	movs	r2, #48	; 0x30
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c76:	f003 f817 	bl	8004ca8 <HAL_UART_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001c80:	f000 f82d 	bl	8001cde <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c84:	2100      	movs	r1, #0
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c88:	f003 fe0b 	bl	80058a2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001c92:	f000 f824 	bl	8001cde <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c96:	2100      	movs	r1, #0
 8001c98:	4808      	ldr	r0, [pc, #32]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001c9a:	f003 fe40 	bl	800591e <HAL_UARTEx_SetRxFifoThreshold>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001ca4:	f000 f81b 	bl	8001cde <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_USART2_UART_Init+0xa4>)
 8001caa:	f003 fdc2 	bl	8005832 <HAL_UARTEx_DisableFifoMode>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8001cb4:	f000 f813 	bl	8001cde <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200002c4 	.word	0x200002c4
 8001cc0:	40004400 	.word	0x40004400

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7ff fdb6 	bl	800183a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	2004      	movs	r0, #4
 8001cd0:	f7ff fdb3 	bl	800183a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f7ff fdb0 	bl	800183a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce2:	b672      	cpsid	i
}
 8001ce4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <Error_Handler+0x8>

08001ce8 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <rtcAlarmControl_init+0x18>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000358 	.word	0x20000358

08001d04 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	4603      	mov	r3, r0
 8001d18:	71bb      	strb	r3, [r7, #6]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	717b      	strb	r3, [r7, #5]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <setDateTime+0x18c>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	b258      	sxtb	r0, r3
 8001d32:	79fa      	ldrb	r2, [r7, #7]
 8001d34:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <setDateTime+0x18c>)
 8001d36:	fba3 1302 	umull	r1, r3, r3, r2
 8001d3a:	08d9      	lsrs	r1, r3, #3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	4303      	orrs	r3, r0
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <setDateTime+0x18c>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	08db      	lsrs	r3, r3, #3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	b258      	sxtb	r0, r3
 8001d62:	79ba      	ldrb	r2, [r7, #6]
 8001d64:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <setDateTime+0x18c>)
 8001d66:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6a:	08d9      	lsrs	r1, r3, #3
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	4303      	orrs	r3, r0
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	4a42      	ldr	r2, [pc, #264]	; (8001e90 <setDateTime+0x18c>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	b258      	sxtb	r0, r3
 8001d92:	797a      	ldrb	r2, [r7, #5]
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <setDateTime+0x18c>)
 8001d96:	fba3 1302 	umull	r1, r3, r3, r2
 8001d9a:	08d9      	lsrs	r1, r3, #3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	4303      	orrs	r3, r0
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	4a35      	ldr	r2, [pc, #212]	; (8001e90 <setDateTime+0x18c>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	b258      	sxtb	r0, r3
 8001dc6:	793a      	ldrb	r2, [r7, #4]
 8001dc8:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <setDateTime+0x18c>)
 8001dca:	fba3 1302 	umull	r1, r3, r3, r2
 8001dce:	08d9      	lsrs	r1, r3, #3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	4303      	orrs	r3, r0
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8001de6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dea:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <setDateTime+0x18c>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	b258      	sxtb	r0, r3
 8001df8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <setDateTime+0x18c>)
 8001dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8001e02:	08d9      	lsrs	r1, r3, #3
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	4303      	orrs	r3, r0
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001e1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <setDateTime+0x18c>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	b258      	sxtb	r0, r3
 8001e2c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <setDateTime+0x18c>)
 8001e32:	fba3 1302 	umull	r1, r3, r3, r2
 8001e36:	08d9      	lsrs	r1, r3, #3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	4303      	orrs	r3, r0
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <setDateTime+0x190>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f107 011c 	add.w	r1, r7, #28
 8001e56:	2201      	movs	r2, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 fbc3 	bl	80045e4 <HAL_RTC_SetDate>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001e68:	e7fe      	b.n	8001e68 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <setDateTime+0x190>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f107 0108 	add.w	r1, r7, #8
 8001e72:	2201      	movs	r2, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fab7 	bl	80043e8 <HAL_RTC_SetTime>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
}
 8001e82:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001e84:	e7fe      	b.n	8001e84 <setDateTime+0x180>
  }
}
 8001e86:	bf00      	nop
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	20000358 	.word	0x20000358

08001e98 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001eba:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <getDateTime+0x124>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f107 0114 	add.w	r1, r7, #20
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fb2b 	bl	8004520 <HAL_RTC_GetTime>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001ed4:	e7fe      	b.n	8001ed4 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001ed6:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <getDateTime+0x124>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f107 0110 	add.w	r1, r7, #16
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fc05 	bl	80046f0 <HAL_RTC_GetDate>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001ef0:	e7fe      	b.n	8001ef0 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001f12:	7c7b      	ldrb	r3, [r7, #17]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	7c7b      	ldrb	r3, [r7, #17]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001f32:	7cbb      	ldrb	r3, [r7, #18]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	7cbb      	ldrb	r3, [r7, #18]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8001f52:	7d3b      	ldrb	r3, [r7, #20]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	7d3b      	ldrb	r3, [r7, #20]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8001f72:	7d7b      	ldrb	r3, [r7, #21]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	7d7b      	ldrb	r3, [r7, #21]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8001f92:	7dbb      	ldrb	r3, [r7, #22]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	7dbb      	ldrb	r3, [r7, #22]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	701a      	strb	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000358 	.word	0x20000358

08001fc0 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b08f      	sub	sp, #60	; 0x3c
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4623      	mov	r3, r4
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71bb      	strb	r3, [r7, #6]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	717b      	strb	r3, [r7, #5]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	222c      	movs	r2, #44	; 0x2c
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fd60 	bl	8005aac <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <setAlarm_A+0x130>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	b258      	sxtb	r0, r3
 8001ffc:	79fa      	ldrb	r2, [r7, #7]
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <setAlarm_A+0x130>)
 8002000:	fba3 1302 	umull	r1, r3, r3, r2
 8002004:	08d9      	lsrs	r1, r3, #3
 8002006:	460b      	mov	r3, r1
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	b25b      	sxtb	r3, r3
 8002014:	4303      	orrs	r3, r0
 8002016:	b25b      	sxtb	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <setAlarm_A+0x130>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	08db      	lsrs	r3, r3, #3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	b258      	sxtb	r0, r3
 800202e:	79ba      	ldrb	r2, [r7, #6]
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <setAlarm_A+0x130>)
 8002032:	fba3 1302 	umull	r1, r3, r3, r2
 8002036:	08d9      	lsrs	r1, r3, #3
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	b25b      	sxtb	r3, r3
 8002046:	4303      	orrs	r3, r0
 8002048:	b25b      	sxtb	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 800204e:	797b      	ldrb	r3, [r7, #5]
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <setAlarm_A+0x130>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	b258      	sxtb	r0, r3
 800205e:	797a      	ldrb	r2, [r7, #5]
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <setAlarm_A+0x130>)
 8002062:	fba3 1302 	umull	r1, r3, r3, r2
 8002066:	08d9      	lsrs	r1, r3, #3
 8002068:	460b      	mov	r3, r1
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	b25b      	sxtb	r3, r3
 8002076:	4303      	orrs	r3, r0
 8002078:	b25b      	sxtb	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 800207e:	793b      	ldrb	r3, [r7, #4]
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <setAlarm_A+0x130>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	08db      	lsrs	r3, r3, #3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	b258      	sxtb	r0, r3
 800208e:	793a      	ldrb	r2, [r7, #4]
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <setAlarm_A+0x130>)
 8002092:	fba3 1302 	umull	r1, r3, r3, r2
 8002096:	08d9      	lsrs	r1, r3, #3
 8002098:	460b      	mov	r3, r1
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	4303      	orrs	r3, r0
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 80020c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <setAlarm_A+0x134>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f107 010c 	add.w	r1, r7, #12
 80020d4:	2201      	movs	r2, #1
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fb58 	bl	800478c <HAL_RTC_SetAlarm_IT>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 80020e2:	b672      	cpsid	i
}
 80020e4:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 80020e6:	e7fe      	b.n	80020e6 <setAlarm_A+0x126>
  }
}
 80020e8:	bf00      	nop
 80020ea:	373c      	adds	r7, #60	; 0x3c
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	cccccccd 	.word	0xcccccccd
 80020f4:	20000358 	.word	0x20000358

080020f8 <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <diableAlarm_A+0x24>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fc4d 	bl	80049a4 <HAL_RTC_DeactivateAlarm>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 8002114:	e7fe      	b.n	8002114 <diableAlarm_A+0x1c>
	}
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000358 	.word	0x20000358

08002120 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <LL_AHB2_GRP1_EnableClock>:
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800214e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4313      	orrs	r3, r2
 8002156:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002164:	68fb      	ldr	r3, [r7, #12]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800217e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b090      	sub	sp, #64	; 0x40
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	2238      	movs	r2, #56	; 0x38
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fc75 	bl	8005aac <memset>
  if(hrtc->Instance==RTC)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_RTC_MspInit+0x54>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d115      	bne.n	80021f8 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 ff67 	bl	80040b0 <HAL_RCCEx_PeriphCLKConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021e8:	f7ff fd79 	bl	8001cde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ec:	f7ff ff98 	bl	8002120 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021f4:	f7ff ffbc 	bl	8002170 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3740      	adds	r7, #64	; 0x40
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40002800 	.word	0x40002800

08002204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b096      	sub	sp, #88	; 0x58
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2238      	movs	r2, #56	; 0x38
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fc41 	bl	8005aac <memset>
  if(huart->Instance==USART2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_UART_MspInit+0x88>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d126      	bne.n	8002282 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002234:	2302      	movs	r3, #2
 8002236:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002238:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800223c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	4618      	mov	r0, r3
 8002244:	f001 ff34 	bl	80040b0 <HAL_RCCEx_PeriphCLKConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800224e:	f7ff fd46 	bl	8001cde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002252:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002256:	f7ff ff8b 	bl	8002170 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff ff70 	bl	8002140 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002260:	230c      	movs	r3, #12
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002270:	2307      	movs	r3, #7
 8002272:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002278:	4619      	mov	r1, r3
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227e:	f000 faa5 	bl	80027cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002282:	bf00      	nop
 8002284:	3758      	adds	r7, #88	; 0x58
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40004400 	.word	0x40004400

08002290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <NMI_Handler+0x4>

08002296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <MemManage_Handler+0x4>

080022a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <BusFault_Handler+0x4>

080022a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <UsageFault_Handler+0x4>

080022ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d6:	f000 f951 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <RTC_Alarm_IRQHandler+0x10>)
 80022e6:	f002 fbb9 	bl	8004a5c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000028c 	.word	0x2000028c

080022f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return 1;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <_kill>:

int _kill(int pid, int sig)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800230c:	f003 fb96 	bl	8005a3c <__errno>
 8002310:	4603      	mov	r3, r0
 8002312:	2216      	movs	r2, #22
 8002314:	601a      	str	r2, [r3, #0]
  return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_exit>:

void _exit (int status)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800232a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffe7 	bl	8002302 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002334:	e7fe      	b.n	8002334 <_exit+0x12>

08002336 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e00a      	b.n	800235e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002348:	f3af 8000 	nop.w
 800234c:	4601      	mov	r1, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	60ba      	str	r2, [r7, #8]
 8002354:	b2ca      	uxtb	r2, r1
 8002356:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3301      	adds	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	dbf0      	blt.n	8002348 <_read+0x12>
  }

  return len;
 8002366:	687b      	ldr	r3, [r7, #4]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e009      	b.n	8002396 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	60ba      	str	r2, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	dbf1      	blt.n	8002382 <_write+0x12>
  }
  return len;
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_close>:

int _close(int file)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ce:	605a      	str	r2, [r3, #4]
  return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <_isatty>:

int _isatty(int file)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f003 fb00 	bl	8005a3c <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20008000 	.word	0x20008000
 8002468:	00000400 	.word	0x00000400
 800246c:	2000035c 	.word	0x2000035c
 8002470:	20000378 	.word	0x20000378

08002474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002476:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002478:	f7fe f854 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <LoopForever+0xe>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <LoopForever+0x16>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024a2:	f003 fad1 	bl	8005a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a6:	f7ff f9fb 	bl	80018a0 <main>

080024aa <LoopForever>:

LoopForever:
    b LoopForever
 80024aa:	e7fe      	b.n	80024aa <LoopForever>
  ldr   r0, =_estack
 80024ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024b8:	08007434 	.word	0x08007434
  ldr r2, =_sbss
 80024bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024c0:	20000374 	.word	0x20000374

080024c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>
	...

080024c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f000 f93a 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024d8:	f001 fc0c 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_Init+0x3c>)
 80024e0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f810 	bl	8002508 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	e001      	b.n	80024f8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f4:	f7ff fe54 	bl	80021a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f8:	79fb      	ldrb	r3, [r7, #7]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_InitTick+0x6c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d024      	beq.n	8002566 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800251c:	f001 fbea 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_InitTick+0x6c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f93c 	bl	80027b2 <HAL_SYSTICK_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10f      	bne.n	8002560 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	d809      	bhi.n	800255a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002546:	2200      	movs	r2, #0
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254e:	f000 f908 	bl	8002762 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <HAL_InitTick+0x70>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e007      	b.n	800256a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e004      	b.n	800256a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e001      	b.n	800256a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000010 	.word	0x20000010
 8002578:	2000000c 	.word	0x2000000c

0800257c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_IncTick+0x1c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_IncTick+0x20>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_IncTick+0x20>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000010 	.word	0x20000010
 800259c:	20000360 	.word	0x20000360

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <HAL_GetTick+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000360 	.word	0x20000360

080025b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4906      	ldr	r1, [pc, #24]	; (800264c <__NVIC_EnableIRQ+0x34>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100

08002650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	2b00      	cmp	r3, #0
 8002662:	db0a      	blt.n	800267a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	490c      	ldr	r1, [pc, #48]	; (800269c <__NVIC_SetPriority+0x4c>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	440b      	add	r3, r1
 8002674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002678:	e00a      	b.n	8002690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4908      	ldr	r1, [pc, #32]	; (80026a0 <__NVIC_SetPriority+0x50>)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	3b04      	subs	r3, #4
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	440b      	add	r3, r1
 800268e:	761a      	strb	r2, [r3, #24]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f1c3 0307 	rsb	r3, r3, #7
 80026be:	2b04      	cmp	r3, #4
 80026c0:	bf28      	it	cs
 80026c2:	2304      	movcs	r3, #4
 80026c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d902      	bls.n	80026d4 <NVIC_EncodePriority+0x30>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3b03      	subs	r3, #3
 80026d2:	e000      	b.n	80026d6 <NVIC_EncodePriority+0x32>
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	401a      	ands	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43d9      	mvns	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	4313      	orrs	r3, r2
         );
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800272c:	f7ff ff90 	bl	8002650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff2d 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff44 	bl	80025fc <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff92 	bl	80026a4 <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff61 	bl	8002650 <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff37 	bl	8002618 <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa4 	bl	8002708 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027da:	e140      	b.n	8002a5e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2101      	movs	r1, #1
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	4013      	ands	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8132 	beq.w	8002a58 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d005      	beq.n	800280c <HAL_GPIO_Init+0x40>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d130      	bne.n	800286e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002842:	2201      	movs	r2, #1
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 0201 	and.w	r2, r3, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b03      	cmp	r3, #3
 8002878:	d017      	beq.n	80028aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d123      	bne.n	80028fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	08da      	lsrs	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3208      	adds	r2, #8
 80028be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	220f      	movs	r2, #15
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	6939      	ldr	r1, [r7, #16]
 80028fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0203 	and.w	r2, r3, #3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 808c 	beq.w	8002a58 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002940:	4a4e      	ldr	r2, [pc, #312]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800296a:	d00d      	beq.n	8002988 <HAL_GPIO_Init+0x1bc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a44      	ldr	r2, [pc, #272]	; (8002a80 <HAL_GPIO_Init+0x2b4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <HAL_GPIO_Init+0x1b8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_GPIO_Init+0x2b8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_GPIO_Init+0x1b4>
 800297c:	2302      	movs	r3, #2
 800297e:	e004      	b.n	800298a <HAL_GPIO_Init+0x1be>
 8002980:	2307      	movs	r3, #7
 8002982:	e002      	b.n	800298a <HAL_GPIO_Init+0x1be>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_GPIO_Init+0x1be>
 8002988:	2300      	movs	r3, #0
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	f002 0203 	and.w	r2, r2, #3
 8002990:	0092      	lsls	r2, r2, #2
 8002992:	4093      	lsls	r3, r2
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800299a:	4938      	ldr	r1, [pc, #224]	; (8002a7c <HAL_GPIO_Init+0x2b0>)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80029fc:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a02:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002a22:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 8002a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a30:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <HAL_GPIO_Init+0x2bc>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f47f aeb7 	bne.w	80027dc <HAL_GPIO_Init+0x10>
  }
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	48000400 	.word	0x48000400
 8002a84:	48000800 	.word	0x48000800
 8002a88:	58000800 	.word	0x58000800

08002a8c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a9a:	e0af      	b.n	8002bfc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a2 	beq.w	8002bf6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002ab2:	4a59      	ldr	r2, [pc, #356]	; (8002c18 <HAL_GPIO_DeInit+0x18c>)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	2207      	movs	r2, #7
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_DeInit+0x6c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a4f      	ldr	r2, [pc, #316]	; (8002c1c <HAL_GPIO_DeInit+0x190>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_DeInit+0x68>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_GPIO_DeInit+0x194>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_DeInit+0x64>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e004      	b.n	8002afa <HAL_GPIO_DeInit+0x6e>
 8002af0:	2307      	movs	r3, #7
 8002af2:	e002      	b.n	8002afa <HAL_GPIO_DeInit+0x6e>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_GPIO_DeInit+0x6e>
 8002af8:	2300      	movs	r3, #0
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	f002 0203 	and.w	r2, r2, #3
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	4093      	lsls	r3, r2
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d136      	bne.n	8002b78 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002b0a:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4943      	ldr	r1, [pc, #268]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	493f      	ldr	r1, [pc, #252]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	493b      	ldr	r1, [pc, #236]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002b3c:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4937      	ldr	r1, [pc, #220]	; (8002c24 <HAL_GPIO_DeInit+0x198>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	2207      	movs	r2, #7
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b5a:	4a2f      	ldr	r2, [pc, #188]	; (8002c18 <HAL_GPIO_DeInit+0x18c>)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	482b      	ldr	r0, [pc, #172]	; (8002c18 <HAL_GPIO_DeInit+0x18c>)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	400a      	ands	r2, r1
 8002b72:	3302      	adds	r3, #2
 8002b74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2103      	movs	r1, #3
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	08d2      	lsrs	r2, r2, #3
 8002bac:	4019      	ands	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	401a      	ands	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2103      	movs	r1, #3
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f af49 	bne.w	8002a9c <HAL_GPIO_DeInit+0x10>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	48000800 	.word	0x48000800
 8002c24:	58000800 	.word	0x58000800

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	58000400 	.word	0x58000400

08002c74 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <LL_PWR_EnableBootC2+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <LL_PWR_EnableBootC2+0x18>)
 8002c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	58000400 	.word	0x58000400

08002c90 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_PWREx_GetVoltageRange+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	58000400 	.word	0x58000400

08002ca8 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002cb0:	f7ff ffe0 	bl	8002c74 <LL_PWR_EnableBootC2>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <LL_PWR_IsEnabledBkUpAccess>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ccc:	d101      	bne.n	8002cd2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	58000400 	.word	0x58000400

08002ce0 <LL_RCC_HSE_EnableTcxo>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <LL_RCC_HSE_DisableTcxo>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2a:	d101      	bne.n	8002d30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_HSE_Enable>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <LL_RCC_HSE_Disable>:
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_HSE_IsReady>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d84:	d101      	bne.n	8002d8a <LL_RCC_HSE_IsReady+0x18>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_RCC_HSE_IsReady+0x1a>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_HSI_Enable>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <LL_RCC_HSI_Disable>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <LL_RCC_HSI_IsReady>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d101      	bne.n	8002de4 <LL_RCC_HSI_IsReady+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_RCC_HSI_IsReady+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <LL_RCC_HSI_SetCalibTrimming>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_LSE_IsReady>:
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d101      	bne.n	8002e2e <LL_RCC_LSE_IsReady+0x18>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <LL_RCC_LSE_IsReady+0x1a>
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <LL_RCC_LSI_Enable>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_LSI_Disable>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_LSI_IsReady>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d101      	bne.n	8002e90 <LL_RCC_LSI_IsReady+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_RCC_LSI_IsReady+0x1a>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <LL_RCC_MSI_Enable>:
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_MSI_Disable>:
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6013      	str	r3, [r2, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_MSI_IsReady>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d101      	bne.n	8002ee8 <LL_RCC_MSI_IsReady+0x16>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_RCC_MSI_IsReady+0x18>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d101      	bne.n	8002f08 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_MSI_GetRange>:
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_SetSysClkSource>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_GetSysClkSource>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <LL_RCC_SetAHBPrescaler>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <LL_C2_RCC_SetAHBPrescaler>:
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <LL_RCC_SetAHB3Prescaler>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003004:	f023 020f 	bic.w	r2, r3, #15
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <LL_RCC_SetAPB1Prescaler>:
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <LL_RCC_SetAPB2Prescaler>:
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <LL_RCC_GetAHBPrescaler>:
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <LL_RCC_GetAHB3Prescaler>:
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <LL_RCC_GetAPB1Prescaler>:
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <LL_RCC_GetAPB2Prescaler>:
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003112:	d101      	bne.n	8003118 <LL_RCC_PLL_IsReady+0x18>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_RCC_PLL_IsReady+0x1a>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0303 	and.w	r3, r3, #3
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d101      	bne.n	8003194 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b2:	d101      	bne.n	80031b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d101      	bne.n	80031dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80031ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f8:	d101      	bne.n	80031fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321a:	d101      	bne.n	8003220 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
	...

0800322c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e36f      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323e:	f7ff fea6 	bl	8002f8e <LL_RCC_GetSysClkSource>
 8003242:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003244:	f7ff ff8f 	bl	8003166 <LL_RCC_PLL_GetMainSource>
 8003248:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80c4 	beq.w	80033e0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_RCC_OscConfig+0x3e>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d176      	bne.n	8003352 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d173      	bne.n	8003352 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e353      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_OscConfig+0x68>
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003292:	e006      	b.n	80032a2 <HAL_RCC_OscConfig+0x76>
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d222      	bcs.n	80032ec <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fd5a 	bl	8003d64 <RCC_SetFlashLatencyFromMSIRange>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e331      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fe2b 	bl	8002f40 <LL_RCC_MSI_SetCalibTrimming>
 80032ea:	e021      	b.n	8003330 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fe12 	bl	8002f40 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fd1f 	bl	8003d64 <RCC_SetFlashLatencyFromMSIRange>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e2f6      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003330:	f000 fce0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003334:	4603      	mov	r3, r0
 8003336:	4aa7      	ldr	r2, [pc, #668]	; (80035d4 <HAL_RCC_OscConfig+0x3a8>)
 8003338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800333a:	4ba7      	ldr	r3, [pc, #668]	; (80035d8 <HAL_RCC_OscConfig+0x3ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff f8e2 	bl	8002508 <HAL_InitTick>
 8003344:	4603      	mov	r3, r0
 8003346:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d047      	beq.n	80033de <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	e2e5      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800335a:	f7ff fd9e 	bl	8002e9a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800335e:	f7ff f91f 	bl	80025a0 <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003366:	f7ff f91b 	bl	80025a0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e2d2      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003378:	f7ff fdab 	bl	8002ed2 <LL_RCC_MSI_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f1      	beq.n	8003366 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fdc7 	bl	8002f40 <LL_RCC_MSI_SetCalibTrimming>
 80033b2:	e015      	b.n	80033e0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033b4:	f7ff fd7f 	bl	8002eb6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033b8:	f7ff f8f2 	bl	80025a0 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033c0:	f7ff f8ee 	bl	80025a0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e2a5      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80033d2:	f7ff fd7e 	bl	8002ed2 <LL_RCC_MSI_IsReady>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f1      	bne.n	80033c0 <HAL_RCC_OscConfig+0x194>
 80033dc:	e000      	b.n	80033e0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033de:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d058      	beq.n	800349e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x1d2>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d108      	bne.n	800340a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d14b      	bne.n	800349e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e289      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d102      	bne.n	8003430 <HAL_RCC_OscConfig+0x204>
 800342a:	f7ff fc86 	bl	8002d3a <LL_RCC_HSE_Enable>
 800342e:	e00d      	b.n	800344c <HAL_RCC_OscConfig+0x220>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003438:	d104      	bne.n	8003444 <HAL_RCC_OscConfig+0x218>
 800343a:	f7ff fc51 	bl	8002ce0 <LL_RCC_HSE_EnableTcxo>
 800343e:	f7ff fc7c 	bl	8002d3a <LL_RCC_HSE_Enable>
 8003442:	e003      	b.n	800344c <HAL_RCC_OscConfig+0x220>
 8003444:	f7ff fc87 	bl	8002d56 <LL_RCC_HSE_Disable>
 8003448:	f7ff fc58 	bl	8002cfc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff f8a4 	bl	80025a0 <HAL_GetTick>
 8003458:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7ff f8a0 	bl	80025a0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e257      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800346e:	f7ff fc80 	bl	8002d72 <LL_RCC_HSE_IsReady>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f1      	beq.n	800345c <HAL_RCC_OscConfig+0x230>
 8003478:	e011      	b.n	800349e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7ff f891 	bl	80025a0 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003482:	f7ff f88d 	bl	80025a0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	; 0x64
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e244      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003494:	f7ff fc6d 	bl	8002d72 <LL_RCC_HSE_IsReady>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f1      	bne.n	8003482 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d046      	beq.n	8003538 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_OscConfig+0x290>
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d10e      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e22a      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fc8e 	bl	8002dee <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034d2:	e031      	b.n	8003538 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d019      	beq.n	8003510 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	f7ff fc5a 	bl	8002d94 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7ff f85e 	bl	80025a0 <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e8:	f7ff f85a 	bl	80025a0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e211      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80034fa:	f7ff fc67 	bl	8002dcc <LL_RCC_HSI_IsReady>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f1      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fc70 	bl	8002dee <LL_RCC_HSI_SetCalibTrimming>
 800350e:	e013      	b.n	8003538 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003510:	f7ff fc4e 	bl	8002db0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7ff f844 	bl	80025a0 <HAL_GetTick>
 8003518:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7ff f840 	bl	80025a0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1f7      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800352e:	f7ff fc4d 	bl	8002dcc <LL_RCC_HSI_IsReady>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f1      	bne.n	800351c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d06e      	beq.n	8003622 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d056      	beq.n	80035fa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003554:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	429a      	cmp	r2, r3
 8003562:	d031      	beq.n	80035c8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e1d0      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003586:	f7ff fc67 	bl	8002e58 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800358a:	f7ff f809 	bl	80025a0 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7ff f805 	bl	80025a0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b11      	cmp	r3, #17
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e1bc      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80035a4:	f7ff fc68 	bl	8002e78 <LL_RCC_LSI_IsReady>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f1      	bne.n	8003592 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	f023 0210 	bic.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c8:	f7ff fc36 	bl	8002e38 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fe ffe8 	bl	80025a0 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80035d2:	e00c      	b.n	80035ee <HAL_RCC_OscConfig+0x3c2>
 80035d4:	20000000 	.word	0x20000000
 80035d8:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fe ffe0 	bl	80025a0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e197      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80035ee:	f7ff fc43 	bl	8002e78 <LL_RCC_LSI_IsReady>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f1      	beq.n	80035dc <HAL_RCC_OscConfig+0x3b0>
 80035f8:	e013      	b.n	8003622 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fa:	f7ff fc2d 	bl	8002e58 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe ffcf 	bl	80025a0 <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003606:	f7fe ffcb 	bl	80025a0 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b11      	cmp	r3, #17
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e182      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003618:	f7ff fc2e 	bl	8002e78 <LL_RCC_LSI_IsReady>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f1      	bne.n	8003606 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80d8 	beq.w	80037e0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003630:	f7ff fb44 	bl	8002cbc <LL_PWR_IsEnabledBkUpAccess>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d113      	bne.n	8003662 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800363a:	f7ff fb0d 	bl	8002c58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fe ffaf 	bl	80025a0 <HAL_GetTick>
 8003642:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fe ffab 	bl	80025a0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e162      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003658:	f7ff fb30 	bl	8002cbc <LL_PWR_IsEnabledBkUpAccess>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f1      	beq.n	8003646 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d07b      	beq.n	8003762 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b85      	cmp	r3, #133	; 0x85
 8003670:	d003      	beq.n	800367a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b05      	cmp	r3, #5
 8003678:	d109      	bne.n	800368e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800367a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fe ff87 	bl	80025a0 <HAL_GetTick>
 8003692:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe ff79 	bl	80025a0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e12e      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80036c0:	f7ff fba9 	bl	8002e16 <LL_RCC_LSE_IsReady>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ef      	beq.n	80036aa <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b81      	cmp	r3, #129	; 0x81
 80036d0:	d003      	beq.n	80036da <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b85      	cmp	r3, #133	; 0x85
 80036d8:	d121      	bne.n	800371e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fe ff61 	bl	80025a0 <HAL_GetTick>
 80036de:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe ff53 	bl	80025a0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e108      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800370c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ec      	beq.n	80036f6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800371c:	e060      	b.n	80037e0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe ff3f 	bl	80025a0 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe ff31 	bl	80025a0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0e6      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ec      	bne.n	800373a <HAL_RCC_OscConfig+0x50e>
 8003760:	e03e      	b.n	80037e0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003762:	f7fe ff1d 	bl	80025a0 <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe ff0f 	bl	80025a0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0c4      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ec      	bne.n	800377e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a4:	f7fe fefc 	bl	80025a0 <HAL_GetTick>
 80037a8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7fe feee 	bl	80025a0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0a3      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037d6:	f7ff fb1e 	bl	8002e16 <LL_RCC_LSE_IsReady>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ef      	bne.n	80037c0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8099 	beq.w	800391c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	2b0c      	cmp	r3, #12
 80037ee:	d06c      	beq.n	80038ca <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d14b      	bne.n	8003890 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f8:	f7ff fc74 	bl	80030e4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fed0 	bl	80025a0 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fecc 	bl	80025a0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b0a      	cmp	r3, #10
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e083      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003816:	f7ff fc73 	bl	8003100 <LL_RCC_PLL_IsReady>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f1      	bne.n	8003804 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCC_OscConfig+0x6fc>)
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003838:	0212      	lsls	r2, r2, #8
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800384c:	430a      	orrs	r2, r1
 800384e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003852:	4313      	orrs	r3, r2
 8003854:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003856:	f7ff fc37 	bl	80030c8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fe fe99 	bl	80025a0 <HAL_GetTick>
 800386e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe fe95 	bl	80025a0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b0a      	cmp	r3, #10
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e04c      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003884:	f7ff fc3c 	bl	8003100 <LL_RCC_PLL_IsReady>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f1      	beq.n	8003872 <HAL_RCC_OscConfig+0x646>
 800388e:	e045      	b.n	800391c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003890:	f7ff fc28 	bl	80030e4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe fe84 	bl	80025a0 <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fe fe80 	bl	80025a0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e037      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80038ae:	f7ff fc27 	bl	8003100 <LL_RCC_PLL_IsReady>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f1      	bne.n	800389c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCC_OscConfig+0x700>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	60cb      	str	r3, [r1, #12]
 80038c8:	e028      	b.n	800391c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e023      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0203 	and.w	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d115      	bne.n	8003918 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d10e      	bne.n	8003918 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	429a      	cmp	r2, r3
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	11c1808c 	.word	0x11c1808c
 800392c:	eefefffc 	.word	0xeefefffc

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e12c      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b98      	ldr	r3, [pc, #608]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d91b      	bls.n	800398a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b95      	ldr	r3, [pc, #596]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4993      	ldr	r1, [pc, #588]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003962:	f7fe fe1d 	bl	80025a0 <HAL_GetTick>
 8003966:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003968:	e008      	b.n	800397c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800396a:	f7fe fe19 	bl	80025a0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e110      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397c:	4b8a      	ldr	r3, [pc, #552]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d1ef      	bne.n	800396a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d016      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fb02 	bl	8002fa4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039a0:	f7fe fdfe 	bl	80025a0 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039a8:	f7fe fdfa 	bl	80025a0 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0f1      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039ba:	f7ff fbdf 	bl	800317c <LL_RCC_IsActiveFlag_HPRE>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f1      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d016      	beq.n	80039fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff faf8 	bl	8002fca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039da:	f7fe fde1 	bl	80025a0 <HAL_GetTick>
 80039de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039e2:	f7fe fddd 	bl	80025a0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0d4      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039f4:	f7ff fbd3 	bl	800319e <LL_RCC_IsActiveFlag_C2HPRE>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f1      	beq.n	80039e2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff faf0 	bl	8002ff4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a14:	f7fe fdc4 	bl	80025a0 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a1c:	f7fe fdc0 	bl	80025a0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0b7      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a2e:	f7ff fbc8 	bl	80031c2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f1      	beq.n	8003a1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fae9 	bl	8003020 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a4e:	f7fe fda7 	bl	80025a0 <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a56:	f7fe fda3 	bl	80025a0 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e09a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a68:	f7ff fbbd 	bl	80031e6 <LL_RCC_IsActiveFlag_PPRE1>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f1      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fade 	bl	8003046 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fd89 	bl	80025a0 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a92:	f7fe fd85 	bl	80025a0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e07c      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003aa4:	f7ff fbb0 	bl	8003208 <LL_RCC_IsActiveFlag_PPRE2>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f1      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d043      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d106      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003ac2:	f7ff f956 	bl	8002d72 <LL_RCC_HSE_IsReady>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11e      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e066      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ad8:	f7ff fb12 	bl	8003100 <LL_RCC_PLL_IsReady>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d113      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e05b      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003aee:	f7ff f9f0 	bl	8002ed2 <LL_RCC_MSI_IsReady>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e050      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003afc:	f7ff f966 	bl	8002dcc <LL_RCC_HSI_IsReady>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e049      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fa2a 	bl	8002f68 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b14:	f7fe fd44 	bl	80025a0 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fe fd40 	bl	80025a0 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e035      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	f7ff fa2c 	bl	8002f8e <LL_RCC_GetSysClkSource>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d1ec      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b42:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d21b      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 0207 	bic.w	r2, r3, #7
 8003b58:	4913      	ldr	r1, [pc, #76]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe fd1e 	bl	80025a0 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b68:	f7fe fd1a 	bl	80025a0 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e011      	b.n	8003b9e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x278>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1ef      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b88:	f000 f8b4 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4a07      	ldr	r2, [pc, #28]	; (8003bac <HAL_RCC_ClockConfig+0x27c>)
 8003b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <HAL_RCC_ClockConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fcb6 	bl	8002508 <HAL_InitTick>
 8003b9c:	4603      	mov	r3, r0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	58004000 	.word	0x58004000
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	2000000c 	.word	0x2000000c

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc2:	f7ff f9e4 	bl	8002f8e <LL_RCC_GetSysClkSource>
 8003bc6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc8:	f7ff facd 	bl	8003166 <LL_RCC_PLL_GetMainSource>
 8003bcc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x2c>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d139      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d136      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003be0:	f7ff f987 	bl	8002ef2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d115      	bne.n	8003c16 <HAL_RCC_GetSysClockFreq+0x62>
 8003bea:	f7ff f982 	bl	8002ef2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x4e>
 8003bf4:	f7ff f98d 	bl	8002f12 <LL_RCC_MSI_GetRange>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	e005      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x5a>
 8003c02:	f7ff f991 	bl	8002f28 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c06:	4603      	mov	r3, r0
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	4a36      	ldr	r2, [pc, #216]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	e014      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x8c>
 8003c16:	f7ff f96c 	bl	8002ef2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_GetSysClockFreq+0x7a>
 8003c20:	f7ff f977 	bl	8002f12 <LL_RCC_MSI_GetRange>
 8003c24:	4603      	mov	r3, r0
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	e005      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x86>
 8003c2e:	f7ff f97b 	bl	8002f28 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c32:	4603      	mov	r3, r0
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d115      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c4c:	e012      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_GetSysClockFreq+0x138>)
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e00c      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d109      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c60:	f7ff f85a 	bl	8002d18 <LL_RCC_HSE_IsEnabledDiv2>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCC_GetSysClockFreq+0x138>)
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e001      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c72:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c74:	f7ff f98b 	bl	8002f8e <LL_RCC_GetSysClkSource>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d12f      	bne.n	8003cde <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c7e:	f7ff fa72 	bl	8003166 <LL_RCC_PLL_GetMainSource>
 8003c82:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0xde>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xe4>
 8003c90:	e00d      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_RCC_GetSysClockFreq+0x138>)
 8003c94:	60fb      	str	r3, [r7, #12]
        break;
 8003c96:	e00d      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c98:	f7ff f83e 	bl	8002d18 <LL_RCC_HSE_IsEnabledDiv2>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_RCC_GetSysClockFreq+0x138>)
 8003ca4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003caa:	60fb      	str	r3, [r7, #12]
        break;
 8003cac:	e002      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	60fb      	str	r3, [r7, #12]
        break;
 8003cb2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cb4:	f7ff fa35 	bl	8003122 <LL_RCC_PLL_GetN>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	fb03 f402 	mul.w	r4, r3, r2
 8003cc0:	f7ff fa46 	bl	8003150 <LL_RCC_PLL_GetDivider>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	3301      	adds	r3, #1
 8003cca:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cce:	f7ff fa34 	bl	800313a <LL_RCC_PLL_GetR>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	0f5b      	lsrs	r3, r3, #29
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cdc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003cde:	697b      	ldr	r3, [r7, #20]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}
 8003ce8:	08007174 	.word	0x08007174
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	01e84800 	.word	0x01e84800

08003cf4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b598      	push	{r3, r4, r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003cf8:	f7ff ff5c 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	f7ff f9b5 	bl	800306c <LL_RCC_GetAHBPrescaler>
 8003d02:	4603      	mov	r3, r0
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd98      	pop	{r3, r4, r7, pc}
 8003d18:	08007114 	.word	0x08007114

08003d1c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b598      	push	{r3, r4, r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d20:	f7ff ffe8 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d24:	4604      	mov	r4, r0
 8003d26:	f7ff f9b9 	bl	800309c <LL_RCC_GetAPB1Prescaler>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	4a03      	ldr	r2, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd98      	pop	{r3, r4, r7, pc}
 8003d3c:	08007154 	.word	0x08007154

08003d40 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d40:	b598      	push	{r3, r4, r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d44:	f7ff ffd6 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	f7ff f9b2 	bl	80030b2 <LL_RCC_GetAPB2Prescaler>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	0adb      	lsrs	r3, r3, #11
 8003d52:	4a03      	ldr	r2, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd98      	pop	{r3, r4, r7, pc}
 8003d60:	08007154 	.word	0x08007154

08003d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003d7c:	f7ff f981 	bl	8003082 <LL_RCC_GetAHB3Prescaler>
 8003d80:	4603      	mov	r3, r0
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0c9c      	lsrs	r4, r3, #18
 8003da0:	f7fe ff76 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4619      	mov	r1, r3
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 f80b 	bl	8003dc4 <RCC_SetFlashLatency>
 8003dae:	4603      	mov	r3, r0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd90      	pop	{r4, r7, pc}
 8003db8:	08007174 	.word	0x08007174
 8003dbc:	08007114 	.word	0x08007114
 8003dc0:	431bde83 	.word	0x431bde83

08003dc4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003dce:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <RCC_SetFlashLatency+0xf4>)
 8003dd0:	f107 0320 	add.w	r3, r7, #32
 8003dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dd8:	6018      	str	r0, [r3, #0]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003dde:	4a37      	ldr	r2, [pc, #220]	; (8003ebc <RCC_SetFlashLatency+0xf8>)
 8003de0:	f107 0318 	add.w	r3, r7, #24
 8003de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003de8:	6018      	str	r0, [r3, #0]
 8003dea:	3304      	adds	r3, #4
 8003dec:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003dee:	4a34      	ldr	r2, [pc, #208]	; (8003ec0 <RCC_SetFlashLatency+0xfc>)
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d11b      	bne.n	8003e3e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0a:	e014      	b.n	8003e36 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	3338      	adds	r3, #56	; 0x38
 8003e12:	443b      	add	r3, r7
 8003e14:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d807      	bhi.n	8003e30 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	3338      	adds	r3, #56	; 0x38
 8003e26:	443b      	add	r3, r7
 8003e28:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e2e:	e021      	b.n	8003e74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	3301      	adds	r3, #1
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d9e7      	bls.n	8003e0c <RCC_SetFlashLatency+0x48>
 8003e3c:	e01a      	b.n	8003e74 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e42:	e014      	b.n	8003e6e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	3338      	adds	r3, #56	; 0x38
 8003e4a:	443b      	add	r3, r7
 8003e4c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003e50:	461a      	mov	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d807      	bhi.n	8003e68 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	3338      	adds	r3, #56	; 0x38
 8003e5e:	443b      	add	r3, r7
 8003e60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e66:	e005      	b.n	8003e74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d9e7      	bls.n	8003e44 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <RCC_SetFlashLatency+0x100>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 0207 	bic.w	r2, r3, #7
 8003e7c:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <RCC_SetFlashLatency+0x100>)
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e84:	f7fe fb8c 	bl	80025a0 <HAL_GetTick>
 8003e88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e8a:	e008      	b.n	8003e9e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e8c:	f7fe fb88 	bl	80025a0 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e007      	b.n	8003eae <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <RCC_SetFlashLatency+0x100>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d1ef      	bne.n	8003e8c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3738      	adds	r7, #56	; 0x38
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	080070f8 	.word	0x080070f8
 8003ebc:	08007100 	.word	0x08007100
 8003ec0:	08007108 	.word	0x08007108
 8003ec4:	58004000 	.word	0x58004000

08003ec8 <LL_RCC_LSE_IsReady>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d101      	bne.n	8003ee0 <LL_RCC_LSE_IsReady+0x18>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <LL_RCC_LSE_IsReady+0x1a>
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_SetUSARTClockSource>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	43db      	mvns	r3, r3
 8003f00:	401a      	ands	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <LL_RCC_SetI2SClockSource>:
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_SetLPUARTClockSource>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <LL_RCC_SetI2CClockSource>:
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003f86:	43db      	mvns	r3, r3
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <LL_RCC_SetLPTIMClockSource>:
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <LL_RCC_SetRNGClockSource>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <LL_RCC_SetADCClockSource>:
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <LL_RCC_SetRTCClockSource>:
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <LL_RCC_GetRTCClockSource>:
{
 8004056:	b480      	push	{r7}
 8004058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004066:	4618      	mov	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <LL_RCC_ForceBackupDomainReset>:
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <LL_RCC_ReleaseBackupDomainReset>:
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80040bc:	2300      	movs	r3, #0
 80040be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040c0:	2300      	movs	r3, #0
 80040c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d058      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80040d0:	f7fe fdc2 	bl	8002c58 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040d4:	f7fe fa64 	bl	80025a0 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80040da:	e009      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fe fa60 	bl	80025a0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d902      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	74fb      	strb	r3, [r7, #19]
        break;
 80040ee:	e006      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80040f0:	4b7b      	ldr	r3, [pc, #492]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fc:	d1ee      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d13c      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004104:	f7ff ffa7 	bl	8004056 <LL_RCC_GetRTCClockSource>
 8004108:	4602      	mov	r2, r0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	429a      	cmp	r2, r3
 8004110:	d00f      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004120:	f7ff ffa5 	bl	800406e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004124:	f7ff ffb3 	bl	800408e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d014      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe fa30 	bl	80025a0 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004142:	e00b      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fe fa2c 	bl	80025a0 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d902      	bls.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	74fb      	strb	r3, [r7, #19]
            break;
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800415c:	f7ff feb4 	bl	8003ec8 <LL_RCC_LSE_IsReady>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d1ee      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff5b 	bl	800402c <LL_RCC_SetRTCClockSource>
 8004176:	e004      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	74bb      	strb	r3, [r7, #18]
 800417c:	e001      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fea9 	bl	8003eea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fe9e 	bl	8003eea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fec0 	bl	8003f44 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fee6 	bl	8003fa6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fedb 	bl	8003fa6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fed0 	bl	8003fa6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fea9 	bl	8003f6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fe9e 	bl	8003f6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fe93 	bl	8003f6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	d011      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fe5e 	bl	8003f1a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004266:	d107      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fea5 	bl	8003fd8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d011      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fea3 	bl	8004002 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c4:	d107      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80042d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	58000400 	.word	0x58000400

080042e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d071      	beq.n	80043da <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd ff4e 	bl	80021ac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004318:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <HAL_RTC_Init+0x100>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d051      	beq.n	80043c8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RTC_Init+0x100>)
 8004326:	22ca      	movs	r2, #202	; 0xca
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
 800432a:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <HAL_RTC_Init+0x100>)
 800432c:	2253      	movs	r2, #83	; 0x53
 800432e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fbe3 	bl	8004afc <RTC_EnterInitMode>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d13f      	bne.n	80043c0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <HAL_RTC_Init+0x100>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <HAL_RTC_Init+0x100>)
 8004346:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004350:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <HAL_RTC_Init+0x100>)
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	4319      	orrs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	430b      	orrs	r3, r1
 8004364:	491f      	ldr	r1, [pc, #124]	; (80043e4 <HAL_RTC_Init+0x100>)
 8004366:	4313      	orrs	r3, r2
 8004368:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	491b      	ldr	r1, [pc, #108]	; (80043e4 <HAL_RTC_Init+0x100>)
 8004376:	4313      	orrs	r3, r2
 8004378:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RTC_Init+0x100>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	430b      	orrs	r3, r1
 800438c:	4915      	ldr	r1, [pc, #84]	; (80043e4 <HAL_RTC_Init+0x100>)
 800438e:	4313      	orrs	r3, r2
 8004390:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fbe6 	bl	8004b64 <RTC_ExitInitMode>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10e      	bne.n	80043c0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_RTC_Init+0x100>)
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a19      	ldr	r1, [r3, #32]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4319      	orrs	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	490a      	ldr	r1, [pc, #40]	; (80043e4 <HAL_RTC_Init+0x100>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043c0:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_RTC_Init+0x100>)
 80043c2:	22ff      	movs	r2, #255	; 0xff
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24
 80043c6:	e001      	b.n	80043cc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40002800 	.word	0x40002800

080043e8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_RTC_SetTime+0x1a>
 80043fe:	2302      	movs	r3, #2
 8004400:	e088      	b.n	8004514 <HAL_RTC_SetTime+0x12c>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004412:	4b42      	ldr	r3, [pc, #264]	; (800451c <HAL_RTC_SetTime+0x134>)
 8004414:	22ca      	movs	r2, #202	; 0xca
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
 8004418:	4b40      	ldr	r3, [pc, #256]	; (800451c <HAL_RTC_SetTime+0x134>)
 800441a:	2253      	movs	r2, #83	; 0x53
 800441c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb6c 	bl	8004afc <RTC_EnterInitMode>
 8004424:	4603      	mov	r3, r0
 8004426:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d15e      	bne.n	80044ec <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800442e:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RTC_SetTime+0x134>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	d057      	beq.n	80044ec <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d125      	bne.n	800448e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RTC_SetTime+0x134>)
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fbc1 	bl	8004be0 <RTC_ByteToBcd2>
 800445e:	4603      	mov	r3, r0
 8004460:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fbba 	bl	8004be0 <RTC_ByteToBcd2>
 800446c:	4603      	mov	r3, r0
 800446e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004470:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	789b      	ldrb	r3, [r3, #2]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fbb2 	bl	8004be0 <RTC_ByteToBcd2>
 800447c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800447e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	78db      	ldrb	r3, [r3, #3]
 8004486:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e017      	b.n	80044be <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800448e:	4b23      	ldr	r3, [pc, #140]	; (800451c <HAL_RTC_SetTime+0x134>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2200      	movs	r2, #0
 800449e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044ac:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044b2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	78db      	ldrb	r3, [r3, #3]
 80044b8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_RTC_SetTime+0x134>)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044ca:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RTC_SetTime+0x134>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <HAL_RTC_SetTime+0x134>)
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_RTC_SetTime+0x134>)
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	68d9      	ldr	r1, [r3, #12]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	490d      	ldr	r1, [pc, #52]	; (800451c <HAL_RTC_SetTime+0x134>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fb39 	bl	8004b64 <RTC_ExitInitMode>
 80044f2:	4603      	mov	r3, r0
 80044f4:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RTC_SetTime+0x134>)
 80044f8:	22ff      	movs	r2, #255	; 0xff
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004512:	7cfb      	ldrb	r3, [r7, #19]
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd90      	pop	{r4, r7, pc}
 800451c:	40002800 	.word	0x40002800

08004520 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800452c:	4b2c      	ldr	r3, [pc, #176]	; (80045e0 <HAL_RTC_GetTime+0xc0>)
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004534:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <HAL_RTC_GetTime+0xc0>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004540:	d049      	beq.n	80045d6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_RTC_GetTime+0xc0>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RTC_GetTime+0xc0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004556:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800455a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	0d9b      	lsrs	r3, r3, #22
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11a      	bne.n	80045d6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fb3a 	bl	8004c1e <RTC_Bcd2ToByte>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fb31 	bl	8004c1e <RTC_Bcd2ToByte>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	789b      	ldrb	r3, [r3, #2]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fb28 	bl	8004c1e <RTC_Bcd2ToByte>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40002800 	.word	0x40002800

080045e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_RTC_SetDate+0x1a>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e071      	b.n	80046e2 <HAL_RTC_SetDate+0xfe>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10e      	bne.n	8004632 <HAL_RTC_SetDate+0x4e>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	f023 0310 	bic.w	r3, r3, #16
 8004628:	b2db      	uxtb	r3, r3
 800462a:	330a      	adds	r3, #10
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11c      	bne.n	8004672 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	78db      	ldrb	r3, [r3, #3]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 facf 	bl	8004be0 <RTC_ByteToBcd2>
 8004642:	4603      	mov	r3, r0
 8004644:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fac8 	bl	8004be0 <RTC_ByteToBcd2>
 8004650:	4603      	mov	r3, r0
 8004652:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004654:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	789b      	ldrb	r3, [r3, #2]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fac0 	bl	8004be0 <RTC_ByteToBcd2>
 8004660:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004662:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e00e      	b.n	8004690 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	78db      	ldrb	r3, [r3, #3]
 8004676:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800467e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004684:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004690:	4b16      	ldr	r3, [pc, #88]	; (80046ec <HAL_RTC_SetDate+0x108>)
 8004692:	22ca      	movs	r2, #202	; 0xca
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_RTC_SetDate+0x108>)
 8004698:	2253      	movs	r2, #83	; 0x53
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fa2d 	bl	8004afc <RTC_EnterInitMode>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80046ac:	4a0f      	ldr	r2, [pc, #60]	; (80046ec <HAL_RTC_SetDate+0x108>)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fa52 	bl	8004b64 <RTC_ExitInitMode>
 80046c0:	4603      	mov	r3, r0
 80046c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RTC_SetDate+0x108>)
 80046c6:	22ff      	movs	r2, #255	; 0xff
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd90      	pop	{r4, r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40002800 	.word	0x40002800

080046f0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80046fc:	4b22      	ldr	r3, [pc, #136]	; (8004788 <HAL_RTC_GetDate+0x98>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004704:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004708:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	b2da      	uxtb	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	0b5b      	lsrs	r3, r3, #13
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d11a      	bne.n	800477e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	78db      	ldrb	r3, [r3, #3]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fa66 	bl	8004c1e <RTC_Bcd2ToByte>
 8004752:	4603      	mov	r3, r0
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fa5d 	bl	8004c1e <RTC_Bcd2ToByte>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	789b      	ldrb	r3, [r3, #2]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fa54 	bl	8004c1e <RTC_Bcd2ToByte>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40002800 	.word	0x40002800

0800478c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_RTC_SetAlarm_IT+0x1e>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0f3      	b.n	8004992 <HAL_RTC_SetAlarm_IT+0x206>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80047ba:	4b78      	ldr	r3, [pc, #480]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ca:	d06a      	beq.n	80048a2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d13a      	bne.n	8004848 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80047d2:	4b72      	ldr	r3, [pc, #456]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f9f5 	bl	8004be0 <RTC_ByteToBcd2>
 80047f6:	4603      	mov	r3, r0
 80047f8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f9ee 	bl	8004be0 <RTC_ByteToBcd2>
 8004804:	4603      	mov	r3, r0
 8004806:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004808:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	789b      	ldrb	r3, [r3, #2]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f9e6 	bl	8004be0 <RTC_ByteToBcd2>
 8004814:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004816:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	78db      	ldrb	r3, [r3, #3]
 800481e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004820:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f9d8 	bl	8004be0 <RTC_ByteToBcd2>
 8004830:	4603      	mov	r3, r0
 8004832:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004834:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800483c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e02c      	b.n	80048a2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004850:	d00d      	beq.n	800486e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800485a:	d008      	beq.n	800486e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800485c:	4b4f      	ldr	r3, [pc, #316]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800487a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004880:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	78db      	ldrb	r3, [r3, #3]
 8004886:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004888:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004890:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004892:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004898:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048a2:	4b3e      	ldr	r3, [pc, #248]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048a4:	22ca      	movs	r2, #202	; 0xca
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24
 80048a8:	4b3c      	ldr	r3, [pc, #240]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048aa:	2253      	movs	r2, #83	; 0x53
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d12c      	bne.n	8004912 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80048b8:	4b38      	ldr	r3, [pc, #224]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4a37      	ldr	r2, [pc, #220]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048c2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80048c4:	4b35      	ldr	r3, [pc, #212]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d0:	d107      	bne.n	80048e2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4930      	ldr	r1, [pc, #192]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	644b      	str	r3, [r1, #68]	; 0x44
 80048e0:	e006      	b.n	80048f0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80048e2:	4a2e      	ldr	r2, [pc, #184]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80048e8:	4a2c      	ldr	r2, [pc, #176]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	4a24      	ldr	r2, [pc, #144]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 800490a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800490e:	6193      	str	r3, [r2, #24]
 8004910:	e02b      	b.n	800496a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004912:	4b22      	ldr	r3, [pc, #136]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	4a21      	ldr	r2, [pc, #132]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004918:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800491c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800491e:	4b1f      	ldr	r3, [pc, #124]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004920:	2202      	movs	r2, #2
 8004922:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d107      	bne.n	800493c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	4919      	ldr	r1, [pc, #100]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004936:	4313      	orrs	r3, r2
 8004938:	64cb      	str	r3, [r1, #76]	; 0x4c
 800493a:	e006      	b.n	800494a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004942:	4a16      	ldr	r2, [pc, #88]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800494a:	4a14      	ldr	r2, [pc, #80]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f043 0202 	orr.w	r2, r3, #2
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	4a0e      	ldr	r2, [pc, #56]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 8004964:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004968:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800496a:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <HAL_RTC_SetAlarm_IT+0x214>)
 800496c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004970:	4a0b      	ldr	r2, [pc, #44]	; (80049a0 <HAL_RTC_SetAlarm_IT+0x214>)
 8004972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004976:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <HAL_RTC_SetAlarm_IT+0x210>)
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	bd90      	pop	{r4, r7, pc}
 800499a:	bf00      	nop
 800499c:	40002800 	.word	0x40002800
 80049a0:	58000800 	.word	0x58000800

080049a4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_RTC_DeactivateAlarm+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e048      	b.n	8004a4e <HAL_RTC_DeactivateAlarm+0xaa>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049cc:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049ce:	22ca      	movs	r2, #202	; 0xca
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24
 80049d2:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049d4:	2253      	movs	r2, #83	; 0x53
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049de:	d115      	bne.n	8004a0c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049ea:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 80049f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049f6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	f023 0201 	bic.w	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004a04:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a0a:	e014      	b.n	8004a36 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	4a11      	ldr	r2, [pc, #68]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a12:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004a16:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	4a0e      	ldr	r2, [pc, #56]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a22:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	f023 0202 	bic.w	r2, r3, #2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a32:	2202      	movs	r2, #2
 8004a34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	40002800 	.word	0x40002800

08004a5c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004a7a:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc fef2 	bl	800186a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RTC_AlarmIRQHandler+0x50>)
 8004a92:	2202      	movs	r2, #2
 8004a94:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8dc 	bl	8004c54 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40002800 	.word	0x40002800

08004ab0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_RTC_WaitForSynchro+0x48>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a0e      	ldr	r2, [pc, #56]	; (8004af8 <HAL_RTC_WaitForSynchro+0x48>)
 8004abe:	f023 0320 	bic.w	r3, r3, #32
 8004ac2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004ac4:	f7fd fd6c 	bl	80025a0 <HAL_GetTick>
 8004ac8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004aca:	e009      	b.n	8004ae0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004acc:	f7fd fd68 	bl	80025a0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d901      	bls.n	8004ae0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e006      	b.n	8004aee <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RTC_WaitForSynchro+0x48>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ef      	beq.n	8004acc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40002800 	.word	0x40002800

08004afc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <RTC_EnterInitMode+0x64>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d120      	bne.n	8004b56 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <RTC_EnterInitMode+0x64>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <RTC_EnterInitMode+0x64>)
 8004b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004b20:	f7fd fd3e 	bl	80025a0 <HAL_GetTick>
 8004b24:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b26:	e00d      	b.n	8004b44 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b28:	f7fd fd3a 	bl	80025a0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b36:	d905      	bls.n	8004b44 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <RTC_EnterInitMode+0x64>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <RTC_EnterInitMode+0x5a>
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d1e8      	bne.n	8004b28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40002800 	.word	0x40002800

08004b64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <RTC_ExitInitMode+0x78>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <RTC_ExitInitMode+0x78>)
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <RTC_ExitInitMode+0x78>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10c      	bne.n	8004ba2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ff91 	bl	8004ab0 <HAL_RTC_WaitForSynchro>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01e      	beq.n	8004bd2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2203      	movs	r2, #3
 8004b98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	e017      	b.n	8004bd2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <RTC_ExitInitMode+0x78>)
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <RTC_ExitInitMode+0x78>)
 8004ba8:	f023 0320 	bic.w	r3, r3, #32
 8004bac:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ff7e 	bl	8004ab0 <HAL_RTC_WaitForSynchro>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <RTC_ExitInitMode+0x78>)
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <RTC_ExitInitMode+0x78>)
 8004bcc:	f043 0320 	orr.w	r3, r3, #32
 8004bd0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40002800 	.word	0x40002800

08004be0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004bf2:	e005      	b.n	8004c00 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	3b0a      	subs	r3, #10
 8004bfe:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004c00:	7afb      	ldrb	r3, [r7, #11]
 8004c02:	2b09      	cmp	r3, #9
 8004c04:	d8f6      	bhi.n	8004bf4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	7afb      	ldrb	r3, [r7, #11]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	b2db      	uxtb	r3, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	b2db      	uxtb	r3, r3
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr

08004c66 <LL_RCC_GetUSARTClockSource>:
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	401a      	ands	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	4313      	orrs	r3, r2
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <LL_RCC_GetLPUARTClockSource>:
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4013      	ands	r3, r2
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e042      	b.n	8004d40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fd fa99 	bl	8002204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2224      	movs	r2, #36	; 0x24
 8004cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f976 	bl	8004fdc <UART_SetConfig>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e022      	b.n	8004d40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fbde 	bl	80054c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fc64 	bl	8005606 <UART_CheckIdleState>
 8004d3e:	4603      	mov	r3, r0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d173      	bne.n	8004e4a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_UART_Transmit+0x26>
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e06c      	b.n	8004e4c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2221      	movs	r2, #33	; 0x21
 8004d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d82:	f7fd fc0d 	bl	80025a0 <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d108      	bne.n	8004db4 <HAL_UART_Transmit+0x6c>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e003      	b.n	8004dbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dbc:	e02c      	b.n	8004e18 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fc6a 	bl	80056a2 <UART_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e039      	b.n	8004e4c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3302      	adds	r3, #2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e007      	b.n	8004e06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1cc      	bne.n	8004dbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fc37 	bl	80056a2 <UART_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e006      	b.n	8004e4c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e000      	b.n	8004e4c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	f040 80b1 	bne.w	8004fd2 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_UART_Receive+0x28>
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0a9      	b.n	8004fd4 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2222      	movs	r2, #34	; 0x22
 8004e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e96:	f7fd fb83 	bl	80025a0 <HAL_GetTick>
 8004e9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	88fa      	ldrh	r2, [r7, #6]
 8004ea8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_UART_Receive+0x80>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <HAL_UART_Receive+0x76>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ec8:	e02d      	b.n	8004f26 <HAL_UART_Receive+0xd2>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ed2:	e028      	b.n	8004f26 <HAL_UART_Receive+0xd2>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10d      	bne.n	8004ef8 <HAL_UART_Receive+0xa4>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <HAL_UART_Receive+0x9a>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	22ff      	movs	r2, #255	; 0xff
 8004ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004eec:	e01b      	b.n	8004f26 <HAL_UART_Receive+0xd2>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	227f      	movs	r2, #127	; 0x7f
 8004ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ef6:	e016      	b.n	8004f26 <HAL_UART_Receive+0xd2>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f00:	d10d      	bne.n	8004f1e <HAL_UART_Receive+0xca>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_UART_Receive+0xc0>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	227f      	movs	r2, #127	; 0x7f
 8004f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f12:	e008      	b.n	8004f26 <HAL_UART_Receive+0xd2>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	223f      	movs	r2, #63	; 0x3f
 8004f18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f1c:	e003      	b.n	8004f26 <HAL_UART_Receive+0xd2>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d108      	bne.n	8004f4a <HAL_UART_Receive+0xf6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e003      	b.n	8004f52 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f52:	e032      	b.n	8004fba <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2120      	movs	r1, #32
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fb9f 	bl	80056a2 <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e032      	b.n	8004fd4 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10c      	bne.n	8004f8e <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	8a7b      	ldrh	r3, [r7, #18]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3302      	adds	r3, #2
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	e00c      	b.n	8004fa8 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	8a7b      	ldrh	r3, [r7, #18]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1c6      	bne.n	8004f54 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe0:	b08c      	sub	sp, #48	; 0x30
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	4313      	orrs	r3, r2
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b94      	ldr	r3, [pc, #592]	; (800525c <UART_SetConfig+0x280>)
 800500c:	4013      	ands	r3, r2
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005014:	430b      	orrs	r3, r1
 8005016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a89      	ldr	r2, [pc, #548]	; (8005260 <UART_SetConfig+0x284>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005044:	4313      	orrs	r3, r2
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005052:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800505c:	430b      	orrs	r3, r1
 800505e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	f023 010f 	bic.w	r1, r3, #15
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a7a      	ldr	r2, [pc, #488]	; (8005264 <UART_SetConfig+0x288>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d127      	bne.n	80050d0 <UART_SetConfig+0xf4>
 8005080:	2003      	movs	r0, #3
 8005082:	f7ff fdf0 	bl	8004c66 <LL_RCC_GetUSARTClockSource>
 8005086:	4603      	mov	r3, r0
 8005088:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800508c:	2b03      	cmp	r3, #3
 800508e:	d81b      	bhi.n	80050c8 <UART_SetConfig+0xec>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0xbc>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050c1 	.word	0x080050c1
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ae:	e080      	b.n	80051b2 <UART_SetConfig+0x1d6>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b6:	e07c      	b.n	80051b2 <UART_SetConfig+0x1d6>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050be:	e078      	b.n	80051b2 <UART_SetConfig+0x1d6>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e074      	b.n	80051b2 <UART_SetConfig+0x1d6>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e070      	b.n	80051b2 <UART_SetConfig+0x1d6>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a64      	ldr	r2, [pc, #400]	; (8005268 <UART_SetConfig+0x28c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d138      	bne.n	800514c <UART_SetConfig+0x170>
 80050da:	200c      	movs	r0, #12
 80050dc:	f7ff fdc3 	bl	8004c66 <LL_RCC_GetUSARTClockSource>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d82c      	bhi.n	8005144 <UART_SetConfig+0x168>
 80050ea:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0x114>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005125 	.word	0x08005125
 80050f4:	08005145 	.word	0x08005145
 80050f8:	08005145 	.word	0x08005145
 80050fc:	08005145 	.word	0x08005145
 8005100:	08005135 	.word	0x08005135
 8005104:	08005145 	.word	0x08005145
 8005108:	08005145 	.word	0x08005145
 800510c:	08005145 	.word	0x08005145
 8005110:	0800512d 	.word	0x0800512d
 8005114:	08005145 	.word	0x08005145
 8005118:	08005145 	.word	0x08005145
 800511c:	08005145 	.word	0x08005145
 8005120:	0800513d 	.word	0x0800513d
 8005124:	2300      	movs	r3, #0
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512a:	e042      	b.n	80051b2 <UART_SetConfig+0x1d6>
 800512c:	2302      	movs	r3, #2
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005132:	e03e      	b.n	80051b2 <UART_SetConfig+0x1d6>
 8005134:	2304      	movs	r3, #4
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513a:	e03a      	b.n	80051b2 <UART_SetConfig+0x1d6>
 800513c:	2308      	movs	r3, #8
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005142:	e036      	b.n	80051b2 <UART_SetConfig+0x1d6>
 8005144:	2310      	movs	r3, #16
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514a:	e032      	b.n	80051b2 <UART_SetConfig+0x1d6>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a43      	ldr	r2, [pc, #268]	; (8005260 <UART_SetConfig+0x284>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d12a      	bne.n	80051ac <UART_SetConfig+0x1d0>
 8005156:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800515a:	f7ff fd96 	bl	8004c8a <LL_RCC_GetLPUARTClockSource>
 800515e:	4603      	mov	r3, r0
 8005160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005164:	d01a      	beq.n	800519c <UART_SetConfig+0x1c0>
 8005166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800516a:	d81b      	bhi.n	80051a4 <UART_SetConfig+0x1c8>
 800516c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005170:	d00c      	beq.n	800518c <UART_SetConfig+0x1b0>
 8005172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005176:	d815      	bhi.n	80051a4 <UART_SetConfig+0x1c8>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <UART_SetConfig+0x1a8>
 800517c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005180:	d008      	beq.n	8005194 <UART_SetConfig+0x1b8>
 8005182:	e00f      	b.n	80051a4 <UART_SetConfig+0x1c8>
 8005184:	2300      	movs	r3, #0
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518a:	e012      	b.n	80051b2 <UART_SetConfig+0x1d6>
 800518c:	2302      	movs	r3, #2
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e00e      	b.n	80051b2 <UART_SetConfig+0x1d6>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e00a      	b.n	80051b2 <UART_SetConfig+0x1d6>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e006      	b.n	80051b2 <UART_SetConfig+0x1d6>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051aa:	e002      	b.n	80051b2 <UART_SetConfig+0x1d6>
 80051ac:	2310      	movs	r3, #16
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2a      	ldr	r2, [pc, #168]	; (8005260 <UART_SetConfig+0x284>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	f040 80a4 	bne.w	8005306 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d823      	bhi.n	800520e <UART_SetConfig+0x232>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x1f0>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	080051ff 	.word	0x080051ff
 80051e0:	0800520f 	.word	0x0800520f
 80051e4:	0800520f 	.word	0x0800520f
 80051e8:	0800520f 	.word	0x0800520f
 80051ec:	08005207 	.word	0x08005207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe fd94 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051f6:	e010      	b.n	800521a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f8:	4b1c      	ldr	r3, [pc, #112]	; (800526c <UART_SetConfig+0x290>)
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051fc:	e00d      	b.n	800521a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fe fcd9 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8005202:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005204:	e009      	b.n	800521a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800520c:	e005      	b.n	800521a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005218:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8137 	beq.w	8005490 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <UART_SetConfig+0x294>)
 8005228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800522c:	461a      	mov	r2, r3
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	fbb3 f3f2 	udiv	r3, r3, r2
 8005234:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4413      	add	r3, r2
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	429a      	cmp	r2, r3
 8005244:	d305      	bcc.n	8005252 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	429a      	cmp	r2, r3
 8005250:	d910      	bls.n	8005274 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005258:	e11a      	b.n	8005490 <UART_SetConfig+0x4b4>
 800525a:	bf00      	nop
 800525c:	cfff69f3 	.word	0xcfff69f3
 8005260:	40008000 	.word	0x40008000
 8005264:	40013800 	.word	0x40013800
 8005268:	40004400 	.word	0x40004400
 800526c:	00f42400 	.word	0x00f42400
 8005270:	080071b4 	.word	0x080071b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	2200      	movs	r2, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	60fa      	str	r2, [r7, #12]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	4a8e      	ldr	r2, [pc, #568]	; (80054bc <UART_SetConfig+0x4e0>)
 8005282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005286:	b29b      	uxth	r3, r3
 8005288:	2200      	movs	r2, #0
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005296:	f7fa ffc3 	bl	8000220 <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4610      	mov	r0, r2
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	020b      	lsls	r3, r1, #8
 80052ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052b0:	0202      	lsls	r2, r0, #8
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	6849      	ldr	r1, [r1, #4]
 80052b6:	0849      	lsrs	r1, r1, #1
 80052b8:	2000      	movs	r0, #0
 80052ba:	460c      	mov	r4, r1
 80052bc:	4605      	mov	r5, r0
 80052be:	eb12 0804 	adds.w	r8, r2, r4
 80052c2:	eb43 0905 	adc.w	r9, r3, r5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	469a      	mov	sl, r3
 80052ce:	4693      	mov	fp, r2
 80052d0:	4652      	mov	r2, sl
 80052d2:	465b      	mov	r3, fp
 80052d4:	4640      	mov	r0, r8
 80052d6:	4649      	mov	r1, r9
 80052d8:	f7fa ffa2 	bl	8000220 <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4613      	mov	r3, r2
 80052e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ea:	d308      	bcc.n	80052fe <UART_SetConfig+0x322>
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f2:	d204      	bcs.n	80052fe <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	60da      	str	r2, [r3, #12]
 80052fc:	e0c8      	b.n	8005490 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005304:	e0c4      	b.n	8005490 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530e:	d167      	bne.n	80053e0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005314:	2b08      	cmp	r3, #8
 8005316:	d828      	bhi.n	800536a <UART_SetConfig+0x38e>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x344>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	0800536b 	.word	0x0800536b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800536b 	.word	0x0800536b
 800533c:	0800536b 	.word	0x0800536b
 8005340:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005344:	f7fe fcea 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800534a:	e014      	b.n	8005376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800534c:	f7fe fcf8 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 8005350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005352:	e010      	b.n	8005376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <UART_SetConfig+0x4e4>)
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005358:	e00d      	b.n	8005376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fe fc2b 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 800535e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005360:	e009      	b.n	8005376 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005368:	e005      	b.n	8005376 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 8089 	beq.w	8005490 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	4a4e      	ldr	r2, [pc, #312]	; (80054bc <UART_SetConfig+0x4e0>)
 8005384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005388:	461a      	mov	r2, r3
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005390:	005a      	lsls	r2, r3, #1
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	441a      	add	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d916      	bls.n	80053d8 <UART_SetConfig+0x3fc>
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b0:	d212      	bcs.n	80053d8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f023 030f 	bic.w	r3, r3, #15
 80053ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	8bfa      	ldrh	r2, [r7, #30]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	e05b      	b.n	8005490 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053de:	e057      	b.n	8005490 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d828      	bhi.n	800543a <UART_SetConfig+0x45e>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x414>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fe fc82 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe fc90 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005422:	e010      	b.n	8005446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <UART_SetConfig+0x4e4>)
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe fbc3 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005438:	e005      	b.n	8005446 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005444:	bf00      	nop
    }

    if (pclk != 0U)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d021      	beq.n	8005490 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <UART_SetConfig+0x4e0>)
 8005452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005456:	461a      	mov	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	fbb3 f2f2 	udiv	r2, r3, r2
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	441a      	add	r2, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	d909      	bls.n	800548a <UART_SetConfig+0x4ae>
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547c:	d205      	bcs.n	800548a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	b29a      	uxth	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	e002      	b.n	8005490 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2201      	movs	r2, #1
 8005494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2201      	movs	r2, #1
 800549c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2200      	movs	r2, #0
 80054a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2200      	movs	r2, #0
 80054aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3730      	adds	r7, #48	; 0x30
 80054b4:	46bd      	mov	sp, r7
 80054b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ba:	bf00      	nop
 80054bc:	080071b4 	.word	0x080071b4
 80054c0:	00f42400 	.word	0x00f42400

080054c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c2:	d10a      	bne.n	80055da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af02      	add	r7, sp, #8
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005616:	f7fc ffc3 	bl	80025a0 <HAL_GetTick>
 800561a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d10e      	bne.n	8005648 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f832 	bl	80056a2 <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e028      	b.n	800569a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d10e      	bne.n	8005674 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f81c 	bl	80056a2 <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e012      	b.n	800569a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b09c      	sub	sp, #112	; 0x70
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b2:	e0a9      	b.n	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ba:	f000 80a5 	beq.w	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fc ff6f 	bl	80025a0 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80056ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d140      	bne.n	8005756 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056e8:	667b      	str	r3, [r7, #100]	; 0x64
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e6      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	663b      	str	r3, [r7, #96]	; 0x60
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005726:	64ba      	str	r2, [r7, #72]	; 0x48
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800572c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e069      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d051      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005772:	d149      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800577c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
 800579e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3308      	adds	r3, #8
 80057ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057d0:	623a      	str	r2, [r7, #32]
 80057d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69f9      	ldr	r1, [r7, #28]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e010      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69da      	ldr	r2, [r3, #28]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4013      	ands	r3, r2
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	429a      	cmp	r2, r3
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	429a      	cmp	r2, r3
 8005824:	f43f af46 	beq.w	80056b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3770      	adds	r7, #112	; 0x70
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UARTEx_DisableFifoMode+0x16>
 8005844:	2302      	movs	r3, #2
 8005846:	e027      	b.n	8005898 <HAL_UARTEx_DisableFifoMode+0x66>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	; 0x24
 8005854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005876:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e02d      	b.n	8005916 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2224      	movs	r2, #36	; 0x24
 80058c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f850 	bl	800599c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005932:	2302      	movs	r3, #2
 8005934:	e02d      	b.n	8005992 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2224      	movs	r2, #36	; 0x24
 8005942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0201 	bic.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f812 	bl	800599c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d108      	bne.n	80059be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059bc:	e031      	b.n	8005a22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059be:	2308      	movs	r3, #8
 80059c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059c2:	2308      	movs	r3, #8
 80059c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	0e5b      	lsrs	r3, r3, #25
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	0f5b      	lsrs	r3, r3, #29
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	7b3a      	ldrb	r2, [r7, #12]
 80059ea:	4910      	ldr	r1, [pc, #64]	; (8005a2c <UARTEx_SetNbDataToProcess+0x90>)
 80059ec:	5c8a      	ldrb	r2, [r1, r2]
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059f2:	7b3a      	ldrb	r2, [r7, #12]
 80059f4:	490e      	ldr	r1, [pc, #56]	; (8005a30 <UARTEx_SetNbDataToProcess+0x94>)
 80059f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	7b7a      	ldrb	r2, [r7, #13]
 8005a08:	4908      	ldr	r1, [pc, #32]	; (8005a2c <UARTEx_SetNbDataToProcess+0x90>)
 8005a0a:	5c8a      	ldrb	r2, [r1, r2]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a10:	7b7a      	ldrb	r2, [r7, #13]
 8005a12:	4907      	ldr	r1, [pc, #28]	; (8005a30 <UARTEx_SetNbDataToProcess+0x94>)
 8005a14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a16:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	080071cc 	.word	0x080071cc
 8005a30:	080071d4 	.word	0x080071d4

08005a34 <atoi>:
 8005a34:	220a      	movs	r2, #10
 8005a36:	2100      	movs	r1, #0
 8005a38:	f000 b960 	b.w	8005cfc <strtol>

08005a3c <__errno>:
 8005a3c:	4b01      	ldr	r3, [pc, #4]	; (8005a44 <__errno+0x8>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000014 	.word	0x20000014

08005a48 <__libc_init_array>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4d0d      	ldr	r5, [pc, #52]	; (8005a80 <__libc_init_array+0x38>)
 8005a4c:	4c0d      	ldr	r4, [pc, #52]	; (8005a84 <__libc_init_array+0x3c>)
 8005a4e:	1b64      	subs	r4, r4, r5
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	2600      	movs	r6, #0
 8005a54:	42a6      	cmp	r6, r4
 8005a56:	d109      	bne.n	8005a6c <__libc_init_array+0x24>
 8005a58:	4d0b      	ldr	r5, [pc, #44]	; (8005a88 <__libc_init_array+0x40>)
 8005a5a:	4c0c      	ldr	r4, [pc, #48]	; (8005a8c <__libc_init_array+0x44>)
 8005a5c:	f001 faf8 	bl	8007050 <_init>
 8005a60:	1b64      	subs	r4, r4, r5
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	2600      	movs	r6, #0
 8005a66:	42a6      	cmp	r6, r4
 8005a68:	d105      	bne.n	8005a76 <__libc_init_array+0x2e>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a70:	4798      	blx	r3
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7ee      	b.n	8005a54 <__libc_init_array+0xc>
 8005a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7a:	4798      	blx	r3
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	e7f2      	b.n	8005a66 <__libc_init_array+0x1e>
 8005a80:	0800742c 	.word	0x0800742c
 8005a84:	0800742c 	.word	0x0800742c
 8005a88:	0800742c 	.word	0x0800742c
 8005a8c:	08007430 	.word	0x08007430

08005a90 <memcpy>:
 8005a90:	440a      	add	r2, r1
 8005a92:	4291      	cmp	r1, r2
 8005a94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a98:	d100      	bne.n	8005a9c <memcpy+0xc>
 8005a9a:	4770      	bx	lr
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa6:	4291      	cmp	r1, r2
 8005aa8:	d1f9      	bne.n	8005a9e <memcpy+0xe>
 8005aaa:	bd10      	pop	{r4, pc}

08005aac <memset>:
 8005aac:	4402      	add	r2, r0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d100      	bne.n	8005ab6 <memset+0xa>
 8005ab4:	4770      	bx	lr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	e7f9      	b.n	8005ab0 <memset+0x4>

08005abc <sniprintf>:
 8005abc:	b40c      	push	{r2, r3}
 8005abe:	b530      	push	{r4, r5, lr}
 8005ac0:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <sniprintf+0x64>)
 8005ac2:	1e0c      	subs	r4, r1, #0
 8005ac4:	681d      	ldr	r5, [r3, #0]
 8005ac6:	b09d      	sub	sp, #116	; 0x74
 8005ac8:	da08      	bge.n	8005adc <sniprintf+0x20>
 8005aca:	238b      	movs	r3, #139	; 0x8b
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad2:	b01d      	add	sp, #116	; 0x74
 8005ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad8:	b002      	add	sp, #8
 8005ada:	4770      	bx	lr
 8005adc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005ae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ae4:	bf14      	ite	ne
 8005ae6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005aea:	4623      	moveq	r3, r4
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	9307      	str	r3, [sp, #28]
 8005af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005af4:	9002      	str	r0, [sp, #8]
 8005af6:	9006      	str	r0, [sp, #24]
 8005af8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005afc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005afe:	ab21      	add	r3, sp, #132	; 0x84
 8005b00:	a902      	add	r1, sp, #8
 8005b02:	4628      	mov	r0, r5
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	f000 fa75 	bl	8005ff4 <_svfiprintf_r>
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	bfbc      	itt	lt
 8005b0e:	238b      	movlt	r3, #139	; 0x8b
 8005b10:	602b      	strlt	r3, [r5, #0]
 8005b12:	2c00      	cmp	r4, #0
 8005b14:	d0dd      	beq.n	8005ad2 <sniprintf+0x16>
 8005b16:	9b02      	ldr	r3, [sp, #8]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e7d9      	b.n	8005ad2 <sniprintf+0x16>
 8005b1e:	bf00      	nop
 8005b20:	20000014 	.word	0x20000014

08005b24 <strncmp>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4603      	mov	r3, r0
 8005b28:	b172      	cbz	r2, 8005b48 <strncmp+0x24>
 8005b2a:	3901      	subs	r1, #1
 8005b2c:	1884      	adds	r4, r0, r2
 8005b2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005b36:	4290      	cmp	r0, r2
 8005b38:	d101      	bne.n	8005b3e <strncmp+0x1a>
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	d101      	bne.n	8005b42 <strncmp+0x1e>
 8005b3e:	1a80      	subs	r0, r0, r2
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d1f3      	bne.n	8005b2e <strncmp+0xa>
 8005b46:	e7fa      	b.n	8005b3e <strncmp+0x1a>
 8005b48:	4610      	mov	r0, r2
 8005b4a:	e7f9      	b.n	8005b40 <strncmp+0x1c>

08005b4c <strtok>:
 8005b4c:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <strtok+0x5c>)
 8005b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b52:	681f      	ldr	r7, [r3, #0]
 8005b54:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005b56:	4605      	mov	r5, r0
 8005b58:	460e      	mov	r6, r1
 8005b5a:	b9ec      	cbnz	r4, 8005b98 <strtok+0x4c>
 8005b5c:	2050      	movs	r0, #80	; 0x50
 8005b5e:	f000 f907 	bl	8005d70 <malloc>
 8005b62:	4602      	mov	r2, r0
 8005b64:	65b8      	str	r0, [r7, #88]	; 0x58
 8005b66:	b920      	cbnz	r0, 8005b72 <strtok+0x26>
 8005b68:	4b10      	ldr	r3, [pc, #64]	; (8005bac <strtok+0x60>)
 8005b6a:	4811      	ldr	r0, [pc, #68]	; (8005bb0 <strtok+0x64>)
 8005b6c:	2157      	movs	r1, #87	; 0x57
 8005b6e:	f000 f8cf 	bl	8005d10 <__assert_func>
 8005b72:	e9c0 4400 	strd	r4, r4, [r0]
 8005b76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005b7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005b7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005b82:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005b86:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005b8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005b8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005b92:	6184      	str	r4, [r0, #24]
 8005b94:	7704      	strb	r4, [r0, #28]
 8005b96:	6244      	str	r4, [r0, #36]	; 0x24
 8005b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba4:	f000 b806 	b.w	8005bb4 <__strtok_r>
 8005ba8:	20000014 	.word	0x20000014
 8005bac:	080071e0 	.word	0x080071e0
 8005bb0:	080071f7 	.word	0x080071f7

08005bb4 <__strtok_r>:
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb6:	b908      	cbnz	r0, 8005bbc <__strtok_r+0x8>
 8005bb8:	6810      	ldr	r0, [r2, #0]
 8005bba:	b188      	cbz	r0, 8005be0 <__strtok_r+0x2c>
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005bc4:	460f      	mov	r7, r1
 8005bc6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005bca:	b91e      	cbnz	r6, 8005bd4 <__strtok_r+0x20>
 8005bcc:	b965      	cbnz	r5, 8005be8 <__strtok_r+0x34>
 8005bce:	6015      	str	r5, [r2, #0]
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	e005      	b.n	8005be0 <__strtok_r+0x2c>
 8005bd4:	42b5      	cmp	r5, r6
 8005bd6:	d1f6      	bne.n	8005bc6 <__strtok_r+0x12>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f0      	bne.n	8005bbe <__strtok_r+0xa>
 8005bdc:	6014      	str	r4, [r2, #0]
 8005bde:	7003      	strb	r3, [r0, #0]
 8005be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be2:	461c      	mov	r4, r3
 8005be4:	e00c      	b.n	8005c00 <__strtok_r+0x4c>
 8005be6:	b915      	cbnz	r5, 8005bee <__strtok_r+0x3a>
 8005be8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005bec:	460e      	mov	r6, r1
 8005bee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005bf2:	42ab      	cmp	r3, r5
 8005bf4:	d1f7      	bne.n	8005be6 <__strtok_r+0x32>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f3      	beq.n	8005be2 <__strtok_r+0x2e>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c00:	6014      	str	r4, [r2, #0]
 8005c02:	e7ed      	b.n	8005be0 <__strtok_r+0x2c>

08005c04 <_strtol_l.constprop.0>:
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	d001      	beq.n	8005c12 <_strtol_l.constprop.0+0xe>
 8005c0e:	2b24      	cmp	r3, #36	; 0x24
 8005c10:	d906      	bls.n	8005c20 <_strtol_l.constprop.0+0x1c>
 8005c12:	f7ff ff13 	bl	8005a3c <__errno>
 8005c16:	2316      	movs	r3, #22
 8005c18:	6003      	str	r3, [r0, #0]
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	4f35      	ldr	r7, [pc, #212]	; (8005cf8 <_strtol_l.constprop.0+0xf4>)
 8005c22:	460d      	mov	r5, r1
 8005c24:	4628      	mov	r0, r5
 8005c26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c2a:	5de6      	ldrb	r6, [r4, r7]
 8005c2c:	f016 0608 	ands.w	r6, r6, #8
 8005c30:	d1f8      	bne.n	8005c24 <_strtol_l.constprop.0+0x20>
 8005c32:	2c2d      	cmp	r4, #45	; 0x2d
 8005c34:	d12f      	bne.n	8005c96 <_strtol_l.constprop.0+0x92>
 8005c36:	782c      	ldrb	r4, [r5, #0]
 8005c38:	2601      	movs	r6, #1
 8005c3a:	1c85      	adds	r5, r0, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d057      	beq.n	8005cf0 <_strtol_l.constprop.0+0xec>
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d109      	bne.n	8005c58 <_strtol_l.constprop.0+0x54>
 8005c44:	2c30      	cmp	r4, #48	; 0x30
 8005c46:	d107      	bne.n	8005c58 <_strtol_l.constprop.0+0x54>
 8005c48:	7828      	ldrb	r0, [r5, #0]
 8005c4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005c4e:	2858      	cmp	r0, #88	; 0x58
 8005c50:	d149      	bne.n	8005ce6 <_strtol_l.constprop.0+0xe2>
 8005c52:	786c      	ldrb	r4, [r5, #1]
 8005c54:	2310      	movs	r3, #16
 8005c56:	3502      	adds	r5, #2
 8005c58:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005c5c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005c60:	2700      	movs	r7, #0
 8005c62:	fbbe f9f3 	udiv	r9, lr, r3
 8005c66:	4638      	mov	r0, r7
 8005c68:	fb03 ea19 	mls	sl, r3, r9, lr
 8005c6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005c70:	f1bc 0f09 	cmp.w	ip, #9
 8005c74:	d814      	bhi.n	8005ca0 <_strtol_l.constprop.0+0x9c>
 8005c76:	4664      	mov	r4, ip
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	dd22      	ble.n	8005cc2 <_strtol_l.constprop.0+0xbe>
 8005c7c:	2f00      	cmp	r7, #0
 8005c7e:	db1d      	blt.n	8005cbc <_strtol_l.constprop.0+0xb8>
 8005c80:	4581      	cmp	r9, r0
 8005c82:	d31b      	bcc.n	8005cbc <_strtol_l.constprop.0+0xb8>
 8005c84:	d101      	bne.n	8005c8a <_strtol_l.constprop.0+0x86>
 8005c86:	45a2      	cmp	sl, r4
 8005c88:	db18      	blt.n	8005cbc <_strtol_l.constprop.0+0xb8>
 8005c8a:	fb00 4003 	mla	r0, r0, r3, r4
 8005c8e:	2701      	movs	r7, #1
 8005c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c94:	e7ea      	b.n	8005c6c <_strtol_l.constprop.0+0x68>
 8005c96:	2c2b      	cmp	r4, #43	; 0x2b
 8005c98:	bf04      	itt	eq
 8005c9a:	782c      	ldrbeq	r4, [r5, #0]
 8005c9c:	1c85      	addeq	r5, r0, #2
 8005c9e:	e7cd      	b.n	8005c3c <_strtol_l.constprop.0+0x38>
 8005ca0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005ca4:	f1bc 0f19 	cmp.w	ip, #25
 8005ca8:	d801      	bhi.n	8005cae <_strtol_l.constprop.0+0xaa>
 8005caa:	3c37      	subs	r4, #55	; 0x37
 8005cac:	e7e4      	b.n	8005c78 <_strtol_l.constprop.0+0x74>
 8005cae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005cb2:	f1bc 0f19 	cmp.w	ip, #25
 8005cb6:	d804      	bhi.n	8005cc2 <_strtol_l.constprop.0+0xbe>
 8005cb8:	3c57      	subs	r4, #87	; 0x57
 8005cba:	e7dd      	b.n	8005c78 <_strtol_l.constprop.0+0x74>
 8005cbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005cc0:	e7e6      	b.n	8005c90 <_strtol_l.constprop.0+0x8c>
 8005cc2:	2f00      	cmp	r7, #0
 8005cc4:	da07      	bge.n	8005cd6 <_strtol_l.constprop.0+0xd2>
 8005cc6:	2322      	movs	r3, #34	; 0x22
 8005cc8:	f8c8 3000 	str.w	r3, [r8]
 8005ccc:	4670      	mov	r0, lr
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	d0a4      	beq.n	8005c1c <_strtol_l.constprop.0+0x18>
 8005cd2:	1e69      	subs	r1, r5, #1
 8005cd4:	e005      	b.n	8005ce2 <_strtol_l.constprop.0+0xde>
 8005cd6:	b106      	cbz	r6, 8005cda <_strtol_l.constprop.0+0xd6>
 8005cd8:	4240      	negs	r0, r0
 8005cda:	2a00      	cmp	r2, #0
 8005cdc:	d09e      	beq.n	8005c1c <_strtol_l.constprop.0+0x18>
 8005cde:	2f00      	cmp	r7, #0
 8005ce0:	d1f7      	bne.n	8005cd2 <_strtol_l.constprop.0+0xce>
 8005ce2:	6011      	str	r1, [r2, #0]
 8005ce4:	e79a      	b.n	8005c1c <_strtol_l.constprop.0+0x18>
 8005ce6:	2430      	movs	r4, #48	; 0x30
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1b5      	bne.n	8005c58 <_strtol_l.constprop.0+0x54>
 8005cec:	2308      	movs	r3, #8
 8005cee:	e7b3      	b.n	8005c58 <_strtol_l.constprop.0+0x54>
 8005cf0:	2c30      	cmp	r4, #48	; 0x30
 8005cf2:	d0a9      	beq.n	8005c48 <_strtol_l.constprop.0+0x44>
 8005cf4:	230a      	movs	r3, #10
 8005cf6:	e7af      	b.n	8005c58 <_strtol_l.constprop.0+0x54>
 8005cf8:	08007291 	.word	0x08007291

08005cfc <strtol>:
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	460a      	mov	r2, r1
 8005d00:	4601      	mov	r1, r0
 8005d02:	4802      	ldr	r0, [pc, #8]	; (8005d0c <strtol+0x10>)
 8005d04:	6800      	ldr	r0, [r0, #0]
 8005d06:	f7ff bf7d 	b.w	8005c04 <_strtol_l.constprop.0>
 8005d0a:	bf00      	nop
 8005d0c:	20000014 	.word	0x20000014

08005d10 <__assert_func>:
 8005d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d12:	4614      	mov	r4, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <__assert_func+0x2c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	68d8      	ldr	r0, [r3, #12]
 8005d1e:	b14c      	cbz	r4, 8005d34 <__assert_func+0x24>
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <__assert_func+0x30>)
 8005d22:	9100      	str	r1, [sp, #0]
 8005d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d28:	4906      	ldr	r1, [pc, #24]	; (8005d44 <__assert_func+0x34>)
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	f000 f80e 	bl	8005d4c <fiprintf>
 8005d30:	f000 fe1c 	bl	800696c <abort>
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <__assert_func+0x38>)
 8005d36:	461c      	mov	r4, r3
 8005d38:	e7f3      	b.n	8005d22 <__assert_func+0x12>
 8005d3a:	bf00      	nop
 8005d3c:	20000014 	.word	0x20000014
 8005d40:	08007254 	.word	0x08007254
 8005d44:	08007261 	.word	0x08007261
 8005d48:	0800728f 	.word	0x0800728f

08005d4c <fiprintf>:
 8005d4c:	b40e      	push	{r1, r2, r3}
 8005d4e:	b503      	push	{r0, r1, lr}
 8005d50:	4601      	mov	r1, r0
 8005d52:	ab03      	add	r3, sp, #12
 8005d54:	4805      	ldr	r0, [pc, #20]	; (8005d6c <fiprintf+0x20>)
 8005d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d5a:	6800      	ldr	r0, [r0, #0]
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	f000 fa71 	bl	8006244 <_vfiprintf_r>
 8005d62:	b002      	add	sp, #8
 8005d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d68:	b003      	add	sp, #12
 8005d6a:	4770      	bx	lr
 8005d6c:	20000014 	.word	0x20000014

08005d70 <malloc>:
 8005d70:	4b02      	ldr	r3, [pc, #8]	; (8005d7c <malloc+0xc>)
 8005d72:	4601      	mov	r1, r0
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f000 b86d 	b.w	8005e54 <_malloc_r>
 8005d7a:	bf00      	nop
 8005d7c:	20000014 	.word	0x20000014

08005d80 <_free_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4605      	mov	r5, r0
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d041      	beq.n	8005e0c <_free_r+0x8c>
 8005d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d8c:	1f0c      	subs	r4, r1, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfb8      	it	lt
 8005d92:	18e4      	addlt	r4, r4, r3
 8005d94:	f001 f828 	bl	8006de8 <__malloc_lock>
 8005d98:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <_free_r+0x90>)
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	b933      	cbnz	r3, 8005dac <_free_r+0x2c>
 8005d9e:	6063      	str	r3, [r4, #4]
 8005da0:	6014      	str	r4, [r2, #0]
 8005da2:	4628      	mov	r0, r5
 8005da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da8:	f001 b824 	b.w	8006df4 <__malloc_unlock>
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d908      	bls.n	8005dc2 <_free_r+0x42>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	1821      	adds	r1, r4, r0
 8005db4:	428b      	cmp	r3, r1
 8005db6:	bf01      	itttt	eq
 8005db8:	6819      	ldreq	r1, [r3, #0]
 8005dba:	685b      	ldreq	r3, [r3, #4]
 8005dbc:	1809      	addeq	r1, r1, r0
 8005dbe:	6021      	streq	r1, [r4, #0]
 8005dc0:	e7ed      	b.n	8005d9e <_free_r+0x1e>
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b10b      	cbz	r3, 8005dcc <_free_r+0x4c>
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	d9fa      	bls.n	8005dc2 <_free_r+0x42>
 8005dcc:	6811      	ldr	r1, [r2, #0]
 8005dce:	1850      	adds	r0, r2, r1
 8005dd0:	42a0      	cmp	r0, r4
 8005dd2:	d10b      	bne.n	8005dec <_free_r+0x6c>
 8005dd4:	6820      	ldr	r0, [r4, #0]
 8005dd6:	4401      	add	r1, r0
 8005dd8:	1850      	adds	r0, r2, r1
 8005dda:	4283      	cmp	r3, r0
 8005ddc:	6011      	str	r1, [r2, #0]
 8005dde:	d1e0      	bne.n	8005da2 <_free_r+0x22>
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	6053      	str	r3, [r2, #4]
 8005de6:	4401      	add	r1, r0
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	e7da      	b.n	8005da2 <_free_r+0x22>
 8005dec:	d902      	bls.n	8005df4 <_free_r+0x74>
 8005dee:	230c      	movs	r3, #12
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	e7d6      	b.n	8005da2 <_free_r+0x22>
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	1821      	adds	r1, r4, r0
 8005df8:	428b      	cmp	r3, r1
 8005dfa:	bf04      	itt	eq
 8005dfc:	6819      	ldreq	r1, [r3, #0]
 8005dfe:	685b      	ldreq	r3, [r3, #4]
 8005e00:	6063      	str	r3, [r4, #4]
 8005e02:	bf04      	itt	eq
 8005e04:	1809      	addeq	r1, r1, r0
 8005e06:	6021      	streq	r1, [r4, #0]
 8005e08:	6054      	str	r4, [r2, #4]
 8005e0a:	e7ca      	b.n	8005da2 <_free_r+0x22>
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000364 	.word	0x20000364

08005e14 <sbrk_aligned>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	4e0e      	ldr	r6, [pc, #56]	; (8005e50 <sbrk_aligned+0x3c>)
 8005e18:	460c      	mov	r4, r1
 8005e1a:	6831      	ldr	r1, [r6, #0]
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	b911      	cbnz	r1, 8005e26 <sbrk_aligned+0x12>
 8005e20:	f000 fcd4 	bl	80067cc <_sbrk_r>
 8005e24:	6030      	str	r0, [r6, #0]
 8005e26:	4621      	mov	r1, r4
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f000 fccf 	bl	80067cc <_sbrk_r>
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d00a      	beq.n	8005e48 <sbrk_aligned+0x34>
 8005e32:	1cc4      	adds	r4, r0, #3
 8005e34:	f024 0403 	bic.w	r4, r4, #3
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d007      	beq.n	8005e4c <sbrk_aligned+0x38>
 8005e3c:	1a21      	subs	r1, r4, r0
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 fcc4 	bl	80067cc <_sbrk_r>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d101      	bne.n	8005e4c <sbrk_aligned+0x38>
 8005e48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	20000368 	.word	0x20000368

08005e54 <_malloc_r>:
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	1ccd      	adds	r5, r1, #3
 8005e5a:	f025 0503 	bic.w	r5, r5, #3
 8005e5e:	3508      	adds	r5, #8
 8005e60:	2d0c      	cmp	r5, #12
 8005e62:	bf38      	it	cc
 8005e64:	250c      	movcc	r5, #12
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	4607      	mov	r7, r0
 8005e6a:	db01      	blt.n	8005e70 <_malloc_r+0x1c>
 8005e6c:	42a9      	cmp	r1, r5
 8005e6e:	d905      	bls.n	8005e7c <_malloc_r+0x28>
 8005e70:	230c      	movs	r3, #12
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	2600      	movs	r6, #0
 8005e76:	4630      	mov	r0, r6
 8005e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e7c:	4e2e      	ldr	r6, [pc, #184]	; (8005f38 <_malloc_r+0xe4>)
 8005e7e:	f000 ffb3 	bl	8006de8 <__malloc_lock>
 8005e82:	6833      	ldr	r3, [r6, #0]
 8005e84:	461c      	mov	r4, r3
 8005e86:	bb34      	cbnz	r4, 8005ed6 <_malloc_r+0x82>
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	f7ff ffc2 	bl	8005e14 <sbrk_aligned>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	4604      	mov	r4, r0
 8005e94:	d14d      	bne.n	8005f32 <_malloc_r+0xde>
 8005e96:	6834      	ldr	r4, [r6, #0]
 8005e98:	4626      	mov	r6, r4
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	d140      	bne.n	8005f20 <_malloc_r+0xcc>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	eb04 0803 	add.w	r8, r4, r3
 8005ea8:	f000 fc90 	bl	80067cc <_sbrk_r>
 8005eac:	4580      	cmp	r8, r0
 8005eae:	d13a      	bne.n	8005f26 <_malloc_r+0xd2>
 8005eb0:	6821      	ldr	r1, [r4, #0]
 8005eb2:	3503      	adds	r5, #3
 8005eb4:	1a6d      	subs	r5, r5, r1
 8005eb6:	f025 0503 	bic.w	r5, r5, #3
 8005eba:	3508      	adds	r5, #8
 8005ebc:	2d0c      	cmp	r5, #12
 8005ebe:	bf38      	it	cc
 8005ec0:	250c      	movcc	r5, #12
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff ffa5 	bl	8005e14 <sbrk_aligned>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d02b      	beq.n	8005f26 <_malloc_r+0xd2>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	442b      	add	r3, r5
 8005ed2:	6023      	str	r3, [r4, #0]
 8005ed4:	e00e      	b.n	8005ef4 <_malloc_r+0xa0>
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	1b52      	subs	r2, r2, r5
 8005eda:	d41e      	bmi.n	8005f1a <_malloc_r+0xc6>
 8005edc:	2a0b      	cmp	r2, #11
 8005ede:	d916      	bls.n	8005f0e <_malloc_r+0xba>
 8005ee0:	1961      	adds	r1, r4, r5
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	6025      	str	r5, [r4, #0]
 8005ee6:	bf18      	it	ne
 8005ee8:	6059      	strne	r1, [r3, #4]
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	bf08      	it	eq
 8005eee:	6031      	streq	r1, [r6, #0]
 8005ef0:	5162      	str	r2, [r4, r5]
 8005ef2:	604b      	str	r3, [r1, #4]
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	f104 060b 	add.w	r6, r4, #11
 8005efa:	f000 ff7b 	bl	8006df4 <__malloc_unlock>
 8005efe:	f026 0607 	bic.w	r6, r6, #7
 8005f02:	1d23      	adds	r3, r4, #4
 8005f04:	1af2      	subs	r2, r6, r3
 8005f06:	d0b6      	beq.n	8005e76 <_malloc_r+0x22>
 8005f08:	1b9b      	subs	r3, r3, r6
 8005f0a:	50a3      	str	r3, [r4, r2]
 8005f0c:	e7b3      	b.n	8005e76 <_malloc_r+0x22>
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	bf0c      	ite	eq
 8005f14:	6032      	streq	r2, [r6, #0]
 8005f16:	605a      	strne	r2, [r3, #4]
 8005f18:	e7ec      	b.n	8005ef4 <_malloc_r+0xa0>
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	6864      	ldr	r4, [r4, #4]
 8005f1e:	e7b2      	b.n	8005e86 <_malloc_r+0x32>
 8005f20:	4634      	mov	r4, r6
 8005f22:	6876      	ldr	r6, [r6, #4]
 8005f24:	e7b9      	b.n	8005e9a <_malloc_r+0x46>
 8005f26:	230c      	movs	r3, #12
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f000 ff62 	bl	8006df4 <__malloc_unlock>
 8005f30:	e7a1      	b.n	8005e76 <_malloc_r+0x22>
 8005f32:	6025      	str	r5, [r4, #0]
 8005f34:	e7de      	b.n	8005ef4 <_malloc_r+0xa0>
 8005f36:	bf00      	nop
 8005f38:	20000364 	.word	0x20000364

08005f3c <__ssputs_r>:
 8005f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	688e      	ldr	r6, [r1, #8]
 8005f42:	429e      	cmp	r6, r3
 8005f44:	4682      	mov	sl, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	4690      	mov	r8, r2
 8005f4a:	461f      	mov	r7, r3
 8005f4c:	d838      	bhi.n	8005fc0 <__ssputs_r+0x84>
 8005f4e:	898a      	ldrh	r2, [r1, #12]
 8005f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f54:	d032      	beq.n	8005fbc <__ssputs_r+0x80>
 8005f56:	6825      	ldr	r5, [r4, #0]
 8005f58:	6909      	ldr	r1, [r1, #16]
 8005f5a:	eba5 0901 	sub.w	r9, r5, r1
 8005f5e:	6965      	ldr	r5, [r4, #20]
 8005f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f68:	3301      	adds	r3, #1
 8005f6a:	444b      	add	r3, r9
 8005f6c:	106d      	asrs	r5, r5, #1
 8005f6e:	429d      	cmp	r5, r3
 8005f70:	bf38      	it	cc
 8005f72:	461d      	movcc	r5, r3
 8005f74:	0553      	lsls	r3, r2, #21
 8005f76:	d531      	bpl.n	8005fdc <__ssputs_r+0xa0>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	f7ff ff6b 	bl	8005e54 <_malloc_r>
 8005f7e:	4606      	mov	r6, r0
 8005f80:	b950      	cbnz	r0, 8005f98 <__ssputs_r+0x5c>
 8005f82:	230c      	movs	r3, #12
 8005f84:	f8ca 3000 	str.w	r3, [sl]
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	6921      	ldr	r1, [r4, #16]
 8005f9a:	464a      	mov	r2, r9
 8005f9c:	f7ff fd78 	bl	8005a90 <memcpy>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	6126      	str	r6, [r4, #16]
 8005fae:	6165      	str	r5, [r4, #20]
 8005fb0:	444e      	add	r6, r9
 8005fb2:	eba5 0509 	sub.w	r5, r5, r9
 8005fb6:	6026      	str	r6, [r4, #0]
 8005fb8:	60a5      	str	r5, [r4, #8]
 8005fba:	463e      	mov	r6, r7
 8005fbc:	42be      	cmp	r6, r7
 8005fbe:	d900      	bls.n	8005fc2 <__ssputs_r+0x86>
 8005fc0:	463e      	mov	r6, r7
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	4641      	mov	r1, r8
 8005fc8:	f000 fef4 	bl	8006db4 <memmove>
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	1b9b      	subs	r3, r3, r6
 8005fd0:	60a3      	str	r3, [r4, #8]
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	4433      	add	r3, r6
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	2000      	movs	r0, #0
 8005fda:	e7db      	b.n	8005f94 <__ssputs_r+0x58>
 8005fdc:	462a      	mov	r2, r5
 8005fde:	f000 ff0f 	bl	8006e00 <_realloc_r>
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d1e1      	bne.n	8005fac <__ssputs_r+0x70>
 8005fe8:	6921      	ldr	r1, [r4, #16]
 8005fea:	4650      	mov	r0, sl
 8005fec:	f7ff fec8 	bl	8005d80 <_free_r>
 8005ff0:	e7c7      	b.n	8005f82 <__ssputs_r+0x46>
	...

08005ff4 <_svfiprintf_r>:
 8005ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	4698      	mov	r8, r3
 8005ffa:	898b      	ldrh	r3, [r1, #12]
 8005ffc:	061b      	lsls	r3, r3, #24
 8005ffe:	b09d      	sub	sp, #116	; 0x74
 8006000:	4607      	mov	r7, r0
 8006002:	460d      	mov	r5, r1
 8006004:	4614      	mov	r4, r2
 8006006:	d50e      	bpl.n	8006026 <_svfiprintf_r+0x32>
 8006008:	690b      	ldr	r3, [r1, #16]
 800600a:	b963      	cbnz	r3, 8006026 <_svfiprintf_r+0x32>
 800600c:	2140      	movs	r1, #64	; 0x40
 800600e:	f7ff ff21 	bl	8005e54 <_malloc_r>
 8006012:	6028      	str	r0, [r5, #0]
 8006014:	6128      	str	r0, [r5, #16]
 8006016:	b920      	cbnz	r0, 8006022 <_svfiprintf_r+0x2e>
 8006018:	230c      	movs	r3, #12
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006020:	e0d1      	b.n	80061c6 <_svfiprintf_r+0x1d2>
 8006022:	2340      	movs	r3, #64	; 0x40
 8006024:	616b      	str	r3, [r5, #20]
 8006026:	2300      	movs	r3, #0
 8006028:	9309      	str	r3, [sp, #36]	; 0x24
 800602a:	2320      	movs	r3, #32
 800602c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006030:	f8cd 800c 	str.w	r8, [sp, #12]
 8006034:	2330      	movs	r3, #48	; 0x30
 8006036:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061e0 <_svfiprintf_r+0x1ec>
 800603a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800603e:	f04f 0901 	mov.w	r9, #1
 8006042:	4623      	mov	r3, r4
 8006044:	469a      	mov	sl, r3
 8006046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800604a:	b10a      	cbz	r2, 8006050 <_svfiprintf_r+0x5c>
 800604c:	2a25      	cmp	r2, #37	; 0x25
 800604e:	d1f9      	bne.n	8006044 <_svfiprintf_r+0x50>
 8006050:	ebba 0b04 	subs.w	fp, sl, r4
 8006054:	d00b      	beq.n	800606e <_svfiprintf_r+0x7a>
 8006056:	465b      	mov	r3, fp
 8006058:	4622      	mov	r2, r4
 800605a:	4629      	mov	r1, r5
 800605c:	4638      	mov	r0, r7
 800605e:	f7ff ff6d 	bl	8005f3c <__ssputs_r>
 8006062:	3001      	adds	r0, #1
 8006064:	f000 80aa 	beq.w	80061bc <_svfiprintf_r+0x1c8>
 8006068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800606a:	445a      	add	r2, fp
 800606c:	9209      	str	r2, [sp, #36]	; 0x24
 800606e:	f89a 3000 	ldrb.w	r3, [sl]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80a2 	beq.w	80061bc <_svfiprintf_r+0x1c8>
 8006078:	2300      	movs	r3, #0
 800607a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800607e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006082:	f10a 0a01 	add.w	sl, sl, #1
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	9307      	str	r3, [sp, #28]
 800608a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800608e:	931a      	str	r3, [sp, #104]	; 0x68
 8006090:	4654      	mov	r4, sl
 8006092:	2205      	movs	r2, #5
 8006094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006098:	4851      	ldr	r0, [pc, #324]	; (80061e0 <_svfiprintf_r+0x1ec>)
 800609a:	f7fa f871 	bl	8000180 <memchr>
 800609e:	9a04      	ldr	r2, [sp, #16]
 80060a0:	b9d8      	cbnz	r0, 80060da <_svfiprintf_r+0xe6>
 80060a2:	06d0      	lsls	r0, r2, #27
 80060a4:	bf44      	itt	mi
 80060a6:	2320      	movmi	r3, #32
 80060a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ac:	0711      	lsls	r1, r2, #28
 80060ae:	bf44      	itt	mi
 80060b0:	232b      	movmi	r3, #43	; 0x2b
 80060b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ba:	2b2a      	cmp	r3, #42	; 0x2a
 80060bc:	d015      	beq.n	80060ea <_svfiprintf_r+0xf6>
 80060be:	9a07      	ldr	r2, [sp, #28]
 80060c0:	4654      	mov	r4, sl
 80060c2:	2000      	movs	r0, #0
 80060c4:	f04f 0c0a 	mov.w	ip, #10
 80060c8:	4621      	mov	r1, r4
 80060ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ce:	3b30      	subs	r3, #48	; 0x30
 80060d0:	2b09      	cmp	r3, #9
 80060d2:	d94e      	bls.n	8006172 <_svfiprintf_r+0x17e>
 80060d4:	b1b0      	cbz	r0, 8006104 <_svfiprintf_r+0x110>
 80060d6:	9207      	str	r2, [sp, #28]
 80060d8:	e014      	b.n	8006104 <_svfiprintf_r+0x110>
 80060da:	eba0 0308 	sub.w	r3, r0, r8
 80060de:	fa09 f303 	lsl.w	r3, r9, r3
 80060e2:	4313      	orrs	r3, r2
 80060e4:	9304      	str	r3, [sp, #16]
 80060e6:	46a2      	mov	sl, r4
 80060e8:	e7d2      	b.n	8006090 <_svfiprintf_r+0x9c>
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	1d19      	adds	r1, r3, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	9103      	str	r1, [sp, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bfbb      	ittet	lt
 80060f6:	425b      	neglt	r3, r3
 80060f8:	f042 0202 	orrlt.w	r2, r2, #2
 80060fc:	9307      	strge	r3, [sp, #28]
 80060fe:	9307      	strlt	r3, [sp, #28]
 8006100:	bfb8      	it	lt
 8006102:	9204      	strlt	r2, [sp, #16]
 8006104:	7823      	ldrb	r3, [r4, #0]
 8006106:	2b2e      	cmp	r3, #46	; 0x2e
 8006108:	d10c      	bne.n	8006124 <_svfiprintf_r+0x130>
 800610a:	7863      	ldrb	r3, [r4, #1]
 800610c:	2b2a      	cmp	r3, #42	; 0x2a
 800610e:	d135      	bne.n	800617c <_svfiprintf_r+0x188>
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	1d1a      	adds	r2, r3, #4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	9203      	str	r2, [sp, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	bfb8      	it	lt
 800611c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006120:	3402      	adds	r4, #2
 8006122:	9305      	str	r3, [sp, #20]
 8006124:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80061e4 <_svfiprintf_r+0x1f0>
 8006128:	7821      	ldrb	r1, [r4, #0]
 800612a:	2203      	movs	r2, #3
 800612c:	4650      	mov	r0, sl
 800612e:	f7fa f827 	bl	8000180 <memchr>
 8006132:	b140      	cbz	r0, 8006146 <_svfiprintf_r+0x152>
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	eba0 000a 	sub.w	r0, r0, sl
 800613a:	fa03 f000 	lsl.w	r0, r3, r0
 800613e:	9b04      	ldr	r3, [sp, #16]
 8006140:	4303      	orrs	r3, r0
 8006142:	3401      	adds	r4, #1
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614a:	4827      	ldr	r0, [pc, #156]	; (80061e8 <_svfiprintf_r+0x1f4>)
 800614c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006150:	2206      	movs	r2, #6
 8006152:	f7fa f815 	bl	8000180 <memchr>
 8006156:	2800      	cmp	r0, #0
 8006158:	d038      	beq.n	80061cc <_svfiprintf_r+0x1d8>
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <_svfiprintf_r+0x1f8>)
 800615c:	bb1b      	cbnz	r3, 80061a6 <_svfiprintf_r+0x1b2>
 800615e:	9b03      	ldr	r3, [sp, #12]
 8006160:	3307      	adds	r3, #7
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	3308      	adds	r3, #8
 8006168:	9303      	str	r3, [sp, #12]
 800616a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616c:	4433      	add	r3, r6
 800616e:	9309      	str	r3, [sp, #36]	; 0x24
 8006170:	e767      	b.n	8006042 <_svfiprintf_r+0x4e>
 8006172:	fb0c 3202 	mla	r2, ip, r2, r3
 8006176:	460c      	mov	r4, r1
 8006178:	2001      	movs	r0, #1
 800617a:	e7a5      	b.n	80060c8 <_svfiprintf_r+0xd4>
 800617c:	2300      	movs	r3, #0
 800617e:	3401      	adds	r4, #1
 8006180:	9305      	str	r3, [sp, #20]
 8006182:	4619      	mov	r1, r3
 8006184:	f04f 0c0a 	mov.w	ip, #10
 8006188:	4620      	mov	r0, r4
 800618a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800618e:	3a30      	subs	r2, #48	; 0x30
 8006190:	2a09      	cmp	r2, #9
 8006192:	d903      	bls.n	800619c <_svfiprintf_r+0x1a8>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0c5      	beq.n	8006124 <_svfiprintf_r+0x130>
 8006198:	9105      	str	r1, [sp, #20]
 800619a:	e7c3      	b.n	8006124 <_svfiprintf_r+0x130>
 800619c:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a0:	4604      	mov	r4, r0
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7f0      	b.n	8006188 <_svfiprintf_r+0x194>
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	462a      	mov	r2, r5
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <_svfiprintf_r+0x1fc>)
 80061ae:	a904      	add	r1, sp, #16
 80061b0:	4638      	mov	r0, r7
 80061b2:	f3af 8000 	nop.w
 80061b6:	1c42      	adds	r2, r0, #1
 80061b8:	4606      	mov	r6, r0
 80061ba:	d1d6      	bne.n	800616a <_svfiprintf_r+0x176>
 80061bc:	89ab      	ldrh	r3, [r5, #12]
 80061be:	065b      	lsls	r3, r3, #25
 80061c0:	f53f af2c 	bmi.w	800601c <_svfiprintf_r+0x28>
 80061c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061c6:	b01d      	add	sp, #116	; 0x74
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	ab03      	add	r3, sp, #12
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	462a      	mov	r2, r5
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <_svfiprintf_r+0x1fc>)
 80061d4:	a904      	add	r1, sp, #16
 80061d6:	4638      	mov	r0, r7
 80061d8:	f000 f9d2 	bl	8006580 <_printf_i>
 80061dc:	e7eb      	b.n	80061b6 <_svfiprintf_r+0x1c2>
 80061de:	bf00      	nop
 80061e0:	08007391 	.word	0x08007391
 80061e4:	08007397 	.word	0x08007397
 80061e8:	0800739b 	.word	0x0800739b
 80061ec:	00000000 	.word	0x00000000
 80061f0:	08005f3d 	.word	0x08005f3d

080061f4 <__sfputc_r>:
 80061f4:	6893      	ldr	r3, [r2, #8]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	b410      	push	{r4}
 80061fc:	6093      	str	r3, [r2, #8]
 80061fe:	da07      	bge.n	8006210 <__sfputc_r+0x1c>
 8006200:	6994      	ldr	r4, [r2, #24]
 8006202:	42a3      	cmp	r3, r4
 8006204:	db01      	blt.n	800620a <__sfputc_r+0x16>
 8006206:	290a      	cmp	r1, #10
 8006208:	d102      	bne.n	8006210 <__sfputc_r+0x1c>
 800620a:	bc10      	pop	{r4}
 800620c:	f000 baee 	b.w	80067ec <__swbuf_r>
 8006210:	6813      	ldr	r3, [r2, #0]
 8006212:	1c58      	adds	r0, r3, #1
 8006214:	6010      	str	r0, [r2, #0]
 8006216:	7019      	strb	r1, [r3, #0]
 8006218:	4608      	mov	r0, r1
 800621a:	bc10      	pop	{r4}
 800621c:	4770      	bx	lr

0800621e <__sfputs_r>:
 800621e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	4614      	mov	r4, r2
 8006226:	18d5      	adds	r5, r2, r3
 8006228:	42ac      	cmp	r4, r5
 800622a:	d101      	bne.n	8006230 <__sfputs_r+0x12>
 800622c:	2000      	movs	r0, #0
 800622e:	e007      	b.n	8006240 <__sfputs_r+0x22>
 8006230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006234:	463a      	mov	r2, r7
 8006236:	4630      	mov	r0, r6
 8006238:	f7ff ffdc 	bl	80061f4 <__sfputc_r>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d1f3      	bne.n	8006228 <__sfputs_r+0xa>
 8006240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006244 <_vfiprintf_r>:
 8006244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	460d      	mov	r5, r1
 800624a:	b09d      	sub	sp, #116	; 0x74
 800624c:	4614      	mov	r4, r2
 800624e:	4698      	mov	r8, r3
 8006250:	4606      	mov	r6, r0
 8006252:	b118      	cbz	r0, 800625c <_vfiprintf_r+0x18>
 8006254:	6983      	ldr	r3, [r0, #24]
 8006256:	b90b      	cbnz	r3, 800625c <_vfiprintf_r+0x18>
 8006258:	f000 fca6 	bl	8006ba8 <__sinit>
 800625c:	4b89      	ldr	r3, [pc, #548]	; (8006484 <_vfiprintf_r+0x240>)
 800625e:	429d      	cmp	r5, r3
 8006260:	d11b      	bne.n	800629a <_vfiprintf_r+0x56>
 8006262:	6875      	ldr	r5, [r6, #4]
 8006264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006266:	07d9      	lsls	r1, r3, #31
 8006268:	d405      	bmi.n	8006276 <_vfiprintf_r+0x32>
 800626a:	89ab      	ldrh	r3, [r5, #12]
 800626c:	059a      	lsls	r2, r3, #22
 800626e:	d402      	bmi.n	8006276 <_vfiprintf_r+0x32>
 8006270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006272:	f000 fd37 	bl	8006ce4 <__retarget_lock_acquire_recursive>
 8006276:	89ab      	ldrh	r3, [r5, #12]
 8006278:	071b      	lsls	r3, r3, #28
 800627a:	d501      	bpl.n	8006280 <_vfiprintf_r+0x3c>
 800627c:	692b      	ldr	r3, [r5, #16]
 800627e:	b9eb      	cbnz	r3, 80062bc <_vfiprintf_r+0x78>
 8006280:	4629      	mov	r1, r5
 8006282:	4630      	mov	r0, r6
 8006284:	f000 fb04 	bl	8006890 <__swsetup_r>
 8006288:	b1c0      	cbz	r0, 80062bc <_vfiprintf_r+0x78>
 800628a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800628c:	07dc      	lsls	r4, r3, #31
 800628e:	d50e      	bpl.n	80062ae <_vfiprintf_r+0x6a>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006294:	b01d      	add	sp, #116	; 0x74
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	4b7b      	ldr	r3, [pc, #492]	; (8006488 <_vfiprintf_r+0x244>)
 800629c:	429d      	cmp	r5, r3
 800629e:	d101      	bne.n	80062a4 <_vfiprintf_r+0x60>
 80062a0:	68b5      	ldr	r5, [r6, #8]
 80062a2:	e7df      	b.n	8006264 <_vfiprintf_r+0x20>
 80062a4:	4b79      	ldr	r3, [pc, #484]	; (800648c <_vfiprintf_r+0x248>)
 80062a6:	429d      	cmp	r5, r3
 80062a8:	bf08      	it	eq
 80062aa:	68f5      	ldreq	r5, [r6, #12]
 80062ac:	e7da      	b.n	8006264 <_vfiprintf_r+0x20>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	0598      	lsls	r0, r3, #22
 80062b2:	d4ed      	bmi.n	8006290 <_vfiprintf_r+0x4c>
 80062b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062b6:	f000 fd16 	bl	8006ce6 <__retarget_lock_release_recursive>
 80062ba:	e7e9      	b.n	8006290 <_vfiprintf_r+0x4c>
 80062bc:	2300      	movs	r3, #0
 80062be:	9309      	str	r3, [sp, #36]	; 0x24
 80062c0:	2320      	movs	r3, #32
 80062c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ca:	2330      	movs	r3, #48	; 0x30
 80062cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006490 <_vfiprintf_r+0x24c>
 80062d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062d4:	f04f 0901 	mov.w	r9, #1
 80062d8:	4623      	mov	r3, r4
 80062da:	469a      	mov	sl, r3
 80062dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062e0:	b10a      	cbz	r2, 80062e6 <_vfiprintf_r+0xa2>
 80062e2:	2a25      	cmp	r2, #37	; 0x25
 80062e4:	d1f9      	bne.n	80062da <_vfiprintf_r+0x96>
 80062e6:	ebba 0b04 	subs.w	fp, sl, r4
 80062ea:	d00b      	beq.n	8006304 <_vfiprintf_r+0xc0>
 80062ec:	465b      	mov	r3, fp
 80062ee:	4622      	mov	r2, r4
 80062f0:	4629      	mov	r1, r5
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff ff93 	bl	800621e <__sfputs_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	f000 80aa 	beq.w	8006452 <_vfiprintf_r+0x20e>
 80062fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006300:	445a      	add	r2, fp
 8006302:	9209      	str	r2, [sp, #36]	; 0x24
 8006304:	f89a 3000 	ldrb.w	r3, [sl]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80a2 	beq.w	8006452 <_vfiprintf_r+0x20e>
 800630e:	2300      	movs	r3, #0
 8006310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006318:	f10a 0a01 	add.w	sl, sl, #1
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	9307      	str	r3, [sp, #28]
 8006320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006324:	931a      	str	r3, [sp, #104]	; 0x68
 8006326:	4654      	mov	r4, sl
 8006328:	2205      	movs	r2, #5
 800632a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632e:	4858      	ldr	r0, [pc, #352]	; (8006490 <_vfiprintf_r+0x24c>)
 8006330:	f7f9 ff26 	bl	8000180 <memchr>
 8006334:	9a04      	ldr	r2, [sp, #16]
 8006336:	b9d8      	cbnz	r0, 8006370 <_vfiprintf_r+0x12c>
 8006338:	06d1      	lsls	r1, r2, #27
 800633a:	bf44      	itt	mi
 800633c:	2320      	movmi	r3, #32
 800633e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006342:	0713      	lsls	r3, r2, #28
 8006344:	bf44      	itt	mi
 8006346:	232b      	movmi	r3, #43	; 0x2b
 8006348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800634c:	f89a 3000 	ldrb.w	r3, [sl]
 8006350:	2b2a      	cmp	r3, #42	; 0x2a
 8006352:	d015      	beq.n	8006380 <_vfiprintf_r+0x13c>
 8006354:	9a07      	ldr	r2, [sp, #28]
 8006356:	4654      	mov	r4, sl
 8006358:	2000      	movs	r0, #0
 800635a:	f04f 0c0a 	mov.w	ip, #10
 800635e:	4621      	mov	r1, r4
 8006360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006364:	3b30      	subs	r3, #48	; 0x30
 8006366:	2b09      	cmp	r3, #9
 8006368:	d94e      	bls.n	8006408 <_vfiprintf_r+0x1c4>
 800636a:	b1b0      	cbz	r0, 800639a <_vfiprintf_r+0x156>
 800636c:	9207      	str	r2, [sp, #28]
 800636e:	e014      	b.n	800639a <_vfiprintf_r+0x156>
 8006370:	eba0 0308 	sub.w	r3, r0, r8
 8006374:	fa09 f303 	lsl.w	r3, r9, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	9304      	str	r3, [sp, #16]
 800637c:	46a2      	mov	sl, r4
 800637e:	e7d2      	b.n	8006326 <_vfiprintf_r+0xe2>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	1d19      	adds	r1, r3, #4
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	9103      	str	r1, [sp, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	bfbb      	ittet	lt
 800638c:	425b      	neglt	r3, r3
 800638e:	f042 0202 	orrlt.w	r2, r2, #2
 8006392:	9307      	strge	r3, [sp, #28]
 8006394:	9307      	strlt	r3, [sp, #28]
 8006396:	bfb8      	it	lt
 8006398:	9204      	strlt	r2, [sp, #16]
 800639a:	7823      	ldrb	r3, [r4, #0]
 800639c:	2b2e      	cmp	r3, #46	; 0x2e
 800639e:	d10c      	bne.n	80063ba <_vfiprintf_r+0x176>
 80063a0:	7863      	ldrb	r3, [r4, #1]
 80063a2:	2b2a      	cmp	r3, #42	; 0x2a
 80063a4:	d135      	bne.n	8006412 <_vfiprintf_r+0x1ce>
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	1d1a      	adds	r2, r3, #4
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	9203      	str	r2, [sp, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bfb8      	it	lt
 80063b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063b6:	3402      	adds	r4, #2
 80063b8:	9305      	str	r3, [sp, #20]
 80063ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006494 <_vfiprintf_r+0x250>
 80063be:	7821      	ldrb	r1, [r4, #0]
 80063c0:	2203      	movs	r2, #3
 80063c2:	4650      	mov	r0, sl
 80063c4:	f7f9 fedc 	bl	8000180 <memchr>
 80063c8:	b140      	cbz	r0, 80063dc <_vfiprintf_r+0x198>
 80063ca:	2340      	movs	r3, #64	; 0x40
 80063cc:	eba0 000a 	sub.w	r0, r0, sl
 80063d0:	fa03 f000 	lsl.w	r0, r3, r0
 80063d4:	9b04      	ldr	r3, [sp, #16]
 80063d6:	4303      	orrs	r3, r0
 80063d8:	3401      	adds	r4, #1
 80063da:	9304      	str	r3, [sp, #16]
 80063dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e0:	482d      	ldr	r0, [pc, #180]	; (8006498 <_vfiprintf_r+0x254>)
 80063e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063e6:	2206      	movs	r2, #6
 80063e8:	f7f9 feca 	bl	8000180 <memchr>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d03f      	beq.n	8006470 <_vfiprintf_r+0x22c>
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <_vfiprintf_r+0x258>)
 80063f2:	bb1b      	cbnz	r3, 800643c <_vfiprintf_r+0x1f8>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	3307      	adds	r3, #7
 80063f8:	f023 0307 	bic.w	r3, r3, #7
 80063fc:	3308      	adds	r3, #8
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006402:	443b      	add	r3, r7
 8006404:	9309      	str	r3, [sp, #36]	; 0x24
 8006406:	e767      	b.n	80062d8 <_vfiprintf_r+0x94>
 8006408:	fb0c 3202 	mla	r2, ip, r2, r3
 800640c:	460c      	mov	r4, r1
 800640e:	2001      	movs	r0, #1
 8006410:	e7a5      	b.n	800635e <_vfiprintf_r+0x11a>
 8006412:	2300      	movs	r3, #0
 8006414:	3401      	adds	r4, #1
 8006416:	9305      	str	r3, [sp, #20]
 8006418:	4619      	mov	r1, r3
 800641a:	f04f 0c0a 	mov.w	ip, #10
 800641e:	4620      	mov	r0, r4
 8006420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006424:	3a30      	subs	r2, #48	; 0x30
 8006426:	2a09      	cmp	r2, #9
 8006428:	d903      	bls.n	8006432 <_vfiprintf_r+0x1ee>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0c5      	beq.n	80063ba <_vfiprintf_r+0x176>
 800642e:	9105      	str	r1, [sp, #20]
 8006430:	e7c3      	b.n	80063ba <_vfiprintf_r+0x176>
 8006432:	fb0c 2101 	mla	r1, ip, r1, r2
 8006436:	4604      	mov	r4, r0
 8006438:	2301      	movs	r3, #1
 800643a:	e7f0      	b.n	800641e <_vfiprintf_r+0x1da>
 800643c:	ab03      	add	r3, sp, #12
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	462a      	mov	r2, r5
 8006442:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <_vfiprintf_r+0x25c>)
 8006444:	a904      	add	r1, sp, #16
 8006446:	4630      	mov	r0, r6
 8006448:	f3af 8000 	nop.w
 800644c:	4607      	mov	r7, r0
 800644e:	1c78      	adds	r0, r7, #1
 8006450:	d1d6      	bne.n	8006400 <_vfiprintf_r+0x1bc>
 8006452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006454:	07d9      	lsls	r1, r3, #31
 8006456:	d405      	bmi.n	8006464 <_vfiprintf_r+0x220>
 8006458:	89ab      	ldrh	r3, [r5, #12]
 800645a:	059a      	lsls	r2, r3, #22
 800645c:	d402      	bmi.n	8006464 <_vfiprintf_r+0x220>
 800645e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006460:	f000 fc41 	bl	8006ce6 <__retarget_lock_release_recursive>
 8006464:	89ab      	ldrh	r3, [r5, #12]
 8006466:	065b      	lsls	r3, r3, #25
 8006468:	f53f af12 	bmi.w	8006290 <_vfiprintf_r+0x4c>
 800646c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800646e:	e711      	b.n	8006294 <_vfiprintf_r+0x50>
 8006470:	ab03      	add	r3, sp, #12
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	462a      	mov	r2, r5
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <_vfiprintf_r+0x25c>)
 8006478:	a904      	add	r1, sp, #16
 800647a:	4630      	mov	r0, r6
 800647c:	f000 f880 	bl	8006580 <_printf_i>
 8006480:	e7e4      	b.n	800644c <_vfiprintf_r+0x208>
 8006482:	bf00      	nop
 8006484:	080073e4 	.word	0x080073e4
 8006488:	08007404 	.word	0x08007404
 800648c:	080073c4 	.word	0x080073c4
 8006490:	08007391 	.word	0x08007391
 8006494:	08007397 	.word	0x08007397
 8006498:	0800739b 	.word	0x0800739b
 800649c:	00000000 	.word	0x00000000
 80064a0:	0800621f 	.word	0x0800621f

080064a4 <_printf_common>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	4616      	mov	r6, r2
 80064aa:	4699      	mov	r9, r3
 80064ac:	688a      	ldr	r2, [r1, #8]
 80064ae:	690b      	ldr	r3, [r1, #16]
 80064b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064b4:	4293      	cmp	r3, r2
 80064b6:	bfb8      	it	lt
 80064b8:	4613      	movlt	r3, r2
 80064ba:	6033      	str	r3, [r6, #0]
 80064bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064c0:	4607      	mov	r7, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	b10a      	cbz	r2, 80064ca <_printf_common+0x26>
 80064c6:	3301      	adds	r3, #1
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	0699      	lsls	r1, r3, #26
 80064ce:	bf42      	ittt	mi
 80064d0:	6833      	ldrmi	r3, [r6, #0]
 80064d2:	3302      	addmi	r3, #2
 80064d4:	6033      	strmi	r3, [r6, #0]
 80064d6:	6825      	ldr	r5, [r4, #0]
 80064d8:	f015 0506 	ands.w	r5, r5, #6
 80064dc:	d106      	bne.n	80064ec <_printf_common+0x48>
 80064de:	f104 0a19 	add.w	sl, r4, #25
 80064e2:	68e3      	ldr	r3, [r4, #12]
 80064e4:	6832      	ldr	r2, [r6, #0]
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	dc26      	bgt.n	800653a <_printf_common+0x96>
 80064ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064f0:	1e13      	subs	r3, r2, #0
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	bf18      	it	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	0692      	lsls	r2, r2, #26
 80064fa:	d42b      	bmi.n	8006554 <_printf_common+0xb0>
 80064fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006500:	4649      	mov	r1, r9
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d01e      	beq.n	8006548 <_printf_common+0xa4>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	68e5      	ldr	r5, [r4, #12]
 800650e:	6832      	ldr	r2, [r6, #0]
 8006510:	f003 0306 	and.w	r3, r3, #6
 8006514:	2b04      	cmp	r3, #4
 8006516:	bf08      	it	eq
 8006518:	1aad      	subeq	r5, r5, r2
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	6922      	ldr	r2, [r4, #16]
 800651e:	bf0c      	ite	eq
 8006520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006524:	2500      	movne	r5, #0
 8006526:	4293      	cmp	r3, r2
 8006528:	bfc4      	itt	gt
 800652a:	1a9b      	subgt	r3, r3, r2
 800652c:	18ed      	addgt	r5, r5, r3
 800652e:	2600      	movs	r6, #0
 8006530:	341a      	adds	r4, #26
 8006532:	42b5      	cmp	r5, r6
 8006534:	d11a      	bne.n	800656c <_printf_common+0xc8>
 8006536:	2000      	movs	r0, #0
 8006538:	e008      	b.n	800654c <_printf_common+0xa8>
 800653a:	2301      	movs	r3, #1
 800653c:	4652      	mov	r2, sl
 800653e:	4649      	mov	r1, r9
 8006540:	4638      	mov	r0, r7
 8006542:	47c0      	blx	r8
 8006544:	3001      	adds	r0, #1
 8006546:	d103      	bne.n	8006550 <_printf_common+0xac>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006550:	3501      	adds	r5, #1
 8006552:	e7c6      	b.n	80064e2 <_printf_common+0x3e>
 8006554:	18e1      	adds	r1, r4, r3
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	2030      	movs	r0, #48	; 0x30
 800655a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800655e:	4422      	add	r2, r4
 8006560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006568:	3302      	adds	r3, #2
 800656a:	e7c7      	b.n	80064fc <_printf_common+0x58>
 800656c:	2301      	movs	r3, #1
 800656e:	4622      	mov	r2, r4
 8006570:	4649      	mov	r1, r9
 8006572:	4638      	mov	r0, r7
 8006574:	47c0      	blx	r8
 8006576:	3001      	adds	r0, #1
 8006578:	d0e6      	beq.n	8006548 <_printf_common+0xa4>
 800657a:	3601      	adds	r6, #1
 800657c:	e7d9      	b.n	8006532 <_printf_common+0x8e>
	...

08006580 <_printf_i>:
 8006580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	7e0f      	ldrb	r7, [r1, #24]
 8006586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006588:	2f78      	cmp	r7, #120	; 0x78
 800658a:	4691      	mov	r9, r2
 800658c:	4680      	mov	r8, r0
 800658e:	460c      	mov	r4, r1
 8006590:	469a      	mov	sl, r3
 8006592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006596:	d807      	bhi.n	80065a8 <_printf_i+0x28>
 8006598:	2f62      	cmp	r7, #98	; 0x62
 800659a:	d80a      	bhi.n	80065b2 <_printf_i+0x32>
 800659c:	2f00      	cmp	r7, #0
 800659e:	f000 80d8 	beq.w	8006752 <_printf_i+0x1d2>
 80065a2:	2f58      	cmp	r7, #88	; 0x58
 80065a4:	f000 80a3 	beq.w	80066ee <_printf_i+0x16e>
 80065a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065b0:	e03a      	b.n	8006628 <_printf_i+0xa8>
 80065b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065b6:	2b15      	cmp	r3, #21
 80065b8:	d8f6      	bhi.n	80065a8 <_printf_i+0x28>
 80065ba:	a101      	add	r1, pc, #4	; (adr r1, 80065c0 <_printf_i+0x40>)
 80065bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065c0:	08006619 	.word	0x08006619
 80065c4:	0800662d 	.word	0x0800662d
 80065c8:	080065a9 	.word	0x080065a9
 80065cc:	080065a9 	.word	0x080065a9
 80065d0:	080065a9 	.word	0x080065a9
 80065d4:	080065a9 	.word	0x080065a9
 80065d8:	0800662d 	.word	0x0800662d
 80065dc:	080065a9 	.word	0x080065a9
 80065e0:	080065a9 	.word	0x080065a9
 80065e4:	080065a9 	.word	0x080065a9
 80065e8:	080065a9 	.word	0x080065a9
 80065ec:	08006739 	.word	0x08006739
 80065f0:	0800665d 	.word	0x0800665d
 80065f4:	0800671b 	.word	0x0800671b
 80065f8:	080065a9 	.word	0x080065a9
 80065fc:	080065a9 	.word	0x080065a9
 8006600:	0800675b 	.word	0x0800675b
 8006604:	080065a9 	.word	0x080065a9
 8006608:	0800665d 	.word	0x0800665d
 800660c:	080065a9 	.word	0x080065a9
 8006610:	080065a9 	.word	0x080065a9
 8006614:	08006723 	.word	0x08006723
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	602a      	str	r2, [r5, #0]
 8006620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006628:	2301      	movs	r3, #1
 800662a:	e0a3      	b.n	8006774 <_printf_i+0x1f4>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	6829      	ldr	r1, [r5, #0]
 8006630:	0606      	lsls	r6, r0, #24
 8006632:	f101 0304 	add.w	r3, r1, #4
 8006636:	d50a      	bpl.n	800664e <_printf_i+0xce>
 8006638:	680e      	ldr	r6, [r1, #0]
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	2e00      	cmp	r6, #0
 800663e:	da03      	bge.n	8006648 <_printf_i+0xc8>
 8006640:	232d      	movs	r3, #45	; 0x2d
 8006642:	4276      	negs	r6, r6
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006648:	485e      	ldr	r0, [pc, #376]	; (80067c4 <_printf_i+0x244>)
 800664a:	230a      	movs	r3, #10
 800664c:	e019      	b.n	8006682 <_printf_i+0x102>
 800664e:	680e      	ldr	r6, [r1, #0]
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006656:	bf18      	it	ne
 8006658:	b236      	sxthne	r6, r6
 800665a:	e7ef      	b.n	800663c <_printf_i+0xbc>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	6820      	ldr	r0, [r4, #0]
 8006660:	1d19      	adds	r1, r3, #4
 8006662:	6029      	str	r1, [r5, #0]
 8006664:	0601      	lsls	r1, r0, #24
 8006666:	d501      	bpl.n	800666c <_printf_i+0xec>
 8006668:	681e      	ldr	r6, [r3, #0]
 800666a:	e002      	b.n	8006672 <_printf_i+0xf2>
 800666c:	0646      	lsls	r6, r0, #25
 800666e:	d5fb      	bpl.n	8006668 <_printf_i+0xe8>
 8006670:	881e      	ldrh	r6, [r3, #0]
 8006672:	4854      	ldr	r0, [pc, #336]	; (80067c4 <_printf_i+0x244>)
 8006674:	2f6f      	cmp	r7, #111	; 0x6f
 8006676:	bf0c      	ite	eq
 8006678:	2308      	moveq	r3, #8
 800667a:	230a      	movne	r3, #10
 800667c:	2100      	movs	r1, #0
 800667e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006682:	6865      	ldr	r5, [r4, #4]
 8006684:	60a5      	str	r5, [r4, #8]
 8006686:	2d00      	cmp	r5, #0
 8006688:	bfa2      	ittt	ge
 800668a:	6821      	ldrge	r1, [r4, #0]
 800668c:	f021 0104 	bicge.w	r1, r1, #4
 8006690:	6021      	strge	r1, [r4, #0]
 8006692:	b90e      	cbnz	r6, 8006698 <_printf_i+0x118>
 8006694:	2d00      	cmp	r5, #0
 8006696:	d04d      	beq.n	8006734 <_printf_i+0x1b4>
 8006698:	4615      	mov	r5, r2
 800669a:	fbb6 f1f3 	udiv	r1, r6, r3
 800669e:	fb03 6711 	mls	r7, r3, r1, r6
 80066a2:	5dc7      	ldrb	r7, [r0, r7]
 80066a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066a8:	4637      	mov	r7, r6
 80066aa:	42bb      	cmp	r3, r7
 80066ac:	460e      	mov	r6, r1
 80066ae:	d9f4      	bls.n	800669a <_printf_i+0x11a>
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d10b      	bne.n	80066cc <_printf_i+0x14c>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	07de      	lsls	r6, r3, #31
 80066b8:	d508      	bpl.n	80066cc <_printf_i+0x14c>
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	6861      	ldr	r1, [r4, #4]
 80066be:	4299      	cmp	r1, r3
 80066c0:	bfde      	ittt	le
 80066c2:	2330      	movle	r3, #48	; 0x30
 80066c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80066cc:	1b52      	subs	r2, r2, r5
 80066ce:	6122      	str	r2, [r4, #16]
 80066d0:	f8cd a000 	str.w	sl, [sp]
 80066d4:	464b      	mov	r3, r9
 80066d6:	aa03      	add	r2, sp, #12
 80066d8:	4621      	mov	r1, r4
 80066da:	4640      	mov	r0, r8
 80066dc:	f7ff fee2 	bl	80064a4 <_printf_common>
 80066e0:	3001      	adds	r0, #1
 80066e2:	d14c      	bne.n	800677e <_printf_i+0x1fe>
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066e8:	b004      	add	sp, #16
 80066ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ee:	4835      	ldr	r0, [pc, #212]	; (80067c4 <_printf_i+0x244>)
 80066f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066f4:	6829      	ldr	r1, [r5, #0]
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80066fc:	6029      	str	r1, [r5, #0]
 80066fe:	061d      	lsls	r5, r3, #24
 8006700:	d514      	bpl.n	800672c <_printf_i+0x1ac>
 8006702:	07df      	lsls	r7, r3, #31
 8006704:	bf44      	itt	mi
 8006706:	f043 0320 	orrmi.w	r3, r3, #32
 800670a:	6023      	strmi	r3, [r4, #0]
 800670c:	b91e      	cbnz	r6, 8006716 <_printf_i+0x196>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	f023 0320 	bic.w	r3, r3, #32
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	2310      	movs	r3, #16
 8006718:	e7b0      	b.n	800667c <_printf_i+0xfc>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	f043 0320 	orr.w	r3, r3, #32
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	2378      	movs	r3, #120	; 0x78
 8006724:	4828      	ldr	r0, [pc, #160]	; (80067c8 <_printf_i+0x248>)
 8006726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800672a:	e7e3      	b.n	80066f4 <_printf_i+0x174>
 800672c:	0659      	lsls	r1, r3, #25
 800672e:	bf48      	it	mi
 8006730:	b2b6      	uxthmi	r6, r6
 8006732:	e7e6      	b.n	8006702 <_printf_i+0x182>
 8006734:	4615      	mov	r5, r2
 8006736:	e7bb      	b.n	80066b0 <_printf_i+0x130>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	6826      	ldr	r6, [r4, #0]
 800673c:	6961      	ldr	r1, [r4, #20]
 800673e:	1d18      	adds	r0, r3, #4
 8006740:	6028      	str	r0, [r5, #0]
 8006742:	0635      	lsls	r5, r6, #24
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	d501      	bpl.n	800674c <_printf_i+0x1cc>
 8006748:	6019      	str	r1, [r3, #0]
 800674a:	e002      	b.n	8006752 <_printf_i+0x1d2>
 800674c:	0670      	lsls	r0, r6, #25
 800674e:	d5fb      	bpl.n	8006748 <_printf_i+0x1c8>
 8006750:	8019      	strh	r1, [r3, #0]
 8006752:	2300      	movs	r3, #0
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	4615      	mov	r5, r2
 8006758:	e7ba      	b.n	80066d0 <_printf_i+0x150>
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	1d1a      	adds	r2, r3, #4
 800675e:	602a      	str	r2, [r5, #0]
 8006760:	681d      	ldr	r5, [r3, #0]
 8006762:	6862      	ldr	r2, [r4, #4]
 8006764:	2100      	movs	r1, #0
 8006766:	4628      	mov	r0, r5
 8006768:	f7f9 fd0a 	bl	8000180 <memchr>
 800676c:	b108      	cbz	r0, 8006772 <_printf_i+0x1f2>
 800676e:	1b40      	subs	r0, r0, r5
 8006770:	6060      	str	r0, [r4, #4]
 8006772:	6863      	ldr	r3, [r4, #4]
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	2300      	movs	r3, #0
 8006778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677c:	e7a8      	b.n	80066d0 <_printf_i+0x150>
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	462a      	mov	r2, r5
 8006782:	4649      	mov	r1, r9
 8006784:	4640      	mov	r0, r8
 8006786:	47d0      	blx	sl
 8006788:	3001      	adds	r0, #1
 800678a:	d0ab      	beq.n	80066e4 <_printf_i+0x164>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	079b      	lsls	r3, r3, #30
 8006790:	d413      	bmi.n	80067ba <_printf_i+0x23a>
 8006792:	68e0      	ldr	r0, [r4, #12]
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	4298      	cmp	r0, r3
 8006798:	bfb8      	it	lt
 800679a:	4618      	movlt	r0, r3
 800679c:	e7a4      	b.n	80066e8 <_printf_i+0x168>
 800679e:	2301      	movs	r3, #1
 80067a0:	4632      	mov	r2, r6
 80067a2:	4649      	mov	r1, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	47d0      	blx	sl
 80067a8:	3001      	adds	r0, #1
 80067aa:	d09b      	beq.n	80066e4 <_printf_i+0x164>
 80067ac:	3501      	adds	r5, #1
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	9903      	ldr	r1, [sp, #12]
 80067b2:	1a5b      	subs	r3, r3, r1
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dcf2      	bgt.n	800679e <_printf_i+0x21e>
 80067b8:	e7eb      	b.n	8006792 <_printf_i+0x212>
 80067ba:	2500      	movs	r5, #0
 80067bc:	f104 0619 	add.w	r6, r4, #25
 80067c0:	e7f5      	b.n	80067ae <_printf_i+0x22e>
 80067c2:	bf00      	nop
 80067c4:	080073a2 	.word	0x080073a2
 80067c8:	080073b3 	.word	0x080073b3

080067cc <_sbrk_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d06      	ldr	r5, [pc, #24]	; (80067e8 <_sbrk_r+0x1c>)
 80067d0:	2300      	movs	r3, #0
 80067d2:	4604      	mov	r4, r0
 80067d4:	4608      	mov	r0, r1
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	f7fb fe16 	bl	8002408 <_sbrk>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d102      	bne.n	80067e6 <_sbrk_r+0x1a>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	b103      	cbz	r3, 80067e6 <_sbrk_r+0x1a>
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	20000370 	.word	0x20000370

080067ec <__swbuf_r>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	460e      	mov	r6, r1
 80067f0:	4614      	mov	r4, r2
 80067f2:	4605      	mov	r5, r0
 80067f4:	b118      	cbz	r0, 80067fe <__swbuf_r+0x12>
 80067f6:	6983      	ldr	r3, [r0, #24]
 80067f8:	b90b      	cbnz	r3, 80067fe <__swbuf_r+0x12>
 80067fa:	f000 f9d5 	bl	8006ba8 <__sinit>
 80067fe:	4b21      	ldr	r3, [pc, #132]	; (8006884 <__swbuf_r+0x98>)
 8006800:	429c      	cmp	r4, r3
 8006802:	d12b      	bne.n	800685c <__swbuf_r+0x70>
 8006804:	686c      	ldr	r4, [r5, #4]
 8006806:	69a3      	ldr	r3, [r4, #24]
 8006808:	60a3      	str	r3, [r4, #8]
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	071a      	lsls	r2, r3, #28
 800680e:	d52f      	bpl.n	8006870 <__swbuf_r+0x84>
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	b36b      	cbz	r3, 8006870 <__swbuf_r+0x84>
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	6820      	ldr	r0, [r4, #0]
 8006818:	1ac0      	subs	r0, r0, r3
 800681a:	6963      	ldr	r3, [r4, #20]
 800681c:	b2f6      	uxtb	r6, r6
 800681e:	4283      	cmp	r3, r0
 8006820:	4637      	mov	r7, r6
 8006822:	dc04      	bgt.n	800682e <__swbuf_r+0x42>
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f92a 	bl	8006a80 <_fflush_r>
 800682c:	bb30      	cbnz	r0, 800687c <__swbuf_r+0x90>
 800682e:	68a3      	ldr	r3, [r4, #8]
 8006830:	3b01      	subs	r3, #1
 8006832:	60a3      	str	r3, [r4, #8]
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	6022      	str	r2, [r4, #0]
 800683a:	701e      	strb	r6, [r3, #0]
 800683c:	6963      	ldr	r3, [r4, #20]
 800683e:	3001      	adds	r0, #1
 8006840:	4283      	cmp	r3, r0
 8006842:	d004      	beq.n	800684e <__swbuf_r+0x62>
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	07db      	lsls	r3, r3, #31
 8006848:	d506      	bpl.n	8006858 <__swbuf_r+0x6c>
 800684a:	2e0a      	cmp	r6, #10
 800684c:	d104      	bne.n	8006858 <__swbuf_r+0x6c>
 800684e:	4621      	mov	r1, r4
 8006850:	4628      	mov	r0, r5
 8006852:	f000 f915 	bl	8006a80 <_fflush_r>
 8006856:	b988      	cbnz	r0, 800687c <__swbuf_r+0x90>
 8006858:	4638      	mov	r0, r7
 800685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <__swbuf_r+0x9c>)
 800685e:	429c      	cmp	r4, r3
 8006860:	d101      	bne.n	8006866 <__swbuf_r+0x7a>
 8006862:	68ac      	ldr	r4, [r5, #8]
 8006864:	e7cf      	b.n	8006806 <__swbuf_r+0x1a>
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <__swbuf_r+0xa0>)
 8006868:	429c      	cmp	r4, r3
 800686a:	bf08      	it	eq
 800686c:	68ec      	ldreq	r4, [r5, #12]
 800686e:	e7ca      	b.n	8006806 <__swbuf_r+0x1a>
 8006870:	4621      	mov	r1, r4
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f80c 	bl	8006890 <__swsetup_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	d0cb      	beq.n	8006814 <__swbuf_r+0x28>
 800687c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006880:	e7ea      	b.n	8006858 <__swbuf_r+0x6c>
 8006882:	bf00      	nop
 8006884:	080073e4 	.word	0x080073e4
 8006888:	08007404 	.word	0x08007404
 800688c:	080073c4 	.word	0x080073c4

08006890 <__swsetup_r>:
 8006890:	4b32      	ldr	r3, [pc, #200]	; (800695c <__swsetup_r+0xcc>)
 8006892:	b570      	push	{r4, r5, r6, lr}
 8006894:	681d      	ldr	r5, [r3, #0]
 8006896:	4606      	mov	r6, r0
 8006898:	460c      	mov	r4, r1
 800689a:	b125      	cbz	r5, 80068a6 <__swsetup_r+0x16>
 800689c:	69ab      	ldr	r3, [r5, #24]
 800689e:	b913      	cbnz	r3, 80068a6 <__swsetup_r+0x16>
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 f981 	bl	8006ba8 <__sinit>
 80068a6:	4b2e      	ldr	r3, [pc, #184]	; (8006960 <__swsetup_r+0xd0>)
 80068a8:	429c      	cmp	r4, r3
 80068aa:	d10f      	bne.n	80068cc <__swsetup_r+0x3c>
 80068ac:	686c      	ldr	r4, [r5, #4]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068b4:	0719      	lsls	r1, r3, #28
 80068b6:	d42c      	bmi.n	8006912 <__swsetup_r+0x82>
 80068b8:	06dd      	lsls	r5, r3, #27
 80068ba:	d411      	bmi.n	80068e0 <__swsetup_r+0x50>
 80068bc:	2309      	movs	r3, #9
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ca:	e03e      	b.n	800694a <__swsetup_r+0xba>
 80068cc:	4b25      	ldr	r3, [pc, #148]	; (8006964 <__swsetup_r+0xd4>)
 80068ce:	429c      	cmp	r4, r3
 80068d0:	d101      	bne.n	80068d6 <__swsetup_r+0x46>
 80068d2:	68ac      	ldr	r4, [r5, #8]
 80068d4:	e7eb      	b.n	80068ae <__swsetup_r+0x1e>
 80068d6:	4b24      	ldr	r3, [pc, #144]	; (8006968 <__swsetup_r+0xd8>)
 80068d8:	429c      	cmp	r4, r3
 80068da:	bf08      	it	eq
 80068dc:	68ec      	ldreq	r4, [r5, #12]
 80068de:	e7e6      	b.n	80068ae <__swsetup_r+0x1e>
 80068e0:	0758      	lsls	r0, r3, #29
 80068e2:	d512      	bpl.n	800690a <__swsetup_r+0x7a>
 80068e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068e6:	b141      	cbz	r1, 80068fa <__swsetup_r+0x6a>
 80068e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ec:	4299      	cmp	r1, r3
 80068ee:	d002      	beq.n	80068f6 <__swsetup_r+0x66>
 80068f0:	4630      	mov	r0, r6
 80068f2:	f7ff fa45 	bl	8005d80 <_free_r>
 80068f6:	2300      	movs	r3, #0
 80068f8:	6363      	str	r3, [r4, #52]	; 0x34
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	2300      	movs	r3, #0
 8006904:	6063      	str	r3, [r4, #4]
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	b94b      	cbnz	r3, 800692a <__swsetup_r+0x9a>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800691c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006920:	d003      	beq.n	800692a <__swsetup_r+0x9a>
 8006922:	4621      	mov	r1, r4
 8006924:	4630      	mov	r0, r6
 8006926:	f000 fa05 	bl	8006d34 <__smakebuf_r>
 800692a:	89a0      	ldrh	r0, [r4, #12]
 800692c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006930:	f010 0301 	ands.w	r3, r0, #1
 8006934:	d00a      	beq.n	800694c <__swsetup_r+0xbc>
 8006936:	2300      	movs	r3, #0
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	6963      	ldr	r3, [r4, #20]
 800693c:	425b      	negs	r3, r3
 800693e:	61a3      	str	r3, [r4, #24]
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	b943      	cbnz	r3, 8006956 <__swsetup_r+0xc6>
 8006944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006948:	d1ba      	bne.n	80068c0 <__swsetup_r+0x30>
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	0781      	lsls	r1, r0, #30
 800694e:	bf58      	it	pl
 8006950:	6963      	ldrpl	r3, [r4, #20]
 8006952:	60a3      	str	r3, [r4, #8]
 8006954:	e7f4      	b.n	8006940 <__swsetup_r+0xb0>
 8006956:	2000      	movs	r0, #0
 8006958:	e7f7      	b.n	800694a <__swsetup_r+0xba>
 800695a:	bf00      	nop
 800695c:	20000014 	.word	0x20000014
 8006960:	080073e4 	.word	0x080073e4
 8006964:	08007404 	.word	0x08007404
 8006968:	080073c4 	.word	0x080073c4

0800696c <abort>:
 800696c:	b508      	push	{r3, lr}
 800696e:	2006      	movs	r0, #6
 8006970:	f000 fa9e 	bl	8006eb0 <raise>
 8006974:	2001      	movs	r0, #1
 8006976:	f7fb fcd4 	bl	8002322 <_exit>
	...

0800697c <__sflush_r>:
 800697c:	898a      	ldrh	r2, [r1, #12]
 800697e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006980:	4605      	mov	r5, r0
 8006982:	0710      	lsls	r0, r2, #28
 8006984:	460c      	mov	r4, r1
 8006986:	d457      	bmi.n	8006a38 <__sflush_r+0xbc>
 8006988:	684b      	ldr	r3, [r1, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dc04      	bgt.n	8006998 <__sflush_r+0x1c>
 800698e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc01      	bgt.n	8006998 <__sflush_r+0x1c>
 8006994:	2000      	movs	r0, #0
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800699a:	2e00      	cmp	r6, #0
 800699c:	d0fa      	beq.n	8006994 <__sflush_r+0x18>
 800699e:	2300      	movs	r3, #0
 80069a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069a4:	682f      	ldr	r7, [r5, #0]
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	d032      	beq.n	8006a10 <__sflush_r+0x94>
 80069aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	075a      	lsls	r2, r3, #29
 80069b0:	d505      	bpl.n	80069be <__sflush_r+0x42>
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	1ac0      	subs	r0, r0, r3
 80069b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b8:	b10b      	cbz	r3, 80069be <__sflush_r+0x42>
 80069ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069bc:	1ac0      	subs	r0, r0, r3
 80069be:	2300      	movs	r3, #0
 80069c0:	4602      	mov	r2, r0
 80069c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069c4:	6a21      	ldr	r1, [r4, #32]
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b0      	blx	r6
 80069ca:	1c43      	adds	r3, r0, #1
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	d106      	bne.n	80069de <__sflush_r+0x62>
 80069d0:	6829      	ldr	r1, [r5, #0]
 80069d2:	291d      	cmp	r1, #29
 80069d4:	d82c      	bhi.n	8006a30 <__sflush_r+0xb4>
 80069d6:	4a29      	ldr	r2, [pc, #164]	; (8006a7c <__sflush_r+0x100>)
 80069d8:	40ca      	lsrs	r2, r1
 80069da:	07d6      	lsls	r6, r2, #31
 80069dc:	d528      	bpl.n	8006a30 <__sflush_r+0xb4>
 80069de:	2200      	movs	r2, #0
 80069e0:	6062      	str	r2, [r4, #4]
 80069e2:	04d9      	lsls	r1, r3, #19
 80069e4:	6922      	ldr	r2, [r4, #16]
 80069e6:	6022      	str	r2, [r4, #0]
 80069e8:	d504      	bpl.n	80069f4 <__sflush_r+0x78>
 80069ea:	1c42      	adds	r2, r0, #1
 80069ec:	d101      	bne.n	80069f2 <__sflush_r+0x76>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	b903      	cbnz	r3, 80069f4 <__sflush_r+0x78>
 80069f2:	6560      	str	r0, [r4, #84]	; 0x54
 80069f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f6:	602f      	str	r7, [r5, #0]
 80069f8:	2900      	cmp	r1, #0
 80069fa:	d0cb      	beq.n	8006994 <__sflush_r+0x18>
 80069fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d002      	beq.n	8006a0a <__sflush_r+0x8e>
 8006a04:	4628      	mov	r0, r5
 8006a06:	f7ff f9bb 	bl	8005d80 <_free_r>
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a0e:	e7c2      	b.n	8006996 <__sflush_r+0x1a>
 8006a10:	6a21      	ldr	r1, [r4, #32]
 8006a12:	2301      	movs	r3, #1
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b0      	blx	r6
 8006a18:	1c41      	adds	r1, r0, #1
 8006a1a:	d1c7      	bne.n	80069ac <__sflush_r+0x30>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0c4      	beq.n	80069ac <__sflush_r+0x30>
 8006a22:	2b1d      	cmp	r3, #29
 8006a24:	d001      	beq.n	8006a2a <__sflush_r+0xae>
 8006a26:	2b16      	cmp	r3, #22
 8006a28:	d101      	bne.n	8006a2e <__sflush_r+0xb2>
 8006a2a:	602f      	str	r7, [r5, #0]
 8006a2c:	e7b2      	b.n	8006994 <__sflush_r+0x18>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	e7ae      	b.n	8006996 <__sflush_r+0x1a>
 8006a38:	690f      	ldr	r7, [r1, #16]
 8006a3a:	2f00      	cmp	r7, #0
 8006a3c:	d0aa      	beq.n	8006994 <__sflush_r+0x18>
 8006a3e:	0793      	lsls	r3, r2, #30
 8006a40:	680e      	ldr	r6, [r1, #0]
 8006a42:	bf08      	it	eq
 8006a44:	694b      	ldreq	r3, [r1, #20]
 8006a46:	600f      	str	r7, [r1, #0]
 8006a48:	bf18      	it	ne
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	1bf6      	subs	r6, r6, r7
 8006a4e:	608b      	str	r3, [r1, #8]
 8006a50:	2e00      	cmp	r6, #0
 8006a52:	dd9f      	ble.n	8006994 <__sflush_r+0x18>
 8006a54:	6a21      	ldr	r1, [r4, #32]
 8006a56:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a5a:	4633      	mov	r3, r6
 8006a5c:	463a      	mov	r2, r7
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47e0      	blx	ip
 8006a62:	2800      	cmp	r0, #0
 8006a64:	dc06      	bgt.n	8006a74 <__sflush_r+0xf8>
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a72:	e790      	b.n	8006996 <__sflush_r+0x1a>
 8006a74:	4407      	add	r7, r0
 8006a76:	1a36      	subs	r6, r6, r0
 8006a78:	e7ea      	b.n	8006a50 <__sflush_r+0xd4>
 8006a7a:	bf00      	nop
 8006a7c:	20400001 	.word	0x20400001

08006a80 <_fflush_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	690b      	ldr	r3, [r1, #16]
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	b913      	cbnz	r3, 8006a90 <_fflush_r+0x10>
 8006a8a:	2500      	movs	r5, #0
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	b118      	cbz	r0, 8006a9a <_fflush_r+0x1a>
 8006a92:	6983      	ldr	r3, [r0, #24]
 8006a94:	b90b      	cbnz	r3, 8006a9a <_fflush_r+0x1a>
 8006a96:	f000 f887 	bl	8006ba8 <__sinit>
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <_fflush_r+0x6c>)
 8006a9c:	429c      	cmp	r4, r3
 8006a9e:	d11b      	bne.n	8006ad8 <_fflush_r+0x58>
 8006aa0:	686c      	ldr	r4, [r5, #4]
 8006aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0ef      	beq.n	8006a8a <_fflush_r+0xa>
 8006aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aac:	07d0      	lsls	r0, r2, #31
 8006aae:	d404      	bmi.n	8006aba <_fflush_r+0x3a>
 8006ab0:	0599      	lsls	r1, r3, #22
 8006ab2:	d402      	bmi.n	8006aba <_fflush_r+0x3a>
 8006ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab6:	f000 f915 	bl	8006ce4 <__retarget_lock_acquire_recursive>
 8006aba:	4628      	mov	r0, r5
 8006abc:	4621      	mov	r1, r4
 8006abe:	f7ff ff5d 	bl	800697c <__sflush_r>
 8006ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac4:	07da      	lsls	r2, r3, #31
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	d4e0      	bmi.n	8006a8c <_fflush_r+0xc>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	059b      	lsls	r3, r3, #22
 8006ace:	d4dd      	bmi.n	8006a8c <_fflush_r+0xc>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad2:	f000 f908 	bl	8006ce6 <__retarget_lock_release_recursive>
 8006ad6:	e7d9      	b.n	8006a8c <_fflush_r+0xc>
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <_fflush_r+0x70>)
 8006ada:	429c      	cmp	r4, r3
 8006adc:	d101      	bne.n	8006ae2 <_fflush_r+0x62>
 8006ade:	68ac      	ldr	r4, [r5, #8]
 8006ae0:	e7df      	b.n	8006aa2 <_fflush_r+0x22>
 8006ae2:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <_fflush_r+0x74>)
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	bf08      	it	eq
 8006ae8:	68ec      	ldreq	r4, [r5, #12]
 8006aea:	e7da      	b.n	8006aa2 <_fflush_r+0x22>
 8006aec:	080073e4 	.word	0x080073e4
 8006af0:	08007404 	.word	0x08007404
 8006af4:	080073c4 	.word	0x080073c4

08006af8 <std>:
 8006af8:	2300      	movs	r3, #0
 8006afa:	b510      	push	{r4, lr}
 8006afc:	4604      	mov	r4, r0
 8006afe:	e9c0 3300 	strd	r3, r3, [r0]
 8006b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b06:	6083      	str	r3, [r0, #8]
 8006b08:	8181      	strh	r1, [r0, #12]
 8006b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b0c:	81c2      	strh	r2, [r0, #14]
 8006b0e:	6183      	str	r3, [r0, #24]
 8006b10:	4619      	mov	r1, r3
 8006b12:	2208      	movs	r2, #8
 8006b14:	305c      	adds	r0, #92	; 0x5c
 8006b16:	f7fe ffc9 	bl	8005aac <memset>
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <std+0x38>)
 8006b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <std+0x3c>)
 8006b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <std+0x40>)
 8006b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <std+0x44>)
 8006b28:	6224      	str	r4, [r4, #32]
 8006b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	08006ee9 	.word	0x08006ee9
 8006b34:	08006f0b 	.word	0x08006f0b
 8006b38:	08006f43 	.word	0x08006f43
 8006b3c:	08006f67 	.word	0x08006f67

08006b40 <_cleanup_r>:
 8006b40:	4901      	ldr	r1, [pc, #4]	; (8006b48 <_cleanup_r+0x8>)
 8006b42:	f000 b8af 	b.w	8006ca4 <_fwalk_reent>
 8006b46:	bf00      	nop
 8006b48:	08006a81 	.word	0x08006a81

08006b4c <__sfmoreglue>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	2268      	movs	r2, #104	; 0x68
 8006b50:	1e4d      	subs	r5, r1, #1
 8006b52:	4355      	muls	r5, r2
 8006b54:	460e      	mov	r6, r1
 8006b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b5a:	f7ff f97b 	bl	8005e54 <_malloc_r>
 8006b5e:	4604      	mov	r4, r0
 8006b60:	b140      	cbz	r0, 8006b74 <__sfmoreglue+0x28>
 8006b62:	2100      	movs	r1, #0
 8006b64:	e9c0 1600 	strd	r1, r6, [r0]
 8006b68:	300c      	adds	r0, #12
 8006b6a:	60a0      	str	r0, [r4, #8]
 8006b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b70:	f7fe ff9c 	bl	8005aac <memset>
 8006b74:	4620      	mov	r0, r4
 8006b76:	bd70      	pop	{r4, r5, r6, pc}

08006b78 <__sfp_lock_acquire>:
 8006b78:	4801      	ldr	r0, [pc, #4]	; (8006b80 <__sfp_lock_acquire+0x8>)
 8006b7a:	f000 b8b3 	b.w	8006ce4 <__retarget_lock_acquire_recursive>
 8006b7e:	bf00      	nop
 8006b80:	2000036d 	.word	0x2000036d

08006b84 <__sfp_lock_release>:
 8006b84:	4801      	ldr	r0, [pc, #4]	; (8006b8c <__sfp_lock_release+0x8>)
 8006b86:	f000 b8ae 	b.w	8006ce6 <__retarget_lock_release_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	2000036d 	.word	0x2000036d

08006b90 <__sinit_lock_acquire>:
 8006b90:	4801      	ldr	r0, [pc, #4]	; (8006b98 <__sinit_lock_acquire+0x8>)
 8006b92:	f000 b8a7 	b.w	8006ce4 <__retarget_lock_acquire_recursive>
 8006b96:	bf00      	nop
 8006b98:	2000036e 	.word	0x2000036e

08006b9c <__sinit_lock_release>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__sinit_lock_release+0x8>)
 8006b9e:	f000 b8a2 	b.w	8006ce6 <__retarget_lock_release_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	2000036e 	.word	0x2000036e

08006ba8 <__sinit>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	4604      	mov	r4, r0
 8006bac:	f7ff fff0 	bl	8006b90 <__sinit_lock_acquire>
 8006bb0:	69a3      	ldr	r3, [r4, #24]
 8006bb2:	b11b      	cbz	r3, 8006bbc <__sinit+0x14>
 8006bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb8:	f7ff bff0 	b.w	8006b9c <__sinit_lock_release>
 8006bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <__sinit+0x68>)
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <__sinit+0x6c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bca:	42a3      	cmp	r3, r4
 8006bcc:	bf04      	itt	eq
 8006bce:	2301      	moveq	r3, #1
 8006bd0:	61a3      	streq	r3, [r4, #24]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 f820 	bl	8006c18 <__sfp>
 8006bd8:	6060      	str	r0, [r4, #4]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f81c 	bl	8006c18 <__sfp>
 8006be0:	60a0      	str	r0, [r4, #8]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f818 	bl	8006c18 <__sfp>
 8006be8:	2200      	movs	r2, #0
 8006bea:	60e0      	str	r0, [r4, #12]
 8006bec:	2104      	movs	r1, #4
 8006bee:	6860      	ldr	r0, [r4, #4]
 8006bf0:	f7ff ff82 	bl	8006af8 <std>
 8006bf4:	68a0      	ldr	r0, [r4, #8]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	2109      	movs	r1, #9
 8006bfa:	f7ff ff7d 	bl	8006af8 <std>
 8006bfe:	68e0      	ldr	r0, [r4, #12]
 8006c00:	2202      	movs	r2, #2
 8006c02:	2112      	movs	r1, #18
 8006c04:	f7ff ff78 	bl	8006af8 <std>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	61a3      	str	r3, [r4, #24]
 8006c0c:	e7d2      	b.n	8006bb4 <__sinit+0xc>
 8006c0e:	bf00      	nop
 8006c10:	080071dc 	.word	0x080071dc
 8006c14:	08006b41 	.word	0x08006b41

08006c18 <__sfp>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	f7ff ffac 	bl	8006b78 <__sfp_lock_acquire>
 8006c20:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <__sfp+0x84>)
 8006c22:	681e      	ldr	r6, [r3, #0]
 8006c24:	69b3      	ldr	r3, [r6, #24]
 8006c26:	b913      	cbnz	r3, 8006c2e <__sfp+0x16>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f7ff ffbd 	bl	8006ba8 <__sinit>
 8006c2e:	3648      	adds	r6, #72	; 0x48
 8006c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	d503      	bpl.n	8006c40 <__sfp+0x28>
 8006c38:	6833      	ldr	r3, [r6, #0]
 8006c3a:	b30b      	cbz	r3, 8006c80 <__sfp+0x68>
 8006c3c:	6836      	ldr	r6, [r6, #0]
 8006c3e:	e7f7      	b.n	8006c30 <__sfp+0x18>
 8006c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c44:	b9d5      	cbnz	r5, 8006c7c <__sfp+0x64>
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <__sfp+0x88>)
 8006c48:	60e3      	str	r3, [r4, #12]
 8006c4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c50:	f000 f847 	bl	8006ce2 <__retarget_lock_init_recursive>
 8006c54:	f7ff ff96 	bl	8006b84 <__sfp_lock_release>
 8006c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c60:	6025      	str	r5, [r4, #0]
 8006c62:	61a5      	str	r5, [r4, #24]
 8006c64:	2208      	movs	r2, #8
 8006c66:	4629      	mov	r1, r5
 8006c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c6c:	f7fe ff1e 	bl	8005aac <memset>
 8006c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c78:	4620      	mov	r0, r4
 8006c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7c:	3468      	adds	r4, #104	; 0x68
 8006c7e:	e7d9      	b.n	8006c34 <__sfp+0x1c>
 8006c80:	2104      	movs	r1, #4
 8006c82:	4638      	mov	r0, r7
 8006c84:	f7ff ff62 	bl	8006b4c <__sfmoreglue>
 8006c88:	4604      	mov	r4, r0
 8006c8a:	6030      	str	r0, [r6, #0]
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d1d5      	bne.n	8006c3c <__sfp+0x24>
 8006c90:	f7ff ff78 	bl	8006b84 <__sfp_lock_release>
 8006c94:	230c      	movs	r3, #12
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	e7ee      	b.n	8006c78 <__sfp+0x60>
 8006c9a:	bf00      	nop
 8006c9c:	080071dc 	.word	0x080071dc
 8006ca0:	ffff0001 	.word	0xffff0001

08006ca4 <_fwalk_reent>:
 8006ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca8:	4606      	mov	r6, r0
 8006caa:	4688      	mov	r8, r1
 8006cac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cb0:	2700      	movs	r7, #0
 8006cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8006cba:	d505      	bpl.n	8006cc8 <_fwalk_reent+0x24>
 8006cbc:	6824      	ldr	r4, [r4, #0]
 8006cbe:	2c00      	cmp	r4, #0
 8006cc0:	d1f7      	bne.n	8006cb2 <_fwalk_reent+0xe>
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc8:	89ab      	ldrh	r3, [r5, #12]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d907      	bls.n	8006cde <_fwalk_reent+0x3a>
 8006cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	d003      	beq.n	8006cde <_fwalk_reent+0x3a>
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4630      	mov	r0, r6
 8006cda:	47c0      	blx	r8
 8006cdc:	4307      	orrs	r7, r0
 8006cde:	3568      	adds	r5, #104	; 0x68
 8006ce0:	e7e9      	b.n	8006cb6 <_fwalk_reent+0x12>

08006ce2 <__retarget_lock_init_recursive>:
 8006ce2:	4770      	bx	lr

08006ce4 <__retarget_lock_acquire_recursive>:
 8006ce4:	4770      	bx	lr

08006ce6 <__retarget_lock_release_recursive>:
 8006ce6:	4770      	bx	lr

08006ce8 <__swhatbuf_r>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	460e      	mov	r6, r1
 8006cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf0:	2900      	cmp	r1, #0
 8006cf2:	b096      	sub	sp, #88	; 0x58
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	da08      	bge.n	8006d0c <__swhatbuf_r+0x24>
 8006cfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	602a      	str	r2, [r5, #0]
 8006d02:	061a      	lsls	r2, r3, #24
 8006d04:	d410      	bmi.n	8006d28 <__swhatbuf_r+0x40>
 8006d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0a:	e00e      	b.n	8006d2a <__swhatbuf_r+0x42>
 8006d0c:	466a      	mov	r2, sp
 8006d0e:	f000 f951 	bl	8006fb4 <_fstat_r>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	dbf1      	blt.n	8006cfa <__swhatbuf_r+0x12>
 8006d16:	9a01      	ldr	r2, [sp, #4]
 8006d18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d20:	425a      	negs	r2, r3
 8006d22:	415a      	adcs	r2, r3
 8006d24:	602a      	str	r2, [r5, #0]
 8006d26:	e7ee      	b.n	8006d06 <__swhatbuf_r+0x1e>
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	b016      	add	sp, #88	; 0x58
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d34 <__smakebuf_r>:
 8006d34:	898b      	ldrh	r3, [r1, #12]
 8006d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d38:	079d      	lsls	r5, r3, #30
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	d507      	bpl.n	8006d50 <__smakebuf_r+0x1c>
 8006d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	2301      	movs	r3, #1
 8006d4a:	6163      	str	r3, [r4, #20]
 8006d4c:	b002      	add	sp, #8
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	ab01      	add	r3, sp, #4
 8006d52:	466a      	mov	r2, sp
 8006d54:	f7ff ffc8 	bl	8006ce8 <__swhatbuf_r>
 8006d58:	9900      	ldr	r1, [sp, #0]
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7ff f879 	bl	8005e54 <_malloc_r>
 8006d62:	b948      	cbnz	r0, 8006d78 <__smakebuf_r+0x44>
 8006d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d68:	059a      	lsls	r2, r3, #22
 8006d6a:	d4ef      	bmi.n	8006d4c <__smakebuf_r+0x18>
 8006d6c:	f023 0303 	bic.w	r3, r3, #3
 8006d70:	f043 0302 	orr.w	r3, r3, #2
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	e7e3      	b.n	8006d40 <__smakebuf_r+0xc>
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <__smakebuf_r+0x7c>)
 8006d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	6020      	str	r0, [r4, #0]
 8006d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	9b00      	ldr	r3, [sp, #0]
 8006d88:	6163      	str	r3, [r4, #20]
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	6120      	str	r0, [r4, #16]
 8006d8e:	b15b      	cbz	r3, 8006da8 <__smakebuf_r+0x74>
 8006d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d94:	4630      	mov	r0, r6
 8006d96:	f000 f91f 	bl	8006fd8 <_isatty_r>
 8006d9a:	b128      	cbz	r0, 8006da8 <__smakebuf_r+0x74>
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	f023 0303 	bic.w	r3, r3, #3
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	89a0      	ldrh	r0, [r4, #12]
 8006daa:	4305      	orrs	r5, r0
 8006dac:	81a5      	strh	r5, [r4, #12]
 8006dae:	e7cd      	b.n	8006d4c <__smakebuf_r+0x18>
 8006db0:	08006b41 	.word	0x08006b41

08006db4 <memmove>:
 8006db4:	4288      	cmp	r0, r1
 8006db6:	b510      	push	{r4, lr}
 8006db8:	eb01 0402 	add.w	r4, r1, r2
 8006dbc:	d902      	bls.n	8006dc4 <memmove+0x10>
 8006dbe:	4284      	cmp	r4, r0
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	d807      	bhi.n	8006dd4 <memmove+0x20>
 8006dc4:	1e43      	subs	r3, r0, #1
 8006dc6:	42a1      	cmp	r1, r4
 8006dc8:	d008      	beq.n	8006ddc <memmove+0x28>
 8006dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dd2:	e7f8      	b.n	8006dc6 <memmove+0x12>
 8006dd4:	4402      	add	r2, r0
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	428a      	cmp	r2, r1
 8006dda:	d100      	bne.n	8006dde <memmove+0x2a>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006de6:	e7f7      	b.n	8006dd8 <memmove+0x24>

08006de8 <__malloc_lock>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__malloc_lock+0x8>)
 8006dea:	f7ff bf7b 	b.w	8006ce4 <__retarget_lock_acquire_recursive>
 8006dee:	bf00      	nop
 8006df0:	2000036c 	.word	0x2000036c

08006df4 <__malloc_unlock>:
 8006df4:	4801      	ldr	r0, [pc, #4]	; (8006dfc <__malloc_unlock+0x8>)
 8006df6:	f7ff bf76 	b.w	8006ce6 <__retarget_lock_release_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	2000036c 	.word	0x2000036c

08006e00 <_realloc_r>:
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	4680      	mov	r8, r0
 8006e06:	4614      	mov	r4, r2
 8006e08:	460e      	mov	r6, r1
 8006e0a:	b921      	cbnz	r1, 8006e16 <_realloc_r+0x16>
 8006e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e10:	4611      	mov	r1, r2
 8006e12:	f7ff b81f 	b.w	8005e54 <_malloc_r>
 8006e16:	b92a      	cbnz	r2, 8006e24 <_realloc_r+0x24>
 8006e18:	f7fe ffb2 	bl	8005d80 <_free_r>
 8006e1c:	4625      	mov	r5, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	f000 f8fa 	bl	800701c <_malloc_usable_size_r>
 8006e28:	4284      	cmp	r4, r0
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	d802      	bhi.n	8006e34 <_realloc_r+0x34>
 8006e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e32:	d812      	bhi.n	8006e5a <_realloc_r+0x5a>
 8006e34:	4621      	mov	r1, r4
 8006e36:	4640      	mov	r0, r8
 8006e38:	f7ff f80c 	bl	8005e54 <_malloc_r>
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0ed      	beq.n	8006e1e <_realloc_r+0x1e>
 8006e42:	42bc      	cmp	r4, r7
 8006e44:	4622      	mov	r2, r4
 8006e46:	4631      	mov	r1, r6
 8006e48:	bf28      	it	cs
 8006e4a:	463a      	movcs	r2, r7
 8006e4c:	f7fe fe20 	bl	8005a90 <memcpy>
 8006e50:	4631      	mov	r1, r6
 8006e52:	4640      	mov	r0, r8
 8006e54:	f7fe ff94 	bl	8005d80 <_free_r>
 8006e58:	e7e1      	b.n	8006e1e <_realloc_r+0x1e>
 8006e5a:	4635      	mov	r5, r6
 8006e5c:	e7df      	b.n	8006e1e <_realloc_r+0x1e>

08006e5e <_raise_r>:
 8006e5e:	291f      	cmp	r1, #31
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4604      	mov	r4, r0
 8006e64:	460d      	mov	r5, r1
 8006e66:	d904      	bls.n	8006e72 <_raise_r+0x14>
 8006e68:	2316      	movs	r3, #22
 8006e6a:	6003      	str	r3, [r0, #0]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
 8006e72:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e74:	b112      	cbz	r2, 8006e7c <_raise_r+0x1e>
 8006e76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e7a:	b94b      	cbnz	r3, 8006e90 <_raise_r+0x32>
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 f831 	bl	8006ee4 <_getpid_r>
 8006e82:	462a      	mov	r2, r5
 8006e84:	4601      	mov	r1, r0
 8006e86:	4620      	mov	r0, r4
 8006e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e8c:	f000 b818 	b.w	8006ec0 <_kill_r>
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d00a      	beq.n	8006eaa <_raise_r+0x4c>
 8006e94:	1c59      	adds	r1, r3, #1
 8006e96:	d103      	bne.n	8006ea0 <_raise_r+0x42>
 8006e98:	2316      	movs	r3, #22
 8006e9a:	6003      	str	r3, [r0, #0]
 8006e9c:	2001      	movs	r0, #1
 8006e9e:	e7e7      	b.n	8006e70 <_raise_r+0x12>
 8006ea0:	2400      	movs	r4, #0
 8006ea2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	4798      	blx	r3
 8006eaa:	2000      	movs	r0, #0
 8006eac:	e7e0      	b.n	8006e70 <_raise_r+0x12>
	...

08006eb0 <raise>:
 8006eb0:	4b02      	ldr	r3, [pc, #8]	; (8006ebc <raise+0xc>)
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	f7ff bfd2 	b.w	8006e5e <_raise_r>
 8006eba:	bf00      	nop
 8006ebc:	20000014 	.word	0x20000014

08006ec0 <_kill_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d07      	ldr	r5, [pc, #28]	; (8006ee0 <_kill_r+0x20>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	4611      	mov	r1, r2
 8006ecc:	602b      	str	r3, [r5, #0]
 8006ece:	f7fb fa18 	bl	8002302 <_kill>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d102      	bne.n	8006edc <_kill_r+0x1c>
 8006ed6:	682b      	ldr	r3, [r5, #0]
 8006ed8:	b103      	cbz	r3, 8006edc <_kill_r+0x1c>
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	bd38      	pop	{r3, r4, r5, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000370 	.word	0x20000370

08006ee4 <_getpid_r>:
 8006ee4:	f7fb ba06 	b.w	80022f4 <_getpid>

08006ee8 <__sread>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	460c      	mov	r4, r1
 8006eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef0:	f000 f89c 	bl	800702c <_read_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	bfab      	itete	ge
 8006ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006efa:	89a3      	ldrhlt	r3, [r4, #12]
 8006efc:	181b      	addge	r3, r3, r0
 8006efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f02:	bfac      	ite	ge
 8006f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f06:	81a3      	strhlt	r3, [r4, #12]
 8006f08:	bd10      	pop	{r4, pc}

08006f0a <__swrite>:
 8006f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	461f      	mov	r7, r3
 8006f10:	898b      	ldrh	r3, [r1, #12]
 8006f12:	05db      	lsls	r3, r3, #23
 8006f14:	4605      	mov	r5, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	4616      	mov	r6, r2
 8006f1a:	d505      	bpl.n	8006f28 <__swrite+0x1e>
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	2302      	movs	r3, #2
 8006f22:	2200      	movs	r2, #0
 8006f24:	f000 f868 	bl	8006ff8 <_lseek_r>
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	4632      	mov	r2, r6
 8006f36:	463b      	mov	r3, r7
 8006f38:	4628      	mov	r0, r5
 8006f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	f000 b817 	b.w	8006f70 <_write_r>

08006f42 <__sseek>:
 8006f42:	b510      	push	{r4, lr}
 8006f44:	460c      	mov	r4, r1
 8006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4a:	f000 f855 	bl	8006ff8 <_lseek_r>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	bf15      	itete	ne
 8006f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f5e:	81a3      	strheq	r3, [r4, #12]
 8006f60:	bf18      	it	ne
 8006f62:	81a3      	strhne	r3, [r4, #12]
 8006f64:	bd10      	pop	{r4, pc}

08006f66 <__sclose>:
 8006f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6a:	f000 b813 	b.w	8006f94 <_close_r>
	...

08006f70 <_write_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	; (8006f90 <_write_r+0x20>)
 8006f74:	4604      	mov	r4, r0
 8006f76:	4608      	mov	r0, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f7fb f9f6 	bl	8002370 <_write>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_write_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_write_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	20000370 	.word	0x20000370

08006f94 <_close_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d06      	ldr	r5, [pc, #24]	; (8006fb0 <_close_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fb fa02 	bl	80023a8 <_close>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_close_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_close_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	20000370 	.word	0x20000370

08006fb4 <_fstat_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	; (8006fd4 <_fstat_r+0x20>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	f7fb f9fc 	bl	80023be <_fstat>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	d102      	bne.n	8006fd0 <_fstat_r+0x1c>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	b103      	cbz	r3, 8006fd0 <_fstat_r+0x1c>
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000370 	.word	0x20000370

08006fd8 <_isatty_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	; (8006ff4 <_isatty_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fb f9fa 	bl	80023dc <_isatty>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_isatty_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_isatty_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000370 	.word	0x20000370

08006ff8 <_lseek_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	; (8007018 <_lseek_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fb f9f2 	bl	80023f0 <_lseek>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_lseek_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_lseek_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20000370 	.word	0x20000370

0800701c <_malloc_usable_size_r>:
 800701c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007020:	1f18      	subs	r0, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	bfbc      	itt	lt
 8007026:	580b      	ldrlt	r3, [r1, r0]
 8007028:	18c0      	addlt	r0, r0, r3
 800702a:	4770      	bx	lr

0800702c <_read_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_read_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fb f97b 	bl	8002336 <_read>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_read_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_read_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000370 	.word	0x20000370

08007050 <_init>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	bf00      	nop
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr

0800705c <_fini>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr


STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec8  08006ec8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed0  08006ed0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08006f48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08006f48  00020290  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ee5  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7b  00000000  00000000  00034f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00037e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df28  00000000  00000000  0003a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001409d  00000000  00000000  000583a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b87cd  00000000  00000000  0006c43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c8  00000000  00000000  00124c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006d1c 	.word	0x08006d1c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006d1c 	.word	0x08006d1c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fd52 	bl	8000fe8 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000158 	.word	0x20000158

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fd48 	bl	8001004 <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f000 fdf9 	bl	8001198 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS], unsigned int numEvents) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <calendar_setEvents+0x24>)
 80005c0:	f005 ff24 	bl	800640c <memcpy>
	_numberEvents = numEvents;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <calendar_setEvents+0x28>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	20000154 	.word	0x20000154

080005dc <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	DateTime nextAlarm;

	// get calendar alarm for next alarm in event list relative to now
	nextAlarm = getNextAlarm();
 80005e2:	463b      	mov	r3, r7
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f86d 	bl	80006c4 <getNextAlarm>

	// set alarm for start of first event in list
	setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005ea:	78b8      	ldrb	r0, [r7, #2]
 80005ec:	78f9      	ldrb	r1, [r7, #3]
 80005ee:	793a      	ldrb	r2, [r7, #4]
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	f000 fe65 	bl	80012c0 <setAlarm_A>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
	DateTime nextAlarm;

	// get calendar alarm for next alarm in event list relative to now
	nextAlarm = getNextAlarm();
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f85c 	bl	80006c4 <getNextAlarm>

	// set alarm for start of first event in list
	setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 800060c:	78b8      	ldrb	r0, [r7, #2]
 800060e:	78f9      	ldrb	r1, [r7, #3]
 8000610:	793a      	ldrb	r2, [r7, #4]
 8000612:	797b      	ldrb	r3, [r7, #5]
 8000614:	f000 fe54 	bl	80012c0 <setAlarm_A>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	f107 0408 	add.w	r4, r7, #8
 800062a:	e884 0003 	stmia.w	r4, {r0, r1}
 800062e:	4639      	mov	r1, r7
 8000630:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	e893 0003 	ldmia.w	r3, {r0, r1}
 800063c:	f000 f80e 	bl	800065c <dateTimeToSeconds>
 8000640:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 8000642:	463b      	mov	r3, r7
 8000644:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000648:	f000 f808 	bl	800065c <dateTimeToSeconds>
 800064c:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	1ad3      	subs	r3, r2, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd90      	pop	{r4, r7, pc}

0800065c <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	463b      	mov	r3, r7
 8000664:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 800066c:	793b      	ldrb	r3, [r7, #4]
 800066e:	461a      	mov	r2, r3
 8000670:	4613      	mov	r3, r2
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	4619      	mov	r1, r3
 800067e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000682:	fb01 f303 	mul.w	r3, r1, r3
 8000686:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000688:	78bb      	ldrb	r3, [r7, #2]
 800068a:	3b01      	subs	r3, #1
 800068c:	490a      	ldr	r1, [pc, #40]	; (80006b8 <dateTimeToSeconds+0x5c>)
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000694:	787b      	ldrb	r3, [r7, #1]
 8000696:	3b01      	subs	r3, #1
 8000698:	4908      	ldr	r1, [pc, #32]	; (80006bc <dateTimeToSeconds+0x60>)
 800069a:	fb01 f303 	mul.w	r3, r1, r3
 800069e:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 80006a0:	783b      	ldrb	r3, [r7, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <dateTimeToSeconds+0x64>)
 80006a6:	fb01 f303 	mul.w	r3, r1, r3
 80006aa:	4413      	add	r3, r2
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	00015180 	.word	0x00015180
 80006bc:	00278d00 	.word	0x00278d00
 80006c0:	01da9c00 	.word	0x01da9c00

080006c4 <getNextAlarm>:


/*
 *
 */
DateTime getNextAlarm(void) {
 80006c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c6:	b095      	sub	sp, #84	; 0x54
 80006c8:	af06      	add	r7, sp, #24
 80006ca:	6078      	str	r0, [r7, #4]
	int eventIdx;
	bool nextAlarmFound;
	DateTime now;
	DateTime nextAlarmDateTime = {0};
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.month, &now.minute, &now.second);
 80006d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006da:	1c5c      	adds	r4, r3, #1
 80006dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006e0:	1c9a      	adds	r2, r3, #2
 80006e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006e6:	1c59      	adds	r1, r3, #1
 80006e8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80006ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f0:	3305      	adds	r3, #5
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f8:	3304      	adds	r3, #4
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	4623      	mov	r3, r4
 80006fe:	f000 fd4b 	bl	8001198 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any events, within an event, between events, or after all the events.
	eventIdx = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	637b      	str	r3, [r7, #52]	; 0x34
	nextAlarmFound = false;
 8000706:	2300      	movs	r3, #0
 8000708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 800070c:	e0bf      	b.n	800088e <getNextAlarm+0x1ca>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 800070e:	4989      	ldr	r1, [pc, #548]	; (8000934 <getNextAlarm+0x270>)
 8000710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	cb0c      	ldmia	r3, {r2, r3}
 800071e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000722:	c903      	ldmia	r1, {r0, r1}
 8000724:	f7ff ff7c 	bl	8000620 <compareDateTime>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	da44      	bge.n	80007b8 <getNextAlarm+0xf4>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 800072e:	4981      	ldr	r1, [pc, #516]	; (8000934 <getNextAlarm+0x270>)
 8000730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 8000742:	497c      	ldr	r1, [pc, #496]	; (8000934 <getNextAlarm+0x270>)
 8000744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000746:	4613      	mov	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	440b      	add	r3, r1
 8000750:	3301      	adds	r3, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 8000758:	4976      	ldr	r1, [pc, #472]	; (8000934 <getNextAlarm+0x270>)
 800075a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	440b      	add	r3, r1
 8000766:	3302      	adds	r3, #2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 800076e:	4971      	ldr	r1, [pc, #452]	; (8000934 <getNextAlarm+0x270>)
 8000770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	3303      	adds	r3, #3
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 8000784:	496b      	ldr	r1, [pc, #428]	; (8000934 <getNextAlarm+0x270>)
 8000786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	3304      	adds	r3, #4
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 800079a:	4966      	ldr	r1, [pc, #408]	; (8000934 <getNextAlarm+0x270>)
 800079c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	3305      	adds	r3, #5
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			// set found
			nextAlarmFound = true;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80007b6:	e06a      	b.n	800088e <getNextAlarm+0x1ca>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 80007b8:	495e      	ldr	r1, [pc, #376]	; (8000934 <getNextAlarm+0x270>)
 80007ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	cb0c      	ldmia	r3, {r2, r3}
 80007c8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80007cc:	c903      	ldmia	r1, {r0, r1}
 80007ce:	f7ff ff27 	bl	8000620 <compareDateTime>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db57      	blt.n	8000888 <getNextAlarm+0x1c4>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 80007d8:	4956      	ldr	r1, [pc, #344]	; (8000934 <getNextAlarm+0x270>)
 80007da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	440b      	add	r3, r1
 80007e6:	3308      	adds	r3, #8
 80007e8:	3304      	adds	r3, #4
 80007ea:	cb0c      	ldmia	r3, {r2, r3}
 80007ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80007f0:	c903      	ldmia	r1, {r0, r1}
 80007f2:	f7ff ff15 	bl	8000620 <compareDateTime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	da45      	bge.n	8000888 <getNextAlarm+0x1c4>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 80007fc:	494d      	ldr	r1, [pc, #308]	; (8000934 <getNextAlarm+0x270>)
 80007fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	330c      	adds	r3, #12
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 8000812:	4948      	ldr	r1, [pc, #288]	; (8000934 <getNextAlarm+0x270>)
 8000814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	330d      	adds	r3, #13
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 8000828:	4942      	ldr	r1, [pc, #264]	; (8000934 <getNextAlarm+0x270>)
 800082a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	330e      	adds	r3, #14
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 800083e:	493d      	ldr	r1, [pc, #244]	; (8000934 <getNextAlarm+0x270>)
 8000840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	330f      	adds	r3, #15
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 8000854:	4937      	ldr	r1, [pc, #220]	; (8000934 <getNextAlarm+0x270>)
 8000856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	440b      	add	r3, r1
 8000862:	3310      	adds	r3, #16
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 800086a:	4932      	ldr	r1, [pc, #200]	; (8000934 <getNextAlarm+0x270>)
 800086c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3311      	adds	r3, #17
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			// set found
			nextAlarmFound = true;
 8000880:	2301      	movs	r3, #1
 8000882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000886:	e002      	b.n	800088e <getNextAlarm+0x1ca>
		}

		// traverse to next event
		else {
			eventIdx++;
 8000888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088a:	3301      	adds	r3, #1
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <getNextAlarm+0x274>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000894:	429a      	cmp	r2, r3
 8000896:	da07      	bge.n	80008a8 <getNextAlarm+0x1e4>
 8000898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f47f af33 	bne.w	800070e <getNextAlarm+0x4a>
		}
	}

	// If there is no next alarm, then return a generic alarm for
	// the beginning of time (1/1/99 0:0:0)
	if (!nextAlarmFound) {
 80008a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ac:	f083 0301 	eor.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d011      	beq.n	80008da <getNextAlarm+0x216>
		nextAlarmDateTime.year = 99;
 80008b6:	2363      	movs	r3, #99	; 0x63
 80008b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		nextAlarmDateTime.month = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		nextAlarmDateTime.day = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		nextAlarmDateTime.hour = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		nextAlarmDateTime.minute = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		nextAlarmDateTime.second = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	}

	// Return the next alarm found.
	char messageBody[UART_MESSAGE_BODY_SIZE];
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", nextAlarmDateTime.year, nextAlarmDateTime.month, nextAlarmDateTime.day, nextAlarmDateTime.hour, nextAlarmDateTime.minute, nextAlarmDateTime.second);
 80008da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008de:	461e      	mov	r6, r3
 80008e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008e8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80008ec:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 80008f0:	4604      	mov	r4, r0
 80008f2:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 80008f6:	4605      	mov	r5, r0
 80008f8:	f107 0008 	add.w	r0, r7, #8
 80008fc:	9504      	str	r5, [sp, #16]
 80008fe:	9403      	str	r4, [sp, #12]
 8000900:	9102      	str	r1, [sp, #8]
 8000902:	9201      	str	r2, [sp, #4]
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	4633      	mov	r3, r6
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <getNextAlarm+0x278>)
 800090a:	211c      	movs	r1, #28
 800090c:	f005 fd94 	bl	8006438 <sniprintf>
	uartBasic_TX_IT("NEXT", messageBody);
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4619      	mov	r1, r3
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <getNextAlarm+0x27c>)
 8000918:	f000 feba 	bl	8001690 <uartBasic_TX_IT>
	return nextAlarmDateTime;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	461a      	mov	r2, r3
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	6010      	str	r0, [r2, #0]
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	8093      	strh	r3, [r2, #4]
}
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	373c      	adds	r7, #60	; 0x3c
 8000930:	46bd      	mov	sp, r7
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000934:	2000008c 	.word	0x2000008c
 8000938:	20000154 	.word	0x20000154
 800093c:	08006d34 	.word	0x08006d34
 8000940:	08006d58 	.word	0x08006d58

08000944 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800094c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000954:	f023 0218 	bic.w	r2, r3, #24
 8000958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4313      	orrs	r3, r2
 8000960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800097c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4313      	orrs	r3, r2
 8000984:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_UART_ErrorCallback+0x28>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d006      	beq.n	80009c0 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <HAL_UART_ErrorCallback+0x2c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d101      	bne.n	80009c0 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 80009bc:	f000 fee0 	bl	8001780 <uartBasic_Error_ISR>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40013800 	.word	0x40013800
 80009cc:	40004400 	.word	0x40004400

080009d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_UART_TxCpltCallback+0x28>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d006      	beq.n	80009f0 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <HAL_UART_TxCpltCallback+0x2c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d101      	bne.n	80009f0 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 80009ec:	f000 febc 	bl	8001768 <uartBasic_TX_Complete_ISR>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40013800 	.word	0x40013800
 80009fc:	40004400 	.word	0x40004400

08000a00 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_UART_RxCpltCallback+0x28>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d006      	beq.n	8000a20 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <HAL_UART_RxCpltCallback+0x2c>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d101      	bne.n	8000a20 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000a1c:	f000 fe98 	bl	8001750 <uartBasic_RX_Complete_ISR>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40004400 	.word	0x40004400

08000a30 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8000a38:	f7ff fde1 	bl	80005fe <calendar_AlarmA_ISR>

	// send message for debugging
	char messageBody[UART_MESSAGE_BODY_SIZE] = "\n\nALARM EVENT!\n\n\0";
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000a3e:	f107 040c 	add.w	r4, r7, #12
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	8023      	strh	r3, [r4, #0]
 8000a4c:	f107 031e 	add.w	r3, r7, #30
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	811a      	strh	r2, [r3, #8]
	uartBasic_TX_IT("TIME", messageBody);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <HAL_RTC_AlarmAEventCallback+0x40>)
 8000a60:	f000 fe16 	bl	8001690 <uartBasic_TX_IT>
}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	08006d68 	.word	0x08006d68
 8000a70:	08006d60 	.word	0x08006d60

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	b0c7      	sub	sp, #284	; 0x11c
 8000a78:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 ff0b 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f957 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f000 fa9f 	bl	8000fc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a86:	f000 fa47 	bl	8000f18 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000a8a:	f000 f9af 	bl	8000dec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f001 fac6 	bl	8002020 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 8000a94:	48a0      	ldr	r0, [pc, #640]	; (8000d18 <main+0x2a4>)
 8000a96:	f000 fded 	bl	8001674 <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000a9a:	48a0      	ldr	r0, [pc, #640]	; (8000d1c <main+0x2a8>)
 8000a9c:	f7ff fd48 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8000aa0:	4a9f      	ldr	r2, [pc, #636]	; (8000d20 <main+0x2ac>)
 8000aa2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aaa:	6018      	str	r0, [r3, #0]
 8000aac:	3304      	adds	r3, #4
 8000aae:	8019      	strh	r1, [r3, #0]
		  .day = 1,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 8000ab0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ab4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ab8:	f7ff fd4a 	bl	8000550 <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	22c8      	movs	r2, #200	; 0xc8
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fcaf 	bl	8006428 <memset>

  events[0].start.year = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 3020 	strb.w	r3, [r7, #32]
  events[0].start.month = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  events[0].start.day = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  events[0].start.hour = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  events[0].start.minute = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  events[0].start.second = 5;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  events[0].end.year = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  events[0].end.month = 2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  events[0].end.day = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  events[0].end.hour = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  events[0].end.minute = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  events[0].end.second = 20;
 8000b0c:	2314      	movs	r3, #20
 8000b0e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  events[1].start.year = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  events[1].start.month = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  events[1].start.day = 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  events[1].start.hour = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  events[1].start.minute = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  events[1].start.second = 30;
 8000b30:	231e      	movs	r3, #30
 8000b32:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  events[1].end.year = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  events[1].end.month = 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  events[1].end.day = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  events[1].end.hour = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  events[1].end.minute = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  events[1].end.second = 40;
 8000b54:	2328      	movs	r3, #40	; 0x28
 8000b56:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

  events[2].start.year = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  events[2].start.month = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  events[2].start.day = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  events[2].start.hour = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  events[2].start.minute = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  events[2].start.second = 50;
 8000b78:	2332      	movs	r3, #50	; 0x32
 8000b7a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  events[2].end.year = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  events[2].end.month = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  events[2].end.day = 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  events[2].end.hour = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  events[2].end.minute = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  events[2].end.second = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  events[3].start.year = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  events[3].start.month = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  events[3].start.day = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  events[3].start.hour = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  events[3].start.minute = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  events[3].start.second = 10;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  events[3].end.year = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  events[3].end.month = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  events[3].end.day = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  events[3].end.hour = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  events[3].end.minute = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  events[3].end.second = 20;
 8000be4:	2314      	movs	r3, #20
 8000be6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

  events[4].start.year = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  events[4].start.month = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  events[4].start.day = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
  events[4].start.hour = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  events[4].start.minute = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  events[4].start.second = 30;
 8000c08:	231e      	movs	r3, #30
 8000c0a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  events[4].end.year = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  events[4].end.month = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  events[4].end.day = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  events[4].end.hour = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  events[4].end.minute = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  events[4].end.second = 40;
 8000c2c:	2328      	movs	r3, #40	; 0x28
 8000c2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

  calendar_setEvents(events, 5);
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2105      	movs	r1, #5
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fcb9 	bl	80005b0 <calendar_setEvents>

  // start calendar
//  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  calendar_start();
 8000c3e:	f7ff fccd 	bl	80005dc <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8000c42:	f000 fd47 	bl	80016d4 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  int timeSeconds = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  int timeMinutes = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 8000c58:	463a      	mov	r2, r7
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fd4b 	bl	80016fc <uartBasic_get_RX>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

	  // if message present, handle message
	  if (messageStatus == true) {
 8000c6c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00d      	beq.n	8000c90 <main+0x21c>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 8000c74:	463a      	mov	r2, r7
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fd07 	bl	8001690 <uartBasic_TX_IT>
		  messageCount++;
 8000c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c86:	3301      	adds	r3, #1
 8000c88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  uartBasic_RX_IT();
 8000c8c:	f000 fd22 	bl	80016d4 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8000c90:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fc71 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	221c      	movs	r2, #28
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 fbc1 	bl	8006428 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000ca6:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8000caa:	461e      	mov	r6, r3
 8000cac:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8000cb0:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8000cb4:	f897 10eb 	ldrb.w	r1, [r7, #235]	; 0xeb
 8000cb8:	f897 00ec 	ldrb.w	r0, [r7, #236]	; 0xec
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	f897 00ed 	ldrb.w	r0, [r7, #237]	; 0xed
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	4638      	mov	r0, r7
 8000cc6:	9504      	str	r5, [sp, #16]
 8000cc8:	9403      	str	r4, [sp, #12]
 8000cca:	9102      	str	r1, [sp, #8]
 8000ccc:	9201      	str	r2, [sp, #4]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	4633      	mov	r3, r6
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <main+0x2b0>)
 8000cd4:	211c      	movs	r1, #28
 8000cd6:	f005 fbaf 	bl	8006438 <sniprintf>
	  uartBasic_TX_IT("TIME", messageBody);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4812      	ldr	r0, [pc, #72]	; (8000d28 <main+0x2b4>)
 8000ce0:	f000 fcd6 	bl	8001690 <uartBasic_TX_IT>
	  timeSeconds++;
 8000ce4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  timeMinutes++;
 8000cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	  long int i = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000cfe:	e004      	b.n	8000d0a <main+0x296>
		  i++;
 8000d00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d04:	3301      	adds	r3, #1
 8000d06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  while (i < 65535*2)
 8000d0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <main+0x2b8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	ddf5      	ble.n	8000d00 <main+0x28c>
  {
 8000d14:	e7a0      	b.n	8000c58 <main+0x1e4>
 8000d16:	bf00      	nop
 8000d18:	20000194 	.word	0x20000194
 8000d1c:	2000015c 	.word	0x2000015c
 8000d20:	08006da8 	.word	0x08006da8
 8000d24:	08006d84 	.word	0x08006d84
 8000d28:	08006d60 	.word	0x08006d60
 8000d2c:	0001fffd 	.word	0x0001fffd

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09a      	sub	sp, #104	; 0x68
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2248      	movs	r2, #72	; 0x48
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f005 fb72 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d56:	f001 f93b 	bl	8001fd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fdf2 	bl	8000944 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <SystemClock_Config+0xb8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d68:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <SystemClock_Config+0xb8>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <SystemClock_Config+0xb8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000d7c:	232c      	movs	r3, #44	; 0x2c
 8000d7e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d80:	2381      	movs	r3, #129	; 0x81
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d94:	2301      	movs	r3, #1
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fbff 	bl	80025a4 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dac:	f000 f917 	bl	8000fde <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000db0:	236f      	movs	r3, #111	; 0x6f
 8000db2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 ff69 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ddc:	f000 f8ff 	bl	8000fde <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3768      	adds	r7, #104	; 0x68
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58000400 	.word	0x58000400

08000dec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b092      	sub	sp, #72	; 0x48
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	222c      	movs	r2, #44	; 0x2c
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 fb0b 	bl	8006428 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e14:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <MX_RTC_Init+0x128>)
 8000e16:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e1e:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e20:	227f      	movs	r2, #127	; 0x7f
 8000e22:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e36:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e42:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e4a:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e50:	482f      	ldr	r0, [pc, #188]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e52:	f002 fc03 	bl	800365c <HAL_RTC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000e5c:	f000 f8bf 	bl	8000fde <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	4823      	ldr	r0, [pc, #140]	; (8000f10 <MX_RTC_Init+0x124>)
 8000e84:	f002 fc6c 	bl	8003760 <HAL_RTC_SetTime>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000e8e:	f000 f8a6 	bl	8000fde <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4817      	ldr	r0, [pc, #92]	; (8000f10 <MX_RTC_Init+0x124>)
 8000eb4:	f002 fd52 	bl	800395c <HAL_RTC_SetDate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000ebe:	f000 f88e 	bl	8000fde <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_RTC_Init+0x124>)
 8000efa:	f002 fe03 	bl	8003b04 <HAL_RTC_SetAlarm_IT>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000f04:	f000 f86b 	bl	8000fde <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3748      	adds	r7, #72	; 0x48
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000015c 	.word	0x2000015c
 8000f14:	40002800 	.word	0x40002800

08000f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f1e:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <MX_USART2_UART_Init+0xa8>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f36:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f3a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f60:	2230      	movs	r2, #48	; 0x30
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f76:	f002 fff7 	bl	8003f68 <HAL_UART_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000f80:	f000 f82d 	bl	8000fde <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f84:	2100      	movs	r1, #0
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f88:	f005 f94d 	bl	8006226 <HAL_UARTEx_SetTxFifoThreshold>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000f92:	f000 f824 	bl	8000fde <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000f9a:	f005 f982 	bl	80062a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000fa4:	f000 f81b 	bl	8000fde <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_USART2_UART_Init+0xa4>)
 8000faa:	f005 f904 	bl	80061b6 <HAL_UARTEx_DisableFifoMode>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000fb4:	f000 f813 	bl	8000fde <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000194 	.word	0x20000194
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff fcd0 	bl	800096e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2004      	movs	r0, #4
 8000fd0:	f7ff fccd 	bl	800096e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f7ff fcca 	bl	800096e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe2:	b672      	cpsid	i
}
 8000fe4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <Error_Handler+0x8>

08000fe8 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <rtcAlarmControl_init+0x18>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	20000228 	.word	0x20000228

08001004 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	4604      	mov	r4, r0
 800100c:	4608      	mov	r0, r1
 800100e:	4611      	mov	r1, r2
 8001010:	461a      	mov	r2, r3
 8001012:	4623      	mov	r3, r4
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	4603      	mov	r3, r0
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	460b      	mov	r3, r1
 800101c:	717b      	strb	r3, [r7, #5]
 800101e:	4613      	mov	r3, r2
 8001020:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a5a      	ldr	r2, [pc, #360]	; (8001190 <setDateTime+0x18c>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	b258      	sxtb	r0, r3
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	4b56      	ldr	r3, [pc, #344]	; (8001190 <setDateTime+0x18c>)
 8001036:	fba3 1302 	umull	r1, r3, r3, r2
 800103a:	08d9      	lsrs	r1, r3, #3
 800103c:	460b      	mov	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	b25b      	sxtb	r3, r3
 800104a:	4303      	orrs	r3, r0
 800104c:	b25b      	sxtb	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <setDateTime+0x18c>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	b258      	sxtb	r0, r3
 8001062:	79ba      	ldrb	r2, [r7, #6]
 8001064:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <setDateTime+0x18c>)
 8001066:	fba3 1302 	umull	r1, r3, r3, r2
 800106a:	08d9      	lsrs	r1, r3, #3
 800106c:	460b      	mov	r3, r1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	b25b      	sxtb	r3, r3
 800107a:	4303      	orrs	r3, r0
 800107c:	b25b      	sxtb	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	4a42      	ldr	r2, [pc, #264]	; (8001190 <setDateTime+0x18c>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	b258      	sxtb	r0, r3
 8001092:	797a      	ldrb	r2, [r7, #5]
 8001094:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <setDateTime+0x18c>)
 8001096:	fba3 1302 	umull	r1, r3, r3, r2
 800109a:	08d9      	lsrs	r1, r3, #3
 800109c:	460b      	mov	r3, r1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4303      	orrs	r3, r0
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	4a35      	ldr	r2, [pc, #212]	; (8001190 <setDateTime+0x18c>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	b258      	sxtb	r0, r3
 80010c6:	793a      	ldrb	r2, [r7, #4]
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <setDateTime+0x18c>)
 80010ca:	fba3 1302 	umull	r1, r3, r3, r2
 80010ce:	08d9      	lsrs	r1, r3, #3
 80010d0:	460b      	mov	r3, r1
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	4303      	orrs	r3, r0
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 80010e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010ea:	4a29      	ldr	r2, [pc, #164]	; (8001190 <setDateTime+0x18c>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	b258      	sxtb	r0, r3
 80010f8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <setDateTime+0x18c>)
 80010fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001102:	08d9      	lsrs	r1, r3, #3
 8001104:	460b      	mov	r3, r1
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	b25b      	sxtb	r3, r3
 8001112:	4303      	orrs	r3, r0
 8001114:	b25b      	sxtb	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 800111a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <setDateTime+0x18c>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	b258      	sxtb	r0, r3
 800112c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <setDateTime+0x18c>)
 8001132:	fba3 1302 	umull	r1, r3, r3, r2
 8001136:	08d9      	lsrs	r1, r3, #3
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	b25b      	sxtb	r3, r3
 8001146:	4303      	orrs	r3, r0
 8001148:	b25b      	sxtb	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <setDateTime+0x190>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f107 011c 	add.w	r1, r7, #28
 8001156:	2201      	movs	r2, #1
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fbff 	bl	800395c <HAL_RTC_SetDate>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001168:	e7fe      	b.n	8001168 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <setDateTime+0x190>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f107 0108 	add.w	r1, r7, #8
 8001172:	2201      	movs	r2, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f002 faf3 	bl	8003760 <HAL_RTC_SetTime>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001184:	e7fe      	b.n	8001184 <setDateTime+0x180>
  }
}
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	20000228 	.word	0x20000228

08001198 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <getDateTime+0x124>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f107 0114 	add.w	r1, r7, #20
 80011c2:	2201      	movs	r2, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fb67 	bl	8003898 <HAL_RTC_GetTime>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80011d4:	e7fe      	b.n	80011d4 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <getDateTime+0x124>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f107 0110 	add.w	r1, r7, #16
 80011de:	2201      	movs	r2, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fc41 	bl	8003a68 <HAL_RTC_GetDate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80011f0:	e7fe      	b.n	80011f0 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 80011f2:	7cfb      	ldrb	r3, [r7, #19]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	7cfb      	ldrb	r3, [r7, #19]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	b2da      	uxtb	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001212:	7c7b      	ldrb	r3, [r7, #17]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	7c7b      	ldrb	r3, [r7, #17]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b2da      	uxtb	r2, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001232:	7cbb      	ldrb	r3, [r7, #18]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4413      	add	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	7cbb      	ldrb	r3, [r7, #18]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8001252:	7d3b      	ldrb	r3, [r7, #20]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	b2db      	uxtb	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4413      	add	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	7d3b      	ldrb	r3, [r7, #20]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8001272:	7d7b      	ldrb	r3, [r7, #21]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	7d7b      	ldrb	r3, [r7, #21]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001290:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8001292:	7dbb      	ldrb	r3, [r7, #22]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	7dbb      	ldrb	r3, [r7, #22]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000228 	.word	0x20000228

080012c0 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b08f      	sub	sp, #60	; 0x3c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4604      	mov	r4, r0
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	4603      	mov	r3, r0
 80012d4:	71bb      	strb	r3, [r7, #6]
 80012d6:	460b      	mov	r3, r1
 80012d8:	717b      	strb	r3, [r7, #5]
 80012da:	4613      	mov	r3, r2
 80012dc:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	222c      	movs	r2, #44	; 0x2c
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 f89e 	bl	8006428 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <setAlarm_A+0x130>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	b258      	sxtb	r0, r3
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <setAlarm_A+0x130>)
 8001300:	fba3 1302 	umull	r1, r3, r3, r2
 8001304:	08d9      	lsrs	r1, r3, #3
 8001306:	460b      	mov	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4303      	orrs	r3, r0
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <setAlarm_A+0x130>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	b258      	sxtb	r0, r3
 800132e:	79ba      	ldrb	r2, [r7, #6]
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <setAlarm_A+0x130>)
 8001332:	fba3 1302 	umull	r1, r3, r3, r2
 8001336:	08d9      	lsrs	r1, r3, #3
 8001338:	460b      	mov	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4303      	orrs	r3, r0
 8001348:	b25b      	sxtb	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 800134e:	797b      	ldrb	r3, [r7, #5]
 8001350:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <setAlarm_A+0x130>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	b258      	sxtb	r0, r3
 800135e:	797a      	ldrb	r2, [r7, #5]
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <setAlarm_A+0x130>)
 8001362:	fba3 1302 	umull	r1, r3, r3, r2
 8001366:	08d9      	lsrs	r1, r3, #3
 8001368:	460b      	mov	r3, r1
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4303      	orrs	r3, r0
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 800137e:	793b      	ldrb	r3, [r7, #4]
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <setAlarm_A+0x130>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b258      	sxtb	r0, r3
 800138e:	793a      	ldrb	r2, [r7, #4]
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <setAlarm_A+0x130>)
 8001392:	fba3 1302 	umull	r1, r3, r3, r2
 8001396:	08d9      	lsrs	r1, r3, #3
 8001398:	460b      	mov	r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	4303      	orrs	r3, r0
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 80013c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <setAlarm_A+0x134>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f107 010c 	add.w	r1, r7, #12
 80013d4:	2201      	movs	r2, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fb94 	bl	8003b04 <HAL_RTC_SetAlarm_IT>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 80013e2:	b672      	cpsid	i
}
 80013e4:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 80013e6:	e7fe      	b.n	80013e6 <setAlarm_A+0x126>
  }
}
 80013e8:	bf00      	nop
 80013ea:	373c      	adds	r7, #60	; 0x3c
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	cccccccd 	.word	0xcccccccd
 80013f4:	20000228 	.word	0x20000228

080013f8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <LL_AHB2_GRP1_EnableClock>:
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b090      	sub	sp, #64	; 0x40
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2238      	movs	r2, #56	; 0x38
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f004 ffc7 	bl	8006428 <memset>
  if(hrtc->Instance==RTC)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_RTC_MspInit+0x6c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d120      	bne.n	80014e6 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 ffb7 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80014c0:	f7ff fd8d 	bl	8000fde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c4:	f7ff ff98 	bl	80013f8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80014c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014cc:	f7ff ffbc 	bl	8001448 <LL_APB1_GRP1_EnableClock>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);	// clear alarm a flag BEFORE initializing
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_RTC_MspInit+0x6c>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	202a      	movs	r0, #42	; 0x2a
 80014dc:	f000 fb27 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014e0:	202a      	movs	r0, #42	; 0x2a
 80014e2:	f000 fb3e 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	; 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40002800 	.word	0x40002800

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2238      	movs	r2, #56	; 0x38
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f004 ff87 	bl	8006428 <memset>
  if(huart->Instance==USART2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_UART_MspInit+0x98>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d12e      	bne.n	8001582 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001524:	2302      	movs	r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001528:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800152c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4618      	mov	r0, r3
 8001534:	f001 ff78 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800153e:	f7ff fd4e 	bl	8000fde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001542:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001546:	f7ff ff7f 	bl	8001448 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff ff64 	bl	8001418 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001550:	230c      	movs	r3, #12
 8001552:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001560:	2307      	movs	r3, #7
 8001562:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156e:	f000 fbcf 	bl	8001d10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2025      	movs	r0, #37	; 0x25
 8001578:	f000 fad9 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800157c:	2025      	movs	r0, #37	; 0x25
 800157e:	f000 faf0 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3758      	adds	r7, #88	; 0x58
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40004400 	.word	0x40004400

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f9b7 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <USART2_IRQHandler+0x10>)
 80015e6:	f002 fdef 	bl	80041c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000194 	.word	0x20000194

080015f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <RTC_Alarm_IRQHandler+0x10>)
 80015fa:	f002 fb8f 	bl	8003d1c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000015c 	.word	0x2000015c

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f004 febe 	bl	80063b8 <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20008000 	.word	0x20008000
 8001668:	00000400 	.word	0x00000400
 800166c:	2000022c 	.word	0x2000022c
 8001670:	20000290 	.word	0x20000290

08001674 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <uartBasic_init+0x18>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000234 	.word	0x20000234

08001690 <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <uartBasic_TX_IT+0x3c>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <uartBasic_TX_IT+0x40>)
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f89a 	bl	80017e8 <composeMessage>
		_txBuffer_full = true;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <uartBasic_TX_IT+0x3c>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 80016ba:	f000 f865 	bl	8001788 <_txMessage_IT>

		// report successfully queued
		return true;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 80016c2:	2300      	movs	r3, #0
	}
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000278 	.word	0x20000278
 80016d0:	20000238 	.word	0x20000238

080016d4 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <uartBasic_RX_IT+0x24>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f083 0301 	eor.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 80016e8:	f000 f866 	bl	80017b8 <_rxMessage_IT>

		// return success
		return true;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 80016f0:	2300      	movs	r3, #0
	}
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000279 	.word	0x20000279

080016fc <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <uartBasic_get_RX+0x4c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d015      	beq.n	800173c <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <uartBasic_get_RX+0x50>)
 8001712:	f107 0408 	add.w	r4, r7, #8
 8001716:	461d      	mov	r5, r3
 8001718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <uartBasic_get_RX+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	461a      	mov	r2, r3
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f86e 	bl	8001814 <decomposeMessage>

		// report successfully dequeued
		return true;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 800173c:	2300      	movs	r3, #0
	}
}
 800173e:	4618      	mov	r0, r3
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bdb0      	pop	{r4, r5, r7, pc}
 8001746:	bf00      	nop
 8001748:	20000279 	.word	0x20000279
 800174c:	20000258 	.word	0x20000258

08001750 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <uartBasic_RX_Complete_ISR+0x14>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000279 	.word	0x20000279

08001768 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <uartBasic_TX_Complete_ISR+0x14>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000278 	.word	0x20000278

08001780 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 8001784:	e7fe      	b.n	8001784 <uartBasic_Error_ISR+0x4>
	...

08001788 <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_txMessage_IT+0x24>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2220      	movs	r2, #32
 8001792:	4907      	ldr	r1, [pc, #28]	; (80017b0 <_txMessage_IT+0x28>)
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fc37 	bl	8004008 <HAL_UART_Transmit_IT>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <_txMessage_IT+0x1e>
		_txError = true;
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <_txMessage_IT+0x2c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000234 	.word	0x20000234
 80017b0:	20000238 	.word	0x20000238
 80017b4:	20000230 	.word	0x20000230

080017b8 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_rxMessage_IT+0x24>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2220      	movs	r2, #32
 80017c2:	4907      	ldr	r1, [pc, #28]	; (80017e0 <_rxMessage_IT+0x28>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fcb3 	bl	8004130 <HAL_UART_Receive_IT>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d102      	bne.n	80017d6 <_rxMessage_IT+0x1e>
		_rxError = true;
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <_rxMessage_IT+0x2c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000234 	.word	0x20000234
 80017e0:	20000258 	.word	0x20000258
 80017e4:	20000231 	.word	0x20000231

080017e8 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	221c      	movs	r2, #28
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 fe00 	bl	800640c <memcpy>
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	221c      	movs	r2, #28
 8001830:	4619      	mov	r1, r3
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f004 fdea 	bl	800640c <memcpy>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001842:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001844:	f7fe fe6e 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <LoopForever+0x6>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	; (8001880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <LoopForever+0xe>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <LoopForever+0x16>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800186e:	f004 fda9 	bl	80063c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff f8ff 	bl	8000a74 <main>

08001876 <LoopForever>:

LoopForever:
    b LoopForever
 8001876:	e7fe      	b.n	8001876 <LoopForever>
  ldr   r0, =_estack
 8001878:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001884:	08006ed8 	.word	0x08006ed8
  ldr r2, =_sbss
 8001888:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800188c:	20000290 	.word	0x20000290

08001890 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189e:	2003      	movs	r0, #3
 80018a0:	f000 f93a 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018a4:	f001 fbe2 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_Init+0x3c>)
 80018ac:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f810 	bl	80018d4 <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	e001      	b.n	80018c4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c0:	f7ff fdda 	bl	8001478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_InitTick+0x6c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d024      	beq.n	8001932 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018e8:	f001 fbc0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_InitTick+0x6c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f93c 	bl	8001b7e <HAL_SYSTICK_Config>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10f      	bne.n	800192c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	d809      	bhi.n	8001926 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001912:	2200      	movs	r2, #0
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191a:	f000 f908 	bl	8001b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_InitTick+0x70>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e007      	b.n	8001936 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	e004      	b.n	8001936 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e001      	b.n	8001936 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000008 	.word	0x20000008
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x1c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x20>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_IncTick+0x20>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000008 	.word	0x20000008
 8001968:	2000027c 	.word	0x2000027c

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_GetTick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000027c 	.word	0x2000027c

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4906      	ldr	r1, [pc, #24]	; (8001a18 <__NVIC_EnableIRQ+0x34>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af8:	f7ff ff90 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff2d 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff44 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff92 	bl	8001a70 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff61 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff37 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa4 	bl	8001ad4 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e04f      	b.n	8001c48 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d008      	beq.n	8001bc6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e040      	b.n	8001c48 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 020e 	bic.w	r2, r2, #14
 8001bd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f003 021c 	and.w	r2, r3, #28
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d005      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e047      	b.n	8001d06 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 020e 	bic.w	r2, r2, #14
 8001c84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f003 021c 	and.w	r2, r3, #28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ce4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
    }
  }
  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1e:	e140      	b.n	8001fa2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8132 	beq.w	8001f9c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d005      	beq.n	8001d50 <HAL_GPIO_Init+0x40>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d130      	bne.n	8001db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d86:	2201      	movs	r2, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 0201 	and.w	r2, r3, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d017      	beq.n	8001dee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d123      	bne.n	8001e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	220f      	movs	r2, #15
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	6939      	ldr	r1, [r7, #16]
 8001e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0203 	and.w	r2, r3, #3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 808c 	beq.w	8001f9c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e84:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eae:	d00d      	beq.n	8001ecc <HAL_GPIO_Init+0x1bc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a44      	ldr	r2, [pc, #272]	; (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <HAL_GPIO_Init+0x1b8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a43      	ldr	r2, [pc, #268]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_Init+0x1b4>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e004      	b.n	8001ece <HAL_GPIO_Init+0x1be>
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x1be>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_GPIO_Init+0x1be>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ede:	4938      	ldr	r1, [pc, #224]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f10:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f3a:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f46:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f74:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f47f aeb7 	bne.w	8001d20 <HAL_GPIO_Init+0x10>
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	58000800 	.word	0x58000800

08001fd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	58000400 	.word	0x58000400

08001fec <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <LL_PWR_EnableBootC2+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <LL_PWR_EnableBootC2+0x18>)
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	58000400 	.word	0x58000400

08002008 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_PWREx_GetVoltageRange+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	58000400 	.word	0x58000400

08002020 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002028:	f7ff ffe0 	bl	8001fec <LL_PWR_EnableBootC2>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002044:	d101      	bne.n	800204a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	58000400 	.word	0x58000400

08002058 <LL_RCC_HSE_EnableTcxo>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <LL_RCC_HSE_DisableTcxo>:
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020a2:	d101      	bne.n	80020a8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_HSE_Enable>:
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <LL_RCC_HSE_Disable>:
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <LL_RCC_HSE_IsReady>:
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020fc:	d101      	bne.n	8002102 <LL_RCC_HSE_IsReady+0x18>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_RCC_HSE_IsReady+0x1a>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <LL_RCC_HSI_Enable>:
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <LL_RCC_HSI_Disable>:
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <LL_RCC_HSI_IsReady>:
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d101      	bne.n	800215c <LL_RCC_HSI_IsReady+0x18>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <LL_RCC_HSI_IsReady+0x1a>
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <LL_RCC_LSE_IsReady>:
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d101      	bne.n	80021a6 <LL_RCC_LSE_IsReady+0x18>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_RCC_LSE_IsReady+0x1a>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_LSI_Enable>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_LSI_Disable>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_LSI_IsReady>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b02      	cmp	r3, #2
 8002202:	d101      	bne.n	8002208 <LL_RCC_LSI_IsReady+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_RCC_LSI_IsReady+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <LL_RCC_MSI_Enable>:
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <LL_RCC_MSI_Disable>:
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <LL_RCC_MSI_IsReady>:
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b02      	cmp	r3, #2
 800225a:	d101      	bne.n	8002260 <LL_RCC_MSI_IsReady+0x16>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <LL_RCC_MSI_IsReady+0x18>
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b08      	cmp	r3, #8
 800227a:	d101      	bne.n	8002280 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <LL_RCC_MSI_GetRange>:
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_SetSysClkSource>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <LL_RCC_GetSysClkSource>:
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <LL_RCC_SetAHBPrescaler>:
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <LL_RCC_SetAHB3Prescaler>:
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002378:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800237c:	f023 020f 	bic.w	r2, r3, #15
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <LL_RCC_SetAPB1Prescaler>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <LL_RCC_SetAPB2Prescaler>:
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <LL_RCC_GetAHBPrescaler>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <LL_RCC_GetAHB3Prescaler>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <LL_RCC_GetAPB1Prescaler>:
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr

0800242a <LL_RCC_GetAPB2Prescaler>:
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800248a:	d101      	bne.n	8002490 <LL_RCC_PLL_IsReady+0x18>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <LL_RCC_PLL_IsReady+0x1a>
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800249e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0303 	and.w	r3, r3, #3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80024f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002506:	d101      	bne.n	800250c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800252a:	d101      	bne.n	8002530 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002542:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254e:	d101      	bne.n	8002554 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002570:	d101      	bne.n	8002576 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002592:	d101      	bne.n	8002598 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e36f      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	f7ff fea6 	bl	8002306 <LL_RCC_GetSysClkSource>
 80025ba:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025bc:	f7ff ff8f 	bl	80024de <LL_RCC_PLL_GetMainSource>
 80025c0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80c4 	beq.w	8002758 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3e>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d176      	bne.n	80026ca <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d173      	bne.n	80026ca <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e353      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_OscConfig+0x68>
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260a:	e006      	b.n	800261a <HAL_RCC_OscConfig+0x76>
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261a:	4293      	cmp	r3, r2
 800261c:	d222      	bcs.n	8002664 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fd5a 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e331      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fe2b 	bl	80022b8 <LL_RCC_MSI_SetCalibTrimming>
 8002662:	e021      	b.n	80026a8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fe12 	bl	80022b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fd1f 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e2f6      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026a8:	f000 fce0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4aa7      	ldr	r2, [pc, #668]	; (800294c <HAL_RCC_OscConfig+0x3a8>)
 80026b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80026b2:	4ba7      	ldr	r3, [pc, #668]	; (8002950 <HAL_RCC_OscConfig+0x3ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f90c 	bl	80018d4 <HAL_InitTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d047      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	e2e5      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d02c      	beq.n	800272c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026d2:	f7ff fd9e 	bl	8002212 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d6:	f7ff f949 	bl	800196c <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026de:	f7ff f945 	bl	800196c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2d2      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80026f0:	f7ff fdab 	bl	800224a <LL_RCC_MSI_IsReady>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f1      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fdc7 	bl	80022b8 <LL_RCC_MSI_SetCalibTrimming>
 800272a:	e015      	b.n	8002758 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800272c:	f7ff fd7f 	bl	800222e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002730:	f7ff f91c 	bl	800196c <HAL_GetTick>
 8002734:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002738:	f7ff f918 	bl	800196c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e2a5      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800274a:	f7ff fd7e 	bl	800224a <LL_RCC_MSI_IsReady>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f1      	bne.n	8002738 <HAL_RCC_OscConfig+0x194>
 8002754:	e000      	b.n	8002758 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002756:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d058      	beq.n	8002816 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b08      	cmp	r3, #8
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x1d2>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d108      	bne.n	8002782 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d105      	bne.n	8002782 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d14b      	bne.n	8002816 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e289      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a0:	d102      	bne.n	80027a8 <HAL_RCC_OscConfig+0x204>
 80027a2:	f7ff fc86 	bl	80020b2 <LL_RCC_HSE_Enable>
 80027a6:	e00d      	b.n	80027c4 <HAL_RCC_OscConfig+0x220>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80027b0:	d104      	bne.n	80027bc <HAL_RCC_OscConfig+0x218>
 80027b2:	f7ff fc51 	bl	8002058 <LL_RCC_HSE_EnableTcxo>
 80027b6:	f7ff fc7c 	bl	80020b2 <LL_RCC_HSE_Enable>
 80027ba:	e003      	b.n	80027c4 <HAL_RCC_OscConfig+0x220>
 80027bc:	f7ff fc87 	bl	80020ce <LL_RCC_HSE_Disable>
 80027c0:	f7ff fc58 	bl	8002074 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d012      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff f8ce 	bl	800196c <HAL_GetTick>
 80027d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7ff f8ca 	bl	800196c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e257      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027e6:	f7ff fc80 	bl	80020ea <LL_RCC_HSE_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f1      	beq.n	80027d4 <HAL_RCC_OscConfig+0x230>
 80027f0:	e011      	b.n	8002816 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7ff f8bb 	bl	800196c <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fa:	f7ff f8b7 	bl	800196c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e244      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800280c:	f7ff fc6d 	bl	80020ea <LL_RCC_HSE_IsReady>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f1      	bne.n	80027fa <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d046      	beq.n	80028b0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x290>
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d10e      	bne.n	800284c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e22a      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fc8e 	bl	8002166 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800284a:	e031      	b.n	80028b0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d019      	beq.n	8002888 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	f7ff fc5a 	bl	800210c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff f888 	bl	800196c <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7ff f884 	bl	800196c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e211      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002872:	f7ff fc67 	bl	8002144 <LL_RCC_HSI_IsReady>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f1      	beq.n	8002860 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc70 	bl	8002166 <LL_RCC_HSI_SetCalibTrimming>
 8002886:	e013      	b.n	80028b0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002888:	f7ff fc4e 	bl	8002128 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f86e 	bl	800196c <HAL_GetTick>
 8002890:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7ff f86a 	bl	800196c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e1f7      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028a6:	f7ff fc4d 	bl	8002144 <LL_RCC_HSI_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f1      	bne.n	8002894 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d06e      	beq.n	800299a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d056      	beq.n	8002972 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028cc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	429a      	cmp	r2, r3
 80028da:	d031      	beq.n	8002940 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e1d0      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d013      	beq.n	8002926 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80028fe:	f7ff fc67 	bl	80021d0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002902:	f7ff f833 	bl	800196c <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7ff f82f 	bl	800196c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b11      	cmp	r3, #17
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1bc      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800291c:	f7ff fc68 	bl	80021f0 <LL_RCC_LSI_IsReady>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f1      	bne.n	800290a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	f023 0210 	bic.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002940:	f7ff fc36 	bl	80021b0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7ff f812 	bl	800196c <HAL_GetTick>
 8002948:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800294a:	e00c      	b.n	8002966 <HAL_RCC_OscConfig+0x3c2>
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002954:	f7ff f80a 	bl	800196c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b11      	cmp	r3, #17
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e197      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002966:	f7ff fc43 	bl	80021f0 <LL_RCC_LSI_IsReady>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f1      	beq.n	8002954 <HAL_RCC_OscConfig+0x3b0>
 8002970:	e013      	b.n	800299a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002972:	f7ff fc2d 	bl	80021d0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fe fff9 	bl	800196c <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe fff5 	bl	800196c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b11      	cmp	r3, #17
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e182      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002990:	f7ff fc2e 	bl	80021f0 <LL_RCC_LSI_IsReady>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f1      	bne.n	800297e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80d8 	beq.w	8002b58 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029a8:	f7ff fb44 	bl	8002034 <LL_PWR_IsEnabledBkUpAccess>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d113      	bne.n	80029da <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029b2:	f7ff fb0d 	bl	8001fd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fe ffd9 	bl	800196c <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe ffd5 	bl	800196c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e162      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029d0:	f7ff fb30 	bl	8002034 <LL_PWR_IsEnabledBkUpAccess>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f1      	beq.n	80029be <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d07b      	beq.n	8002ada <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b85      	cmp	r3, #133	; 0x85
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe ffb1 	bl	800196c <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe ffa3 	bl	800196c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e12e      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a38:	f7ff fba9 	bl	800218e <LL_RCC_LSE_IsReady>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b81      	cmp	r3, #129	; 0x81
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b85      	cmp	r3, #133	; 0x85
 8002a50:	d121      	bne.n	8002a96 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7fe ff8b 	bl	800196c <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe ff7d 	bl	800196c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e108      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ec      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a94:	e060      	b.n	8002b58 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7fe ff69 	bl	800196c <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe ff5b 	bl	800196c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0e6      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ec      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x50e>
 8002ad8:	e03e      	b.n	8002b58 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ada:	f7fe ff47 	bl	800196c <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe ff39 	bl	800196c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0c4      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ec      	bne.n	8002af6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1c:	f7fe ff26 	bl	800196c <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe ff18 	bl	800196c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0a3      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b4e:	f7ff fb1e 	bl	800218e <LL_RCC_LSE_IsReady>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ef      	bne.n	8002b38 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8099 	beq.w	8002c94 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	d06c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d14b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	f7ff fc74 	bl	800245c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fefa 	bl	800196c <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fef6 	bl	800196c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b0a      	cmp	r3, #10
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e083      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b8e:	f7ff fc73 	bl	8002478 <LL_RCC_PLL_IsReady>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f1      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <HAL_RCC_OscConfig+0x6fc>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bb0:	0212      	lsls	r2, r2, #8
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bb8:	4311      	orrs	r1, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bce:	f7ff fc37 	bl	8002440 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fec3 	bl	800196c <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe febf 	bl	800196c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b0a      	cmp	r3, #10
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e04c      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002bfc:	f7ff fc3c 	bl	8002478 <LL_RCC_PLL_IsReady>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f1      	beq.n	8002bea <HAL_RCC_OscConfig+0x646>
 8002c06:	e045      	b.n	8002c94 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c08:	f7ff fc28 	bl	800245c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe feae 	bl	800196c <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe feaa 	bl	800196c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b0a      	cmp	r3, #10
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e037      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c26:	f7ff fc27 	bl	8002478 <LL_RCC_PLL_IsReady>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f1      	bne.n	8002c14 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCC_OscConfig+0x700>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60cb      	str	r3, [r1, #12]
 8002c40:	e028      	b.n	8002c94 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e023      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d115      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d10e      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	11c1808c 	.word	0x11c1808c
 8002ca4:	eefefffc 	.word	0xeefefffc

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e12c      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b98      	ldr	r3, [pc, #608]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d91b      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b95      	ldr	r3, [pc, #596]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0207 	bic.w	r2, r3, #7
 8002cd2:	4993      	ldr	r1, [pc, #588]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cda:	f7fe fe47 	bl	800196c <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ce2:	f7fe fe43 	bl	800196c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e110      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf4:	4b8a      	ldr	r3, [pc, #552]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d1ef      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fb02 	bl	800231c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fe28 	bl	800196c <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d20:	f7fe fe24 	bl	800196c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0f1      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d32:	f7ff fbdf 	bl	80024f4 <LL_RCC_IsActiveFlag_HPRE>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f1      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff faf8 	bl	8002342 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d52:	f7fe fe0b 	bl	800196c <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d5a:	f7fe fe07 	bl	800196c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0d4      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d6c:	f7ff fbd3 	bl	8002516 <LL_RCC_IsActiveFlag_C2HPRE>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f1      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff faf0 	bl	800236c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d8c:	f7fe fdee 	bl	800196c <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d94:	f7fe fdea 	bl	800196c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0b7      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002da6:	f7ff fbc8 	bl	800253a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f1      	beq.n	8002d94 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fae9 	bl	8002398 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dc6:	f7fe fdd1 	bl	800196c <HAL_GetTick>
 8002dca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dce:	f7fe fdcd 	bl	800196c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e09a      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002de0:	f7ff fbbd 	bl	800255e <LL_RCC_IsActiveFlag_PPRE1>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f1      	beq.n	8002dce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d017      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fade 	bl	80023be <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fdb3 	bl	800196c <HAL_GetTick>
 8002e06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e0a:	f7fe fdaf 	bl	800196c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e07c      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e1c:	f7ff fbb0 	bl	8002580 <LL_RCC_IsActiveFlag_PPRE2>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f1      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d043      	beq.n	8002eba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e3a:	f7ff f956 	bl	80020ea <LL_RCC_HSE_IsReady>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11e      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e066      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e50:	f7ff fb12 	bl	8002478 <LL_RCC_PLL_IsReady>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e05b      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e66:	f7ff f9f0 	bl	800224a <LL_RCC_MSI_IsReady>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d108      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e050      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e74:	f7ff f966 	bl	8002144 <LL_RCC_HSI_IsReady>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e049      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fa2a 	bl	80022e0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fd6e 	bl	800196c <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe fd6a 	bl	800196c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e035      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	f7ff fa2c 	bl	8002306 <LL_RCC_GetSysClkSource>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d1ec      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d21b      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 0207 	bic.w	r2, r3, #7
 8002ed0:	4913      	ldr	r1, [pc, #76]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe fd48 	bl	800196c <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ee0:	f7fe fd44 	bl	800196c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e011      	b.n	8002f16 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x278>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1ef      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f00:	f000 f8b4 	bl	800306c <HAL_RCC_GetHCLKFreq>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_RCC_ClockConfig+0x27c>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <HAL_RCC_ClockConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fce0 	bl	80018d4 <HAL_InitTick>
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	58004000 	.word	0x58004000
 8002f24:	20000000 	.word	0x20000000
 8002f28:	20000004 	.word	0x20000004

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3a:	f7ff f9e4 	bl	8002306 <LL_RCC_GetSysClkSource>
 8002f3e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	f7ff facd 	bl	80024de <LL_RCC_PLL_GetMainSource>
 8002f44:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x2c>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d139      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d136      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002f58:	f7ff f987 	bl	800226a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x62>
 8002f62:	f7ff f982 	bl	800226a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_GetSysClockFreq+0x4e>
 8002f6c:	f7ff f98d 	bl	800228a <LL_RCC_MSI_GetRange>
 8002f70:	4603      	mov	r3, r0
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	e005      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x5a>
 8002f7a:	f7ff f991 	bl	80022a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	4a36      	ldr	r2, [pc, #216]	; (8003060 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x8c>
 8002f8e:	f7ff f96c 	bl	800226a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x7a>
 8002f98:	f7ff f977 	bl	800228a <LL_RCC_MSI_GetRange>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x86>
 8002fa6:	f7ff f97b 	bl	80022a0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002faa:	4603      	mov	r3, r0
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <HAL_RCC_GetSysClockFreq+0x134>)
 8002fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d115      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fc4:	e012      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e00c      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d109      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fd8:	f7ff f85a 	bl	8002090 <LL_RCC_HSE_IsEnabledDiv2>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d102      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e001      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fea:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fec:	f7ff f98b 	bl	8002306 <LL_RCC_GetSysClkSource>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d12f      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ff6:	f7ff fa72 	bl	80024de <LL_RCC_PLL_GetMainSource>
 8002ffa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0xde>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d003      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0xe4>
 8003008:	e00d      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_RCC_GetSysClockFreq+0x138>)
 800300c:	60fb      	str	r3, [r7, #12]
        break;
 800300e:	e00d      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003010:	f7ff f83e 	bl	8002090 <LL_RCC_HSE_IsEnabledDiv2>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d102      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_RCC_GetSysClockFreq+0x138>)
 800301c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003022:	60fb      	str	r3, [r7, #12]
        break;
 8003024:	e002      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	60fb      	str	r3, [r7, #12]
        break;
 800302a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800302c:	f7ff fa35 	bl	800249a <LL_RCC_PLL_GetN>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	fb03 f402 	mul.w	r4, r3, r2
 8003038:	f7ff fa46 	bl	80024c8 <LL_RCC_PLL_GetDivider>
 800303c:	4603      	mov	r3, r0
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	3301      	adds	r3, #1
 8003042:	fbb4 f4f3 	udiv	r4, r4, r3
 8003046:	f7ff fa34 	bl	80024b2 <LL_RCC_PLL_GetR>
 800304a:	4603      	mov	r3, r0
 800304c:	0f5b      	lsrs	r3, r3, #29
 800304e:	3301      	adds	r3, #1
 8003050:	fbb4 f3f3 	udiv	r3, r4, r3
 8003054:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003056:	697b      	ldr	r3, [r7, #20]
}
 8003058:	4618      	mov	r0, r3
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bd90      	pop	{r4, r7, pc}
 8003060:	08006e2c 	.word	0x08006e2c
 8003064:	00f42400 	.word	0x00f42400
 8003068:	01e84800 	.word	0x01e84800

0800306c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b598      	push	{r3, r4, r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003070:	f7ff ff5c 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8003074:	4604      	mov	r4, r0
 8003076:	f7ff f9b5 	bl	80023e4 <LL_RCC_GetAHBPrescaler>
 800307a:	4603      	mov	r3, r0
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	4a03      	ldr	r2, [pc, #12]	; (8003090 <HAL_RCC_GetHCLKFreq+0x24>)
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd98      	pop	{r3, r4, r7, pc}
 8003090:	08006dcc 	.word	0x08006dcc

08003094 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b598      	push	{r3, r4, r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003098:	f7ff ffe8 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800309c:	4604      	mov	r4, r0
 800309e:	f7ff f9b9 	bl	8002414 <LL_RCC_GetAPB1Prescaler>
 80030a2:	4603      	mov	r3, r0
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd98      	pop	{r3, r4, r7, pc}
 80030b4:	08006e0c 	.word	0x08006e0c

080030b8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b598      	push	{r3, r4, r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80030bc:	f7ff ffd6 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030c0:	4604      	mov	r4, r0
 80030c2:	f7ff f9b2 	bl	800242a <LL_RCC_GetAPB2Prescaler>
 80030c6:	4603      	mov	r3, r0
 80030c8:	0adb      	lsrs	r3, r3, #11
 80030ca:	4a03      	ldr	r2, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd98      	pop	{r3, r4, r7, pc}
 80030d8:	08006e0c 	.word	0x08006e0c

080030dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	4a10      	ldr	r2, [pc, #64]	; (8003130 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80030f4:	f7ff f981 	bl	80023fa <LL_RCC_GetAHB3Prescaler>
 80030f8:	4603      	mov	r3, r0
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4a09      	ldr	r2, [pc, #36]	; (8003138 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0c9c      	lsrs	r4, r3, #18
 8003118:	f7fe ff76 	bl	8002008 <HAL_PWREx_GetVoltageRange>
 800311c:	4603      	mov	r3, r0
 800311e:	4619      	mov	r1, r3
 8003120:	4620      	mov	r0, r4
 8003122:	f000 f80b 	bl	800313c <RCC_SetFlashLatency>
 8003126:	4603      	mov	r3, r0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}
 8003130:	08006e2c 	.word	0x08006e2c
 8003134:	08006dcc 	.word	0x08006dcc
 8003138:	431bde83 	.word	0x431bde83

0800313c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003146:	4a3a      	ldr	r2, [pc, #232]	; (8003230 <RCC_SetFlashLatency+0xf4>)
 8003148:	f107 0320 	add.w	r3, r7, #32
 800314c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003150:	6018      	str	r0, [r3, #0]
 8003152:	3304      	adds	r3, #4
 8003154:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003156:	4a37      	ldr	r2, [pc, #220]	; (8003234 <RCC_SetFlashLatency+0xf8>)
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003160:	6018      	str	r0, [r3, #0]
 8003162:	3304      	adds	r3, #4
 8003164:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003166:	4a34      	ldr	r2, [pc, #208]	; (8003238 <RCC_SetFlashLatency+0xfc>)
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	ca07      	ldmia	r2, {r0, r1, r2}
 800316e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317c:	d11b      	bne.n	80031b6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800317e:	2300      	movs	r3, #0
 8003180:	633b      	str	r3, [r7, #48]	; 0x30
 8003182:	e014      	b.n	80031ae <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	3338      	adds	r3, #56	; 0x38
 800318a:	443b      	add	r3, r7
 800318c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003190:	461a      	mov	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4293      	cmp	r3, r2
 8003196:	d807      	bhi.n	80031a8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	3338      	adds	r3, #56	; 0x38
 800319e:	443b      	add	r3, r7
 80031a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031a6:	e021      	b.n	80031ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	3301      	adds	r3, #1
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d9e7      	bls.n	8003184 <RCC_SetFlashLatency+0x48>
 80031b4:	e01a      	b.n	80031ec <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ba:	e014      	b.n	80031e6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	3338      	adds	r3, #56	; 0x38
 80031c2:	443b      	add	r3, r7
 80031c4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d807      	bhi.n	80031e0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	3338      	adds	r3, #56	; 0x38
 80031d6:	443b      	add	r3, r7
 80031d8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031de:	e005      	b.n	80031ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	3301      	adds	r3, #1
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d9e7      	bls.n	80031bc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <RCC_SetFlashLatency+0x100>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 0207 	bic.w	r2, r3, #7
 80031f4:	4911      	ldr	r1, [pc, #68]	; (800323c <RCC_SetFlashLatency+0x100>)
 80031f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031fc:	f7fe fbb6 	bl	800196c <HAL_GetTick>
 8003200:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003202:	e008      	b.n	8003216 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003204:	f7fe fbb2 	bl	800196c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e007      	b.n	8003226 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <RCC_SetFlashLatency+0x100>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003220:	429a      	cmp	r2, r3
 8003222:	d1ef      	bne.n	8003204 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3738      	adds	r7, #56	; 0x38
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	08006db0 	.word	0x08006db0
 8003234:	08006db8 	.word	0x08006db8
 8003238:	08006dc0 	.word	0x08006dc0
 800323c:	58004000 	.word	0x58004000

08003240 <LL_RCC_LSE_IsReady>:
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b02      	cmp	r3, #2
 8003252:	d101      	bne.n	8003258 <LL_RCC_LSE_IsReady+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_RCC_LSE_IsReady+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <LL_RCC_SetUSARTClockSource>:
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	43db      	mvns	r3, r3
 8003278:	401a      	ands	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <LL_RCC_SetI2SClockSource>:
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <LL_RCC_SetLPUARTClockSource>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80032c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_SetI2CClockSource>:
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032fe:	43db      	mvns	r3, r3
 8003300:	401a      	ands	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800330a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <LL_RCC_SetLPTIMClockSource>:
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	43db      	mvns	r3, r3
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <LL_RCC_SetRNGClockSource>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <LL_RCC_SetADCClockSource>:
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800338e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <LL_RCC_SetRTCClockSource>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <LL_RCC_GetRTCClockSource>:
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <LL_RCC_ForceBackupDomainReset>:
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
	...

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003434:	2300      	movs	r3, #0
 8003436:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003438:	2300      	movs	r3, #0
 800343a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d058      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003448:	f7fe fdc2 	bl	8001fd0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800344c:	f7fe fa8e 	bl	800196c <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003454:	f7fe fa8a 	bl	800196c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	74fb      	strb	r3, [r7, #19]
        break;
 8003466:	e006      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003474:	d1ee      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d13c      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800347c:	f7ff ffa7 	bl	80033ce <LL_RCC_GetRTCClockSource>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	429a      	cmp	r2, r3
 8003488:	d00f      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003498:	f7ff ffa5 	bl	80033e6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800349c:	f7ff ffb3 	bl	8003406 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d014      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fa5a 	bl	800196c <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe fa56 	bl	800196c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d902      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	74fb      	strb	r3, [r7, #19]
            break;
 80034d2:	e004      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80034d4:	f7ff feb4 	bl	8003240 <LL_RCC_LSE_IsReady>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d1ee      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5b 	bl	80033a4 <LL_RCC_SetRTCClockSource>
 80034ee:	e004      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
 80034f4:	e001      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fea9 	bl	8003262 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fe9e 	bl	8003262 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fec0 	bl	80032bc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003544:	2b00      	cmp	r3, #0
 8003546:	d004      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fee6 	bl	800331e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fedb 	bl	800331e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fed0 	bl	800331e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fea9 	bl	80032e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fe9e 	bl	80032e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fe93 	bl	80032e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d011      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fe5e 	bl	8003292 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035de:	d107      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80035e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fea5 	bl	8003350 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d011      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fea3 	bl	800337a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363c:	d107      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800364e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	58000400 	.word	0x58000400

0800365c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d071      	beq.n	8003752 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fefe 	bl	8001484 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_RTC_Init+0x100>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b10      	cmp	r3, #16
 800369a:	d051      	beq.n	8003740 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800369c:	4b2f      	ldr	r3, [pc, #188]	; (800375c <HAL_RTC_Init+0x100>)
 800369e:	22ca      	movs	r2, #202	; 0xca
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
 80036a2:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_RTC_Init+0x100>)
 80036a4:	2253      	movs	r2, #83	; 0x53
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb87 	bl	8003dbc <RTC_EnterInitMode>
 80036ae:	4603      	mov	r3, r0
 80036b0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13f      	bne.n	8003738 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RTC_Init+0x100>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <HAL_RTC_Init+0x100>)
 80036be:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80036c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RTC_Init+0x100>)
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4319      	orrs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	430b      	orrs	r3, r1
 80036dc:	491f      	ldr	r1, [pc, #124]	; (800375c <HAL_RTC_Init+0x100>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	491b      	ldr	r1, [pc, #108]	; (800375c <HAL_RTC_Init+0x100>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RTC_Init+0x100>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	430b      	orrs	r3, r1
 8003704:	4915      	ldr	r1, [pc, #84]	; (800375c <HAL_RTC_Init+0x100>)
 8003706:	4313      	orrs	r3, r2
 8003708:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fb8a 	bl	8003e24 <RTC_ExitInitMode>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10e      	bne.n	8003738 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RTC_Init+0x100>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a19      	ldr	r1, [r3, #32]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4319      	orrs	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	430b      	orrs	r3, r1
 8003732:	490a      	ldr	r1, [pc, #40]	; (800375c <HAL_RTC_Init+0x100>)
 8003734:	4313      	orrs	r3, r2
 8003736:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_RTC_Init+0x100>)
 800373a:	22ff      	movs	r2, #255	; 0xff
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
 800373e:	e001      	b.n	8003744 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40002800 	.word	0x40002800

08003760 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_RTC_SetTime+0x1a>
 8003776:	2302      	movs	r3, #2
 8003778:	e088      	b.n	800388c <HAL_RTC_SetTime+0x12c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800378a:	4b42      	ldr	r3, [pc, #264]	; (8003894 <HAL_RTC_SetTime+0x134>)
 800378c:	22ca      	movs	r2, #202	; 0xca
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
 8003790:	4b40      	ldr	r3, [pc, #256]	; (8003894 <HAL_RTC_SetTime+0x134>)
 8003792:	2253      	movs	r2, #83	; 0x53
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fb10 	bl	8003dbc <RTC_EnterInitMode>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d15e      	bne.n	8003864 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RTC_SetTime+0x134>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b2:	d057      	beq.n	8003864 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d125      	bne.n	8003806 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RTC_SetTime+0x134>)
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fb65 	bl	8003ea0 <RTC_ByteToBcd2>
 80037d6:	4603      	mov	r3, r0
 80037d8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fb5e 	bl	8003ea0 <RTC_ByteToBcd2>
 80037e4:	4603      	mov	r3, r0
 80037e6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037e8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	789b      	ldrb	r3, [r3, #2]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fb56 	bl	8003ea0 <RTC_ByteToBcd2>
 80037f4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037f6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	78db      	ldrb	r3, [r3, #3]
 80037fe:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e017      	b.n	8003836 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_RTC_SetTime+0x134>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003824:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800382a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	78db      	ldrb	r3, [r3, #3]
 8003830:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <HAL_RTC_SetTime+0x134>)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800383e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003842:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_RTC_SetTime+0x134>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	4a12      	ldr	r2, [pc, #72]	; (8003894 <HAL_RTC_SetTime+0x134>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RTC_SetTime+0x134>)
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68d9      	ldr	r1, [r3, #12]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	430b      	orrs	r3, r1
 800385e:	490d      	ldr	r1, [pc, #52]	; (8003894 <HAL_RTC_SetTime+0x134>)
 8003860:	4313      	orrs	r3, r2
 8003862:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fadd 	bl	8003e24 <RTC_ExitInitMode>
 800386a:	4603      	mov	r3, r0
 800386c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RTC_SetTime+0x134>)
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
}
 800388c:	4618      	mov	r0, r3
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}
 8003894:	40002800 	.word	0x40002800

08003898 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80038a4:	4b2c      	ldr	r3, [pc, #176]	; (8003958 <HAL_RTC_GetTime+0xc0>)
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RTC_GetTime+0xc0>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d049      	beq.n	800394e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80038ba:	4b27      	ldr	r3, [pc, #156]	; (8003958 <HAL_RTC_GetTime+0xc0>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RTC_GetTime+0xc0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038d2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	0c1b      	lsrs	r3, r3, #16
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	0d9b      	lsrs	r3, r3, #22
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11a      	bne.n	800394e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fade 	bl	8003ede <RTC_Bcd2ToByte>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	785b      	ldrb	r3, [r3, #1]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fad5 	bl	8003ede <RTC_Bcd2ToByte>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	789b      	ldrb	r3, [r3, #2]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 facc 	bl	8003ede <RTC_Bcd2ToByte>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40002800 	.word	0x40002800

0800395c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_RTC_SetDate+0x1a>
 8003972:	2302      	movs	r3, #2
 8003974:	e071      	b.n	8003a5a <HAL_RTC_SetDate+0xfe>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10e      	bne.n	80039aa <HAL_RTC_SetDate+0x4e>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	f023 0310 	bic.w	r3, r3, #16
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	330a      	adds	r3, #10
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11c      	bne.n	80039ea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	78db      	ldrb	r3, [r3, #3]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fa73 	bl	8003ea0 <RTC_ByteToBcd2>
 80039ba:	4603      	mov	r3, r0
 80039bc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa6c 	bl	8003ea0 <RTC_ByteToBcd2>
 80039c8:	4603      	mov	r3, r0
 80039ca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039cc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	789b      	ldrb	r3, [r3, #2]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fa64 	bl	8003ea0 <RTC_ByteToBcd2>
 80039d8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039da:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e00e      	b.n	8003a08 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	78db      	ldrb	r3, [r3, #3]
 80039ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039f6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_RTC_SetDate+0x108>)
 8003a0a:	22ca      	movs	r2, #202	; 0xca
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RTC_SetDate+0x108>)
 8003a10:	2253      	movs	r2, #83	; 0x53
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9d1 	bl	8003dbc <RTC_EnterInitMode>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003a24:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <HAL_RTC_SetDate+0x108>)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f9f6 	bl	8003e24 <RTC_ExitInitMode>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RTC_SetDate+0x108>)
 8003a3e:	22ff      	movs	r2, #255	; 0xff
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd90      	pop	{r4, r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40002800 	.word	0x40002800

08003a68 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003a74:	4b22      	ldr	r3, [pc, #136]	; (8003b00 <HAL_RTC_GetDate+0x98>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a80:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	0b5b      	lsrs	r3, r3, #13
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d11a      	bne.n	8003af6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	78db      	ldrb	r3, [r3, #3]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fa0a 	bl	8003ede <RTC_Bcd2ToByte>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fa01 	bl	8003ede <RTC_Bcd2ToByte>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	789b      	ldrb	r3, [r3, #2]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f9f8 	bl	8003ede <RTC_Bcd2ToByte>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40002800 	.word	0x40002800

08003b04 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_RTC_SetAlarm_IT+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0f3      	b.n	8003d0a <HAL_RTC_SetAlarm_IT+0x206>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003b32:	4b78      	ldr	r3, [pc, #480]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b42:	d06a      	beq.n	8003c1a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d13a      	bne.n	8003bc0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b4a:	4b72      	ldr	r3, [pc, #456]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f999 	bl	8003ea0 <RTC_ByteToBcd2>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f992 	bl	8003ea0 <RTC_ByteToBcd2>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b80:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	789b      	ldrb	r3, [r3, #2]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f98a 	bl	8003ea0 <RTC_ByteToBcd2>
 8003b8c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b8e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	78db      	ldrb	r3, [r3, #3]
 8003b96:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b98:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f97c 	bl	8003ea0 <RTC_ByteToBcd2>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003bac:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003bb4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e02c      	b.n	8003c1a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003bc8:	d00d      	beq.n	8003be6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd2:	d008      	beq.n	8003be6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003bf2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003bf8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	78db      	ldrb	r3, [r3, #3]
 8003bfe:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003c00:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c08:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c0a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c10:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c1c:	22ca      	movs	r2, #202	; 0xca
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8003c20:	4b3c      	ldr	r3, [pc, #240]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c22:	2253      	movs	r2, #83	; 0x53
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2e:	d12c      	bne.n	8003c8a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003c30:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c3a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003c3c:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c48:	d107      	bne.n	8003c5a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4930      	ldr	r1, [pc, #192]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	644b      	str	r3, [r1, #68]	; 0x44
 8003c58:	e006      	b.n	8003c68 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003c5a:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003c60:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003c68:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c82:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003c86:	6193      	str	r3, [r2, #24]
 8003c88:	e02b      	b.n	8003ce2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c90:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003c94:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003c96:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c98:	2202      	movs	r2, #2
 8003c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4919      	ldr	r1, [pc, #100]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cb2:	e006      	b.n	8003cc2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003cba:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003cc2:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cdc:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003ce0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RTC_SetAlarm_IT+0x214>)
 8003ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce8:	4a0b      	ldr	r2, [pc, #44]	; (8003d18 <HAL_RTC_SetAlarm_IT+0x214>)
 8003cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40002800 	.word	0x40002800
 8003d18:	58000800 	.word	0x58000800

08003d1c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fc fe75 	bl	8000a30 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003d52:	2202      	movs	r2, #2
 8003d54:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8dc 	bl	8003f14 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40002800 	.word	0x40002800

08003d70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RTC_WaitForSynchro+0x48>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <HAL_RTC_WaitForSynchro+0x48>)
 8003d7e:	f023 0320 	bic.w	r3, r3, #32
 8003d82:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003d84:	f7fd fdf2 	bl	800196c <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003d8a:	e009      	b.n	8003da0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d8c:	f7fd fdee 	bl	800196c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d9a:	d901      	bls.n	8003da0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RTC_WaitForSynchro+0x48>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40002800 	.word	0x40002800

08003dbc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003dc8:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <RTC_EnterInitMode+0x64>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d120      	bne.n	8003e16 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <RTC_EnterInitMode+0x64>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <RTC_EnterInitMode+0x64>)
 8003dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dde:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003de0:	f7fd fdc4 	bl	800196c <HAL_GetTick>
 8003de4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003de6:	e00d      	b.n	8003e04 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003de8:	f7fd fdc0 	bl	800196c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df6:	d905      	bls.n	8003e04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <RTC_EnterInitMode+0x64>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <RTC_EnterInitMode+0x5a>
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d1e8      	bne.n	8003de8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40002800 	.word	0x40002800

08003e24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <RTC_ExitInitMode+0x78>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <RTC_ExitInitMode+0x78>)
 8003e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <RTC_ExitInitMode+0x78>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10c      	bne.n	8003e62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff91 	bl	8003d70 <HAL_RTC_WaitForSynchro>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01e      	beq.n	8003e92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2203      	movs	r2, #3
 8003e58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e017      	b.n	8003e92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <RTC_ExitInitMode+0x78>)
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <RTC_ExitInitMode+0x78>)
 8003e68:	f023 0320 	bic.w	r3, r3, #32
 8003e6c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff7e 	bl	8003d70 <HAL_RTC_WaitForSynchro>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <RTC_ExitInitMode+0x78>)
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <RTC_ExitInitMode+0x78>)
 8003e8c:	f043 0320 	orr.w	r3, r3, #32
 8003e90:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40002800 	.word	0x40002800

08003ea0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003eb2:	e005      	b.n	8003ec0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003eba:	7afb      	ldrb	r3, [r7, #11]
 8003ebc:	3b0a      	subs	r3, #10
 8003ebe:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003ec0:	7afb      	ldrb	r3, [r7, #11]
 8003ec2:	2b09      	cmp	r3, #9
 8003ec4:	d8f6      	bhi.n	8003eb4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	7afb      	ldrb	r3, [r7, #11]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b2db      	uxtb	r3, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	b2db      	uxtb	r3, r3
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_GetUSARTClockSource>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	401a      	ands	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	4313      	orrs	r3, r2
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_GetLPUARTClockSource>:
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4013      	ands	r3, r2
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e042      	b.n	8004000 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fd fab1 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2224      	movs	r2, #36	; 0x24
 8003f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fc3c 	bl	8004828 <UART_SetConfig>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e022      	b.n	8004000 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fea4 	bl	8004d10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 ff2a 	bl	8004e52 <UART_CheckIdleState>
 8003ffe:	4603      	mov	r3, r0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004008:	b480      	push	{r7}
 800400a:	b091      	sub	sp, #68	; 0x44
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	2b20      	cmp	r3, #32
 800401e:	d178      	bne.n	8004112 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_UART_Transmit_IT+0x24>
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e071      	b.n	8004114 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004064:	d12a      	bne.n	80040bc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d107      	bne.n	8004080 <HAL_UART_Transmit_IT+0x78>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a29      	ldr	r2, [pc, #164]	; (8004120 <HAL_UART_Transmit_IT+0x118>)
 800407c:	679a      	str	r2, [r3, #120]	; 0x78
 800407e:	e002      	b.n	8004086 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_UART_Transmit_IT+0x11c>)
 8004084:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800409c:	63bb      	str	r3, [r7, #56]	; 0x38
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a6:	637a      	str	r2, [r7, #52]	; 0x34
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <HAL_UART_Transmit_IT+0x7e>
 80040ba:	e028      	b.n	800410e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c4:	d107      	bne.n	80040d6 <HAL_UART_Transmit_IT+0xce>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a15      	ldr	r2, [pc, #84]	; (8004128 <HAL_UART_Transmit_IT+0x120>)
 80040d2:	679a      	str	r2, [r3, #120]	; 0x78
 80040d4:	e002      	b.n	80040dc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <HAL_UART_Transmit_IT+0x124>)
 80040da:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	61bb      	str	r3, [r7, #24]
   return(result);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3744      	adds	r7, #68	; 0x44
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	0800560b 	.word	0x0800560b
 8004124:	0800552d 	.word	0x0800552d
 8004128:	0800546d 	.word	0x0800546d
 800412c:	080053b7 	.word	0x080053b7

08004130 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004144:	2b20      	cmp	r3, #32
 8004146:	d137      	bne.n	80041b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Receive_IT+0x24>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e030      	b.n	80041ba <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <HAL_UART_Receive_IT+0x94>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01f      	beq.n	80041a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	613b      	str	r3, [r7, #16]
   return(result);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69f9      	ldr	r1, [r7, #28]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 ff66 	bl	8005080 <UART_Start_Receive_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40008000 	.word	0x40008000

080041c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b0ba      	sub	sp, #232	; 0xe8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041f6:	4013      	ands	r3, r2
 80041f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d11b      	bne.n	800423c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800421c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 82e3 	beq.w	80047f8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
      }
      return;
 800423a:	e2dd      	b.n	80047f8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800423c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8123 	beq.w	800448c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004246:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <HAL_UART_IRQHandler+0x2b8>)
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004256:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <HAL_UART_IRQHandler+0x2bc>)
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8116 	beq.w	800448c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d011      	beq.n	8004290 <HAL_UART_IRQHandler+0xc8>
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d011      	beq.n	80042c0 <HAL_UART_IRQHandler+0xf8>
 800429c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2202      	movs	r2, #2
 80042ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d011      	beq.n	80042f0 <HAL_UART_IRQHandler+0x128>
 80042cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2204      	movs	r2, #4
 80042de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f043 0202 	orr.w	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d017      	beq.n	800432c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004308:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800430c:	4b5c      	ldr	r3, [pc, #368]	; (8004480 <HAL_UART_IRQHandler+0x2b8>)
 800430e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2208      	movs	r2, #8
 800431a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f043 0208 	orr.w	r2, r3, #8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	2b00      	cmp	r3, #0
 8004336:	d012      	beq.n	800435e <HAL_UART_IRQHandler+0x196>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00c      	beq.n	800435e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800434c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8249 	beq.w	80047fc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d013      	beq.n	800439e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d054      	beq.n	800446c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 ff7c 	bl	80052c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d146      	bne.n	8004464 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004402:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800440e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800441a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1d9      	bne.n	80043d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d017      	beq.n	800445c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <HAL_UART_IRQHandler+0x2c0>)
 8004434:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd fc08 	bl	8001c52 <HAL_DMA_Abort_IT>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d019      	beq.n	800447c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004456:	4610      	mov	r0, r2
 8004458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445a:	e00f      	b.n	800447c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fc fa9f 	bl	80009a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004462:	e00b      	b.n	800447c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fc fa9b 	bl	80009a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446a:	e007      	b.n	800447c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fc fa97 	bl	80009a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800447a:	e1bf      	b.n	80047fc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	bf00      	nop
    return;
 800447e:	e1bd      	b.n	80047fc <HAL_UART_IRQHandler+0x634>
 8004480:	10000001 	.word	0x10000001
 8004484:	04000120 	.word	0x04000120
 8004488:	0800538b 	.word	0x0800538b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004490:	2b01      	cmp	r3, #1
 8004492:	f040 8153 	bne.w	800473c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 814c 	beq.w	800473c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8145 	beq.w	800473c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2210      	movs	r2, #16
 80044b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	f040 80bb 	bne.w	8004640 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 818f 	beq.w	8004800 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ec:	429a      	cmp	r2, r3
 80044ee:	f080 8187 	bcs.w	8004800 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	f040 8087 	bne.w	800461e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800452c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800453a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800453e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004546:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1da      	bne.n	8004510 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800456a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800457e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004582:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004586:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e1      	bne.n	800455a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e3      	bne.n	8004596 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ec:	f023 0310 	bic.w	r3, r3, #16
 80045f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004600:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800460c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e4      	bne.n	80045dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004618:	4618      	mov	r0, r3
 800461a:	f7fd fabc 	bl	8001b96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004630:	b29b      	uxth	r3, r3
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	b29b      	uxth	r3, r3
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8e9 	bl	8004810 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800463e:	e0df      	b.n	8004800 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800464c:	b29b      	uxth	r3, r3
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80d1 	beq.w	8004804 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80cc 	beq.w	8004804 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800468e:	647b      	str	r3, [r7, #68]	; 0x44
 8004690:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e4      	bne.n	800466c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	623b      	str	r3, [r7, #32]
   return(result);
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046ca:	633a      	str	r2, [r7, #48]	; 0x30
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e1      	bne.n	80046a2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0310 	bic.w	r3, r3, #16
 8004706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	617b      	str	r3, [r7, #20]
   return(result);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e4      	bne.n	80046f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800472e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f86b 	bl	8004810 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800473a:	e063      	b.n	8004804 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00e      	beq.n	8004766 <HAL_UART_IRQHandler+0x59e>
 8004748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800475c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 fd0e 	bl	8006180 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004764:	e051      	b.n	800480a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d014      	beq.n	800479c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800477e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03a      	beq.n	8004808 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
    }
    return;
 800479a:	e035      	b.n	8004808 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_UART_IRQHandler+0x5f4>
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 ff9c 	bl	80056f2 <UART_EndTransmit_IT>
    return;
 80047ba:	e026      	b.n	800480a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_UART_IRQHandler+0x614>
 80047c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 fce5 	bl	80061a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047da:	e016      	b.n	800480a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <HAL_UART_IRQHandler+0x642>
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	da0c      	bge.n	800480a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 fcce 	bl	8006192 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047f6:	e008      	b.n	800480a <HAL_UART_IRQHandler+0x642>
      return;
 80047f8:	bf00      	nop
 80047fa:	e006      	b.n	800480a <HAL_UART_IRQHandler+0x642>
    return;
 80047fc:	bf00      	nop
 80047fe:	e004      	b.n	800480a <HAL_UART_IRQHandler+0x642>
      return;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <HAL_UART_IRQHandler+0x642>
      return;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_UART_IRQHandler+0x642>
    return;
 8004808:	bf00      	nop
  }
}
 800480a:	37e8      	adds	r7, #232	; 0xe8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr
	...

08004828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b08c      	sub	sp, #48	; 0x30
 800482e:	af00      	add	r7, sp, #0
 8004830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	431a      	orrs	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	4313      	orrs	r3, r2
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b94      	ldr	r3, [pc, #592]	; (8004aa8 <UART_SetConfig+0x280>)
 8004858:	4013      	ands	r3, r2
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004860:	430b      	orrs	r3, r1
 8004862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a89      	ldr	r2, [pc, #548]	; (8004aac <UART_SetConfig+0x284>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	4313      	orrs	r3, r2
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800489e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	f023 010f 	bic.w	r1, r3, #15
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a7a      	ldr	r2, [pc, #488]	; (8004ab0 <UART_SetConfig+0x288>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d127      	bne.n	800491c <UART_SetConfig+0xf4>
 80048cc:	2003      	movs	r0, #3
 80048ce:	f7ff fb2a 	bl	8003f26 <LL_RCC_GetUSARTClockSource>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d81b      	bhi.n	8004914 <UART_SetConfig+0xec>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0xbc>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	08004905 	.word	0x08004905
 80048ec:	080048fd 	.word	0x080048fd
 80048f0:	0800490d 	.word	0x0800490d
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e080      	b.n	80049fe <UART_SetConfig+0x1d6>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004902:	e07c      	b.n	80049fe <UART_SetConfig+0x1d6>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490a:	e078      	b.n	80049fe <UART_SetConfig+0x1d6>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004912:	e074      	b.n	80049fe <UART_SetConfig+0x1d6>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491a:	e070      	b.n	80049fe <UART_SetConfig+0x1d6>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a64      	ldr	r2, [pc, #400]	; (8004ab4 <UART_SetConfig+0x28c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d138      	bne.n	8004998 <UART_SetConfig+0x170>
 8004926:	200c      	movs	r0, #12
 8004928:	f7ff fafd 	bl	8003f26 <LL_RCC_GetUSARTClockSource>
 800492c:	4603      	mov	r3, r0
 800492e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d82c      	bhi.n	8004990 <UART_SetConfig+0x168>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x114>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004971 	.word	0x08004971
 8004940:	08004991 	.word	0x08004991
 8004944:	08004991 	.word	0x08004991
 8004948:	08004991 	.word	0x08004991
 800494c:	08004981 	.word	0x08004981
 8004950:	08004991 	.word	0x08004991
 8004954:	08004991 	.word	0x08004991
 8004958:	08004991 	.word	0x08004991
 800495c:	08004979 	.word	0x08004979
 8004960:	08004991 	.word	0x08004991
 8004964:	08004991 	.word	0x08004991
 8004968:	08004991 	.word	0x08004991
 800496c:	08004989 	.word	0x08004989
 8004970:	2300      	movs	r3, #0
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e042      	b.n	80049fe <UART_SetConfig+0x1d6>
 8004978:	2302      	movs	r3, #2
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e03e      	b.n	80049fe <UART_SetConfig+0x1d6>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e03a      	b.n	80049fe <UART_SetConfig+0x1d6>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e036      	b.n	80049fe <UART_SetConfig+0x1d6>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004996:	e032      	b.n	80049fe <UART_SetConfig+0x1d6>
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a43      	ldr	r2, [pc, #268]	; (8004aac <UART_SetConfig+0x284>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d12a      	bne.n	80049f8 <UART_SetConfig+0x1d0>
 80049a2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80049a6:	f7ff fad0 	bl	8003f4a <LL_RCC_GetLPUARTClockSource>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b0:	d01a      	beq.n	80049e8 <UART_SetConfig+0x1c0>
 80049b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b6:	d81b      	bhi.n	80049f0 <UART_SetConfig+0x1c8>
 80049b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049bc:	d00c      	beq.n	80049d8 <UART_SetConfig+0x1b0>
 80049be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c2:	d815      	bhi.n	80049f0 <UART_SetConfig+0x1c8>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <UART_SetConfig+0x1a8>
 80049c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049cc:	d008      	beq.n	80049e0 <UART_SetConfig+0x1b8>
 80049ce:	e00f      	b.n	80049f0 <UART_SetConfig+0x1c8>
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d6:	e012      	b.n	80049fe <UART_SetConfig+0x1d6>
 80049d8:	2302      	movs	r3, #2
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049de:	e00e      	b.n	80049fe <UART_SetConfig+0x1d6>
 80049e0:	2304      	movs	r3, #4
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e6:	e00a      	b.n	80049fe <UART_SetConfig+0x1d6>
 80049e8:	2308      	movs	r3, #8
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ee:	e006      	b.n	80049fe <UART_SetConfig+0x1d6>
 80049f0:	2310      	movs	r3, #16
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f6:	e002      	b.n	80049fe <UART_SetConfig+0x1d6>
 80049f8:	2310      	movs	r3, #16
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2a      	ldr	r2, [pc, #168]	; (8004aac <UART_SetConfig+0x284>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	f040 80a4 	bne.w	8004b52 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d823      	bhi.n	8004a5a <UART_SetConfig+0x232>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0x1f0>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a5b 	.word	0x08004a5b
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a5b 	.word	0x08004a5b
 8004a28:	08004a4b 	.word	0x08004a4b
 8004a2c:	08004a5b 	.word	0x08004a5b
 8004a30:	08004a5b 	.word	0x08004a5b
 8004a34:	08004a5b 	.word	0x08004a5b
 8004a38:	08004a53 	.word	0x08004a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a3c:	f7fe fb2a 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004a40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a42:	e010      	b.n	8004a66 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a44:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <UART_SetConfig+0x290>)
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a48:	e00d      	b.n	8004a66 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7fe fa6f 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8004a4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a50:	e009      	b.n	8004a66 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a58:	e005      	b.n	8004a66 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8137 	beq.w	8004cdc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4a12      	ldr	r2, [pc, #72]	; (8004abc <UART_SetConfig+0x294>)
 8004a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	4413      	add	r3, r2
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d305      	bcc.n	8004a9e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d910      	bls.n	8004ac0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004aa4:	e11a      	b.n	8004cdc <UART_SetConfig+0x4b4>
 8004aa6:	bf00      	nop
 8004aa8:	cfff69f3 	.word	0xcfff69f3
 8004aac:	40008000 	.word	0x40008000
 8004ab0:	40013800 	.word	0x40013800
 8004ab4:	40004400 	.word	0x40004400
 8004ab8:	00f42400 	.word	0x00f42400
 8004abc:	08006e6c 	.word	0x08006e6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	60fa      	str	r2, [r7, #12]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	4a8e      	ldr	r2, [pc, #568]	; (8004d08 <UART_SetConfig+0x4e0>)
 8004ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ae2:	f7fb fb9d 	bl	8000220 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	020b      	lsls	r3, r1, #8
 8004af8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004afc:	0202      	lsls	r2, r0, #8
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	6849      	ldr	r1, [r1, #4]
 8004b02:	0849      	lsrs	r1, r1, #1
 8004b04:	2000      	movs	r0, #0
 8004b06:	460c      	mov	r4, r1
 8004b08:	4605      	mov	r5, r0
 8004b0a:	eb12 0804 	adds.w	r8, r2, r4
 8004b0e:	eb43 0905 	adc.w	r9, r3, r5
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	469a      	mov	sl, r3
 8004b1a:	4693      	mov	fp, r2
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	465b      	mov	r3, fp
 8004b20:	4640      	mov	r0, r8
 8004b22:	4649      	mov	r1, r9
 8004b24:	f7fb fb7c 	bl	8000220 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b36:	d308      	bcc.n	8004b4a <UART_SetConfig+0x322>
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b3e:	d204      	bcs.n	8004b4a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	60da      	str	r2, [r3, #12]
 8004b48:	e0c8      	b.n	8004cdc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b50:	e0c4      	b.n	8004cdc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5a:	d167      	bne.n	8004c2c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d828      	bhi.n	8004bb6 <UART_SetConfig+0x38e>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0x344>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004ba1 	.word	0x08004ba1
 8004b78:	08004bb7 	.word	0x08004bb7
 8004b7c:	08004ba7 	.word	0x08004ba7
 8004b80:	08004bb7 	.word	0x08004bb7
 8004b84:	08004bb7 	.word	0x08004bb7
 8004b88:	08004bb7 	.word	0x08004bb7
 8004b8c:	08004baf 	.word	0x08004baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b90:	f7fe fa80 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004b94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b96:	e014      	b.n	8004bc2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b98:	f7fe fa8e 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8004b9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b9e:	e010      	b.n	8004bc2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba0:	4b5a      	ldr	r3, [pc, #360]	; (8004d0c <UART_SetConfig+0x4e4>)
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ba4:	e00d      	b.n	8004bc2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba6:	f7fe f9c1 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8004baa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bac:	e009      	b.n	8004bc2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb4:	e005      	b.n	8004bc2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8089 	beq.w	8004cdc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	4a4e      	ldr	r2, [pc, #312]	; (8004d08 <UART_SetConfig+0x4e0>)
 8004bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bdc:	005a      	lsls	r2, r3, #1
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	441a      	add	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2b0f      	cmp	r3, #15
 8004bf4:	d916      	bls.n	8004c24 <UART_SetConfig+0x3fc>
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfc:	d212      	bcs.n	8004c24 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f023 030f 	bic.w	r3, r3, #15
 8004c06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	8bfb      	ldrh	r3, [r7, #30]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	8bfa      	ldrh	r2, [r7, #30]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	e05b      	b.n	8004cdc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c2a:	e057      	b.n	8004cdc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d828      	bhi.n	8004c86 <UART_SetConfig+0x45e>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x414>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c87 	.word	0x08004c87
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fe fa18 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c66:	e014      	b.n	8004c92 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fe fa26 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c6e:	e010      	b.n	8004c92 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <UART_SetConfig+0x4e4>)
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c74:	e00d      	b.n	8004c92 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe f959 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8004c7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c7c:	e009      	b.n	8004c92 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c84:	e005      	b.n	8004c92 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c90:	bf00      	nop
    }

    if (pclk != 0U)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d021      	beq.n	8004cdc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	4a1a      	ldr	r2, [pc, #104]	; (8004d08 <UART_SetConfig+0x4e0>)
 8004c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	441a      	add	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d909      	bls.n	8004cd6 <UART_SetConfig+0x4ae>
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d205      	bcs.n	8004cd6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	e002      	b.n	8004cdc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cf8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3730      	adds	r7, #48	; 0x30
 8004d00:	46bd      	mov	sp, r7
 8004d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d06:	bf00      	nop
 8004d08:	08006e6c 	.word	0x08006e6c
 8004d0c:	00f42400 	.word	0x00f42400

08004d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01a      	beq.n	8004e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0e:	d10a      	bne.n	8004e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]
  }
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr

08004e52 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b086      	sub	sp, #24
 8004e56:	af02      	add	r7, sp, #8
 8004e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e62:	f7fc fd83 	bl	800196c <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d10e      	bne.n	8004e94 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f832 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e028      	b.n	8004ee6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d10e      	bne.n	8004ec0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f81c 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e012      	b.n	8004ee6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b09c      	sub	sp, #112	; 0x70
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	e0a9      	b.n	8005054 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f06:	f000 80a5 	beq.w	8005054 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7fc fd2f 	bl	800196c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d140      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f34:	667b      	str	r3, [r7, #100]	; 0x64
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e6      	bne.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	663b      	str	r3, [r7, #96]	; 0x60
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f72:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e069      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d051      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	d149      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e6      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3308      	adds	r3, #8
 8005002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	613b      	str	r3, [r7, #16]
   return(result);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	66bb      	str	r3, [r7, #104]	; 0x68
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800501c:	623a      	str	r2, [r7, #32]
 800501e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	69f9      	ldr	r1, [r7, #28]
 8005022:	6a3a      	ldr	r2, [r7, #32]
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	61bb      	str	r3, [r7, #24]
   return(result);
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e5      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e010      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	429a      	cmp	r2, r3
 8005070:	f43f af46 	beq.w	8004f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3770      	adds	r7, #112	; 0x70
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005080:	b480      	push	{r7}
 8005082:	b0a3      	sub	sp, #140	; 0x8c
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	d10e      	bne.n	80050d2 <UART_Start_Receive_IT+0x52>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <UART_Start_Receive_IT+0x48>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050c6:	e02d      	b.n	8005124 <UART_Start_Receive_IT+0xa4>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	22ff      	movs	r2, #255	; 0xff
 80050cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050d0:	e028      	b.n	8005124 <UART_Start_Receive_IT+0xa4>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10d      	bne.n	80050f6 <UART_Start_Receive_IT+0x76>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <UART_Start_Receive_IT+0x6c>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	22ff      	movs	r2, #255	; 0xff
 80050e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050ea:	e01b      	b.n	8005124 <UART_Start_Receive_IT+0xa4>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	227f      	movs	r2, #127	; 0x7f
 80050f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050f4:	e016      	b.n	8005124 <UART_Start_Receive_IT+0xa4>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050fe:	d10d      	bne.n	800511c <UART_Start_Receive_IT+0x9c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d104      	bne.n	8005112 <UART_Start_Receive_IT+0x92>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	227f      	movs	r2, #127	; 0x7f
 800510c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005110:	e008      	b.n	8005124 <UART_Start_Receive_IT+0xa4>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	223f      	movs	r2, #63	; 0x3f
 8005116:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800511a:	e003      	b.n	8005124 <UART_Start_Receive_IT+0xa4>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2222      	movs	r2, #34	; 0x22
 8005130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3308      	adds	r3, #8
 800513a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005158:	673a      	str	r2, [r7, #112]	; 0x70
 800515a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800515e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e3      	bne.n	8005134 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005174:	d14f      	bne.n	8005216 <UART_Start_Receive_IT+0x196>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	429a      	cmp	r2, r3
 8005180:	d349      	bcc.n	8005216 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	d107      	bne.n	800519c <UART_Start_Receive_IT+0x11c>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a46      	ldr	r2, [pc, #280]	; (80052b0 <UART_Start_Receive_IT+0x230>)
 8005198:	675a      	str	r2, [r3, #116]	; 0x74
 800519a:	e002      	b.n	80051a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a45      	ldr	r2, [pc, #276]	; (80052b4 <UART_Start_Receive_IT+0x234>)
 80051a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01a      	beq.n	80051e0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e4      	bne.n	80051aa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005200:	64ba      	str	r2, [r7, #72]	; 0x48
 8005202:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800520e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_Start_Receive_IT+0x160>
 8005214:	e046      	b.n	80052a4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521e:	d107      	bne.n	8005230 <UART_Start_Receive_IT+0x1b0>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a23      	ldr	r2, [pc, #140]	; (80052b8 <UART_Start_Receive_IT+0x238>)
 800522c:	675a      	str	r2, [r3, #116]	; 0x74
 800522e:	e002      	b.n	8005236 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a22      	ldr	r2, [pc, #136]	; (80052bc <UART_Start_Receive_IT+0x23c>)
 8005234:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d019      	beq.n	8005272 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005252:	677b      	str	r3, [r7, #116]	; 0x74
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
 800525e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e6      	bne.n	800523e <UART_Start_Receive_IT+0x1be>
 8005270:	e018      	b.n	80052a4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	613b      	str	r3, [r7, #16]
   return(result);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	67bb      	str	r3, [r7, #120]	; 0x78
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	61bb      	str	r3, [r7, #24]
   return(result);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e6      	bne.n	8005272 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	378c      	adds	r7, #140	; 0x8c
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr
 80052b0:	08005e19 	.word	0x08005e19
 80052b4:	08005ab9 	.word	0x08005ab9
 80052b8:	08005901 	.word	0x08005901
 80052bc:	08005749 	.word	0x08005749

080052c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b095      	sub	sp, #84	; 0x54
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
 80052e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	61fb      	str	r3, [r7, #28]
   return(result);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	64bb      	str	r3, [r7, #72]	; 0x48
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800531e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e3      	bne.n	80052fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d118      	bne.n	800536c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	60bb      	str	r3, [r7, #8]
   return(result);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0310 	bic.w	r3, r3, #16
 800534e:	647b      	str	r3, [r7, #68]	; 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e6      	bne.n	800533a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005380:	bf00      	nop
 8005382:	3754      	adds	r7, #84	; 0x54
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7fb faf9 	bl	80009a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b08f      	sub	sp, #60	; 0x3c
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	2b21      	cmp	r3, #33	; 0x21
 80053c6:	d14c      	bne.n	8005462 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d132      	bne.n	800543a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e6      	bne.n	80053d4 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60bb      	str	r3, [r7, #8]
   return(result);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800541a:	633b      	str	r3, [r7, #48]	; 0x30
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6979      	ldr	r1, [r7, #20]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	613b      	str	r3, [r7, #16]
   return(result);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005438:	e013      	b.n	8005462 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005462:	bf00      	nop
 8005464:	373c      	adds	r7, #60	; 0x3c
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800546c:	b480      	push	{r7}
 800546e:	b091      	sub	sp, #68	; 0x44
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	2b21      	cmp	r3, #33	; 0x21
 800547c:	d151      	bne.n	8005522 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d132      	bne.n	80054f0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	623b      	str	r3, [r7, #32]
   return(result);
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	633b      	str	r3, [r7, #48]	; 0x30
 80054aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e6      	bne.n	800548a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	617b      	str	r3, [r7, #20]
   return(result);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e6      	bne.n	80054bc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80054ee:	e018      	b.n	8005522 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80054f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005504:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005522:	bf00      	nop
 8005524:	3744      	adds	r7, #68	; 0x44
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b091      	sub	sp, #68	; 0x44
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	2b21      	cmp	r3, #33	; 0x21
 800553c:	d160      	bne.n	8005600 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005544:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005546:	e057      	b.n	80055f8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d133      	bne.n	80055bc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	623b      	str	r3, [r7, #32]
   return(result);
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800556a:	63bb      	str	r3, [r7, #56]	; 0x38
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005574:	633a      	str	r2, [r7, #48]	; 0x30
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800557a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	60fb      	str	r3, [r7, #12]
   return(result);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	69b9      	ldr	r1, [r7, #24]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	617b      	str	r3, [r7, #20]
   return(result);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e6      	bne.n	8005588 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80055ba:	e021      	b.n	8005600 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d013      	beq.n	80055f2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	781a      	ldrb	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80055f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055f4:	3b01      	subs	r3, #1
 80055f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80055f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1a4      	bne.n	8005548 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80055fe:	e7ff      	b.n	8005600 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005600:	bf00      	nop
 8005602:	3744      	adds	r7, #68	; 0x44
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800560a:	b480      	push	{r7}
 800560c:	b091      	sub	sp, #68	; 0x44
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	2b21      	cmp	r3, #33	; 0x21
 800561a:	d165      	bne.n	80056e8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005622:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005624:	e05c      	b.n	80056e0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d133      	bne.n	800569a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3308      	adds	r3, #8
 8005638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	61fb      	str	r3, [r7, #28]
   return(result);
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	60bb      	str	r3, [r7, #8]
   return(result);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005698:	e026      	b.n	80056e8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d018      	beq.n	80056da <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80056da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80056dc:	3b01      	subs	r3, #1
 80056de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80056e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d19f      	bne.n	8005626 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80056e6:	e7ff      	b.n	80056e8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80056e8:	bf00      	nop
 80056ea:	3744      	adds	r7, #68	; 0x44
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b088      	sub	sp, #32
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60bb      	str	r3, [r7, #8]
   return(result);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6979      	ldr	r1, [r7, #20]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	613b      	str	r3, [r7, #16]
   return(result);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fb f948 	bl	80009d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005740:	bf00      	nop
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b09c      	sub	sp, #112	; 0x70
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005756:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005760:	2b22      	cmp	r3, #34	; 0x22
 8005762:	f040 80be 	bne.w	80058e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005770:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005774:	b2d9      	uxtb	r1, r3
 8005776:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800577a:	b2da      	uxtb	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	400a      	ands	r2, r1
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 80a1 	bne.w	80058f2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80057d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e6      	bne.n	80057b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3308      	adds	r3, #8
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	667b      	str	r3, [r7, #100]	; 0x64
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005802:	647a      	str	r2, [r7, #68]	; 0x44
 8005804:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e5      	bne.n	80057e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a33      	ldr	r2, [pc, #204]	; (80058fc <UART_RxISR_8BIT+0x1b4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d01f      	beq.n	8005874 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d018      	beq.n	8005874 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	623b      	str	r3, [r7, #32]
   return(result);
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005856:	663b      	str	r3, [r7, #96]	; 0x60
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005860:	633b      	str	r3, [r7, #48]	; 0x30
 8005862:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e6      	bne.n	8005842 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d12e      	bne.n	80058da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0310 	bic.w	r3, r3, #16
 8005896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	617b      	str	r3, [r7, #20]
   return(result);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e6      	bne.n	8005882 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d103      	bne.n	80058ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2210      	movs	r2, #16
 80058c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fe ff9c 	bl	8004810 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058d8:	e00b      	b.n	80058f2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fb f890 	bl	8000a00 <HAL_UART_RxCpltCallback>
}
 80058e0:	e007      	b.n	80058f2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0208 	orr.w	r2, r2, #8
 80058f0:	619a      	str	r2, [r3, #24]
}
 80058f2:	bf00      	nop
 80058f4:	3770      	adds	r7, #112	; 0x70
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40008000 	.word	0x40008000

08005900 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b09c      	sub	sp, #112	; 0x70
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800590e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005918:	2b22      	cmp	r3, #34	; 0x22
 800591a:	f040 80be 	bne.w	8005a9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800592e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005932:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005936:	4013      	ands	r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800593c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	1c9a      	adds	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 80a1 	bne.w	8005aaa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800597c:	667b      	str	r3, [r7, #100]	; 0x64
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005986:	657b      	str	r3, [r7, #84]	; 0x54
 8005988:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800598c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e6      	bne.n	8005968 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	663b      	str	r3, [r7, #96]	; 0x60
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059ba:	643a      	str	r2, [r7, #64]	; 0x40
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e5      	bne.n	800599a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a33      	ldr	r2, [pc, #204]	; (8005ab4 <UART_RxISR_16BIT+0x1b4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d01f      	beq.n	8005a2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e6      	bne.n	80059fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d12e      	bne.n	8005a92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6979      	ldr	r1, [r7, #20]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	613b      	str	r3, [r7, #16]
   return(result);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d103      	bne.n	8005a82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2210      	movs	r2, #16
 8005a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fe fec0 	bl	8004810 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a90:	e00b      	b.n	8005aaa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fa ffb4 	bl	8000a00 <HAL_UART_RxCpltCallback>
}
 8005a98:	e007      	b.n	8005aaa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0208 	orr.w	r2, r2, #8
 8005aa8:	619a      	str	r2, [r3, #24]
}
 8005aaa:	bf00      	nop
 8005aac:	3770      	adds	r7, #112	; 0x70
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40008000 	.word	0x40008000

08005ab8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b0ac      	sub	sp, #176	; 0xb0
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ac6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aee:	2b22      	cmp	r3, #34	; 0x22
 8005af0:	f040 8182 	bne.w	8005df8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005afa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005afe:	e125      	b.n	8005d4c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b0a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005b0e:	b2d9      	uxtb	r1, r3
 8005b10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d053      	beq.n	8005bfa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d011      	beq.n	8005b82 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	f043 0201 	orr.w	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00b      	beq.n	8005bb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba8:	f043 0204 	orr.w	r2, r3, #4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d011      	beq.n	8005be2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2204      	movs	r2, #4
 8005bd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f043 0202 	orr.w	r2, r3, #2
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fa fed7 	bl	80009a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 80a2 	bne.w	8005d4c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c2c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005c30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e4      	bne.n	8005c08 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c66:	66ba      	str	r2, [r7, #104]	; 0x68
 8005c68:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005c6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e1      	bne.n	8005c3e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5f      	ldr	r2, [pc, #380]	; (8005e10 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d021      	beq.n	8005cdc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01a      	beq.n	8005cdc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cc8:	657b      	str	r3, [r7, #84]	; 0x54
 8005cca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e4      	bne.n	8005ca6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d130      	bne.n	8005d46 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e4      	bne.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d103      	bne.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2210      	movs	r2, #16
 8005d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fe fd66 	bl	8004810 <HAL_UARTEx_RxEventCallback>
 8005d44:	e002      	b.n	8005d4c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fa fe5a 	bl	8000a00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d006      	beq.n	8005d62 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f47f aecf 	bne.w	8005b00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d049      	beq.n	8005e08 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d242      	bcs.n	8005e08 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e3      	bne.n	8005d82 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005dbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f043 0320 	orr.w	r3, r3, #32
 8005dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6979      	ldr	r1, [r7, #20]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e4      	bne.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005df6:	e007      	b.n	8005e08 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	619a      	str	r2, [r3, #24]
}
 8005e08:	bf00      	nop
 8005e0a:	37b0      	adds	r7, #176	; 0xb0
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40008000 	.word	0x40008000
 8005e14:	08005749 	.word	0x08005749

08005e18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b0ae      	sub	sp, #184	; 0xb8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e26:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4e:	2b22      	cmp	r3, #34	; 0x22
 8005e50:	f040 8186 	bne.w	8006160 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e5a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e5e:	e129      	b.n	80060b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e72:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005e76:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d053      	beq.n	8005f5e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d011      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005edc:	f043 0201 	orr.w	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d011      	beq.n	8005f16 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2202      	movs	r2, #2
 8005f04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f043 0204 	orr.w	r2, r3, #4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d011      	beq.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2204      	movs	r2, #4
 8005f34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3c:	f043 0202 	orr.w	r2, r3, #2
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d006      	beq.n	8005f5e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fa fd25 	bl	80009a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 80a4 	bne.w	80060b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f92:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e2      	bne.n	8005f6c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005fce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e1      	bne.n	8005fa6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a5f      	ldr	r2, [pc, #380]	; (8006178 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d021      	beq.n	8006044 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01a      	beq.n	8006044 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800601c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006030:	65bb      	str	r3, [r7, #88]	; 0x58
 8006032:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800603e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e4      	bne.n	800600e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d130      	bne.n	80060ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	f023 0310 	bic.w	r3, r3, #16
 8006066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
 8006076:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800607a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e4      	bne.n	8006052 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b10      	cmp	r3, #16
 8006094:	d103      	bne.n	800609e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2210      	movs	r2, #16
 800609c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fe fbb2 	bl	8004810 <HAL_UARTEx_RxEventCallback>
 80060ac:	e002      	b.n	80060b4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fa fca6 	bl	8000a00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d006      	beq.n	80060ca <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80060bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f47f aecb 	bne.w	8005e60 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060d0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d049      	beq.n	8006170 <UART_RxISR_16BIT_FIFOEN+0x358>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d242      	bcs.n	8006170 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	623b      	str	r3, [r7, #32]
   return(result);
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800610e:	633a      	str	r2, [r7, #48]	; 0x30
 8006110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e3      	bne.n	80060ea <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006126:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	60fb      	str	r3, [r7, #12]
   return(result);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f043 0320 	orr.w	r3, r3, #32
 800613c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	69b9      	ldr	r1, [r7, #24]
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	617b      	str	r3, [r7, #20]
   return(result);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e4      	bne.n	8006128 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800615e:	e007      	b.n	8006170 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0208 	orr.w	r2, r2, #8
 800616e:	619a      	str	r2, [r3, #24]
}
 8006170:	bf00      	nop
 8006172:	37b8      	adds	r7, #184	; 0xb8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40008000 	.word	0x40008000
 800617c:	08005901 	.word	0x08005901

08006180 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr

080061a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_UARTEx_DisableFifoMode+0x16>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e027      	b.n	800621c <HAL_UARTEx_DisableFifoMode+0x66>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	; 0x24
 80061d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr

08006226 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800623a:	2302      	movs	r3, #2
 800623c:	e02d      	b.n	800629a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	; 0x24
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f850 	bl	8006320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e02d      	b.n	8006316 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2224      	movs	r2, #36	; 0x24
 80062c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f812 	bl	8006320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800632c:	2b00      	cmp	r3, #0
 800632e:	d108      	bne.n	8006342 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006340:	e031      	b.n	80063a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006342:	2308      	movs	r3, #8
 8006344:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006346:	2308      	movs	r3, #8
 8006348:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	0e5b      	lsrs	r3, r3, #25
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	0f5b      	lsrs	r3, r3, #29
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	7b3a      	ldrb	r2, [r7, #12]
 800636e:	4910      	ldr	r1, [pc, #64]	; (80063b0 <UARTEx_SetNbDataToProcess+0x90>)
 8006370:	5c8a      	ldrb	r2, [r1, r2]
 8006372:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006376:	7b3a      	ldrb	r2, [r7, #12]
 8006378:	490e      	ldr	r1, [pc, #56]	; (80063b4 <UARTEx_SetNbDataToProcess+0x94>)
 800637a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800637c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	7b7a      	ldrb	r2, [r7, #13]
 800638c:	4908      	ldr	r1, [pc, #32]	; (80063b0 <UARTEx_SetNbDataToProcess+0x90>)
 800638e:	5c8a      	ldrb	r2, [r1, r2]
 8006390:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006394:	7b7a      	ldrb	r2, [r7, #13]
 8006396:	4907      	ldr	r1, [pc, #28]	; (80063b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006398:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800639a:	fb93 f3f2 	sdiv	r3, r3, r2
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr
 80063b0:	08006e84 	.word	0x08006e84
 80063b4:	08006e8c 	.word	0x08006e8c

080063b8 <__errno>:
 80063b8:	4b01      	ldr	r3, [pc, #4]	; (80063c0 <__errno+0x8>)
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	2000000c 	.word	0x2000000c

080063c4 <__libc_init_array>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	4d0d      	ldr	r5, [pc, #52]	; (80063fc <__libc_init_array+0x38>)
 80063c8:	4c0d      	ldr	r4, [pc, #52]	; (8006400 <__libc_init_array+0x3c>)
 80063ca:	1b64      	subs	r4, r4, r5
 80063cc:	10a4      	asrs	r4, r4, #2
 80063ce:	2600      	movs	r6, #0
 80063d0:	42a6      	cmp	r6, r4
 80063d2:	d109      	bne.n	80063e8 <__libc_init_array+0x24>
 80063d4:	4d0b      	ldr	r5, [pc, #44]	; (8006404 <__libc_init_array+0x40>)
 80063d6:	4c0c      	ldr	r4, [pc, #48]	; (8006408 <__libc_init_array+0x44>)
 80063d8:	f000 fca0 	bl	8006d1c <_init>
 80063dc:	1b64      	subs	r4, r4, r5
 80063de:	10a4      	asrs	r4, r4, #2
 80063e0:	2600      	movs	r6, #0
 80063e2:	42a6      	cmp	r6, r4
 80063e4:	d105      	bne.n	80063f2 <__libc_init_array+0x2e>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ec:	4798      	blx	r3
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7ee      	b.n	80063d0 <__libc_init_array+0xc>
 80063f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f6:	4798      	blx	r3
 80063f8:	3601      	adds	r6, #1
 80063fa:	e7f2      	b.n	80063e2 <__libc_init_array+0x1e>
 80063fc:	08006ed0 	.word	0x08006ed0
 8006400:	08006ed0 	.word	0x08006ed0
 8006404:	08006ed0 	.word	0x08006ed0
 8006408:	08006ed4 	.word	0x08006ed4

0800640c <memcpy>:
 800640c:	440a      	add	r2, r1
 800640e:	4291      	cmp	r1, r2
 8006410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006414:	d100      	bne.n	8006418 <memcpy+0xc>
 8006416:	4770      	bx	lr
 8006418:	b510      	push	{r4, lr}
 800641a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800641e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006422:	4291      	cmp	r1, r2
 8006424:	d1f9      	bne.n	800641a <memcpy+0xe>
 8006426:	bd10      	pop	{r4, pc}

08006428 <memset>:
 8006428:	4402      	add	r2, r0
 800642a:	4603      	mov	r3, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <sniprintf>:
 8006438:	b40c      	push	{r2, r3}
 800643a:	b530      	push	{r4, r5, lr}
 800643c:	4b17      	ldr	r3, [pc, #92]	; (800649c <sniprintf+0x64>)
 800643e:	1e0c      	subs	r4, r1, #0
 8006440:	681d      	ldr	r5, [r3, #0]
 8006442:	b09d      	sub	sp, #116	; 0x74
 8006444:	da08      	bge.n	8006458 <sniprintf+0x20>
 8006446:	238b      	movs	r3, #139	; 0x8b
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800644e:	b01d      	add	sp, #116	; 0x74
 8006450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006454:	b002      	add	sp, #8
 8006456:	4770      	bx	lr
 8006458:	f44f 7302 	mov.w	r3, #520	; 0x208
 800645c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006460:	bf14      	ite	ne
 8006462:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006466:	4623      	moveq	r3, r4
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	9307      	str	r3, [sp, #28]
 800646c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006470:	9002      	str	r0, [sp, #8]
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006478:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800647a:	ab21      	add	r3, sp, #132	; 0x84
 800647c:	a902      	add	r1, sp, #8
 800647e:	4628      	mov	r0, r5
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	f000 f869 	bl	8006558 <_svfiprintf_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	bfbc      	itt	lt
 800648a:	238b      	movlt	r3, #139	; 0x8b
 800648c:	602b      	strlt	r3, [r5, #0]
 800648e:	2c00      	cmp	r4, #0
 8006490:	d0dd      	beq.n	800644e <sniprintf+0x16>
 8006492:	9b02      	ldr	r3, [sp, #8]
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e7d9      	b.n	800644e <sniprintf+0x16>
 800649a:	bf00      	nop
 800649c:	2000000c 	.word	0x2000000c

080064a0 <__ssputs_r>:
 80064a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	688e      	ldr	r6, [r1, #8]
 80064a6:	429e      	cmp	r6, r3
 80064a8:	4682      	mov	sl, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	4690      	mov	r8, r2
 80064ae:	461f      	mov	r7, r3
 80064b0:	d838      	bhi.n	8006524 <__ssputs_r+0x84>
 80064b2:	898a      	ldrh	r2, [r1, #12]
 80064b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064b8:	d032      	beq.n	8006520 <__ssputs_r+0x80>
 80064ba:	6825      	ldr	r5, [r4, #0]
 80064bc:	6909      	ldr	r1, [r1, #16]
 80064be:	eba5 0901 	sub.w	r9, r5, r1
 80064c2:	6965      	ldr	r5, [r4, #20]
 80064c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064cc:	3301      	adds	r3, #1
 80064ce:	444b      	add	r3, r9
 80064d0:	106d      	asrs	r5, r5, #1
 80064d2:	429d      	cmp	r5, r3
 80064d4:	bf38      	it	cc
 80064d6:	461d      	movcc	r5, r3
 80064d8:	0553      	lsls	r3, r2, #21
 80064da:	d531      	bpl.n	8006540 <__ssputs_r+0xa0>
 80064dc:	4629      	mov	r1, r5
 80064de:	f000 fb53 	bl	8006b88 <_malloc_r>
 80064e2:	4606      	mov	r6, r0
 80064e4:	b950      	cbnz	r0, 80064fc <__ssputs_r+0x5c>
 80064e6:	230c      	movs	r3, #12
 80064e8:	f8ca 3000 	str.w	r3, [sl]
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fc:	6921      	ldr	r1, [r4, #16]
 80064fe:	464a      	mov	r2, r9
 8006500:	f7ff ff84 	bl	800640c <memcpy>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	6126      	str	r6, [r4, #16]
 8006512:	6165      	str	r5, [r4, #20]
 8006514:	444e      	add	r6, r9
 8006516:	eba5 0509 	sub.w	r5, r5, r9
 800651a:	6026      	str	r6, [r4, #0]
 800651c:	60a5      	str	r5, [r4, #8]
 800651e:	463e      	mov	r6, r7
 8006520:	42be      	cmp	r6, r7
 8006522:	d900      	bls.n	8006526 <__ssputs_r+0x86>
 8006524:	463e      	mov	r6, r7
 8006526:	6820      	ldr	r0, [r4, #0]
 8006528:	4632      	mov	r2, r6
 800652a:	4641      	mov	r1, r8
 800652c:	f000 faa8 	bl	8006a80 <memmove>
 8006530:	68a3      	ldr	r3, [r4, #8]
 8006532:	1b9b      	subs	r3, r3, r6
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	4433      	add	r3, r6
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	2000      	movs	r0, #0
 800653e:	e7db      	b.n	80064f8 <__ssputs_r+0x58>
 8006540:	462a      	mov	r2, r5
 8006542:	f000 fb95 	bl	8006c70 <_realloc_r>
 8006546:	4606      	mov	r6, r0
 8006548:	2800      	cmp	r0, #0
 800654a:	d1e1      	bne.n	8006510 <__ssputs_r+0x70>
 800654c:	6921      	ldr	r1, [r4, #16]
 800654e:	4650      	mov	r0, sl
 8006550:	f000 fab0 	bl	8006ab4 <_free_r>
 8006554:	e7c7      	b.n	80064e6 <__ssputs_r+0x46>
	...

08006558 <_svfiprintf_r>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	4698      	mov	r8, r3
 800655e:	898b      	ldrh	r3, [r1, #12]
 8006560:	061b      	lsls	r3, r3, #24
 8006562:	b09d      	sub	sp, #116	; 0x74
 8006564:	4607      	mov	r7, r0
 8006566:	460d      	mov	r5, r1
 8006568:	4614      	mov	r4, r2
 800656a:	d50e      	bpl.n	800658a <_svfiprintf_r+0x32>
 800656c:	690b      	ldr	r3, [r1, #16]
 800656e:	b963      	cbnz	r3, 800658a <_svfiprintf_r+0x32>
 8006570:	2140      	movs	r1, #64	; 0x40
 8006572:	f000 fb09 	bl	8006b88 <_malloc_r>
 8006576:	6028      	str	r0, [r5, #0]
 8006578:	6128      	str	r0, [r5, #16]
 800657a:	b920      	cbnz	r0, 8006586 <_svfiprintf_r+0x2e>
 800657c:	230c      	movs	r3, #12
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006584:	e0d1      	b.n	800672a <_svfiprintf_r+0x1d2>
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	616b      	str	r3, [r5, #20]
 800658a:	2300      	movs	r3, #0
 800658c:	9309      	str	r3, [sp, #36]	; 0x24
 800658e:	2320      	movs	r3, #32
 8006590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006594:	f8cd 800c 	str.w	r8, [sp, #12]
 8006598:	2330      	movs	r3, #48	; 0x30
 800659a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006744 <_svfiprintf_r+0x1ec>
 800659e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065a2:	f04f 0901 	mov.w	r9, #1
 80065a6:	4623      	mov	r3, r4
 80065a8:	469a      	mov	sl, r3
 80065aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ae:	b10a      	cbz	r2, 80065b4 <_svfiprintf_r+0x5c>
 80065b0:	2a25      	cmp	r2, #37	; 0x25
 80065b2:	d1f9      	bne.n	80065a8 <_svfiprintf_r+0x50>
 80065b4:	ebba 0b04 	subs.w	fp, sl, r4
 80065b8:	d00b      	beq.n	80065d2 <_svfiprintf_r+0x7a>
 80065ba:	465b      	mov	r3, fp
 80065bc:	4622      	mov	r2, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff ff6d 	bl	80064a0 <__ssputs_r>
 80065c6:	3001      	adds	r0, #1
 80065c8:	f000 80aa 	beq.w	8006720 <_svfiprintf_r+0x1c8>
 80065cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065ce:	445a      	add	r2, fp
 80065d0:	9209      	str	r2, [sp, #36]	; 0x24
 80065d2:	f89a 3000 	ldrb.w	r3, [sl]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80a2 	beq.w	8006720 <_svfiprintf_r+0x1c8>
 80065dc:	2300      	movs	r3, #0
 80065de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e6:	f10a 0a01 	add.w	sl, sl, #1
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	9307      	str	r3, [sp, #28]
 80065ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065f2:	931a      	str	r3, [sp, #104]	; 0x68
 80065f4:	4654      	mov	r4, sl
 80065f6:	2205      	movs	r2, #5
 80065f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fc:	4851      	ldr	r0, [pc, #324]	; (8006744 <_svfiprintf_r+0x1ec>)
 80065fe:	f7f9 fdbf 	bl	8000180 <memchr>
 8006602:	9a04      	ldr	r2, [sp, #16]
 8006604:	b9d8      	cbnz	r0, 800663e <_svfiprintf_r+0xe6>
 8006606:	06d0      	lsls	r0, r2, #27
 8006608:	bf44      	itt	mi
 800660a:	2320      	movmi	r3, #32
 800660c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006610:	0711      	lsls	r1, r2, #28
 8006612:	bf44      	itt	mi
 8006614:	232b      	movmi	r3, #43	; 0x2b
 8006616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800661a:	f89a 3000 	ldrb.w	r3, [sl]
 800661e:	2b2a      	cmp	r3, #42	; 0x2a
 8006620:	d015      	beq.n	800664e <_svfiprintf_r+0xf6>
 8006622:	9a07      	ldr	r2, [sp, #28]
 8006624:	4654      	mov	r4, sl
 8006626:	2000      	movs	r0, #0
 8006628:	f04f 0c0a 	mov.w	ip, #10
 800662c:	4621      	mov	r1, r4
 800662e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006632:	3b30      	subs	r3, #48	; 0x30
 8006634:	2b09      	cmp	r3, #9
 8006636:	d94e      	bls.n	80066d6 <_svfiprintf_r+0x17e>
 8006638:	b1b0      	cbz	r0, 8006668 <_svfiprintf_r+0x110>
 800663a:	9207      	str	r2, [sp, #28]
 800663c:	e014      	b.n	8006668 <_svfiprintf_r+0x110>
 800663e:	eba0 0308 	sub.w	r3, r0, r8
 8006642:	fa09 f303 	lsl.w	r3, r9, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	9304      	str	r3, [sp, #16]
 800664a:	46a2      	mov	sl, r4
 800664c:	e7d2      	b.n	80065f4 <_svfiprintf_r+0x9c>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	1d19      	adds	r1, r3, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9103      	str	r1, [sp, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfbb      	ittet	lt
 800665a:	425b      	neglt	r3, r3
 800665c:	f042 0202 	orrlt.w	r2, r2, #2
 8006660:	9307      	strge	r3, [sp, #28]
 8006662:	9307      	strlt	r3, [sp, #28]
 8006664:	bfb8      	it	lt
 8006666:	9204      	strlt	r2, [sp, #16]
 8006668:	7823      	ldrb	r3, [r4, #0]
 800666a:	2b2e      	cmp	r3, #46	; 0x2e
 800666c:	d10c      	bne.n	8006688 <_svfiprintf_r+0x130>
 800666e:	7863      	ldrb	r3, [r4, #1]
 8006670:	2b2a      	cmp	r3, #42	; 0x2a
 8006672:	d135      	bne.n	80066e0 <_svfiprintf_r+0x188>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	9203      	str	r2, [sp, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	bfb8      	it	lt
 8006680:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006684:	3402      	adds	r4, #2
 8006686:	9305      	str	r3, [sp, #20]
 8006688:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006748 <_svfiprintf_r+0x1f0>
 800668c:	7821      	ldrb	r1, [r4, #0]
 800668e:	2203      	movs	r2, #3
 8006690:	4650      	mov	r0, sl
 8006692:	f7f9 fd75 	bl	8000180 <memchr>
 8006696:	b140      	cbz	r0, 80066aa <_svfiprintf_r+0x152>
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	eba0 000a 	sub.w	r0, r0, sl
 800669e:	fa03 f000 	lsl.w	r0, r3, r0
 80066a2:	9b04      	ldr	r3, [sp, #16]
 80066a4:	4303      	orrs	r3, r0
 80066a6:	3401      	adds	r4, #1
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ae:	4827      	ldr	r0, [pc, #156]	; (800674c <_svfiprintf_r+0x1f4>)
 80066b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066b4:	2206      	movs	r2, #6
 80066b6:	f7f9 fd63 	bl	8000180 <memchr>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d038      	beq.n	8006730 <_svfiprintf_r+0x1d8>
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <_svfiprintf_r+0x1f8>)
 80066c0:	bb1b      	cbnz	r3, 800670a <_svfiprintf_r+0x1b2>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	3307      	adds	r3, #7
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	3308      	adds	r3, #8
 80066cc:	9303      	str	r3, [sp, #12]
 80066ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d0:	4433      	add	r3, r6
 80066d2:	9309      	str	r3, [sp, #36]	; 0x24
 80066d4:	e767      	b.n	80065a6 <_svfiprintf_r+0x4e>
 80066d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80066da:	460c      	mov	r4, r1
 80066dc:	2001      	movs	r0, #1
 80066de:	e7a5      	b.n	800662c <_svfiprintf_r+0xd4>
 80066e0:	2300      	movs	r3, #0
 80066e2:	3401      	adds	r4, #1
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	4619      	mov	r1, r3
 80066e8:	f04f 0c0a 	mov.w	ip, #10
 80066ec:	4620      	mov	r0, r4
 80066ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066f2:	3a30      	subs	r2, #48	; 0x30
 80066f4:	2a09      	cmp	r2, #9
 80066f6:	d903      	bls.n	8006700 <_svfiprintf_r+0x1a8>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0c5      	beq.n	8006688 <_svfiprintf_r+0x130>
 80066fc:	9105      	str	r1, [sp, #20]
 80066fe:	e7c3      	b.n	8006688 <_svfiprintf_r+0x130>
 8006700:	fb0c 2101 	mla	r1, ip, r1, r2
 8006704:	4604      	mov	r4, r0
 8006706:	2301      	movs	r3, #1
 8006708:	e7f0      	b.n	80066ec <_svfiprintf_r+0x194>
 800670a:	ab03      	add	r3, sp, #12
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	462a      	mov	r2, r5
 8006710:	4b10      	ldr	r3, [pc, #64]	; (8006754 <_svfiprintf_r+0x1fc>)
 8006712:	a904      	add	r1, sp, #16
 8006714:	4638      	mov	r0, r7
 8006716:	f3af 8000 	nop.w
 800671a:	1c42      	adds	r2, r0, #1
 800671c:	4606      	mov	r6, r0
 800671e:	d1d6      	bne.n	80066ce <_svfiprintf_r+0x176>
 8006720:	89ab      	ldrh	r3, [r5, #12]
 8006722:	065b      	lsls	r3, r3, #25
 8006724:	f53f af2c 	bmi.w	8006580 <_svfiprintf_r+0x28>
 8006728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800672a:	b01d      	add	sp, #116	; 0x74
 800672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006730:	ab03      	add	r3, sp, #12
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	462a      	mov	r2, r5
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <_svfiprintf_r+0x1fc>)
 8006738:	a904      	add	r1, sp, #16
 800673a:	4638      	mov	r0, r7
 800673c:	f000 f87a 	bl	8006834 <_printf_i>
 8006740:	e7eb      	b.n	800671a <_svfiprintf_r+0x1c2>
 8006742:	bf00      	nop
 8006744:	08006e94 	.word	0x08006e94
 8006748:	08006e9a 	.word	0x08006e9a
 800674c:	08006e9e 	.word	0x08006e9e
 8006750:	00000000 	.word	0x00000000
 8006754:	080064a1 	.word	0x080064a1

08006758 <_printf_common>:
 8006758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	4616      	mov	r6, r2
 800675e:	4699      	mov	r9, r3
 8006760:	688a      	ldr	r2, [r1, #8]
 8006762:	690b      	ldr	r3, [r1, #16]
 8006764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006768:	4293      	cmp	r3, r2
 800676a:	bfb8      	it	lt
 800676c:	4613      	movlt	r3, r2
 800676e:	6033      	str	r3, [r6, #0]
 8006770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006774:	4607      	mov	r7, r0
 8006776:	460c      	mov	r4, r1
 8006778:	b10a      	cbz	r2, 800677e <_printf_common+0x26>
 800677a:	3301      	adds	r3, #1
 800677c:	6033      	str	r3, [r6, #0]
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	0699      	lsls	r1, r3, #26
 8006782:	bf42      	ittt	mi
 8006784:	6833      	ldrmi	r3, [r6, #0]
 8006786:	3302      	addmi	r3, #2
 8006788:	6033      	strmi	r3, [r6, #0]
 800678a:	6825      	ldr	r5, [r4, #0]
 800678c:	f015 0506 	ands.w	r5, r5, #6
 8006790:	d106      	bne.n	80067a0 <_printf_common+0x48>
 8006792:	f104 0a19 	add.w	sl, r4, #25
 8006796:	68e3      	ldr	r3, [r4, #12]
 8006798:	6832      	ldr	r2, [r6, #0]
 800679a:	1a9b      	subs	r3, r3, r2
 800679c:	42ab      	cmp	r3, r5
 800679e:	dc26      	bgt.n	80067ee <_printf_common+0x96>
 80067a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067a4:	1e13      	subs	r3, r2, #0
 80067a6:	6822      	ldr	r2, [r4, #0]
 80067a8:	bf18      	it	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	0692      	lsls	r2, r2, #26
 80067ae:	d42b      	bmi.n	8006808 <_printf_common+0xb0>
 80067b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067b4:	4649      	mov	r1, r9
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c0      	blx	r8
 80067ba:	3001      	adds	r0, #1
 80067bc:	d01e      	beq.n	80067fc <_printf_common+0xa4>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	68e5      	ldr	r5, [r4, #12]
 80067c2:	6832      	ldr	r2, [r6, #0]
 80067c4:	f003 0306 	and.w	r3, r3, #6
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	bf08      	it	eq
 80067cc:	1aad      	subeq	r5, r5, r2
 80067ce:	68a3      	ldr	r3, [r4, #8]
 80067d0:	6922      	ldr	r2, [r4, #16]
 80067d2:	bf0c      	ite	eq
 80067d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d8:	2500      	movne	r5, #0
 80067da:	4293      	cmp	r3, r2
 80067dc:	bfc4      	itt	gt
 80067de:	1a9b      	subgt	r3, r3, r2
 80067e0:	18ed      	addgt	r5, r5, r3
 80067e2:	2600      	movs	r6, #0
 80067e4:	341a      	adds	r4, #26
 80067e6:	42b5      	cmp	r5, r6
 80067e8:	d11a      	bne.n	8006820 <_printf_common+0xc8>
 80067ea:	2000      	movs	r0, #0
 80067ec:	e008      	b.n	8006800 <_printf_common+0xa8>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4652      	mov	r2, sl
 80067f2:	4649      	mov	r1, r9
 80067f4:	4638      	mov	r0, r7
 80067f6:	47c0      	blx	r8
 80067f8:	3001      	adds	r0, #1
 80067fa:	d103      	bne.n	8006804 <_printf_common+0xac>
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006804:	3501      	adds	r5, #1
 8006806:	e7c6      	b.n	8006796 <_printf_common+0x3e>
 8006808:	18e1      	adds	r1, r4, r3
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	2030      	movs	r0, #48	; 0x30
 800680e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006812:	4422      	add	r2, r4
 8006814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800681c:	3302      	adds	r3, #2
 800681e:	e7c7      	b.n	80067b0 <_printf_common+0x58>
 8006820:	2301      	movs	r3, #1
 8006822:	4622      	mov	r2, r4
 8006824:	4649      	mov	r1, r9
 8006826:	4638      	mov	r0, r7
 8006828:	47c0      	blx	r8
 800682a:	3001      	adds	r0, #1
 800682c:	d0e6      	beq.n	80067fc <_printf_common+0xa4>
 800682e:	3601      	adds	r6, #1
 8006830:	e7d9      	b.n	80067e6 <_printf_common+0x8e>
	...

08006834 <_printf_i>:
 8006834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006838:	7e0f      	ldrb	r7, [r1, #24]
 800683a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800683c:	2f78      	cmp	r7, #120	; 0x78
 800683e:	4691      	mov	r9, r2
 8006840:	4680      	mov	r8, r0
 8006842:	460c      	mov	r4, r1
 8006844:	469a      	mov	sl, r3
 8006846:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800684a:	d807      	bhi.n	800685c <_printf_i+0x28>
 800684c:	2f62      	cmp	r7, #98	; 0x62
 800684e:	d80a      	bhi.n	8006866 <_printf_i+0x32>
 8006850:	2f00      	cmp	r7, #0
 8006852:	f000 80d8 	beq.w	8006a06 <_printf_i+0x1d2>
 8006856:	2f58      	cmp	r7, #88	; 0x58
 8006858:	f000 80a3 	beq.w	80069a2 <_printf_i+0x16e>
 800685c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006864:	e03a      	b.n	80068dc <_printf_i+0xa8>
 8006866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800686a:	2b15      	cmp	r3, #21
 800686c:	d8f6      	bhi.n	800685c <_printf_i+0x28>
 800686e:	a101      	add	r1, pc, #4	; (adr r1, 8006874 <_printf_i+0x40>)
 8006870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006874:	080068cd 	.word	0x080068cd
 8006878:	080068e1 	.word	0x080068e1
 800687c:	0800685d 	.word	0x0800685d
 8006880:	0800685d 	.word	0x0800685d
 8006884:	0800685d 	.word	0x0800685d
 8006888:	0800685d 	.word	0x0800685d
 800688c:	080068e1 	.word	0x080068e1
 8006890:	0800685d 	.word	0x0800685d
 8006894:	0800685d 	.word	0x0800685d
 8006898:	0800685d 	.word	0x0800685d
 800689c:	0800685d 	.word	0x0800685d
 80068a0:	080069ed 	.word	0x080069ed
 80068a4:	08006911 	.word	0x08006911
 80068a8:	080069cf 	.word	0x080069cf
 80068ac:	0800685d 	.word	0x0800685d
 80068b0:	0800685d 	.word	0x0800685d
 80068b4:	08006a0f 	.word	0x08006a0f
 80068b8:	0800685d 	.word	0x0800685d
 80068bc:	08006911 	.word	0x08006911
 80068c0:	0800685d 	.word	0x0800685d
 80068c4:	0800685d 	.word	0x0800685d
 80068c8:	080069d7 	.word	0x080069d7
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	1d1a      	adds	r2, r3, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	602a      	str	r2, [r5, #0]
 80068d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068dc:	2301      	movs	r3, #1
 80068de:	e0a3      	b.n	8006a28 <_printf_i+0x1f4>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	6829      	ldr	r1, [r5, #0]
 80068e4:	0606      	lsls	r6, r0, #24
 80068e6:	f101 0304 	add.w	r3, r1, #4
 80068ea:	d50a      	bpl.n	8006902 <_printf_i+0xce>
 80068ec:	680e      	ldr	r6, [r1, #0]
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	2e00      	cmp	r6, #0
 80068f2:	da03      	bge.n	80068fc <_printf_i+0xc8>
 80068f4:	232d      	movs	r3, #45	; 0x2d
 80068f6:	4276      	negs	r6, r6
 80068f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068fc:	485e      	ldr	r0, [pc, #376]	; (8006a78 <_printf_i+0x244>)
 80068fe:	230a      	movs	r3, #10
 8006900:	e019      	b.n	8006936 <_printf_i+0x102>
 8006902:	680e      	ldr	r6, [r1, #0]
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	f010 0f40 	tst.w	r0, #64	; 0x40
 800690a:	bf18      	it	ne
 800690c:	b236      	sxthne	r6, r6
 800690e:	e7ef      	b.n	80068f0 <_printf_i+0xbc>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	6820      	ldr	r0, [r4, #0]
 8006914:	1d19      	adds	r1, r3, #4
 8006916:	6029      	str	r1, [r5, #0]
 8006918:	0601      	lsls	r1, r0, #24
 800691a:	d501      	bpl.n	8006920 <_printf_i+0xec>
 800691c:	681e      	ldr	r6, [r3, #0]
 800691e:	e002      	b.n	8006926 <_printf_i+0xf2>
 8006920:	0646      	lsls	r6, r0, #25
 8006922:	d5fb      	bpl.n	800691c <_printf_i+0xe8>
 8006924:	881e      	ldrh	r6, [r3, #0]
 8006926:	4854      	ldr	r0, [pc, #336]	; (8006a78 <_printf_i+0x244>)
 8006928:	2f6f      	cmp	r7, #111	; 0x6f
 800692a:	bf0c      	ite	eq
 800692c:	2308      	moveq	r3, #8
 800692e:	230a      	movne	r3, #10
 8006930:	2100      	movs	r1, #0
 8006932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006936:	6865      	ldr	r5, [r4, #4]
 8006938:	60a5      	str	r5, [r4, #8]
 800693a:	2d00      	cmp	r5, #0
 800693c:	bfa2      	ittt	ge
 800693e:	6821      	ldrge	r1, [r4, #0]
 8006940:	f021 0104 	bicge.w	r1, r1, #4
 8006944:	6021      	strge	r1, [r4, #0]
 8006946:	b90e      	cbnz	r6, 800694c <_printf_i+0x118>
 8006948:	2d00      	cmp	r5, #0
 800694a:	d04d      	beq.n	80069e8 <_printf_i+0x1b4>
 800694c:	4615      	mov	r5, r2
 800694e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006952:	fb03 6711 	mls	r7, r3, r1, r6
 8006956:	5dc7      	ldrb	r7, [r0, r7]
 8006958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800695c:	4637      	mov	r7, r6
 800695e:	42bb      	cmp	r3, r7
 8006960:	460e      	mov	r6, r1
 8006962:	d9f4      	bls.n	800694e <_printf_i+0x11a>
 8006964:	2b08      	cmp	r3, #8
 8006966:	d10b      	bne.n	8006980 <_printf_i+0x14c>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	07de      	lsls	r6, r3, #31
 800696c:	d508      	bpl.n	8006980 <_printf_i+0x14c>
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	6861      	ldr	r1, [r4, #4]
 8006972:	4299      	cmp	r1, r3
 8006974:	bfde      	ittt	le
 8006976:	2330      	movle	r3, #48	; 0x30
 8006978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800697c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006980:	1b52      	subs	r2, r2, r5
 8006982:	6122      	str	r2, [r4, #16]
 8006984:	f8cd a000 	str.w	sl, [sp]
 8006988:	464b      	mov	r3, r9
 800698a:	aa03      	add	r2, sp, #12
 800698c:	4621      	mov	r1, r4
 800698e:	4640      	mov	r0, r8
 8006990:	f7ff fee2 	bl	8006758 <_printf_common>
 8006994:	3001      	adds	r0, #1
 8006996:	d14c      	bne.n	8006a32 <_printf_i+0x1fe>
 8006998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800699c:	b004      	add	sp, #16
 800699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a2:	4835      	ldr	r0, [pc, #212]	; (8006a78 <_printf_i+0x244>)
 80069a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069a8:	6829      	ldr	r1, [r5, #0]
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80069b0:	6029      	str	r1, [r5, #0]
 80069b2:	061d      	lsls	r5, r3, #24
 80069b4:	d514      	bpl.n	80069e0 <_printf_i+0x1ac>
 80069b6:	07df      	lsls	r7, r3, #31
 80069b8:	bf44      	itt	mi
 80069ba:	f043 0320 	orrmi.w	r3, r3, #32
 80069be:	6023      	strmi	r3, [r4, #0]
 80069c0:	b91e      	cbnz	r6, 80069ca <_printf_i+0x196>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f023 0320 	bic.w	r3, r3, #32
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	2310      	movs	r3, #16
 80069cc:	e7b0      	b.n	8006930 <_printf_i+0xfc>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	f043 0320 	orr.w	r3, r3, #32
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	2378      	movs	r3, #120	; 0x78
 80069d8:	4828      	ldr	r0, [pc, #160]	; (8006a7c <_printf_i+0x248>)
 80069da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069de:	e7e3      	b.n	80069a8 <_printf_i+0x174>
 80069e0:	0659      	lsls	r1, r3, #25
 80069e2:	bf48      	it	mi
 80069e4:	b2b6      	uxthmi	r6, r6
 80069e6:	e7e6      	b.n	80069b6 <_printf_i+0x182>
 80069e8:	4615      	mov	r5, r2
 80069ea:	e7bb      	b.n	8006964 <_printf_i+0x130>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	6826      	ldr	r6, [r4, #0]
 80069f0:	6961      	ldr	r1, [r4, #20]
 80069f2:	1d18      	adds	r0, r3, #4
 80069f4:	6028      	str	r0, [r5, #0]
 80069f6:	0635      	lsls	r5, r6, #24
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	d501      	bpl.n	8006a00 <_printf_i+0x1cc>
 80069fc:	6019      	str	r1, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <_printf_i+0x1d2>
 8006a00:	0670      	lsls	r0, r6, #25
 8006a02:	d5fb      	bpl.n	80069fc <_printf_i+0x1c8>
 8006a04:	8019      	strh	r1, [r3, #0]
 8006a06:	2300      	movs	r3, #0
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	4615      	mov	r5, r2
 8006a0c:	e7ba      	b.n	8006984 <_printf_i+0x150>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	1d1a      	adds	r2, r3, #4
 8006a12:	602a      	str	r2, [r5, #0]
 8006a14:	681d      	ldr	r5, [r3, #0]
 8006a16:	6862      	ldr	r2, [r4, #4]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f7f9 fbb0 	bl	8000180 <memchr>
 8006a20:	b108      	cbz	r0, 8006a26 <_printf_i+0x1f2>
 8006a22:	1b40      	subs	r0, r0, r5
 8006a24:	6060      	str	r0, [r4, #4]
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a30:	e7a8      	b.n	8006984 <_printf_i+0x150>
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4649      	mov	r1, r9
 8006a38:	4640      	mov	r0, r8
 8006a3a:	47d0      	blx	sl
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d0ab      	beq.n	8006998 <_printf_i+0x164>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	079b      	lsls	r3, r3, #30
 8006a44:	d413      	bmi.n	8006a6e <_printf_i+0x23a>
 8006a46:	68e0      	ldr	r0, [r4, #12]
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	4298      	cmp	r0, r3
 8006a4c:	bfb8      	it	lt
 8006a4e:	4618      	movlt	r0, r3
 8006a50:	e7a4      	b.n	800699c <_printf_i+0x168>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4632      	mov	r2, r6
 8006a56:	4649      	mov	r1, r9
 8006a58:	4640      	mov	r0, r8
 8006a5a:	47d0      	blx	sl
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d09b      	beq.n	8006998 <_printf_i+0x164>
 8006a60:	3501      	adds	r5, #1
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	9903      	ldr	r1, [sp, #12]
 8006a66:	1a5b      	subs	r3, r3, r1
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	dcf2      	bgt.n	8006a52 <_printf_i+0x21e>
 8006a6c:	e7eb      	b.n	8006a46 <_printf_i+0x212>
 8006a6e:	2500      	movs	r5, #0
 8006a70:	f104 0619 	add.w	r6, r4, #25
 8006a74:	e7f5      	b.n	8006a62 <_printf_i+0x22e>
 8006a76:	bf00      	nop
 8006a78:	08006ea5 	.word	0x08006ea5
 8006a7c:	08006eb6 	.word	0x08006eb6

08006a80 <memmove>:
 8006a80:	4288      	cmp	r0, r1
 8006a82:	b510      	push	{r4, lr}
 8006a84:	eb01 0402 	add.w	r4, r1, r2
 8006a88:	d902      	bls.n	8006a90 <memmove+0x10>
 8006a8a:	4284      	cmp	r4, r0
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	d807      	bhi.n	8006aa0 <memmove+0x20>
 8006a90:	1e43      	subs	r3, r0, #1
 8006a92:	42a1      	cmp	r1, r4
 8006a94:	d008      	beq.n	8006aa8 <memmove+0x28>
 8006a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a9e:	e7f8      	b.n	8006a92 <memmove+0x12>
 8006aa0:	4402      	add	r2, r0
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	428a      	cmp	r2, r1
 8006aa6:	d100      	bne.n	8006aaa <memmove+0x2a>
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ab2:	e7f7      	b.n	8006aa4 <memmove+0x24>

08006ab4 <_free_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d041      	beq.n	8006b40 <_free_r+0x8c>
 8006abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac0:	1f0c      	subs	r4, r1, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfb8      	it	lt
 8006ac6:	18e4      	addlt	r4, r4, r3
 8006ac8:	f000 f912 	bl	8006cf0 <__malloc_lock>
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <_free_r+0x90>)
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	b933      	cbnz	r3, 8006ae0 <_free_r+0x2c>
 8006ad2:	6063      	str	r3, [r4, #4]
 8006ad4:	6014      	str	r4, [r2, #0]
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006adc:	f000 b90e 	b.w	8006cfc <__malloc_unlock>
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d908      	bls.n	8006af6 <_free_r+0x42>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	1821      	adds	r1, r4, r0
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	bf01      	itttt	eq
 8006aec:	6819      	ldreq	r1, [r3, #0]
 8006aee:	685b      	ldreq	r3, [r3, #4]
 8006af0:	1809      	addeq	r1, r1, r0
 8006af2:	6021      	streq	r1, [r4, #0]
 8006af4:	e7ed      	b.n	8006ad2 <_free_r+0x1e>
 8006af6:	461a      	mov	r2, r3
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	b10b      	cbz	r3, 8006b00 <_free_r+0x4c>
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d9fa      	bls.n	8006af6 <_free_r+0x42>
 8006b00:	6811      	ldr	r1, [r2, #0]
 8006b02:	1850      	adds	r0, r2, r1
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	d10b      	bne.n	8006b20 <_free_r+0x6c>
 8006b08:	6820      	ldr	r0, [r4, #0]
 8006b0a:	4401      	add	r1, r0
 8006b0c:	1850      	adds	r0, r2, r1
 8006b0e:	4283      	cmp	r3, r0
 8006b10:	6011      	str	r1, [r2, #0]
 8006b12:	d1e0      	bne.n	8006ad6 <_free_r+0x22>
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	6053      	str	r3, [r2, #4]
 8006b1a:	4401      	add	r1, r0
 8006b1c:	6011      	str	r1, [r2, #0]
 8006b1e:	e7da      	b.n	8006ad6 <_free_r+0x22>
 8006b20:	d902      	bls.n	8006b28 <_free_r+0x74>
 8006b22:	230c      	movs	r3, #12
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	e7d6      	b.n	8006ad6 <_free_r+0x22>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	1821      	adds	r1, r4, r0
 8006b2c:	428b      	cmp	r3, r1
 8006b2e:	bf04      	itt	eq
 8006b30:	6819      	ldreq	r1, [r3, #0]
 8006b32:	685b      	ldreq	r3, [r3, #4]
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	bf04      	itt	eq
 8006b38:	1809      	addeq	r1, r1, r0
 8006b3a:	6021      	streq	r1, [r4, #0]
 8006b3c:	6054      	str	r4, [r2, #4]
 8006b3e:	e7ca      	b.n	8006ad6 <_free_r+0x22>
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	20000280 	.word	0x20000280

08006b48 <sbrk_aligned>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	4e0e      	ldr	r6, [pc, #56]	; (8006b84 <sbrk_aligned+0x3c>)
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	6831      	ldr	r1, [r6, #0]
 8006b50:	4605      	mov	r5, r0
 8006b52:	b911      	cbnz	r1, 8006b5a <sbrk_aligned+0x12>
 8006b54:	f000 f8bc 	bl	8006cd0 <_sbrk_r>
 8006b58:	6030      	str	r0, [r6, #0]
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f000 f8b7 	bl	8006cd0 <_sbrk_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d00a      	beq.n	8006b7c <sbrk_aligned+0x34>
 8006b66:	1cc4      	adds	r4, r0, #3
 8006b68:	f024 0403 	bic.w	r4, r4, #3
 8006b6c:	42a0      	cmp	r0, r4
 8006b6e:	d007      	beq.n	8006b80 <sbrk_aligned+0x38>
 8006b70:	1a21      	subs	r1, r4, r0
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 f8ac 	bl	8006cd0 <_sbrk_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d101      	bne.n	8006b80 <sbrk_aligned+0x38>
 8006b7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b80:	4620      	mov	r0, r4
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	20000284 	.word	0x20000284

08006b88 <_malloc_r>:
 8006b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8c:	1ccd      	adds	r5, r1, #3
 8006b8e:	f025 0503 	bic.w	r5, r5, #3
 8006b92:	3508      	adds	r5, #8
 8006b94:	2d0c      	cmp	r5, #12
 8006b96:	bf38      	it	cc
 8006b98:	250c      	movcc	r5, #12
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	db01      	blt.n	8006ba4 <_malloc_r+0x1c>
 8006ba0:	42a9      	cmp	r1, r5
 8006ba2:	d905      	bls.n	8006bb0 <_malloc_r+0x28>
 8006ba4:	230c      	movs	r3, #12
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	2600      	movs	r6, #0
 8006baa:	4630      	mov	r0, r6
 8006bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb0:	4e2e      	ldr	r6, [pc, #184]	; (8006c6c <_malloc_r+0xe4>)
 8006bb2:	f000 f89d 	bl	8006cf0 <__malloc_lock>
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	461c      	mov	r4, r3
 8006bba:	bb34      	cbnz	r4, 8006c0a <_malloc_r+0x82>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7ff ffc2 	bl	8006b48 <sbrk_aligned>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	d14d      	bne.n	8006c66 <_malloc_r+0xde>
 8006bca:	6834      	ldr	r4, [r6, #0]
 8006bcc:	4626      	mov	r6, r4
 8006bce:	2e00      	cmp	r6, #0
 8006bd0:	d140      	bne.n	8006c54 <_malloc_r+0xcc>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	eb04 0803 	add.w	r8, r4, r3
 8006bdc:	f000 f878 	bl	8006cd0 <_sbrk_r>
 8006be0:	4580      	cmp	r8, r0
 8006be2:	d13a      	bne.n	8006c5a <_malloc_r+0xd2>
 8006be4:	6821      	ldr	r1, [r4, #0]
 8006be6:	3503      	adds	r5, #3
 8006be8:	1a6d      	subs	r5, r5, r1
 8006bea:	f025 0503 	bic.w	r5, r5, #3
 8006bee:	3508      	adds	r5, #8
 8006bf0:	2d0c      	cmp	r5, #12
 8006bf2:	bf38      	it	cc
 8006bf4:	250c      	movcc	r5, #12
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ffa5 	bl	8006b48 <sbrk_aligned>
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d02b      	beq.n	8006c5a <_malloc_r+0xd2>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	442b      	add	r3, r5
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	e00e      	b.n	8006c28 <_malloc_r+0xa0>
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	1b52      	subs	r2, r2, r5
 8006c0e:	d41e      	bmi.n	8006c4e <_malloc_r+0xc6>
 8006c10:	2a0b      	cmp	r2, #11
 8006c12:	d916      	bls.n	8006c42 <_malloc_r+0xba>
 8006c14:	1961      	adds	r1, r4, r5
 8006c16:	42a3      	cmp	r3, r4
 8006c18:	6025      	str	r5, [r4, #0]
 8006c1a:	bf18      	it	ne
 8006c1c:	6059      	strne	r1, [r3, #4]
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	bf08      	it	eq
 8006c22:	6031      	streq	r1, [r6, #0]
 8006c24:	5162      	str	r2, [r4, r5]
 8006c26:	604b      	str	r3, [r1, #4]
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f104 060b 	add.w	r6, r4, #11
 8006c2e:	f000 f865 	bl	8006cfc <__malloc_unlock>
 8006c32:	f026 0607 	bic.w	r6, r6, #7
 8006c36:	1d23      	adds	r3, r4, #4
 8006c38:	1af2      	subs	r2, r6, r3
 8006c3a:	d0b6      	beq.n	8006baa <_malloc_r+0x22>
 8006c3c:	1b9b      	subs	r3, r3, r6
 8006c3e:	50a3      	str	r3, [r4, r2]
 8006c40:	e7b3      	b.n	8006baa <_malloc_r+0x22>
 8006c42:	6862      	ldr	r2, [r4, #4]
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	bf0c      	ite	eq
 8006c48:	6032      	streq	r2, [r6, #0]
 8006c4a:	605a      	strne	r2, [r3, #4]
 8006c4c:	e7ec      	b.n	8006c28 <_malloc_r+0xa0>
 8006c4e:	4623      	mov	r3, r4
 8006c50:	6864      	ldr	r4, [r4, #4]
 8006c52:	e7b2      	b.n	8006bba <_malloc_r+0x32>
 8006c54:	4634      	mov	r4, r6
 8006c56:	6876      	ldr	r6, [r6, #4]
 8006c58:	e7b9      	b.n	8006bce <_malloc_r+0x46>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	603b      	str	r3, [r7, #0]
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f000 f84c 	bl	8006cfc <__malloc_unlock>
 8006c64:	e7a1      	b.n	8006baa <_malloc_r+0x22>
 8006c66:	6025      	str	r5, [r4, #0]
 8006c68:	e7de      	b.n	8006c28 <_malloc_r+0xa0>
 8006c6a:	bf00      	nop
 8006c6c:	20000280 	.word	0x20000280

08006c70 <_realloc_r>:
 8006c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	4680      	mov	r8, r0
 8006c76:	4614      	mov	r4, r2
 8006c78:	460e      	mov	r6, r1
 8006c7a:	b921      	cbnz	r1, 8006c86 <_realloc_r+0x16>
 8006c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c80:	4611      	mov	r1, r2
 8006c82:	f7ff bf81 	b.w	8006b88 <_malloc_r>
 8006c86:	b92a      	cbnz	r2, 8006c94 <_realloc_r+0x24>
 8006c88:	f7ff ff14 	bl	8006ab4 <_free_r>
 8006c8c:	4625      	mov	r5, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c94:	f000 f838 	bl	8006d08 <_malloc_usable_size_r>
 8006c98:	4284      	cmp	r4, r0
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	d802      	bhi.n	8006ca4 <_realloc_r+0x34>
 8006c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ca2:	d812      	bhi.n	8006cca <_realloc_r+0x5a>
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	f7ff ff6e 	bl	8006b88 <_malloc_r>
 8006cac:	4605      	mov	r5, r0
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d0ed      	beq.n	8006c8e <_realloc_r+0x1e>
 8006cb2:	42bc      	cmp	r4, r7
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	bf28      	it	cs
 8006cba:	463a      	movcs	r2, r7
 8006cbc:	f7ff fba6 	bl	800640c <memcpy>
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	f7ff fef6 	bl	8006ab4 <_free_r>
 8006cc8:	e7e1      	b.n	8006c8e <_realloc_r+0x1e>
 8006cca:	4635      	mov	r5, r6
 8006ccc:	e7df      	b.n	8006c8e <_realloc_r+0x1e>
	...

08006cd0 <_sbrk_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d06      	ldr	r5, [pc, #24]	; (8006cec <_sbrk_r+0x1c>)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	f7fa fc94 	bl	8001608 <_sbrk>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_sbrk_r+0x1a>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_sbrk_r+0x1a>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20000288 	.word	0x20000288

08006cf0 <__malloc_lock>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__malloc_lock+0x8>)
 8006cf2:	f000 b811 	b.w	8006d18 <__retarget_lock_acquire_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	2000028c 	.word	0x2000028c

08006cfc <__malloc_unlock>:
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <__malloc_unlock+0x8>)
 8006cfe:	f000 b80c 	b.w	8006d1a <__retarget_lock_release_recursive>
 8006d02:	bf00      	nop
 8006d04:	2000028c 	.word	0x2000028c

08006d08 <_malloc_usable_size_r>:
 8006d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d0c:	1f18      	subs	r0, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfbc      	itt	lt
 8006d12:	580b      	ldrlt	r3, [r1, r0]
 8006d14:	18c0      	addlt	r0, r0, r3
 8006d16:	4770      	bx	lr

08006d18 <__retarget_lock_acquire_recursive>:
 8006d18:	4770      	bx	lr

08006d1a <__retarget_lock_release_recursive>:
 8006d1a:	4770      	bx	lr

08006d1c <_init>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	bf00      	nop
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr

08006d28 <_fini>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	bf00      	nop
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr
